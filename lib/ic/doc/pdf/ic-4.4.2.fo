<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>ic</fo:bookmark-title>
      <fo:bookmark internal-destination="idp1578896" starting-state="hide">
        <fo:bookmark-title>IC User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp1571392" starting-state="hide">
          <fo:bookmark-title>Using the IC Compiler</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1567824" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1550640" starting-state="hide">
            <fo:bookmark-title>Compilation of IDL Files</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1526400" starting-state="hide">
          <fo:bookmark-title>OMG IDL</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1523984" starting-state="hide">
            <fo:bookmark-title>OMG IDL - Overview</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1520512" starting-state="hide">
              <fo:bookmark-title>Reserved Compiler Names and Keywords</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp821936" starting-state="hide">
          <fo:bookmark-title>IC Protocol</fo:bookmark-title>
          <fo:bookmark internal-destination="idp818032" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp816688" starting-state="hide">
            <fo:bookmark-title>Language mappings and IDL operations</fo:bookmark-title>
            <fo:bookmark internal-destination="idp816224" starting-state="hide">
              <fo:bookmark-title>IDL Operations</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp810224" starting-state="hide">
              <fo:bookmark-title>Language Mappings</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp802272" starting-state="hide">
            <fo:bookmark-title>IC Protocol</fo:bookmark-title>
            <fo:bookmark internal-destination="idp804368" starting-state="hide">
              <fo:bookmark-title>Call (Request/Reply, i.e. not oneway)</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp801776" starting-state="hide">
              <fo:bookmark-title>Cast (oneway)</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp786512" starting-state="hide">
            <fo:bookmark-title>Gen_server Protocol</fo:bookmark-title>
            <fo:bookmark internal-destination="idp781312" starting-state="hide">
              <fo:bookmark-title>Call</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp783168" starting-state="hide">
              <fo:bookmark-title>Cast</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp782096" starting-state="hide">
            <fo:bookmark-title>Erlang Distribution Protocol</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp773616" starting-state="hide">
          <fo:bookmark-title>Using the Plain Erlang Back-end</fo:bookmark-title>
          <fo:bookmark internal-destination="idp769136" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp769008" starting-state="hide">
            <fo:bookmark-title>Compiling the Code</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp766912" starting-state="hide">
            <fo:bookmark-title>Writing the Implementation File</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp760656" starting-state="hide">
            <fo:bookmark-title>An Example</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp926256" starting-state="hide">
          <fo:bookmark-title>Using the Erlang Generic Server Back-end</fo:bookmark-title>
          <fo:bookmark internal-destination="idp923168" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp922048" starting-state="hide">
            <fo:bookmark-title>Compiling the Code</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp918784" starting-state="hide">
            <fo:bookmark-title>Writing the Implementation File</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp911296" starting-state="hide">
            <fo:bookmark-title>An Example</fo:bookmark-title>
            <fo:bookmark internal-destination="idp903680" starting-state="hide">
              <fo:bookmark-title>Administrative Operations</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp734848" starting-state="hide">
              <fo:bookmark-title>IDL Dependent Operations</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1110368" starting-state="hide">
              <fo:bookmark-title>Implementation Module</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp991904" starting-state="hide">
          <fo:bookmark-title>IDL to C mapping</fo:bookmark-title>
          <fo:bookmark internal-destination="idp728432" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp163232" starting-state="hide">
            <fo:bookmark-title>C Mapping Characteristics</fo:bookmark-title>
            <fo:bookmark internal-destination="idp707152" starting-state="hide">
              <fo:bookmark-title>Reserved Names</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1069152" starting-state="hide">
              <fo:bookmark-title>Scoped Names</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp538752" starting-state="hide">
              <fo:bookmark-title>Generated Files</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp445248" starting-state="hide">
            <fo:bookmark-title>Basic OMG IDL Types</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1814144" starting-state="hide">
            <fo:bookmark-title>Constructed OMG IDL Types</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1840608" starting-state="hide">
            <fo:bookmark-title>OMG IDL Constants</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1844128" starting-state="hide">
            <fo:bookmark-title>OMG IDL Operations</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1870128" starting-state="hide">
              <fo:bookmark-title>Operation Implementation</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1874784" starting-state="hide">
            <fo:bookmark-title>Exceptions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1876336" starting-state="hide">
            <fo:bookmark-title>Access to Attributes</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1877680" starting-state="hide">
            <fo:bookmark-title>Summary of Argument/Result Passing for the C-client</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2038352" starting-state="hide">
            <fo:bookmark-title>Supported Memory Allocation Functions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2053776" starting-state="hide">
            <fo:bookmark-title>Special Memory Deallocation Functions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2058480" starting-state="hide">
            <fo:bookmark-title>Exception Access Functions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2063200" starting-state="hide">
            <fo:bookmark-title>Special Types</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2077984" starting-state="hide">
            <fo:bookmark-title>A Mapping Example</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2091968" starting-state="hide">
          <fo:bookmark-title>The C Client Back-end</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2094784" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2097840" starting-state="hide">
            <fo:bookmark-title>Generated Stub Files</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2103888" starting-state="hide">
            <fo:bookmark-title>C Interface Functions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2113024" starting-state="hide">
            <fo:bookmark-title>Generating, Compiling and Linking</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2120800" starting-state="hide">
            <fo:bookmark-title>An Example</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2133504" starting-state="hide">
          <fo:bookmark-title>The C Server Back-end</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2136320" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2139504" starting-state="hide">
            <fo:bookmark-title>Generated Stub Files</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2145552" starting-state="hide">
            <fo:bookmark-title>C Skeleton Functions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2152576" starting-state="hide">
            <fo:bookmark-title>The Server Loop</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2155856" starting-state="hide">
            <fo:bookmark-title>Generating, Compiling and Linking</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2163632" starting-state="hide">
            <fo:bookmark-title>An Example</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2175920" starting-state="hide">
          <fo:bookmark-title>CORBA_Environment C Structure</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2179808" starting-state="hide">
            <fo:bookmark-title>C Structure</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2188432" starting-state="hide">
            <fo:bookmark-title>The CORBA Compatibility Part</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2194864" starting-state="hide">
            <fo:bookmark-title>The External Part</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2210752" starting-state="hide">
            <fo:bookmark-title>The Internal Part</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2225392" starting-state="hide">
            <fo:bookmark-title>Creating and Initiating the CORBA_Environment Structure</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2262672" starting-state="hide">
            <fo:bookmark-title>Setting System Exceptions</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2273520" starting-state="hide">
          <fo:bookmark-title>IDL to Java language Mapping</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2276352" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2283648" starting-state="hide">
            <fo:bookmark-title>Specialties in the Mapping</fo:bookmark-title>
            <fo:bookmark internal-destination="idp2284400" starting-state="hide">
              <fo:bookmark-title>Names Reserved by the Compiler</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2286864" starting-state="hide">
            <fo:bookmark-title>Basic OMG IDL Types</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2335680" starting-state="hide">
            <fo:bookmark-title>Constructed OMG IDL Types</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2343648" starting-state="hide">
            <fo:bookmark-title>Mapping for Constants</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2345024" starting-state="hide">
            <fo:bookmark-title>Invocations of Operations</fo:bookmark-title>
            <fo:bookmark internal-destination="idp2348016" starting-state="hide">
              <fo:bookmark-title>Operation Implementation</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2350992" starting-state="hide">
            <fo:bookmark-title>Exceptions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2352512" starting-state="hide">
            <fo:bookmark-title>Access to Attributes</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2353888" starting-state="hide">
            <fo:bookmark-title>Summary of Argument/Result Passing for Java</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2360864" starting-state="hide">
            <fo:bookmark-title>Communication Toolbox</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2396864" starting-state="hide">
            <fo:bookmark-title>The Package com.ericsson.otp.ic</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2444832" starting-state="hide">
            <fo:bookmark-title>The Term Class</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2478192" starting-state="hide">
            <fo:bookmark-title>Stub File Types</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2485856" starting-state="hide">
            <fo:bookmark-title>Client Stub Initialization, Methods Exported</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2507616" starting-state="hide">
            <fo:bookmark-title>Server Skeleton Initialization, Server Stub Implementation, Methods Exported</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2523232" starting-state="hide">
            <fo:bookmark-title>A Mapping Example</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2533360" starting-state="hide">
            <fo:bookmark-title>Running the Compiled Code</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp71072" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp285200" starting-state="hide">
          <fo:bookmark-title>ic</fo:bookmark-title>
          <fo:bookmark internal-destination="idp282592" starting-state="hide">
            <fo:bookmark-title>ic:gen/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp279408" starting-state="hide">
            <fo:bookmark-title>ic:gen/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1093136" starting-state="hide">
          <fo:bookmark-title>ic_clib</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1097664" starting-state="hide">
            <fo:bookmark-title>CORBA_Environment_alloc()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1590928" starting-state="hide">
            <fo:bookmark-title>CORBA_free()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1594064" starting-state="hide">
            <fo:bookmark-title>CORBA_string_alloc()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1597232" starting-state="hide">
            <fo:bookmark-title>CORBA_wstring_alloc()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1602160" starting-state="hide">
            <fo:bookmark-title>CORBA_exception_id()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1605264" starting-state="hide">
            <fo:bookmark-title>CORBA_exception_value()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp338960" starting-state="hide">
            <fo:bookmark-title>CORBA_exc_set()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp344064" starting-state="hide">
            <fo:bookmark-title>oe_server_receive()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp344976" starting-state="hide">
            <fo:bookmark-title>oe_server_receive_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp351376" starting-state="hide">
            <fo:bookmark-title>oe_exec_switch()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp354144" starting-state="hide">
            <fo:bookmark-title>oe_merge_maps()
               </fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp373744" starting-state="hide">
          <fo:bookmark-title>ic_c_protocol</fo:bookmark-title>
          <fo:bookmark internal-destination="idp385888" starting-state="hide">
            <fo:bookmark-title>oe_prepare_notification_encoding()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp390144" starting-state="hide">
            <fo:bookmark-title>oe_send_notification()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp391040" starting-state="hide">
            <fo:bookmark-title>oe_send_notification_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp394784" starting-state="hide">
            <fo:bookmark-title>oe_prepare_request_encoding()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp399040" starting-state="hide">
            <fo:bookmark-title>oe_send_request_and_receive_reply()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp399952" starting-state="hide">
            <fo:bookmark-title>oe_send_request_and_receive_reply_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp404608" starting-state="hide">
            <fo:bookmark-title>oe_prepare_reply_decoding()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp410176" starting-state="hide">
            <fo:bookmark-title>oe_prepare_request_decoding()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1611680" starting-state="hide">
            <fo:bookmark-title>oe_prepare_reply_encoding()
               </fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">ic</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 1998-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">ic 4.4.2</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 1998-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            ic</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            ic | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp1578896" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      IC User's Guide</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">IC</fo:inline> application is an Erlang implementation of an IDL
      compiler.</fo:block>
  <fo:block id="idp1571392" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  Using the IC Compiler</fo:marker>1.1  Using the IC Compiler</fo:block><fo:block id="idp1567824" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The IC application is an IDL compiler implemented in Erlang.
      The IDL compiler generates client stubs and server skeletons.
      Several back-ends are supported, and they fall into three main
      groups.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first group consists of a CORBA back-end:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">IDL to Erlang CORBA</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This back-end is for CORBA communication and implementation,
          and the generated code uses the CORBA specific protocol for
          communication between clients and servers. See the
          <fo:inline font-weight="bold">Orber</fo:inline> application User's Guide and manuals for
          further details.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second group consists of a simple Erlang back-end:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">IDL to plain Erlang</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This back-end provides a very simple Erlang client
          interface. It can only be used within an Erlang node,
          and the communication between client and "server" is
          therefore in terms of ordinary function calls. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This back-end can be considered a short-circuit version of
          the IDL to Erlang gen_server back-end (see further below).</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The third group consists of backends for Erlang, C, and
      Java. The communication between clients and servers is by the
      Erlang distribution protocol, facilitated by
      <fo:inline font-weight="bold">erl_interface</fo:inline> and <fo:inline font-weight="bold">jinterface</fo:inline> for C and Java,
      respectively.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All back-ends of the third group generate code compatible with
      the Erlang gen_server behavior protocol. Thus generated client
      code corresponds to <fo:inline font-family="monospace">call()</fo:inline> or <fo:inline font-family="monospace">cast()</fo:inline> of an Erlang
      <fo:inline font-family="monospace">gen_server</fo:inline>. Similarly, generated server code corresponds
      to <fo:inline font-family="monospace">handle_call()</fo:inline> or <fo:inline font-family="monospace">handle_cast()</fo:inline> of an Erlang
      <fo:inline font-family="monospace">gen_server</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The back-ends of the third group are:
      </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">IDL to Erlang gen_server</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Client stubs and server skeletons are generated. Data types
          are mapped according to the IDL to Erlang mapping described
          in the <fo:inline font-weight="bold">Orber User's Guide</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">IDL to C client</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Client stubs are generated. The mapping of data types is
          described further on in the C client part of this guide.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">IDL to C server</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Server skeletons are generated. The mapping of data types is
          described further on in the C server part of this guide.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">IDL to Java</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Client stubs and server skeletons are generated. The mapping
          of data types is described further on in the Java part of
          this guide.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp1550640" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Compilation of IDL Files</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The IC compiler is invoked by executing the generic <fo:inline font-family="monospace">erlc</fo:inline>
      compiler from a shell:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%&gt; erlc +'{be,BackEnd}' File.idl
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">BackEnd</fo:inline> is according to the table below, and
      <fo:inline font-family="monospace">File.idl</fo:inline> is the IDL file to be compiled.</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Back-end</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">BackEnd</fo:inline>option</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">IDL to CORBA</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">erl_corba</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">IDL to CORBA template</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">erl_template</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">IDL to plain Erlang</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">erl_plain</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">IDL to Erlang gen_server</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">erl_genserv</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">IDL to C client</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">c_client</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">IDL to C server</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">c_server</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">IDL to Java</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">java</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        1.1:
         
        Compiler back-ends and options</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more details on IC compiler options consult the ic(3) manual page.</fo:block>
  <fo:block id="idp1526400" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  OMG IDL</fo:marker>1.2  OMG IDL</fo:block><fo:block id="idp1523984" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      OMG IDL - Overview</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The purpose of OMG IDL, <fo:inline font-weight="bold">Interface Definition Language</fo:inline>, mapping
      is to act as translator between platforms and languages. An IDL 
      specification is supposed to describe data types, object types etc.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since the <fo:inline font-family="monospace">C</fo:inline> and <fo:inline font-family="monospace">Java</fo:inline> IC backends only supports a subset of the
      IDL types supported by the other backends, the mapping is divided into
      different parts. For more information about IDL to Erlang mapping,
      i.e., <fo:inline font-family="monospace">CORBA</fo:inline>, plain Erlang and generic Erlang Server, see the Orber
      User's Guide. How to use the plain Erlang and generic Erlang Server is
      found in this User's Guide.</fo:block>

    <fo:block id="idp1520512" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Reserved Compiler Names and Keywords</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The use of some names is  strongly discouraged due to 
        ambiguities. However, the use of some names is prohibited 
        when using the Erlang mapping , as they are strictly reserved for IC.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">IC reserves all identifiers starting with <fo:inline font-family="monospace">OE_</fo:inline> and <fo:inline font-family="monospace">oe_</fo:inline> 
        for internal use.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note also, that an identifier in IDL can  contain alphabetic,
        digits and underscore characters, but the first character 
        <fo:inline font-weight="bold">must</fo:inline> be alphabetic.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using underscores in IDL names can lead to ambiguities
        due to the name mapping described above. It is advisable to 
        avoid the use of underscores in identifiers.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The OMG defines a set of reserved words, shown below, for use as keywords. 
        These may <fo:inline font-weight="bold">not</fo:inline> be used as, for example, identifiers.</fo:block>
      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">abstract</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">double</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">local</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">raises</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">typedef</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">any</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">exception</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">readonly</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">attribute</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">enum</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">module</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">sequence</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">union</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">boolean</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">factory</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">native</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">short</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">ValueBase</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">case</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">FALSE</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Object</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">string</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">valuetype</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">char</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">fixed</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">octet</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">struct</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">void</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">const</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">float</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">oneway</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">supports</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">wchar</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">context</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">in</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">out</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">switch</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">wstring</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">custom</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">inout</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">private</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">TRUE</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"/></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">default</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">interface</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">public</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">truncatable</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"/></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        2.1:
         
        OMG IDL keywords</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The keywords listed above must be written exactly as shown. Any usage
        of identifiers that collide with a keyword is illegal. For example,
        <fo:inline font-weight="bold">long</fo:inline> is a valid keyword; <fo:inline font-weight="bold">Long</fo:inline> and <fo:inline font-weight="bold">LONG</fo:inline> are
        illegal as keywords and identifiers. But, since the OMG must be able
        to expand the IDL grammar, it is possible to use <fo:inline font-weight="bold">Escaped  Identifiers</fo:inline>. For example, it is not unlikely that <fo:inline font-family="monospace">native</fo:inline>
        have been used in IDL-specifications as identifiers. One option is to
        change all occurrences to <fo:inline font-family="monospace">myNative</fo:inline>. Usually, it is necessary
        to change programming language code that depends upon that IDL as well.
        Since Escaped Identifiers just disable type checking (i.e. if it is a reserved
        word or not) and leaves everything else unchanged, it is only necessary to
        update the IDL-specification. To escape an identifier, simply prefix it
        with <fo:inline font-family="monospace">_</fo:inline>. The following IDL-code is illegal:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef string native;
interface i {
   void foo(in native Arg);
   };
};
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With Escaped Identifiers the code will look like:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef string _native;
interface i {
   void foo(in _native Arg);
   };
};
      </fo:block>
    
  <fo:block id="idp821936" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.3  IC Protocol</fo:marker>1.3  IC Protocol</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The purpose of this chapter is to explain the bits and bytes of the
    IC protocol, which is a composition of the Erlang distribution protocol
    and the Erlang/OTP gen_server protocol. If you do not intend to replace
    the Erlang distribution protocol, or replace the gen_server protocol, 
    skip over this chapter. 
    </fo:block><fo:block id="idp818032" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The IDL Compiler (IC) transforms Interface Definition Language
      (IDL) specifications files to interface code for Erlang, C, and
      Java. The Erlang language mapping is described in the Orber
      documentation, while the other mappings are described in the IC
      documentation (they are of course in accordance with the CORBA C
      and Java language mapping specifications, with some restrictions).
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The most important parts of an IDL specification are the operation
      declarations. An operation defines what information a client
      provides to a server, and what information (if any) the client
      gets back from the server. We consider IDL operations and language
      mappings in section 2.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">What we here call the IC protocol, is the description of messages
      exchanged between IC end-points (client and servers). It is valid
      for all IC back-ends, except the 'erl_plain' and 'erl_corba'
      back-ends. 
      The IC protocol is in turn embedded into the Erlang gen_server
      protocol, which is described below.
      Finally, the gen_server protocol is embedded in the Erlang
      distribution protocol. Pertinent parts of that protocol is
      described further below.
      </fo:block>
  <fo:block id="idp816688" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.2 
      Language mappings and IDL operations</fo:block>
    

    <fo:block id="idp816224" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">IDL Operations</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An IDL operation is declared as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    [oneway] RetType Op(in IType1 I1, in IType2 I2, ..., in ITypeN IN,
    out OType1 O1, out OType2 O2, ..., out OTypeM OM)
    N, M = 0, 1, 2, ...        (2.1.1)
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">`Op' is the operation name, RetType is the return type, and ITypei, 
        i = 1, 2, ..., N, and OTypej, j = 1, 2, ..., M, are the `in' types
        and `out' types, respectively. The values I1, I2, ..., IN are 
        provided by the caller, and the value of RetType, and the values
        O1, O2, ..., OM, are provided as results to the caller. 
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The types can be any basic types or derived types declared in the
        IDL specification of which the operation declaration is a part.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the RetType has the special name `void' there is no return
        value (but there might still be result values O1, 02, ..., OM).
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The `in' and `out' parameters can be declared in any order, but
        for clarity we have listed all `in' parameters before the `out'
        parameters in the declaration above.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the keyword `oneway' is present, the operation is a cast, i.e.
        there is no confirmation of the operation, and consequently there
        must be no result values: RetType must be equal to `void', and M =
        0 must hold.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Otherwise the operation is a call, i.e. it is confirmed (or else
        an exception is raised). 
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note carefully that an operation declared without `oneway' is
        always a call, even if RetType is `void' and M = 0.
        </fo:block>
    

    <fo:block id="idp810224" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Language Mappings</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are several CORBA Language Mapping specifications. These are
        about mapping interfaces to various programming languages. IC
        supports the CORBA C and Java mapping specifications, and the
        Erlang language mapping specified in the Orber documentation. 
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Excerpt from "6.4 Basic OMG IDL Types" in the Orber User's Guide:
        </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Functions with return type void will return the atom ok.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Excerpt from "6.13 Invocations of Operations" in the Orber User's 
        Guide:
        </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A function call will invoke an operation. The first parameter
            of the function should be the object reference and then all in
            and inout parameters follow in the same order as specified in
            the IDL specification. The result will be a return value
            unless the function has inout or out parameters specified; in
            which case, a tuple of the return value, followed by the
            parameters will be returned.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Hence the function that is mapped from an IDL operation to Erlang
        always have a return value (an Erlang function always has). That
        fact has influenced the IC protocol, in that there is always a
        return value (which is 'ok' if the return type was declared 'void'). </fo:block>
    
  <fo:block id="idp802272" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.3 
      IC Protocol</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Given the operation declaration (2.1.1) the IC protocol maps to
      messages as follows, defined in terms of Erlang terms.
      </fo:block>

    <fo:block id="idp804368" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Call (Request/Reply, i.e. not oneway)</fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    request:         Op                      atom()     N = 0    
                    {Op, I1, I2, ..., IN}    tuple()    N &gt; 0
                                                        (3.1.1)

    reply:         Ret                                  M = 0
                   {Ret, O1, O2, ..., OM}               M &gt; 0
                                                        (3.1.2)</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Notice:</fo:inline> Even if the RetType of the operation Op is 
        declared to be 'void', a return value 'ok' is returned in 
        the reply message. That
        return value is of no significance, and is therefore ignored (note
        however that a C server back-end returns the atom 'void' instead
        of 'ok'). 
        </fo:block>
    

    <fo:block id="idp801776" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Cast (oneway)</fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

    notification:    Op                      atom()     N = 0
                     {Op, I1, I2, ..., IN}   tuple()    N &gt; 0
                                                        (3.2.1)</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(There is of course no return message).
        </fo:block>
    
  <fo:block id="idp786512" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.4 
      Gen_server Protocol</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Most of the IC generated code deals with encoding and decoding the
      gen_server protocol. 
      </fo:block>

    <fo:block id="idp781312" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Call</fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

    request:    {'$gen_call', {self(), Ref}, Request}   (4.1.1)

    reply:      {Ref, Reply}                            (4.1.2)</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where Request and Reply are the messages defined in the previous
        chapter.
        </fo:block>
    

    <fo:block id="idp783168" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Cast</fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    notification:    {'$gen_cast', Notification}        (4.2.1)      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where Notification is the message defined in the previous chapter.
        </fo:block>
    
  <fo:block id="idp782096" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.5 
      Erlang Distribution Protocol</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Messages (of interest here) between Erlang nodes are of the form: </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        Len(4), Type(1), CtrlBin(N), MsgBin(M)          (5.1)    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Type is equal to 112 = PASS_THROUGH. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">CtrlBin and MsgBin are Erlang terms in binary form (as if created
      by term_to_binary/1), whence for each of them the first byte is
      equal to 131 = VERSION_MAGIC.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">CtrlBin (of interest here) contains the SEND and REG_SEND control
      messages, which are binary forms of the Erlang terms</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        {2, Cookie, ToPid} ,                            (5.2)    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">and</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        {6, FromPid, Cookie, ToName} ,                  (5.3)    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">respectively.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The CtrlBin(N) message is read and written by erl_interface code
      (C), j_interface code (Java), or the Erlang distribution
      implementation, which are invoked from IC generated code. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MsgBin(N) is the "real" message, i.e. of the form described
      in the previous section.
      </fo:block>
  <fo:block id="idp773616" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.4  Using the Plain Erlang Back-end</fo:marker>1.4  Using the Plain Erlang Back-end</fo:block><fo:block id="idp769136" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The mapping of OMG IDL to the Erlang programming language when
      Plain Erlang 
      is the back-end of choice is similar to the one used in pure Erlang IDL
      mapping. The only difference is on the generated code and the extended
      use of pragmas for code generation: IDL functions are translated
      to Erlang
      module function calls.</fo:block>
  <fo:block id="idp769008" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.2 
      Compiling the Code</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the Erlang shell type :</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ic:gen(<fo:inline font-family="monospace">&lt;filename&gt;, [{be, erl_plain}])</fo:inline>.</fo:block>
  <fo:block id="idp766912" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.3 
      Writing the Implementation File</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each IDL interface <fo:inline font-family="monospace">&lt;interface name&gt;</fo:inline> defined in the IDL file:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Create the corresponding Erlang file that will hold the
       Erlang implementation of the IDL definitions.  </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Call the implementation file after the scope of the IDL interface, 
       followed by the suffix <fo:inline font-family="monospace">_impl</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Export the implementation functions.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each function defined in the IDL interface :</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Implement an Erlang function that uses as arguments in the same
       order, as the input arguments described in the IDL file, and returns 
       the value described in the interface.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>When using the function, follow the mapping described in chapter 2.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp760656" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.4 
      An Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">      

      In this example, a file "random.idl" is generates code for the plain Erlang
      back-end :</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Main file : "plain.idl"</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

module rmod {
 
  interface random {
 
    double produce();
 
    oneway void init(in long seed1, in long seed2, in long seed3);
 
  };
 
};
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compile the file :</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      Erlang (BEAM) emulator version 4.9
      
      Eshell V4.9  (abort with ^G)
      1&gt; ic:gen(random,[{be, erl_plain}]).
      Erlang IDL compiler version 2.5.1
      ok
      2&gt; 
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the file "random.idl" is compiled it produces five files: two for 
      the top scope, two for the interface scope, and one for the module
      scope. The header files for top scope and interface
      are empty and not shown here. In this case only the file for the interface 
      <fo:inline font-family="monospace">rmod_random.erl</fo:inline> is important :. 
            
</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang file for interface : "rmod_random.erl"</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-module(rmod_random).
 
 
 
%% Interface functions
-export([produce/0, init/3]).
 
%%------------------------------------------------------------
%% Operation: produce
%% 
%%   Returns: RetVal
%%
produce() -&gt;
    rmod_random_impl:produce().
 
%%------------------------------------------------------------
%% Operation: init
%% 
%%   Returns: RetVal
%%
init(Seed1, Seed2, Seed3) -&gt;
    rmod_random_impl:init(Seed1, Seed2, Seed3).
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The implementation file should be called <fo:inline font-family="monospace">rmod_random_impl.erl</fo:inline> 
      and could look like this:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      -module('rmod_random_impl').
      
      -export([produce/0,init/3]).
      
      
      produce()  -&gt;
        random:uniform().
       
      
      init(S1,S2,S3)  -&gt;
        random:seed(S1,S2,S3).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compiling the code : </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; make:all().
Recompile: rmod_random
Recompile: oe_random
Recompile: rmod_random_impl
up_to_date
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Running the example : </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt;  rmod_random:init(1,2,3).
ok
4&gt;  rmod_random:produce().  
1.97963e-4
5&gt; 
    </fo:block>
  <fo:block id="idp926256" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.5  Using the Erlang Generic Server Back-end</fo:marker>1.5  Using the Erlang Generic Server Back-end</fo:block><fo:block id="idp923168" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The mapping of OMG IDL to the Erlang programming language when Erlang 
      generic server is the back-end of choice is similar to the one used in
      the chapter 'OMG IDL Mapping'.
      The only difference is in the generated code, a client stub and
      server skeleton to an Erlang <fo:inline font-family="monospace">gen_server</fo:inline>. Orber's User's Guide
      contain a more detailed description of IDL to Erlang mapping.</fo:block>
  <fo:block id="idp922048" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.2 
      Compiling the Code</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ic:gen/2</fo:inline> function can be called from the command 
      line as follows:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
shell&gt; erlc "+{be, erl_genserv}" MyFile.idl
    </fo:block>
  <fo:block id="idp918784" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.3 
      Writing the Implementation File</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each IDL interface <fo:inline font-family="monospace">&lt;interface name&gt;</fo:inline> defined in the IDL file :</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Create the corresponding Erlang file that will hold the
       Erlang implementation of the IDL definitions.  </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Call the implementation file after the scope of the IDL interface, 
       followed by the suffix <fo:inline font-family="monospace">_impl</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Export the implementation functions.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each function defined in the IDL interface :</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Implement an Erlang function that uses as arguments in the same
       order, as the input arguments described in the IDL file, and returns 
       the value described in the interface.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>When using the function, follow the mapping described in chapter 2.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp911296" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.4 
      An Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example, a file <fo:inline font-family="monospace">random.idl</fo:inline> generates code for the Erlang
      gen_server back-end:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
// Filename random.idl  
module rmod {
 
  interface random {
    // Generate a new random number 
    double produce();
    // Initialize random generator
    oneway void init(in long seed1, in long seed2, in long seed3);
 
  };
};
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the file "random.idl" is compiled (e.g., <fo:inline font-family="monospace">shell&gt; erlc "+{be, erl_genserv}" random.idl</fo:inline>)
      five files are produced; two for the top scope, two for the interface scope,
      and one for the module scope. The header files for top scope and interface
      are empty and not shown here. In this case, the stub/skeleton file  
      <fo:inline font-family="monospace">rmod_random.erl</fo:inline> is the most important. This module exports two kinds of
      operations:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Administrative</fo:inline> - used when, for example, creating and
       terminating the server.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">IDL dependent</fo:inline> - operations defined in the IDL 
       specification. In this case, <fo:inline font-family="monospace">produce</fo:inline> and <fo:inline font-family="monospace">init</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block id="idp903680" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Administrative Operations</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To create a new server instance, one of the following functions should
        be used:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">oe_create/0/1/2</fo:inline> - create a new instance of the object.
         Accepts <fo:inline font-family="monospace">Env</fo:inline> and <fo:inline font-family="monospace">RegName</fo:inline>, in that order, as parameters.
         The former is passed uninterpreted to the initialization operation
         of the call-back module, while the latter must be as the
        <fo:inline font-family="monospace">gen_server</fo:inline> parameter <fo:inline font-family="monospace">ServerName</fo:inline>. If <fo:inline font-family="monospace">Env</fo:inline> is
         left out, an empty list will be passed.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">oe_create_link/0/1/2</fo:inline> - similar to <fo:inline font-family="monospace">oe_create/0/1/2</fo:inline>, 
         but create a linked server.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">typeID/0</fo:inline> - returns the scooped id compliant with the
         OMG standard. In this case the string 
        <fo:inline font-family="monospace">"IDL:rmod/random:1.0"</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">stop/1</fo:inline> - asynchronously terminate the server. The required
         argument is the return value from any of the start functions.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp734848" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">IDL Dependent Operations</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Operations can either be synchronous or asynchronous 
        (i.e., <fo:inline font-family="monospace">oneway</fo:inline>). These are, respectively, mapped to 
        <fo:inline font-family="monospace">gen_server:call/2/3</fo:inline> and <fo:inline font-family="monospace">gen_server:cast/2</fo:inline>. 
        Consult the <fo:inline font-family="monospace">gen_server</fo:inline> documentation for valid return values.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The IDL dependent operations in this example are listed below. 
        The first argument must be the whatever the create operation returned.</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">init(ServerReference, Seed1, Seed2, Seed3)</fo:inline> - initialize 
         the random number generator.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">produce(ServerReference)</fo:inline> - generate a new random number.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the compile option <fo:inline font-family="monospace">timeout</fo:inline> is used a timeout must be added 
      (e.g., <fo:inline font-family="monospace">produce(ServerReference, 5000)</fo:inline>). For more information, see
      the <fo:inline font-family="monospace">gen_server</fo:inline> documentation.</fo:block>

    <fo:block id="idp1110368" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Implementation Module</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The implementation module shall, unless the compile option
        <fo:inline font-family="monospace">impl</fo:inline> is used, be named <fo:inline font-family="monospace">rmod_random_impl.erl</fo:inline>.
        and could look like this:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module('rmod_random_impl').
%% Mandatory gen_server operations
-export([init/1, terminate/2, code_change/3]).
%% Add if 'handle_info' compile option used
-export([handle_info/2]).
%% API defined in IDL specification
-export([produce/1,init/4]).

%% Mandatory operations
init(Env) -&gt;
    {ok, []}.

terminate(From, Reason) -&gt;
    ok.

code_change(OldVsn, State, Extra) -&gt;
    {ok, State}.

%% Optional
handle_info(Info, State) -&gt;
    {noreply, NewState}.

%% IDL specification
produce(State)  -&gt;
    case catch random:uniform() of
     {'EXIT',_} -&gt;
         {stop, normal, "random:uniform/0 - EXIT", State};
     RUnif -&gt;
            {reply, RUnif, State}
     end.


init(State, S1, S2, S3)  -&gt;
    case catch random:seed(S1, S2, S3) of
     {'EXIT',_} -&gt;
         {stop, normal, State};
     _ -&gt;
            {noreply, State}
    end.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compile the code and run the example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; make:all().
Recompile: rmod_random
Recompile: oe_random
Recompile: rmod_random_impl
up_to_date
2&gt; {ok,R} = rmod_random:oe_create().
{ok,&lt;0.30.0&gt;}
3&gt; rmod_random:init(R, 1, 2, 3).
ok
4&gt; rmod_random:produce(R).
1.97963e-4
5&gt; 
      </fo:block>
    
  <fo:block id="idp991904" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.6  IDL to C mapping</fo:marker>1.6  IDL to C mapping</fo:block><fo:block id="idp728432" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The IC C mapping (used by the C client and C server back-ends) follows
      the <fo:inline font-weight="bold">OMG C Language Mapping Specification</fo:inline>. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The C mapping supports the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All OMG IDL basic types except <fo:inline font-family="monospace">long double</fo:inline> and <fo:inline font-family="monospace">any</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All OMG IDL constructed types.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OMG IDL constants.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Operations with passing of parameters and receiving of
          results. <fo:inline font-family="monospace">inout</fo:inline> parameters are not supported.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is not supported:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Access to attributes.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">User defined exceptions.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">User defined objects.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp163232" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.2 
      C Mapping Characteristics</fo:block>
    

    <fo:block id="idp707152" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Reserved Names</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The IDL compiler reserves all identifiers starting with
        <fo:inline font-family="monospace">OE_</fo:inline> and <fo:inline font-family="monospace">oe_</fo:inline> for internal use.</fo:block>
    

    <fo:block id="idp1069152" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Scoped Names</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The C programmer must always use the global name for a type,
        constant or operation. The C global name corresponding to an
        OMG IDL global name is derived by converting occurrences of
        "::" to underscore, and eliminating the leading "::". So, for
        example, an operation <fo:inline font-family="monospace">op1</fo:inline> defined in interface
        <fo:inline font-family="monospace">I1</fo:inline> which is defined in module <fo:inline font-family="monospace">M1</fo:inline> would be
        written as <fo:inline font-family="monospace">M1::I1::op1</fo:inline> in IDL and as <fo:inline font-family="monospace">M1_I1_op1</fo:inline>
        in C.</fo:block>
      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If underscores are used in IDL names it can lead to
          ambiguities due to the name mapping described above,
          therefore it is advisable to avoid underscores in
          identifiers.</fo:block>
      </fo:block>
    

    <fo:block id="idp538752" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Generated Files</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two files will be generated for each scope. One set of files
        will be generated for each module and each interface scope.
        An extra set is generated for those definitions at top
        level scope. One of the files is a header file(<fo:inline font-family="monospace">.h</fo:inline>), and the 
        other file is a C source code file (<fo:inline font-family="monospace">.c</fo:inline>). In addition to these 
        files a number of C source files will be generated for type encodings,
        they are named according to the following template:
        <fo:inline font-family="monospace">oe_code_&lt;type&gt;.c</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
// IDL, in the file "spec.idl"
module m1 {

    typedef sequence&lt;long&gt; lseq;
   
    interface i1 {
        ...
    };
    ...
};
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">XXX This is C client specific.
        Will produce the files <fo:inline font-family="monospace">oe_spec.h</fo:inline> and
        <fo:inline font-family="monospace">oe_spec.c</fo:inline> for the top scope level. Then the files
        <fo:inline font-family="monospace">m1.h</fo:inline> and <fo:inline font-family="monospace">m1.c</fo:inline> for the module <fo:inline font-family="monospace">m1</fo:inline> and
        files <fo:inline font-family="monospace">m1_i1.h</fo:inline> and <fo:inline font-family="monospace">m1_i1.c</fo:inline> for the interface
        <fo:inline font-family="monospace">i1</fo:inline>. The typedef will produce <fo:inline font-family="monospace">oe_code_m1_lseq.c</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The header file contains type definitions for all
        <fo:inline font-family="monospace">struct</fo:inline> types and sequences and constants in the IDL file. The
        c file contains all operation stubs if the the scope is an interface.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In addition to the scope-related files a C source file will
        be generated for encoding operations of all <fo:inline font-family="monospace">struct</fo:inline> and
        sequence types.</fo:block>
    
  <fo:block id="idp445248" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.3 
      Basic OMG IDL Types</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The mapping of basic types is as follows.</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">OMG IDL type</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">C type</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Mapped to C type</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">float</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_float</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">float</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">double</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_double</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">double</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">short</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_short</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">short</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned short</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_unsigned_short</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned short</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_long_long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_unsigned_long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned long</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned long long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_unsigned_long_long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned long</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">char</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_char</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">char</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">wchar</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_wchar</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned long</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">boolean</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_boolean</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned char</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">octet</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_octet</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">char</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">any</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Not supported</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"/></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long double</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Not supported</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"/></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Object</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Not supported</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"/></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">void</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">void</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">void</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        6.1:
         
        OMG IDL Basic Types</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">XXX Note that several mappings are not according to OMG C Language
      mapping.</fo:block>
  <fo:block id="idp1814144" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.4 
      Constructed OMG IDL Types</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Constructed types have mappings as shown in the following table.</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">OMG IDL type</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Mapped to C type</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">string</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_char*</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">wstring</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_wchar*</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">struct</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">struct</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">union</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">union</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">enum</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">enum</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">sequence</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">struct (see below)</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">array</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">array</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        6.2:
         
        OMG IDL Constructed Types</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An OMG IDL sequence (an array of variable length), </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
// IDL
typedef sequence &lt;IDL_TYPE&gt; NAME;
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">is mapped to a C struct as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
/* C */
typedef struct {
  CORBA_unsigned_long _maximum;
  CORBA_unsigned_long _length;
  C_TYPE* _buffer;
} C_NAME;
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">C_TYPE</fo:inline> is the mapping of <fo:inline font-family="monospace">IDL_TYPE</fo:inline>, and where
      <fo:inline font-family="monospace">C_NAME</fo:inline> is the scoped name of <fo:inline font-family="monospace">NAME</fo:inline>.</fo:block>
  <fo:block id="idp1840608" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.5 
      OMG IDL Constants</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An IDL constant is mapped to a C constant through a C
      <fo:inline font-family="monospace">#define</fo:inline> macro, where the name of the macro is scoped.
      Example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
// IDL
module M1 {
    const long c1 = 99;
};
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">results in the following:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
/* C */
#define M1_c1 99
    </fo:block>
  <fo:block id="idp1844128" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.6 
      OMG IDL Operations</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An OMG IDL operation is mapped to C function. Each C operation
      function has two mandatory parameters: a first parameter of
      <fo:inline font-weight="bold">interface object</fo:inline> type, and a last parameter of
      <fo:inline font-weight="bold">environment</fo:inline> type.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a C operation function the the <fo:inline font-family="monospace">in</fo:inline> and <fo:inline font-family="monospace">out</fo:inline>
      parameters are located between the first and last parameters
      described above, and they appear in the same order as in the IDL
      operation declaration.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-family="monospace">inout</fo:inline> parameters are not supported. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value of an OMG IDL operation is mapped to a
      corresponding return value of the C operation function.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mandatory C operation function parameters:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">CORBA_Object oe_obj</fo:inline> - the first parameter of a C
       operation function. This parameter is required by the <fo:inline font-weight="bold">OMG C Language Mapping Specification</fo:inline>, but in the current
       implementation there is no particular use for it.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CORBA_Environment* oe_env</fo:inline> - the last parameter of a C
          operation function. The parameter is defined in the C header
          file <fo:inline font-family="monospace">ic.h</fo:inline> and has the following public fields:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CORBA_Exception_type _major</fo:inline> - indicates if an
              operation invocation was successful which will be one of
              the following:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>CORBA_NO_EXCEPTION</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>CORBA_SYSTEM_EXCEPTION</fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>int <fo:inline font-weight="bold">_fd</fo:inline> - a file descriptor returned from
          <fo:inline font-weight="bold">erl_connect</fo:inline> function.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>int <fo:inline font-weight="bold">_inbufsz</fo:inline> - size of input buffer.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>char* <fo:inline font-weight="bold">_inbuf</fo:inline> - pointer to a buffer used for
           input.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>int <fo:inline font-weight="bold">_outbufsz</fo:inline> - size of output buffer.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>char* <fo:inline font-weight="bold">_outbuf</fo:inline> - pointer to a buffer used for
           output.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">int <fo:inline font-weight="bold">_memchunk</fo:inline> - expansion unit size for the
              output buffer.  This is the size of memory chunks in
              bytes used for increasing the output in case of buffer
              expansion. The value of this field must be always set
              to &gt;= 32, should be at least 1024 for performance
              reasons.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>char <fo:inline font-weight="bold">regname[256]</fo:inline> - a registered name for a
           process.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>erlang_pid* <fo:inline font-weight="bold">_to_pid</fo:inline> - an Erlang process
           identifier, is only used if  the registered_name parameter
           is the empty string.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>erlang_pid* <fo:inline font-weight="bold">_from_pid</fo:inline> - your own process id so
           the answer can be  returned</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Beside the public fields, other private fields
          are internally used but are not mentioned here. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
// IDL
interface i1 {
    long op1(in long a); 
    long op2(in string s, out long count);
};
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Is mapped to the following C functions</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
/* C */ 
CORBA_long i1_op1(i1 oe_obj, CORBA_long a, CORBA_Environment* oe_env)
{
    ...
}
CORBA_long i1_op2(i1 oe_obj, CORBA_char* s, CORBA_long *count,
CORBA_Environment* oe_env)
{
    ...
}
    </fo:block>
    

    <fo:block id="idp1870128" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Operation Implementation</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is no  standard CORBA  mapping  for the C-server side,
        as it is  implementation-dependent but built in a similar way.
        The current server side mapping is different from the client
        side mapping in several ways:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Argument mappings</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Result values</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Structure</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Usage</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Exception handling</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    
  <fo:block id="idp1874784" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.7 
      Exceptions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Although exception mapping is not implemented, the stubs will
      generate CORBA system exceptions in case of operation failure.
      Thus, the only exceptions propagated by the system are built in
      system exceptions.</fo:block>
  <fo:block id="idp1876336" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.8 
      Access to Attributes</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Not Supported</fo:block>
  <fo:block id="idp1877680" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.9 
      Summary of Argument/Result Passing for the C-client</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The user-defined parameters can only be <fo:inline font-family="monospace">in</fo:inline> or <fo:inline font-family="monospace">out</fo:inline>
      parameters, as 
      <fo:inline font-family="monospace">inout</fo:inline> parameters are not supported.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This table summarize the types a client passes as arguments to
      a stub, and receives as a result.</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">OMG IDL type</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">In</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Out</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Return</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">short</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_short</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_short*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_short</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_long*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_long</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_long_long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_long_long*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_long_long</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned short</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_unsigned_short</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_unsigned_short*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_unsigned_short</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_unsigned_long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_unsigned_long*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_unsigned_long</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned long long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_unsigned_long_long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_unsigned_long_long*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_unsigned_long_long</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">float</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_float</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_float*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_float</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">double</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_double</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_double*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_double</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">boolean</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_boolean</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_boolean*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_boolean</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">char</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_char</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_char*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_char</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">wchar</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_wchar</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_wchar*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_wchar</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">octet</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_octet</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_octet*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_octet</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">enum</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_enum</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_enum*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_enum</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">struct, fixed</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">struct*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">struct*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">struct</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">struct, variable</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">struct*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">struct**</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">struct*</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">union, fixed</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">union*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">union*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">union</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">union, variable</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">union*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">union**</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">union*</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">string</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_char*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_char**</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_char*</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">wstring</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_wchar*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_wchar**</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">CORBA_wchar*</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">sequence</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">sequence*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">sequence**</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">sequence*</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">array, fixed</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">array</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">array</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">array_slice*</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">array, variable</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">array</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">array_slice**</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">array_slice*</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        6.3:
         
        Basic Argument and Result passing</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A client is responsible for providing storage of all arguments passed 
      as <fo:inline font-weight="bold">in</fo:inline> arguments.</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">OMG IDL type</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Out</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Return</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">short</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned short</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned long long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">float</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">double</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">boolean</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">char</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">wchar</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">octet</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">enum</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">struct, fixed</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">struct, variable</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">2</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">2</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">string</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">2</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">2</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">wstring</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">2</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">2</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">sequence</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">2</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">2</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">array, fixed</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">3</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">array, variable</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">3</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">3</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        6.4:
         
        Client argument storage responsibility</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Case</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Description</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Caller allocates all necessary storage, except that which may be encapsulated and managed within the parameter itself.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">2</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">The caller allocates a pointer and passes it by reference to the callee. The callee sets the pointer to point to a valid instance of the parameter's type. The caller is responsible for releasing the returned storage. Following completion of a request, the caller is  not allowed to modify any values in the returned storage. To do  so the caller must first copy the returned instance into a new  instance, then modify the new instance. </fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">3</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">The caller allocates a pointer to an array slice which has all the  same dimensions of the original array except the first, and passes  it by reference to the callee. The callee sets the pointer to point  to a valid instance of the array. The caller is responsible for  releasing the returned storage. Following completion of a request,  the caller is not allowed to modify any values in the returned  storage. To do so the caller must first copy the returned instance  into a new instance, then modify the new instance. </fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        6.5:
         
        Argument passing cases</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The returned storage in case 2 and 3 is allocated as one block of memory
      so it is possible to deallocate it with one call of CORBA_free.</fo:block>
  <fo:block id="idp2038352" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.10 
      Supported Memory Allocation Functions</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">CORBA_Environment</fo:inline> can be allocated from the user by calling 
          <fo:inline font-weight="bold">CORBA_Environment_alloc()</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interface for this function is </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CORBA_Environment *CORBA_Environment_alloc(int inbufsz, int outbufsz);</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where :</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">inbufsz</fo:inline> is the desired size of input buffer</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">outbufsz</fo:inline> is the desired size of output buffer</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">return value is a <fo:inline font-weight="bold">pointer</fo:inline> to an allocated and initialized 
              <fo:inline font-weight="bold">CORBA_Environment</fo:inline> structure</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Strings can be allocated from the user by calling <fo:inline font-weight="bold">CORBA_string_alloc()</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interface for this function is </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CORBA_char *CORBA_string_alloc(CORBA_unsigned_long len);</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where :</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">len</fo:inline> is the length of the string to be allocated.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus far, no other type allocation function is supported.</fo:block>
  <fo:block id="idp2053776" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.11 
      Special Memory Deallocation Functions</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">void CORBA_free(void *storage)</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function will free storage allocated by the stub.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">void CORBA_exception_free(CORBA_environment *ev)</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function will free storage allocated under exception propagation. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2058480" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.12 
      Exception Access Functions</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CORBA_char *CORBA_exception_id(CORBA_Environment *ev)</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function will return raised exception identity.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">void *CORBA_exception_value(CORBA_Environment *ev)</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function will return the value of a raised exception. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2063200" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.13 
      Special Types</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The erlang binary type has some special features.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">While the <fo:inline font-family="monospace">erlang::binary</fo:inline> idl type has the same C-definition as 
          a generated sequence of octets :</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      module erlang
      {

      ....

      // an erlang binary
      typedef sequence&lt;octet&gt; binary;
      
      };
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">it provides a way on sending trasparent  data between C and Erlang.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The C-definition (ic.h) for an erlang binary is :</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      typedef struct {
      CORBA_unsigned_long _maximum;
      CORBA_unsigned_long _length;
      CORBA_octet* _buffer;
      } erlang_binary;                        /* ERLANG BINARY */
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The differences (between <fo:inline font-family="monospace">erlang::binary</fo:inline> and <fo:inline font-family="monospace">sequence&lt; octet &gt;</fo:inline>) are :</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">on the erlang side the user is sending/receiving typical 
              built in erlang binaries, using <fo:inline font-family="monospace">term_to_binary() / binary_to_term()</fo:inline> 
              to create / extract binary structures.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">no encoding/decoding functions are generated</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">the underlying protocol is more efficient than usual sequences of
              octets</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The erlang binary IDL type is defined in <fo:inline font-family="monospace">erlang.idl</fo:inline>, while its 
          C definition is located in the <fo:inline font-family="monospace">ic.h</fo:inline> header file, both in the 
          <fo:inline font-family="monospace">IC-&lt; vsn &gt;/include</fo:inline> directory.
          The user will have to include the file <fo:inline font-family="monospace">erlang.idl</fo:inline> in order to use the
          <fo:inline font-family="monospace">erlang::binary</fo:inline> type.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2077984" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.14 
      A Mapping Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">      

      This is a small example of a simple stack. There are two
      operations on the stack, push and pop. The example shows all
      generated files as well as conceptual usage of the stack.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
// The source IDL file: stack.idl

struct s {
      long l;
      string s;
};

interface stack {
    void push(in s val);
    s pop();
};
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When this file is compiled it produces four files, two for the
      top scope and two for the stack interface scope. The important parts 
      of the generated C code for the stack API is shown below.      
</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">stack.c</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

void push(stack oe_obj, s val, CORBA_Environment* oe_env) {
  ...
}


s* pop(stack oe_obj, CORBA_Environment* oe_env) {
  ...
}
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">oe_stack.h</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#ifndef OE_STACK_H
#define OE_STACK_H 


/*------------------------------------------------------------
 * Struct definition: s
 */
typedef struct {
   long l;
   char *s;
} s;



#endif
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">stack.h just contains an include statement of <fo:inline font-family="monospace">oe_stack.h</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">oe_code_s.c</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

int oe_sizecalc_s(CORBA_Environment
      *oe_env, int* oe_size_count_index, int* oe_size) {
  ...
}

int oe_encode_s(CORBA_Environment *oe_env, s* oe_rec) {
  ...
}

int oe_decode_s(CORBA_Environment *oe_env, char *oe_first, 
                int* oe_outindex, s *oe_out) {
  ...
}
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The only files that are really important are the <fo:inline font-family="monospace">.h</fo:inline>
      files and  the stack.c file.</fo:block>
  <fo:block id="idp2091968" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.7  The C Client Back-end</fo:marker>1.7  The C Client Back-end</fo:block><fo:block id="idp2094784" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With the option <fo:inline font-family="monospace">{be, c_client}</fo:inline> the IDL Compiler generates
      C client stubs according to the IDL to C mapping, on top of the
      Erlang distribution and gen_server protocols.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The developer has to write additional code, that together with
      the generated C client stubs, form a hidden Erlang node. That
      additional code uses <fo:inline font-family="monospace">erl_interface</fo:inline> functions for defining
      the hidden node, and for establishing connections to other
      Erlang nodes.</fo:block>
  <fo:block id="idp2097840" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.2 
      Generated Stub Files</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The generated stub files are:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each IDL interface, a C source file, the name of which
          is <fo:inline font-family="monospace">&lt;Scoped Interface Name&gt;.c</fo:inline>. Each operation of the
          IDL interface is mapped to a C function (with scoped name)
          in that file;</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">C source files that contain functions for type conversion,
          memory allocation, and data encoding/decoding;</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">C header files that contain function prototypes and type
          definitions.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All C functions are exported (i.e. not declared static).</fo:block>
  <fo:block id="idp2103888" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.3 
      C Interface Functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each IDL operation a C interface function is 
      generated, the prototype of which is:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">&lt;Return Value&gt; &lt;Scoped Function Name&gt;(&lt;Interface Object&gt; oe_obj, &lt;Parameters&gt;, CORBA_Environment *oe_env);</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">&lt;Return Value&gt;</fo:inline> is the value to be returned as defined
          by the IDL specification;</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">&lt;Interface Object&gt; oe_obj</fo:inline> is the client interface
          object;</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">&lt;Parameters&gt;</fo:inline> is a list of parameters of the
          operation, defined in the same order as defined by the IDL
          specification;</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CORBA_Environment *oe_env</fo:inline> is a pointer to the current
          client environment. It contains the current file descriptor,
          the current input and output buffers, etc. For details see
          <fo:inline font-style="italic">CORBA_Environment C Structure</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2113024" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.4 
      Generating, Compiling and Linking</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To generate the C client stubs type the following in an
      appropriate shell:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erlc -I ICROOT/include "+{be, c_client}"  File.idl</fo:inline>,</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">ICROOT</fo:inline> is the root of the IC application. The
      <fo:inline font-family="monospace">-I ICROOT/include</fo:inline> is only needed if <fo:inline font-family="monospace">File.idl</fo:inline>
      refers to <fo:inline font-family="monospace">erlang.idl</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When compiling a generated C stub file, the directories
      <fo:inline font-family="monospace">ICROOT/include</fo:inline> and <fo:inline font-family="monospace">EICROOT/include</fo:inline>, have to be
      specified as include directories, where <fo:inline font-family="monospace">EIROOT</fo:inline> is the
      root directory of the Erl_interface application.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When linking object files the <fo:inline font-family="monospace">EIROOT/lib</fo:inline> and
      <fo:inline font-family="monospace">ICROOT/priv/lib</fo:inline> directories have to be specified. </fo:block>
  <fo:block id="idp2120800" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.5 
      An Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example the IDL specification file "random.idl" is used
      for generating C client stubs (the file is contained in the IC
      <fo:inline font-family="monospace">/examples/c-client</fo:inline> directory):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
module rmod {
 
  interface random {
 
    double produce();
 
    oneway void init(in long seed1, in long seed2, in long seed3);
 
  };
 
};        </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generate the C client stubs:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erlc '+{be, c_client}' random.idl
Erlang IDL compiler version X.Y.Z        </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Six files are generated. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compile the C client stubs:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Please read the <fo:inline font-family="monospace">ReadMe</fo:inline> file att the
      <fo:inline font-family="monospace">examples/c-client</fo:inline> directory</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the same
      directory you can find all the code for this example.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In particular you will find the <fo:inline font-family="monospace">client.c</fo:inline> file that contains
      all the additional code that must be written to obtain a complete
      client. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the <fo:inline font-family="monospace">examples/c-client</fo:inline> directory you will also find
      source code for an Erlang server, which can be used for testing
      the C client.</fo:block>
  <fo:block id="idp2133504" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.8  The C Server Back-end</fo:marker>1.8  The C Server Back-end</fo:block><fo:block id="idp2136320" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With the option <fo:inline font-family="monospace">{be, c_server}</fo:inline> the IDL Compiler generates
      C server skeletons according to the IDL to C mapping, on top of
      the Erlang distribution and gen_server protocols.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The developer has to write additional code, that together with
      the generated C server skeletons, form a hidden Erlang
      node. That additional code contains implementations of call-back
      functions that implement the true server functionality, and also
      code uses <fo:inline font-family="monospace">erl_interface</fo:inline> functions for defining the hidden
      node and for establishing connections to other Erlang nodes.</fo:block>
  <fo:block id="idp2139504" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.2 
      Generated Stub Files</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The generated stub files are:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each IDL interface, a C source file, the name of which
          is <fo:inline font-family="monospace">&lt;Scoped Interface Name&gt;__s.c</fo:inline>. Each operation of the
          IDL interface is mapped to a C function (with scoped name)
          in that file;</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">C source files that contain functions for type conversion,
          memory allocation, and data encoding/decoding;</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">C header files that contain function prototypes and type
          definitions.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All C functions are exported (i.e. not declared static).</fo:block>
  <fo:block id="idp2145552" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.3 
      C Skeleton Functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each IDL operation a C skeleton function is generated, the
      prototype of which is <fo:inline font-family="monospace">int &lt;Scoped Function Name&gt;__exec(&lt;Interface Object&gt; oe_obj, CORBA_Environment *oe_env)</fo:inline>, where <fo:inline font-family="monospace">&lt;Interface Object&gt;</fo:inline>, and
      <fo:inline font-family="monospace">CORBA_Environment</fo:inline> are of the same type as for the
      generated C client stubs code.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each <fo:inline font-family="monospace">&lt;Scoped Function Name&gt;__exec()</fo:inline> function calls the
      call-back function</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">&lt;Scoped Function Name&gt;_rs* &lt;Scoped Function Name&gt;__cb(&lt;Interface Object&gt; oe_obj, &lt;Parameters&gt;, CORBA_Environment *oe_env)</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where the arguments are of the same type as those generated for
      C client stubs. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value <fo:inline font-family="monospace">&lt;Scoped Function Name&gt;_rs* </fo:inline> is a pointer
      to a function with the same signature as the call-back function
      <fo:inline font-family="monospace">&lt;Scoped Function Name&gt;_cb</fo:inline>, and is called after the call-back
      function has been evaluated (provided that the pointer is not equal
      to <fo:inline font-family="monospace">NULL</fo:inline>). </fo:block>
  <fo:block id="idp2152576" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.4 
      The Server Loop</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The developer has to implement code for establishing connections
      with other Erlang nodes, code for call-back functions and restore
      functions. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In addition, the developer also has to implement code for a
      server loop, that receives messages and calls the relevant
      <fo:inline font-family="monospace">__exec</fo:inline> function. For that purpose the IC library function
      <fo:inline font-family="monospace">oe_server_receive()</fo:inline> function can be used.</fo:block>
  <fo:block id="idp2155856" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.5 
      Generating, Compiling and Linking</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To generate the C server skeletons type the following in an
      appropriate shell:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erlc -I ICROOT/include "+{be, c_server}"  File.idl</fo:inline>,</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">ICROOT</fo:inline> is the root of the IC application. The
      <fo:inline font-family="monospace">-I ICROOT/include</fo:inline> is only needed if <fo:inline font-family="monospace">File.idl</fo:inline>
      refers to <fo:inline font-family="monospace">erlang.idl</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When compiling a generated C skeleton file, the directories
      <fo:inline font-family="monospace">ICROOT/include</fo:inline> and <fo:inline font-family="monospace">EICROOT/include</fo:inline>, have to be
      specified as include directories, where <fo:inline font-family="monospace">EIROOT</fo:inline> is the
      root directory of the Erl_interface application.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When linking object files the <fo:inline font-family="monospace">EIROOT/lib</fo:inline> and
      <fo:inline font-family="monospace">ICROOT/priv/lib</fo:inline> directories have to be specified. </fo:block>
  <fo:block id="idp2163632" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.6 
      An Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example the IDL specification file "random.idl" is used
      for generating C server skeletons (the file is contained in the IC
      <fo:inline font-family="monospace">/examples/c-server</fo:inline> directory):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
module rmod {
 
  interface random {
 
    double produce();
 
    oneway void init(in long seed1, in long seed2, in long seed3);
 
  };
 
};        </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generate the C server skeletons:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erlc '+{be, c_server}' random.idl
Erlang IDL compiler version X.Y.Z        </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Six files are generated. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compile the C server skeletons:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Please read the <fo:inline font-family="monospace">ReadMe</fo:inline> file in the
      <fo:inline font-family="monospace">examples/c-server</fo:inline> directory.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the same directory you can find all the code for this
      example.  In particular you will find the <fo:inline font-family="monospace">server.c</fo:inline> file
      that contains all the additional code that must be written to
      obtain a complete server.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the <fo:inline font-family="monospace">examples/c-server</fo:inline> directory you will also find
      source code for an Erlang client, which can be used for testing
      the C server.</fo:block>
  <fo:block id="idp2175920" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.9  CORBA_Environment C Structure</fo:marker>1.9  CORBA_Environment C Structure</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This chapter describes the CORBA_Environment C structure.</fo:block><fo:block id="idp2179808" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.1 
      C Structure</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here is the complete definition of the CORBA_Environment 
      C structure, defined in file "ic.h" : </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
/* Environment definition */
typedef struct {

  /*----- CORBA compatibility part ------------------------*/
  /* Exception tag, initially set to CORBA_NO_EXCEPTION ---*/
  CORBA_exception_type   _major;          

  /*----- External Implementation part - initiated by the user ---*/
  /* File descriptor                                              */
  int                    _fd;             
  /* Size of input buffer                                         */
  int                    _inbufsz;        
  /* Pointer to always dynamically allocated buffer for input     */
  char                  *_inbuf;         
  /* Size of output buffer                                        */
  int                    _outbufsz;       
  /* Pointer to always dynamically allocated buffer for output    */ 
  char                  *_outbuf;        
 /* Size of memory chunks in bytes, used for increasing the output
    buffer, set to &gt;= 32, should be around &gt;= 1024 for performance
    reasons                                                       */ 
 int                    _memchunk;       
 /* Pointer for registered name                                   */
  char                   _regname[256];   
 /* Process identity for caller                                   */
  erlang_pid            *_to_pid;         
  /* Process identity for callee                                  */ 
  erlang_pid            *_from_pid;      

  /*- Internal Implementation part - used by the server/client ---*/
  /* Index for input buffer                                       */
  int                    _iin;            
  /* Index for output buffer                                      */
  int                    _iout;          
  /* Pointer for operation name                                   */
  char                   _operation[256];
   /* Used to count parameters                                    */
  int                    _received;      
  /* Used to identify the caller                                  */
  erlang_pid             _caller;        
 /* Used to identify the call                                     */
  erlang_ref             _unique;         
  /* Exception id field                                           */
  CORBA_char            *_exc_id;        
  /* Exception value field                                        */
   void                  *_exc_value;           

  
} CORBA_Environment; 
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The structure is divided into three parts:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The CORBA Compatibility part, demanded by the standard OMG
          IDL mapping v2.0.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The external implementation part used for generated
          client/server code.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The internal part useful for those who wish to define their
          own functions.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2188432" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.2 
      The CORBA Compatibility Part</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Contains only one field <fo:inline font-family="monospace">_major</fo:inline> defined as a
      CORBA_Exception_type.  The CORBA_Exception type is an integer
      which can be one of:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">CORBA_NO_EXCEPTION</fo:inline>, by default equal to 0, can be
          set by the application programmer to another value.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">CORBA_SYSTEM_EXCEPTION</fo:inline>, by default equal to -1, can
          be set by the application programmer to another value.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current definition of these values are:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      #define CORBA_NO_EXCEPTION      0
      #define CORBA_SYSTEM_EXCEPTION -1
    </fo:block>
  <fo:block id="idp2194864" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.3 
      The External Part</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This part contains the following fields:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">int <fo:inline font-weight="bold">_fd</fo:inline> - a file descriptor returned from
          erl_connect.  Used for connection setting.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">char* <fo:inline font-weight="bold">_inbuf</fo:inline> - pointer to a buffer used for
          input. Buffer size checks are done under runtime that
          prevent buffer overflows.  This is done by expanding the
          buffer to fit the input message.  In order to allow buffer
          reallocation, the output buffer must always be dynamically
          allocated.  The pointer value can change under runtime in
          case of buffer reallocation.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">int <fo:inline font-weight="bold">_inbufsz</fo:inline> - start size of input buffer.  Used
          for setting the input buffer size under initialization of
          the Erl_Interface function ei_receive_encoded/5.  The value
          of this field can change under runtime in case of input
          buffer expansion to fit larger messages</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">int <fo:inline font-weight="bold">_outbufsz</fo:inline> - start size of output buffer. The
          value of this field can change under runtime in case of
          input buffer expansion to fit larger messages</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">char* <fo:inline font-weight="bold">_outbuf</fo:inline> - pointer to a buffer used for
          output.  Buffer size checks prevent buffer overflows under
          runtime, by expanding the buffer to fit the output message
          in cases of lack of space in buffer. In order to allow
          buffer reallocation, the output buffer must always be
          dynamically allocated.  The pointer value can change under
          runtime in case of buffer reallocation.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">int <fo:inline font-weight="bold">_memchunk</fo:inline> - expansion unit size for the output
          buffer.  This is the size of memory chunks in bytes used for
          increasing the output in case of buffer expansion. The value
          of this field must be always set to &gt;= 32, should be at
          least 1024 for performance reasons.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">char <fo:inline font-weight="bold">regname[256]</fo:inline> - a registered name for a process. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">erlang_pid* <fo:inline font-weight="bold">_to_pid</fo:inline> - an Erlang process identifier,
          is only used if the registered_name parameter is the empty
          string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">erlang_pid* <fo:inline font-weight="bold">_from_pid</fo:inline> - your own process id so the
          answer can be returned.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2210752" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.4 
      The Internal Part</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This part contains the following fields:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">int <fo:inline font-weight="bold">_iin</fo:inline> - Index for input buffer.  Initially set
          to zero.  Updated to agree with the length of the received
          encoded message.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">int <fo:inline font-weight="bold">_iout</fo:inline> - Index for output buffer Initially set
          to zero.  Updated to agree with the length of the message
          encoded to the communication counterpart.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">char <fo:inline font-weight="bold">_operation[256]</fo:inline> - Pointer for operation name.
          Set to the operation to be called.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">int <fo:inline font-weight="bold">_received</fo:inline> - Used to count parameters.
          Initially set to zero.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">erlang_pid <fo:inline font-weight="bold">_caller</fo:inline> - Used to identify the caller.
          Initiated to a value that identifies the caller.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">erlang_ref <fo:inline font-weight="bold">_unique</fo:inline> - Used to identify the call.
          Set to a default value in the case of generated functions.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">CORBA_char* <fo:inline font-weight="bold">_exc_id</fo:inline> - Exception id field.
          Initially set to NULL to agree with the initial value of
          _major (CORBA_NO_EXCEPTION).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">void* <fo:inline font-weight="bold">_exc_value</fo:inline> - Exception value field Initially
          set to <fo:inline font-weight="bold">NULL</fo:inline> to agree with the initial value of
          _major (CORBA_NO_EXCEPTION).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The advanced user who defines his own functions has to
      update/support these values in a way similar to how they are
      updated in the generated code.</fo:block>
  <fo:block id="idp2225392" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.5 
      Creating and Initiating the CORBA_Environment Structure</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two ways to set the CORBA_Environment structure:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Manually</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following default values must be set to the
          CORBA_Environment *<fo:inline font-weight="bold">ev</fo:inline> fields, when buffers for
          input/output should have the size <fo:inline font-weight="bold">inbufsz</fo:inline>/
          <fo:inline font-weight="bold">outbufsz</fo:inline>:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">ev-&gt;_inbufsz</fo:inline> = <fo:inline font-weight="bold">inbufsz</fo:inline>;</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value for this field can be between 0 and maximum
              size of a signed integer.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">ev-&gt;_inbuf</fo:inline> = malloc(<fo:inline font-weight="bold">inbufsz</fo:inline>);</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The size of the allocated buffer must be equal to the
              value of its corresponding index, _inbufsz.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">ev-&gt;_outbufsz</fo:inline> = <fo:inline font-weight="bold">outbufsz</fo:inline>;</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value for this field can be between 0 and maximum
              size of a signed integer.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">ev-&gt;_outbuf</fo:inline> = malloc(<fo:inline font-weight="bold">outbufsz</fo:inline>);</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The size of the allocated buffer must be equal to the
              value of its corresponding index, _outbufsz.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">ev-&gt;_memchunk</fo:inline> = <fo:inline font-weight="bold">__OE_MEMCHUNK__</fo:inline>;</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Please note that __OE_MEMCHUNK__ is equal to
              <fo:inline font-weight="bold">1024</fo:inline>, you can set this value to a value bigger
              than 32 yourself.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">ev-&gt;_to_pid</fo:inline> = <fo:inline font-weight="bold">NULL</fo:inline>;</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">ev-&gt;_from_pid</fo:inline> = <fo:inline font-weight="bold">NULL</fo:inline>;</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By using the <fo:inline font-weight="bold">CORBA_Environment_alloc</fo:inline>/2 function. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The CORBA_Environment_alloc function is defined as:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          CORBA_Environment *CORBA_Environment_alloc(int inbufsz, 
                                                     int outbufsz);
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">inbufsz</fo:inline> is the desired size of input buffer</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">outbufsz</fo:inline> is the desired size of output
              buffer</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">return value is a <fo:inline font-weight="bold">pointer</fo:inline> to an allocated and
              initialized <fo:inline font-weight="bold">CORBA_Environment</fo:inline> structure.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function will set all needed default values and
          allocate buffers equal to the values passed, but will not
          allocate space for the _to_pid and _from_pid fields.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To free the space allocated by CORBA_Environment_alloc/2:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First call CORBA_free for the input and output buffers.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After freeing the buffer space, call CORBA_free for
              the CORBA_Environment space.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Remember to set the fields <fo:inline font-weight="bold">_fd</fo:inline>, <fo:inline font-weight="bold">_regname</fo:inline>,
        <fo:inline font-weight="bold">*_to_pid</fo:inline> and/or <fo:inline font-weight="bold">*_from_pid</fo:inline> to the
        appropriate application values. These are not automatically
        set by the stubs.</fo:block>
    </fo:block>
    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Never assign static buffers to the buffer pointers. Never set
        the <fo:inline font-weight="bold">_memchunk</fo:inline> field to a value less than
        <fo:inline font-weight="bold">32</fo:inline>.</fo:block>
    </fo:block>
  <fo:block id="idp2262672" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.6 
      Setting System Exceptions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the user wishes to set own system exceptions at critical
      positions on the code, it is strongly recommended to use one of
      the current values:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">CORBA_NO_EXCEPTION upon success.  The value of the _exc_id
          field should be then set to NULL.  The value of the
          _exc_value field should be then set to NULL.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">CORBA_SYSTEM_EXCEPTION upon system failure.  The value of
          the _exc_id field should be then set to one of the values
          defined in "ic.h" :</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  #define UNKNOWN          "UNKNOWN"
  #define BAD_PARAM        "BAD_PARAM"
  #define NO_MEMORY        "NO_MEMORY"
  #define IMPL_LIMIT       "IMP_LIMIT"
  #define COMM_FAILURE     "COMM_FAILURE"
  #define INV_OBJREF       "INV_OBJREF"
  #define NO_PERMISSION    "NO_PERMISSION"
  #define INTERNAL         "INTERNAL"
  #define MARSHAL          "MARSHAL"
  #define INITIALIZE       "INITIALIZE"
  #define NO_IMPLEMENT     "NO_IMPLEMENT"
  #define BAD_TYPECODE     "BAD_TYPECODE"
  #define BAD_OPERATION    "BAD_OPERATION"
  #define NO_RESOURCES     "NO_RESOURCES"
  #define NO_RESPONSE      "NO_RESPONSE"
  #define PERSIST_STORE    "PERSIST_STORE"
  #define BAD_INV_ORDER    "BAD_INV_ORDER"
  #define TRANSIENT        "TRANSIENT"
  #define FREE_MEM         "FREE_MEM"
  #define INV_IDENT        "INV_IDENT"
  #define INV_FLAG         "INV_FLAG"
  #define INTF_REPOS       "INTF_REPOS"
  #define BAD_CONTEXT      "BAD_CONTEXT"
  #define OBJ_ADAPTER      "OBJ_ADAPTER"
  #define DATA_CONVERSION  "DATA_CONVERSION"
  #define OBJ_NOT_EXIST    "OBJECT_NOT_EXIST"
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of the _exc_value field should be then set to a string
      that explains the problem in an informative way.  The user
      should use the functions CORBA_exc_set/4 and
      CORBA_exception_free/1 to free the exception.
      The user has to use CORBA_exception_id/1 and
      CORBA_exception_value/1 to access exception information.
      Prototypes for these functions are declared in "ic.h"</fo:block>
  <fo:block id="idp2273520" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.10  IDL to Java language Mapping</fo:marker>1.10  IDL to Java language Mapping</fo:block><fo:block id="idp2276352" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This chapter describes the mapping of OMG IDL constructs to the Java
      programming language for the generation of native Java - Erlang  
      communication. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This language mapping defines the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All OMG IDL basic types</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All OMG IDL constructed types</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">References to constants defined in OMG IDL</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Invocations of operations, including passing of
          parameters and receiving of result</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Access to attributes</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2283648" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.2 
      Specialties in the Mapping</fo:block>
    

    <fo:block id="idp2284400" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Names Reserved by the Compiler</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The IDL compiler reserves all identifiers starting with
        <fo:inline font-family="monospace">OE_</fo:inline> and <fo:inline font-family="monospace">oe_</fo:inline> for internal use.</fo:block>
    
  <fo:block id="idp2286864" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.3 
      Basic OMG IDL Types</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The mapping of basic types are according to the standard. All basic types have 
      a special Holder class.</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">OMG IDL type</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Java type</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">float</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">float</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">double</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">double</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">short</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">short</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned short</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">short</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">int</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">unsigned long long</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">char</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">char</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">wchar</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">char</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">boolean</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">boolean</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">octet</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">octet</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">string</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">java.lang.String</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">wstring</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">java.lang.String</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">any</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Any</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">long double</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Not supported</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Object</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Not supported</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">void</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">void</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        10.1:
         
        OMG IDL basic types</fo:block>
  <fo:block id="idp2335680" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.4 
      Constructed OMG IDL Types</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All constructed types are according to the standard with three (3) major exceptions.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The IDL Exceptions are not implemented in this Java mapping.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions used for read/write to streams, defined in <fo:inline font-family="monospace">Helper</fo:inline> functions
          are named unmarshal (instead for read) and marshal (instead for write).  </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The streams used in <fo:inline font-family="monospace">Helper</fo:inline> functions are <fo:inline font-family="monospace">OtpInputStream</fo:inline> for 
          input and <fo:inline font-family="monospace">OtpOutputStream</fo:inline> for output.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2343648" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.5 
      Mapping for Constants</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Constants are mapped according to the standard.</fo:block>
  <fo:block id="idp2345024" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.6 
      Invocations of Operations</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Operation invocation is implemented according to the standard.
      The implementation is in the class <fo:inline font-family="monospace">_&lt;nterfacename&gt;Stub.java</fo:inline> which implements 
      the interface in <fo:inline font-family="monospace">&lt;nterfacename&gt;.java</fo:inline>.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
test._iStub client;

client.op(10);
    </fo:block>

    <fo:block id="idp2348016" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Operation Implementation</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The server is implemented through extension of the class 
        <fo:inline font-family="monospace">_&lt;nterfacename&gt;ImplBase.java</fo:inline> and implementation of all the methods in the 
        interface.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
public class server extends test._iImplBase {
  
  public void op(int i) throws java.lang.Exception {
    System.out.println("Received call op()");
    o.value = i;
    return i;
  }

}
      </fo:block>
    
  <fo:block id="idp2350992" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.7 
      Exceptions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">While exception mapping is not implemented, the stubs will
      generate some Java exceptions in case of operation failure.
      No exceptions are propagated through the communication.</fo:block>
  <fo:block id="idp2352512" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.8 
      Access to Attributes</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Attributes are supported according to the standard.</fo:block>
  <fo:block id="idp2353888" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.9 
      Summary of Argument/Result Passing for Java</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All types (<fo:inline font-family="monospace">in</fo:inline>, <fo:inline font-family="monospace">out</fo:inline> or <fo:inline font-family="monospace">inout</fo:inline>) of user defined parameters are supported
      in the Java mapping. This is also the case in the Erlang mappings but <fo:inline font-weight="bold">not</fo:inline> in the C 
      mapping. <fo:inline font-family="monospace">inout</fo:inline> parameters are not supported in the C mapping so if you are going to 
      do calls to or from a C program <fo:inline font-family="monospace">inout</fo:inline> cannot be used in the IDL specifications.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">out</fo:inline> and <fo:inline font-family="monospace">inout</fo:inline> parameters must be of Holder types. There is a jar file ( <fo:inline font-family="monospace">ic.jar</fo:inline>) 
      with Holder classes for the basic types in the <fo:inline font-family="monospace">ic</fo:inline> application. This library is in the directory
      <fo:inline font-family="monospace">$OTPROOT/lib/ic_&lt;version number&gt;/priv</fo:inline>.</fo:block>
  <fo:block id="idp2360864" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.10 
      Communication Toolbox</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The generated client and server stubs use the classes
      defined in the <fo:inline font-family="monospace">jinterface</fo:inline> package to communicate 
      with other nodes.
      The most important classes are :</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OtpInputStream</fo:inline> which is the stream class used for incoming message storage</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OtpOutputStream</fo:inline> which is the stream class used for outgoing message storage</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OtpErlangPid</fo:inline> which is the process identification class used to identify processes inside
          a java node.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The recommended constructor function for the OtpErlangPid is 
          <fo:inline font-family="monospace">OtpErlangPid(String node, int id, int serial, int creation)</fo:inline> where :</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">String node</fo:inline>, is the name of the node where this process runs.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">int id</fo:inline>, is the identification number for this identity.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">int serial</fo:inline>, internal information, must be an 18-bit integer.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">int creation</fo:inline>, internal information, must have value in range 0..3.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OtpConnection</fo:inline> which is used to define a connection between nodes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">While the connection object is stub side constructed in client stubs, it is
          returned after calling the <fo:inline font-family="monospace">accept</fo:inline> function from an OtpErlangServer object
          in server stubs.
          The following methods used for node connection :</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OtpInputStream receiveBuf()</fo:inline>, which returns the incoming streams that
              contain the message arrived.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">void sendBuf(OtpErlangPid client, OtpOutputStream reply)</fo:inline>, which sends
              a reply message (in an OtpOutputStream form) to the client node.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">void close()</fo:inline>, which closes a connection.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OtpServer</fo:inline> which is used to define a server node.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The recommended constructor function for the OtpServer is :</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OtpServer(String node, String cookie)</fo:inline>. where :</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">node</fo:inline> is the requested name for the new java node, 
                  represented as a String object.</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">cookie</fo:inline> is the requested cookie name for the new java node, 
                  represented as a String object.</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
              </fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following methods used for node registration and connection acceptance :</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">boolean publishPort()</fo:inline>, which registers the server node to <fo:inline font-family="monospace">epmd</fo:inline> daemon.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OtpConnection accept()</fo:inline>, which waits for a connection and returns the 
              OtpConnection object which is unique for each client node.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2396864" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.11 
      The Package com.ericsson.otp.ic</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The package <fo:inline font-style="italic">com.ericsson.otp.ic</fo:inline> 
      contains a number of java classes specially designed for the IC generated java-back-ends :</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Standard java classes defined through OMG-IDL java mapping :</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">BooleanHolder</fo:inline></fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">ByteHolder</fo:inline></fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">CharHolder</fo:inline></fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">ShortHolder</fo:inline></fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">IntHolder</fo:inline></fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">LongHolder</fo:inline></fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">FloatHolder</fo:inline></fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">DoubleHolder</fo:inline></fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">StringHolder</fo:inline></fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">Any</fo:inline>,
              <fo:inline font-style="italic">AnyHelper</fo:inline>,
              <fo:inline font-style="italic">AnyHolder</fo:inline></fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">TypeCode</fo:inline></fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">TCKind</fo:inline></fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Implementation-dependant classes :</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">Environment</fo:inline></fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">Holder</fo:inline></fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang compatibility classes :</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">Pid</fo:inline>,
              <fo:inline font-style="italic">PidHelper</fo:inline>,
              <fo:inline font-style="italic">PidHolder</fo:inline></fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Pid class originates from <fo:inline font-family="monospace">OtpErlangPid</fo:inline> and is used to 
              represent the Erlang built-in <fo:inline font-family="monospace">pid</fo:inline> type, a process's identity.
              PidHelper and PidHolder are helper respectively holder classes for Pid.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">Ref</fo:inline>,
              <fo:inline font-style="italic">RefHelper</fo:inline>,
              <fo:inline font-style="italic">RefHolder</fo:inline></fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Ref class originates from <fo:inline font-family="monospace">OtpErlangRef</fo:inline> and is used to 
              represent the Erlang built-in <fo:inline font-family="monospace">ref</fo:inline> type, an Erlang reference.
              RefHelper and RefHolder are helper respectively holder classes for Ref.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">Port</fo:inline>,
              <fo:inline font-style="italic">PortHelper</fo:inline>,
              <fo:inline font-style="italic">PortHolder</fo:inline></fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Port class originates from <fo:inline font-family="monospace">OtpErlangPort</fo:inline> and is used to 
              represent the Erlang built-in <fo:inline font-family="monospace">port</fo:inline> type, an Erlang port.
              PortHelper and PortHolder are helper respectively holder classes for Port.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">Term</fo:inline>,
              <fo:inline font-style="italic">TermHelper</fo:inline>,
              <fo:inline font-style="italic">TermHolder</fo:inline></fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Term class originates from <fo:inline font-family="monospace">Any</fo:inline> and is used to 
              represent the Erlang built-in <fo:inline font-family="monospace">term</fo:inline> type, an Erlang term.
              TermHelper and TermHolder are helper respectively holder classes for Term.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To use the Erlang build-in classes, you will have to include the file <fo:inline font-family="monospace">erlang.idl</fo:inline>
          located under <fo:inline font-family="monospace">$OTPROOT/lib/ic/include</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2444832" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.12 
      The Term Class</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Term</fo:inline> class is intended to represent the Erlang term generic type.
      It extends the <fo:inline font-family="monospace">Any</fo:inline> class and it is basically used in the same way as
      in the Any type.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The big difference between Term and Any is the use of <fo:inline font-family="monospace">guard</fo:inline> methods
      instead of <fo:inline font-family="monospace">TypeCode</fo:inline> to determine the data included in the Term.
      This is especially true when the Term's value class cannot be 
      determined at compilation time. The guard methods found in Term :</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">boolean isAtom()</fo:inline> returns <fo:inline font-family="monospace">true</fo:inline> if the Term is an OtpErlangAtom, <fo:inline font-family="monospace">false</fo:inline> otherwise</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">boolean isConstant()</fo:inline> returns <fo:inline font-family="monospace">true</fo:inline> if the Term is neither an OtpErlangList nor an OtpErlangTuple, <fo:inline font-family="monospace">false</fo:inline> otherwise</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">boolean isFloat()</fo:inline> returns <fo:inline font-family="monospace">true</fo:inline> if the Term is an OtpErlangFloat, <fo:inline font-family="monospace">false</fo:inline> otherwise</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">boolean isInteger()</fo:inline> returns <fo:inline font-family="monospace">true</fo:inline> if the Term is an OtpErlangInt, <fo:inline font-family="monospace">false</fo:inline> otherwise</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">boolean isList()</fo:inline> returns <fo:inline font-family="monospace">true</fo:inline> if the Term is an OtpErlangList, <fo:inline font-family="monospace">false</fo:inline> otherwise</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">boolean isString()</fo:inline> returns <fo:inline font-family="monospace">true</fo:inline> if the Term is an OtpErlangString, <fo:inline font-family="monospace">false</fo:inline> otherwise</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">boolean isNumber()</fo:inline> returns <fo:inline font-family="monospace">true</fo:inline> if the Term is an OtpErlangInteger or an OtpErlangFloat, <fo:inline font-family="monospace">false</fo:inline> otherwise</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">boolean isPid()</fo:inline> returns <fo:inline font-family="monospace">true</fo:inline> if the Term is an OtpErlangPid or Pid, <fo:inline font-family="monospace">false</fo:inline> otherwise</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">boolean isPort()</fo:inline> returns <fo:inline font-family="monospace">true</fo:inline> if the Term is an OtpErlangPort or Port, <fo:inline font-family="monospace">false</fo:inline> otherwise</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">boolean isReference()</fo:inline> returns <fo:inline font-family="monospace">true</fo:inline> if the Term is an OtpErlangRef, <fo:inline font-family="monospace">false</fo:inline> otherwise</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">boolean isTuple()</fo:inline> returns <fo:inline font-family="monospace">true</fo:inline> if the Term is an OtpErlangTuple, <fo:inline font-family="monospace">false</fo:inline> otherwise</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">boolean isBinary()</fo:inline> returns <fo:inline font-family="monospace">true</fo:inline> if the Term is an OtpErlangBinary, <fo:inline font-family="monospace">false</fo:inline> otherwise</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2478192" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.13 
      Stub File Types</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each interface, three (3) stub/skeleton files are generated :</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A java interface file, named after the idl interface.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A client stub file, named after the convention  <fo:inline font-family="monospace">_&lt; interface name &gt;Stub</fo:inline> 
          which implements the java interface. Example : <fo:inline font-family="monospace">_stackStub</fo:inline>.java</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A server stub file, named after the convention  <fo:inline font-family="monospace">_&lt; interface name &gt;ImplBase</fo:inline> 
          which implements the java interface. Example : <fo:inline font-family="monospace">_stackImplBase</fo:inline>.java</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2485856" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.14 
      Client Stub Initialization, Methods Exported</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The recommended constructor function for client stubs accepts four (4) parameters :</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">String selfNode</fo:inline>, the node identification name to be used in the new
          client node.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">String peerNode</fo:inline>, the node identification name where the client process is running.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">String cookie</fo:inline>, the cookie to be used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Object server</fo:inline>, where the java Object can be one of:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OtpErlangPid</fo:inline>, the server's process identity under the node where the server 
              process is running.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">String</fo:inline>, the server's registered name under the node where the server 
              process is running.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The methods exported from the generated client stub are :</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">void __disconnect()</fo:inline>, which disconnects the server connection.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">void __reconnect()</fo:inline>, which disconnects the server connection if open,
          and then connects to the same peer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">void __stop()</fo:inline>, which sends the standard stop termination call.
          When connected to an Erlang server, the server will be terminated.
          When connected to a java server, this will set a stop flag that 
          denotes that the server must be terminated.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">com.ericsson.otp.erlang.OtpErlangRef __getRef()</fo:inline>, will return the message reference
          received from a server that denotes which call it is referring to.
          This is useful when building asynchronous clients.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">java.lang.Object __server()</fo:inline>, which returns the server for the current connection.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2507616" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.15 
      Server Skeleton Initialization, Server Stub Implementation, Methods Exported</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The constructor function for server skeleton accepts no parameters.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The server skeleton file contains a server <fo:inline font-family="monospace">switch</fo:inline> which
      decodes messages from the input stream and calls implementation
      (<fo:inline font-family="monospace">callback</fo:inline>) functions.
      As the server skeleton is declared <fo:inline font-family="monospace">abstract</fo:inline>, the application 
      programmer will have to create a stub class that <fo:inline font-family="monospace">extends</fo:inline> the
      skeleton file. In this class, all operations defined in the interface
      class, generated under compiling the idl file, are implemented.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The server skeleton file exports the following methods:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OtpOutputStrem invoke(OtpInputStream request)</fo:inline>, where the input
          stream <fo:inline font-family="monospace">request</fo:inline> is unmarshalled, the implementation function is called
          and a reply stream is marshalled.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">boolean __isStopped()</fo:inline>, which returns true if a stop message is received.
          The implementation of the stub should always check if such a message is received
          and terminate if so.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">boolean __isStopped(com.ericsson.otp.ic.Environment)</fo:inline>, which returns true if 
          a stop message is received for a certain Environment and Connection.
          The implementation of the stub should always check if such a message is received
          and terminate if so.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OtpErlangPid __getCallerPid()</fo:inline>, which returns the caller identity for the latest call.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OtpErlangPid __getCallerPid(com.ericsson.otp.ic.Environment)</fo:inline>, which returns the caller 
          identity for the latest call on a certain Environment.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">java.util.Dictionary __operations()</fo:inline>, which returns the operation dictionary which
          holds all operations supported by the server skeleton.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2523232" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.16 
      A Mapping Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">      

      This is a small example of a simple stack. There are two
      operations on the stack, push and pop. The example shows some of the 
      generated files.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
// The source IDL file: stack.idl

struct s {
      long l;
      string s;
};

interface stack {
    void push(in s val);
    s pop();
};
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When this file is compiled it produces eight files. Three important files 
      are shown below.      
</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The public interface is in <fo:inline font-weight="bold">stack.java</fo:inline>.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

public interface stack {

/****
 * Operation "stack::push" interface functions 
 *
 */

    void push(s val) throws java.lang.Exception;

/****
 * Operation "stack::pop" interface functions 
 *
 */

    s pop() throws java.lang.Exception;

}
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the IDL struct s three files are generated, a public class in <fo:inline font-weight="bold">s.java</fo:inline>.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

final public class s {
   // instance variables
   public int l;
   public java.lang.String s;

   // constructors
   public s() {};
   public s(int _l, java.lang.String _s) {
     l = _l;
     s = _s;
   };

};
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A holder class in <fo:inline font-weight="bold">sHolder.java</fo:inline> and a helper class in <fo:inline font-weight="bold">sHelper.java</fo:inline>.
      The helper class is used for marshalling.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

public class sHelper {

   // constructors
   private sHelper() {};

   // methods
   public static s unmarshal(OtpInputStream in) 
      throws java.lang.Exception {
        :
        :
   };

   public static void marshal(OtpOutputStream out, s value) 
      throws java.lang.Exception {
        :
        :
   };

};
    </fo:block>
  <fo:block id="idp2533360" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.17 
      Running the Compiled Code</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When using the generated java code you must have added 
      <fo:inline font-family="monospace">$OTPROOT/lib/ic_&lt;version number&gt;/priv</fo:inline> and 
      <fo:inline font-family="monospace">$OTPROOT/lib/jinterface_&lt;version number&gt;/priv</fo:inline> to your 
      <fo:inline font-family="monospace">CLASSPATH</fo:inline> variable to get
      basic Holder types and the communication classes.</fo:block>
  <fo:block id="idp71072" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">IC</fo:inline> application is an Erlang implementation of an IDL
      compiler.</fo:block>
  <fo:block page-break-before="always" id="idp285200" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ic</fo:marker>ic</fo:block>Erlang module</fo:block>
  <fo:block/>
  ic
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ic module is an Erlang implementation of an OMG IDL
      compiler. Depending on the choice of back-end the code will map
      to Erlang, C, or Java. The compiler generates client stubs and
      server skeletons.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two kinds of files are generated for each scope: Ordinary code
      files and header files. The latter are used for defining record
      definitions, while the ordinary files contain the object
      interface functions.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp282592">ic:gen(FileName) -&gt; Result</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp279408">ic:gen(FileName, [Option]) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ok | error | {ok, [Warning]} | {error, [Warning], [Error]}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"/></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = [ GeneralOption | CodeOption | WarningOption | BackendOption]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"/></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GeneralOption = </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">{outdir, String()} | {cfgfile, String()} | {use_preproc, bool()} |</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">{preproc_cmd, String()} | {preproc_flags, String()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"/></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CodeOption =</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">{gen_hrl, bool()} | {serv_last_call, exception | exit} | {{impl, String()}, String()} | {light_ifr, bool()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">this | {this, String()} | {{this, String()}, bool()} |</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">from | {from, String()} | {{from, String()}, bool()} |</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">handle_info | {handle_info, String()} | {{handle_info, String()}, bool()} |</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">timeout | {timeout, String()} | {{timeout, String()}, bool()} |</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">{scoped_op_calls, bool()} | {scl, bool()} |</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">{user_protocol, Prefix} |</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">{c_timeout, {SendTimeout, RecvTimeout}} |</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">{c_report, bool()} |</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">{precond, {atom(), atom()}} | {{precond, String()} {atom(), atom()}} |</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">{postcond, {atom(), atom()}} | {{postcond, String()} {atom(), atom()}}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"/></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">WarningOption =</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">{'Wall', bool()} | {maxerrs, int() | infinity} |</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">{maxwarns, int() | infinity} | {nowarn, bool()} |</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">{warn_name_shadow, bool()} | {pedantic, bool()} |</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">{silent, bool()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"/></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">BackendOption = {be, Backend}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"/></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Backend = erl_corba | erl_template | erl_plain | erl_genserv | c_client | c_server | java</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"/></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DirNAme = string() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FileName = string() | atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The tuple <fo:inline font-family="monospace">{Option, true}</fo:inline> can be replaced by
          <fo:inline font-family="monospace">Option</fo:inline> for boolean values.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ic:gen/2</fo:inline> function can be called from the command 
          line as follows:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erlc "+Option" ... File.idl</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erlc "+{be,c_client}"  '+{outdir, "../out"}' File.idl</fo:inline></fo:block>
      </fo:block>
  

  <fo:block id="idp554000" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">General options</fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">outdir</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Places all output files in the directory given by the option.
          The directory will be created if it does not already exist.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">{outdir, "output/generated"}</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">cfgfile</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Uses <fo:inline font-weight="bold">FileName</fo:inline> as configuration file. Options will
          override compiler defaults but can be overridden by command line
          options. Default value is <fo:inline font-family="monospace">".ic_config"</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">{cfgfile, "special.cfg"}</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">use_preproc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Uses a preprocessor. Default value is true.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">preproc_cmd</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Command string to invoke the preprocessor. The actual
          command will be built as
          <fo:inline font-family="monospace">preproc_cmd++preproc_flags++FileName</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">{preproc_cmd, "erl"})</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">{preproc_cmd, "gcc -x c++ -E"}</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">preproc_flags</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Flags given to the preprocessor.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">{preproc_flags, "-I../include"}</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idm33408" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Code options</fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">light_ifr</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Currently, the default setting is <fo:inline font-family="monospace">false</fo:inline>. To be able to
          use this option Orber must be configured to use Light IFR (see
          Orber's User's Guide). When this options is used, the size of the
          generated files used to register the API in the IFR DB are minimized.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">{light_ifr, true}</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">gen_hrl</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generate header files. Default is true.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">serv_last_call</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the last <fo:inline font-family="monospace">gen_server handle_call</fo:inline> either raise a
          CORBA exception or just  exit plainly. Default is the exception.
          </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">{{impl, IntfName}, ModName}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assumes that the interface with name <fo:inline font-weight="bold">IntfName</fo:inline> is
          implemented by the module with name <fo:inline font-weight="bold">ModName</fo:inline> and
          will generate calls to the <fo:inline font-weight="bold">ModName</fo:inline> module in the
          server behavior.  Note that the <fo:inline font-weight="bold">IntfName</fo:inline> must be a
          fully scoped name as in <fo:inline font-family="monospace">"M1::I1"</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">this</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds the object reference as the first parameter to the
          object implementation functions. This makes the
          implementation aware of its own object reference. 
                    <fo:block/>
The option
          comes in three varieties: <fo:inline font-family="monospace">this</fo:inline> which activates the
          parameter for all interfaces in the source file, <fo:inline font-family="monospace">{this, IntfName}</fo:inline> which activates the parameter for a specified
          interface and <fo:inline font-family="monospace">{{this, IntfName}, false}</fo:inline> which
          deactivates the parameter for a specified
          interface.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">this)</fo:inline> activates the parameter for
          all interfaces.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">{this, "M1::I1"}</fo:inline> activates the
          parameter for all functions of <fo:inline font-family="monospace">M1::I1</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example options: <fo:inline font-family="monospace">[this, {{this, "M1::I2"}, false}]</fo:inline>
          activates the parameter for all interfaces except
          <fo:inline font-family="monospace">M1::I2</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">from</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds the invokers reference as the first parameter to the
          object implementation two-way functions. If both
          <fo:inline font-family="monospace">from</fo:inline> and <fo:inline font-family="monospace">this</fo:inline> options are used the invokers
          reference parameter will be passed as the second
          parameter. This makes it possible for the implementation to
          respond to a request and continue executing
          afterwards. Consult the <fo:inline font-family="monospace">gen_server</fo:inline> and <fo:inline font-family="monospace">Orber</fo:inline>
          documentation how this option may be used.            <fo:block/>
The option
          comes in three varieties: <fo:inline font-family="monospace">from</fo:inline> which activates the
          parameter for all interfaces in the source file, <fo:inline font-family="monospace">{from, IntfName}</fo:inline> which activates the parameter for a specified
          interface and <fo:inline font-family="monospace">{{from, IntfName}, false}</fo:inline> which
          deactivates the parameter for a specified interface.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">from)</fo:inline> activates the parameter for
          all interfaces.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example options: <fo:inline font-family="monospace">[{from, "M1::I1"}]</fo:inline> activates the
          parameter for all functions of <fo:inline font-family="monospace">M1::I1</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example options: <fo:inline font-family="monospace">[from, {{from, "M1::I2"}, false}]</fo:inline>
          activates the parameter for all interfaces except
          <fo:inline font-family="monospace">M1::I2</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">handle_info</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the object server call a function <fo:inline font-family="monospace">handle_info</fo:inline>
          in the object implementation module on all unexpected
          messages. Useful if the object implementation need to trap
          exits.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">handle_info</fo:inline> will activates module
          implementation <fo:inline font-family="monospace">handle_info</fo:inline> for all interfaces in the
          source file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">{{handle_info, "M1::I1"}, true}</fo:inline>
          will activates module implementation <fo:inline font-family="monospace">handle_info</fo:inline> for
          the specified interface.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example options: <fo:inline font-family="monospace">[handle_info, {{handle_info, "M1::I1"}, false}]</fo:inline> will generate the <fo:inline font-family="monospace">handle_info</fo:inline>
          call for all interfaces except <fo:inline font-family="monospace">M1::I1</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">timeout</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used to allow a server response time limit to be set by the user. 
          This should be a string that represents the scope for the interface 
          which should have an extra variable for wait time initialization.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">{timeout,"M::I"})</fo:inline> produces server
          stub which will has an extra timeout parameter in the initialization 
          function for that interface.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">timeout</fo:inline> produces server
          stub which will has an extra timeout parameter in the initialization 
          function for all interfaces in the source file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example options: <fo:inline font-family="monospace">[timeout, {{timeout,"M::I"}, false}]</fo:inline>
          produces server stub which will has an extra timeout
          parameter in the initialization function for all interfaces
          except <fo:inline font-family="monospace">M1::I1</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">scoped_op_calls</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used to produce more refined request calls to server. When
          this option is set to true, the operation name which was
          mentioned in the call is scoped. This is essential to avoid
          name clashes when communicating with c-servers. This option
          is available for the c-client, c-server and the Erlang
          gen_server back ends. <fo:inline font-family="monospace">All</fo:inline> of the parts generated by ic
          have to agree in the use of this option. Default is
          <fo:inline font-family="monospace">false</fo:inline>.  </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example options:
          <fo:inline font-family="monospace">[{be,c_genserv},{scoped_op_calls,true}])</fo:inline> produces
          client stubs which sends "scoped" requests to a gen_server
          or a c-server.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">user_protocol</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used to define a own protocol different from the default
          Erlang distribution + gen_server protocol. Currently only
          valid for C back-ends. For further details see <fo:inline font-style="italic">IC C protocol</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example options:
          <fo:inline font-family="monospace">[{be,c_client},{user_protocol, "my_special"}])</fo:inline> produces
          client stubs which use C protocol functions with the prefix 
          "my_special".</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">c_timeout</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes sends and receives to have timeouts (C back-ends only).  These
          timeouts are specified in milliseconds. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example options:
          <fo:inline font-family="monospace">[{be,c_client},{c_timeout, {10000, 20000}}])</fo:inline> produces
          client stubs which use a 10 seconds send timeout, and a
          20 seconds receive timeout.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">c_report</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generates code for writing encode/decode errors to <fo:inline font-family="monospace">stderr</fo:inline> (C back-ends only).
          timeouts are specified in milliseconds. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example options:
          <fo:inline font-family="monospace">[{be,c_client}, c_report])</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">scl</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used for compatibility with previous compiler versions up
          to <fo:inline font-family="monospace">3.3</fo:inline>.  Due to better semantic checks on enumerants,
          the compiler discovers name clashes between user defined
          types and enumerant values in the same name space. By
          enabling this option the compiler turns off the extended
          semantic check on enumerant values.  Default is
          <fo:inline font-family="monospace">false</fo:inline>.  </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">{scl,true}</fo:inline></fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">precond</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a precondition call before the call to the operation
          implementation on the server side.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option comes in three varieties: <fo:inline font-family="monospace">{precond, {M, F}}</fo:inline> which activates the call for operations in all
          interfaces in the source file, <fo:inline font-family="monospace">{{precond, IntfName}, {M, F}}</fo:inline> which activates the call for all operations in a
          specific interface and <fo:inline font-family="monospace">{{precond, OpName}, {M, F}}</fo:inline>
          which activates the call for a specific operation.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The precondition function has the following signature
          <fo:inline font-family="monospace">m:f(Module, Function, Args)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">{precond, {mod, fun}}</fo:inline> adds the call
          of m:f for all operations in the idl file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example options: <fo:inline font-family="monospace">[{{precond, "M1::I"}, {mod, fun}}]</fo:inline>
          adds the call of <fo:inline font-family="monospace">m:f</fo:inline> for all operations in the
          interface <fo:inline font-family="monospace">M1::I1</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example options: <fo:inline font-family="monospace">[{{precond, "M1::I::Op"}, {mod, fun}}]</fo:inline> adds the call of <fo:inline font-family="monospace">m:f</fo:inline> for the operation
          <fo:inline font-family="monospace">M1::I::Op</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">postcond</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a postcondition call after the call to the operation
          implementation on the server side. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option comes in three varieties: <fo:inline font-family="monospace">{postcond, {M, F}}</fo:inline> which activates the call for operations in all
          interfaces in the source file, <fo:inline font-family="monospace">{{postcond, IntfName}, {M, F}}</fo:inline> which activates the call for all operations in a
          specific interface and <fo:inline font-family="monospace">{{postcond, OpName}, {M, F}}</fo:inline>
          which activates the call for a specific operation.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The postcondition function has the following signature
          <fo:inline font-family="monospace">m:f(Module, Function, Args, Result)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example option: <fo:inline font-family="monospace">{postcond, {mod, fun}}</fo:inline> adds the call
          of m:f for all operations in the idl file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example options: <fo:inline font-family="monospace">[{{postcond, "M1::I"}, {mod, fun}}]</fo:inline>
          adds the call of <fo:inline font-family="monospace">m:f</fo:inline> for all operations in the
          interface <fo:inline font-family="monospace">M1::I1</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example options: <fo:inline font-family="monospace">[{{postcond, "M1::I::Op"}, {mod, fun}}]</fo:inline> adds the call of <fo:inline font-family="monospace">m:f</fo:inline> for the operation
          <fo:inline font-family="monospace">M1::I::Op</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp25184" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Warning options</fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">'Wall'</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option activates all reasonable warning messages  in
          analogy with the gcc -Wall option. Default value is true.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">maxerrs</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The maximum numbers of errors that can be detected before
          the compiler gives up. The option can either have an integer
          value or the atom <fo:inline font-family="monospace">infinity</fo:inline>. Default number is 10.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">maxwarns</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The maximum numbers of warnings that can be detected before
          the compiler gives up. The option can either have an integer
          value or the atom <fo:inline font-family="monospace">infinity</fo:inline>. Default value is
          infinity.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">nowarn</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Suppresses all warnings. Default value is false.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">warn_name_shadow</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Warning appears whenever names are shadowed due to
          inheritance; for example, if a type name is redefined from a
          base interface. Note that it is illegal to overload 
          operation and attribute names as this causes an error to be
          produced. Default value is true. </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">pedantic</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Activates all warning options. Default value is false.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">silent</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Suppresses compiler printed output. Default value is false.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp712192" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Back-End options</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Which back-end IC will generate code for is determined by the supplied
      <fo:inline font-family="monospace">{be,atom()}</fo:inline> option. If left out, <fo:inline font-family="monospace">erl_corba</fo:inline> is used.
      Currently, IC support the following back-ends:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">erl_corba</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option switches to the IDL generation for CORBA.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">erl_template</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generate CORBA call-back module templates for each interface in the target
          IDL file. Note, will overwrite existing files.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">erl_plain</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Will produce plain Erlang modules which contain functions that
          map to the corresponding interface functions on the input file.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">erl_genserv</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is an IDL to Erlang generic server generation option.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">c_client</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Will produce a C client to the generic Erlang server.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">c_server</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Will produce a C server switch with functionality of a
          generic Erlang server.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">java</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Will produce Java client stubs and server skeletons with
          functionality of a generic Erlang server.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">c_genserv</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deprecated. Use <fo:inline font-family="monospace">c_client</fo:inline> instead.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp626976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Preprocessor</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The IDL compiler allows several preprocessors to be used, the
      <fo:inline font-family="monospace">Erlang IDL preprocessor</fo:inline> or other standard <fo:inline font-family="monospace">C</fo:inline> preprocessors.
      Options can  be used to provide extra flags such as include
      directories to the preprocessor.  The build in the Erlang IDL
      preprocessor is used by default, but any standard  C preprocessor
      such as <fo:inline font-family="monospace">gcc</fo:inline> is adequate.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The preprocessor command is formed by appending the prepoc_cmd
      to the preproc_flags option and then appending the input IDL
      file name.</fo:block>
  

  <fo:block id="idp630512" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Configuration</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler can be configured in two ways:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configuration file</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Command line options</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration file is optional and overrides the compiler
      defaults and is in turn overridden by the command line options.
      The configuration file shall contain options in the form of
      Erlang terms. The configuration file is read using
      <fo:inline font-family="monospace">file:consult</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An example of a configuration file, note the "." after each
      line.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{outdir, gen_dir}.
{{impl, "M1::M2::object"}, "obj"}.
    </fo:block>
  

  <fo:block id="idp1083104" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Output files</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler will produce output in several files depending on
      scope declarations found in the IDL file. At most
      three file types will be generated for each scope (including the top scope), 
      depending on the compiler back-end and the compiled interface.
      Generally, the output per interface will be a header file (<fo:inline font-family="monospace">.hrl</fo:inline>/
      <fo:inline font-family="monospace">.h</fo:inline>) and one or more Erlang/C files (<fo:inline font-family="monospace">.erl</fo:inline>/<fo:inline font-family="monospace">.c</fo:inline>).
      Please look at the language mapping for each back-end for details.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There will be at least one set of files for an IDL file, for the
      file level scope. Modules and interfaces also have their own set
      of  generated files.</fo:block>
  
  
<fo:block page-break-before="always" id="idp1093136" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ic_clib</fo:marker>ic_clib</fo:block>C Library</fo:block>
  <fo:block/>
  ic_clib
  IC C Library Functions
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This manual page lists some of the functions in the IC C runtime
      library. </fo:block>
  

  <fo:block id="idp1095184" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Allocation and Deallocation Functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions are used for allocating and
      deallocating a <fo:inline font-weight="bold">CORBA_Environment</fo:inline> structure.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1097664">CORBA_Environment *CORBA_Environment_alloc(int inbufsz, int outbufsz)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to allocate and initiate the
          <fo:inline font-family="monospace">CORBA_Environment</fo:inline> structure. In particular, it is used
          to dynamically allocate a CORBA_Environment structure and set
          the default values for the structure's fields.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">inbufsize</fo:inline> is the initial size of the input
          buffer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">outbufsize</fo:inline> is the initial size of the output
          buffer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">CORBA_Environment</fo:inline> is the CORBA 2.0 state structure
          used by the generated stub.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function will set all needed default values and
          allocate buffers the lengths of which are equal to the
          values passed, but will not allocate space for the _to_pid
          and _from_pid fields.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To free the space allocated by CORBA_Environment_alloc() do
          as follows.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First call CORBA_free for the input and output buffers.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After freeing the buffer space, call CORBA_free for the
              CORBA_Environment space.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1590928">void CORBA_free(void *p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Frees allocated space pointed to by <fo:inline font-family="monospace">p</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1594064">CORBA_char *CORBA_string_alloc(CORBA_unsigned_long len)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allocates a (simple) CORBA character string of length <fo:inline font-family="monospace">len + 1</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1597232">CORBA_wchar *CORBA_wstring_alloc(CORBA_unsigned_long len)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allocates a CORBA wide string of length <fo:inline font-family="monospace">len + 1</fo:inline>.</fo:block>
      </fo:block>
  

  <fo:block id="idp1600144" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exception Functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Functions for retrieving exception ids and values, and for setting
      exceptions. </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1602160">CORBA_char *CORBA_exception_id(CORBA_Environment *env)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the exception identity if an exception is set, otherwise
          it returns <fo:inline font-family="monospace">NULL</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1605264">void *CORBA_exception_value(CORBA_Environment *env)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the exception value, if an exception is set, otherwise
          it returns <fo:inline font-family="monospace">NULL</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp338960">void CORBA_exc_set(CORBA_Environment *env, CORBA_exception_type Major, CORBA_char *Id, CORBA_char *Value)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the exception type, exception identity, and exception value
          in the environment pointed to by <fo:inline font-family="monospace">env</fo:inline>.</fo:block>
      </fo:block>
  

  <fo:block id="idp341984" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Server Reception</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following function is provided for convenience. </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp344064">int oe_server_receive(CORBA_Environment *env, oe_map_t *map)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp344976">int oe_server_receive_tmo(CORBA_Environment *env, oe_map_t *map,  unsigned int send_ms, unsigned int recv_ms)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides a loop that receives one message, executes the
          operation in question, and in case of a two-way operation
          sends a reply.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">send_ms</fo:inline> and <fo:inline font-family="monospace">recv_ms</fo:inline> specify timeout values
          in milliseconds for send and receive, respectively.</fo:block>
      </fo:block>
  

  <fo:block id="idp348720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Generic Execution Switch and Map Merging</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Function for searching for server operation function, and for
      calling it if found. Function for merging maps (see the include
      file <fo:inline font-family="monospace">ic.h</fo:inline> for definitions). </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp351376">int oe_exec_switch(CORBA_Object obj, CORBA_Environment *env, oe_map_t *map)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Search for server operation and execute it.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp354144">oe_map_t *oe_merge_maps(oe_map_t *maps, int size)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Merge an array of server maps to one single map.</fo:block>
      </fo:block>
  

  <fo:block id="idp356624" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">The CORBA_Environment structure</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here is the complete definition of the CORBA_Environment structure,
      defined in file <fo:inline font-weight="bold">ic.h</fo:inline>: </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      /* Environment definition */
      typedef struct {

      /*----- CORBA compatibility part ------------------------*/
      /* Exception tag, initially set to CORBA_NO_EXCEPTION ---*/
      CORBA_exception_type   _major;          

      /*----- External Implementation part - initiated by the user ---*/
      /* File descriptor                                              */
      int                    _fd;             
      /* Size of input buffer                                         */
      int                    _inbufsz;        
      /* Pointer to always dynamically allocated buffer for input     */
      char                  *_inbuf;         
      /* Size of output buffer                                        */
      int                    _outbufsz;       
      /* Pointer to always dynamically allocated buffer for output    */ 
      char                  *_outbuf;        
      /* Size of memory chunks in bytes, used for increasing the output
      buffer, set to &gt;= 32, should be around &gt;= 1024 for performance
      reasons                                                       */ 
      int                    _memchunk;       
      /* Pointer for registered name                                   */
      char                   _regname[256];   
      /* Process identity for caller                                   */
      erlang_pid            *_to_pid;         
      /* Process identity for callee                                  */ 
      erlang_pid            *_from_pid;      

      /*- Internal Implementation part - used by the server/client ---*/
      /* Index for input buffer                                       */
      int                    _iin;            
      /* Index for output buffer                                      */
      int                    _iout;          
      /* Pointer for operation name                                   */
      char                   _operation[256];
      /* Used to count parameters                                    */
      int                    _received;      
      /* Used to identify the caller                                  */
      erlang_pid             _caller;        
      /* Used to identify the call                                     */
      erlang_ref             _unique;         
      /* Exception id field                                           */
      CORBA_char            *_exc_id;        
      /* Exception value field                                        */
      void                  *_exc_value;           

      
      } CORBA_Environment; 
    </fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Always set the field values <fo:inline font-weight="bold">_fd</fo:inline>, <fo:inline font-weight="bold">_regname</fo:inline>,
        <fo:inline font-weight="bold">_to_pid</fo:inline> and/or <fo:inline font-weight="bold">*_from_pid</fo:inline> to appropriate
        application values. These are not automatically set by the
        stubs.</fo:block>
    </fo:block>
    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Never assign static buffers to the buffer pointers, and never
        set the <fo:inline font-weight="bold">_memchunk</fo:inline> field to a value less than
        <fo:inline font-weight="bold">32</fo:inline>.</fo:block>
    </fo:block>
  

  <fo:block id="idp366384" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SEE ALSO</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ic(3), ic_c_protocol(3)
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp373744" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ic_c_protocol</fo:marker>ic_c_protocol</fo:block>C Library</fo:block>
  <fo:block/>
  ic_c_protocol
  IC C Protocol Functions
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This manual page lists some of the functions of the IC C runtime
      library that are used internally for the IC protocol.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The listed functions are used internally by generated C client
      and server code. They are documented here for <fo:inline font-weight="bold">the advanced user</fo:inline> that want to replace the default protocol (Erlang
      distribution + gen_server) by his own protocol, For each set of
      client or sever functions below with prefix <fo:inline font-family="monospace">oe</fo:inline>, the user
      has to implement his own set of functions, the names of which
      are obtained by replacing the <fo:inline font-family="monospace">oe</fo:inline> prefix by <fo:inline font-family="monospace">Prefix</fo:inline>.
      The <fo:inline font-family="monospace">Prefix</fo:inline> has to be set with the option
      <fo:inline font-family="monospace">{user_protocol, Prefix}</fo:inline> at compile time.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following terminology is used (reflected in names of
      functions): a <fo:inline font-weight="bold">notification</fo:inline> is a message send from
      client to server, without any reply back (i.e.  a
      <fo:inline font-weight="bold">oneway</fo:inline> operation); a <fo:inline font-weight="bold">request</fo:inline> is a message sent
      from client to server, and where a <fo:inline font-weight="bold">reply</fo:inline> message is
      sent back from the server to the client.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order to understand how the functions work and what they do
      the user <fo:inline font-weight="bold">must</fo:inline> study their implementation in the IC C
      library (source file is <fo:inline font-family="monospace">ic.c</fo:inline>), and also consider how they
      are used in the C code of ordinary generated client stubs or
      server skeletons.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
  

  <fo:block id="idp383760" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Client Protocol Functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions are used internally by generated C
      client code.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp385888">int oe_prepare_notification_encoding(CORBA_Environment *env)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result of this function is the beginning of a binary of
          in external format of the tuple <fo:inline font-family="monospace">{'$gen_cast', X}</fo:inline> where
          <fo:inline font-family="monospace">X</fo:inline> is not yet filled in. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In generated client code this function is the first to be called
          in the encoding function for each oneway operation.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp390144">int oe_send_notification(CORBA_Environment *env)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp391040">int oe_send_notification_tmo(CORBA_Environment *env,  unsigned int send_ms)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a client notification to a server according to the
          Erlang distribution + gen_server protocol.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">send_ms</fo:inline> parameter specified a timeout in milliseconds.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp394784">int oe_prepare_request_encoding(CORBA_Environment *env)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result of this function is the beginning of a binary in
          the external format of the tuple <fo:inline font-family="monospace">{'$gen_call', {Pid, Ref}, X}</fo:inline> where <fo:inline font-family="monospace">X</fo:inline> is not yet filled in.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In generated client code this function is the first to be called
          in the encoding function for each twoway operation.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp399040">int oe_send_request_and_receive_reply(CORBA_Environment *env)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp399952">int oe_send_request_and_receive_reply_tmo(CORBA_Environment *env, unsigned int send_ms, unsigned int recv_ms)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a client request and receives the reply according to
          the Erlang distribution + gen_server protocol. This function
          calls the <fo:inline font-family="monospace">oe_prepare_reply_decoding</fo:inline> function in order
          to obtain the gen_server reply.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">send_ms</fo:inline> and <fo:inline font-family="monospace">recv_ms</fo:inline> specify timeouts for send
          and receive, respectively, in milliseconds.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp404608">int oe_prepare_reply_decoding(CORBA_Environment *env)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes the binary version of the tuple <fo:inline font-family="monospace">{Ref, X}</fo:inline>,
          where <fo:inline font-family="monospace">X</fo:inline> is to be decoded later by the specific client
          decoding function.</fo:block>
      </fo:block>
  

  <fo:block id="idp408048" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Server Protocol Functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions are used internally by generated C
      server code.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp410176">int oe_prepare_request_decoding(CORBA_Environment *env)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes the binary version of the tuple <fo:inline font-family="monospace">{'$gen_cast', Op}</fo:inline> (<fo:inline font-family="monospace">Op</fo:inline> an atom), or the tuple <fo:inline font-family="monospace">{'$gen_cast', {Op, X}}</fo:inline>, where <fo:inline font-family="monospace">Op</fo:inline> is the operation name, and
          where <fo:inline font-family="monospace">X</fo:inline> is to be decoded later by the specific
          operation decoding function; or</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">decodes the binary version of the tuple <fo:inline font-family="monospace">{'$gen_call', {Pid, Ref}, Op}</fo:inline> (<fo:inline font-family="monospace">Op</fo:inline> an atom), or the tuple
          <fo:inline font-family="monospace">{'$gen_call', {Pid, Ref}, {Op, X}}</fo:inline>, where <fo:inline font-family="monospace">Op&gt;</fo:inline>
          is the operation name, and <fo:inline font-family="monospace">X</fo:inline> is to be decode later by
          the specific operation decoding function.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1611680">int oe_prepare_reply_encoding(CORBA_Environment *env)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes the beginning of the binary version of the tuple
          <fo:inline font-family="monospace">{{Ref,X}</fo:inline>, where <fo:inline font-family="monospace">X</fo:inline> is to be filled in by the
          specific server encoding function.</fo:block>
      </fo:block>
  

  <fo:block id="idp1615040" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SEE ALSO</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ic(3), ic_clib(3), <fo:inline font-style="italic">IC Protocol</fo:inline></fo:block>
  
  
</fo:flow>
  </fo:page-sequence>
</fo:root>
