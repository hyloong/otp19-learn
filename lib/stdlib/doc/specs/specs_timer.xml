<module name="timer">
<type>
  <name>time</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-time">time()</marker> = integer() &gt;= 0</typehead></typedecl>
</type>
<type>
  <name>timers</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-timers">timers()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>tref</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-tref">tref()</marker></typehead></typedecl>
</type>
<spec>
  <name>apply_after</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>apply_after(Time, Module, Function, Arguments) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, TRef} | {error, Reason}</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seealso marker="#type-time">time()</seealso></string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Arguments</typename><string>Arguments = [term()]</string></subtype>
        <subtype><typename>TRef</typename><string>TRef = <seealso marker="#type-tref">tref()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Reason</anno>
  <anno>TRef</anno>
  <anno>Time</anno>
</spec>
<spec>
  <name>apply_interval</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>apply_interval(Time, Module, Function, Arguments) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, TRef} | {error, Reason}</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seealso marker="#type-time">time()</seealso></string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Arguments</typename><string>Arguments = [term()]</string></subtype>
        <subtype><typename>TRef</typename><string>TRef = <seealso marker="#type-tref">tref()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Reason</anno>
  <anno>TRef</anno>
  <anno>Time</anno>
</spec>
<spec>
  <name>cancel</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>cancel(TRef) -&gt; {ok, cancel} | {error, Reason}</head>
      <guard>
        <subtype><typename>TRef</typename><string>TRef = <seealso marker="#type-tref">tref()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
  <anno>TRef</anno>
</spec>
<spec>
  <name>code_change</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>code_change(OldVsn :: term(), State, Extra :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, State}</head></clause>
  </contract>
  <anno>Extra</anno>
  <anno>OldVsn</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>exit_after</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>exit_after(Time, Reason1) -&gt; {ok, TRef} | {error, Reason2}</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seealso marker="#type-time">time()</seealso></string></subtype>
        <subtype><typename>TRef</typename><string>TRef = <seealso marker="#type-tref">tref()</seealso></string></subtype>
        <subtype><typename>Reason1</typename><string>Reason1 = Reason2 = term()</string></subtype>
        <subtype><typename>Reason2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason1</anno>
  <anno>Reason2</anno>
  <anno>TRef</anno>
  <anno>Time</anno>
</spec>
<spec>
  <name>exit_after</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>exit_after(Time, Pid, Reason1) -&gt; {ok, TRef} | {error, Reason2}</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seealso marker="#type-time">time()</seealso></string></subtype>
        <subtype><typename>Pid</typename><string>Pid = pid() | (RegName :: atom())</string></subtype>
        <subtype><typename>TRef</typename><string>TRef = <seealso marker="#type-tref">tref()</seealso></string></subtype>
        <subtype><typename>Reason1</typename><string>Reason1 = Reason2 = term()</string></subtype>
        <subtype><typename>Reason2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
  <anno>Reason1</anno>
  <anno>Reason2</anno>
  <anno>RegName</anno>
  <anno>TRef</anno>
  <anno>Time</anno>
</spec>
<spec>
  <name>get_status</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_status() -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{{timer_tab, integer() &gt;= 0},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{timer_interval_tab, integer() &gt;= 0}}</head></clause>
  </contract>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>handle_call(Else :: term(), From :: term(), Ts :: <seealso marker="#type-timers">timers()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{reply, term(), <seealso marker="#type-timers">timers()</seealso>, timeout()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seealso marker="#type-timers">timers()</seealso>, timeout()}</head></clause>
  </contract>
  <anno>Else</anno>
  <anno>From</anno>
  <anno>Ts</anno>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_cast(Req :: term(), Ts :: <seealso marker="#type-timers">timers()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seealso marker="#type-timers">timers()</seealso>, timeout()}</head></clause>
  </contract>
  <anno>Req</anno>
  <anno>Ts</anno>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_info(OtherMsg :: term(), Ts :: <seealso marker="#type-timers">timers()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seealso marker="#type-timers">timers()</seealso>, timeout()}</head></clause>
  </contract>
  <anno>OtherMsg</anno>
  <anno>Ts</anno>
</spec>
<spec>
  <name>hms</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>hms(Hours, Minutes, Seconds) -&gt; MilliSeconds</head>
      <guard>
        <subtype><typename>Hours</typename><string>Hours = Minutes = Seconds = MilliSeconds = integer() &gt;= 0</string></subtype>
        <subtype><typename>Minutes</typename><string></string></subtype>
        <subtype><typename>Seconds</typename><string></string></subtype>
        <subtype><typename>MilliSeconds</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Hours</anno>
  <anno>MilliSeconds</anno>
  <anno>Minutes</anno>
  <anno>Seconds</anno>
</spec>
<spec>
  <name>hours</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>hours(Hours) -&gt; MilliSeconds</head>
      <guard>
        <subtype><typename>Hours</typename><string>Hours = MilliSeconds = integer() &gt;= 0</string></subtype>
        <subtype><typename>MilliSeconds</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Hours</anno>
  <anno>MilliSeconds</anno>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(X1 :: []) -&gt; {ok, [], infinity}</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>kill_after</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>kill_after(Time) -&gt; {ok, TRef} | {error, Reason2}</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seealso marker="#type-time">time()</seealso></string></subtype>
        <subtype><typename>TRef</typename><string>TRef = <seealso marker="#type-tref">tref()</seealso></string></subtype>
        <subtype><typename>Reason2</typename><string>Reason2 = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason2</anno>
  <anno>TRef</anno>
  <anno>Time</anno>
</spec>
<spec>
  <name>kill_after</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>kill_after(Time, Pid) -&gt; {ok, TRef} | {error, Reason2}</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seealso marker="#type-time">time()</seealso></string></subtype>
        <subtype><typename>Pid</typename><string>Pid = pid() | (RegName :: atom())</string></subtype>
        <subtype><typename>TRef</typename><string>TRef = <seealso marker="#type-tref">tref()</seealso></string></subtype>
        <subtype><typename>Reason2</typename><string>Reason2 = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
  <anno>Reason2</anno>
  <anno>RegName</anno>
  <anno>TRef</anno>
  <anno>Time</anno>
</spec>
<spec>
  <name>minutes</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>minutes(Minutes) -&gt; MilliSeconds</head>
      <guard>
        <subtype><typename>Minutes</typename><string>Minutes = MilliSeconds = integer() &gt;= 0</string></subtype>
        <subtype><typename>MilliSeconds</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>MilliSeconds</anno>
  <anno>Minutes</anno>
</spec>
<spec>
  <name>now_diff</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>now_diff(T2, T1) -&gt; Tdiff</head>
      <guard>
        <subtype><typename>T1</typename><string>T1 = T2 = <seealso marker="erlang#type-timestamp">erlang:timestamp()</seealso></string></subtype>
        <subtype><typename>T2</typename><string/></subtype>
        <subtype><typename>Tdiff</typename><string>Tdiff = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>T1</anno>
  <anno>T2</anno>
  <anno>Tdiff</anno>
</spec>
<spec>
  <name>seconds</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>seconds(Seconds) -&gt; MilliSeconds</head>
      <guard>
        <subtype><typename>Seconds</typename><string>Seconds = MilliSeconds = integer() &gt;= 0</string></subtype>
        <subtype><typename>MilliSeconds</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>MilliSeconds</anno>
  <anno>Seconds</anno>
</spec>
<spec>
  <name>send_after</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>send_after(Time, Message) -&gt; {ok, TRef} | {error, Reason}</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seealso marker="#type-time">time()</seealso></string></subtype>
        <subtype><typename>Message</typename><string>Message = term()</string></subtype>
        <subtype><typename>TRef</typename><string>TRef = <seealso marker="#type-tref">tref()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Message</anno>
  <anno>Reason</anno>
  <anno>TRef</anno>
  <anno>Time</anno>
</spec>
<spec>
  <name>send_after</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>send_after(Time, Pid, Message) -&gt; {ok, TRef} | {error, Reason}</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seealso marker="#type-time">time()</seealso></string></subtype>
        <subtype><typename>Pid</typename><string>Pid = pid() | (RegName :: atom())</string></subtype>
        <subtype><typename>Message</typename><string>Message = term()</string></subtype>
        <subtype><typename>TRef</typename><string>TRef = <seealso marker="#type-tref">tref()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Message</anno>
  <anno>Pid</anno>
  <anno>Reason</anno>
  <anno>RegName</anno>
  <anno>TRef</anno>
  <anno>Time</anno>
</spec>
<spec>
  <name>send_interval</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>send_interval(Time, Message) -&gt; {ok, TRef} | {error, Reason}</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seealso marker="#type-time">time()</seealso></string></subtype>
        <subtype><typename>Message</typename><string>Message = term()</string></subtype>
        <subtype><typename>TRef</typename><string>TRef = <seealso marker="#type-tref">tref()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Message</anno>
  <anno>Reason</anno>
  <anno>TRef</anno>
  <anno>Time</anno>
</spec>
<spec>
  <name>send_interval</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>send_interval(Time, Pid, Message) -&gt; {ok, TRef} | {error, Reason}</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seealso marker="#type-time">time()</seealso></string></subtype>
        <subtype><typename>Pid</typename><string>Pid = pid() | (RegName :: atom())</string></subtype>
        <subtype><typename>Message</typename><string>Message = term()</string></subtype>
        <subtype><typename>TRef</typename><string>TRef = <seealso marker="#type-tref">tref()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Message</anno>
  <anno>Pid</anno>
  <anno>Reason</anno>
  <anno>RegName</anno>
  <anno>TRef</anno>
  <anno>Time</anno>
</spec>
<spec>
  <name>sleep</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>sleep(Time) -&gt; ok</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = timeout()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Time</anno>
</spec>
<spec>
  <name>start</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>start() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>start_link</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>start_link() -&gt; {ok, pid()} | {error, term()}</head></clause>
  </contract>
</spec>
<spec>
  <name>tc</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tc(Fun) -&gt; {Time, Value}</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
        <subtype><typename>Time</typename><string>Time = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Time</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>tc</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>tc(Fun, Arguments) -&gt; {Time, Value}</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
        <subtype><typename>Arguments</typename><string>Arguments = [term()]</string></subtype>
        <subtype><typename>Time</typename><string>Time = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>Fun</anno>
  <anno>Time</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>tc</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>tc(Module, Function, Arguments) -&gt; {Time, Value}</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Arguments</typename><string>Arguments = [term()]</string></subtype>
        <subtype><typename>Time</typename><string>Time = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Time</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(Reason :: term(), _State) -&gt; ok</head></clause>
  </contract>
  <anno>Reason</anno>
  <anno>_State</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:28.</timestamp>
</module>