<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>edoc</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>edoc.xml</file></header>
<module>edoc</module>
<modulesummary>EDoc - the Erlang program documentation generator.</modulesummary>
<description>
<p>EDoc - the Erlang program documentation generator.</p>
 
  <p>This module provides the main user interface to EDoc.
  </p><list>
    <item><p><seealso marker="chapter">EDoc User Manual</seealso></p></item>
    <item><p><seealso marker="chapter#Running_EDoc">Running EDoc</seealso></p></item>
  </list></description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><marker id="type-comment"/>comment() = {Line, Column, Indentation, Text}</tag>
<item>
<list><item><p>Line = integer()</p></item><item><p>Column = integer()</p></item><item><p>Indentation = integer()</p></item><item><p>Text = [string()]</p></item></list> </item>
<tag><marker id="type-edoc_module"/>edoc_module()</tag>
<item><p/>
<p>The EDoc documentation data for a module,
  expressed as an XML document in <seealso marker="xmerl:index">XMerL</seealso> format. See
  the file <url href="../../priv/edoc.dtd">edoc.dtd</url> for details.
 </p>
</item>
<tag><marker id="type-filename"/>filename() = <seealso marker="kernel:file#type-filename">file:filename()</seealso></tag>
<item><p/> </item>
<tag><marker id="type-proplist"/>proplist() = [term()]</tag>
<item><p/> </item>
<tag><marker id="type-syntaxTree"/>syntaxTree() = <seealso marker="syntax_tools:erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso></tag>
<item><p/> </item>
</taglist></section>
<funcs>
<func>
<name>application(Application::atom()) -&gt; ok</name>
<fsummary>Equivalent to application(Application, []).
</fsummary>

<desc><marker id="application-1"/>
<p>Equivalent to <seealso marker="#application-2">application(Application, [])</seealso>.</p>
</desc></func>
<func>
<name>application(Application::atom(), Options::<seealso marker="#type-proplist">proplist()</seealso>) -&gt; ok</name>
<fsummary>Run EDoc on an application in its default app-directory.</fsummary>

<desc><marker id="application-2"/>

<p>Run EDoc on an application in its default app-directory. See
  <seealso marker="#application-3">application/3</seealso> for details.</p>
<p><em>See also:</em> <seealso marker="#application-1">application/1</seealso>.</p>
</desc></func>
<func>
<name>application(Application::atom(), Dir::<seealso marker="#type-filename">filename()</seealso>, Options::<seealso marker="#type-proplist">proplist()</seealso>) -&gt; ok</name>
<fsummary>Run EDoc on an application located in the specified directory.</fsummary>

<desc><marker id="application-3"/>

<p>Run EDoc on an application located in the specified directory.
  Tries to automatically set up good defaults. Unless the user
  specifies otherwise:
  </p><list>
    <item><p>The <c>doc</c> subdirectory will be used as the target directory, if
    it exists; otherwise the application directory is used.
    </p></item>
    <item><p>The source code is assumed to be located in the <c>src</c>
    subdirectory, if it exists, or otherwise in the application
    directory itself.
    </p></item>
    <item><p>The <seealso marker="#run-2">subpackages</seealso> option is turned on. All found
    source files will be processed.
    </p></item>
    <item><p>The <c>include</c> subdirectory is automatically added to the
    include path. (Only important if <seealso marker="#read_source-2">    preprocessing</seealso> is turned on.)
    </p></item>
  </list><p>
 
  See <seealso marker="#run-2">run/2</seealso> for details, including options.
 </p>
<p><em>See also:</em> <seealso marker="#application-2">application/2</seealso>.</p>
</desc></func>
<func>
<name>file(Name::<seealso marker="#type-filename">filename()</seealso>) -&gt; ok</name>
<fsummary>Equivalent to file(Name, []).
</fsummary>

<desc><marker id="file-1"/>
<p><em>This function is deprecated: </em>See <seealso marker="#file-2">file/2</seealso> for details.</p>
<p>Equivalent to <seealso marker="#file-2">file(Name, [])</seealso>.</p>
</desc></func>
<func>
<name>file(Name::<seealso marker="#type-filename">filename()</seealso>, Options::<seealso marker="#type-proplist">proplist()</seealso>) -&gt; ok</name>
<fsummary>Reads a source code file and outputs formatted documentation to  
a corresponding file.</fsummary>

<desc><marker id="file-2"/>
<p><em>This function is deprecated: </em>This is part of the old interface to EDoc and is mainly
  kept for backwards compatibility. The preferred way of generating
  documentation is through one of the functions <seealso marker="#application-2">application/2</seealso>
  and <seealso marker="#files-2">files/2</seealso>.
 </p>

<p>Reads a source code file and outputs formatted documentation to  
a corresponding file.</p>
 
  <p>Options:
  </p><taglist>
   <tag><c>{dir, filename()}</c>
   </tag>
   <item><p>Specifies the output directory for the created file. (By
       default, the output is written to the directory of the source
       file.)
   </p></item>
   <tag><c>{source_suffix, string()}</c>
   </tag>
   <item><p>Specifies the expected suffix of the input file. The default
       value is <c>".erl"</c>.
   </p></item>
   <tag><c>{file_suffix, string()}</c>
   </tag>
   <item><p>Specifies the suffix for the created file. The default value is
       <c>".html"</c>.
   </p></item>
  </taglist>
 
  <p>See <seealso marker="#get_doc-2">get_doc/2</seealso> and <seealso marker="#layout-2">layout/2</seealso> for further  
options.</p>
 
  <p>For running EDoc from a Makefile or similar, see
  <seealso marker="edoc_run#file-1">edoc_run:file/1</seealso>.
 </p>
<p><em>See also:</em> <seealso marker="#read-2">read/2</seealso>.</p>
</desc></func>
<func>
<name>files(Files::[<seealso marker="#type-filename">filename()</seealso>]) -&gt; ok</name>
<fsummary> </fsummary>

<desc><marker id="files-1"/>
 </desc></func>
<func>
<name>files(Files::[<seealso marker="#type-filename">filename()</seealso>], Options::<seealso marker="#type-proplist">proplist()</seealso>) -&gt; ok</name>
<fsummary>Runs EDoc on a given set of source files.</fsummary>

<desc><marker id="files-2"/>

<p>Runs EDoc on a given set of source files. See <seealso marker="#run-2">run/2</seealso> for
  details, including options.</p>
</desc></func>
<func>
<name>get_doc(File::<seealso marker="#type-filename">filename()</seealso>) -&gt; {ModuleName, <seealso marker="#type-edoc_module">edoc_module()</seealso>}</name>
<fsummary>Equivalent to get_doc(File, []).
</fsummary>

<desc><marker id="get_doc-1"/>
<p>Equivalent to <seealso marker="#get_doc-2">get_doc(File, [])</seealso>.</p>
</desc></func>
<func>
<name>get_doc(File::<seealso marker="#type-filename">filename()</seealso>, Options::<seealso marker="#type-proplist">proplist()</seealso>) -&gt; {ModuleName, <seealso marker="#type-edoc_module">edoc_module()</seealso>}</name>
<fsummary>Reads a source code file and extracts EDoc documentation data.</fsummary>
<type>
<v>ModuleName = atom()</v></type>
<desc><marker id="get_doc-2"/>

<p>Reads a source code file and extracts EDoc documentation data.
  Note that without an environment parameter (see <seealso marker="#get_doc-3">get_doc/3</seealso>),  
hypertext links may not be correct.</p>
 
  <p>Options:
  </p><taglist>
   <tag><c>{def, Macros}</c>
   </tag>
   <item><list>
        <item><p><c>Macros</c> = <c>Macro | [Macro]</c></p></item>
        <item><p><c>Macro</c> = <c>{Name::atom(), Text::string()}</c></p></item>
       </list><p>
     Specifies a set of EDoc macro definitions. See
     <seealso marker="chapter#Macro_expansion">Inline macro expansion</seealso>
     for details.
   </p></item>
   <tag><c>{hidden, boolean()}</c>
   </tag>
   <item><p>If the value is <c>true</c>, documentation of hidden functions will
       also be included. The default value is <c>false</c>.
   </p></item>
   <tag><c>{private, boolean()}</c>
   </tag>
   <item><p>If the value is <c>true</c>, documentation of private functions will
       also be included. The default value is <c>false</c>.
   </p></item>
   <tag><c>{todo, boolean()}</c>
   </tag>
   <item><p>If the value is <c>true</c>, To-Do notes written using <c>@todo</c> or
   <c>@TODO</c> tags will be included in the documentation. The default
   value is <c>false</c>.
   </p></item>
  </taglist>
 
  <p>See <seealso marker="#read_source-2">read_source/2</seealso>, <seealso marker="#read_comments-2">read_comments/2</seealso> and <seealso marker="edoc_lib#get_doc_env-3">edoc_lib:get_doc_env/3</seealso> for further options.
 </p>
<p><em>See also:</em> <seealso marker="#get_doc-3">get_doc/3</seealso>, <seealso marker="#layout-2">layout/2</seealso>, <seealso marker="#read-2">read/2</seealso>, <seealso marker="#run-2">run/2</seealso>, <seealso marker="edoc_extract#source-5">edoc_extract:source/5</seealso>.</p>
</desc></func>
<func>
<name>get_doc(File::<seealso marker="#type-filename">filename()</seealso>, Env::<seealso marker="edoc_lib#type-edoc_env">edoc_lib:edoc_env()</seealso>, Options::<seealso marker="#type-proplist">proplist()</seealso>) -&gt; {ModuleName, <seealso marker="#type-edoc_module">edoc_module()</seealso>}</name>
<fsummary>Like get_doc/2, but for a given environment
  parameter.</fsummary>
<type>
<v>ModuleName = atom()</v></type>
<desc><marker id="get_doc-3"/>

<p>Like <seealso marker="#get_doc-2">get_doc/2</seealso>, but for a given environment
  parameter. <c>Env</c> is an environment created by <seealso marker="edoc_lib#get_doc_env-3">edoc_lib:get_doc_env/3</seealso>.</p>
</desc></func>
<func>
<name>layout(Doc::<seealso marker="#type-edoc_module">edoc_module()</seealso>) -&gt; string()</name>
<fsummary>Equivalent to layout(Doc, []).
</fsummary>

<desc><marker id="layout-1"/>
<p>Equivalent to <seealso marker="#layout-2">layout(Doc, [])</seealso>.</p>
</desc></func>
<func>
<name>layout(Doc::<seealso marker="#type-edoc_module">edoc_module()</seealso>, Options::<seealso marker="#type-proplist">proplist()</seealso>) -&gt; string()</name>
<fsummary>Transforms EDoc module documentation data to text.</fsummary>

<desc><marker id="layout-2"/>

<p>Transforms EDoc module documentation data to text. The default  
layout creates an HTML document.</p>
 
  <p>Options:
  </p><taglist>
   <tag><c>{layout, Module::atom()}</c>
   </tag>
   <item><p>Specifies a callback module to be used for formatting. The
       module must export a function <c>module(Doc, Options)</c>. The
       default callback module is <seealso marker="edoc_layout">edoc_layout</seealso>; see <seealso marker="edoc_layout#module-2">edoc_layout:module/2</seealso> for layout-specific options.
   </p></item>
  </taglist><p>
 </p>
<p><em>See also:</em> <seealso marker="#file-2">file/2</seealso>, <seealso marker="#layout-1">layout/1</seealso>, <seealso marker="#read-2">read/2</seealso>, <seealso marker="#run-2">run/2</seealso>.</p>
</desc></func>
<func>
<name>read(File::<seealso marker="#type-filename">filename()</seealso>) -&gt; string()</name>
<fsummary>Equivalent to read(File, []).
</fsummary>

<desc><marker id="read-1"/>
<p>Equivalent to <seealso marker="#read-2">read(File, [])</seealso>.</p>
</desc></func>
<func>
<name>read(File::<seealso marker="#type-filename">filename()</seealso>, Options::<seealso marker="#type-proplist">proplist()</seealso>) -&gt; string()</name>
<fsummary>Reads and processes a source file and returns the resulting
  EDoc-text as a string.</fsummary>

<desc><marker id="read-2"/>

<p>Reads and processes a source file and returns the resulting
  EDoc-text as a string. See <seealso marker="#get_doc-2">get_doc/2</seealso> and <seealso marker="#layout-2">layout/2</seealso> for
  options.
 </p>
<p><em>See also:</em> <seealso marker="#file-2">file/2</seealso>.</p>
</desc></func>
<func>
<name>read_comments(File) -&gt; [<seealso marker="#type-comment">comment()</seealso>]</name>
<fsummary>Equivalent to read_comments(File, []).
</fsummary>

<desc><marker id="read_comments-1"/>
<p>Equivalent to <seealso marker="#read_comments-2">read_comments(File, [])</seealso>.</p>
</desc></func>
<func>
<name>read_comments(File::<seealso marker="#type-filename">filename()</seealso>, Options::<seealso marker="#type-proplist">proplist()</seealso>) -&gt; [<seealso marker="#type-comment">comment()</seealso>]</name>
<fsummary>Extracts comments from an Erlang source code file.</fsummary>

<desc><marker id="read_comments-2"/>

<p>Extracts comments from an Erlang source code file. See the
  module <seealso marker="syntax_tools:erl_comment_scan">erl_comment_scan(3)</seealso> for details on the
  representation of comments. Currently, no options are avaliable.</p>
</desc></func>
<func>
<name>read_source(Name::File) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</name>
<fsummary>Equivalent to read_source(File, []).
</fsummary>

<desc><marker id="read_source-1"/>
<p>Equivalent to <seealso marker="#read_source-2">read_source(File, [])</seealso>.</p>
</desc></func>
<func>
<name>read_source(File::<seealso marker="#type-filename">filename()</seealso>, Options::<seealso marker="#type-proplist">proplist()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</name>
<fsummary>Reads an Erlang source file and returns the list of "source code  
form" syntax trees.</fsummary>

<desc><marker id="read_source-2"/>

<p>Reads an Erlang source file and returns the list of "source code  
form" syntax trees.</p>
 
  <p>Options:
  </p><taglist>
   <tag><c>{preprocess, boolean()}</c>
   </tag>
   <item><p>If the value is <c>true</c>, the source file will be read via the
       Erlang preprocessor (<c>epp</c>). The default value is <c>false</c>.
       <c>no_preprocess</c> is an alias for <c>{preprocess, false}</c>.</p>
 
       <p>Normally, preprocessing is not necessary for EDoc to work, but
       if a file contains too exotic definitions or uses of macros, it
       will not be possible to read it without preprocessing. <em>Note:
       comments in included files will not be available to EDoc, even
       with this option enabled.</em>
   </p></item>
   <tag><c>{includes, Path::[string()]}</c>
   </tag>
   <item><p>Specifies a list of directory names to be searched for include
       files, if the <c>preprocess</c> option is turned on. Also used with
       the <c>@headerfile</c> tag. The default value is the empty list. The
       directory of the source file is always automatically appended to
       the search path.
   </p></item>
   <tag><c>{macros, [{atom(), term()}]}</c>
   </tag>
   <item><p>Specifies a list of pre-defined Erlang preprocessor (<c>epp</c>)
       macro definitions, used if the <c>preprocess</c> option is turned on.
       The default value is the empty list.</p></item>
   <tag><c>{report_missing_types, boolean()}</c>
   </tag>
   <item><p>If the value is <c>true</c>, warnings are issued for missing types.
       The default value is <c>false</c>.
       <c>no_report_missing_types</c> is an alias for
       <c>{report_missing_types, false}</c>.
   </p></item>
  </taglist><p>
 </p>
<p><em>See also:</em> <seealso marker="syntax_tools:erl_syntax">erl_syntax(3)</seealso>, <seealso marker="#get_doc-2">get_doc/2</seealso>.</p>
</desc></func>
<func>
<name>run(Files::[<seealso marker="#type-filename">filename()</seealso>], Options::<seealso marker="#type-proplist">proplist()</seealso>) -&gt; ok</name>
<fsummary>Runs EDoc on a given set of source files.</fsummary>

<desc><marker id="run-2"/>

<p>Runs EDoc on a given set of source files. Note
  that the doclet plugin module has its own particular options; see the
  <c>doclet</c> option below.</p>
 
  <p>Also see <seealso marker="#layout-2">layout/2</seealso> for layout-related options, and
  <seealso marker="#get_doc-2">get_doc/2</seealso> for options related to reading source  
files.</p>
 
  <p>Options:
  </p><taglist>
   <tag><c>{app_default, string()}</c>
   </tag>
   <item><p>Specifies the default base URI for unknown applications.
   </p></item>
   <tag><c>{application, App::atom()}</c>
   </tag>
   <item><p>Specifies that the generated documentation describes the
       application <c>App</c>. This mainly affects generated references.
   </p></item>
   <tag><c>{dir, filename()}</c>
   </tag>
   <item><p>Specifies the target directory for the generated documentation.
   </p></item>
   <tag><c>{doc_path, [string()]}</c>
   </tag>
   <item><p>Specifies a list of URI:s pointing to directories that contain
       EDoc-generated documentation. URI without a <c>scheme://</c> part are
       taken as relative to <c>file://</c>. (Note that such paths must use
       <c>/</c> as separator, regardless of the host operating system.)
   </p></item>
   <tag><c>{doclet, Module::atom()}</c>
   </tag>
   <item><p>Specifies a callback module to be used for creating the
       documentation. The module must export a function <c>run(Cmd, Ctxt)</c>.
       The default doclet module is <seealso marker="edoc_doclet">edoc_doclet</seealso>; see <seealso marker="edoc_doclet#run-2">edoc_doclet:run/2</seealso> for doclet-specific options.
   </p></item>
   <tag><c>{file_suffix, string()}</c>
   </tag>
   <item><p>Specifies the suffix used for output files. The default value is
       <c>".html"</c>. Note that this also affects generated references.
   </p></item>
   <tag><c>{new, boolean()}</c>
   </tag>
   <item><p>If the value is <c>true</c>, any existing <c>edoc-info</c> file in the
       target directory will be ignored and overwritten. The default
       value is <c>false</c>.
   </p></item>
   <tag><c>{source_path, [filename()]}</c>
   </tag>
   <item><p>Specifies a list of file system paths used to locate the source
       code for packages.
   </p></item>
   <tag><c>{source_suffix, string()}</c>
   </tag>
   <item><p>Specifies the expected suffix of input files. The default
       value is <c>".erl"</c>.
   </p></item>
   <tag><c>{subpackages, boolean()}</c>
   </tag>
   <item><p>If the value is <c>true</c>, all subpackages of specified packages
       will also be included in the documentation. The default value is
       <c>false</c>. <c>no_subpackages</c> is an alias for <c>{subpackages,
       false}</c>.</p>
 
       <p>Subpackage source files are found by recursively searching
       for source code files in subdirectories of the known source code
       root directories. (Also see the <c>source_path</c> option.) Directory
       names must begin with a lowercase letter and contain only
       alphanumeric characters and underscore, or they will be ignored.
       (For example, a subdirectory named <c>test-files</c> will not be
       searched.)
   </p></item>
  </taglist><p>
 </p>
<p><em>See also:</em> <seealso marker="#application-2">application/2</seealso>, <seealso marker="#files-2">files/2</seealso>.</p>
</desc></func></funcs>

<authors>

<aname>Richard Carlsson</aname>
<email>carlsson.richard@gmail.com</email></authors></erlref>