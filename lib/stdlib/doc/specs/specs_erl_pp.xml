<module name="erl_pp">
<type>
  <name>hook_function</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-hook_function">hook_function()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>none |<br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Expr :: <seealso marker="erl_parse#type-abstract_expr">erl_parse:abstract_expr()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CurrentIndentation :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CurrentPrecedence :: integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Options :: <seealso marker="#type-options">options()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="io_lib#type-chars">io_lib:chars()</seealso>)</typehead></typedecl>
  <anno>CurrentIndentation</anno>
  <anno>CurrentPrecedence</anno>
  <anno>Expr</anno>
  <anno>Options</anno>
</type>
<type>
  <name>option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-option">option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{hook, <seealso marker="#type-hook_function">hook_function()</seealso>} | {encoding, latin1 | unicode | utf8}</typehead></typedecl>
</type>
<type>
  <name>options</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-options">options()</marker> = <seealso marker="#type-hook_function">hook_function()</seealso> | [<seealso marker="#type-option">option()</seealso>]</typehead></typedecl>
</type>
<spec>
  <name>attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>attribute(Attribute) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Attribute</typename><string>Attribute = <seealso marker="erl_parse#type-abstract_form">erl_parse:abstract_form()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Attribute</anno>
</spec>
<spec>
  <name>attribute</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>attribute(Attribute, Options) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Attribute</typename><string>Attribute = <seealso marker="erl_parse#type-abstract_form">erl_parse:abstract_form()</seealso></string></subtype>
        <subtype><typename>Options</typename><string>Options = <seealso marker="#type-options">options()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Attribute</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>expr</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>expr(Expression) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Expression</typename><string>Expression = <seealso marker="erl_parse#type-abstract_expr">erl_parse:abstract_expr()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Expression</anno>
</spec>
<spec>
  <name>expr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>expr(Expression, Options) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Expression</typename><string>Expression = <seealso marker="erl_parse#type-abstract_expr">erl_parse:abstract_expr()</seealso></string></subtype>
        <subtype><typename>Options</typename><string>Options = <seealso marker="#type-options">options()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Expression</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>expr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>expr(Expression, Indent, Options) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Expression</typename><string>Expression = <seealso marker="erl_parse#type-abstract_expr">erl_parse:abstract_expr()</seealso></string></subtype>
        <subtype><typename>Indent</typename><string>Indent = integer()</string></subtype>
        <subtype><typename>Options</typename><string>Options = <seealso marker="#type-options">options()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Expression</anno>
  <anno>Indent</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>expr</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>expr(Expression, Indent, Precedence, Options) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Expression</typename><string>Expression = <seealso marker="erl_parse#type-abstract_expr">erl_parse:abstract_expr()</seealso></string></subtype>
        <subtype><typename>Indent</typename><string>Indent = integer()</string></subtype>
        <subtype><typename>Precedence</typename><string>Precedence = integer() &gt;= 0</string></subtype>
        <subtype><typename>Options</typename><string>Options = <seealso marker="#type-options">options()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Expression</anno>
  <anno>Indent</anno>
  <anno>Options</anno>
  <anno>Precedence</anno>
</spec>
<spec>
  <name>exprs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>exprs(Expressions) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Expressions</typename><string>Expressions = [<seealso marker="erl_parse#type-abstract_expr">erl_parse:abstract_expr()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Expressions</anno>
</spec>
<spec>
  <name>exprs</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>exprs(Expressions, Options) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Expressions</typename><string>Expressions = [<seealso marker="erl_parse#type-abstract_expr">erl_parse:abstract_expr()</seealso>]</string></subtype>
        <subtype><typename>Options</typename><string>Options = <seealso marker="#type-options">options()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Expressions</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>exprs</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>exprs(Expressions, Indent, Options) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Expressions</typename><string>Expressions = [<seealso marker="erl_parse#type-abstract_expr">erl_parse:abstract_expr()</seealso>]</string></subtype>
        <subtype><typename>Indent</typename><string>Indent = integer()</string></subtype>
        <subtype><typename>Options</typename><string>Options = <seealso marker="#type-options">options()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Expressions</anno>
  <anno>Indent</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>form</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>form(Form) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Form</typename><string>Form = <seealso marker="erl_parse#type-abstract_form">erl_parse:abstract_form()</seealso> | <seealso marker="erl_parse#type-form_info">erl_parse:form_info()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Form</anno>
</spec>
<spec>
  <name>form</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>form(Form, Options) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Form</typename><string>Form = <seealso marker="erl_parse#type-abstract_form">erl_parse:abstract_form()</seealso> | <seealso marker="erl_parse#type-form_info">erl_parse:form_info()</seealso></string></subtype>
        <subtype><typename>Options</typename><string>Options = <seealso marker="#type-options">options()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Form</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>function</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>function(Function) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <seealso marker="erl_parse#type-abstract_form">erl_parse:abstract_form()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Function</anno>
</spec>
<spec>
  <name>function</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>function(Function, Options) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <seealso marker="erl_parse#type-abstract_form">erl_parse:abstract_form()</seealso></string></subtype>
        <subtype><typename>Options</typename><string>Options = <seealso marker="#type-options">options()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Function</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>guard</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>guard(Guard) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Guard</typename><string>Guard = [<seealso marker="erl_parse#type-abstract_expr">erl_parse:abstract_expr()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Guard</anno>
</spec>
<spec>
  <name>guard</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>guard(Guard, Options) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Guard</typename><string>Guard = [<seealso marker="erl_parse#type-abstract_expr">erl_parse:abstract_expr()</seealso>]</string></subtype>
        <subtype><typename>Options</typename><string>Options = <seealso marker="#type-options">options()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Guard</anno>
  <anno>Options</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:16.</timestamp>
</module>