<module name="gen_statem">
<type>
  <name>action</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-action">action()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>postpone |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{postpone, Postpone :: <seealso marker="#type-postpone">postpone()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{next_event,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>EventType :: <seealso marker="#type-event_type">event_type()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>EventContent :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-enter_action">enter_action()</seealso></typehead></typedecl>
  <anno>EventContent</anno>
  <anno>EventType</anno>
  <anno>Postpone</anno>
</type>
<type>
  <name>callback_mode</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-callback_mode">callback_mode()</marker> = state_functions | handle_event_function</typehead></typedecl>
</type>
<type>
  <name>callback_mode_result</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-callback_mode_result">callback_mode_result()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-callback_mode">callback_mode()</seealso> | [<seealso marker="#type-callback_mode">callback_mode()</seealso> | <seealso marker="#type-state_enter">state_enter()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>data</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-data">data()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>debug_opt</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-debug_opt">debug_opt()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{debug,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Dbgs ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[trace | log | statistics | debug | {logfile, string()}]}</typehead></typedecl>
  <anno>Dbgs</anno>
</type>
<type>
  <name>enter_action</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-enter_action">enter_action()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>hibernate |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{hibernate, Hibernate :: <seealso marker="#type-hibernate">hibernate()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(Timeout :: <seealso marker="#type-event_timeout">event_timeout()</seealso>) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{timeout, Time :: <seealso marker="#type-event_timeout">event_timeout()</seealso>, EventContent :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{timeout,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Time :: <seealso marker="#type-event_timeout">event_timeout()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>EventContent :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Options :: <seealso marker="#type-timeout_option">timeout_option()</seealso> | [<seealso marker="#type-timeout_option">timeout_option()</seealso>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{{timeout, Name :: term()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Time :: <seealso marker="#type-generic_timeout">generic_timeout()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>EventContent :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{{timeout, Name :: term()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Time :: <seealso marker="#type-generic_timeout">generic_timeout()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>EventContent :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Options :: <seealso marker="#type-timeout_option">timeout_option()</seealso> | [<seealso marker="#type-timeout_option">timeout_option()</seealso>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{state_timeout,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Time :: <seealso marker="#type-state_timeout">state_timeout()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>EventContent :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{state_timeout,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Time :: <seealso marker="#type-state_timeout">state_timeout()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>EventContent :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Options :: <seealso marker="#type-timeout_option">timeout_option()</seealso> | [<seealso marker="#type-timeout_option">timeout_option()</seealso>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-reply_action">reply_action()</seealso></typehead></typedecl>
  <anno>EventContent</anno>
  <anno>Hibernate</anno>
  <anno>Name</anno>
  <anno>Options</anno>
  <anno>Time</anno>
  <anno>Timeout</anno>
</type>
<type>
  <name>event_handler_result</name>
  <n_vars>1</n_vars>
  <typedecl>
      <typehead><marker id="type-event_handler_result">event_handler_result(StateType)</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{next_state, NextState :: StateType, NewData :: <seealso marker="#type-data">data()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{next_state,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NextState :: StateType,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NewData :: <seealso marker="#type-data">data()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Actions :: [<seealso marker="#type-action">action()</seealso>] | <seealso marker="#type-action">action()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-state_callback_result">state_callback_result</seealso>(<seealso marker="#type-action">action()</seealso>)</typehead></typedecl>
  <anno>Actions</anno>
  <anno>NewData</anno>
  <anno>NextState</anno>
  <anno>StateType</anno>
</type>
<type>
  <name>event_timeout</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-event_timeout">event_timeout()</marker> = timeout() | integer()</typehead></typedecl>
</type>
<type>
  <name>event_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-event_type">event_type()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{call, From :: <seealso marker="#type-from">from()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>cast |<br/><nbsp/><nbsp/><nbsp/><nbsp/>info |<br/><nbsp/><nbsp/><nbsp/><nbsp/>timeout |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{timeout, Name :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>state_timeout |<br/><nbsp/><nbsp/><nbsp/><nbsp/>internal</typehead></typedecl>
  <anno>From</anno>
  <anno>Name</anno>
</type>
<type>
  <name>from</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-from">from()</marker> = {To :: pid(), Tag :: term()}</typehead></typedecl>
  <anno>Tag</anno>
  <anno>To</anno>
</type>
<type>
  <name>generic_timeout</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-generic_timeout">generic_timeout()</marker> = timeout() | integer()</typehead></typedecl>
</type>
<type>
  <name>handle_event_result</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-handle_event_result">handle_event_result()</marker> = <seealso marker="#type-event_handler_result">event_handler_result</seealso>(<seealso marker="#type-state">state()</seealso>)</typehead></typedecl>
</type>
<type>
  <name>hibernate</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-hibernate">hibernate()</marker> = boolean()</typehead></typedecl>
</type>
<type>
  <name>hibernate_after_opt</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-hibernate_after_opt">hibernate_after_opt()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{hibernate_after, HibernateAfterTimeout :: timeout()}</typehead></typedecl>
  <anno>HibernateAfterTimeout</anno>
</type>
<type>
  <name>init_result</name>
  <n_vars>1</n_vars>
  <typedecl>
      <typehead><marker id="type-init_result">init_result(StateType)</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, State :: StateType, Data :: <seealso marker="#type-data">data()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State :: StateType,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Data :: <seealso marker="#type-data">data()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Actions :: [<seealso marker="#type-action">action()</seealso>] | <seealso marker="#type-action">action()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>ignore |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{stop, Reason :: term()}</typehead></typedecl>
  <anno>Actions</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>State</anno>
  <anno>StateType</anno>
</type>
<type>
  <name>postpone</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-postpone">postpone()</marker> = boolean()</typehead></typedecl>
</type>
<type>
  <name>reply_action</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-reply_action">reply_action()</marker> = {reply, From :: <seealso marker="#type-from">from()</seealso>, Reply :: term()}</typehead></typedecl>
  <anno>From</anno>
  <anno>Reply</anno>
</type>
<type>
  <name>server_name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-server_name">server_name()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{global, GlobalName :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{via, RegMod :: module(), Name :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{local, atom()}</typehead></typedecl>
  <anno>GlobalName</anno>
  <anno>Name</anno>
  <anno>RegMod</anno>
</type>
<type>
  <name>server_ref</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-server_ref">server_ref()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>pid() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(LocalName :: atom()) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Name :: atom(), Node :: atom()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{global, GlobalName :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{via, RegMod :: module(), ViaName :: term()}</typehead></typedecl>
  <anno>GlobalName</anno>
  <anno>LocalName</anno>
  <anno>Name</anno>
  <anno>Node</anno>
  <anno>RegMod</anno>
  <anno>ViaName</anno>
</type>
<type>
  <name>start_opt</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-start_opt">start_opt()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-debug_opt">debug_opt()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{timeout, Time :: timeout()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-hibernate_after_opt">hibernate_after_opt()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{spawn_opt, [<seealso marker="proc_lib#type-spawn_option">proc_lib:spawn_option()</seealso>]}</typehead></typedecl>
  <anno>Time</anno>
</type>
<type>
  <name>start_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-start_ret">start_ret()</marker> = {ok, pid()} | ignore | {error, term()}</typehead></typedecl>
</type>
<type>
  <name>state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state">state()</marker> = <seealso marker="#type-state_name">state_name()</seealso> | term()</typehead></typedecl>
</type>
<type>
  <name>state_callback_result</name>
  <n_vars>1</n_vars>
  <typedecl>
      <typehead><marker id="type-state_callback_result">state_callback_result(ActionType)</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{keep_state, NewData :: <seealso marker="#type-data">data()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{keep_state,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NewData :: <seealso marker="#type-data">data()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Actions :: [ActionType] | ActionType} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>keep_state_and_data |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{keep_state_and_data, Actions :: [ActionType] | ActionType} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{repeat_state, NewData :: <seealso marker="#type-data">data()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{repeat_state,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NewData :: <seealso marker="#type-data">data()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Actions :: [ActionType] | ActionType} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>repeat_state_and_data |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{repeat_state_and_data, Actions :: [ActionType] | ActionType} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>stop |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{stop, Reason :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{stop, Reason :: term(), NewData :: <seealso marker="#type-data">data()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{stop_and_reply,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Reason :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Replies :: [<seealso marker="#type-reply_action">reply_action()</seealso>] | <seealso marker="#type-reply_action">reply_action()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{stop_and_reply,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Reason :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Replies :: [<seealso marker="#type-reply_action">reply_action()</seealso>] | <seealso marker="#type-reply_action">reply_action()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NewData :: <seealso marker="#type-data">data()</seealso>}</typehead></typedecl>
  <anno>ActionType</anno>
  <anno>Actions</anno>
  <anno>NewData</anno>
  <anno>Reason</anno>
  <anno>Replies</anno>
</type>
<type>
  <name>state_enter</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state_enter">state_enter()</marker> = state_enter</typehead></typedecl>
</type>
<type>
  <name>state_enter_result</name>
  <n_vars>1</n_vars>
  <typedecl>
      <typehead><marker id="type-state_enter_result">state_enter_result(State)</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{next_state, State, NewData :: <seealso marker="#type-data">data()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{next_state,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NewData :: <seealso marker="#type-data">data()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Actions :: [<seealso marker="#type-enter_action">enter_action()</seealso>] | <seealso marker="#type-enter_action">enter_action()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-state_callback_result">state_callback_result</seealso>(<seealso marker="#type-enter_action">enter_action()</seealso>)</typehead></typedecl>
  <anno>Actions</anno>
  <anno>NewData</anno>
  <anno>State</anno>
</type>
<type>
  <name>state_function_result</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state_function_result">state_function_result()</marker> = <seealso marker="#type-event_handler_result">event_handler_result</seealso>(<seealso marker="#type-state_name">state_name()</seealso>)</typehead></typedecl>
</type>
<type>
  <name>state_name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state_name">state_name()</marker> = atom()</typehead></typedecl>
</type>
<type>
  <name>state_timeout</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state_timeout">state_timeout()</marker> = timeout() | integer()</typehead></typedecl>
</type>
<type>
  <name>timeout_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-timeout_option">timeout_option()</marker> = {abs, Abs :: boolean()}</typehead></typedecl>
  <anno>Abs</anno>
</type>
<type>
  <name>transition_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-transition_option">transition_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-postpone">postpone()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-hibernate">hibernate()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-event_timeout">event_timeout()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-generic_timeout">generic_timeout()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-state_timeout">state_timeout()</seealso></typehead></typedecl>
</type>
<spec>
  <name>call</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>call(ServerRef :: <seealso marker="#type-server_ref">server_ref()</seealso>, Request :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Reply :: term()</head></clause>
  </contract>
  <anno>Reply</anno>
  <anno>Request</anno>
  <anno>ServerRef</anno>
</spec>
<spec>
  <name>call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>call(ServerRef :: <seealso marker="#type-server_ref">server_ref()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Request :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>timeout() |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{clean_timeout, T :: timeout()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{dirty_timeout, T :: timeout()}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Reply :: term()</head></clause>
  </contract>
  <anno>Reply</anno>
  <anno>Request</anno>
  <anno>ServerRef</anno>
  <anno>T</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>cast(ServerRef :: <seealso marker="#type-server_ref">server_ref()</seealso>, Msg :: term()) -&gt; ok</head></clause>
  </contract>
  <anno>Msg</anno>
  <anno>ServerRef</anno>
</spec>
<spec>
  <name>enter_loop</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>enter_loop(Module :: module(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seealso marker="#type-debug_opt">debug_opt()</seealso> | <seealso marker="#type-hibernate_after_opt">hibernate_after_opt()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State :: <seealso marker="#type-state">state()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Data :: <seealso marker="#type-data">data()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_return()</head></clause>
  </contract>
  <anno>Data</anno>
  <anno>Module</anno>
  <anno>Opts</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>enter_loop</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>enter_loop(Module :: module(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seealso marker="#type-debug_opt">debug_opt()</seealso> | <seealso marker="#type-hibernate_after_opt">hibernate_after_opt()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State :: <seealso marker="#type-state">state()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Data :: <seealso marker="#type-data">data()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Server_or_Actions :: <seealso marker="#type-server_name">server_name()</seealso> | pid() | [<seealso marker="#type-action">action()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_return()</head></clause>
  </contract>
  <anno>Data</anno>
  <anno>Module</anno>
  <anno>Opts</anno>
  <anno>Server_or_Actions</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>enter_loop</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>enter_loop(Module :: module(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seealso marker="#type-debug_opt">debug_opt()</seealso> | <seealso marker="#type-hibernate_after_opt">hibernate_after_opt()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State :: <seealso marker="#type-state">state()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Data :: <seealso marker="#type-data">data()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Server :: <seealso marker="#type-server_name">server_name()</seealso> | pid(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Actions :: [<seealso marker="#type-action">action()</seealso>] | <seealso marker="#type-action">action()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_return()</head></clause>
  </contract>
  <anno>Actions</anno>
  <anno>Data</anno>
  <anno>Module</anno>
  <anno>Opts</anno>
  <anno>Server</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>format_status</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>init_it</name>
  <arity>6</arity>
  <contract/>
</spec>
<spec>
  <name>reply</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>reply(Replies :: [<seealso marker="#type-reply_action">reply_action()</seealso>] | <seealso marker="#type-reply_action">reply_action()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Replies</anno>
</spec>
<spec>
  <name>reply</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>reply(From :: <seealso marker="#type-from">from()</seealso>, Reply :: term()) -&gt; ok</head></clause>
  </contract>
  <anno>From</anno>
  <anno>Reply</anno>
</spec>
<spec>
  <name>start</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>start(Module :: module(), Args :: term(), Opts :: [<seealso marker="#type-start_opt">start_opt()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-start_ret">start_ret()</seealso></head></clause>
  </contract>
  <anno>Args</anno>
  <anno>Module</anno>
  <anno>Opts</anno>
</spec>
<spec>
  <name>start</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>start(ServerName :: <seealso marker="#type-server_name">server_name()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Module :: module(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Args :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seealso marker="#type-start_opt">start_opt()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-start_ret">start_ret()</seealso></head></clause>
  </contract>
  <anno>Args</anno>
  <anno>Module</anno>
  <anno>Opts</anno>
  <anno>ServerName</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>start_link(Module :: module(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Args :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seealso marker="#type-start_opt">start_opt()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-start_ret">start_ret()</seealso></head></clause>
  </contract>
  <anno>Args</anno>
  <anno>Module</anno>
  <anno>Opts</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>start_link(ServerName :: <seealso marker="#type-server_name">server_name()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Module :: module(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Args :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seealso marker="#type-start_opt">start_opt()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-start_ret">start_ret()</seealso></head></clause>
  </contract>
  <anno>Args</anno>
  <anno>Module</anno>
  <anno>Opts</anno>
  <anno>ServerName</anno>
</spec>
<spec>
  <name>stop</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>stop(ServerRef :: <seealso marker="#type-server_ref">server_ref()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>ServerRef</anno>
</spec>
<spec>
  <name>stop</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>stop(ServerRef :: <seealso marker="#type-server_ref">server_ref()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Reason :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: timeout()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head></clause>
  </contract>
  <anno>Reason</anno>
  <anno>ServerRef</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>system_code_change</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>system_continue</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>system_get_state</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>system_replace_state</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>system_terminate</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>wakeup_from_hibernate</name>
  <arity>3</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:20.</timestamp>
</module>