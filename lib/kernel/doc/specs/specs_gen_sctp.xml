<module name="gen_sctp">
<type>
  <name>assoc_id</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-assoc_id">assoc_id()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-option">option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{active, true | false | once | -32768..32767} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{buffer, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{dontroute, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{high_msgq_watermark, integer() &gt;= 1} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{linger, {boolean(), integer() &gt;= 0}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{low_msgq_watermark, integer() &gt;= 1} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{mode, list | binary} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>list |<br/><nbsp/><nbsp/><nbsp/><nbsp/>binary |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{priority, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{recbuf, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{reuseaddr, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ipv6_v6only, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_adaptation_layer, #sctp_setadaptation{}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_associnfo, #sctp_assocparams{}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_autoclose, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_default_send_param, #sctp_sndrcvinfo{}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_delayed_ack_time, #sctp_assoc_value{}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_disable_fragments, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_events, #sctp_event_subscribe{}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_get_peer_addr_info, #sctp_paddrinfo{}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_i_want_mapped_v4_addr, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_initmsg, #sctp_initmsg{}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_maxseg, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_nodelay, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_peer_addr_params, #sctp_paddrparams{}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_primary_addr, #sctp_prim{}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_rtoinfo, #sctp_rtoinfo{}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_set_peer_primary_addr, #sctp_setpeerprim{}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sctp_status, #sctp_status{}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sndbuf, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tos, integer() &gt;= 0}</typehead></typedecl>
</type>
<type>
  <name>option_name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-option_name">option_name()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>active |<br/><nbsp/><nbsp/><nbsp/><nbsp/>buffer |<br/><nbsp/><nbsp/><nbsp/><nbsp/>dontroute |<br/><nbsp/><nbsp/><nbsp/><nbsp/>high_msgq_watermark |<br/><nbsp/><nbsp/><nbsp/><nbsp/>linger |<br/><nbsp/><nbsp/><nbsp/><nbsp/>low_msgq_watermark |<br/><nbsp/><nbsp/><nbsp/><nbsp/>mode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>priority |<br/><nbsp/><nbsp/><nbsp/><nbsp/>recbuf |<br/><nbsp/><nbsp/><nbsp/><nbsp/>reuseaddr |<br/><nbsp/><nbsp/><nbsp/><nbsp/>ipv6_v6only |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_adaptation_layer |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_associnfo |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_autoclose |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_default_send_param |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_delayed_ack_time |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_disable_fragments |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_events |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_get_peer_addr_info |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_i_want_mapped_v4_addr |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_initmsg |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_maxseg |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_nodelay |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_peer_addr_params |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_primary_addr |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_rtoinfo |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_set_peer_primary_addr |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sctp_status |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sndbuf |<br/><nbsp/><nbsp/><nbsp/><nbsp/>tos</typehead></typedecl>
</type>
<type>
  <name>sctp_socket</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sctp_socket">sctp_socket()</marker> = port()</typehead></typedecl>
</type>
<spec>
  <name>abort</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>abort(Socket, Assoc) -&gt; ok | {error, <seealso marker="inet#type-posix">inet:posix()</seealso>}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
        <subtype><typename>Assoc</typename><string>Assoc = #sctp_assoc_change{}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Assoc</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>close</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>close(Socket) -&gt; ok | {error, <seealso marker="inet#type-posix">inet:posix()</seealso>}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>connect(Socket, Addr, Port, Opts) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Assoc} | {error, <seealso marker="inet#type-posix">inet:posix()</seealso>}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
        <subtype><typename>Addr</typename><string>Addr = <seealso marker="inet#type-ip_address">inet:ip_address()</seealso> | <seealso marker="inet#type-hostname">inet:hostname()</seealso></string></subtype>
        <subtype><typename>Port</typename><string>Port = <seealso marker="inet#type-port_number">inet:port_number()</seealso></string></subtype>
        <subtype><typename>Opts</typename><string>Opts = [Opt :: <seealso marker="#type-option">option()</seealso>]</string></subtype>
        <subtype><typename>Assoc</typename><string>Assoc = #sctp_assoc_change{}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Addr</anno>
  <anno>Assoc</anno>
  <anno>Opt</anno>
  <anno>Opts</anno>
  <anno>Port</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>connect(Socket, Addr, Port, Opts, Timeout) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Assoc} | {error, <seealso marker="inet#type-posix">inet:posix()</seealso>}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
        <subtype><typename>Addr</typename><string>Addr = <seealso marker="inet#type-ip_address">inet:ip_address()</seealso> | <seealso marker="inet#type-hostname">inet:hostname()</seealso></string></subtype>
        <subtype><typename>Port</typename><string>Port = <seealso marker="inet#type-port_number">inet:port_number()</seealso></string></subtype>
        <subtype><typename>Opts</typename><string>Opts = [Opt :: <seealso marker="#type-option">option()</seealso>]</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
        <subtype><typename>Assoc</typename><string>Assoc = #sctp_assoc_change{}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Addr</anno>
  <anno>Assoc</anno>
  <anno>Opt</anno>
  <anno>Opts</anno>
  <anno>Port</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>connect_init</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>connect_init(Socket, Addr, Port, Opts) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, <seealso marker="inet#type-posix">inet:posix()</seealso>}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
        <subtype><typename>Addr</typename><string>Addr = <seealso marker="inet#type-ip_address">inet:ip_address()</seealso> | <seealso marker="inet#type-hostname">inet:hostname()</seealso></string></subtype>
        <subtype><typename>Port</typename><string>Port = <seealso marker="inet#type-port_number">inet:port_number()</seealso></string></subtype>
        <subtype><typename>Opts</typename><string>Opts = [<seealso marker="#type-option">option()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Addr</anno>
  <anno>Opts</anno>
  <anno>Port</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>connect_init</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>connect_init(Socket, Addr, Port, Opts, Timeout) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, <seealso marker="inet#type-posix">inet:posix()</seealso>}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
        <subtype><typename>Addr</typename><string>Addr = <seealso marker="inet#type-ip_address">inet:ip_address()</seealso> | <seealso marker="inet#type-hostname">inet:hostname()</seealso></string></subtype>
        <subtype><typename>Port</typename><string>Port = <seealso marker="inet#type-port_number">inet:port_number()</seealso></string></subtype>
        <subtype><typename>Opts</typename><string>Opts = [<seealso marker="#type-option">option()</seealso>]</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Addr</anno>
  <anno>Opts</anno>
  <anno>Port</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>controlling_process</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>controlling_process(Socket, Pid) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = closed | not_owner | badarg | <seealso marker="inet#type-posix">inet:posix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>eof</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>eof(Socket, Assoc) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
        <subtype><typename>Assoc</typename><string>Assoc = #sctp_assoc_change{}</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Assoc</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>error_string</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>error_string(ErrorNumber) -&gt; ok | string() | unknown_error</head>
      <guard>
        <subtype><typename>ErrorNumber</typename><string>ErrorNumber = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorNumber</anno>
</spec>
<spec>
  <name>listen</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>listen(Socket, IsServer) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
        <subtype><typename>IsServer</typename><string>IsServer = boolean()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>IsServer</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>listen</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>listen(Socket, Backlog) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
        <subtype><typename>Backlog</typename><string>Backlog = integer()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Backlog</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>open</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>open() -&gt; {ok, Socket} | {error, <seealso marker="inet#type-posix">inet:posix()</seealso>}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>open</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>open(Port) -&gt; {ok, Socket} | {error, <seealso marker="inet#type-posix">inet:posix()</seealso>}</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seealso marker="inet#type-port_number">inet:port_number()</seealso></string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Port</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>open</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>open(Opts) -&gt; {ok, Socket} | {error, <seealso marker="inet#type-posix">inet:posix()</seealso>}</head>
      <guard>
        <subtype><typename>Opts</typename><string>Opts = [Opt]</string></subtype>
        <subtype><typename>Opt</typename><string>Opt = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ip, IP} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ifaddr, IP} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="inet#type-address_family">inet:address_family()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{port, Port} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{type, SockType} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-option">option()</seealso></string></subtype>
        <subtype><typename>IP</typename><string>IP = <seealso marker="inet#type-ip_address">inet:ip_address()</seealso> | any | loopback</string></subtype>
        <subtype><typename>Port</typename><string>Port = <seealso marker="inet#type-port_number">inet:port_number()</seealso></string></subtype>
        <subtype><typename>SockType</typename><string>SockType = seqpacket | stream</string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>IP</anno>
  <anno>Opt</anno>
  <anno>Opts</anno>
  <anno>Port</anno>
  <anno>SockType</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>open</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>open(Port, Opts) -&gt; {ok, Socket} | {error, <seealso marker="inet#type-posix">inet:posix()</seealso>}</head>
      <guard>
        <subtype><typename>Opts</typename><string>Opts = [Opt]</string></subtype>
        <subtype><typename>Opt</typename><string>Opt = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ip, IP} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ifaddr, IP} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="inet#type-address_family">inet:address_family()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{port, Port} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{type, SockType} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-option">option()</seealso></string></subtype>
        <subtype><typename>IP</typename><string>IP = <seealso marker="inet#type-ip_address">inet:ip_address()</seealso> | any | loopback</string></subtype>
        <subtype><typename>Port</typename><string>Port = <seealso marker="inet#type-port_number">inet:port_number()</seealso></string></subtype>
        <subtype><typename>SockType</typename><string>SockType = seqpacket | stream</string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>IP</anno>
  <anno>Opt</anno>
  <anno>Opts</anno>
  <anno>Port</anno>
  <anno>SockType</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>peeloff</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>peeloff(Socket, Assoc) -&gt; {ok, NewSocket} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
        <subtype><typename>Assoc</typename><string>Assoc = #sctp_assoc_change{} | <seealso marker="#type-assoc_id">assoc_id()</seealso></string></subtype>
        <subtype><typename>NewSocket</typename><string>NewSocket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Assoc</anno>
  <anno>NewSocket</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>recv(Socket) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {FromIP, FromPort, AncData, Data}} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
        <subtype><typename>FromIP</typename><string>FromIP = <seealso marker="inet#type-ip_address">inet:ip_address()</seealso></string></subtype>
        <subtype><typename>FromPort</typename><string>FromPort = <seealso marker="inet#type-port_number">inet:port_number()</seealso></string></subtype>
        <subtype><typename>AncData</typename><string>AncData = [#sctp_sndrcvinfo{}]</string></subtype>
        <subtype><typename>Data</typename><string>Data = <br/><nbsp/><nbsp/><nbsp/><nbsp/>binary() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>string() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_sndrcvinfo{} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_assoc_change{} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_paddr_change{} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_adaptation_event{}</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="inet#type-posix">inet:posix()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_send_failed{} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_paddr_change{} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_pdapi_event{} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_remote_error{} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_shutdown_event{}</string></subtype>
      </guard></clause>
  </contract>
  <anno>AncData</anno>
  <anno>Data</anno>
  <anno>FromIP</anno>
  <anno>FromPort</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>recv(Socket, Timeout) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {FromIP, FromPort, AncData, Data}} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
        <subtype><typename>FromIP</typename><string>FromIP = <seealso marker="inet#type-ip_address">inet:ip_address()</seealso></string></subtype>
        <subtype><typename>FromPort</typename><string>FromPort = <seealso marker="inet#type-port_number">inet:port_number()</seealso></string></subtype>
        <subtype><typename>AncData</typename><string>AncData = [#sctp_sndrcvinfo{}]</string></subtype>
        <subtype><typename>Data</typename><string>Data = <br/><nbsp/><nbsp/><nbsp/><nbsp/>binary() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>string() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_sndrcvinfo{} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_assoc_change{} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_paddr_change{} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_adaptation_event{}</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="inet#type-posix">inet:posix()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_send_failed{} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_paddr_change{} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_pdapi_event{} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_remote_error{} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#sctp_shutdown_event{}</string></subtype>
      </guard></clause>
  </contract>
  <anno>AncData</anno>
  <anno>Data</anno>
  <anno>FromIP</anno>
  <anno>FromPort</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>send</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>send(Socket, SndRcvInfo, Data) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
        <subtype><typename>SndRcvInfo</typename><string>SndRcvInfo = #sctp_sndrcvinfo{}</string></subtype>
        <subtype><typename>Data</typename><string>Data = binary() | iolist()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>SndRcvInfo</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>send</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>send(Socket, Assoc, Stream, Data) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-sctp_socket">sctp_socket()</seealso></string></subtype>
        <subtype><typename>Assoc</typename><string>Assoc = #sctp_assoc_change{} | <seealso marker="#type-assoc_id">assoc_id()</seealso></string></subtype>
        <subtype><typename>Stream</typename><string>Stream = integer()</string></subtype>
        <subtype><typename>Data</typename><string>Data = binary() | iolist()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Assoc</anno>
  <anno>Data</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Stream</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:41.</timestamp>
</module>