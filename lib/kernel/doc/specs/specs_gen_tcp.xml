<module name="gen_tcp">
<type>
  <name>connect_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-connect_option">connect_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ip, <seealso marker="inet#type-socket_address">inet:socket_address()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{fd, Fd :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ifaddr, <seealso marker="inet#type-socket_address">inet:socket_address()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="inet#type-address_family">inet:address_family()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{port, <seealso marker="inet#type-port_number">inet:port_number()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tcp_module, module()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-option">option()</seealso></typehead></typedecl>
  <anno>Fd</anno>
</type>
<type>
  <name>listen_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-listen_option">listen_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ip, <seealso marker="inet#type-socket_address">inet:socket_address()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{fd, Fd :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ifaddr, <seealso marker="inet#type-socket_address">inet:socket_address()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="inet#type-address_family">inet:address_family()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{port, <seealso marker="inet#type-port_number">inet:port_number()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{backlog, B :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tcp_module, module()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-option">option()</seealso></typehead></typedecl>
  <anno>B</anno>
  <anno>Fd</anno>
</type>
<type>
  <name>option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-option">option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{active, true | false | once | -32768..32767} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{buffer, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{delay_send, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{deliver, port | term} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{dontroute, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{exit_on_close, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{header, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{high_msgq_watermark, integer() &gt;= 1} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{high_watermark, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{keepalive, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{linger, {boolean(), integer() &gt;= 0}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{low_msgq_watermark, integer() &gt;= 1} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{low_watermark, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{mode, list | binary} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>list |<br/><nbsp/><nbsp/><nbsp/><nbsp/>binary |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{nodelay, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{packet,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0 |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>1 |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>2 |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>4 |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>raw |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>sunrm |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>asn1 |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>cdr |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>fcgi |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>line |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>tpkt |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>http |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>httph |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>http_bin |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>httph_bin} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{packet_size, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{priority, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{raw,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Protocol :: integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OptionNum :: integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ValueBin :: binary()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{recbuf, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{reuseaddr, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{send_timeout, integer() &gt;= 0 | infinity} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{send_timeout_close, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{show_econnreset, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sndbuf, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tos, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ipv6_v6only, boolean()}</typehead></typedecl>
  <anno>OptionNum</anno>
  <anno>Protocol</anno>
  <anno>ValueBin</anno>
</type>
<type>
  <name>option_name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-option_name">option_name()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>active |<br/><nbsp/><nbsp/><nbsp/><nbsp/>buffer |<br/><nbsp/><nbsp/><nbsp/><nbsp/>delay_send |<br/><nbsp/><nbsp/><nbsp/><nbsp/>deliver |<br/><nbsp/><nbsp/><nbsp/><nbsp/>dontroute |<br/><nbsp/><nbsp/><nbsp/><nbsp/>exit_on_close |<br/><nbsp/><nbsp/><nbsp/><nbsp/>header |<br/><nbsp/><nbsp/><nbsp/><nbsp/>high_msgq_watermark |<br/><nbsp/><nbsp/><nbsp/><nbsp/>high_watermark |<br/><nbsp/><nbsp/><nbsp/><nbsp/>keepalive |<br/><nbsp/><nbsp/><nbsp/><nbsp/>linger |<br/><nbsp/><nbsp/><nbsp/><nbsp/>low_msgq_watermark |<br/><nbsp/><nbsp/><nbsp/><nbsp/>low_watermark |<br/><nbsp/><nbsp/><nbsp/><nbsp/>mode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nodelay |<br/><nbsp/><nbsp/><nbsp/><nbsp/>packet |<br/><nbsp/><nbsp/><nbsp/><nbsp/>packet_size |<br/><nbsp/><nbsp/><nbsp/><nbsp/>priority |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{raw,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Protocol :: integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OptionNum :: integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ValueSpec ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>(ValueSize :: integer() &gt;= 0) | (ValueBin :: binary())} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>recbuf |<br/><nbsp/><nbsp/><nbsp/><nbsp/>reuseaddr |<br/><nbsp/><nbsp/><nbsp/><nbsp/>send_timeout |<br/><nbsp/><nbsp/><nbsp/><nbsp/>send_timeout_close |<br/><nbsp/><nbsp/><nbsp/><nbsp/>show_econnreset |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sndbuf |<br/><nbsp/><nbsp/><nbsp/><nbsp/>tos |<br/><nbsp/><nbsp/><nbsp/><nbsp/>ipv6_v6only</typehead></typedecl>
  <anno>OptionNum</anno>
  <anno>Protocol</anno>
  <anno>ValueBin</anno>
  <anno>ValueSize</anno>
  <anno>ValueSpec</anno>
</type>
<type>
  <name>socket</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket">socket()</marker> = port()</typehead></typedecl>
</type>
<spec>
  <name>accept</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>accept(ListenSocket) -&gt; {ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>ListenSocket</typename><string>ListenSocket = Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Socket</typename><string/></subtype>
        <subtype><typename>Reason</typename><string>Reason = closed | timeout | system_limit | <seealso marker="inet#type-posix">inet:posix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>ListenSocket</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>accept</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>accept(ListenSocket, Timeout) -&gt; {ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>ListenSocket</typename><string>ListenSocket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = closed | timeout | system_limit | <seealso marker="inet#type-posix">inet:posix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>ListenSocket</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>close</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>close(Socket) -&gt; ok</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>connect(Address, Port, Options) -&gt; {ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>Address</typename><string>Address = <seealso marker="inet#type-socket_address">inet:socket_address()</seealso> | <seealso marker="inet#type-hostname">inet:hostname()</seealso></string></subtype>
        <subtype><typename>Port</typename><string>Port = <seealso marker="inet#type-port_number">inet:port_number()</seealso></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="#type-connect_option">connect_option()</seealso>]</string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seealso marker="inet#type-posix">inet:posix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>Options</anno>
  <anno>Port</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>connect</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>connect(Address, Port, Options, Timeout) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Socket} | {error, Reason}</head>
      <guard>
        <subtype><typename>Address</typename><string>Address = <seealso marker="inet#type-socket_address">inet:socket_address()</seealso> | <seealso marker="inet#type-hostname">inet:hostname()</seealso></string></subtype>
        <subtype><typename>Port</typename><string>Port = <seealso marker="inet#type-port_number">inet:port_number()</seealso></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="#type-connect_option">connect_option()</seealso>]</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seealso marker="inet#type-posix">inet:posix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>Options</anno>
  <anno>Port</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>controlling_process</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>controlling_process(Socket, Pid) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = closed | not_owner | badarg | <seealso marker="inet#type-posix">inet:posix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>fdopen</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>listen</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>listen(Port, Options) -&gt; {ok, ListenSocket} | {error, Reason}</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = <seealso marker="inet#type-port_number">inet:port_number()</seealso></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="#type-listen_option">listen_option()</seealso>]</string></subtype>
        <subtype><typename>ListenSocket</typename><string>ListenSocket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = system_limit | <seealso marker="inet#type-posix">inet:posix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>ListenSocket</anno>
  <anno>Options</anno>
  <anno>Port</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>recv(Socket, Length) -&gt; {ok, Packet} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Length</typename><string>Length = integer() &gt;= 0</string></subtype>
        <subtype><typename>Packet</typename><string>Packet = string() | binary() | HttpPacket</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = closed | <seealso marker="inet#type-posix">inet:posix()</seealso></string></subtype>
        <subtype><typename>HttpPacket</typename><string>HttpPacket = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>HttpPacket</anno>
  <anno>Length</anno>
  <anno>Packet</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>recv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>recv(Socket, Length, Timeout) -&gt; {ok, Packet} | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Length</typename><string>Length = integer() &gt;= 0</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
        <subtype><typename>Packet</typename><string>Packet = string() | binary() | HttpPacket</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = closed | <seealso marker="inet#type-posix">inet:posix()</seealso></string></subtype>
        <subtype><typename>HttpPacket</typename><string>HttpPacket = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>HttpPacket</anno>
  <anno>Length</anno>
  <anno>Packet</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>send</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>send(Socket, Packet) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Packet</typename><string>Packet = iodata()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = closed | <seealso marker="inet#type-posix">inet:posix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Packet</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>shutdown</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>shutdown(Socket, How) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>How</typename><string>How = read | write | read_write</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <seealso marker="inet#type-posix">inet:posix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>How</anno>
  <anno>Reason</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>unrecv</name>
  <arity>2</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:41.</timestamp>
</module>