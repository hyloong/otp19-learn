<module name="disk_log">
<type>
  <name>bchunk_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-bchunk_ret">bchunk_ret()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Continuation2 :: <seealso marker="#type-continuation">continuation()</seealso>, Binaries :: [binary()]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Continuation2 :: <seealso marker="#type-continuation">continuation()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Binaries :: [binary()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Badbytes :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>eof |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason :: <seealso marker="#type-chunk_error_rsn">chunk_error_rsn()</seealso>}</typehead></typedecl>
  <anno>Badbytes</anno>
  <anno>Binaries</anno>
  <anno>Continuation2</anno>
  <anno>Reason</anno>
</type>
<type>
  <name>block_error_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-block_error_rsn">block_error_rsn()</marker> = no_such_log | nonode | {blocked_log, <seealso marker="#type-log">log()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>chunk_error_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-chunk_error_rsn">chunk_error_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_such_log |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{format_external, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{blocked_log, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{badarg, continuation} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{not_internal_wrap, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{corrupt_log_file, FileName :: <seealso marker="file#type-filename">file:filename()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{file_error, <seealso marker="file#type-filename">file:filename()</seealso>, <seealso marker="#type-file_error">file_error()</seealso>}</typehead></typedecl>
  <anno>FileName</anno>
</type>
<type>
  <name>chunk_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-chunk_ret">chunk_ret()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Continuation2 :: <seealso marker="#type-continuation">continuation()</seealso>, Terms :: [term()]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Continuation2 :: <seealso marker="#type-continuation">continuation()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Terms :: [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Badbytes :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>eof |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason :: <seealso marker="#type-chunk_error_rsn">chunk_error_rsn()</seealso>}</typehead></typedecl>
  <anno>Badbytes</anno>
  <anno>Continuation2</anno>
  <anno>Reason</anno>
  <anno>Terms</anno>
</type>
<type>
  <name>close_error_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-close_error_rsn">close_error_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_such_log |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nonode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{file_error, <seealso marker="file#type-filename">file:filename()</seealso>, <seealso marker="#type-file_error">file_error()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>continuation</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-continuation">continuation()</marker></typehead></typedecl>
</type>
<type>
  <name>dist_error_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dist_error_rsn">dist_error_rsn()</marker> = nodedown | <seealso marker="#type-open_error_rsn">open_error_rsn()</seealso></typehead></typedecl>
</type>
<type>
  <name>dist_open_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dist_open_ret">dist_open_ret()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{[{node(), <seealso marker="#type-ret">ret()</seealso>}], [{node(), {error, <seealso marker="#type-dist_error_rsn">dist_error_rsn()</seealso>}}]}</typehead></typedecl>
</type>
<type>
  <name>dlog_format</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dlog_format">dlog_format()</marker> = external | internal</typehead></typedecl>
</type>
<type>
  <name>dlog_format_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dlog_format_type">dlog_format_type()</marker> = halt_ext | halt_int | wrap_ext | wrap_int</typehead></typedecl>
</type>
<type>
  <name>dlog_head_opt</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dlog_head_opt">dlog_head_opt()</marker> = none | term() | iodata()</typehead></typedecl>
</type>
<type>
  <name>dlog_info</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dlog_info">dlog_info()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{name, Log :: <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{file, File :: <seealso marker="file#type-filename">file:filename()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{type, Type :: <seealso marker="#type-dlog_type">dlog_type()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{format, Format :: <seealso marker="#type-dlog_format">dlog_format()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{size, Size :: <seealso marker="#type-dlog_size">dlog_size()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{mode, Mode :: <seealso marker="#type-dlog_mode">dlog_mode()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{owners, [{pid(), Notify :: boolean()}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{users, Users :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{status,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Status :: ok | {blocked, QueueLogRecords :: boolean()}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{node, Node :: node()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{distributed, Dist :: local | [node()]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{head,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Head ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>none | {head, term()} | (MFA :: {atom(), atom(), list()})} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{no_written_items, NoWrittenItems :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{full, Full :: boolean} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{no_current_bytes, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{no_current_items, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{no_items, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{current_file, integer() &gt;= 1} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{no_overflows,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{SinceLogWasOpened :: integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SinceLastInfo :: integer() &gt;= 0}}</typehead></typedecl>
  <anno>Dist</anno>
  <anno>File</anno>
  <anno>Format</anno>
  <anno>Full</anno>
  <anno>Head</anno>
  <anno>Log</anno>
  <anno>MFA</anno>
  <anno>Mode</anno>
  <anno>NoWrittenItems</anno>
  <anno>Node</anno>
  <anno>Notify</anno>
  <anno>QueueLogRecords</anno>
  <anno>SinceLastInfo</anno>
  <anno>SinceLogWasOpened</anno>
  <anno>Size</anno>
  <anno>Status</anno>
  <anno>Type</anno>
  <anno>Users</anno>
</type>
<type>
  <name>dlog_mode</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dlog_mode">dlog_mode()</marker> = read_only | read_write</typehead></typedecl>
</type>
<type>
  <name>dlog_name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dlog_name">dlog_name()</marker> = atom() | string()</typehead></typedecl>
</type>
<type>
  <name>dlog_optattr</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dlog_optattr">dlog_optattr()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>name |<br/><nbsp/><nbsp/><nbsp/><nbsp/>file |<br/><nbsp/><nbsp/><nbsp/><nbsp/>linkto |<br/><nbsp/><nbsp/><nbsp/><nbsp/>repair |<br/><nbsp/><nbsp/><nbsp/><nbsp/>type |<br/><nbsp/><nbsp/><nbsp/><nbsp/>format |<br/><nbsp/><nbsp/><nbsp/><nbsp/>size |<br/><nbsp/><nbsp/><nbsp/><nbsp/>distributed |<br/><nbsp/><nbsp/><nbsp/><nbsp/>notify |<br/><nbsp/><nbsp/><nbsp/><nbsp/>head |<br/><nbsp/><nbsp/><nbsp/><nbsp/>head_func |<br/><nbsp/><nbsp/><nbsp/><nbsp/>mode</typehead></typedecl>
</type>
<type>
  <name>dlog_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dlog_option">dlog_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{name, Log :: <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{file, FileName :: <seealso marker="file#type-filename">file:filename()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{linkto, LinkTo :: none | pid()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{repair, Repair :: true | false | truncate} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{type, Type :: <seealso marker="#type-dlog_type">dlog_type()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{format, Format :: <seealso marker="#type-dlog_format">dlog_format()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{size, Size :: <seealso marker="#type-dlog_size">dlog_size()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{distributed, Nodes :: [node()]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{notify, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{head, Head :: <seealso marker="#type-dlog_head_opt">dlog_head_opt()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{head_func, MFA :: {atom(), atom(), list()}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{quiet, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{mode, Mode :: <seealso marker="#type-dlog_mode">dlog_mode()</seealso>}</typehead></typedecl>
  <anno>FileName</anno>
  <anno>Format</anno>
  <anno>Head</anno>
  <anno>LinkTo</anno>
  <anno>Log</anno>
  <anno>MFA</anno>
  <anno>Mode</anno>
  <anno>Nodes</anno>
  <anno>Repair</anno>
  <anno>Size</anno>
  <anno>Type</anno>
</type>
<type>
  <name>dlog_options</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dlog_options">dlog_options()</marker> = [<seealso marker="#type-dlog_option">dlog_option()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>dlog_size</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dlog_size">dlog_size()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>infinity |<br/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 1 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{MaxNoBytes :: integer() &gt;= 1, MaxNoFiles :: integer() &gt;= 1}</typehead></typedecl>
  <anno>MaxNoBytes</anno>
  <anno>MaxNoFiles</anno>
</type>
<type>
  <name>dlog_state_error</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dlog_state_error">dlog_state_error()</marker> = ok | {error, term()}</typehead></typedecl>
</type>
<type>
  <name>dlog_status</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dlog_status">dlog_status()</marker> = ok | {blocked, false | [term()]}</typehead></typedecl>
</type>
<type>
  <name>dlog_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dlog_type">dlog_type()</marker> = halt | wrap</typehead></typedecl>
</type>
<type>
  <name>file_error</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-file_error">file_error()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>inc_wrap_error_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-inc_wrap_error_rsn">inc_wrap_error_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_such_log |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nonode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{read_only_mode, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{blocked_log, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{halt_log, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{invalid_header, <seealso marker="#type-invalid_header">invalid_header()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{file_error, <seealso marker="file#type-filename">file:filename()</seealso>, <seealso marker="#type-file_error">file_error()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>invalid_header</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-invalid_header">invalid_header()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>lclose_error_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-lclose_error_rsn">lclose_error_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_such_log | {file_error, <seealso marker="file#type-filename">file:filename()</seealso>, <seealso marker="#type-file_error">file_error()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>log</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-log">log()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>log_error_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-log_error_rsn">log_error_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_such_log |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nonode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{read_only_mode, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{format_external, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{blocked_log, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{full, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{invalid_header, <seealso marker="#type-invalid_header">invalid_header()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{file_error, <seealso marker="file#type-filename">file:filename()</seealso>, <seealso marker="#type-file_error">file_error()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>notify_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-notify_ret">notify_ret()</marker> = ok | {error, no_such_log}</typehead></typedecl>
</type>
<type>
  <name>open_error_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-open_error_rsn">open_error_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_such_log |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{badarg, term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{size_mismatch,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CurrentSize :: <seealso marker="#type-dlog_size">dlog_size()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>NewSize :: <seealso marker="#type-dlog_size">dlog_size()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{arg_mismatch,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OptionName :: <seealso marker="#type-dlog_optattr">dlog_optattr()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CurrentValue :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Value :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{name_already_open, Log :: <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{open_read_write, Log :: <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{open_read_only, Log :: <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{need_repair, Log :: <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{not_a_log_file, FileName :: <seealso marker="file#type-filename">file:filename()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{invalid_index_file, FileName :: <seealso marker="file#type-filename">file:filename()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{invalid_header, <seealso marker="#type-invalid_header">invalid_header()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{file_error, <seealso marker="file#type-filename">file:filename()</seealso>, <seealso marker="#type-file_error">file_error()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{node_already_open, Log :: <seealso marker="#type-log">log()</seealso>}</typehead></typedecl>
  <anno>CurrentSize</anno>
  <anno>CurrentValue</anno>
  <anno>FileName</anno>
  <anno>Log</anno>
  <anno>NewSize</anno>
  <anno>OptionName</anno>
  <anno>Value</anno>
</type>
<type>
  <name>open_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-open_ret">open_ret()</marker> = <seealso marker="#type-ret">ret()</seealso> | {error, <seealso marker="#type-open_error_rsn">open_error_rsn()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>reopen_error_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-reopen_error_rsn">reopen_error_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_such_log |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nonode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{read_only_mode, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{blocked_log, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{same_file_name, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{invalid_index_file, <seealso marker="file#type-filename">file:filename()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{invalid_header, <seealso marker="#type-invalid_header">invalid_header()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{file_error, <seealso marker="file#type-filename">file:filename()</seealso>, <seealso marker="#type-file_error">file_error()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ret">ret()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Log :: <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{repaired,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Log :: <seealso marker="#type-log">log()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{recovered, Rec :: integer() &gt;= 0},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{badbytes, Bad :: integer() &gt;= 0}}</typehead></typedecl>
  <anno>Bad</anno>
  <anno>Log</anno>
  <anno>Rec</anno>
</type>
<type>
  <name>sync_error_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sync_error_rsn">sync_error_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_such_log |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nonode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{read_only_mode, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{blocked_log, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{file_error, <seealso marker="file#type-filename">file:filename()</seealso>, <seealso marker="#type-file_error">file_error()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>trunc_error_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-trunc_error_rsn">trunc_error_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_such_log |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nonode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{read_only_mode, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{blocked_log, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{invalid_header, <seealso marker="#type-invalid_header">invalid_header()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{file_error, <seealso marker="file#type-filename">file:filename()</seealso>, <seealso marker="#type-file_error">file_error()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>unblock_error_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-unblock_error_rsn">unblock_error_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_such_log |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nonode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{not_blocked, <seealso marker="#type-log">log()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{not_blocked_by_pid, <seealso marker="#type-log">log()</seealso>}</typehead></typedecl>
</type>
<spec>
  <name>accessible_logs</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>accessible_logs() -&gt; {[LocalLog], [DistributedLog]}</head>
      <guard>
        <subtype><typename>LocalLog</typename><string>LocalLog = DistributedLog = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>DistributedLog</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>DistributedLog</anno>
  <anno>LocalLog</anno>
</spec>
<spec>
  <name>alog</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>alog(Log, Term) -&gt; <seealso marker="#type-notify_ret">notify_ret()</seealso></head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Log</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>alog_terms</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>alog_terms(Log, TermList) -&gt; <seealso marker="#type-notify_ret">notify_ret()</seealso></head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>TermList</typename><string>TermList = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Log</anno>
  <anno>TermList</anno>
</spec>
<spec>
  <name>balog</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>balog(Log, Bytes) -&gt; <seealso marker="#type-notify_ret">notify_ret()</seealso></head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>Bytes</typename><string>Bytes = iodata()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bytes</anno>
  <anno>Log</anno>
</spec>
<spec>
  <name>balog_terms</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>balog_terms(Log, ByteList) -&gt; <seealso marker="#type-notify_ret">notify_ret()</seealso></head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>ByteList</typename><string>ByteList = [iodata()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>ByteList</anno>
  <anno>Log</anno>
</spec>
<spec>
  <name>bchunk</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>bchunk(Log, Continuation) -&gt; <seealso marker="#type-bchunk_ret">bchunk_ret()</seealso></head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>Continuation</typename><string>Continuation = start | <seealso marker="#type-continuation">continuation()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Continuation</anno>
  <anno>Log</anno>
</spec>
<spec>
  <name>bchunk</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>bchunk(Log, Continuation, N) -&gt; <seealso marker="#type-bchunk_ret">bchunk_ret()</seealso></head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>Continuation</typename><string>Continuation = start | <seealso marker="#type-continuation">continuation()</seealso></string></subtype>
        <subtype><typename>N</typename><string>N = integer() &gt;= 1 | infinity</string></subtype>
      </guard></clause>
  </contract>
  <anno>Continuation</anno>
  <anno>Log</anno>
  <anno>N</anno>
</spec>
<spec>
  <name>block</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>block(Log) -&gt; ok | {error, <seealso marker="#type-block_error_rsn">block_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Log</anno>
</spec>
<spec>
  <name>block</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>block(Log, QueueLogRecords) -&gt; ok | {error, <seealso marker="#type-block_error_rsn">block_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>QueueLogRecords</typename><string>QueueLogRecords = boolean()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Log</anno>
  <anno>QueueLogRecords</anno>
</spec>
<spec>
  <name>blog</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>blog(Log, Bytes) -&gt; ok | {error, Reason :: <seealso marker="#type-log_error_rsn">log_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>Bytes</typename><string>Bytes = iodata()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bytes</anno>
  <anno>Log</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>blog_terms</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>blog_terms(Log, BytesList) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, Reason :: <seealso marker="#type-log_error_rsn">log_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>BytesList</typename><string>BytesList = [iodata()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>BytesList</anno>
  <anno>Log</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>breopen</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>breopen(Log, File, BHead) -&gt; ok | {error, <seealso marker="#type-reopen_error_rsn">reopen_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>File</typename><string>File = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
        <subtype><typename>BHead</typename><string>BHead = iodata()</string></subtype>
      </guard></clause>
  </contract>
  <anno>BHead</anno>
  <anno>File</anno>
  <anno>Log</anno>
</spec>
<spec>
  <name>btruncate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>btruncate(Log, BHead) -&gt; ok | {error, <seealso marker="#type-trunc_error_rsn">trunc_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>BHead</typename><string>BHead = iodata()</string></subtype>
      </guard></clause>
  </contract>
  <anno>BHead</anno>
  <anno>Log</anno>
</spec>
<spec>
  <name>change_header</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>change_header(Log, Header) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>Header</typename><string>Header = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{head, <seealso marker="#type-dlog_head_opt">dlog_head_opt()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{head_func, MFA :: {atom(), atom(), list()}}</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_such_log |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nonode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{read_only_mode, Log} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{blocked_log, Log} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{badarg, head}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Header</anno>
  <anno>Log</anno>
  <anno>MFA</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>change_notify</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>change_notify(Log, Owner, Notify) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>Owner</typename><string>Owner = pid()</string></subtype>
        <subtype><typename>Notify</typename><string>Notify = boolean()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_such_log |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nonode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{blocked_log, Log} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{badarg, notify} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{not_owner, Owner}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Log</anno>
  <anno>Notify</anno>
  <anno>Owner</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>change_size</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>change_size(Log, Size) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>Size</typename><string>Size = <seealso marker="#type-dlog_size">dlog_size()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_such_log |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nonode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{read_only_mode, Log} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{blocked_log, Log} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{new_size_too_small, CurrentSize :: integer() &gt;= 1} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{badarg, size} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{file_error, <seealso marker="file#type-filename">file:filename()</seealso>, <seealso marker="#type-file_error">file_error()</seealso>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>CurrentSize</anno>
  <anno>Log</anno>
  <anno>Reason</anno>
  <anno>Size</anno>
</spec>
<spec>
  <name>chunk</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>chunk(Log, Continuation) -&gt; <seealso marker="#type-chunk_ret">chunk_ret()</seealso></head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>Continuation</typename><string>Continuation = start | <seealso marker="#type-continuation">continuation()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Continuation</anno>
  <anno>Log</anno>
</spec>
<spec>
  <name>chunk</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>chunk(Log, Continuation, N) -&gt; <seealso marker="#type-chunk_ret">chunk_ret()</seealso></head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>Continuation</typename><string>Continuation = start | <seealso marker="#type-continuation">continuation()</seealso></string></subtype>
        <subtype><typename>N</typename><string>N = integer() &gt;= 1 | infinity</string></subtype>
      </guard></clause>
  </contract>
  <anno>Continuation</anno>
  <anno>Log</anno>
  <anno>N</anno>
</spec>
<spec>
  <name>chunk_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>chunk_info(Continuation) -&gt; InfoList | {error, Reason}</head>
      <guard>
        <subtype><typename>Continuation</typename><string>Continuation = <seealso marker="#type-continuation">continuation()</seealso></string></subtype>
        <subtype><typename>InfoList</typename><string>InfoList = [{node, Node :: node()}, ...]</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = {no_continuation, Continuation}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Continuation</anno>
  <anno>InfoList</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>chunk_step</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>chunk_step(Log, Continuation, Step) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, any()} | {error, Reason}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>Continuation</typename><string>Continuation = start | <seealso marker="#type-continuation">continuation()</seealso></string></subtype>
        <subtype><typename>Step</typename><string>Step = integer()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_such_log |<br/><nbsp/><nbsp/><nbsp/><nbsp/>end_of_log |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{format_external, Log} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{blocked_log, Log} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{badarg, continuation} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{file_error, <seealso marker="file#type-filename">file:filename()</seealso>, <seealso marker="#type-file_error">file_error()</seealso>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Continuation</anno>
  <anno>Log</anno>
  <anno>Reason</anno>
  <anno>Step</anno>
</spec>
<spec>
  <name>close</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>close(Log) -&gt; ok | {error, <seealso marker="#type-close_error_rsn">close_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Log</anno>
</spec>
<spec>
  <name>do_info</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>do_log</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>do_log(Log ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#log{status = <seealso marker="#type-dlog_status">dlog_status()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>name = <seealso marker="#type-dlog_name">dlog_name()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>blocked_by = none | pid(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>users = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>filename = <seealso marker="file#type-filename">file:filename()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>owners = [{pid(), boolean()}],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type = <seealso marker="#type-dlog_type">dlog_type()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>format = <seealso marker="#type-dlog_format">dlog_format()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>format_type = <seealso marker="#type-dlog_format_type">dlog_format_type()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>head = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>mode = <seealso marker="#type-dlog_mode">dlog_mode()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>size = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>extra =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#halt{fdc =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#cache{fd = <seealso marker="file#type-fd">file:fd()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>sz = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>c = iodata()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>curB = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>size = <seealso marker="#type-dlog_size">dlog_size()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#handle{filename = <seealso marker="file#type-filename">file:filename()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>maxB = integer() &gt;= 1,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>maxF =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 1 |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer() &gt;= 1, integer() &gt;= 1},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>curB = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>curF = integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>cur_fdc =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#cache{fd = <seealso marker="file#type-fd">file:fd()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>sz = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>c = iodata()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>cur_name = <seealso marker="file#type-filename">file:filename()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>cur_cnt = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>acc_cnt = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>firstPos = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>noFull = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>accFull = integer() &gt;= 0},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>version = integer()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>B :: [binary()]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() | {error, term(), integer()}</head></clause>
  </contract>
  <anno>B</anno>
  <anno>Log</anno>
</spec>
<spec>
  <name>do_sync</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>format_error</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>format_error(Error) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Error</typename><string>Error = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Error</anno>
</spec>
<spec>
  <name>ichunk_end</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>inc_wrap_file</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>inc_wrap_file(Log) -&gt; ok | {error, <seealso marker="#type-inc_wrap_error_rsn">inc_wrap_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Log</anno>
</spec>
<spec>
  <name>info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>info(Log) -&gt; InfoList | {error, no_such_log}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>InfoList</typename><string>InfoList = [<seealso marker="#type-dlog_info">dlog_info()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>InfoList</anno>
  <anno>Log</anno>
</spec>
<spec>
  <name>init</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>internal_open</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>istart_link</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>lclose</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>lclose(Log) -&gt; ok | {error, <seealso marker="#type-lclose_error_rsn">lclose_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Log</anno>
</spec>
<spec>
  <name>lclose</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lclose(Log, Node) -&gt; ok | {error, <seealso marker="#type-lclose_error_rsn">lclose_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Log</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>ll_close</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>ll_open</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>log</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>log(Log, Term) -&gt; ok | {error, Reason :: <seealso marker="#type-log_error_rsn">log_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Log</anno>
  <anno>Reason</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>log_terms</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>log_terms(Log, TermList) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, Resaon :: <seealso marker="#type-log_error_rsn">log_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>TermList</typename><string>TermList = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Log</anno>
  <anno>Resaon</anno>
  <anno>TermList</anno>
</spec>
<spec>
  <name>open</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>open(ArgL) -&gt; <seealso marker="#type-open_ret">open_ret()</seealso> | <seealso marker="#type-dist_open_ret">dist_open_ret()</seealso></head>
      <guard>
        <subtype><typename>ArgL</typename><string>ArgL = <seealso marker="#type-dlog_options">dlog_options()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>ArgL</anno>
</spec>
<spec>
  <name>pid2name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>pid2name(Pid) -&gt; {ok, Log} | undefined</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Log</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>reopen</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>reopen(Log, File) -&gt; ok | {error, <seealso marker="#type-reopen_error_rsn">reopen_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>File</typename><string>File = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>File</anno>
  <anno>Log</anno>
</spec>
<spec>
  <name>reopen</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>reopen(Log, File, Head) -&gt; ok | {error, <seealso marker="#type-reopen_error_rsn">reopen_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>File</typename><string>File = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
        <subtype><typename>Head</typename><string>Head = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>File</anno>
  <anno>Head</anno>
  <anno>Log</anno>
</spec>
<spec>
  <name>start</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>start() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>sync</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>sync(Log) -&gt; ok | {error, <seealso marker="#type-sync_error_rsn">sync_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Log</anno>
</spec>
<spec>
  <name>system_code_change</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>system_continue</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>system_terminate</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>system_terminate(Reason :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Parent :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X3 :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#state{queue = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>messages = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>parent = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>server = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>cnt = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>args = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>error_status = <seealso marker="#type-dlog_state_error">dlog_state_error()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>cache_error = any()}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_return()</head></clause>
  </contract>
  <anno>Parent</anno>
  <anno>Reason</anno>
  <anno>State</anno>
  <anno>X3</anno>
</spec>
<spec>
  <name>truncate</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>truncate(Log) -&gt; ok | {error, <seealso marker="#type-trunc_error_rsn">trunc_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Log</anno>
</spec>
<spec>
  <name>truncate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>truncate(Log, Head) -&gt; ok | {error, <seealso marker="#type-trunc_error_rsn">trunc_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
        <subtype><typename>Head</typename><string>Head = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Head</anno>
  <anno>Log</anno>
</spec>
<spec>
  <name>unblock</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>unblock(Log) -&gt; ok | {error, <seealso marker="#type-unblock_error_rsn">unblock_error_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Log</typename><string>Log = <seealso marker="#type-log">log()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Log</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:38.</timestamp>
</module>