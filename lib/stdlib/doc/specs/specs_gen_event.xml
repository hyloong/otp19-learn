<module name="gen_event">
<type>
  <name>add_handler_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-add_handler_ret">add_handler_ret()</marker> = ok | term() | {'EXIT', term()}</typehead></typedecl>
</type>
<type>
  <name>debug_flag</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-debug_flag">debug_flag()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>trace | log | statistics | debug | {logfile, string()}</typehead></typedecl>
</type>
<type>
  <name>del_handler_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-del_handler_ret">del_handler_ret()</marker> = ok | term() | {'EXIT', term()}</typehead></typedecl>
</type>
<type>
  <name>emgr_name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-emgr_name">emgr_name()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{local, atom()} | {global, atom()} | {via, atom(), term()}</typehead></typedecl>
</type>
<type>
  <name>emgr_ref</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-emgr_ref">emgr_ref()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>atom() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{atom(), atom()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{global, atom()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{via, atom(), term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>pid()</typehead></typedecl>
</type>
<type>
  <name>handler</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-handler">handler()</marker> = atom() | {atom(), term()}</typehead></typedecl>
</type>
<type>
  <name>handler_args</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-handler_args">handler_args()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-option">option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{timeout, timeout()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{debug, [<seealso marker="#type-debug_flag">debug_flag()</seealso>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{spawn_opt, [<seealso marker="proc_lib#type-spawn_option">proc_lib:spawn_option()</seealso>]}</typehead></typedecl>
</type>
<type>
  <name>start_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-start_ret">start_ret()</marker> = {ok, pid()} | {error, term()}</typehead></typedecl>
</type>
<spec>
  <name>add_handler</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>add_handler(M :: <seealso marker="#type-emgr_ref">emgr_ref()</seealso>, Handler :: <seealso marker="#type-handler">handler()</seealso>, Args :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>Args</anno>
  <anno>Handler</anno>
  <anno>M</anno>
</spec>
<spec>
  <name>add_sup_handler</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>add_sup_handler(M :: <seealso marker="#type-emgr_ref">emgr_ref()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Handler :: <seealso marker="#type-handler">handler()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Args :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>Args</anno>
  <anno>Handler</anno>
  <anno>M</anno>
</spec>
<spec>
  <name>call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>call(M :: <seealso marker="#type-emgr_ref">emgr_ref()</seealso>, Handler :: <seealso marker="#type-handler">handler()</seealso>, Query :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>Handler</anno>
  <anno>M</anno>
  <anno>Query</anno>
</spec>
<spec>
  <name>call</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>call(M :: <seealso marker="#type-emgr_ref">emgr_ref()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Handler :: <seealso marker="#type-handler">handler()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Query :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: timeout()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>Handler</anno>
  <anno>M</anno>
  <anno>Query</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>delete_handler</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>delete_handler(M :: <seealso marker="#type-emgr_ref">emgr_ref()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Handler :: <seealso marker="#type-handler">handler()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Args :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>Args</anno>
  <anno>Handler</anno>
  <anno>M</anno>
</spec>
<spec>
  <name>format_status</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>init_it</name>
  <arity>6</arity>
  <contract/>
</spec>
<spec>
  <name>notify</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>notify(M :: <seealso marker="#type-emgr_ref">emgr_ref()</seealso>, Event :: term()) -&gt; ok</head></clause>
  </contract>
  <anno>Event</anno>
  <anno>M</anno>
</spec>
<spec>
  <name>start</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>start() -&gt; <seealso marker="#type-start_ret">start_ret()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>start</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>start(Name :: <seealso marker="#type-emgr_name">emgr_name()</seealso> | [<seealso marker="#type-option">option()</seealso>]) -&gt; <seealso marker="#type-start_ret">start_ret()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>start</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start(Name :: <seealso marker="#type-emgr_name">emgr_name()</seealso>, Options :: [<seealso marker="#type-option">option()</seealso>]) -&gt; <seealso marker="#type-start_ret">start_ret()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>start_link() -&gt; <seealso marker="#type-start_ret">start_ret()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>start_link</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>start_link(Name :: <seealso marker="#type-emgr_name">emgr_name()</seealso> | [<seealso marker="#type-option">option()</seealso>]) -&gt; <seealso marker="#type-start_ret">start_ret()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start_link(Name :: <seealso marker="#type-emgr_name">emgr_name()</seealso>, Options :: [<seealso marker="#type-option">option()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-start_ret">start_ret()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>stop</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>stop(M :: <seealso marker="#type-emgr_ref">emgr_ref()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>M</anno>
</spec>
<spec>
  <name>stop</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>swap_handler</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>swap_handler(M :: <seealso marker="#type-emgr_ref">emgr_ref()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X2 :: {<seealso marker="#type-handler">handler()</seealso>, term()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X3 :: {<seealso marker="#type-handler">handler()</seealso>, term()}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, term()}</head></clause>
  </contract>
  <anno>M</anno>
  <anno>X2</anno>
  <anno>X3</anno>
</spec>
<spec>
  <name>swap_sup_handler</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>swap_sup_handler(M :: <seealso marker="#type-emgr_ref">emgr_ref()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X2 :: {<seealso marker="#type-handler">handler()</seealso>, term()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X3 :: {<seealso marker="#type-handler">handler()</seealso>, term()}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, term()}</head></clause>
  </contract>
  <anno>M</anno>
  <anno>X2</anno>
  <anno>X3</anno>
</spec>
<spec>
  <name>sync_notify</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>sync_notify(M :: <seealso marker="#type-emgr_ref">emgr_ref()</seealso>, Event :: term()) -&gt; ok</head></clause>
  </contract>
  <anno>Event</anno>
  <anno>M</anno>
</spec>
<spec>
  <name>system_code_change</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>system_continue</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>system_get_state</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>system_replace_state</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>system_terminate</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>system_terminate(Reason :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Parent :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Debug :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X4 :: [term()]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_return()</head></clause>
  </contract>
  <anno>Debug</anno>
  <anno>Parent</anno>
  <anno>Reason</anno>
  <anno>X4</anno>
</spec>
<spec>
  <name>wake_hib</name>
  <arity>5</arity>
  <contract/>
</spec>
<spec>
  <name>which_handlers</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>which_handlers(M :: <seealso marker="#type-emgr_ref">emgr_ref()</seealso>) -&gt; [<seealso marker="#type-handler">handler()</seealso>]</head></clause>
  </contract>
  <anno>M</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:19.</timestamp>
</module>