<module name="proplists">
<type>
  <name>property</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-property">property()</marker> = atom() | tuple()</typehead></typedecl>
</type>
<type>
  <name>proplist</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-proplist">proplist()</marker> = [<seealso marker="#type-property">property()</seealso>]</typehead></typedecl>
</type>
<spec>
  <name>append_values</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>append_values(Key, ListIn) -&gt; ListOut</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>ListIn</typename><string>ListIn = ListOut = [term()]</string></subtype>
        <subtype><typename>ListOut</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>ListIn</anno>
  <anno>ListOut</anno>
</spec>
<spec>
  <name>compact</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>compact(ListIn) -&gt; ListOut</head>
      <guard>
        <subtype><typename>ListIn</typename><string>ListIn = ListOut = [<seealso marker="#type-property">property()</seealso>]</string></subtype>
        <subtype><typename>ListOut</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>ListIn</anno>
  <anno>ListOut</anno>
</spec>
<spec>
  <name>delete</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>delete(Key, List) -&gt; List</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>List</typename><string>List = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>expand</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>expand(Expansions, ListIn) -&gt; ListOut</head>
      <guard>
        <subtype><typename>Expansions</typename><string>Expansions = [{Property :: <seealso marker="#type-property">property()</seealso>, Expansion :: [term()]}]</string></subtype>
        <subtype><typename>ListIn</typename><string>ListIn = ListOut = [term()]</string></subtype>
        <subtype><typename>ListOut</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Expansion</anno>
  <anno>Expansions</anno>
  <anno>ListIn</anno>
  <anno>ListOut</anno>
  <anno>Property</anno>
</spec>
<spec>
  <name>get_all_values</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get_all_values(Key, List) -&gt; [term()]</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>List</typename><string>List = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>get_bool</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get_bool(Key, List) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>List</typename><string>List = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>get_keys</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_keys(List) -&gt; [term()]</head>
      <guard>
        <subtype><typename>List</typename><string>List = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>get_value</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get_value(Key, List) -&gt; term()</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>List</typename><string>List = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>get_value</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>get_value(Key, List, Default) -&gt; term()</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>List</typename><string>List = [term()]</string></subtype>
        <subtype><typename>Default</typename><string>Default = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Default</anno>
  <anno>Key</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>is_defined</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_defined(Key, List) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>List</typename><string>List = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>lookup</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lookup(Key, List) -&gt; none | tuple()</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>List</typename><string>List = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>lookup_all</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lookup_all(Key, List) -&gt; [tuple()]</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>List</typename><string>List = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>normalize</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>normalize(ListIn, Stages) -&gt; ListOut</head>
      <guard>
        <subtype><typename>ListIn</typename><string>ListIn = [term()]</string></subtype>
        <subtype><typename>Stages</typename><string>Stages = [Operation]</string></subtype>
        <subtype><typename>Operation</typename><string>Operation = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{aliases, Aliases} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{negations, Negations} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{expand, Expansions}</string></subtype>
        <subtype><typename>Aliases</typename><string>Aliases = Negations = [{Key, Key}]</string></subtype>
        <subtype><typename>Negations</typename><string/></subtype>
        <subtype><typename>Expansions</typename><string>Expansions = [{Property :: <seealso marker="#type-property">property()</seealso>, Expansion :: [term()]}]</string></subtype>
        <subtype><typename>ListOut</typename><string>ListOut = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Aliases</anno>
  <anno>Expansion</anno>
  <anno>Expansions</anno>
  <anno>Key</anno>
  <anno>ListIn</anno>
  <anno>ListOut</anno>
  <anno>Negations</anno>
  <anno>Operation</anno>
  <anno>Property</anno>
  <anno>Stages</anno>
</spec>
<spec>
  <name>property</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>property(PropertyIn) -&gt; PropertyOut</head>
      <guard>
        <subtype><typename>PropertyIn</typename><string>PropertyIn = PropertyOut = <seealso marker="#type-property">property()</seealso></string></subtype>
        <subtype><typename>PropertyOut</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>PropertyIn</anno>
  <anno>PropertyOut</anno>
</spec>
<spec>
  <name>property</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>property(Key, Value) -&gt; Property</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Value = term()</string></subtype>
        <subtype><typename>Value</typename><string/></subtype>
        <subtype><typename>Property</typename><string>Property = atom() | {term(), term()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Property</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>split</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>split(List, Keys) -&gt; {Lists, Rest}</head>
      <guard>
        <subtype><typename>List</typename><string>List = Keys = [term()]</string></subtype>
        <subtype><typename>Keys</typename><string/></subtype>
        <subtype><typename>Lists</typename><string>Lists = [[term()]]</string></subtype>
        <subtype><typename>Rest</typename><string>Rest = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Keys</anno>
  <anno>List</anno>
  <anno>Lists</anno>
  <anno>Rest</anno>
</spec>
<spec>
  <name>substitute_aliases</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>substitute_aliases(Aliases, ListIn) -&gt; ListOut</head>
      <guard>
        <subtype><typename>Aliases</typename><string>Aliases = [{Key, Key}]</string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>ListIn</typename><string>ListIn = ListOut = [term()]</string></subtype>
        <subtype><typename>ListOut</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Aliases</anno>
  <anno>Key</anno>
  <anno>ListIn</anno>
  <anno>ListOut</anno>
</spec>
<spec>
  <name>substitute_negations</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>substitute_negations(Negations, ListIn) -&gt; ListOut</head>
      <guard>
        <subtype><typename>Negations</typename><string>Negations = [{Key1, Key2}]</string></subtype>
        <subtype><typename>Key1</typename><string>Key1 = Key2 = term()</string></subtype>
        <subtype><typename>Key2</typename><string/></subtype>
        <subtype><typename>ListIn</typename><string>ListIn = ListOut = [term()]</string></subtype>
        <subtype><typename>ListOut</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key1</anno>
  <anno>Key2</anno>
  <anno>ListIn</anno>
  <anno>ListOut</anno>
  <anno>Negations</anno>
</spec>
<spec>
  <name>unfold</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>unfold(ListIn) -&gt; ListOut</head>
      <guard>
        <subtype><typename>ListIn</typename><string>ListIn = ListOut = [term()]</string></subtype>
        <subtype><typename>ListOut</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>ListIn</anno>
  <anno>ListOut</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:24.</timestamp>
</module>