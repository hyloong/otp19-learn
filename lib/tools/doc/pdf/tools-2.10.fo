<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>Tools</fo:bookmark-title>
      <fo:bookmark internal-destination="idp890768" starting-state="hide">
        <fo:bookmark-title>Tools User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp845888" starting-state="hide">
          <fo:bookmark-title>cover</fo:bookmark-title>
          <fo:bookmark internal-destination="idp842864" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp840208" starting-state="hide">
            <fo:bookmark-title>Getting Started With Cover</fo:bookmark-title>
            <fo:bookmark internal-destination="idp839520" starting-state="hide">
              <fo:bookmark-title>Example</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp664272" starting-state="hide">
              <fo:bookmark-title>Preparation</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp785488" starting-state="hide">
              <fo:bookmark-title>Coverage Analysis</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp436560" starting-state="hide">
              <fo:bookmark-title>Call Statistics</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp832112" starting-state="hide">
              <fo:bookmark-title>Analysis to File</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp508880" starting-state="hide">
              <fo:bookmark-title>Conclusion</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp668720" starting-state="hide">
            <fo:bookmark-title>Miscellaneous</fo:bookmark-title>
            <fo:bookmark internal-destination="idp459248" starting-state="hide">
              <fo:bookmark-title>Performance</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp435040" starting-state="hide">
              <fo:bookmark-title>Executable Lines</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp795856" starting-state="hide">
              <fo:bookmark-title>Code Loading Mechanism</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp664688" starting-state="hide">
          <fo:bookmark-title>cprof - The Call Count Profiler</fo:bookmark-title>
          <fo:bookmark internal-destination="idp546192" starting-state="hide">
            <fo:bookmark-title>Example: Background work</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp260432" starting-state="hide">
            <fo:bookmark-title>Example: One module</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp263072" starting-state="hide">
            <fo:bookmark-title>Example: In the code</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp345408" starting-state="hide">
          <fo:bookmark-title>The Erlang mode for Emacs</fo:bookmark-title>
          <fo:bookmark internal-destination="idp462336" starting-state="hide">
            <fo:bookmark-title>Purpose</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp23024" starting-state="hide">
            <fo:bookmark-title>Pre-requisites</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp24336" starting-state="hide">
            <fo:bookmark-title>Elisp</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp25872" starting-state="hide">
            <fo:bookmark-title>Setup on UNIX</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp740176" starting-state="hide">
            <fo:bookmark-title>Setup on Windows </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp824512" starting-state="hide">
            <fo:bookmark-title>Indentation</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp916224" starting-state="hide">
            <fo:bookmark-title>Editing</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp800480" starting-state="hide">
            <fo:bookmark-title>Syntax highlighting</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp803328" starting-state="hide">
            <fo:bookmark-title>Tags</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp807296" starting-state="hide">
            <fo:bookmark-title>Etags</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp747024" starting-state="hide">
            <fo:bookmark-title>Shell</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp753872" starting-state="hide">
            <fo:bookmark-title>Compilation</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp847440" starting-state="hide">
          <fo:bookmark-title>fprof - The File Trace Profiler</fo:bookmark-title>
          <fo:bookmark internal-destination="idp863056" starting-state="hide">
            <fo:bookmark-title>Profiling from the source code</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp981920" starting-state="hide">
            <fo:bookmark-title>Profiling a function</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp984976" starting-state="hide">
            <fo:bookmark-title>Immediate profiling</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp991856" starting-state="hide">
          <fo:bookmark-title>lcnt - The Lock Profiler</fo:bookmark-title>
          <fo:bookmark internal-destination="idp999552" starting-state="hide">
            <fo:bookmark-title> Enabling lock-counting </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1004464" starting-state="hide">
            <fo:bookmark-title>Getting started</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1012512" starting-state="hide">
            <fo:bookmark-title> Example of usage </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1023296" starting-state="hide">
            <fo:bookmark-title> Example with Mnesia Transaction Benchmark </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1039744" starting-state="hide">
            <fo:bookmark-title> Deciphering the output </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1041824" starting-state="hide">
            <fo:bookmark-title>See Also</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1047648" starting-state="hide">
          <fo:bookmark-title>Xref - The Cross Reference Tool</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1054896" starting-state="hide">
            <fo:bookmark-title>Module Check</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1064576" starting-state="hide">
            <fo:bookmark-title>Predefined Analysis</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1100944" starting-state="hide">
            <fo:bookmark-title>Expressions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1139152" starting-state="hide">
            <fo:bookmark-title>Graph Analysis</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp75632" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp2721360" starting-state="hide">
          <fo:bookmark-title>cover</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2688784" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2685296" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2681808" starting-state="hide">
            <fo:bookmark-title>compile/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2681648" starting-state="hide">
            <fo:bookmark-title>compile/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2681488" starting-state="hide">
            <fo:bookmark-title>compile_module/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2680416" starting-state="hide">
            <fo:bookmark-title>compile_module/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2668016" starting-state="hide">
            <fo:bookmark-title>compile_directory/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2667312" starting-state="hide">
            <fo:bookmark-title>compile_directory/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2666928" starting-state="hide">
            <fo:bookmark-title>compile_directory/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2652016" starting-state="hide">
            <fo:bookmark-title>compile_beam/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2640912" starting-state="hide">
            <fo:bookmark-title>compile_beam_directory/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2640496" starting-state="hide">
            <fo:bookmark-title>compile_beam_directory/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2632336" starting-state="hide">
            <fo:bookmark-title>analyse/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2631904" starting-state="hide">
            <fo:bookmark-title>analyse/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2631456" starting-state="hide">
            <fo:bookmark-title>analyse/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2631024" starting-state="hide">
            <fo:bookmark-title>analyse/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2630592" starting-state="hide">
            <fo:bookmark-title>analyse/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2630160" starting-state="hide">
            <fo:bookmark-title>analyse/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2629728" starting-state="hide">
            <fo:bookmark-title>analyse/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2629296" starting-state="hide">
            <fo:bookmark-title>analyse/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2611600" starting-state="hide">
            <fo:bookmark-title>analyse_to_file/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2611216" starting-state="hide">
            <fo:bookmark-title>analyse_to_file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2538448" starting-state="hide">
            <fo:bookmark-title>analyse_to_file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2582416" starting-state="hide">
            <fo:bookmark-title>analyse_to_file/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2591584" starting-state="hide">
            <fo:bookmark-title>async_analyse_to_file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2591088" starting-state="hide">
            <fo:bookmark-title>async_analyse_to_file/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2590240" starting-state="hide">
            <fo:bookmark-title>async_analyse_to_file/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2590496" starting-state="hide">
            <fo:bookmark-title>async_analyse_to_file/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2582048" starting-state="hide">
            <fo:bookmark-title>modules/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2579168" starting-state="hide">
            <fo:bookmark-title>imported_modules/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2575840" starting-state="hide">
            <fo:bookmark-title>imported/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2572080" starting-state="hide">
            <fo:bookmark-title>which_nodes/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2569440" starting-state="hide">
            <fo:bookmark-title>is_compiled/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2556128" starting-state="hide">
            <fo:bookmark-title>reset/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2561488" starting-state="hide">
            <fo:bookmark-title>reset/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2556288" starting-state="hide">
            <fo:bookmark-title>export/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2555392" starting-state="hide">
            <fo:bookmark-title>export/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2547424" starting-state="hide">
            <fo:bookmark-title>import/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2539120" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2536576" starting-state="hide">
            <fo:bookmark-title>stop/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2533152" starting-state="hide">
            <fo:bookmark-title>flush/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2520496" starting-state="hide">
          <fo:bookmark-title>cprof</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2517024" starting-state="hide">
            <fo:bookmark-title>analyse/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2516064" starting-state="hide">
            <fo:bookmark-title>analyse/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2515888" starting-state="hide">
            <fo:bookmark-title>analyse/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2515440" starting-state="hide">
            <fo:bookmark-title>analyse/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2490704" starting-state="hide">
            <fo:bookmark-title>pause/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2486240" starting-state="hide">
            <fo:bookmark-title>pause/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2485744" starting-state="hide">
            <fo:bookmark-title>pause/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2485296" starting-state="hide">
            <fo:bookmark-title>pause/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2477328" starting-state="hide">
            <fo:bookmark-title>restart/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2476720" starting-state="hide">
            <fo:bookmark-title>restart/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2476176" starting-state="hide">
            <fo:bookmark-title>restart/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2475568" starting-state="hide">
            <fo:bookmark-title>restart/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2467232" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2462896" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2462448" starting-state="hide">
            <fo:bookmark-title>start/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2462032" starting-state="hide">
            <fo:bookmark-title>start/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2453072" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2448576" starting-state="hide">
            <fo:bookmark-title>stop/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2443472" starting-state="hide">
            <fo:bookmark-title>stop/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2448144" starting-state="hide">
            <fo:bookmark-title>stop/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2430720" starting-state="hide">
          <fo:bookmark-title>eprof</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1661984" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1664320" starting-state="hide">
            <fo:bookmark-title>start_profiling/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1663504" starting-state="hide">
            <fo:bookmark-title>start_profiling/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1662576" starting-state="hide">
            <fo:bookmark-title>start_profiling/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2404064" starting-state="hide">
            <fo:bookmark-title>stop_profiling/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2399968" starting-state="hide">
            <fo:bookmark-title>profile/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2399840" starting-state="hide">
            <fo:bookmark-title>profile/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2399712" starting-state="hide">
            <fo:bookmark-title>profile/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2399296" starting-state="hide">
            <fo:bookmark-title>profile/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2398224" starting-state="hide">
            <fo:bookmark-title>profile/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2397680" starting-state="hide">
            <fo:bookmark-title>profile/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2397552" starting-state="hide">
            <fo:bookmark-title>profile/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2397392" starting-state="hide">
            <fo:bookmark-title>profile/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2381200" starting-state="hide">
            <fo:bookmark-title>analyze/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2380816" starting-state="hide">
            <fo:bookmark-title>analyze/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2380400" starting-state="hide">
            <fo:bookmark-title>analyze/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2372080" starting-state="hide">
            <fo:bookmark-title>log/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2367216" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2358592" starting-state="hide">
          <fo:bookmark-title>erlang.el</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2183440" starting-state="hide">
          <fo:bookmark-title>fprof</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2306976" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2302320" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2299440" starting-state="hide">
            <fo:bookmark-title>stop/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2289536" starting-state="hide">
            <fo:bookmark-title>apply/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2283504" starting-state="hide">
            <fo:bookmark-title>apply/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2278992" starting-state="hide">
            <fo:bookmark-title>apply/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2159408" starting-state="hide">
            <fo:bookmark-title>apply/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2152528" starting-state="hide">
            <fo:bookmark-title>trace/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2148080" starting-state="hide">
            <fo:bookmark-title>trace/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1680048" starting-state="hide">
            <fo:bookmark-title>trace/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1674848" starting-state="hide">
            <fo:bookmark-title>trace/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1670784" starting-state="hide">
            <fo:bookmark-title>trace/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1666640" starting-state="hide">
            <fo:bookmark-title>trace/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp370816" starting-state="hide">
            <fo:bookmark-title>trace/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2000432" starting-state="hide">
            <fo:bookmark-title>profile/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp385824" starting-state="hide">
            <fo:bookmark-title>profile/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp381088" starting-state="hide">
            <fo:bookmark-title>profile/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idm23728" starting-state="hide">
            <fo:bookmark-title>profile/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp492368" starting-state="hide">
            <fo:bookmark-title>profile/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2316064" starting-state="hide">
            <fo:bookmark-title>analyse/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2320064" starting-state="hide">
            <fo:bookmark-title>analyse/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2244336" starting-state="hide">
            <fo:bookmark-title>analyse/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2248784" starting-state="hide">
            <fo:bookmark-title>analyse/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2253616" starting-state="hide">
            <fo:bookmark-title>analyse/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3390880" starting-state="hide">
          <fo:bookmark-title>instrument</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3406400" starting-state="hide">
            <fo:bookmark-title>allocator_descr/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3413440" starting-state="hide">
            <fo:bookmark-title>block_header_size/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3417856" starting-state="hide">
            <fo:bookmark-title>class_descr/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3424896" starting-state="hide">
            <fo:bookmark-title>descr/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3431424" starting-state="hide">
            <fo:bookmark-title>holes/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3436320" starting-state="hide">
            <fo:bookmark-title>mem_limits/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3441584" starting-state="hide">
            <fo:bookmark-title>memory_data/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3447376" starting-state="hide">
            <fo:bookmark-title>memory_status/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3455568" starting-state="hide">
            <fo:bookmark-title>read_memory_data/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3461328" starting-state="hide">
            <fo:bookmark-title>read_memory_status/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3487216" starting-state="hide">
            <fo:bookmark-title>sort/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3492416" starting-state="hide">
            <fo:bookmark-title>store_memory_data/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3499168" starting-state="hide">
            <fo:bookmark-title>store_memory_status/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3505504" starting-state="hide">
            <fo:bookmark-title>sum_blocks/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3510128" starting-state="hide">
            <fo:bookmark-title>type_descr/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3518288" starting-state="hide">
            <fo:bookmark-title>type_no_range/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3537952" starting-state="hide">
          <fo:bookmark-title>lcnt</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3547440" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3551200" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3553472" starting-state="hide">
            <fo:bookmark-title>collect/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3556288" starting-state="hide">
            <fo:bookmark-title>collect/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3560880" starting-state="hide">
            <fo:bookmark-title>clear/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3563696" starting-state="hide">
            <fo:bookmark-title>clear/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3567184" starting-state="hide">
            <fo:bookmark-title>conflicts/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3570000" starting-state="hide">
            <fo:bookmark-title>conflicts/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3576528" starting-state="hide">
            <fo:bookmark-title>locations/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3579664" starting-state="hide">
            <fo:bookmark-title>locations/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3586208" starting-state="hide">
            <fo:bookmark-title>inspect/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3589024" starting-state="hide">
            <fo:bookmark-title>inspect/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3628208" starting-state="hide">
            <fo:bookmark-title>information/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3630576" starting-state="hide">
            <fo:bookmark-title>swap_pid_keys/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3634640" starting-state="hide">
            <fo:bookmark-title>load/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3637840" starting-state="hide">
            <fo:bookmark-title>save/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3642832" starting-state="hide">
            <fo:bookmark-title>apply/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3645968" starting-state="hide">
            <fo:bookmark-title>apply/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3650432" starting-state="hide">
            <fo:bookmark-title>apply/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3655344" starting-state="hide">
            <fo:bookmark-title>pid/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3658176" starting-state="hide">
            <fo:bookmark-title>pid/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3662272" starting-state="hide">
            <fo:bookmark-title>port/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3665088" starting-state="hide">
            <fo:bookmark-title>port/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3670288" starting-state="hide">
            <fo:bookmark-title>rt_collect/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3673440" starting-state="hide">
            <fo:bookmark-title>rt_collect/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3676672" starting-state="hide">
            <fo:bookmark-title>rt_clear/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3679808" starting-state="hide">
            <fo:bookmark-title>rt_clear/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3683264" starting-state="hide">
            <fo:bookmark-title>rt_opt/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3686448" starting-state="hide">
            <fo:bookmark-title>rt_opt/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3702592" starting-state="hide">
          <fo:bookmark-title>make</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3705920" starting-state="hide">
            <fo:bookmark-title>all/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3706384" starting-state="hide">
            <fo:bookmark-title>all/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3723696" starting-state="hide">
            <fo:bookmark-title>files/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3724160" starting-state="hide">
            <fo:bookmark-title>files/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3754432" starting-state="hide">
          <fo:bookmark-title>tags</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3757936" starting-state="hide">
            <fo:bookmark-title>file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3761968" starting-state="hide">
            <fo:bookmark-title>files/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3765184" starting-state="hide">
            <fo:bookmark-title>dir/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3768400" starting-state="hide">
            <fo:bookmark-title>dirs/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3771632" starting-state="hide">
            <fo:bookmark-title>subdir/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3775744" starting-state="hide">
            <fo:bookmark-title>subdirs/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3779920" starting-state="hide">
            <fo:bookmark-title>root/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3807936" starting-state="hide">
          <fo:bookmark-title>xref</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4092064" starting-state="hide">
            <fo:bookmark-title>add_application/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4103472" starting-state="hide">
            <fo:bookmark-title>add_directory/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4115104" starting-state="hide">
            <fo:bookmark-title>add_module/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4125200" starting-state="hide">
            <fo:bookmark-title>add_release/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4136880" starting-state="hide">
            <fo:bookmark-title>analyze/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4176112" starting-state="hide">
            <fo:bookmark-title>d/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4191040" starting-state="hide">
            <fo:bookmark-title>forget/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4191488" starting-state="hide">
            <fo:bookmark-title>forget/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4198240" starting-state="hide">
            <fo:bookmark-title>format_error/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4203408" starting-state="hide">
            <fo:bookmark-title>get_default/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4203872" starting-state="hide">
            <fo:bookmark-title>get_default/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4208944" starting-state="hide">
            <fo:bookmark-title>get_library_path/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4213312" starting-state="hide">
            <fo:bookmark-title>info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4213760" starting-state="hide">
            <fo:bookmark-title>info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4214240" starting-state="hide">
            <fo:bookmark-title>info/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4297264" starting-state="hide">
            <fo:bookmark-title>m/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4297760" starting-state="hide">
            <fo:bookmark-title>m/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4314064" starting-state="hide">
            <fo:bookmark-title>q/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4340256" starting-state="hide">
            <fo:bookmark-title>remove_application/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4346336" starting-state="hide">
            <fo:bookmark-title>remove_module/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4353072" starting-state="hide">
            <fo:bookmark-title>remove_release/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4359152" starting-state="hide">
            <fo:bookmark-title>replace_application/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4365504" starting-state="hide">
            <fo:bookmark-title>replace_module/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4375120" starting-state="hide">
            <fo:bookmark-title>set_default/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4375616" starting-state="hide">
            <fo:bookmark-title>set_default/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4388400" starting-state="hide">
            <fo:bookmark-title>set_library_path/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4401456" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4408960" starting-state="hide">
            <fo:bookmark-title>start/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4415968" starting-state="hide">
            <fo:bookmark-title>stop/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4419824" starting-state="hide">
            <fo:bookmark-title>update/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4428416" starting-state="hide">
            <fo:bookmark-title>variables/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">Tools</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">Tools 2.10</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            Tools</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            Tools | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp890768" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      Tools User's Guide</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">Tools</fo:inline> application contains a number of stand-alone
      tools, which are useful when developing Erlang programs.</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">cover</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A coverage analysis tool for Erlang.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">cprof</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A profiling tool that shows how many
       times each function is called. Uses a kind of local call trace
       breakpoints containing counters to achieve very low runtime
       performance degradation.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">emacs - (erlang.el and erlang-start.el)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">This package provides support
       for the programming language Erlang in Emacs. The package provides an
       editing mode with lots of bells and whistles, compilation
       support, and it makes it possible for the user to start Erlang
       shells that run inside Emacs.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">eprof</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A time profiling tool; measure how time is used in Erlang
       programs. Erlang programs. Predecessor of <fo:inline font-weight="bold">fprof</fo:inline> (see below).</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">fprof</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Another Erlang profiler; measure how time is used in your
       Erlang programs. Uses trace to file to minimize runtime
       performance impact, and displays time for calling and called 
       functions.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">instrument</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Utility functions for obtaining and analysing resource usage
       in an instrumented Erlang runtime system.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">lcnt</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A lock profiling tool for the Erlang runtime system.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">make</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A make utility for Erlang similar to UNIX make.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">tags</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A tool for generating Emacs TAGS files from Erlang source
       files.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">xref</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A cross reference tool. Can be used to check dependencies 
       between functions, modules, applications and releases.</fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp845888" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  cover</fo:marker>1.1  cover</fo:block><fo:block id="idp842864" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">cover</fo:inline> provides a set of functions for coverage
      analysis of Erlang programs, counting how many times each
      <fo:inline font-style="italic">executable line</fo:inline> is executed.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Coverage analysis can be used to verify test cases, making sure all
      relevant code is covered, and may be helpful when looking for
      bottlenecks in the code.</fo:block>
  <fo:block id="idp840208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Getting Started With Cover</fo:block>
    

    <fo:block id="idp839520" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Example</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assume that a test case for the following program should be
        verified:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(channel).
-behaviour(gen_server).

-export([start_link/0,stop/0]).
-export([alloc/0,free/1]). % client interface
-export([init/1,handle_call/3,terminate/2]). % callback functions

start_link() -&gt;
    gen_server:start_link({local,channel},channel,[],[]).

stop() -&gt;
    gen_server:call(channel,stop).

%%%-Client interface functions-------------------------------------------

alloc() -&gt;
    gen_server:call(channel,alloc).

free(Channel) -&gt;
    gen_server:call(channel,{free,Channel}).

%%%-gen_server callback functions----------------------------------------

init(_Arg) -&gt;
    {ok,channels()}.

handle_call(stop,Client,Channels) -&gt;
    {stop,normal,ok,Channels};

handle_call(alloc,Client,Channels) -&gt;
    {Ch,Channels2} = alloc(Channels),
    {reply,{ok,Ch},Channels2};

handle_call({free,Channel},Client,Channels) -&gt;
    Channels2 = free(Channel,Channels),
    {reply,ok,Channels2}.

terminate(_Reason,Channels) -&gt;
    ok.

%%%-Internal functions---------------------------------------------------

channels() -&gt;
    [ch1,ch2,ch3].

alloc([Channel|Channels]) -&gt;
    {Channel,Channels};
alloc([]) -&gt;
    false.

free(Channel,Channels) -&gt;
    [Channel|Channels].</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The test case is implemented as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(test).
-export([s/0]).

s() -&gt;
    {ok,Pid} = channel:start_link(),
    {ok,Ch1} = channel:alloc(),
    ok = channel:free(Ch1),
    ok = channel:stop().</fo:block>
    

    <fo:block id="idp664272" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Preparation</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First of all, Cover must be started. This spawns a process which
        owns the Cover database where all coverage data will be stored.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">cover:start().</fo:inline>
{ok,&lt;0.30.0&gt;}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To include other nodes in the coverage analysis, use
        <fo:inline font-family="monospace">start/1</fo:inline>. All cover compiled modules will then be loaded
        on all nodes, and data from all nodes will be summed up when
        analysing. For simplicity this example only involves the
        current node.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before any analysis can take place, the involved modules must be
        <fo:inline font-weight="bold">Cover compiled</fo:inline>. This means that some extra information is
        added to the module before it is compiled into a binary which then
        is <fo:inline font-style="italic">loaded</fo:inline>. The source file of
        the module is not affected and no <fo:inline font-family="monospace">.beam</fo:inline> file is created.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">cover:compile_module(channel).</fo:inline>
{ok,channel}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each time a function in the Cover compiled module <fo:inline font-family="monospace">channel</fo:inline>
        is called, information about the call will be added to the Cover
        database. Run the test case:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; <fo:inline font-weight="bold">test:s().</fo:inline>
ok</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Cover analysis is performed by examining the contents of the Cover
        database. The output is determined by two parameters, <fo:inline font-family="monospace">Level</fo:inline>
        and <fo:inline font-family="monospace">Analysis</fo:inline>. <fo:inline font-family="monospace">Analysis</fo:inline> is either <fo:inline font-family="monospace">coverage</fo:inline> or
        <fo:inline font-family="monospace">calls</fo:inline> and determines the type of the analysis. <fo:inline font-family="monospace">Level</fo:inline>
        is either <fo:inline font-family="monospace">module</fo:inline>, <fo:inline font-family="monospace">function</fo:inline>, <fo:inline font-family="monospace">clause</fo:inline>, or
        <fo:inline font-family="monospace">line</fo:inline> and determines the level of the analysis.</fo:block>
    

    <fo:block id="idp785488" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Coverage Analysis</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Analysis of type <fo:inline font-family="monospace">coverage</fo:inline> is used to find out how much of
        the code has been executed and how much has not been executed.
        Coverage is represented by a tuple <fo:inline font-family="monospace">{Cov,NotCov}</fo:inline>, where
        <fo:inline font-family="monospace">Cov</fo:inline> is the number of executable lines that have been executed
        at least once and <fo:inline font-family="monospace">NotCov</fo:inline> is the number of executable lines
        that have not been executed.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the analysis is made on module level, the result is given for
        the entire module as a tuple <fo:inline font-family="monospace">{Module,{Cov,NotCov}}</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
4&gt; <fo:inline font-weight="bold">cover:analyse(channel,coverage,module).</fo:inline>
{ok,{channel,{14,1}}}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">channel</fo:inline>, the result shows that 14 lines in the module
        are covered but one line is not covered.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the analysis is made on function level, the result is given as
        a list of tuples <fo:inline font-family="monospace">{Function,{Cov,NotCov}}</fo:inline>, one for each
        function in the module. A function is specified by its module name,
        function name and arity:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
5&gt; <fo:inline font-weight="bold">cover:analyse(channel,coverage,function).</fo:inline>
{ok,[{{channel,start_link,0},{1,0}},
     {{channel,stop,0},{1,0}},
     {{channel,alloc,0},{1,0}},
     {{channel,free,1},{1,0}},
     {{channel,init,1},{1,0}},
     {{channel,handle_call,3},{5,0}},
     {{channel,terminate,2},{1,0}},
     {{channel,channels,0},{1,0}},
     {{channel,alloc,1},{1,1}},
     {{channel,free,2},{1,0}}]}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">channel</fo:inline>, the result shows that the uncovered line is in
        the function <fo:inline font-family="monospace">channel:alloc/1</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the analysis is made on clause level, the result is given as
        a list of tuples <fo:inline font-family="monospace">{Clause,{Cov,NotCov}}</fo:inline>, one for each
        function clause in the module. A clause is specified by its module
        name, function name, arity and position within the function
        definition:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
6&gt; <fo:inline font-weight="bold">cover:analyse(channel,coverage,clause).</fo:inline>
{ok,[{{channel,start_link,0,1},{1,0}},
     {{channel,stop,0,1},{1,0}},
     {{channel,alloc,0,1},{1,0}},
     {{channel,free,1,1},{1,0}},
     {{channel,init,1,1},{1,0}},
     {{channel,handle_call,3,1},{1,0}},
     {{channel,handle_call,3,2},{2,0}},
     {{channel,handle_call,3,3},{2,0}},
     {{channel,terminate,2,1},{1,0}},
     {{channel,channels,0,1},{1,0}},
     {{channel,alloc,1,1},{1,0}},
     {{channel,alloc,1,2},{0,1}},
     {{channel,free,2,1},{1,0}}]}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">channel</fo:inline>, the result shows that the uncovered line is in
        the second clause of <fo:inline font-family="monospace">channel:alloc/1</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Finally, if the analysis is made on line level, the result is given
        as a list of tuples <fo:inline font-family="monospace">{Line,{Cov,NotCov}}</fo:inline>, one for each
        executable line in the source code. A line is specified by its
        module name and line number.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
7&gt; <fo:inline font-weight="bold">cover:analyse(channel,coverage,line).</fo:inline>
{ok,[{{channel,9},{1,0}},
     {{channel,12},{1,0}},
     {{channel,17},{1,0}},
     {{channel,20},{1,0}},
     {{channel,25},{1,0}},
     {{channel,28},{1,0}},
     {{channel,31},{1,0}},
     {{channel,32},{1,0}},
     {{channel,35},{1,0}},
     {{channel,36},{1,0}},
     {{channel,39},{1,0}},
     {{channel,44},{1,0}},
     {{channel,47},{1,0}},
     {{channel,49},{0,1}},
     {{channel,52},{1,0}}]}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">channel</fo:inline>, the result shows that the uncovered line is
        line number 49.</fo:block>
    

    <fo:block id="idp436560" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Call Statistics</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Analysis of type <fo:inline font-family="monospace">calls</fo:inline> is used to find out how many times
        something has been called and is represented by an integer
        <fo:inline font-family="monospace">Calls</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the analysis is made on module level, the result is given as a
        tuple <fo:inline font-family="monospace">{Module,Calls}</fo:inline>. Here <fo:inline font-family="monospace">Calls</fo:inline> is the total number
        of calls to functions in the module:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
8&gt; <fo:inline font-weight="bold">cover:analyse(channel,calls,module).</fo:inline>
{ok,{channel,12}}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">channel</fo:inline>, the result shows that a total of twelve calls
        have been made to functions in the module.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the analysis is made on function level, the result is given as
        a list of tuples <fo:inline font-family="monospace">{Function,Calls}</fo:inline>. Here <fo:inline font-family="monospace">Calls</fo:inline> is
        the number of calls to each function:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
9&gt; <fo:inline font-weight="bold">cover:analyse(channel,calls,function).</fo:inline>
{ok,[{{channel,start_link,0},1},
     {{channel,stop,0},1},
     {{channel,alloc,0},1},
     {{channel,free,1},1},
     {{channel,init,1},1},
     {{channel,handle_call,3},3},
     {{channel,terminate,2},1},
     {{channel,channels,0},1},
     {{channel,alloc,1},1},
     {{channel,free,2},1}]}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">channel</fo:inline>, the result shows that <fo:inline font-family="monospace">handle_call/3</fo:inline> is
        the most called function in the module (three calls). All other
        functions have been called once.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the analysis is made on clause level, the result is given as
        a list of tuples <fo:inline font-family="monospace">{Clause,Calls}</fo:inline>. Here <fo:inline font-family="monospace">Calls</fo:inline> is
        the number of calls to each function clause:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
10&gt; <fo:inline font-weight="bold">cover:analyse(channel,calls,clause).</fo:inline>
{ok,[{{channel,start_link,0,1},1},
     {{channel,stop,0,1},1},
     {{channel,alloc,0,1},1},
     {{channel,free,1,1},1},
     {{channel,init,1,1},1},
     {{channel,handle_call,3,1},1},
     {{channel,handle_call,3,2},1},
     {{channel,handle_call,3,3},1},
     {{channel,terminate,2,1},1},
     {{channel,channels,0,1},1},
     {{channel,alloc,1,1},1},
     {{channel,alloc,1,2},0},
     {{channel,free,2,1},1}]}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">channel</fo:inline>, the result shows that all clauses have been
        called once, except the second clause of <fo:inline font-family="monospace">channel:alloc/1</fo:inline>
        which has not been called at all.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Finally, if the analysis is made on line level, the result is given
        as a list of tuples <fo:inline font-family="monospace">{Line,Calls}</fo:inline>. Here <fo:inline font-family="monospace">Calls</fo:inline> is 
        the number of times each line has been executed:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
11&gt; <fo:inline font-weight="bold">cover:analyse(channel,calls,line).</fo:inline>
{ok,[{{channel,9},1},
     {{channel,12},1},
     {{channel,17},1},
     {{channel,20},1},
     {{channel,25},1},
     {{channel,28},1},
     {{channel,31},1},
     {{channel,32},1},
     {{channel,35},1},
     {{channel,36},1},
     {{channel,39},1},
     {{channel,44},1},
     {{channel,47},1},
     {{channel,49},0},
     {{channel,52},1}]}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">channel</fo:inline>, the result shows that all lines have been
        executed once, except line number 49 which has not been executed at
        all.</fo:block>
    

    <fo:block id="idp832112" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Analysis to File</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A line level calls analysis of <fo:inline font-family="monospace">channel</fo:inline> can be written to
        a file using <fo:inline font-family="monospace">cover:analysis_to_file/1</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
12&gt; <fo:inline font-weight="bold">cover:analyse_to_file(channel).</fo:inline>
{ok,"channel.COVER.out"}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function creates a copy of <fo:inline font-family="monospace">channel.erl</fo:inline> where it for
        each executable line is specified how many times that line has been
        executed. The output file is called <fo:inline font-family="monospace">channel.COVER.out</fo:inline>.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
File generated from channel.erl by COVER 2001-05-21 at 11:16:38

****************************************************************************

        |  -module(channel).
        |  -behaviour(gen_server).
        |  
        |  -export([start_link/0,stop/0]).
        |  -export([alloc/0,free/1]). % client interface
        |  -export([init/1,handle_call/3,terminate/2]). % callback functions
        |  
        |  start_link() -&gt;
     1..|      gen_server:start_link({local,channel},channel,[],[]).
        |  
        |  stop() -&gt;
     1..|      gen_server:call(channel,stop).
        |  
        |  %%%-Client interface functions------------------------------------
        |  
        |  alloc() -&gt;
     1..|      gen_server:call(channel,alloc).
        |  
        |  free(Channel) -&gt;
     1..|      gen_server:call(channel,{free,Channel}).
        |  
        |  %%%-gen_server callback functions---------------------------------
        |  
        |  init(_Arg) -&gt;
     1..|      {ok,channels()}.
        |  
        |  handle_call(stop,Client,Channels) -&gt;
     1..|      {stop,normal,ok,Channels};
        |  
        |  handle_call(alloc,Client,Channels) -&gt;
     1..|      {Ch,Channels2} = alloc(Channels),
     1..|      {reply,{ok,Ch},Channels2};
        |  
        |  handle_call({free,Channel},Client,Channels) -&gt;
     1..|      Channels2 = free(Channel,Channels),
     1..|      {reply,ok,Channels2}.
        |  
        |  terminate(_Reason,Channels) -&gt;
     1..|      ok.
        |  
        |  %%%-Internal functions--------------------------------------------
        |  
        |  channels() -&gt;
     1..|      [ch1,ch2,ch3].
        |  
        |  alloc([Channel|Channels]) -&gt;
     1..|      {Channel,Channels};
        |  alloc([]) -&gt;
     0..|      false.
        |  
        |  free(Channel,Channels) -&gt;
     1..|      [Channel|Channels].</fo:block>
    

    <fo:block id="idp508880" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Conclusion</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By looking at the results from the analyses, it can be deducted
        that the test case does not cover the case when all channels are
        allocated and <fo:inline font-family="monospace">test.erl</fo:inline> should be extended accordingly.        <fo:block/>

        Incidentally, when the test case is corrected a bug in <fo:inline font-family="monospace">channel</fo:inline>
        should indeed be discovered.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the Cover analysis is ready, Cover is stopped and all Cover
        compiled modules are <fo:inline font-style="italic">unloaded</fo:inline>.
        The code for <fo:inline font-family="monospace">channel</fo:inline> is now loaded as usual from a
        <fo:inline font-family="monospace">.beam</fo:inline> file in the current path.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
13&gt; <fo:inline font-weight="bold">code:which(channel).</fo:inline>
cover_compiled
14&gt; <fo:inline font-weight="bold">cover:stop().</fo:inline>
ok
15&gt; <fo:inline font-weight="bold">code:which(channel).</fo:inline>
"./channel.beam"</fo:block>
    
  <fo:block id="idp668720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.3 
      Miscellaneous</fo:block>
    

    <fo:block id="idp459248" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Performance</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Execution of code in Cover compiled modules is slower and more
        memory consuming than for regularly compiled modules. As the Cover
        database contains information about each executable line in each
        Cover compiled module, performance decreases proportionally to
        the size and number of the Cover compiled modules.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To improve performance when analysing cover results it is possible
	to do multiple calls to <fo:inline font-style="italic">analyse</fo:inline>
	and <fo:inline font-style="italic">analyse_to_file</fo:inline>
	at once. You can also use the 
	<fo:inline font-style="italic">async_analyse_to_file</fo:inline> 
	convenience function.
      </fo:block>
    

    <fo:block id="idp435040" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Executable Lines</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Cover uses the concept of <fo:inline font-weight="bold">executable lines</fo:inline>, which is lines
        of code containing an executable expression such as a matching or
        a function call. A blank line or a line containing a comment,
        function head or pattern in a <fo:inline font-family="monospace">case</fo:inline>- or <fo:inline font-family="monospace">receive</fo:inline>
        statement is not executable.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the example below, lines number 2,4,6,8 and 11 are executable
        lines:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1: is_loaded(Module,Compiled) -&gt;
2:   case get_file(Module,Compiled) of
3:     {ok,File} -&gt;
4:       case code:which(Module) of
5:         ?TAG -&gt;
6:           {loaded,File};
7:         _ -&gt;
8:           unloaded
9:       end;
10:    false -&gt;
11:      false
12:  end.</fo:block>
    

    <fo:block id="idp795856" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Code Loading Mechanism</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a module is Cover compiled, it is also loaded using the normal
        code loading mechanism of Erlang. This means that if a Cover
        compiled module is re-loaded during a Cover session, for example
        using <fo:inline font-family="monospace">c(Module)</fo:inline>, it will no longer be Cover compiled.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use <fo:inline font-family="monospace">cover:is_compiled/1</fo:inline> or <fo:inline font-family="monospace">code:which/1</fo:inline> to see if
        a module is Cover compiled (and still loaded) or not.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When Cover is stopped, all Cover compiled modules are unloaded.</fo:block>
    
  <fo:block id="idp664688" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  cprof - The Call Count Profiler</fo:marker>1.2  cprof - The Call Count Profiler</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">cprof</fo:inline> is a profiling tool that can be used to get a picture of
    how often different functions in the system are called.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">cprof</fo:inline> uses breakpoints similar to local call trace,
    but containing counters, to collect profiling
    data. Therfore there is no need for special compilation of any
    module to be profiled. 
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">cprof</fo:inline> presents all profiled modules in decreasing total
    call count order, and for each module presents all profiled
    functions also in decreasing call count order. A call count limit
    can be specified to filter out all functions below the limit.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Profiling is done in the following steps:</fo:block><fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cprof:start/0..3</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em">Starts profiling with zeroed call counters for specified
     functions by setting call count breakpoints on them. </fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Mod:Fun()</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em">Runs the code to be profiled.</fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cprof:pause/0..3</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em">Pauses the call counters for specified functions. This minimises
     the impact of code running in the background or in the shell
     that disturbs the profiling. Call counters are automatically
     paused when they  "hit the ceiling" of the host machine word
     size. For a 32 bit host the maximum counter value is
     2147483647.</fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cprof:analyse/0..2</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em">Collects call counters and computes the result.</fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cprof:restart/0..3</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em">Restarts the call counters from zero for specified
     functions. Can be used to collect a new set of counters without 
     having to stop and start call count profiling.</fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cprof:stop/0..3</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em">Stops profiling by removing call count breakpoints from
     specified functions.</fo:block></fo:block-container>
  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Functions can be specified as either all in the system, all in one
    module, all arities of one function, one function, or all
    functions in all modules not yet loaded. As for now, BIFs cannot
    be call count traced.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The analysis result can either be for all modules, or for one
    module. In either case a call count limit can be given to filter
    out the functions with a call count below the limit. The all
    modules analysis does <fo:inline font-weight="bold">not</fo:inline> contain the module <fo:inline font-family="monospace">cprof</fo:inline>
    itself, it can only be analysed by specifying it as a single
    module to analyse.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call count tracing is very lightweight compared to other forms of
    tracing since no trace message has to be generated. Some
    measurements indicates performance degradations in the vicinity of
    10 percent.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following sections show some examples of profiling with
    <fo:inline font-family="monospace">cprof</fo:inline>. See also 
    <fo:inline font-style="italic">cprof(3)</fo:inline>.
    </fo:block><fo:block id="idp546192" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      Example: Background work</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From the Erlang shell:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">cprof:start(), cprof:pause(). % Stop counters just after start</fo:inline>
3476
2&gt; <fo:inline font-weight="bold">cprof:analyse().</fo:inline>
{30,
 [{erl_eval,11,
            [{{erl_eval,expr,3},3},
             {{erl_eval,'-merge_bindings/2-fun-0-',2},2},
             {{erl_eval,expand_module_name,2},1},
             {{erl_eval,merge_bindings,2},1},
             {{erl_eval,binding,2},1},
             {{erl_eval,expr_list,5},1},
             {{erl_eval,expr_list,3},1},
             {{erl_eval,exprs,4},1}]},
  {orddict,8,
           [{{orddict,find,2},6},
            {{orddict,dict_to_list,1},1},
            {{orddict,to_list,1},1}]},
  {packages,7,[{{packages,is_segmented_1,1},6},
               {{packages,is_segmented,1},1}]},
  {lists,4,[{{lists,foldl,3},3},{{lists,reverse,1},1}]}]}
3&gt; <fo:inline font-weight="bold">cprof:analyse(cprof).</fo:inline>
{cprof,3,[{{cprof,tr,2},2},{{cprof,pause,0},1}]}
4&gt; <fo:inline font-weight="bold">cprof:stop().</fo:inline>
3476</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The example showed the background work that the shell performs
      just to interpret the first command line. Most work is done by
      <fo:inline font-family="monospace">erl_eval</fo:inline> and <fo:inline font-family="monospace">orddict</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">What is captured in this example is the part of the work the
      shell does while interpreting the command line that occurs
      between the actual calls to <fo:inline font-family="monospace">cprof:start()</fo:inline> and
      <fo:inline font-family="monospace">cprof:analyse()</fo:inline>.
      </fo:block>
  <fo:block id="idp260432" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.2 
      Example: One module</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From the Erlang shell:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">cprof:start(),R=calendar:day_of_the_week(1896,4,27),cprof:pause(),R.</fo:inline>
1
2&gt; <fo:inline font-weight="bold">cprof:analyse(calendar).</fo:inline>
{calendar,9,
          [{{calendar,df,2},1},
           {{calendar,dm,1},1},
           {{calendar,dy,1},1},
           {{calendar,last_day_of_the_month1,2},1},
           {{calendar,last_day_of_the_month,2},1},
           {{calendar,is_leap_year1,1},1},
           {{calendar,is_leap_year,1},1},
           {{calendar,day_of_the_week,3},1},
           {{calendar,date_to_gregorian_days,3},1}]}
3&gt; <fo:inline font-weight="bold">cprof:stop().</fo:inline>
3271</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The example tells us that "Aktiebolaget LM Ericsson &amp; Co"
      was registered on a Monday (since the return value
      of the first command is 1), and that the <fo:inline font-family="monospace">calendar</fo:inline> module
      needed 9 function calls to calculate that.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using <fo:inline font-family="monospace">cprof:analyse()</fo:inline> in this example also shows
      approximately the same background work as in the first example. 
      </fo:block>
  <fo:block id="idp263072" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.3 
      Example: In the code</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write a module:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(sort).
      
-export([do/1]).
      
do(N) -&gt;
    cprof:stop(),
    cprof:start(),
    do(N, []).
      
do(0, L) -&gt;
    R = lists:sort(L),
    cprof:pause(),
    R;
do(N, L) -&gt;
    do(N-1, [random:uniform(256)-1 | L]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From the Erlang shell:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">c(sort).</fo:inline>
{ok,sort}
2&gt; <fo:inline font-weight="bold">l(random).</fo:inline>
{module,random}
3&gt; <fo:inline font-weight="bold">sort:do(1000).</fo:inline>
[0,0,1,1,1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,5,5,5,5,6,6,6,6,6,6|...]
4&gt; <fo:inline font-weight="bold">cprof:analyse().</fo:inline>
{9050,
 [{lists_sort,6047,
              [{{lists_sort,merge3_2,6},923},
               {{lists_sort,merge3_1,6},879},
               {{lists_sort,split_2,5},661},
               {{lists_sort,rmerge3_1,6},580},
               {{lists_sort,rmerge3_2,6},543},
               {{lists_sort,merge3_12_3,6},531},
               {{lists_sort,merge3_21_3,6},383},
               {{lists_sort,split_2_1,6},338},
               {{lists_sort,rmerge3_21_3,6},299},
               {{lists_sort,rmerge3_12_3,6},205},
               {{lists_sort,rmerge2_2,4},180},
               {{lists_sort,rmerge2_1,4},171},
               {{lists_sort,merge2_1,4},127},
               {{lists_sort,merge2_2,4},121},
               {{lists_sort,mergel,2},79},
               {{lists_sort,rmergel,2},27}]},
  {random,2001,
          [{{random,uniform,1},1000},
           {{random,uniform,0},1000},
           {{random,seed0,0},1}]},
  {sort,1001,[{{sort,do,2},1001}]},
  {lists,1,[{{lists,sort,1},1}]}]}
5&gt; <fo:inline font-weight="bold">cprof:stop().</fo:inline>
5369</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The example shows some details of how <fo:inline font-family="monospace">lists:sort/1</fo:inline>
      works. It used 6047 function calls in the module
      <fo:inline font-family="monospace">lists_sort</fo:inline> to complete the work.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This time, since the shell was not involved, no other work was
      done in the system during the profiling. If you retry the same
      example with a freshly started Erlang emulator, but omit the
      command <fo:inline font-family="monospace">l(random)</fo:inline>, the analysis will show a lot more
      function calls done by <fo:inline font-family="monospace">code_server</fo:inline> and others to
      automatically load the module <fo:inline font-family="monospace">random</fo:inline>.
      </fo:block>
  <fo:block id="idp345408" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.3  The Erlang mode for Emacs</fo:marker>1.3  The Erlang mode for Emacs</fo:block><fo:block id="idp462336" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.1 
      Purpose</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The purpose of this user guide is to introduce you to the
      Erlang mode for Emacs and gives some relevant background
      information of the functions and features. See also <fo:inline font-style="italic">Erlang mode reference manual</fo:inline> The
      purpose of the Erlang mode itself is to facilitate the developing
      process for the Erlang programmer.</fo:block>
  <fo:block id="idp23024" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.2 
      Pre-requisites</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Basic knowledge of Emacs and Erlang/OTP. </fo:block>
  <fo:block id="idp24336" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.3 
      Elisp</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two Elisp modules included in this tool package
      for Emacs. There is erlang.el that defines the actual erlang mode
      and there is erlang-start.el that makes some nice initializations.</fo:block>
  <fo:block id="idp25872" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.4 
      Setup on UNIX</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To set up the Erlang Emacs mode on a UNIX systems, edit/create
      the file <fo:inline font-family="monospace">.emacs</fo:inline> in the your home directory.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Below is a complete example of what should be added to a user's
      <fo:inline font-family="monospace">.emacs</fo:inline> provided that OTP is installed in the directory
      <fo:inline font-family="monospace">/usr/local/otp </fo:inline>: </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      (setq load-path (cons  "/usr/local/otp/lib/tools-&lt;ToolsVer&gt;/emacs"
      load-path))
      (setq erlang-root-dir "/usr/local/otp")
      (setq exec-path (cons "/usr/local/otp/bin" exec-path))
      (require 'erlang-start)
    </fo:block>
  <fo:block id="idp740176" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.5 
      Setup on Windows </fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To set up the Erlang Emacs mode on a Windows systems,
      edit/create the file <fo:inline font-family="monospace">.emacs</fo:inline>, the location of the file
      depends on the configuration of the system. If the <fo:inline font-weight="bold">HOME</fo:inline>
      environment variable is set, Emacs will look for the
      <fo:inline font-family="monospace">.emacs</fo:inline> file in the directory indicated by the
      <fo:inline font-weight="bold">HOME</fo:inline> variable. If <fo:inline font-weight="bold">HOME</fo:inline> is not set, Emacs
      will look for the <fo:inline font-family="monospace">.emacs</fo:inline> file in <fo:inline font-family="monospace">C:\ </fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Below is a complete example of what should be added to a user's
      <fo:inline font-family="monospace">.emacs</fo:inline> provided that OTP is installed in the directory
      <fo:inline font-family="monospace">C:\Program Files\erl&lt;Ver&gt;</fo:inline>: </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      (setq load-path (cons  "C:/Program Files/erl&lt;Ver&gt;/lib/tools-&lt;ToolsVer&gt;/emacs"
      load-path))
      (setq erlang-root-dir "C:/Program Files/erl&lt;Ver&gt;")
      (setq exec-path (cons "C:/Program Files/erl&lt;Ver&gt;/bin" exec-path))
      (require 'erlang-start)
    </fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In .emacs, the slash character "/" can be used as path
        separator. But if you decide to use the backslash character "\",
        please not that you must use double backslashes, since they are
        treated as escape characters by Emacs.</fo:block>
    </fo:block>
  <fo:block id="idp824512" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.6 
      Indentation</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The "Oxford Advanced Learners Dictionary of Current English" says the
      following about the word "indent":</fo:block>
    <fo:block font-style="italic">
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"start (a line of print or writing) farther from
        the margin than the others".</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang mode does, of course, provide this feature. The layout
      used is based on the common use of the language.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is strongly recommend to use this feature and avoid to indent lines
      in a nonstandard way.  Some motivations are:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Code using the same layout is easy to read and maintain. </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Since several features of Erlang mode is based on the
       standard layout they might not work correctly if a nonstandard layout
       is used. </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The indentation features can be used to reindent large sections
      of a file.  If some lines use nonstandard indentation they will
      be reindented.</fo:block>
  <fo:block id="idp916224" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.7 
      Editing</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">M-x erlang-mode RET</fo:inline></fo:inline> - This command activates
       the Erlang major mode for the current buffer.  When this
       mode is active the mode line contain the word "Erlang".</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the Erlang mode is correctly installed, it is
      automatically activated when a file ending in <fo:inline font-family="monospace">.erl</fo:inline> or
      <fo:inline font-family="monospace">.hrl</fo:inline> is opened in Emacs.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a file is saved the name in the <fo:inline font-family="monospace">-module().</fo:inline> line is
      checked against the file name. Should they mismatch Emacs can
      change the module specifier so that it matches the file name.
      By default, the user is asked before the change is performed.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An "electric" command is a character that in addition to just
      inserting the character performs some type of action.  For
      example the ";" character is typed in a situation where is ends
      a function clause a new function header is generated. The electric
      commands are as follows: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">erlang-electric-comma</fo:inline></fo:inline> - Insert a comma
       character and possibly a new indented line. </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">erlang-electric-semicolon</fo:inline></fo:inline> - Insert a
       semicolon character and possibly a prototype for the next line.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">erlang-electric-gt</fo:inline></fo:inline> - "Insert a '&gt;'-sign
       and possible a new indented line.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To disable all electric commands set the variable
      <fo:inline font-family="monospace">erlang-electric-commands</fo:inline> to the empty list.  In short,
      place the following line in your <fo:inline font-family="monospace">.emacs</fo:inline>-file:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      (setq erlang-electric-commands '())</fo:block>
  <fo:block id="idp800480" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.8 
      Syntax highlighting</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible for Emacs to use colors when displaying a buffer. By
      "syntax highlighting", we mean that syntactic components, for example
      keywords and function names, will be colored.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The basic idea of syntax highlighting is to make the structure of a
      program clearer. For example, the highlighting will make it easier to
      spot simple bugs.  Have not you ever written a variable in lower-case
      only?  With syntax highlighting a variable will colored while atoms
      will be shown with the normal text color.</fo:block>
  <fo:block id="idp803328" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.9 
      Tags</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tags is a standard Emacs package used to record information
      about source files in large development projects. In addition to
      listing the files of a project, a tags file normally contains
      information about all functions and variables that are defined.
      By far, the most useful command of the tags system is its ability
      to find the definition of functions in any file in the project.
      However the Tags system is not limited to this feature, for
      example, it is possible to do a text search in all files in a
      project, or to perform a project-wide search and replace.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order to use the Tags system a file named <fo:inline font-family="monospace">TAGS</fo:inline> must be
      created.  The file can be seen as a database over all functions,
      records, and macros in all files in the project.  The
      <fo:inline font-family="monospace">TAGS</fo:inline> file can be created using two different methods for
      Erlang.  The first is the standard Emacs utility "etags", the
      second is by using the Erlang module <fo:inline font-family="monospace">tags</fo:inline>.</fo:block>
  <fo:block id="idp807296" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.10 
      Etags</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">etags</fo:inline> is a program that is part of the Emacs
      distribution.  It is normally executed from a command line, like
      a unix shell or a DOS box.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">etags</fo:inline> program of fairly modern versions of Emacs and XEmacs
      has native support for Erlang.  To check if your version does include
      this support, issue the command <fo:inline font-family="monospace">etags --help</fo:inline> at a the command
      line prompt.  At the end of the help text there is a list of supported
      languages.  Unless Erlang is a member of this list I suggest that you
      should upgrade to a newer version of Emacs.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As seen in the help text -- unless you have not upgraded your
      Emacs yet (well, what are you waiting around here for?  Off you go and
      upgrade!)  -- <fo:inline font-family="monospace">etags</fo:inline> associate the file extensions <fo:inline font-family="monospace">.erl</fo:inline>
      and <fo:inline font-family="monospace">.hrl</fo:inline> with Erlang.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Basically, the <fo:inline font-family="monospace">etags</fo:inline> utility is ran using the following form:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      etags file1.erl file2.erl</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This will create a file named <fo:inline font-family="monospace">TAGS</fo:inline> in the current directory.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">etags</fo:inline> utility can also read a list of files from its
      standard input by supplying a single dash in place of the file
      names.  This feature is useful when a project consists of a
      large number of files.  The standard UNIX command <fo:inline font-family="monospace">find</fo:inline>
      can be used to generate the list of files, e.g:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      find . -name "*.[he]rl" -print | etags -</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The above line will create a <fo:inline font-family="monospace">TAGS</fo:inline> file covering all the
      Erlang source files in the current directory, and in the
      subdirectories below.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Please see the GNU Emacs Manual and the etags man page for more
      info.</fo:block>
  <fo:block id="idp747024" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.11 
      Shell</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The look and feel on an Erlang shell inside Emacs should be the
      same as in a normal Erlang shell.  There is just one major
      difference, the cursor keys will actually move the cursor around
      just like in any normal Emacs buffer. The command line history
      can be accessed by the following commands: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-up </fo:inline></fo:inline>  or <fo:inline font-weight="bold"><fo:inline font-family="monospace">M-p </fo:inline></fo:inline>
       (<fo:inline font-family="monospace">comint-previous-input</fo:inline>) -
       Move to the previous line in the input history.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-down </fo:inline></fo:inline> or <fo:inline font-weight="bold"><fo:inline font-family="monospace">M-n </fo:inline></fo:inline>
       (<fo:inline font-family="monospace">comint-next-input</fo:inline>) - Move to the next line in the
       input history.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the Erlang shell buffer would be killed the command line
      history is saved to a file.  The command line history is
      automatically retrieved when a new Erlang shell is started.</fo:block>
  <fo:block id="idp753872" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.12 
      Compilation</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The classic edit-compile-bugfix cycle for Erlang is to edit the
      source file in an editor, save it to a file and switch to an
      Erlang shell. In the shell the compilation command is given.
      Should the compilation fail you have to bring out the editor and
      locate the correct line.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With the Erlang editing mode the entire edit-compile-bugfix cycle can
      be performed without leaving Emacs.  Emacs can order Erlang to compile
      a file and it can parse the error messages to automatically place the
      point on the erroneous lines.</fo:block>
  <fo:block id="idp847440" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.4  fprof - The File Trace Profiler</fo:marker>1.4  fprof - The File Trace Profiler</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">fprof</fo:inline> is a profiling tool that can be used to get a picture of
    how much processing time different functions consumes and in which
    processes.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">fprof</fo:inline> uses tracing with timestamps to collect profiling
    data. Therfore there is no need for special compilation of any
    module to be profiled.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">fprof</fo:inline> presents wall clock times from the host machine OS,
    with the assumption that OS scheduling will randomly load the
    profiled functions in a fair way. Both <fo:inline font-weight="bold">own time</fo:inline> i.e the
    time used by a function for its own execution, and
    <fo:inline font-weight="bold">accumulated time</fo:inline> i.e execution time including called
    functions. 
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Profiling is essentially done in 3 steps:</fo:block><fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">1</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em">Tracing; to file, as mentioned in the previous paragraph.</fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">2</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em">Profiling; the trace file is read and raw profile data is
     collected into an internal RAM storage on the node. During
     this step the trace data may be dumped in text format to file
     or console.</fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">3</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em">Analysing; the raw profile data is sorted and dumped
     in text format either to file or console.</fo:block></fo:block-container>
  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since <fo:inline font-family="monospace">fprof</fo:inline> uses trace to file, the runtime performance 
    degradation is minimized, but still far from negligible, 
    especially not for programs that use the filesystem heavily 
    by themselves. Where you place the trace file is also important, 
    e.g on Solaris <fo:inline font-family="monospace">/tmp</fo:inline> is usually a good choice,
    while any NFS mounted disk is a lousy choice.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Fprof can also skip the file step and trace to a tracer process
    of its own that does the profiling in runtime.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following sections show some examples of how to profile with
    Fprof. See also the reference manual 
    <fo:inline font-style="italic">fprof(3)</fo:inline>.
    </fo:block><fo:block id="idp863056" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.1 
      Profiling from the source code</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you can edit and recompile the source code, it is convenient 
      to insert <fo:inline font-family="monospace">fprof:trace(start)</fo:inline> and 
      <fo:inline font-family="monospace">fprof:trace(stop)</fo:inline> before and after the code to be
      profiled. All spawned processes are also traced. If you want
      some other filename than the default try
      <fo:inline font-family="monospace">fprof:trace(start, "my_fprof.trace")</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then read the trace file and create the raw profile data with 
      <fo:inline font-family="monospace">fprof:profile()</fo:inline>, or perhaps 
      <fo:inline font-family="monospace">fprof:profile(file, "my_fprof.trace")</fo:inline> for non-default
      filename. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Finally create an informative table dumped on the console with
      <fo:inline font-family="monospace">fprof:analyse()</fo:inline>, or on file with
      <fo:inline font-family="monospace">fprof:analyse(dest, [])</fo:inline>, or perhaps even 
      <fo:inline font-family="monospace">fprof:analyse([{dest, "my_fprof.analysis"}, {cols, 120}])</fo:inline>
      for a wider listing on non-default filename.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See the <fo:inline font-style="italic">fprof(3)</fo:inline> manual page
      for more options and arguments to the functions
      <fo:inline font-style="italic">trace</fo:inline>,
      <fo:inline font-style="italic">profile</fo:inline>
      and 
      <fo:inline font-style="italic">analyse</fo:inline>.
      </fo:block>
  <fo:block id="idp981920" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.2 
      Profiling a function</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you have one function that does the task that you want to
      profile, and the function returns when the profiling should
      stop, it is convenient to use 
      <fo:inline font-family="monospace">fprof:apply(Module, Function, Args)</fo:inline> and related for the
      tracing step.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the tracing should continue after the function returns, for
      example if it is a start function that spawns processes to be
      profiled, you can use 
      <fo:inline font-family="monospace">fprof:apply(M, F, Args, [continue | OtherOpts])</fo:inline>. 
      The tracing has to be stopped at a suitable later time using
      <fo:inline font-family="monospace">fprof:trace(stop)</fo:inline>.
      </fo:block>
  <fo:block id="idp984976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.3 
      Immediate profiling</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also possible to trace immediately into the profiling
      process that creates the raw profile data, that is to short
      circuit the tracing and profiling steps so that the filesystem
      is not used.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do something like this:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{ok, Tracer} = fprof:profile(start),
fprof:trace([start, {tracer, Tracer}]),
%% Code to profile
fprof:trace(stop);</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This puts less load on the filesystem, but much more on the
      Erlang runtime system.
      </fo:block>
  <fo:block id="idp991856" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.5  lcnt - The Lock Profiler</fo:marker>1.5  lcnt - The Lock Profiler</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	Internally in the Erlang runtime system locks are used to protect resources from being updated from multiple threads in a fatal way. Locks are necessary
	to ensure that the runtime system works properly but it also introduces a couple of limitations. Lock contention and locking overhead.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	With lock contention we mean when one thread locks a resource and another thread, or threads, tries to acquire the same resource at the same time. The lock will deny
	the other thread access to the resource and the thread will be blocked from continuing its execution. The second thread has to wait until the first thread has
	completed its access to the resource and unlocked it. The <fo:inline font-family="monospace">lcnt</fo:inline> tool measures these lock conflicts.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	Locks have an inherent cost in execution time and memory space. It takes time initialize, destroy, aquiring or releasing locks. To decrease lock contention it
	some times necessary to use finer grained locking strategies. This will usually also increase the locking overhead and hence there is a tradeoff
	between lock contention and overhead. In general, lock contention increases with the number of threads running concurrently. The <fo:inline font-family="monospace">lcnt</fo:inline> tool does not measure locking overhead.
    </fo:block><fo:block id="idp999552" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.1 
       Enabling lock-counting </fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For investigation of locks in the emulator we use an internal tool called <fo:inline font-family="monospace">lcnt</fo:inline> (short for lock-count). The VM needs to be compiled with this option enabled.
	To compile a lock-counting VM along with a normal VM, use:</fo:block>

	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
cd $ERL_TOP
./configure --enable-lock-counter</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start the lock-counting VM like this:</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ERL_TOP/bin/erl -emu_type lcnt</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To verify that lock counting is enabled check that <fo:inline font-family="monospace">[lock-counting]</fo:inline> appears in the status text when the VM is started.</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Erlang/OTP 20 [erts-9.0] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:10] [hipe]
 [kernel-poll:false] [lock-counting]</fo:block>
    <fo:block id="idp1004464" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.2 
      Getting started</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Once you have a lock counting enabled VM the module <fo:inline font-family="monospace">lcnt</fo:inline> can be used. The module is intended to be used from the current running nodes shell. To access remote nodes use <fo:inline font-family="monospace">lcnt:clear(Node)</fo:inline> and <fo:inline font-family="monospace">lcnt:collect(Node)</fo:inline>. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All locks are continuously monitored and its statistics updated. Use <fo:inline font-family="monospace">lcnt:clear/0</fo:inline> to initially clear all counters before running any specific tests. This command will also reset the duration timer internally.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To retrieve lock statistics information, use <fo:inline font-family="monospace">lcnt:collect/0,1</fo:inline>. The collect operation will start a <fo:inline font-family="monospace">lcnt</fo:inline> server if it not already started. All collected data will be built into an Erlang term and uploaded to the server and a duration time will also be uploaded. This duration is the time between <fo:inline font-family="monospace">lcnt:clear/0,1</fo:inline> and <fo:inline font-family="monospace">lcnt:collect/0,1</fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Once the data is collected to the server it can be filtered, sorted and printed in many different ways.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See the <fo:inline font-style="italic">reference manual</fo:inline> for a description of each function.</fo:block>
    <fo:block id="idp1012512" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.3 
       Example of usage </fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From the Erlang shell:</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Erlang R13B03 (erts-5.7.4) [source] [smp:8:8] [rq:8] [async-threads:0] [hipe]
 [kernel-poll:false] [lock-counting]
1&gt; lcnt:rt_opt({copy_save, true}).
false
2&gt; lcnt:clear(), big:bang(1000), lcnt:collect().
ok
3&gt; lcnt:conflicts().
                   lock   id  #tries  #collisions  collisions [%]  time [us]  duration [%]
                  -----  --- ------- ------------ --------------- ---------- -------------
         alcu_allocator   50 4113692       158921          3.8632     215464        4.4962
               pix_lock  256 4007140         4882          0.1218      12221        0.2550
              run_queue    8 2287246         6949          0.3038       9825        0.2050
              proc_main 1029 3115778        25755          0.8266       1199        0.0250
              proc_msgq 1029 2467022         1910          0.0774       1048        0.0219
            proc_status 1029 5708439         2435          0.0427        706        0.0147
 message_pre_alloc_lock    8 2008569          134          0.0067         90        0.0019
              timeofday    1   54065            8          0.0148         22        0.0005
                gc_info    1    7071            7          0.0990          5        0.0001
ok
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
    Another way to to profile a specific function is to use <fo:inline font-family="monospace">lcnt:apply/3</fo:inline> or <fo:inline font-family="monospace">lcnt:apply/1</fo:inline> which does <fo:inline font-family="monospace">lcnt:clear/0</fo:inline> before the function and <fo:inline font-family="monospace">lcnt:collect/0</fo:inline> after its invocation.
    It also sets <fo:inline font-family="monospace">copy_save</fo:inline> to <fo:inline font-family="monospace">true</fo:inline> for the duration of the function call
</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Erlang R13B03 (erts-5.7.4) [source] [smp:8:8] [rq:8] [async-threads:0] [hipe]
 [kernel-poll:false] [lock-counting]
1&gt; lcnt:apply(fun() -&gt; big:bang(1000) end).
4384.338
2&gt; lcnt:conflicts().
                   lock   id  #tries  #collisions  collisions [%]  time [us]  duration [%]
                  -----  --- ------- ------------ --------------- ---------- -------------
         alcu_allocator   50 4117913       183091          4.4462     234232        5.1490
              run_queue    8 2050398         3801          0.1854       6700        0.1473
               pix_lock  256 4007080         4943          0.1234       2847        0.0626
              proc_main 1028 3000178        28247          0.9415       1022        0.0225
              proc_msgq 1028 2293677         1352          0.0589        545        0.0120
            proc_status 1028 5258029         1744          0.0332        442        0.0097
 message_pre_alloc_lock    8 2009322          147          0.0073         82        0.0018
              timeofday    1   48616            9          0.0185         13        0.0003
                gc_info    1    7455           12          0.1610          9        0.0002
ok
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> The process locks are sorted after its class like all other locks. It is convenient to look at specific processes and ports as classes. We can do this by swapping class and class identifiers with <fo:inline font-family="monospace">lcnt:swap_pid_keys/0</fo:inline>.  </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; lcnt:swap_pid_keys().
ok
4&gt; lcnt:conflicts([{print, [name, tries, ratio, time]}]).
                   lock  #tries  collisions [%]  time [us]
                  ----- ------- --------------- ----------
         alcu_allocator 4117913          4.4462     234232
              run_queue 2050398          0.1854       6700
               pix_lock 4007080          0.1234       2847
 message_pre_alloc_lock 2009322          0.0073         82
  &lt;nonode@nohost.660.0&gt;   13493          1.4452         41
  &lt;nonode@nohost.724.0&gt;   13504          1.1404         36
  &lt;nonode@nohost.803.0&gt;   13181          1.6235         35
  &lt;nonode@nohost.791.0&gt;   13534          0.8202         22
   &lt;nonode@nohost.37.0&gt;    8744          5.8326         22
  &lt;nonode@nohost.876.0&gt;   13335          1.1174         19
  &lt;nonode@nohost.637.0&gt;   13452          1.3678         19
  &lt;nonode@nohost.799.0&gt;   13497          1.8745         18
  &lt;nonode@nohost.469.0&gt;   11009          2.5343         18
  &lt;nonode@nohost.862.0&gt;   13131          1.2566         16
  &lt;nonode@nohost.642.0&gt;   13216          1.7327         15
  &lt;nonode@nohost.582.0&gt;   13156          1.1098         15
  &lt;nonode@nohost.622.0&gt;   13420          0.7303         14
  &lt;nonode@nohost.596.0&gt;   13141          1.6437         14
  &lt;nonode@nohost.592.0&gt;   13346          1.2064         13
  &lt;nonode@nohost.526.0&gt;   13076          1.1701         13
ok
</fo:block>
      <fo:block id="idp1023296" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.4 
       Example with Mnesia Transaction Benchmark </fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From the Erlang shell:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Erlang R13B03 (erts-5.7.4) [source] [smp:8:8] [rq:8] [async-threads:0] [hipe]
 [kernel-poll:false] [lock-counting]

Eshell V5.7.4  (abort with ^G)
1&gt; Conf=[{db_nodes, [node()]}, {driver_nodes, [node()]}, {replica_nodes, [node()]},
 {n_drivers_per_node, 10}, {n_branches, 1000}, {n_accounts_per_branch, 10},
 {replica_type, ram_copies}, {stop_after, 60000}, {reuse_history_id, true}].
[{db_nodes,[nonode@nohost]},
 {driver_nodes,[nonode@nohost]},
 {replica_nodes,[nonode@nohost]},
 {n_drivers_per_node,10},
 {n_branches,1000},
 {n_accounts_per_branch,10},
 {replica_type,ram_copies},
 {stop_after,60000},
 {reuse_history_id,true}]
2&gt; mnesia_tpcb:init([{use_running_mnesia, false}|Conf]).
ignore
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initial configuring of the benchmark is done. It is time to profile the actual benchmark and Mnesia</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; lcnt:apply(fun() -&gt; {ok,{time, Tps,_,_,_,_}} = mnesia_tpcb:run([{use_running_mnesia,
 true}|Conf]), Tps/60 end).
12037.483333333334
ok
4&gt; lcnt:swap_pid_keys().
ok
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">id</fo:inline> header represents the number of unique identifiers under a class when the option <fo:inline font-family="monospace">{combine, true}</fo:inline> is used (which is on by default). It will otherwise show the specific identifier.
The <fo:inline font-family="monospace">db_tab</fo:inline> listing shows 722287 unique locks, it is one for each ets-table created and Mnesia creates one for each transaction.
</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
5&gt; lcnt:conflicts().
                   lock     id   #tries  #collisions  collisions [%]  time [us]  duration [%]
                  -----    ---  ------- ------------ --------------- ---------- -------------
         alcu_allocator     50 56355118       732662          1.3001    2934747        4.8862
                 db_tab 722287 94513441        63203          0.0669    1958797        3.2613
              timeofday      1  2701048       175854          6.5106    1746079        2.9071
               pix_lock    256 24306168       163214          0.6715     918309        1.5289
              run_queue      8 11813811       152637          1.2920     357040        0.5945
 message_pre_alloc_lock      8 17671449        57203          0.3237     263043        0.4380
          mnesia_locker      4 17477633      1618548          9.2607      97092        0.1617
              mnesia_tm      4  9891408       463788          4.6888      86353        0.1438
                gc_info      1   823460          628          0.0763      24826        0.0413
     meta_main_tab_slot     16 41393400         7193          0.0174      11393        0.0190
 &lt;nonode@nohost.1108.0&gt;      4  4331412          333          0.0077       7148        0.0119
            timer_wheel      1   203185           30          0.0148       3108        0.0052
 &lt;nonode@nohost.1110.0&gt;      4  4291098          210          0.0049        885        0.0015
 &lt;nonode@nohost.1114.0&gt;      4  4294702          288          0.0067        442        0.0007
 &lt;nonode@nohost.1113.0&gt;      4  4346066          235          0.0054        390        0.0006
 &lt;nonode@nohost.1106.0&gt;      4  4348159          287          0.0066        379        0.0006
 &lt;nonode@nohost.1111.0&gt;      4  4279309          290          0.0068        325        0.0005
 &lt;nonode@nohost.1107.0&gt;      4  4292190          302          0.0070        315        0.0005
 &lt;nonode@nohost.1112.0&gt;      4  4208858          265          0.0063        276        0.0005
 &lt;nonode@nohost.1109.0&gt;      4  4377502          267          0.0061        276        0.0005
ok
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The listing shows <fo:inline font-family="monospace">mnesia_locker</fo:inline>, a process, has highly contended locks.</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
6&gt; lcnt:inspect(mnesia_locker).
          lock          id  #tries  #collisions  collisions [%]  time [us]  duration [%]
         -----         --- ------- ------------ --------------- ---------- -------------
 mnesia_locker   proc_msgq 5449930        59374          1.0894      69781        0.1162
 mnesia_locker   proc_main 4462782      1487374         33.3284      14398        0.0240
 mnesia_locker proc_status 7564921        71800          0.9491      12913        0.0215
 mnesia_locker   proc_link       0            0          0.0000          0        0.0000
ok
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Listing without class combiner.</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
7&gt; lcnt:conflicts([{combine, false}, {print, [name, id, tries, ratio, time]}]).
                   lock                        id   #tries  collisions [%]  time [us]
                  -----                       ---  ------- --------------- ----------
                 db_tab mnesia_transient_decision   722250          3.9463    1856852
              timeofday                 undefined  2701048          6.5106    1746079
         alcu_allocator                 ets_alloc  7490696          2.2737     692655
         alcu_allocator                 ets_alloc  7081771          2.3294     664522
         alcu_allocator                 ets_alloc  7047750          2.2520     658495
         alcu_allocator                 ets_alloc  5883537          2.3177     610869
               pix_lock                        58 11011355          1.1924     564808
               pix_lock                        60  4426484          0.7120     262490
         alcu_allocator                 ets_alloc  1897004          2.4248     219543
 message_pre_alloc_lock                 undefined  4211267          0.3242     128299
              run_queue                         3  2801555          1.3003     116792
              run_queue                         2  2799988          1.2700     100091
              run_queue                         1  2966183          1.2712      78834
          mnesia_locker                 proc_msgq  5449930          1.0894      69781
 message_pre_alloc_lock                 undefined  3495672          0.3262      65773
 message_pre_alloc_lock                 undefined  4189752          0.3174      58607
              mnesia_tm                 proc_msgq  2094144          1.7184      56361
              run_queue                         4  2343585          1.3115      44300
                 db_tab                    branch  1446529          0.5229      38244
                gc_info                 undefined   823460          0.0763      24826
ok
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
In this scenario the lock that protects ets-table <fo:inline font-family="monospace">mnesia_transient_decision</fo:inline> has spent most of its waiting for. That is 1.8 seconds in a test that run for 60 seconds. The time is also spread on eight different scheduler threads.
</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
8&gt; lcnt:inspect(db_tab, [{print, [name, id, tries, colls, ratio, duration]}]).
   lock                        id  #tries  #collisions  collisions [%]  duration [%]
  -----                       --- ------- ------------ --------------- -------------
 db_tab mnesia_transient_decision  722250        28502          3.9463        3.0916
 db_tab                    branch 1446529         7564          0.5229        0.0637
 db_tab                   account 1464500         8203          0.5601        0.0357
 db_tab                    teller 1464529         8110          0.5538        0.0291
 db_tab                   history  722250         3767          0.5216        0.0232
 db_tab              mnesia_stats  750332         7057          0.9405        0.0180
 db_tab        mnesia_trans_store      61            0          0.0000        0.0000
 db_tab        mnesia_trans_store      61            0          0.0000        0.0000
 db_tab        mnesia_trans_store      53            0          0.0000        0.0000
 db_tab        mnesia_trans_store      53            0          0.0000        0.0000
 db_tab        mnesia_trans_store      53            0          0.0000        0.0000
 db_tab        mnesia_trans_store      53            0          0.0000        0.0000
 db_tab        mnesia_trans_store      53            0          0.0000        0.0000
 db_tab        mnesia_trans_store      53            0          0.0000        0.0000
 db_tab        mnesia_trans_store      53            0          0.0000        0.0000
 db_tab        mnesia_trans_store      53            0          0.0000        0.0000
 db_tab        mnesia_trans_store      53            0          0.0000        0.0000
 db_tab        mnesia_trans_store      53            0          0.0000        0.0000
 db_tab        mnesia_trans_store      53            0          0.0000        0.0000
 db_tab        mnesia_trans_store      53            0          0.0000        0.0000
ok
</fo:block>

    <fo:block id="idp1039744" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.5 
       Deciphering the output </fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Typically high <fo:inline font-family="monospace">time</fo:inline> values are bad and this is often the thing to look for. However, one should also look for high lock acquisition frequencies (#tries) since locks generate overhead and because high frequency could become problematic if they begin to have conflicts even if it is not shown in a particular test.  </fo:block>
    <fo:block id="idp1041824" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.6 
      See Also</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> <fo:inline font-style="italic">LCNT Reference Manual</fo:inline></fo:block>
    <fo:block id="idp1047648" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.6  Xref - The Cross Reference Tool</fo:marker>1.6  Xref - The Cross Reference Tool</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Xref is a cross reference tool that can be used for
    finding dependencies between functions, modules, applications
    and releases. It does so by analyzing the defined functions
    and the function calls.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order to make Xref easy to use, there are predefined
    analyses that perform some common tasks. Typically, a module
    or a release can be checked for calls to undefined functions.
    For the somewhat more advanced user there is a small, but
    rather flexible, language that can be used for selecting parts
    of the analyzed system and for doing some simple graph
    analyses on selected calls.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following sections show some features of Xref, beginning
    with a module check and a predefined analysis. Then follow
    examples that can be skipped on the first reading; not all of
    the concepts used are explained, and it is assumed that the
    <fo:inline font-style="italic">reference manual</fo:inline> has been at
    least skimmed.
    </fo:block><fo:block id="idp1054896" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.1 
      Module Check</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assume we want to check the following module:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    -module(my_module).

    -export([t/1]).

    t(A) -&gt;
      my_module:t2(A).

    t2(_) -&gt;
      true.    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Cross reference data are read from BEAM files, so the first
      step when checking an edited module is to compile it:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    1&gt; <fo:inline font-weight="bold">c(my_module, debug_info).</fo:inline>
    ./my_module.erl:10: Warning: function t2/1 is unused
    {ok, my_module}    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">debug_info</fo:inline> option ensures that the BEAM file
      contains debug information, which makes it possible to find
      unused local functions.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module can now be checked for calls to <fo:inline font-style="italic">deprecated functions</fo:inline>, calls to <fo:inline font-style="italic">undefined functions</fo:inline>,
      and for unused local functions:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    2&gt; <fo:inline font-weight="bold">xref:m(my_module)</fo:inline>
    [{deprecated,[]},
     {undefined,[{{my_module,t,1},{my_module,t2,1}}]},
     {unused,[{my_module,t2,1}]}]    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">m/1</fo:inline> is also suitable for checking that the
      BEAM file of a module that is about to be loaded into a
      running a system does not call any undefined functions. In
      either case, the code path of the code server (see the module
      <fo:inline font-family="monospace">code</fo:inline>) is used for finding modules that export externally
      called functions not exported by the checked module itself, so
      called <fo:inline font-style="italic">library modules</fo:inline>.
      </fo:block>
  <fo:block id="idp1064576" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.2 
      Predefined Analysis</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the last example the module to analyze was given as an
      argument to <fo:inline font-family="monospace">m/1</fo:inline>, and the code path was (implicitly)
      used as <fo:inline font-style="italic">library path</fo:inline>. In this example an <fo:inline font-style="italic">xref server</fo:inline> will be used,
      which makes it possible to analyze applications and releases,
      and also to select the library path explicitly.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each Xref server is referred to by a unique name. The name
      is given when creating the server:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    1&gt; <fo:inline font-weight="bold">xref:start(s).</fo:inline>
    {ok,&lt;0.27.0&gt;}    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Next the system to be analyzed is added to the Xref server.
      Here the system will be OTP, so no library path will be needed.
      Otherwise, when analyzing a system that uses OTP, the OTP
      modules are typically made library modules by
      setting the library path to the default OTP code path (or to
      <fo:inline font-family="monospace">code_path</fo:inline>, see the <fo:inline font-style="italic">reference manual</fo:inline>). By
      default, the names of read BEAM files and warnings are output
      when adding analyzed modules, but these messages can be avoided
      by setting default values of some options:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    2&gt; <fo:inline font-weight="bold">xref:set_default(s, [{verbose,false}, {warnings,false}]).</fo:inline>
    ok
    3&gt; <fo:inline font-weight="bold">xref:add_release(s, code:lib_dir(), {name, otp}).</fo:inline>
    {ok,otp}    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">add_release/3</fo:inline> assumes that all subdirectories of the
      library directory returned by <fo:inline font-family="monospace">code:lib_dir()</fo:inline> contain
      applications; the effect is that of reading all
      applications' BEAM files.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is now easy to check the release for calls to undefined
      functions:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    4&gt; <fo:inline font-weight="bold">xref:analyze(s, undefined_function_calls).</fo:inline>
    {ok, [...]}    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We can now continue with further analyses, or we can delete
      the Xref server:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    5&gt; <fo:inline font-weight="bold">xref:stop(s).</fo:inline>    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The check for calls to undefined functions is an example of a
      predefined analysis, probably the most useful one. Other
      examples are the analyses that find unused local
      functions, or functions that call some given functions. See
      the <fo:inline font-style="italic">analyze/2,3</fo:inline>
      functions for a complete list of predefined analyses.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each predefined analysis is a shorthand for a <fo:inline font-style="italic">query</fo:inline>, a sentence of a tiny
      language providing cross reference data as
      values of <fo:inline font-style="italic">predefined variables</fo:inline>.
      The check for calls to undefined functions can thus be stated as
      a query:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    4&gt; <fo:inline font-weight="bold">xref:q(s, "(XC - UC) || (XU - X - B)").</fo:inline>
    {ok,[...]}    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The query asks for the restriction of external calls except the
      unresolved calls to calls to functions that are externally used
      but neither exported nor built-in functions (the <fo:inline font-family="monospace">||</fo:inline>
      operator restricts the used functions while the <fo:inline font-family="monospace">|</fo:inline>
      operator restricts the calling functions). The <fo:inline font-family="monospace">-</fo:inline> operator
      returns the difference of two sets, and the <fo:inline font-family="monospace">+</fo:inline> operator to
      be used below returns the union of two sets.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The relationships between the predefined variables
      <fo:inline font-family="monospace">XU</fo:inline>, <fo:inline font-family="monospace">X</fo:inline>, <fo:inline font-family="monospace">B</fo:inline> and a few
      others are worth elaborating upon. 
      The reference manual mentions two ways of expressing the set of
      all functions, one that focuses on how they are defined:
      <fo:inline font-family="monospace">X + L + B + U</fo:inline>, and one
      that focuses on how they are used:
      <fo:inline font-family="monospace">UU + LU + XU</fo:inline>. 
      The reference also mentions some <fo:inline font-style="italic">facts</fo:inline> about the
      variables:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">F</fo:inline> is equal to <fo:inline font-family="monospace">L + X</fo:inline> (the defined functions
       are the local functions and the external functions);</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">U</fo:inline> is a subset of <fo:inline font-family="monospace">XU</fo:inline> (the unknown functions
       are a subset of the externally used functions since
       the compiler ensures that locally used functions are defined);</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">B</fo:inline> is a subset of <fo:inline font-family="monospace">XU</fo:inline> (calls to built-in
       functions are always external by definition, and unused
       built-in functions are ignored);</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">LU</fo:inline> is a subset of <fo:inline font-family="monospace">F</fo:inline> (the locally used
       functions are either local functions or exported functions,
       again ensured by the compiler);</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">UU</fo:inline> is equal to
      <fo:inline font-family="monospace">F - (XU + LU)</fo:inline> (the unused functions
       are defined functions that are neither used externally nor
       locally);</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">UU</fo:inline> is a subset of <fo:inline font-family="monospace">F</fo:inline> (the unused functions
       are defined in analyzed modules).</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using these facts, the two small circles in the picture below
      can be combined. 
      </fo:block>
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="venn1.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        6.1:
         
        Definition and use of functions</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is often clarifying to mark the variables of a query in such
      a circle. This is illustrated in the picture below for some of
      the predefined analyses. Note that local functions used by local
      functions only are not marked in the <fo:inline font-family="monospace">locals_not_used</fo:inline>
      circle.       
</fo:block>
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="venn2.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        6.2:
         
        Some predefined analyses as subsets of all functions</fo:block>
    </fo:block>
  <fo:block id="idp1100944" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.3 
      Expressions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module check and the predefined analyses are useful, but
      limited. Sometimes more flexibility is needed, for instance one
      might not need to apply a graph analysis on all calls, but some
      subset will do equally well. That flexibility is provided with 
      a simple language. Below are some expressions of the language
      with comments, focusing on elements of the language rather than
      providing useful examples. The analyzed system is assumed to be
      OTP, so in order to run the queries, first evaluate these calls:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    xref:start(s).
    xref:add_release(s, code:root_dir()).    </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "(Fun) xref : Mod").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">All functions of the <fo:inline font-family="monospace">xref</fo:inline> module. </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "xref : Mod * X").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">All exported functions of the <fo:inline font-family="monospace">xref</fo:inline> module. The first
       operand of the intersection operator <fo:inline font-family="monospace">*</fo:inline> is implicitly
       converted to the more special type of the second operand.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "(Mod) tools").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">All modules of the Tools application.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, '"xref_.*" : Mod').</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">All modules with a name beginning with <fo:inline font-family="monospace">xref_</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "# E | X ").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Number of calls from exported functions.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "XC || L ").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">All external calls to local functions.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "XC * LC").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">All calls that have both an external and a local version.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "(LLin) (LC * XC)").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The lines where the local calls of the last example
       are made.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "(XLin) (LC * XC)").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The lines where the external calls of the example before
       last are made.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "XC * (ME - strict ME)").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">External calls within some module.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "E ||| kernel").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">All calls within the Kernel application. </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "closure E | kernel || kernel").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">All direct and indirect calls within the Kernel
       application. Both the calling and the used functions of
       indirect calls are defined in modules of the kernel
       application, but it is possible that some functions outside
       the kernel application are used by indirect calls.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "{toolbar,debugger}:Mod of ME").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A chain of module calls from <fo:inline font-family="monospace">toolbar</fo:inline> to
      <fo:inline font-family="monospace">debugger</fo:inline>, if there is such a chain, otherwise
      <fo:inline font-family="monospace">false</fo:inline>. The chain of calls is represented by a list of
       modules, <fo:inline font-family="monospace">toolbar</fo:inline> being the first element and
      <fo:inline font-family="monospace">debugger</fo:inline>the last element.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "closure E | toolbar:Mod || debugger:Mod").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">All (in)direct calls from functions in <fo:inline font-family="monospace">toolbar</fo:inline> to
       functions in <fo:inline font-family="monospace">debugger</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "(Fun) xref -&gt; xref_base").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">All function calls from <fo:inline font-family="monospace">xref</fo:inline> to <fo:inline font-family="monospace">xref_base</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "E * xref -&gt; xref_base").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Same interpretation as last expression.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "E || xref_base | xref").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Same interpretation as last expression.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "E * [xref -&gt; lists, xref_base -&gt; digraph]").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">All function calls from <fo:inline font-family="monospace">xref</fo:inline> to <fo:inline font-family="monospace">lists</fo:inline>, and
       all function calls from <fo:inline font-family="monospace">xref_base</fo:inline> to <fo:inline font-family="monospace">digraph</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "E | [xref, xref_base] || [lists, digraph]").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">All function calls from <fo:inline font-family="monospace">xref</fo:inline> and <fo:inline font-family="monospace">xref_base</fo:inline>
       to <fo:inline font-family="monospace">lists</fo:inline> and <fo:inline font-family="monospace">digraph</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "components EE").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">All strongly connected components of the Inter Call
       Graph. Each component is a set of exported or unused local functions
       that call each other (in)directly.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s,  "X * digraph * range (closure (E | digraph) | (L * digraph))").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">All exported functions of the <fo:inline font-family="monospace">digraph</fo:inline> module
       used (in)directly by some function in <fo:inline font-family="monospace">digraph</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">xref:q(s, "L * yeccparser:Mod - range (closure (E |</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">yeccparser:Mod) | (X * yeccparser:Mod))").</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The interpretation is left as an exercise. </fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp1139152" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.4 
      Graph Analysis</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The list <fo:inline font-style="italic">representation of graphs</fo:inline> is used analyzing direct calls,
      while the <fo:inline font-family="monospace">digraph</fo:inline> representation is suited for analyzing
      indirect calls. The restriction operators (<fo:inline font-family="monospace">|</fo:inline>, <fo:inline font-family="monospace">||</fo:inline>
      and <fo:inline font-family="monospace">|||</fo:inline>) are the only operators that accept both
      representations. This means that in order to analyze indirect
      calls using restriction, the <fo:inline font-family="monospace">closure</fo:inline> operator (which creates the
      <fo:inline font-family="monospace">digraph</fo:inline> representation of graphs) has to be
      applied explicitly.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As an example of analyzing indirect calls, the following Erlang
      function tries to answer the question:
      if we want to know which modules are used indirectly by some
      module(s), is it worth while using the <fo:inline font-style="italic">function graph</fo:inline> rather
      than the module graph? Recall that a module M1 is said to call
      a module M2 if there is some function in M1 that calls some
      function in M2. It would be nice if we could use the much
      smaller module graph, since it is available also in the light
      weight <fo:inline font-family="monospace">modules</fo:inline><fo:inline font-style="italic">mode</fo:inline> of Xref servers.
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    t(S) -&gt;
      {ok, _} = xref:q(S, "Eplus := closure E"),
      {ok, Ms} = xref:q(S, "AM"),
      Fun = fun(M, N) -&gt; 
          Q = io_lib:format("# (Mod) (Eplus | ~p : Mod)", [M]),
          {ok, N0} = xref:q(S, lists:flatten(Q)),
          N + N0
        end,
      Sum = lists:foldl(Fun, 0, Ms),
      ok = xref:forget(S, 'Eplus'),
      {ok, Tot} = xref:q(S, "# (closure ME | AM)"),
      100 * ((Tot - Sum) / Tot).    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Comments on the code:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>We want to find the reduction of the closure of the
       function graph to modules. 
       The direct expression for doing that would be
      <fo:inline font-family="monospace">(Mod) (closure E | AM)</fo:inline>, but then we
       would have to represent all of the transitive closure of E in
       memory. Instead the number of indirectly used modules is
       found for each analyzed module, and the sum over all modules
       is calculated.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A user variable is employed for holding the <fo:inline font-family="monospace">digraph</fo:inline>
       representation of the function graph for use in many
       queries. The reason is efficiency. As opposed to the
      <fo:inline font-family="monospace">=</fo:inline> operator, the <fo:inline font-family="monospace">:=</fo:inline> operator saves a value for
       subsequent analyses.  Here might be the place to note that
       equal subexpressions within a query are evaluated only once;
      <fo:inline font-family="monospace">=</fo:inline> cannot be used for speeding things up.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Eplus | ~p : Mod</fo:inline>. The <fo:inline font-family="monospace">|</fo:inline> operator converts
       the second operand to the type of the first operand. In this
       case the module is converted to all functions of the
       module. It is necessary to assign a type to the module
       (<fo:inline font-family="monospace">: Mod</fo:inline>), otherwise modules like <fo:inline font-family="monospace">kernel</fo:inline> would be
       converted to all functions of the application with the same
       name; the most general constant is used in cases of ambiguity.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Since we are only interested in a ratio, the unary
       operator <fo:inline font-family="monospace">#</fo:inline> that counts the elements of the operand is
       used. It cannot be applied to the <fo:inline font-family="monospace">digraph</fo:inline> representation
       of graphs.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>We could find the size of the closure of the module graph
       with a loop similar to one used for the function graph, but
       since the module graph is so much smaller, a more direct
       method is feasible.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the Erlang function <fo:inline font-family="monospace">t/1</fo:inline> was applied to an Xref
      server loaded with the current version of OTP, the returned
      value was close to 84 (percent). This means that the number
      of indirectly used modules is approximately six times greater
      when using the module graph.
      So the answer to the above stated question is that it is
      definitely worth while using the function graph for this
      particular analysis.
      Finally, note that in the presence of unresolved calls, the
      graphs may be incomplete, which means that there may be
      indirectly used modules that do not show up.
      </fo:block>
  <fo:block id="idp75632" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">Tools</fo:inline> application contains a number of stand-alone
      tools, which are useful when developing Erlang programs.</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">cover</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A coverage analysis tool for Erlang.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">cprof</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A profiling tool that shows how many
       times each function is called. Uses a kind of local call trace
       breakpoints containing counters to achieve very low runtime
       performance degradation.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">erlang.el</fo:inline>- Erlang mode for Emacs</fo:block>
      <fo:block-container><fo:block start-indent="2em">Editing support such as indentation, syntax highlighting,
       electric commands, module name verification, comment support
       including paragraph filling, skeletons, tags support and more
       for erlang source code. </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">eprof</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A time profiling tool; measure how time is used in Erlang
       programs. Predecessor of <fo:inline font-weight="bold">fprof</fo:inline> (see below).</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">fprof</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Another Erlang profiler; measure how time is used in your
       Erlang programs. Uses trace to file to minimize runtime
       performance impact, and displays time for calling and called 
       functions.</fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">instrument</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Utility functions for obtaining and analysing resource usage
       in an instrumented Erlang runtime system.</fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">lcnt</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A lock profiling tool for the Erlang runtime system.</fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">make</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A make utility for Erlang similar to UNIX make.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">tags</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A tool for generating Emacs TAGS files from Erlang source
       files.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">xref</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A cross reference tool. Can be used to check dependencies 
       between functions, modules, applications and releases.</fo:block></fo:block-container>
    </fo:block>
  <fo:block page-break-before="always" id="idp2721360" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">cover</fo:marker>cover</fo:block>Erlang module</fo:block>
  <fo:block/>
  cover
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">cover</fo:inline> provides a set of functions for coverage
      analysis of Erlang programs, counting how many times each
      <fo:inline font-weight="bold">executable line</fo:inline> of code is executed when a program is run.      <fo:block/>

      An executable line contains an Erlang expression such as a matching
      or a function call. A blank line or a line containing a comment,
      function head or pattern in a <fo:inline font-family="monospace">case</fo:inline>- or <fo:inline font-family="monospace">receive</fo:inline> statement
      is not executable.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Coverage analysis can be used to verify test cases, making sure all
      relevant code is covered, and may also be helpful when looking for
      bottlenecks in the code.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before any analysis can take place, the involved modules must be
      <fo:inline font-weight="bold">Cover compiled</fo:inline>. This means that some extra information is
      added to the module before it is compiled into a binary which then
      is loaded. The source file of the module is not affected and no
      <fo:inline font-family="monospace">.beam</fo:inline> file is created.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each time a function in a Cover compiled module is called,
      information about the call is added to an internal database of Cover.
      The coverage analysis is performed by examining the contents of
      the Cover database. The output <fo:inline font-family="monospace">Answer</fo:inline> is determined by two
      parameters, <fo:inline font-family="monospace">Level</fo:inline> and <fo:inline font-family="monospace">Analysis</fo:inline>.</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Level = module</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Answer = {Module,Value}</fo:inline>, where <fo:inline font-family="monospace">Module</fo:inline> is the module
          name.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Level = function</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Answer = [{Function,Value}]</fo:inline>, one tuple for each function in
          the module. A function is specified by its module name <fo:inline font-family="monospace">M</fo:inline>,
          function name <fo:inline font-family="monospace">F</fo:inline> and arity <fo:inline font-family="monospace">A</fo:inline> as a tuple
          <fo:inline font-family="monospace">{M,F,A}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Level = clause</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Answer = [{Clause,Value}]</fo:inline>, one tuple for each clause in
          the module. A clause is specified by its module name <fo:inline font-family="monospace">M</fo:inline>,
          function name <fo:inline font-family="monospace">F</fo:inline>, arity <fo:inline font-family="monospace">A</fo:inline> and position in the function
          definition <fo:inline font-family="monospace">C</fo:inline> as a tuple <fo:inline font-family="monospace">{M,F,A,C}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Level = line</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Answer = [{Line,Value}]</fo:inline>, one tuple for each executable
          line in the module. A line is specified by its module name <fo:inline font-family="monospace">M</fo:inline>
          and line number in the source file <fo:inline font-family="monospace">N</fo:inline> as a tuple
          <fo:inline font-family="monospace">{M,N}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Analysis = coverage</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Value = {Cov,NotCov}</fo:inline> where <fo:inline font-family="monospace">Cov</fo:inline> is the number of
          executable lines in the module, function, clause or line that have
          been executed at least once and <fo:inline font-family="monospace">NotCov</fo:inline> is the number of
          executable lines that have not been executed.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Analysis = calls</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Value = Calls</fo:inline> which is the number of times the module,
          function, or clause has been called. In the case of line level
          analysis, <fo:inline font-family="monospace">Calls</fo:inline> is the number of times the line has been
          executed.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Distribution</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Cover can be used in a distributed Erlang system. One of the
      nodes in the system must then be selected as the <fo:inline font-weight="bold">main node</fo:inline>, and all Cover commands must be executed from this
      node. The error reason <fo:inline font-family="monospace">not_main_node</fo:inline> is returned if an
      interface function is called on one of the remote nodes.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use <fo:inline font-family="monospace">cover:start/1</fo:inline> and <fo:inline font-family="monospace">cover:stop/1</fo:inline> to add or
      remove nodes. The same Cover compiled code will be loaded on each
      node, and analysis will collect and sum up coverage data results
      from all nodes.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To only collect data from remote nodes without stopping
      <fo:inline font-family="monospace">cover</fo:inline> on those nodes, use <fo:inline font-family="monospace">cover:flush/1</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the connection to a remote node goes down, the main node
      will mark it as lost. If the node comes back it will be added
      again. If the remote node was alive during the disconnected
      periode, cover data from before and during this periode will be
      included in the analysis.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2688784">start() -&gt; {ok,Pid} | {error,Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {already_started,Pid}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the Cover server which owns the Cover internal database.
          This function is called automatically by the other functions in
          the module.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2685296">start(Nodes) -&gt; {ok,StartedNodes} | {error,not_main_node}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Nodes = StartedNodes = [atom()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts a Cover server on the each of given nodes, and loads
          all cover compiled modules.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2681808">compile(ModFiles) -&gt; Result | [Result]</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2681648">compile(ModFiles, Options) -&gt; Result | [Result]</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2681488">compile_module(ModFiles) -&gt; Result | [Result]</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2680416">compile_module(ModFiles, Options) -&gt; Result | [Result]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModFiles = ModFile | [ModFile]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModFile = Module | File</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> File = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Option = {i,Dir} | {d,Macro} | {d,Macro,Value} | export_all</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>See <fo:inline font-family="monospace">compile:file/2.</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {ok,Module} | {error,File} | {error,not_main_node}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compiles a module for Cover analysis. The module is given by its
          module name <fo:inline font-family="monospace">Module</fo:inline> or by its file name <fo:inline font-family="monospace">File</fo:inline>.
          The <fo:inline font-family="monospace">.erl</fo:inline> extension may be omitted. If the module is
          located in another directory, the path has to be specified.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Options</fo:inline> is a list of compiler options which defaults to
          <fo:inline font-family="monospace">[]</fo:inline>. Only options defining include file directories and
          macros are passed to <fo:inline font-family="monospace">compile:file/2</fo:inline>, everything else is
          ignored.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the module is successfully Cover compiled, the function
          returns <fo:inline font-family="monospace">{ok,Module}</fo:inline>. Otherwise the function returns
          <fo:inline font-family="monospace">{error,File}</fo:inline>. Errors and warnings are printed as they
          occur.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a list of <fo:inline font-family="monospace">ModFiles</fo:inline> is given as input, a list
	  of <fo:inline font-family="monospace">Result</fo:inline> will be returned. The order of the returned
	  list is undefined.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the internal database is (re-)initiated during
          the compilation, meaning any previously collected coverage data
          for the module will be lost.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2668016">compile_directory() -&gt; [Result] | {error,Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2667312">compile_directory(Dir) -&gt; [Result] | {error,Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2666928">compile_directory(Dir, Options) -&gt; [Result] | {error,Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>See <fo:inline font-family="monospace">compile_module/1,2</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {ok,Module} | {error,File} | {error,not_main_node}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>See <fo:inline font-family="monospace">compile_module/1,2</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = eacces | enoent</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compiles all modules (<fo:inline font-family="monospace">.erl</fo:inline> files) in a directory
          <fo:inline font-family="monospace">Dir</fo:inline> for Cover analysis the same way as
          <fo:inline font-family="monospace">compile_module/1,2</fo:inline> and returns a list with the return
          values.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> defaults to the current working directory.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns <fo:inline font-family="monospace">{error,eacces}</fo:inline> if the directory is not
          readable or <fo:inline font-family="monospace">{error,enoent}</fo:inline> if the directory does not exist.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2652016">compile_beam(ModFiles) -&gt; Result | [Result]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModFiles = ModFile | [ModFile]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModFile = Module | BeamFile</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> BeamFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {ok,Module} | {error,BeamFile} | {error,Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Reason = non_existing | {no_abstract_code,BeamFile} | {encrypted_abstract_code,BeamFile} | {already_cover_compiled,no_beam_found,Module} | not_main_node</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Does the same as <fo:inline font-family="monospace">compile/1,2</fo:inline>, but uses an existing
          <fo:inline font-family="monospace">.beam</fo:inline> file as base, i.e. the module is not compiled
          from source. Thus <fo:inline font-family="monospace">compile_beam/1</fo:inline> is faster than
          <fo:inline font-family="monospace">compile/1,2</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the existing <fo:inline font-family="monospace">.beam</fo:inline> file must contain
          <fo:inline font-weight="bold">abstract code</fo:inline>, i.e. it must have been compiled with
          the <fo:inline font-family="monospace">debug_info</fo:inline> option. If not, the error reason
          <fo:inline font-family="monospace">{no_abstract_code,BeamFile}</fo:inline> is returned.
          If the abstract code is encrypted, and no key is available
          for decrypting it, the error reason 
          <fo:inline font-family="monospace">{encrypted_abstract_code,BeamFile}</fo:inline> is returned.</fo:block>
         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If only the module name (i.e. not the full name of the
          <fo:inline font-family="monospace">.beam</fo:inline> file) is given to this function, the
          <fo:inline font-family="monospace">.beam</fo:inline> file is found by calling
          <fo:inline font-family="monospace">code:which(Module)</fo:inline>. If no <fo:inline font-family="monospace">.beam</fo:inline> file is found,
          the error reason <fo:inline font-family="monospace">non_existing</fo:inline> is returned. If the
          module is already cover compiled with <fo:inline font-family="monospace">compile_beam/1</fo:inline>,
          the <fo:inline font-family="monospace">.beam</fo:inline> file will be picked from the same location
          as the first time it was compiled. If the module is already
          cover compiled with <fo:inline font-family="monospace">compile/1,2</fo:inline>, there is no way to
          find the correct <fo:inline font-family="monospace">.beam</fo:inline> file, so the error reason
          <fo:inline font-family="monospace">{already_cover_compiled,no_beam_found,Module}</fo:inline> is
          returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{error,BeamFile}</fo:inline> is returned if the compiled code
          can not be loaded on the node.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a list of <fo:inline font-family="monospace">ModFiles</fo:inline> is given as input, a list
	  of <fo:inline font-family="monospace">Result</fo:inline> will be returned. The order of the returned
	  list is undefined.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2640912">compile_beam_directory() -&gt; [Result] | {error,Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2640496">compile_beam_directory(Dir) -&gt; [Result] | {error,Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = See compile_beam/1</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = eacces | enoent</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compiles all modules (<fo:inline font-family="monospace">.beam</fo:inline> files) in a directory
          <fo:inline font-family="monospace">Dir</fo:inline> for Cover analysis the same way as
          <fo:inline font-family="monospace">compile_beam/1</fo:inline> and returns a list with the return
          values.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> defaults to the current working directory.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns <fo:inline font-family="monospace">{error,eacces}</fo:inline> if the directory is not
          readable or <fo:inline font-family="monospace">{error,enoent}</fo:inline> if the directory does not exist.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2632336">analyse() -&gt; {result,Ok,Fail} | {error,not_main_node}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2631904">analyse(Modules) -&gt; OneResult | {result,Ok,Fail} | {error,not_main_node}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2631456">analyse(Analysis) -&gt; {result,Ok,Fail} | {error,not_main_node}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2631024">analyse(Level) -&gt; {result,Ok,Fail} | {error,not_main_node}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2630592">analyse(Modules, Analysis) -&gt; OneResult | {result,Ok,Fail} | {error,not_main_node}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2630160">analyse(Modules, Level) -&gt; OneResult | {result,Ok,Fail} | {error,not_main_node}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2629728">analyse(Analysis, Level) -&gt; {result,Ok,Fail} | {error,not_main_node}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2629296">analyse(Modules, Analysis, Level) -&gt; OneResult | {result,Ok,Fail} | {error,not_main_node}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Modules = Module | [Module]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom() </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Analysis = coverage | calls</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Level = line | clause | function | module</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OneResult = {ok,{Module,Value}} | {ok,[{Item,Value}]} | {error, Error}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Item = Line | Clause | Function</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">  Line = {M,N}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">  Clause = {M,F,A,C}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">  Function = {M,F,A}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">   M = F = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">   N = A = C = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Value = {Cov,NotCov} | Calls</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">  Cov = NotCov = Calls = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Error = {not_cover_compiled,Module}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ok = [{Module,Value}] | [{Item,Value}]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fail = [Error]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs analysis of one or more Cover compiled modules, as
          specified by <fo:inline font-family="monospace">Analysis</fo:inline> and <fo:inline font-family="monospace">Level</fo:inline> (see above), by
          examining the contents of the internal database.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Analysis</fo:inline> defaults to <fo:inline font-family="monospace">coverage</fo:inline> and <fo:inline font-family="monospace">Level</fo:inline>
          defaults to <fo:inline font-family="monospace">function</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Modules</fo:inline> is an atom (one module), the return will
	  be <fo:inline font-family="monospace">OneResult</fo:inline>, else the return will be
	  <fo:inline font-family="monospace">{result,Ok,Fail}</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Modules</fo:inline> is not given, all modules that have data
	  in the cover data table, are analysed. Note that this
	  includes both cover compiled modules and imported
	  modules.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a given module is not Cover compiled, this is indicated
          by the error reason <fo:inline font-family="monospace">{not_cover_compiled,Module}</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2611600">analyse_to_file() -&gt; {result,Ok,Fail} | {error,not_main_node}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2611216">analyse_to_file(Modules) -&gt;  Answer | {result,Ok,Fail} | {error,not_main_node}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2538448">analyse_to_file(Options) -&gt; {result,Ok,Fail} | {error,not_main_node}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2582416">analyse_to_file(Modules,Options) -&gt; Answer | {result,Ok,Fail} | {error,not_main_node}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Modules = Module | [Module]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OutFile = OutDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = html | {outfile,OutFile} | {outdir,OutDir}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Answer = {ok,OutFile} | {error,Error}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ok = [OutFile]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fail = [Error]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {not_cover_compiled,Module} | {file,File,Reason} | {no_source_code_found,Module}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> File = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes copies of the source file for the given modules,
          where it for each executable line is specified
          how many times it has been executed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The output file <fo:inline font-family="monospace">OutFile</fo:inline> defaults to
          <fo:inline font-family="monospace">Module.COVER.out</fo:inline>, or <fo:inline font-family="monospace">Module.COVER.html</fo:inline> if the
          option <fo:inline font-family="monospace">html</fo:inline> was used.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Modules</fo:inline> is an atom (one module), the return will
	  be <fo:inline font-family="monospace">Answer</fo:inline>, else the return will be a
	  list, <fo:inline font-family="monospace">{result,Ok,Fail}</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Modules</fo:inline> is not given, all modules that have data
	  in the cover data table, are analysed. Note that this
	  includes both cover compiled modules and imported
	  modules.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a module is not Cover compiled, this is indicated by the
          error reason <fo:inline font-family="monospace">{not_cover_compiled,Module}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the source file and/or the output file cannot be opened using
          <fo:inline font-family="monospace">file:open/2</fo:inline>, the function returns
          <fo:inline font-family="monospace">{error,{file,File,Reason}}</fo:inline> where <fo:inline font-family="monospace">File</fo:inline> is the file
          name and <fo:inline font-family="monospace">Reason</fo:inline> is the error reason.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a module was cover compiled from the <fo:inline font-family="monospace">.beam</fo:inline>
          file, i.e. using <fo:inline font-family="monospace">compile_beam/1</fo:inline> or
          <fo:inline font-family="monospace">compile_beam_directory/0,1</fo:inline>, it is assumed that the
          source code can be found in the same directory as the
          <fo:inline font-family="monospace">.beam</fo:inline> file, in <fo:inline font-family="monospace">../src</fo:inline> relative to that
          directory, or using the source path in
          <fo:inline font-family="monospace">Module:module_info(compile)</fo:inline>. When using the latter,
          two paths are examined: first the one constructed by
          joining <fo:inline font-family="monospace">../src</fo:inline> and the tail of the compiled path
          below a trailing <fo:inline font-family="monospace">src</fo:inline> component, then the compiled
          path itself.
          If no source code is found, this is indicated by the error reason
          <fo:inline font-family="monospace">{no_source_code_found,Module}</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2591584">async_analyse_to_file(Module) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2591088">async_analyse_to_file(Module,Options) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2590240">async_analyse_to_file(Module, OutFile) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2590496">async_analyse_to_file(Module, OutFile, Options) -&gt;  pid()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OutFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = html</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {not_cover_compiled,Module} | {file,File,Reason} | {no_source_code_found,Module} | not_main_node</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> File = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function works exactly the same way as 
	<fo:inline font-style="italic">analyse_to_file</fo:inline> except
	that it is asynchronous instead of synchronous. The spawned process
	will link with the caller when created. If an <fo:inline font-family="monospace">Error</fo:inline> occurs
	while doing the cover analysis the process will crash with the same
	error reason as <fo:inline font-style="italic">analyse_to_file</fo:inline> 
	would return.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2582048">modules() -&gt; [Module] | {error,not_main_node}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list with all modules that are currently Cover
          compiled.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2579168">imported_modules() -&gt; [Module] | {error,not_main_node}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list with all modules for which there are
          imported data.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2575840">imported() -&gt; [File] | {error,not_main_node}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list with all imported files.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2572080">which_nodes() -&gt; [Node] | {error,not_main_node}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list with all nodes that are part of the coverage
          analysis. Note that the current node is not returned. This
          node is always part of the analysis.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2569440">is_compiled(Module) -&gt; {file,File} | false |  {error,not_main_node}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Beam = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{file,File}</fo:inline> if the module <fo:inline font-family="monospace">Module</fo:inline> is
          Cover compiled, or <fo:inline font-family="monospace">false</fo:inline> otherwise. <fo:inline font-family="monospace">File</fo:inline> is
          the <fo:inline font-family="monospace">.erl</fo:inline> file used by <fo:inline font-family="monospace">cover:compile_module/1,2</fo:inline>
          or the <fo:inline font-family="monospace">.beam</fo:inline> file used by <fo:inline font-family="monospace">compile_beam/1</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2556128">reset(Module) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2561488">reset() -&gt;  ok | {error,not_main_node}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Resets all coverage data for a Cover compiled module
          <fo:inline font-family="monospace">Module</fo:inline> in the Cover database on all nodes. If the
          argument is omitted, the coverage data will be reset for all
          modules known by Cover.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module</fo:inline> is not Cover compiled, the function returns
          <fo:inline font-family="monospace">{error,{not_cover_compiled,Module}}</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2556288">export(ExportFile)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2555392">export(ExportFile,Module) -&gt; ok | {error,Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExportFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {not_cover_compiled,Module} | {cant_open_file,ExportFile,Reason} | not_main_node</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Exports the current coverage data for <fo:inline font-family="monospace">Module</fo:inline> to the
          file <fo:inline font-family="monospace">ExportFile</fo:inline>. It is recommended to name the
          <fo:inline font-family="monospace">ExportFile</fo:inline> with the extension <fo:inline font-family="monospace">.coverdata</fo:inline>, since
          other filenames can not be read by the web based interface to
          cover.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module</fo:inline> is not given, data for all Cover compiled
          or earlier imported modules is exported.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is useful if coverage data from different
          systems is to be merged.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-family="monospace">cover:import/1</fo:inline></fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2547424">import(ExportFile) -&gt; ok | {error,Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExportFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {cant_open_file,ExportFile,Reason} | not_main_node</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Imports coverage data from the file <fo:inline font-family="monospace">ExportFile</fo:inline>
          created with <fo:inline font-family="monospace">cover:export/1,2</fo:inline>. Any analysis performed
          after this will include the imported data.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that when compiling a module <fo:inline font-weight="bold">all existing coverage data is removed</fo:inline>, including imported data. If a module is
          already compiled when data is imported, the imported data is
          <fo:inline font-weight="bold">added</fo:inline> to the existing coverage data.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Coverage data from several export files can be imported
          into one system. The coverage data is then added up when
          analysing.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Coverage data for a module can not be imported from the
          same file twice unless the module is first reset or
          compiled. The check is based on the filename, so you can
          easily fool the system by renaming your export file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-family="monospace">cover:export/1,2</fo:inline></fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2539120">stop() -&gt; ok | {error,not_main_node}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the Cover server and unloads all Cover compiled code.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2536576">stop(Nodes) -&gt; ok | {error,not_main_node}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Nodes = [atom()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the Cover server and unloads all Cover compiled code
          on the given nodes. Data stored in the Cover database on the
          remote nodes is fetched and stored on the main node.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2533152">flush(Nodes) -&gt; ok | {error,not_main_node}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Nodes = [atom()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Fetch data from the Cover database on the remote nodes and
        stored on the main node.</fo:block>
      </fo:block>
  

  <fo:block id="idp2529968" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SEE ALSO</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">code(3), compile(3)</fo:block>
  
<fo:block page-break-before="always" id="idp2520496" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">cprof</fo:marker>cprof</fo:block>Erlang module</fo:block>
  <fo:block/>
  cprof
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">cprof</fo:inline> module is used to profile a program
      to find out how many times different functions are called.
      Breakpoints similar to local call trace, but containing a
      counter, are used to minimise runtime performance impact. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since breakpoints are used there is no need for special
      compilation of any module to be profiled. For now these
      breakpoints can only be set on BEAM code so s
      cannot be call count traced.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The size of the call counters is the host machine word
      size. One bit is used when pausing the counter, so the maximum
      counter value for a 32-bit host is 2147483647.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The profiling result is delivered as a term containing a
      sorted list of entries, one per module. Each module entry
      contains a sorted list of functions. The sorting order in both
      cases is of decreasing call count.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call count tracing is very lightweight compared to other forms
      of tracing since no trace message has to be generated. Some 
      measurements indicates performance degradation in the vicinity
      of 10 percent.
            
</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2517024">analyse() -&gt; {AllCallCount, ModAnalysisList}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2516064">analyse(Limit) -&gt; {AllCallCount, ModAnalysisList}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2515888">analyse(Mod) -&gt; ModAnalysis</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2515440">analyse(Mod, Limit) -&gt; ModAnalysis</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Limit = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mod = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllCallCount = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModAnalysisList = [ModAnalysis]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModAnalysis = {Mod, ModCallCount, FuncAnalysisList}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModCallCount = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FuncAnalysisList = [{{Mod, Func, Arity}, FuncCallCount}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Func = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Arity = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FuncCallCount = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Collects and analyses the call counters presently in the
          node for either module <fo:inline font-family="monospace">Mod</fo:inline>, or for all modules
          (except <fo:inline font-family="monospace">cprof</fo:inline> itself), and returns: </fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">FuncAnalysisList</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">A list of tuples, one for each function in a module, in
           decreasing <fo:inline font-family="monospace">FuncCallCount</fo:inline> order.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ModCallCount</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The sum of <fo:inline font-family="monospace">FuncCallCount</fo:inline> values for all
           functions in module <fo:inline font-family="monospace">Mod</fo:inline>.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">AllCallCount</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The sum of <fo:inline font-family="monospace">ModCallCount</fo:inline> values for all modules
           concerned in <fo:inline font-family="monospace">ModAnalysisList</fo:inline>.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ModAnalysisList</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">A list of tuples, one for each module except
          <fo:inline font-family="monospace">cprof</fo:inline>, in decreasing <fo:inline font-family="monospace">ModCallCount</fo:inline> order.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If call counters are still running while
          <fo:inline font-family="monospace">analyse/0..2</fo:inline> is executing, you might get an
          inconsistent result. This happens if the process executing
          <fo:inline font-family="monospace">analyse/0..2</fo:inline> gets scheduled out so some other process
          can increment the counters that are being analysed, Calling
          <fo:inline font-family="monospace">pause()</fo:inline> before analysing takes care of the problem.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">Mod</fo:inline> argument is given, the result contains a
          <fo:inline font-family="monospace">ModAnalysis</fo:inline> tuple for module <fo:inline font-family="monospace">Mod</fo:inline> only,
          otherwise the result contains one <fo:inline font-family="monospace">ModAnalysis</fo:inline> tuple
          for all  modules returned from <fo:inline font-family="monospace">code:all_loaded()</fo:inline>
          except <fo:inline font-family="monospace">cprof</fo:inline> itself.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All functions with a <fo:inline font-family="monospace">FuncCallCount</fo:inline> lower than
          <fo:inline font-family="monospace">Limit</fo:inline> are excluded from <fo:inline font-family="monospace">FuncAnalysisList</fo:inline>. They
          are still included in <fo:inline font-family="monospace">ModCallCount</fo:inline>, though. 
          The default value for <fo:inline font-family="monospace">Limit</fo:inline> is <fo:inline font-family="monospace">1</fo:inline>.
                    
</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2490704">pause() -&gt; integer()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Pause call count tracing for all functions in all modules
          and stop it for all functions in modules to be
          loaded. This is the same as 
          <fo:inline font-family="monospace">(pause({'_','_','_'})+stop({on_load}))</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also 
          <fo:inline font-style="italic">pause/1..3</fo:inline> below.
                    
</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2486240">pause(FuncSpec) -&gt; integer()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2485744">pause(Mod, Func) -&gt; integer()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2485296">pause(Mod, Func, Arity) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FuncSpec = Mod | {Mod,Func,Arity}, {FS}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mod = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Func = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Arity = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FS = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Pause call counters for matching functions in matching 
          modules. The <fo:inline font-family="monospace">FS</fo:inline> argument can be used to
          specify the first argument to
          <fo:inline font-family="monospace">erlang:trace_pattern/3</fo:inline>. See erlang(3). 
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The call counters for all matching functions that
          has got call count breakpoints are paused at their current
          count. 
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Return the number of matching functions that can have
          call count breakpoints, the same as
          <fo:inline font-family="monospace">start/0..3</fo:inline> with the same arguments would have
          returned. 
                    
</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2477328">restart() -&gt; integer()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2476720">restart(FuncSpec) -&gt; integer()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2476176">restart(Mod, Func) -&gt; integer()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2475568">restart(Mod, Func, Arity) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FuncSpec = Mod | {Mod,Func,Arity}, {FS}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mod = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Func = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Arity = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FS = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Restart call counters for the matching functions in
          matching modules that are call count traced. The <fo:inline font-family="monospace">FS</fo:inline>
          argument can be used to specify the first argument to
          <fo:inline font-family="monospace">erlang:trace_pattern/3</fo:inline>. See erlang(3).
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The call counters for all matching functions that has got
          call count breakpoints are set to zero and running.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Return the number of matching functions that can have
          call count breakpoints, the same as
          <fo:inline font-family="monospace">start/0..3</fo:inline> with the same arguments would have
          returned. 
                    
</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2467232">start() -&gt; integer()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start call count tracing for all functions in all modules, 
          and also for all functions in modules to be
          loaded. This is the same as 
          <fo:inline font-family="monospace">(start({'_','_','_'})+start({on_load}))</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also 
          <fo:inline font-style="italic">start/1..3</fo:inline> below.
                    
</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2462896">start(FuncSpec) -&gt; integer()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2462448">start(Mod, Func) -&gt; integer()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2462032">start(Mod, Func, Arity) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FuncSpec = Mod | {Mod,Func,Arity}, {FS}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mod = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Func = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Arity = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FS = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start call count tracing for matching functions in matching 
          modules. The <fo:inline font-family="monospace">FS</fo:inline> argument can be used to specify the
          first argument to <fo:inline font-family="monospace">erlang:trace_pattern/3</fo:inline>, for example
          <fo:inline font-family="monospace">on_load</fo:inline>. See erlang(3). 
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set call count breakpoints on the matching functions that
          has no call count breakpoints. Call counters 
          are set to zero and running for all matching functions.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Return the number of matching functions that has got
          call count breakpoints.
                    
</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2453072">stop() -&gt; integer()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stop call count tracing for all functions in all modules, 
          and also for all functions in modules to be
          loaded. This is the same as 
          <fo:inline font-family="monospace">(stop({'_','_','_'})+stop({on_load}))</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also 
          <fo:inline font-style="italic">stop/1..3</fo:inline> below.
                    
</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2448576">stop(FuncSpec) -&gt; integer()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2443472">stop(Mod, Func) -&gt; integer()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2448144">stop(Mod, Func, Arity) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FuncSpec = Mod | {Mod,Func,Arity}, {FS}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mod = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Func = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Arity = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FS = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stop call count tracing for matching functions in matching 
          modules. The <fo:inline font-family="monospace">FS</fo:inline> argument can be used to specify the
          first argument to <fo:inline font-family="monospace">erlang:trace_pattern/3</fo:inline>, for example
          <fo:inline font-family="monospace">on_load</fo:inline>. See erlang(3). 
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Remove call count breakpoints from the matching functions that
          has call count breakpoints.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Return the number of matching functions that can have
          call count breakpoints, the same as
          <fo:inline font-family="monospace">start/0..3</fo:inline> with the same arguments would have
          returned. 
          </fo:block>
      </fo:block>
  

  <fo:block id="idp2439504" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">eprof</fo:inline>(3), 
      <fo:inline font-style="italic">fprof</fo:inline>(3), 
      erlang(3), 
      <fo:inline font-style="italic">User's Guide</fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp2430720" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">eprof</fo:marker>eprof</fo:block>Erlang module</fo:block>
  <fo:block/>
  eprof
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">eprof</fo:inline> provides a set of functions for time
      profiling of Erlang programs to find out how the execution time is
      used. The profiling is done using the Erlang trace BIFs. Tracing of
      local function calls for a specified set of processes is enabled when
      profiling is begun, and disabled when profiling is stopped.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When using Eprof, expect a slowdown in program execution.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1661984">start() -&gt; {ok,Pid} | {error,Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {already_started,Pid}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the Eprof server which holds the internal state of the collected data.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1664320">start_profiling(Rootset) -&gt; profiling | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1663504">start_profiling(Rootset,Pattern) -&gt; profiling | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1662576">start_profiling(Rootset,Pattern,Options) -&gt; profiling | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Rootset = [atom() | pid()]</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pattern = {Module, Function, Arity}</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = Function = atom()</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Arity = integer()</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [set_on_spawn]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts profiling for the processes in <fo:inline font-family="monospace">Rootset</fo:inline> (and any new
          processes spawned from them). Information about activity in any
          profiled process is stored in the Eprof database.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Rootset</fo:inline> is a list of pids and registered names.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns <fo:inline font-family="monospace">profiling</fo:inline> if tracing could be enabled
          for all processes in <fo:inline font-family="monospace">Rootset</fo:inline>, or <fo:inline font-family="monospace">error</fo:inline> otherwise.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A pattern can be selected to narrow the profiling. For instance a
          specific module can be selected, and only the code executed in that
          module will be profiled.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">set_on_spawn</fo:inline> option will active call time tracing for
			all processes spawned by processes in the rootset. This is
			the default behaviour.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2404064">stop_profiling() -&gt; profiling_stopped | profiling_already_stopped</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops profiling started with <fo:inline font-family="monospace">start_profiling/1</fo:inline> or
          <fo:inline font-family="monospace">profile/1</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2399968">profile(Fun) -&gt; profiling | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2399840">profile(Fun, Options) -&gt; profiling | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2399712">profile(Rootset) -&gt; profiling | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2399296">profile(Rootset,Fun) -&gt; {ok, Value} | {error,Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2398224">profile(Rootset,Fun,Pattern) -&gt; {ok, Value} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2397680">profile(Rootset,Module,Function,Args) -&gt; {ok, Value} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2397552">profile(Rootset,Module,Function,Args,Pattern) -&gt; {ok, Value} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2397392">profile(Rootset,Module,Function,Args,Pattern,Options) -&gt; {ok, Value} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Rootset = [atom() | pid()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fun = fun() -&gt; term() end</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pattern = {Module, Function, Arity}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = Function = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Arity = integer()</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [set_on_spawn]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function first spawns a process <fo:inline font-family="monospace">P</fo:inline> which evaluates
          <fo:inline font-family="monospace">Fun()</fo:inline> or <fo:inline font-family="monospace">apply(Module,Function,Args)</fo:inline>. Then, it
          starts profiling for <fo:inline font-family="monospace">P</fo:inline> and the processes in <fo:inline font-family="monospace">Rootset</fo:inline>
          (and any new processes spawned from them). Information about
          activity in any profiled process is stored in the Eprof database.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Rootset</fo:inline> is a list of pids and registered names.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If tracing could be enabled for <fo:inline font-family="monospace">P</fo:inline> and all processes in
          <fo:inline font-family="monospace">Rootset</fo:inline>, the function returns <fo:inline font-family="monospace">{ok,Value}</fo:inline> when
          <fo:inline font-family="monospace">Fun()</fo:inline>/<fo:inline font-family="monospace">apply</fo:inline> returns with the value <fo:inline font-family="monospace">Value</fo:inline>, or
          <fo:inline font-family="monospace">{error,Reason}</fo:inline> if <fo:inline font-family="monospace">Fun()</fo:inline>/<fo:inline font-family="monospace">apply</fo:inline> fails with
		  exit reason <fo:inline font-family="monospace">Reason</fo:inline>. Otherwise it returns <fo:inline font-family="monospace">{error, Reason}</fo:inline>
          immediately.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">set_on_spawn</fo:inline> option will active call time tracing for
			all processes spawned by processes in the rootset. This is
			the default behaviour.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The programmer must ensure that the function given as argument
          is truly synchronous and that no work continues after
          the function has returned a value.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2381200">analyze() -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2380816">analyze(Type) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2380400">analyze(Type,Options) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = procs | total</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [{filter, Filter} | {sort, Sort}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filter = [{calls, integer()} | {time, float()}]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Sort = time | calls | mfa</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call this function when profiling has been stopped to display
          the results per process, that is:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>how much time has been used by each process, and</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>in which function calls this time has been spent.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call <fo:inline font-family="monospace">analyze</fo:inline> with <fo:inline font-family="monospace">total</fo:inline> option when profiling has been stopped to display
          the results per function call, that is in which function calls
          the time has been spent.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Time is shown as percentage of total time and as absolute time.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2372080">log(File) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = atom() | string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function ensures that the results displayed by
          <fo:inline font-family="monospace">analyze/0,1,2</fo:inline> are printed both to the file
          <fo:inline font-family="monospace">File</fo:inline> and the screen.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2367216">stop() -&gt; stopped</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the Eprof server.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp2358592" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erlang.el</fo:marker>erlang.el</fo:block>Erlang module</fo:block>
  <fo:block/>
  erlang.el
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Possibly the most important feature of an editor designed for
      programmers is the ability to indent a line of code in accordance
      with the structure of the programming language. The Erlang mode
      does, of course, provide this feature.  The layout used is based
      on the common use of the language. The mode also provides things as
      syntax highlighting, electric commands, module name verification,
      comment support including paragraph filling, skeletons, tags
      support etc.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following descriptions the use of the word <fo:inline font-weight="bold">Point</fo:inline> means: "Point can be seen as the position of the
      cursor. More precisely, the point is the position between two
      characters while the cursor is drawn over the character
      following the point".</fo:block>
  

  <fo:block id="idp2355776" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Indent</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following command are directly available for indentation.</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">TAB</fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-indent-command</fo:inline>) -
       Indents the current line of code. </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">M-C-\</fo:inline></fo:inline> (<fo:inline font-family="monospace">indent-region</fo:inline>) - Indents all
       lines in the region. </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">M-l</fo:inline></fo:inline> (<fo:inline font-family="monospace">indent-for-comment</fo:inline>) - Insert a
       comment character to the right of the code on the line (if
       any).</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lines containing comment are indented differently depending on
      the number of %-characters used: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Lines with one %-character is indented to the right of
       the code. The column is specified by the variable
      <fo:inline font-family="monospace">comment-column</fo:inline>, by default column 48 is used.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Lines with two %-characters will be indented to the same
       depth as code would have been in the same situation. </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Lines with three of more %-characters are indented to the
       left margin.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-c C-q</fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-indent-function</fo:inline>) -
       Indents the current Erlang function. </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">M-x erlang-indent-clause RET</fo:inline></fo:inline>      <fo:block/>
 -Indent the
       current Erlang clause.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">M-x erlang-indent-current-buffer RET</fo:inline></fo:inline> -
       Indent the entire buffer. </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp2341984" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Edit - Fill Comment </fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When editing normal text in text mode you can let Emacs reformat the
      text by the <fo:inline font-family="monospace">fill-paragraph</fo:inline> command.  This command will not work
      for comments since it will treat the comment characters as words.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang editing mode provides a command that knows about the
      Erlang comment structure and can be used to fill text paragraphs
      in comments. Ex:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      %% This is   just a very simple test to show
      %% how the Erlang fill
      %% paragraph   command works.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clearly, the text is badly formatted.  Instead of formatting this
      paragraph line by line, let's try <fo:inline font-family="monospace">erlang-fill-paragraph</fo:inline> by
      pressing <fo:inline font-weight="bold"><fo:inline font-family="monospace">M-q</fo:inline></fo:inline>. The result is:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      %% This is just a very simple test to show how the Erlang fill
      %% paragraph command works.</fo:block>
  

  <fo:block id="idp2337072" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Edit - Comment/Uncomment Region </fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-c C-c</fo:inline></fo:inline> will put comment characters at the
      beginning of all lines in a marked region. If you want to have
      two comment characters instead of one you can do <fo:inline font-weight="bold"><fo:inline font-family="monospace">C-u 2 C-c C-c</fo:inline></fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-c C-u</fo:inline></fo:inline> will undo a comment-region command. </fo:block>
  

  <fo:block id="idp2332480" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Edit - Moving the marker </fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-a M-a </fo:inline></fo:inline>
       (<fo:inline font-family="monospace">erlang-beginning-of-function</fo:inline>) - Move the point to the
       beginning of the current or preceding Erlang function.  With an
       numeric argument (ex <fo:inline font-weight="bold"><fo:inline font-family="monospace">C-u 2 C-a M-a</fo:inline></fo:inline>) the function
       skips backwards over this many Erlang functions. Should the
       argument be negative the point is moved to the beginning of a
       function below the current function. </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">M-C-a </fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-beginning-of-clause</fo:inline>) - As
       above but move point to the beginning of the current or
       preceding Erlang clause.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-a M-e </fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-end-of-function</fo:inline>)
       - Move to the end of the current or following Erlang function.  With
       an numeric argument (ex <fo:inline font-weight="bold"><fo:inline font-family="monospace">C-u 2 C-a M-e</fo:inline></fo:inline>) the function
       skips backwards over this many Erlang functions. Should the argument
       be negative the point is moved to the end of a function below
       the current function.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">M-C-e </fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-end-of-clause</fo:inline>) - As above
       but move point to the end of the current or following Erlang
       clause.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp2325296" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Edit - Marking </fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-c M-h</fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-mark-function</fo:inline>) - Put the
       region around the current Erlang function.  The point is
       placed in the beginning and the mark at the end of the
       function.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">M-C-h </fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-mark-clause</fo:inline>) Put the region
       around the current Erlang clause.  The point is placed in the
       beginning and the mark at the end of the function. </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp2240480" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Edit - Function Header Commands </fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-c C-j</fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-generate-new-clause</fo:inline>) -
       Create a new clause in the current Erlang function. The point is
       placed between the parentheses of the argument list.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-c C-y</fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-clone-arguments</fo:inline>) -
       Copy the function arguments of the preceding Erlang clause. This
       command is useful when defining a new clause with almost the same
       argument as the preceding.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp2235120" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Edit - Arrows</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-c C-a</fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-align-arrows</fo:inline>) -
          aligns arrows after clauses inside a region.</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        Example:
        
        sum(L) -&gt; sum(L, 0).
        sum([H|T], Sum) -&gt; sum(T, Sum + H);
        sum([], Sum) -&gt; Sum.
        
        becomes:
        
        sum(L)          -&gt; sum(L, 0).
        sum([H|T], Sum) -&gt; sum(T, Sum + H);
        sum([], Sum)    -&gt; Sum.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp2230976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Syntax highlighting</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The syntax highlighting can be activated from the Erlang menu. There
      are four different alternatives:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Off: Normal black and white display.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Level 1: Function headers, reserved words, comments,
       strings, quoted atoms, and character constants will be
       colored. </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Level 2: The above, attributes, Erlang bif:s, guards, and
       words in comments enclosed in single quotes will be colored.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Level 3: The above, variables, records, and macros will
       be colored. (This level is also known as the Christmas tree
       level.) </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp2226864" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Tags</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the tag commands to work it requires that you have
      generated a tag file. See <fo:inline font-style="italic">Erlang mode users guide</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">M-. </fo:inline></fo:inline> (<fo:inline font-family="monospace">find-tag</fo:inline>) -
       Find a function definition. The default value is the function name
       under the point.  </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Find Tag (<fo:inline font-family="monospace">erlang-find-tag</fo:inline>) - Like the Elisp-function
       `find-tag'. Capable of retrieving Erlang modules. Tags can be
       given on the forms `tag', `module:', `module:tag'.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">M-+</fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-find-next-tag</fo:inline>) - Find the
       next occurrence of tag.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">M-TAB</fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-complete-tag</fo:inline>) -
       Perform completion on the tag entered in a tag search.
       Completes to the set of names listed in the current tags table.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Tags aprops (<fo:inline font-family="monospace">tags-apropos</fo:inline>) - Display list of all tags in
       tags table REGEXP matches. </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-x t s</fo:inline></fo:inline> (<fo:inline font-family="monospace">tags-search</fo:inline>) - Search
       through all files listed in tags table for match for REGEXP.
       Stops when a match is found.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp2217296" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Skeletons</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A skeleton is a piece of pre-written code that can be inserted into
      the buffer. Erlang mode comes with a set of predefined skeletons.
      The skeletons can be accessed either from the Erlang menu of
      from commands named <fo:inline font-family="monospace">tempo-template-erlang-*</fo:inline>, as the
      skeletons is defined using the standard Emacs package "tempo".
      Here follows a brief description of the available skeletons:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Simple skeletons: If, Case, Receive, Receive After,
       Receive Loop - Basic code constructs.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Header elements: Module, Author - These commands insert
       lines on the form <fo:inline font-family="monospace">-module(</fo:inline>xxx<fo:inline font-family="monospace">).  </fo:inline> and
      <fo:inline font-family="monospace">-author('my@home').</fo:inline>. They can be used directly, but are
       also used as part of the full headers described below.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Full Headers: Small (minimum requirement), Medium (with
       fields for basic information about the module), and Large
       Header (medium header with some extra layout structure).</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Small Server - skeleton for a simple server not using
       OTP.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Application - skeletons for the OTP application
       behavior</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Supervisor - skeleton for the OTP supervisor behavior</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Supervisor Bridge - skeleton for the OTP supervisor bridge
       behavior </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>gen_server - skeleton for the OTP gen_server
       behavior</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>gen_event - skeleton for the OTP gen_event behavior</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>gen_fsm - skeleton for the OTP gen_fsm behavior</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	gen_statem (StateName/3) - skeleton for the OTP gen_statem behavior
	using state name functions
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	gen_statem (handle_event/4) - skeleton for the OTP gen_statem behavior
	using one state function
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Library module - skeleton for a module that does not
       implement a process.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Corba callback - skeleton for a Corba callback module.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Erlang test suite - skeleton for a callback module
       for the erlang test server.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp2207504" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Shell</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>New shell (<fo:inline font-family="monospace">erlang-shell</fo:inline>) - Starts a new Erlang shell.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-c C-z,</fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-shell-display </fo:inline>) -
       Displays an Erlang shell, or starts a new one if there is no shell
       started.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp2203984" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Compile</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-c C-k,</fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-compile</fo:inline>) -
       Compiles the Erlang module in the current buffer.
       You can also use <fo:inline font-weight="bold"><fo:inline font-family="monospace">C-u C-c C-k</fo:inline></fo:inline>
       to debug compile the module with the debug options
      <fo:inline font-family="monospace">debug_info</fo:inline> and <fo:inline font-family="monospace">export_all</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-c C-l,</fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-compile-display</fo:inline>) -
       Display compilation output.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-u C-x`</fo:inline></fo:inline> Start parsing the compiler output from the
       beginning. This command will place the point on the line where
       the first error was found.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">C-x`</fo:inline></fo:inline> (<fo:inline font-family="monospace">erlang-next-error</fo:inline>) - Move the
       point on to the next error. The buffer displaying the
       compilation errors will be updated so that the current error
       will be visible.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp2196384" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Man</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On unix you can view the manual pages in emacs.
      In order to find the manual pages, the variable `erlang-root-dir'
      should be bound to the name of the directory containing the Erlang
      installation.  The name should not include the final slash.
      Practically, you should add a line on the following form to
      your ~/.emacs,</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      (setq erlang-root-dir "/the/erlang/root/dir/goes/here")</fo:block>
  

  <fo:block id="idp2194848" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Starting IMenu</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">M-x imenu-add-to-menubar RET</fo:inline></fo:inline> - This
       command will create the IMenu menu containing all the functions
       in the current buffer.The command will ask you for a suitable
       name for the menu. Not supported by Xemacs.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp2191952" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Version</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">M-x erlang-version RET</fo:inline></fo:inline> -
       This command displays the version number of the Erlang editing mode.
       Remember to always supply the version number when asking questions
       about the Erlang mode.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  
<fo:block page-break-before="always" id="idp2183440" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">fprof</fo:marker>fprof</fo:block>Erlang module</fo:block>
  <fo:block/>
  fprof
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module is used to profile a program
      to find out how the execution time is used.
      Trace to file is used to minimize 
      runtime performance impact. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">fprof</fo:inline> module uses tracing to collect profiling data, 
      hence there is no need for special compilation of any module to
      be profiled. When it starts tracing, <fo:inline font-family="monospace">fprof</fo:inline> will erase all 
      previous tracing in the node and set the necessary trace flags
      on the profiling target processes as well as local call trace on
      all functions in all loaded modules and all modules to be loaded.
      <fo:inline font-family="monospace">fprof</fo:inline> erases all tracing in the node when it stops tracing.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">fprof</fo:inline> presents both <fo:inline font-weight="bold">own time</fo:inline> i.e how much time a
      function has used for its own execution, and 
      <fo:inline font-weight="bold">accumulated time</fo:inline> i.e including called functions. 
      All presented times are
      collected using trace timestamps. <fo:inline font-family="monospace">fprof</fo:inline> tries to collect
      cpu time timestamps, if the host machine OS supports it. 
      Therefore the times may be wallclock times and OS scheduling will 
      randomly strike all called functions in a presumably fair way.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If, however, the profiling time is short, and the host machine
      OS does not support high resolution cpu time measurements, some
      few OS schedulings may show up as ridiculously long execution
      times for functions doing practically nothing. An example of a
      function more or less just composing a tuple in about 100 times
      the normal execution time has been seen, and when the tracing
      was repeated, the execution time became normal.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Profiling is essentially done in 3 steps:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">1</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Tracing; to file, as mentioned in the previous
       paragraph. The trace contains entries for function calls,
       returns to function, process scheduling, other process related
       (spawn, etc) events, and garbage collection. All trace entries
       are timestamped.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">2</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Profiling; the trace file is read, the execution call
       stack is simulated, and raw profile data is calculated from
       the simulated call stack and the trace timestamps. The profile
       data is stored in the <fo:inline font-family="monospace">fprof</fo:inline> server state. During this
       step the trace data may be dumped in text format to file or
       console. </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">3</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Analysing; the raw profile data is sorted, filtered and
       dumped in text format either to file or console. The text
       format intended to be both readable for a human reader, as
       well as parsable with the standard erlang parsing tools.</fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since <fo:inline font-family="monospace">fprof</fo:inline> uses trace to file, the runtime performance
      degradation is minimized, but still far from negligible,
      especially for programs that use the filesystem heavily by
      themselves. Where you place the trace file is also important,
      e.g on Solaris <fo:inline font-family="monospace">/tmp</fo:inline> is usually a good choice since it is
      essentially a RAM disk, while any NFS (network) mounted disk is
      a bad idea.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">fprof</fo:inline> can also skip the file step and trace to a tracer
      process that does the profiling in runtime.
            
</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2306976">start() -&gt; {ok, Pid} | {error, {already_started, Pid}}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the <fo:inline font-family="monospace">fprof</fo:inline> server. 
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that it seldom
          needs to be started explicitly since it is automatically
          started by the functions that need a running server.
                    
</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2302320">stop() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">stop(normal)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2299440">stop(Reason) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the <fo:inline font-family="monospace">fprof</fo:inline> server.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The supplied <fo:inline font-family="monospace">Reason</fo:inline> becomes the exit reason for the
          server process. Default Any
          <fo:inline font-family="monospace">Reason</fo:inline> other than <fo:inline font-family="monospace">kill</fo:inline> sends a request to the
          server and waits for it to clean up, reply and exit. If
          <fo:inline font-family="monospace">Reason</fo:inline> is <fo:inline font-family="monospace">kill</fo:inline>, the server is bluntly killed.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">fprof</fo:inline> server is not running, this
          function returns immediately with the same return value.
          </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the <fo:inline font-family="monospace">fprof</fo:inline> server is stopped the
            collected raw profile data is lost.</fo:block>
        </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2289536">apply(Func, Args) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Func = function() | {Module, Function}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">apply(Func, Args, [])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2283504">apply(Module, Function, Args) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">apply({Module, Function}, Args, [])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2278992">apply(Func, Args, OptionList) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Func = function() | {Module, Function}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionList = [Option]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = continue | start | {procs, PidList} | TraceStartOption</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">erlang:apply(Func, Args)</fo:inline> surrounded by
          <fo:inline font-family="monospace">trace([start, ...])</fo:inline> and
          <fo:inline font-family="monospace">trace(stop)</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some effort is made to keep the trace clean from unnecessary
          trace messages; tracing is started and stopped from a spawned
          process while the <fo:inline font-family="monospace">erlang:apply/2</fo:inline> call is made in the
          current process, only surrounded by <fo:inline font-family="monospace">receive</fo:inline> and
          <fo:inline font-family="monospace">send</fo:inline> statements towards the trace starting
          process. The trace starting process exits when not needed
          any more.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">TraceStartOption</fo:inline> is any option allowed for 
          <fo:inline font-family="monospace">trace/1</fo:inline>. The options 
          <fo:inline font-family="monospace">[start, {procs, [self() | PidList]} | OptList]</fo:inline> 
          are given to <fo:inline font-family="monospace">trace/1</fo:inline>, where <fo:inline font-family="monospace">OptList</fo:inline> is 
          <fo:inline font-family="monospace">OptionList</fo:inline> with <fo:inline font-family="monospace">continue</fo:inline>, <fo:inline font-family="monospace">start</fo:inline> 
          and <fo:inline font-family="monospace">{procs, _}</fo:inline> options removed.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">continue</fo:inline> option inhibits the call to
          <fo:inline font-family="monospace">trace(stop)</fo:inline> and leaves it up to the caller to stop
          tracing at a suitable time.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2159408">apply(Module, Function, Args, OptionList) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as 
          <fo:inline font-family="monospace">apply({Module, Function}, Args, OptionList)</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OptionList</fo:inline> is an option list allowed for 
          <fo:inline font-family="monospace">apply/3</fo:inline>.
                    
</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2152528">trace(start, Filename) -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">trace([start, {file, Filename}])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2148080">trace(verbose, Filename) -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as 
          <fo:inline font-family="monospace">trace([start, verbose, {file, Filename}])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1680048">trace(OptionName, OptionValue) -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionValue = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as 
          <fo:inline font-family="monospace">trace([{OptionName, OptionValue}])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1674848">trace(verbose) -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">trace([start, verbose])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1670784">trace(OptionName) -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">trace([OptionName])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1666640">trace({OptionName, OptionValue}) -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionValue = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as 
          <fo:inline font-family="monospace">trace([{OptionName, OptionValue}])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp370816">trace([Option]) -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = start | stop | {procs, PidSpec} | {procs, [PidSpec]} | verbose | {verbose, bool()} |  file | {file, Filename} | {tracer, Tracer}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PidSpec = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracer = pid() | port()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts or stops tracing.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">PidSpec</fo:inline> and <fo:inline font-family="monospace">Tracer</fo:inline> are used in calls to
          <fo:inline font-family="monospace">erlang:trace(PidSpec, true, [{tracer, Tracer} | Flags])</fo:inline>, and <fo:inline font-family="monospace">Filename</fo:inline> is used to call 
          <fo:inline font-family="monospace">dbg:trace_port(file, Filename)</fo:inline>. Please see the
          appropriate documentation.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option description:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">stop</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Stops a running <fo:inline font-family="monospace">fprof</fo:inline> trace and clears all tracing
           from the node. Either option <fo:inline font-family="monospace">stop</fo:inline> or <fo:inline font-family="monospace">start</fo:inline> must be
           specified, but not both.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">start</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Clears all tracing from the node and starts a new
          <fo:inline font-family="monospace">fprof</fo:inline> trace. Either option <fo:inline font-family="monospace">start</fo:inline> or
          <fo:inline font-family="monospace">stop</fo:inline> must be specified, but not both.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">verbose</fo:inline>| <fo:inline font-family="monospace">{verbose, bool()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The options <fo:inline font-family="monospace">verbose</fo:inline> or <fo:inline font-family="monospace">{verbose, true}</fo:inline>
           adds some trace flags that <fo:inline font-family="monospace">fprof</fo:inline> does not need, but
           that may be interesting for general debugging
           purposes. This option is only
           allowed with the <fo:inline font-family="monospace">start</fo:inline> option.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cpu_time</fo:inline>| <fo:inline font-family="monospace">{cpu_time, bool()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The options <fo:inline font-family="monospace">cpu_time</fo:inline> or <fo:inline font-family="monospace">{cpu_time, true&gt;</fo:inline>
           makes the timestamps in the trace be in CPU time instead
           of wallclock time which is the default. This option is
           only allowed with the <fo:inline font-family="monospace">start</fo:inline> option.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{procs, PidSpec}</fo:inline>| <fo:inline font-family="monospace">{procs, [PidSpec]}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Specifies which processes that shall be traced. If
           this option is not given, the calling process is
           traced. All processes spawned by the traced processes are
           also traced.
           This option is only allowed with the <fo:inline font-family="monospace">start</fo:inline> option.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">file</fo:inline>| <fo:inline font-family="monospace">{file, Filename}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Specifies the filename of the trace. 
           If the option <fo:inline font-family="monospace">file</fo:inline> is given, or none of these
           options are given, the file <fo:inline font-family="monospace">"fprof.trace"</fo:inline> is used.
           This option is only allowed with the <fo:inline font-family="monospace">start</fo:inline> option,
           but not with the <fo:inline font-family="monospace">{tracer, Tracer}</fo:inline> option.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{tracer, Tracer}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Specifies that trace to process or port shall be done
           instead of trace to file.
           This option is only allowed with the <fo:inline font-family="monospace">start</fo:inline> option,
           but not with the <fo:inline font-family="monospace">{file, Filename}</fo:inline> option.</fo:block></fo:block-container>
        </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2000432">profile() -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">profile([])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp385824">profile(OptionName, OptionValue) -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionValue = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as 
          <fo:inline font-family="monospace">profile([{OptionName, OptionValue}])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp381088">profile(OptionName) -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">profile([OptionName])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idm23728">profile({OptionName, OptionValue}) -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionValue = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as 
          <fo:inline font-family="monospace">profile([{OptionName, OptionValue}])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp492368">profile([Option]) -&gt; ok | {ok, Tracer} | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = file | {file, Filename} | dump | {dump, Dump} |  append | start | stop</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dump = pid() | Dumpfile | []</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracer = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compiles a trace into raw profile data held by the 
          <fo:inline font-family="monospace">fprof</fo:inline> server.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dumpfile</fo:inline> is used to call <fo:inline font-family="monospace">file:open/2</fo:inline>, 
          and <fo:inline font-family="monospace">Filename</fo:inline> is used to call 
          <fo:inline font-family="monospace">dbg:trace_port(file, Filename)</fo:inline>. Please see the
          appropriate documentation.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option description:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">file</fo:inline>| <fo:inline font-family="monospace">{file, Filename}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Reads the file <fo:inline font-family="monospace">Filename</fo:inline> and creates raw
           profile data that is stored in RAM by the
          <fo:inline font-family="monospace">fprof</fo:inline> server. If the option <fo:inline font-family="monospace">file</fo:inline> is
           given, or none of these options are given, the file
          <fo:inline font-family="monospace">"fprof.trace"</fo:inline> is read. The call will return when
           the whole trace has been
           read with the return value <fo:inline font-family="monospace">ok</fo:inline> if successful.
           This option is not allowed with the <fo:inline font-family="monospace">start</fo:inline> or
          <fo:inline font-family="monospace">stop</fo:inline> options.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dump</fo:inline>| <fo:inline font-family="monospace">{dump, Dump}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Specifies the destination for the trace text dump. If
           this option is not given, no dump is generated, if it is
          <fo:inline font-family="monospace">dump</fo:inline> the destination will be the
           caller's group leader, otherwise the destination
          <fo:inline font-family="monospace">Dump</fo:inline> is either the pid of an I/O device or
           a filename. And, finally, if the filename is <fo:inline font-family="monospace">[]</fo:inline> -
          <fo:inline font-family="monospace">"fprof.dump"</fo:inline> is used instead.
           This option is not allowed with the <fo:inline font-family="monospace">stop</fo:inline> option.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">append</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Causes the trace text dump to be appended to the
           destination file.
           This option is only allowed with the  
          <fo:inline font-family="monospace">{dump, Dumpfile}</fo:inline> option.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">start</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Starts a tracer process that profiles trace data in
           runtime. The call will return immediately with the return
           value <fo:inline font-family="monospace">{ok, Tracer}</fo:inline> if successful.
           This option is not allowed with the <fo:inline font-family="monospace">stop</fo:inline>,
          <fo:inline font-family="monospace">file</fo:inline> or  <fo:inline font-family="monospace">{file, Filename}</fo:inline> options.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">stop</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Stops the tracer process that profiles trace data in
           runtime. The return value will be value <fo:inline font-family="monospace">ok</fo:inline> if successful.
           This option is not allowed with the <fo:inline font-family="monospace">start</fo:inline>,
          <fo:inline font-family="monospace">file</fo:inline> or <fo:inline font-family="monospace">{file, Filename}</fo:inline> options.</fo:block></fo:block-container>
        </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2316064">analyse() -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">analyse([])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2320064">analyse(OptionName, OptionValue) -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionValue = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as 
          <fo:inline font-family="monospace">analyse([{OptionName, OptionValue}])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2244336">analyse(OptionName) -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">analyse([OptionName])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2248784">analyse({OptionName, OptionValue}) -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionValue = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as 
          <fo:inline font-family="monospace">analyse([{OptionName, OptionValue}])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2253616">analyse([Option]) -&gt; ok | {error, Reason} |  {'EXIT', ServerPid, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = dest | {dest, Dest} | append | {cols, Cols} |  callers | {callers, bool()} | no_callers | {sort, SortSpec} | totals | {totals, bool()} |  details | {details, bool()} | no_details</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dest = pid() | Destfile</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cols = integer() &gt;= 80</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SortSpec = acc | own</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Analyses raw profile data in the
          <fo:inline font-family="monospace">fprof</fo:inline> server. If called while there is no raw
          profile data available, <fo:inline font-family="monospace">{error, no_profile}</fo:inline> is
          returned. 
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Destfile</fo:inline> is used to call <fo:inline font-family="monospace">file:open/2</fo:inline>. 
          Please see the appropriate documentation.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option description:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dest</fo:inline>| <fo:inline font-family="monospace">{dest, Dest}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Specifies the destination for the analysis. If
           this option is not given or it is <fo:inline font-family="monospace">dest</fo:inline>, 
           the destination will be the caller's group leader, 
           otherwise the destination <fo:inline font-family="monospace">Dest</fo:inline> is either 
           the <fo:inline font-family="monospace">pid()</fo:inline> of an I/O device or a filename. 
           And, finally, if the filename is <fo:inline font-family="monospace">[]</fo:inline> -
          <fo:inline font-family="monospace">"fprof.analysis"</fo:inline> is used instead.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">append</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Causes the analysis to be appended to the
           destination file.
           This option is only allowed with the  
          <fo:inline font-family="monospace">{dest, Destfile}</fo:inline> option.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cols, Cols}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Specifies the number of columns in the analysis text.
           If this option is not given the number of columns is set
           to 80.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">callers</fo:inline>| <fo:inline font-family="monospace">{callers, true}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Prints callers and called information in the
           analysis. This is the default.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{callers, false}</fo:inline>| <fo:inline font-family="monospace">no_callers</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Suppresses the printing of callers and called
           information in the analysis.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sort, SortSpec}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Specifies if the analysis should be sorted according
           to the ACC column, which is the default, or the OWN
           column. See 
          <fo:inline font-style="italic">Analysis Format</fo:inline> below.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">totals</fo:inline>| <fo:inline font-family="monospace">{totals, true}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Includes a section containing call statistics
           for all calls regardless of process, in the analysis.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{totals, false}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Supresses the totals section in the analysis, which is
           the default.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">details</fo:inline>| <fo:inline font-family="monospace">{details, true}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Prints call statistics for each process in the
           analysis. This is the default.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{details, false}</fo:inline>| <fo:inline font-family="monospace">no_details</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Suppresses the call statistics for each process from
           the analysis.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>
  

  <fo:block id="idp3347488" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Analysis format</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the output format of the analyse
      command. See <fo:inline font-style="italic">analyse/0</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The format is parsable with the standard Erlang parsing tools
      <fo:inline font-family="monospace">erl_scan</fo:inline> and <fo:inline font-family="monospace">erl_parse</fo:inline>, <fo:inline font-family="monospace">file:consult/1</fo:inline> or
      <fo:inline font-family="monospace">io:read/2</fo:inline>. The parse format is not explained here - it
      should be easy for the interested to try it out. Note that some
      flags to <fo:inline font-family="monospace">analyse/1</fo:inline> will affect the format. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example was run on OTP/R8 on Solaris 8, all OTP
      internals in this example are very version dependent.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As an example, we will use the following function, that you may
      recognise as a slightly modified benchmark function from the
      manpage file(3):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(foo).
-export([create_file_slow/2]).

create_file_slow(Name, N) when integer(N), N &gt;= 0 -&gt;
    {ok, FD} = 
        file:open(Name, [raw, write, delayed_write, binary]),
    if N &gt; 256 -&gt;
            ok = file:write(FD, 
                            lists:map(fun (X) -&gt; &lt;&lt;X:32/unsigned&gt;&gt; end,
                            lists:seq(0, 255))),
            ok = create_file_slow(FD, 256, N);
       true -&gt;
            ok = create_file_slow(FD, 0, N)
    end,
    ok = file:close(FD).

create_file_slow(FD, M, M) -&gt;
    ok;
create_file_slow(FD, M, N) -&gt;
    ok = file:write(FD, &lt;&lt;M:32/unsigned&gt;&gt;),
    create_file_slow(FD, M+1, N).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us have a look at the printout after running:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">fprof:apply(foo, create_file_slow, [junk, 1024]).</fo:inline>
2&gt; <fo:inline font-weight="bold">fprof:profile().</fo:inline>
3&gt; <fo:inline font-weight="bold">fprof:analyse().</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The printout starts with:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% Analysis results:
{  analysis_options,
 [{callers, true},
  {sort, acc},
  {totals, false},
  {details, true}]}.

%                                       CNT       ACC       OWN        
[{ totals,                             9627, 1691.119, 1659.074}].  %%%</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The CNT column shows the total number of function calls that
      was found in the trace. In the ACC column is the total time of
      the trace from first timestamp to last. And in the OWN
      column is the sum of the execution time in functions found in the
      trace, not including called functions. In this case it is very
      close to the ACC time since the emulator had practically nothing
      else to do than to execute our test program.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All time values in the printout are in milliseconds.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The printout continues:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%                                       CNT       ACC       OWN        
[{ "&lt;0.28.0&gt;",                         9627,undefined, 1659.074}].   %%</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the printout header of one process. The printout
      contains only this one process since we did <fo:inline font-family="monospace">fprof:apply/3</fo:inline>
      which traces only the current process. Therefore the CNT and
      OWN columns perfectly matches the totals above. The ACC column is
      undefined since summing the ACC times of all calls in the process
      makes no sense - you would get something like the ACC value from
      totals above multiplied by the average depth of the call stack,
      or something.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All paragraphs up to the next process header only concerns
      function calls within this process.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now we come to something more interesting:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{[{undefined,                             0, 1691.076,    0.030}],     
 { {fprof,apply_start_stop,4},            0, 1691.076,    0.030},     %
 [{{foo,create_file_slow,2},              1, 1691.046,    0.103},      
  {suspend,                               1,    0.000,    0.000}]}.    

{[{{fprof,apply_start_stop,4},            1, 1691.046,    0.103}],     
 { {foo,create_file_slow,2},              1, 1691.046,    0.103},     %
 [{{file,close,1},                        1, 1398.873,    0.019},      
  {{foo,create_file_slow,3},              1,  249.678,    0.029},      
  {{file,open,2},                         1,   20.778,    0.055},      
  {{lists,map,2},                         1,   16.590,    0.043},      
  {{lists,seq,2},                         1,    4.708,    0.017},      
  {{file,write,2},                        1,    0.316,    0.021}]}.    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The printout consists of one paragraph per called function. The
      function <fo:inline font-weight="bold">marked</fo:inline> with '%' is the one the paragraph
      concerns - <fo:inline font-family="monospace">foo:create_file_slow/2</fo:inline>. Above the marked
      function are the <fo:inline font-weight="bold">calling</fo:inline> functions -  those that has
      called the marked, and below are those <fo:inline font-weight="bold">called</fo:inline> by the
      marked function. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The paragraphs are per default sorted in decreasing order of
      the ACC column for the marked function. The calling list and
      called list within one paragraph are also per default sorted in
      decreasing order of their ACC column.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The columns are: CNT - the number of times the function
      has been called, ACC - the time spent in the
      function including called functions, and OWN - the
      time spent in the function not including called
      functions. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The rows for the <fo:inline font-weight="bold">calling</fo:inline> functions contain statistics
      for the <fo:inline font-weight="bold">marked</fo:inline> function with the constraint that only
      the occasions when a call was made from the <fo:inline font-weight="bold">row's</fo:inline>
      function to the <fo:inline font-weight="bold">marked</fo:inline> function are accounted for.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The row for the <fo:inline font-weight="bold">marked</fo:inline> function simply contains the
      sum of all <fo:inline font-weight="bold">calling</fo:inline> rows.  
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The rows for the <fo:inline font-weight="bold">called</fo:inline> functions contains statistics
      for the <fo:inline font-weight="bold">row's</fo:inline> function with the constraint that only the
      occasions when a call was made from the <fo:inline font-weight="bold">marked</fo:inline> to the
      <fo:inline font-weight="bold">row's</fo:inline> function are accounted for.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">So, we see that <fo:inline font-family="monospace">foo:create_file_slow/2</fo:inline> used very little
      time for its own execution. It spent most of its time in
      <fo:inline font-family="monospace">file:close/1</fo:inline>. The function <fo:inline font-family="monospace">foo:create_file_slow/3</fo:inline>
      that writes 3/4 of the file contents is the second biggest time
      thief. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We also see that the call to <fo:inline font-family="monospace">file:write/2</fo:inline> that writes
      1/4 of the file contents takes very little time in itself. What
      takes time is to build the data (<fo:inline font-family="monospace">lists:seq/2</fo:inline> and
      <fo:inline font-family="monospace">lists:map/2</fo:inline>).
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function 'undefined' that has called
      <fo:inline font-family="monospace">fprof:apply_start_stop/4</fo:inline> is an unknown function because that
      call was not recorded in the trace. It was only recorded
      that the execution returned from
      <fo:inline font-family="monospace">fprof:apply_start_stop/4</fo:inline> to some other function above in
      the call stack, or that the process exited from there.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us continue down the printout to find:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{[{{foo,create_file_slow,2},              1,  249.678,    0.029},      
  {{foo,create_file_slow,3},            768,    0.000,   23.294}],     
 { {foo,create_file_slow,3},            769,  249.678,   23.323},     %
 [{{file,write,2},                      768,  220.314,   14.539},      
  {suspend,                              57,    6.041,    0.000},      
  {{foo,create_file_slow,3},            768,    0.000,   23.294}]}.    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you compare with the code you will see there also that
      <fo:inline font-family="monospace">foo:create_file_slow/3</fo:inline> was called only from
      <fo:inline font-family="monospace">foo:create_file_slow/2</fo:inline> and itself, and called only
      <fo:inline font-family="monospace">file:write/2</fo:inline>, note the number of calls to
      <fo:inline font-family="monospace">file:write/2</fo:inline>. But here we see that <fo:inline font-family="monospace">suspend</fo:inline> was
      called a few times. This is a pseudo function that indicates
      that the process was suspended while executing in
      <fo:inline font-family="monospace">foo:create_file_slow/3</fo:inline>, and since there is no
      <fo:inline font-family="monospace">receive</fo:inline> or <fo:inline font-family="monospace">erlang:yield/0</fo:inline> in the code, it must be
      Erlang scheduling suspensions, or the trace file driver
      compensating for large file write operations (these are regarded
      as a schedule out followed by a schedule in to the same process).
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us find the <fo:inline font-family="monospace">suspend</fo:inline> entry:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{[{{file,write,2},                       53,    6.281,    0.000},      
  {{foo,create_file_slow,3},             57,    6.041,    0.000},      
  {{prim_file,drv_command,4},            50,    4.582,    0.000},      
  {{prim_file,drv_get_response,1},       34,    2.986,    0.000},      
  {{lists,map,2},                        10,    2.104,    0.000},      
  {{prim_file,write,2},                  17,    1.852,    0.000},      
  {{erlang,port_command,2},              15,    1.713,    0.000},      
  {{prim_file,drv_command,2},            22,    1.482,    0.000},      
  {{prim_file,translate_response,2},     11,    1.441,    0.000},      
  {{prim_file,'-drv_command/2-fun-0-',1},  15,    1.340,    0.000},      
  {{lists,seq,4},                         3,    0.880,    0.000},      
  {{foo,'-create_file_slow/2-fun-0-',1},   5,    0.523,    0.000},      
  {{erlang,bump_reductions,1},            4,    0.503,    0.000},      
  {{prim_file,open_int_setopts,3},        1,    0.165,    0.000},      
  {{prim_file,i32,4},                     1,    0.109,    0.000},      
  {{fprof,apply_start_stop,4},            1,    0.000,    0.000}],     
 { suspend,                             299,   32.002,    0.000},     %
 [ ]}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We find no particulary long suspend times, so no function seems
      to have waited in a receive statement. Actually,
      <fo:inline font-family="monospace">prim_file:drv_command/4</fo:inline> contains a receive statement, but
      in this test program, the message lies in the process receive
      buffer when the receive statement is entered. We also see that
      the total suspend time for the test run is small.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">suspend</fo:inline> pseudo function has got an OWN time of
      zero. This is to prevent the process total OWN time from
      including time in suspension. Whether suspend time is really ACC
      or OWN time is more of a philosophical question.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now we look at another interesting pseudo function,
      <fo:inline font-family="monospace">garbage_collect</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{[{{prim_file,drv_command,4},            25,    0.873,    0.873},      
  {{prim_file,write,2},                  16,    0.692,    0.692},      
  {{lists,map,2},                         2,    0.195,    0.195}],     
 { garbage_collect,                      43,    1.760,    1.760},     %
 [ ]}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here we see that no function distinguishes itself considerably,
      which is very normal.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">garbage_collect</fo:inline> pseudo function has not got an OWN
      time of zero like <fo:inline font-family="monospace">suspend</fo:inline>, instead it is equal to the ACC
      time. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Garbage collect often occurs while a process is suspended, but
      <fo:inline font-family="monospace">fprof</fo:inline> hides this fact by pretending that the suspended
      function was first unsuspended and then garbage
      collected. Otherwise the printout would show
      <fo:inline font-family="monospace">garbage_collect</fo:inline> being called from <fo:inline font-family="monospace">suspend</fo:inline> but not
      which function that might have caused the garbage
      collection. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us now get back to the test code:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{[{{foo,create_file_slow,3},            768,  220.314,   14.539},      
  {{foo,create_file_slow,2},              1,    0.316,    0.021}],     
 { {file,write,2},                      769,  220.630,   14.560},     %
 [{{prim_file,write,2},                 769,  199.789,   22.573},      
  {suspend,                              53,    6.281,    0.000}]}.    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Not unexpectedly, we see that <fo:inline font-family="monospace">file:write/2</fo:inline> was called
      from <fo:inline font-family="monospace">foo:create_file_slow/3</fo:inline> and
      <fo:inline font-family="monospace">foo:create_file_slow/2</fo:inline>. The number of calls in each case as
      well as the used time are also just confirms the previous results.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We see that <fo:inline font-family="monospace">file:write/2</fo:inline> only calls
      <fo:inline font-family="monospace">prim_file:write/2</fo:inline>, but let us refrain from digging into the
      internals of the kernel application.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">But, if we nevertheless <fo:inline font-weight="bold">do</fo:inline> dig down we find
      the call to the linked in driver that does the file operations
      towards the host operating system:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{[{{prim_file,drv_command,4},           772, 1458.356, 1456.643}],     
 { {erlang,port_command,2},             772, 1458.356, 1456.643},     %
 [{suspend,                              15,    1.713,    0.000}]}.    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is 86 % of the total run time, and as we saw before it
      is the close operation the absolutely biggest contributor. We
      find a comparison ratio a little bit up in the call stack:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{[{{prim_file,close,1},                   1, 1398.748,    0.024},      
  {{prim_file,write,2},                 769,  174.672,   12.810},      
  {{prim_file,open_int,4},                1,   19.755,    0.017},      
  {{prim_file,open_int_setopts,3},        1,    0.147,    0.016}],     
 { {prim_file,drv_command,2},           772, 1593.322,   12.867},     %
 [{{prim_file,drv_command,4},           772, 1578.973,   27.265},      
  {suspend,                              22,    1.482,    0.000}]}.    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time for file operations in the linked in driver
      distributes itself as 1 % for open, 11 % for write and 87 % for
      close. All data is probably buffered in the operating system
      until the close.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The unsleeping reader may notice that the ACC times for 
      <fo:inline font-family="monospace">prim_file:drv_command/2</fo:inline> and
      <fo:inline font-family="monospace">prim_file:drv_command/4</fo:inline> is not equal between the
      paragraphs above, even though it is easy to believe that
      <fo:inline font-family="monospace">prim_file:drv_command/2</fo:inline> is just a passthrough function.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The missing time can be found in the paragraph
      for <fo:inline font-family="monospace">prim_file:drv_command/4</fo:inline> where it is evident that not
      only <fo:inline font-family="monospace">prim_file:drv_command/2</fo:inline> is called but also a fun:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{[{{prim_file,drv_command,2},           772, 1578.973,   27.265}],     
 { {prim_file,drv_command,4},           772, 1578.973,   27.265},     %
 [{{erlang,port_command,2},             772, 1458.356, 1456.643},      
  {{prim_file,'-drv_command/2-fun-0-',1}, 772,   87.897,   12.736},      
  {suspend,                              50,    4.582,    0.000},      
  {garbage_collect,                      25,    0.873,    0.873}]}.    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And some more missing time can be explained by the fact that
      <fo:inline font-family="monospace">prim_file:open_int/4</fo:inline> both calls
      <fo:inline font-family="monospace">prim_file:drv_command/2</fo:inline> directly as well as through
      <fo:inline font-family="monospace">prim_file:open_int_setopts/3</fo:inline>, which complicates the
      picture. 
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{[{{prim_file,open,2},                    1,   20.309,    0.029},      
  {{prim_file,open_int,4},                1,    0.000,    0.057}],     
 { {prim_file,open_int,4},                2,   20.309,    0.086},     %
 [{{prim_file,drv_command,2},             1,   19.755,    0.017},      
  {{prim_file,open_int_setopts,3},        1,    0.360,    0.032},      
  {{prim_file,drv_open,2},                1,    0.071,    0.030},      
  {{erlang,list_to_binary,1},             1,    0.020,    0.020},      
  {{prim_file,i32,1},                     1,    0.017,    0.017},      
  {{prim_file,open_int,4},                1,    0.000,    0.057}]}.    
.
.
.
{[{{prim_file,open_int,4},                1,    0.360,    0.032},      
  {{prim_file,open_int_setopts,3},        1,    0.000,    0.016}],     
 { {prim_file,open_int_setopts,3},        2,    0.360,    0.048},     %
 [{suspend,                               1,    0.165,    0.000},      
  {{prim_file,drv_command,2},             1,    0.147,    0.016},      
  {{prim_file,open_int_setopts,3},        1,    0.000,    0.016}]}.    </fo:block>
  

  <fo:block id="idp3377744" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Notes</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The actual supervision of execution times is in itself a
      CPU intensive activity. A message is written on the trace file
      for every function call that is made by the profiled code.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ACC time calculation is sometimes difficult to make
      correct, since it is difficult to define. This happens
      especially when a function occurs in several instances in the
      call stack, for example by calling itself perhaps through other
      functions and perhaps even non-tail recursively.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To produce sensible results, <fo:inline font-family="monospace">fprof</fo:inline> tries not to charge
      any function more than once for ACC time. The instance highest
      up (with longest duration) in the call stack is chosen.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sometimes a function may unexpectedly waste a lot (some 10 ms
      or more depending on host machine OS) of OWN (and ACC) time, even
      functions that does practically nothing at all. The problem may
      be that the OS has chosen to schedule out the
      Erlang runtime system process for a while, and if the OS does
      not support high resolution cpu time measurements
      <fo:inline font-family="monospace">fprof</fo:inline> will use wallclock time for its calculations, and
      it will appear as functions randomly burn virtual machine time.</fo:block>
  

  <fo:block id="idp3382080" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">dbg(3), <fo:inline font-style="italic">eprof</fo:inline>(3), erlang(3), 
      io(3), 
      <fo:inline font-style="italic">Tools User's Guide</fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp3390880" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">instrument</fo:marker>instrument</fo:block>Erlang module</fo:block>
  <fo:block/>
  instrument
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">instrument</fo:inline> contains support for studying the resource
      usage in an Erlang runtime system. Currently, only the allocation of memory can
      be studied.</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that this whole module is experimental, and the representations
        used as well as the functionality is likely to change in the future.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">instrument</fo:inline> module interface was slightly changed in
        Erlang/OTP R9C.</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To start an Erlang runtime system with instrumentation, use the
      <fo:inline font-family="monospace">+Mi*</fo:inline> set of command-line arguments to the <fo:inline font-family="monospace">erl</fo:inline> command (see
      the erts_alloc(3) and erl(1) man pages).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The basic object of study in the case of memory allocation is a memory
      allocation map. A memory allocation map contains a list of descriptors
      for each allocated memory block. Currently, a descriptor is a 4-tuple</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        {TypeNo, Address, Size, PidDesc}    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">TypeNo</fo:inline> is the memory block type number, <fo:inline font-family="monospace">Address</fo:inline>
      is its place in memory, and <fo:inline font-family="monospace">Size</fo:inline> is its size, in bytes.
      <fo:inline font-family="monospace">PidDesc</fo:inline> is either a tuple <fo:inline font-family="monospace">{X,Y,Z}</fo:inline> identifying the
      process which was executing when the block was allocated, or
      <fo:inline font-family="monospace">undefined</fo:inline> if no process was executing. The pid tuple
      <fo:inline font-family="monospace">{X,Y,Z}</fo:inline> can be transformed into a real pid by usage of the
      <fo:inline font-family="monospace">c:pid/3</fo:inline> function.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Various details about memory allocation:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Memory blocks are allocated both on the heap segment and on other memory
      segments. This can cause the instrumentation functionality to report
      very large holes. Currently the instrumentation functionality doesn't
      provide any support for distinguishing between holes between memory
      segments, and holes between allocated blocks inside memory segments.
      The current size of the process cannot be obtained from within Erlang,
      but can be seen with one of the system statistics tools, e.g.,
      <fo:inline font-family="monospace">ps</fo:inline> or <fo:inline font-family="monospace">top</fo:inline>. The Solaris utility <fo:inline font-family="monospace">pmap</fo:inline> can be
      useful. It reports currently mapped memory segments. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Overhead for instrumentation: When the emulator has been started with
      the <fo:inline font-style="italic">"+Mim true"</fo:inline>
      flag, each block is preceded by a 24 bytes large
      header on a 32-bit machine and a 48 bytes large header on a 64-bit
      machine. When the emulator has been started with the
      <fo:inline font-style="italic">"+Mis true"</fo:inline>
      flag, each block is preceded by an 8 bytes large header. These are the header
      sizes used by the Erlang 5.3/OTP R9C emulator. Other versions of the
      emulator may use other header sizes. The function
      <fo:inline font-style="italic">block_header_size/1</fo:inline>
      can be used for retrieving the header size used for a specific memory
      allocation map. The time overhead for managing the instrumentation
      data is small.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sizes presented by the instrumentation functionality are (by the
      emulator) requested sizes, i.e. neither instrumentation headers nor
      headers used by allocators are included.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3406400">allocator_descr(MemoryData, TypeNo) -&gt; AllocDescr | invalid_type | "unknown"</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MemoryData = {term(), AllocList}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllocList = [Desc]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Desc = {int(), int(), int(), PidDesc}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PidDesc = {int(), int(), int()} | undefined</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TypeNo = int()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllocDescr = atom() | string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the allocator description of the allocator that
          manages memory blocks of type number <fo:inline font-family="monospace">TypeNo</fo:inline> used in
          <fo:inline font-family="monospace">MemoryData</fo:inline>.
          Valid <fo:inline font-family="monospace">TypeNo</fo:inline>s are in the range returned by
          <fo:inline font-style="italic">type_no_range/1</fo:inline> on
          this specific memory allocation map. If <fo:inline font-family="monospace">TypeNo</fo:inline> is an
          invalid integer, <fo:inline font-family="monospace">invalid_type</fo:inline> is returned.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3413440">block_header_size(MemoryData) -&gt; int()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MemoryData = {term(), AllocList}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllocList = [Desc]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Desc = {int(), int(), int(), PidDesc}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PidDesc = {int(), int(), int()} | undefined</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the memory block header size used by the
          emulator that generated the memory allocation map. The block
          header size may differ between different emulators.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3417856">class_descr(MemoryData, TypeNo) -&gt; ClassDescr | invalid_type | "unknown"</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MemoryData = {term(), AllocList}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllocList = [Desc]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Desc = {int(), int(), int(), PidDesc}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PidDesc = {int(), int(), int()} | undefined</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TypeNo = int()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ClassDescr = atom() | string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the class description of the class that
          the type number <fo:inline font-family="monospace">TypeNo</fo:inline> used in <fo:inline font-family="monospace">MemoryData</fo:inline> belongs
          to.
          Valid <fo:inline font-family="monospace">TypeNo</fo:inline>s are in the range returned by
          <fo:inline font-style="italic">type_no_range/1</fo:inline> on
          this specific memory allocation map. If <fo:inline font-family="monospace">TypeNo</fo:inline> is an
          invalid integer, <fo:inline font-family="monospace">invalid_type</fo:inline> is returned.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3424896">descr(MemoryData) -&gt; DescrMemoryData</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MemoryData = {term(), AllocList}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllocList = [Desc]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Desc = {int(), int(), int(), PidDesc}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PidDesc = {int(), int(), int()} | undefined</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DescrMemoryData = {term(), DescrAllocList}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DescrAllocList = [DescrDesc]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DescrDesc = {TypeDescr, int(), int(), DescrPidDesc}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TypeDescr = atom() | string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DescrPidDesc = pid() | undefined</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a memory allocation map where the type numbers (first
          element of <fo:inline font-family="monospace">Desc</fo:inline>) have been replaced by type descriptions,
          and pid tuples (fourth element of <fo:inline font-family="monospace">Desc</fo:inline>) have been
          replaced by real pids.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3431424">holes(MemoryData) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MemoryData = {term(), AllocList}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllocList = [Desc]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Desc = {int(), int(), int(), PidDesc}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PidDesc = {int(), int(), int()} | undefined</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints out the size of each hole (i.e., the space between
          allocated blocks) on the terminal. <fo:inline font-weight="bold">NOTE:</fo:inline> Really large holes
          are probably holes between memory segments.
          The memory allocation map has to be sorted (see
          <fo:inline font-style="italic">sort/1</fo:inline>).</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3436320">mem_limits(MemoryData) -&gt; {Low, High}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MemoryData = {term(), AllocList}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllocList = [Desc]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Desc = {int(), int(), int(), PidDesc}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PidDesc = {int(), int(), int()} | undefined</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Low = High = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a tuple <fo:inline font-family="monospace">{Low, High}</fo:inline> indicating
          the lowest and highest address used.
          The memory allocation map has to be sorted (see
          <fo:inline font-style="italic">sort/1</fo:inline>).</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3441584">memory_data() -&gt; MemoryData | false</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MemoryData = {term(), AllocList}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllocList = [Desc]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Desc = {int(), int(), int(), PidDesc}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PidDesc = {int(), int(), int()} | undefined</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">MemoryData</fo:inline> (a the memory allocation map)
          if the emulator has been started with the "<fo:inline font-family="monospace">+Mim true</fo:inline>"
          command-line argument; otherwise, <fo:inline font-family="monospace">false</fo:inline>. <fo:inline font-weight="bold">NOTE:</fo:inline><fo:inline font-family="monospace">memory_data/0</fo:inline> blocks execution of other processes while
          the data is collected. The time it takes to collect the data can
          be substantial.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3447376">memory_status(StatusType) -&gt; [StatusInfo] | false</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StatusType = total | allocators | classes | types</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StatusInfo = {About, [Info]}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">About = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Info = {InfoName, Current, MaxSinceLast, MaxEver}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InfoName = sizes|blocks</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Current = int()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxSinceLast = int()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxEver = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of <fo:inline font-family="monospace">StatusInfo</fo:inline> if the emulator has been
          started with the "<fo:inline font-family="monospace">+Mis true</fo:inline>" or "<fo:inline font-family="monospace">+Mim true</fo:inline>"
          command-line argument; otherwise, <fo:inline font-family="monospace">false</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See the
          <fo:inline font-style="italic">read_memory_status/1</fo:inline>
          function for a description of the <fo:inline font-family="monospace">StatusInfo</fo:inline> term.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3455568">read_memory_data(File) -&gt; MemoryData | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MemoryData = {term(), AllocList}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllocList = [Desc]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Desc = {int(), int(), int(), PidDesc}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PidDesc = {int(), int(), int()} | undefined</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads a memory allocation map from the file <fo:inline font-family="monospace">File</fo:inline> and
          returns it. The file is assumed to have been created by
          <fo:inline font-family="monospace">store_memory_data/1</fo:inline>. The error codes are the same as for
          <fo:inline font-family="monospace">file:consult/1</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3461328">read_memory_status(File) -&gt; MemoryStatus | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MemoryStatus = [{StatusType, [StatusInfo]}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StatusType = total | allocators | classes | types</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StatusInfo = {About, [Info]}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">About = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Info = {InfoName, Current, MaxSinceLast, MaxEver}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InfoName = sizes|blocks</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Current = int()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxSinceLast = int()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxEver = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads memory allocation status from the file <fo:inline font-family="monospace">File</fo:inline> and
          returns it. The file is assumed to have been created by
          <fo:inline font-family="monospace">store_memory_status/1</fo:inline>. The error codes are the same as
          for <fo:inline font-family="monospace">file:consult/1</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">StatusType</fo:inline> is <fo:inline font-family="monospace">allocators</fo:inline>, <fo:inline font-family="monospace">About</fo:inline> is
          the allocator that the information is about. When
          <fo:inline font-family="monospace">StatusType</fo:inline> is <fo:inline font-family="monospace">types</fo:inline>, <fo:inline font-family="monospace">About</fo:inline> is
          the memory block type that the information is about. Memory
          block types are not described other than by their name and may
          vary between emulators. When <fo:inline font-family="monospace">StatusType</fo:inline> is <fo:inline font-family="monospace">classes</fo:inline>,
          <fo:inline font-family="monospace">About</fo:inline> is the memory block type class that information is
          presented about. Memory block types are classified after their
          use. Currently the following classes exist:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">process_data</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Erlang process specific data.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">binary_data</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Erlang binaries.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">atom_data</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Erlang atoms.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">code_data</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Erlang code.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">system_data</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Other data used by the system</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">InfoName</fo:inline> is <fo:inline font-family="monospace">sizes</fo:inline>, <fo:inline font-family="monospace">Current</fo:inline>,
          <fo:inline font-family="monospace">MaxSinceLast</fo:inline>, and <fo:inline font-family="monospace">MaxEver</fo:inline> are, respectively, current
          size, maximum size since last call to
          <fo:inline font-family="monospace">store_memory_status/1</fo:inline> or <fo:inline font-family="monospace">memory_status/1</fo:inline> with the
          specific <fo:inline font-family="monospace">StatusType</fo:inline>, and maximum size since the emulator
          was started. When <fo:inline font-family="monospace">InfoName</fo:inline> is <fo:inline font-family="monospace">blocks</fo:inline>, <fo:inline font-family="monospace">Current</fo:inline>,
          <fo:inline font-family="monospace">MaxSinceLast</fo:inline>, and <fo:inline font-family="monospace">MaxEver</fo:inline> are, respectively, current
          number of blocks, maximum number of blocks since last call to
          <fo:inline font-family="monospace">store_memory_status/1</fo:inline> or <fo:inline font-family="monospace">memory_status/1</fo:inline> with the
          specific <fo:inline font-family="monospace">StatusType</fo:inline>, and maximum number of blocks since the
          emulator was started. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">NOTE:</fo:inline>A memory block is accounted for at
          "the first level" allocator. E.g. <fo:inline font-family="monospace">fix_alloc</fo:inline> allocates its
          memory pools via <fo:inline font-family="monospace">ll_alloc</fo:inline>. When a <fo:inline font-family="monospace">fix_alloc</fo:inline> block
          is allocated, neither the block nor the pool in which it resides
          are accounted for as memory allocated via <fo:inline font-family="monospace">ll_alloc</fo:inline> even
          though it is.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3487216">sort(MemoryData) -&gt; MemoryData</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MemoryData = {term(), AllocList}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllocList = [Desc]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Desc = {int(), int(), int(), PidDesc}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PidDesc = {int(), int(), int()} | undefined</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sorts a memory allocation map so that the addresses are in
          ascending order.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3492416">store_memory_data(File) -&gt; true|false</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stores the current memory allocation map on the file
          <fo:inline font-family="monospace">File</fo:inline>. Returns <fo:inline font-family="monospace">true</fo:inline> if the emulator has been
          started with the "<fo:inline font-family="monospace">+Mim true</fo:inline>" command-line argument, and
          the map was successfully stored; otherwise, <fo:inline font-family="monospace">false</fo:inline>. The
          contents of the file can later be read using
          <fo:inline font-style="italic">read_memory_data/1</fo:inline>.
          <fo:inline font-weight="bold">NOTE:</fo:inline><fo:inline font-family="monospace">store_memory_data/0</fo:inline> blocks execution of
          other processes while the data is collected. The time it takes
          to collect the data can be substantial.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3499168">store_memory_status(File) -&gt; true|false</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stores the current memory status on the file
          <fo:inline font-family="monospace">File</fo:inline>. Returns <fo:inline font-family="monospace">true</fo:inline> if the emulator has been
          started with the "<fo:inline font-family="monospace">+Mis true</fo:inline>", or "<fo:inline font-family="monospace">+Mim true</fo:inline>"
          command-line arguments, and the data was successfully stored;
          otherwise, <fo:inline font-family="monospace">false</fo:inline>. The contents of the file can later be
          read using
          <fo:inline font-style="italic">read_memory_status/1</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3505504">sum_blocks(MemoryData) -&gt; int()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MemoryData = {term(), AllocList}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllocList = [Desc]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Desc = {int(), int(), int(), PidDesc}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PidDesc = {int(), int(), int()} | undefined</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the total size of the memory blocks in the list.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3510128">type_descr(MemoryData, TypeNo) -&gt; TypeDescr | invalid_type</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MemoryData = {term(), AllocList}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllocList = [Desc]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Desc = {int(), int(), int(), PidDesc}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PidDesc = {int(), int(), int()} | undefined</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TypeNo = int()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TypeDescr = atom() | string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the type description of a type number used in
          <fo:inline font-family="monospace">MemoryData</fo:inline>.
          Valid <fo:inline font-family="monospace">TypeNo</fo:inline>s are in the range returned by
          <fo:inline font-style="italic">type_no_range/1</fo:inline> on
          this specific memory allocation map. If <fo:inline font-family="monospace">TypeNo</fo:inline> is an
          invalid integer, <fo:inline font-family="monospace">invalid_type</fo:inline> is returned.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3518288">type_no_range(MemoryData) -&gt; {Min, Max}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MemoryData = {term(), AllocList}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllocList = [Desc]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Desc = {int(), int(), int(), PidDesc}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PidDesc = {int(), int(), int()} | undefined</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Min = int()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Max = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the memory block type number range used in
          <fo:inline font-family="monospace">MemoryData</fo:inline>. When the memory allocation map was generated
          by an Erlang 5.3/OTP R9C or newer emulator, all integers <fo:inline font-family="monospace">T</fo:inline>
          that satisfy <fo:inline font-family="monospace">Min</fo:inline> &lt;= <fo:inline font-family="monospace">T</fo:inline> &lt;= <fo:inline font-family="monospace">Max</fo:inline> are
          valid type numbers. When the memory allocation map was generated
          by a pre Erlang 5.3/OTP R9C emulator, all integers in the
          range are <fo:inline font-weight="bold">not</fo:inline> valid type numbers.</fo:block>
      </fo:block>
  

  <fo:block id="idp3527488" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">erts_alloc(3)</fo:inline>,
      <fo:inline font-style="italic">erl(1)</fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp3537952" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">lcnt</fo:marker>lcnt</fo:block>Erlang module</fo:block>
    <fo:block/>
    lcnt
    <fo:block/>
    
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">lcnt</fo:inline> module is used to profile the internal ethread locks in the
	    Erlang Runtime System. With <fo:inline font-family="monospace">lcnt</fo:inline> enabled, internal counters in the
	    runtime system are updated each time a lock is taken. The counters stores
	    information about the number of acquisition tries and the number of collisions
	    that has occurred during the acquisition tries. The counters also record the
	    waiting time a lock has caused for a blocked thread when a collision has occurred.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    The data produced by the lock counters will give an estimate on how well
	    the runtime system will behave from a parallelizable view point for the
	    scenarios tested. This tool was mainly developed to help Erlang runtime
	    developers iron out potential and generic bottlenecks.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Locks in the emulator are named after what type of resource they protect and where
	    in the emulator they are initialized, those are lock 'classes'. Most of those
	    locks are also instantiated several times, and given unique identifiers, to increase
	    locking granularity. Typically an instantiated lock protects a disjunct set of
	    the resource, for example ets tables, processes or ports. In other cases it protects a
	    specific range of a resource, for example <fo:inline font-family="monospace">pix_lock</fo:inline> which protects index to process
	    mappings, and is given a unique number within the class. A unique lock in <fo:inline font-family="monospace">lcnt</fo:inline>
	    is referenced by a name (class) and an identifier: <fo:inline font-family="monospace">{Name, Id}</fo:inline>.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some locks in the system are static and protects global resources, for example
	    <fo:inline font-family="monospace">bif_timers</fo:inline> and the <fo:inline font-family="monospace">run_queue</fo:inline> locks. Other locks are dynamic and not
	    necessarily long lived, for example process locks and ets-table locks. The
	    statistics data from short lived locks can be stored separately when the locks
	    are deleted. This behavior is by default turned off to save memory but can be
	    turned on via <fo:inline font-family="monospace">lcnt:rt_opt({copy_save, true})</fo:inline>. The <fo:inline font-family="monospace">lcnt:apply/1,2,3</fo:inline>
	    functions enables this behavior during profiling.
	</fo:block>
    
    <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3547440">start() -&gt; {ok, Pid} | {error, {already_started, Pid}} </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the lock profiler server. The server only act as a medium for the
		    user and performs filtering and printing of data collected by <fo:inline font-family="monospace">lcnt:collect/1</fo:inline>.
		</fo:block>
	    </fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3551200">stop() -&gt; ok</fo:block></fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the lock profiler server.</fo:block>
	    </fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3553472">collect() -&gt; ok</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">collect(node())</fo:inline>.</fo:block></fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3556288">collect(Node) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = node()</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Collects lock statistics from the runtime system. The function starts a
		    server if it is not already started. It then populates the server with lock
		    statistics. If the server held any lock statistics data before the collect then
		    that data is lost.
		</fo:block>
		<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
			When collection occurs the runtime system transitions to a single thread,
			blocking all other threads. No other tasks will be scheduled during this
			operation. Depending on the size of the data this might take a long time
			(several seconds) and cause timeouts in the system.
		    </fo:block>
		</fo:block>
	    </fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3560880">clear() -&gt; ok</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">clear(node())</fo:inline>.</fo:block></fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3563696">clear(Node) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = node()</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clears the internal lock statistics from the runtime system. This does not clear the
		    data on the server only on runtime system. All counters for static locks are zeroed,
		    all dynamic locks currently alive are zeroed and all saved locks now destroyed are removed.
		    It also resets the duration timer.
		</fo:block>
	    </fo:block>
	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3567184">conflicts() -&gt; ok</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">conflicts([])</fo:inline>.</fo:block></fo:block>
	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3570000">conflicts([Option]) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option     = {sort, Sort} | {reverse, bool()} | {thresholds, [Thresholds]} | {print, [Print | {Print, integer()}]} | {max_locks, MaxLocks} | {combine, bool()}</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Sort       = name | id | type | tries | colls | ratio | time | entry</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Thresholds = {tries, integer()} | {colls, integer()} | {time, integer()}</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Print      = name | id | type | entry | tries | colls | ratio | time | duration</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxLocks   = integer() | none</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints a list of internal locks and its statistics.</fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For option description, see <fo:inline font-style="italic">lcnt:inspect/2</fo:inline>.</fo:block>
	    </fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3576528">locations() -&gt; ok</fo:block></fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">locations([])</fo:inline>.</fo:block>
	    </fo:block>
	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3579664">locations([Option]) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option     = {sort, Sort} | {thresholds, [Thresholds]} | {print, [Print | {Print, integer()}]} | {max_locks, MaxLocks} | {combine, bool()}</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Sort       = name | id | type | tries | colls | ratio | time | entry</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Thresholds = {tries, integer()} | {colls, integer()} | {time, integer()}</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Print      = name | id | type | entry | tries | colls | ratio | time | duration</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxLocks   = integer() | none</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints a list of internal lock counters by source code locations.</fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For option description, see <fo:inline font-style="italic">lcnt:inspect/2</fo:inline>.</fo:block>
	    </fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3586208">inspect(Lock) -&gt; ok</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">inspect(Lock, [])</fo:inline>.</fo:block></fo:block>
	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3589024">inspect(Lock, [Option]) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Lock       = Name | {Name, Id | [Id]}</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name       = atom() | pid() | port()</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Id         = atom() | integer() | pid() | port()</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option     = {sort, Sort} | {thresholds, [Thresholds]} | {print, [Print | {Print, integer()}]} | {max_locks, MaxLocks} | {combine, bool()} | {locations, bool()}</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Sort       = name | id | type | tries | colls | ratio | time</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Thresholds = {tries, integer()} | {colls, integer()} | {time, integer()}</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Print      = name | id | type | entry | tries | colls | ratio | time | duration</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxLocks   = integer() | none</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints a list of internal lock counters for a specific lock.</fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lock <fo:inline font-family="monospace">Name</fo:inline> and <fo:inline font-family="monospace">Id</fo:inline> for ports and processes are interchangeable with the use of <fo:inline font-family="monospace">lcnt:swap_pid_keys/0</fo:inline> and is the reason why <fo:inline font-family="monospace">pid()</fo:inline> and <fo:inline font-family="monospace">port()</fo:inline> options can be used in both <fo:inline font-family="monospace">Name</fo:inline> and <fo:inline font-family="monospace">Id</fo:inline> space. Both pids and ports are special identifiers with stripped creation and can be recreated with <fo:inline font-style="italic">lcnt:pid/2,3</fo:inline> and <fo:inline font-style="italic">lcnt:port/1,2</fo:inline>.  </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option description:</fo:block>
		<fo:block space-after="0.25em" space-before="0.25em">
		    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{combine, bool()}</fo:inline></fo:block>
		    <fo:block-container><fo:block start-indent="2em">Combine the statistics from different instances of a lock class.
			<fo:block/>Default: <fo:inline font-family="monospace">true</fo:inline>
		    </fo:block></fo:block-container>

		    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{locations, bool()}</fo:inline></fo:block>
		    <fo:block-container><fo:block start-indent="2em">Print the statistics by source file and line numbers.
			<fo:block/>Default: <fo:inline font-family="monospace">false</fo:inline>
		    </fo:block></fo:block-container>

		    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{max_locks, MaxLocks}</fo:inline></fo:block>
		    <fo:block-container><fo:block start-indent="2em">Maximum number of locks printed or no limit with <fo:inline font-family="monospace">none</fo:inline>.
			<fo:block/>Default: <fo:inline font-family="monospace">20</fo:inline>
		    </fo:block></fo:block-container>

		    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{print, PrintOptions}</fo:inline></fo:block>
		    <fo:block-container><fo:block start-indent="2em">Printing options:
			<fo:block space-after="0.25em" space-before="0.25em">
			    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">name</fo:inline></fo:block>
			    <fo:block-container><fo:block start-indent="2em">Named lock or named set of locks (classes). The same name used for initializing the lock in the VM.</fo:block></fo:block-container>

			    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">id</fo:inline></fo:block>
			    <fo:block-container><fo:block start-indent="2em">Internal id for set of locks, not always unique. This could be table name for ets tables (db_tab), port id for ports, integer identifiers for allocators, etc.</fo:block></fo:block-container>

			    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">type</fo:inline></fo:block>
			    <fo:block-container><fo:block start-indent="2em">Type of lock: <fo:inline font-family="monospace">rw_mutex</fo:inline>, <fo:inline font-family="monospace">mutex</fo:inline>, <fo:inline font-family="monospace">spinlock</fo:inline>, <fo:inline font-family="monospace">rw_spinlock</fo:inline> or <fo:inline font-family="monospace">proclock</fo:inline>.</fo:block></fo:block-container>

			    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">entry</fo:inline></fo:block>
			    <fo:block-container><fo:block start-indent="2em">In combination with <fo:inline font-family="monospace">{locations, true}</fo:inline> this option prints the lock operations source file and line number entry-points along with statistics for each entry. </fo:block></fo:block-container>

			    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">tries</fo:inline></fo:block>
			    <fo:block-container><fo:block start-indent="2em">Number of acquisitions of this lock.</fo:block></fo:block-container>

			    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">colls</fo:inline></fo:block>
			    <fo:block-container><fo:block start-indent="2em">Number of collisions when a thread tried to acquire this lock. This is when a trylock is EBUSY, a write try on read held rw_lock, a try read on write held rw_lock, a thread tries to lock an already locked lock. (Internal states supervises this).</fo:block></fo:block-container>

			    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ratio</fo:inline></fo:block>
			    <fo:block-container><fo:block start-indent="2em">The ratio between the number of collisions and the number of tries (acquisitions) in percentage.</fo:block></fo:block-container>

			    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">time</fo:inline></fo:block>
			    <fo:block-container><fo:block start-indent="2em">Accumulated waiting time for this lock. This could be greater than actual wall clock time, it is accumulated for all threads. Trylock conflicts does not accumulate time.</fo:block></fo:block-container>

			    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">duration</fo:inline></fo:block>
			    <fo:block-container><fo:block start-indent="2em">Percentage of accumulated waiting time of wall clock time. This percentage can be higher than 100% since accumulated time is from all threads.</fo:block></fo:block-container>
			</fo:block>
			<fo:block/>Default: <fo:inline font-family="monospace">[name,id,tries,colls,ratio,time,duration]</fo:inline>
		    </fo:block></fo:block-container>

		    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{reverse, bool()}</fo:inline></fo:block>
		    <fo:block-container><fo:block start-indent="2em">Reverses the order of sorting.
			<fo:block/>Default: <fo:inline font-family="monospace">false</fo:inline>
		    </fo:block></fo:block-container>

		    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sort, Sort}</fo:inline></fo:block>
		    <fo:block-container><fo:block start-indent="2em">Column sorting orders.
			<fo:block/>Default: <fo:inline font-family="monospace">time</fo:inline>
		    </fo:block></fo:block-container>

		    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{thresholds, Thresholds}</fo:inline></fo:block>
		    <fo:block-container><fo:block start-indent="2em">Filtering thresholds. Anything values above the threshold value are passed through.
			<fo:block/>Default: <fo:inline font-family="monospace">[{tries, 0}, {colls, 0}, {time, 0}]</fo:inline>
		    </fo:block></fo:block-container>

		</fo:block>

	    </fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3628208">information() -&gt; ok</fo:block></fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints lcnt server state and generic information about collected lock statistics.</fo:block>
	    </fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3630576">swap_pid_keys() -&gt; ok</fo:block></fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Swaps places on <fo:inline font-family="monospace">Name</fo:inline> and <fo:inline font-family="monospace">Id</fo:inline> space for ports and processes.</fo:block>
	    </fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3634640">load(Filename) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filename = filename()</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Restores previously saved data to the server.</fo:block>
	    </fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3637840">save(Filename) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filename = filename()</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Saves the collected data to file.</fo:block>
	    </fo:block>
    

    <fo:block id="idp3641168" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Convenience functions</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions are used for convenience.</fo:block>
    
    <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3642832">apply(Fun) -&gt; term()</fo:block></fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">apply(Fun, [])</fo:inline>.</fo:block>
	    </fo:block>
	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3645968">apply(Fun, Args) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fun = fun()</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Clears the lock counters and then setups the instrumentation to save all destroyed locks.
		    After setup the fun is called, passing the elements in <fo:inline font-family="monospace">Args</fo:inline> as arguments.
		    When the fun returns the statistics are immediately collected to the server. After the
		    collection the instrumentation is returned to its previous behavior.
		    The result of the applied fun is returned.
		</fo:block>
	    </fo:block>
	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3650432">apply(Module, Function, Args) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = atom()</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Clears the lock counters and then setups the instrumentation to save all destroyed locks.
		    After setup the function is called, passing the elements in <fo:inline font-family="monospace">Args</fo:inline> as arguments.
		    When the function returns the statistics are immediately collected to the server. After the
		    collection the instrumentation is returned to its previous behavior.
		    The result of the applied function is returned.
		</fo:block>
	    </fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3655344">pid(Id, Serial) -&gt; pid()</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">pid(node(), Id, Serial)</fo:inline>.</fo:block></fo:block>
	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3658176">pid(Node, Id, Serial) -&gt; pid()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = node()</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Id = integer()</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Serial = integer()</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a process id with creation 0. Example:</fo:block>
	    </fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3662272">port(Id) -&gt; port()</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">port(node(), Id)</fo:inline>.</fo:block></fo:block>
	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3665088">port(Node, Id) -&gt; port()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = node()</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Id = integer()</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a port id with creation 0.</fo:block></fo:block>

    

    <fo:block id="idp3668560" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Internal runtime lock counter controllers</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> The following functions control the behavior of the internal counters.  </fo:block>
    

    <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3670288">rt_collect() -&gt; [lock_counter_data()]</fo:block></fo:block> <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">rt_collect(node())</fo:inline>.</fo:block> </fo:block>
	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3673440">rt_collect(Node) -&gt; [lock_counter_data()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = node()</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block> <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of raw lock counter data.</fo:block> </fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3676672">rt_clear() -&gt; ok</fo:block></fo:block> <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">rt_clear(node())</fo:inline>.</fo:block> </fo:block>
	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3679808">rt_clear(Node) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = node()</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block> <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clear the internal counters. Same as <fo:inline font-family="monospace">lcnt:clear(Node)</fo:inline>.</fo:block></fo:block>

	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3683264">rt_opt({Type, bool()}) -&gt; bool()</fo:block></fo:block> <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">rt_opt(node(), {Type, Opt})</fo:inline>.</fo:block> </fo:block>
	<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3686448">rt_opt(Node, {Type, bool()}) -&gt; bool()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = node()</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = copy_save | process_locks</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the lock counter behavior and returns the previous behaviour.</fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option description:</fo:block>
		<fo:block space-after="0.25em" space-before="0.25em">
		    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{copy_save, bool()}</fo:inline></fo:block>
		    <fo:block-container><fo:block start-indent="2em">Enable statistics saving from destroyed locks by copying. This might consume a lot of memory.
			<fo:block/>Default: <fo:inline font-family="monospace">false</fo:inline>
		    </fo:block></fo:block-container>

		    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{process_locks, bool()}</fo:inline></fo:block>
		    <fo:block-container><fo:block start-indent="2em">Profile process locks.
			<fo:block/>Default: <fo:inline font-family="monospace">true</fo:inline>
		    </fo:block></fo:block-container>
		</fo:block>
	    </fo:block>
    

    <fo:block id="idp3694832" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> <fo:inline font-style="italic">LCNT User's Guide</fo:inline></fo:block>
    
<fo:block page-break-before="always" id="idp3702592" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">make</fo:marker>make</fo:block>Erlang module</fo:block>
  <fo:block/>
  make
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">make</fo:inline> provides a set of functions similar to
      the UNIX type <fo:inline font-family="monospace">Make</fo:inline> functions.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3705920">all() -&gt; up_to_date | error</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3706384">all(Options) -&gt; up_to_date | error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Option = noexec | load | netload | {emake, Emake} | &lt;compiler option&gt;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function determines the set of modules to compile and the
          compile options to use, by first looking for the <fo:inline font-family="monospace">emake</fo:inline> make
          option, if not present reads the configuration from a file named
          <fo:inline font-family="monospace">Emakefile</fo:inline> (see below). If no such file is found, the
          set of modules to compile defaults to all modules in the
          current working directory.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traversing the set of modules, it then recompiles every module for
          which at least one of the following conditions apply:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>there is no object file, or</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the source file has been modified since it was last compiled,
           or,</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>an include file has been modified since the source file was
           last compiled.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As a side effect, the function prints the name of each module it
          tries to compile. If compilation fails for a module, the make
          procedure stops and <fo:inline font-family="monospace">error</fo:inline> is returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Options</fo:inline> is a list of make- and compiler options.
          The following make options exist:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">noexec</fo:inline>          <fo:block/>

           No execution mode. Just prints the name of each module that needs
           to be compiled.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">load</fo:inline>          <fo:block/>

           Load mode. Loads all recompiled modules.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">netload</fo:inline>          <fo:block/>

           Net load mode. Loads all recompiled modules on all known nodes.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{emake, Emake}</fo:inline>          <fo:block/>

           Rather than reading the <fo:inline font-family="monospace">Emakefile</fo:inline> specify configuration explicitly.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All items in <fo:inline font-family="monospace">Options</fo:inline> that are not make options are assumed
          to be compiler options and are passed as-is to
          <fo:inline font-family="monospace">compile:file/2</fo:inline>. <fo:inline font-family="monospace">Options</fo:inline> defaults to <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3723696">files(ModFiles) -&gt; up_to_date | error</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3724160">files(ModFiles, Options) -&gt; up_to_date | error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModFiles = [Module | File]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> File = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Option = noexec | load | netload | &lt;compiler option&gt;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">files/1,2</fo:inline> does exactly the same thing as <fo:inline font-family="monospace">all/0,1</fo:inline> but
          for the specified <fo:inline font-family="monospace">ModFiles</fo:inline>, which is a list of module or
          file names. The file extension <fo:inline font-family="monospace">.erl</fo:inline> may be omitted.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Emakefile</fo:inline> (if it exists) in the current
          directory is searched for compiler options for each module. If
          a given module does not exist in <fo:inline font-family="monospace">Emakefile</fo:inline> or if
          <fo:inline font-family="monospace">Emakefile</fo:inline> does not exist, the module is still compiled.</fo:block>
      </fo:block>
  

  <fo:block id="idp3733024" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Emakefile</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">make:all/0,1</fo:inline> and <fo:inline font-family="monospace">make:files/1,2</fo:inline> first looks for
      <fo:inline font-family="monospace">{emake, Emake}</fo:inline> in options, then in the current working directory
      for a file named <fo:inline font-family="monospace">Emakefile</fo:inline>. If present <fo:inline font-family="monospace">Emake</fo:inline> should
      contain elements like this:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Modules.
{Modules,Options}.    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Modules</fo:inline> is an atom or a list of atoms. It can be 
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>a module name, e.g. <fo:inline font-family="monospace">file1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>a module name in another directory,
       e.g. <fo:inline font-family="monospace">../foo/file3</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>a set of modules specified with a wildcards,
       e.g. <fo:inline font-family="monospace">'file*'</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>a wildcard indicating all modules in current directory,
       i.e. <fo:inline font-family="monospace">'*'</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>a list of any of the above,
       e.g. <fo:inline font-family="monospace">['file*','../foo/file3','File4']</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Options</fo:inline> is a list of compiler options.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Emakefile</fo:inline> is read from top to bottom. If a module
      matches more than one entry, the first match is valid. For
      example, the following <fo:inline font-family="monospace">Emakefile</fo:inline> means that <fo:inline font-family="monospace">file1</fo:inline>
      shall be compiled with the options
      <fo:inline font-family="monospace">[debug_info,{i,"../foo"}]</fo:inline>, while all other files in the
      current directory shall be compiled with only the
      <fo:inline font-family="monospace">debug_info</fo:inline> flag.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{'file1',[debug_info,{i,"../foo"}]}.
{'*',[debug_info]}.    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
  
<fo:block page-break-before="always" id="idp3754432" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">tags</fo:marker>tags</fo:block>Erlang module</fo:block>
  <fo:block/>
  tags
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">TAGS</fo:inline> file is used by Emacs to find function and variable
      definitions in any source file in large projects.  This module can
      generate a <fo:inline font-family="monospace">TAGS</fo:inline> file from Erlang source files.  It recognises
      functions, records, and macro definitions.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3757936">file(File [, Options])</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create a <fo:inline font-family="monospace">TAGS</fo:inline> file for the file <fo:inline font-family="monospace">File</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3761968">files(FileList [, Options])</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create a TAGS file for the files in the list
          <fo:inline font-family="monospace">FileList</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3765184">dir(Dir [, Options])</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create a TAGS file for all files in directory
          <fo:inline font-family="monospace">Dir</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3768400">dirs(DirList [, Options])</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create a TAGS file for all files in any directory in
          <fo:inline font-family="monospace">DirList</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3771632">subdir(Dir [, Options])</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Descend recursively down the directory <fo:inline font-family="monospace">Dir</fo:inline> and
          create a <fo:inline font-family="monospace">TAGS</fo:inline> file based on all files found.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3775744">subdirs(DirList [, Options])</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Descend recursively down all the directories in
          <fo:inline font-family="monospace">DirList</fo:inline> and create a <fo:inline font-family="monospace">TAGS</fo:inline> file based on all
          files found.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3779920">root([Options])</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create a <fo:inline font-family="monospace">TAGS</fo:inline> file covering all files in
          the Erlang distribution.</fo:block>
      </fo:block>
  

  <fo:block id="idp3783296" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">OPTIONS</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions above have an optional argument, <fo:inline font-family="monospace">Options</fo:inline>.  It is a
      list which can contain the following elements:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{outfile, NameOfTAGSFile}</fo:inline> Create a <fo:inline font-family="monospace">TAGS</fo:inline> file named
      <fo:inline font-family="monospace">NameOfTAGSFile</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{outdir, NameOfDirectory}</fo:inline> Create a file named
      <fo:inline font-family="monospace">TAGS</fo:inline> in the directory <fo:inline font-family="monospace">NameOfDirectory</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default behaviour is to create a file named <fo:inline font-family="monospace">TAGS</fo:inline> in the current
      directory.</fo:block>
  

  <fo:block id="idp3790144" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Examples</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">tags:root([{outfile, "root.TAGS"}]).</fo:inline>          <fo:block/>
</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This command will create a file named <fo:inline font-family="monospace">root.TAGS</fo:inline> in the current
          directory.  The file will contain references to all Erlang source
          files in the Erlang distribution.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">tags:files(["foo.erl", "bar.erl", "baz.erl"], [{outdir, "../projectdir"}]). </fo:inline>          <fo:block/>
</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here we create file named <fo:inline font-family="monospace">TAGS</fo:inline> placed it in the directory
          <fo:inline font-family="monospace">../projectdir</fo:inline>.  The file contains information about the
          functions, records, and macro definitions of the three files.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp3797280" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SEE ALSO</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Richard M. Stallman.  GNU Emacs Manual, chapter "Editing Programs",
       section "Tag Tables".  Free Software Foundation, 1995.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Anders Lindgren.  The Erlang editing mode for Emacs. Ericsson,
       1998.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  
<fo:block page-break-before="always" id="idp3807936" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">xref</fo:marker>xref</fo:block>Erlang module</fo:block>
  <fo:block/>
  xref
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Xref is a cross reference tool that can be used for finding
      dependencies between functions, modules, applications and
      releases.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls between functions are either       
<fo:inline font-weight="bold">local calls</fo:inline> like <fo:inline font-family="monospace">f()</fo:inline>, or       
<fo:inline font-weight="bold">external calls</fo:inline> like
      <fo:inline font-family="monospace">m:f()</fo:inline>.       
<fo:inline font-weight="bold">Module data</fo:inline>,
      which are extracted from BEAM files, include local functions,
      exported functions, local calls and external calls. By default,
      calls to built-in functions () are ignored, but
      if the option <fo:inline font-family="monospace">builtins</fo:inline>, accepted by some of this
      module's functions, is set to <fo:inline font-family="monospace">true</fo:inline>, calls to BIFs
      are included as well. It is the analyzing OTP version that
      decides what functions are BIFs. Functional objects are assumed
      to be called where they are created (and nowhere else).       
<fo:inline font-weight="bold">Unresolved calls</fo:inline> are calls to
      <fo:inline font-family="monospace">apply</fo:inline> or <fo:inline font-family="monospace">spawn</fo:inline> with variable module, variable
      function, or variable arguments. Examples are <fo:inline font-family="monospace">M:F(a)</fo:inline>,
      <fo:inline font-family="monospace">apply(M, f, [a])</fo:inline>, and
      <fo:inline font-family="monospace">spawn(m, f(), Args)</fo:inline>. Unresolved calls are
      represented by calls where variable modules have been replaced
      with the atom <fo:inline font-family="monospace">'$M_EXPR'</fo:inline>, variable functions have been
      replaced with the atom <fo:inline font-family="monospace">'$F_EXPR'</fo:inline>, and variable number of
      arguments have been replaced with the number <fo:inline font-family="monospace">-1</fo:inline>. The
      above mentioned examples are represented by calls to
      <fo:inline font-family="monospace">'$M_EXPR':'$F_EXPR'/1</fo:inline>, <fo:inline font-family="monospace">'$M_EXPR':f/1</fo:inline>, and
      <fo:inline font-family="monospace">m:'$F_EXPR'/-1</fo:inline>. The unresolved calls are a subset of the
      external calls.
      </fo:block>
    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unresolved calls make module data incomplete, which
        implies that the results of analyses may be invalid.</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Applications</fo:inline> are collections of modules. The
      modules' BEAM files are located in the <fo:inline font-family="monospace">ebin</fo:inline>
      subdirectory of the application directory. The name of the
      application directory determines the name and version of the
      application.
      <fo:inline font-weight="bold">Releases</fo:inline> are collections of applications
      located in the <fo:inline font-family="monospace">lib</fo:inline> subdirectory of the release directory. 
      There is more to read about applications and releases in the
      Design Principles book.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">      
<fo:inline font-weight="bold">Xref servers</fo:inline> are identified
      by names, supplied when creating new servers. Each Xref server
      holds a set of releases, a set of applications, and a set of
      modules with module data. Xref servers are independent of each
      other, and all analyses are evaluated in the context of one
      single Xref server (exceptions are the functions <fo:inline font-family="monospace">m/1</fo:inline> and
      <fo:inline font-family="monospace">d/1</fo:inline> which do not use servers at all). The       
<fo:inline font-weight="bold">mode</fo:inline> of an Xref server determines what module
      data are extracted from BEAM files as modules are added to the
      server. Starting with R7, BEAM files compiled with the option
      <fo:inline font-family="monospace">debug_info</fo:inline> contain so called       
debug information, which is an abstract
      representation of the code. In <fo:inline font-family="monospace">functions</fo:inline> mode, which is
      the default mode, function calls and line numbers are extracted
      from debug information. In <fo:inline font-family="monospace">modules</fo:inline> mode, debug
      information is ignored if present, but dependencies between
      modules are extracted from other parts of the BEAM files. The
      <fo:inline font-family="monospace">modules</fo:inline> mode is significantly less time and space
      consuming than the <fo:inline font-family="monospace">functions</fo:inline> mode, but the analyses that
      can be done are limited.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An       
<fo:inline font-weight="bold">analyzed module</fo:inline> is a
      module that has been added to an Xref server together with its
      module data.
      A       
<fo:inline font-weight="bold">library module</fo:inline> is a
      module located in some directory mentioned in the       
<fo:inline font-weight="bold">library path</fo:inline>. 
      A library module is said to be used if some of its exported
      functions are used by some analyzed module.
      An       
<fo:inline font-weight="bold">unknown module</fo:inline> is a
      module that is neither an analyzed module nor a library module,
      but whose exported functions are used by some analyzed module. 
      An       
<fo:inline font-weight="bold">unknown function</fo:inline> is a
      used function that is neither local or exported by any 
      analyzed module nor exported by any library module. 
      An       
<fo:inline font-weight="bold">undefined function</fo:inline> is an externally used function that
      is not exported by any analyzed module or library module. With
      this notion, a local function can be an undefined function, namely
      if it is externally used from some module. All unknown functions
      are also undefined functions; there is a <fo:inline font-style="italic">figure</fo:inline> in the
      User's Guide that illustrates this relationship.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starting with R9C, the module attribute tag <fo:inline font-family="monospace">deprecated</fo:inline>
      can be used to inform Xref about       
<fo:inline font-weight="bold">deprecated functions</fo:inline> and
      optionally when functions are planned to be removed. A few
      examples show the idea:
      </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">-deprecated({f,1}).</fo:block>
      <fo:block-container><fo:block start-indent="2em">The exported function <fo:inline font-family="monospace">f/1</fo:inline> is deprecated. Nothing is
       said whether <fo:inline font-family="monospace">f/1</fo:inline> will be removed or not.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">-deprecated({f,'_'}).</fo:block>
      <fo:block-container><fo:block start-indent="2em">All exported functions <fo:inline font-family="monospace">f/0</fo:inline>, <fo:inline font-family="monospace">f/1</fo:inline> and so on are
       deprecated.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">-deprecated(module).</fo:block>
      <fo:block-container><fo:block start-indent="2em">All exported functions in the module are deprecated.
       Equivalent to <fo:inline font-family="monospace">-deprecated({'_','_'}).</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">-deprecated([{g,1,next_version}]).</fo:block>
      <fo:block-container><fo:block start-indent="2em">The function <fo:inline font-family="monospace">g/1</fo:inline> is deprecated and will be
       removed in next version.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">-deprecated([{g,2,next_major_release}]).</fo:block>
      <fo:block-container><fo:block start-indent="2em">The function <fo:inline font-family="monospace">g/2</fo:inline> is deprecated and will be
       removed in next major release.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">-deprecated([{g,3,eventually}]).</fo:block>
      <fo:block-container><fo:block start-indent="2em">The function <fo:inline font-family="monospace">g/3</fo:inline> is deprecated and will
       eventually be removed.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">-deprecated({'_','_',eventually}).</fo:block>
      <fo:block-container><fo:block start-indent="2em">All exported functions in the module are deprecated and
       will eventually be removed.</fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before any analysis can take place, module data must be <fo:inline font-weight="bold">set up</fo:inline>. For instance, the cross reference and the unknown
      functions are computed when all module data are known. The
      functions that need complete data (<fo:inline font-family="monospace">analyze</fo:inline>, <fo:inline font-family="monospace">q</fo:inline>,
      <fo:inline font-family="monospace">variables</fo:inline>) take care of setting up data automatically.
      Module data need to be set up (again) after calls to any of the
      <fo:inline font-family="monospace">add</fo:inline>, <fo:inline font-family="monospace">replace</fo:inline>, <fo:inline font-family="monospace">remove</fo:inline>,
      <fo:inline font-family="monospace">set_library_path</fo:inline> or <fo:inline font-family="monospace">update</fo:inline> functions.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result of setting up module data is the       
<fo:inline font-weight="bold">Call Graph</fo:inline>. A (directed) graph
      consists of a set of vertices and a set of (directed) edges. The
      edges represent       
<fo:inline font-weight="bold">calls</fo:inline> (From, To)
      between functions, modules, applications or releases. From is
      said to call To, and To is said to be used by From. The vertices
      of the Call Graph are the functions of all module data: local
      and exported functions of analyzed modules; used BIFs; used
      exported functions of library modules; and unknown functions.
      The functions <fo:inline font-family="monospace">module_info/0,1</fo:inline> added by the compiler are
      included among the exported functions, but only when called from
      some module. The edges are the function calls of all module
      data. A consequence of the edges being a set is that there is
      only one edge if a function is locally or externally used
      several times on one and the same line of code.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Call Graph is       
represented by
      Erlang terms (the sets are lists), which is suitable for many
      analyses. But for analyses that look at chains of calls, a list
      representation is much too
      slow. Instead the representation offered by the <fo:inline font-family="monospace">digraph</fo:inline>
      module is used. The translation of the list representation of
      the Call Graph - or a subgraph thereof - to the <fo:inline font-family="monospace">digraph</fo:inline>
      representation does not
      come for free, so the language used for expressing queries to be
      described below has a special operator for this task and a
      possibility to save the <fo:inline font-family="monospace">digraph</fo:inline> representation for
      subsequent analyses.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In addition to the Call Graph there is a graph called the
            
<fo:inline font-weight="bold">Inter Call Graph</fo:inline>. This is
      a graph of calls (From, To) such that there is a chain of
      calls from From to To in the Call Graph, and every From and To
      is an exported function or an unused local function.
      The vertices are the same as for the Call Graph.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls between modules, applications and releases are also
      directed graphs. The       
<fo:inline font-weight="bold">types</fo:inline>
      of the vertices and edges of these graphs are (ranging from the
      most special to the most general):
      <fo:inline font-family="monospace">Fun</fo:inline> for functions; <fo:inline font-family="monospace">Mod</fo:inline> for modules;
      <fo:inline font-family="monospace">App</fo:inline> for applications; and <fo:inline font-family="monospace">Rel</fo:inline> for releases.
      The following paragraphs will describe the different constructs
      of the language used for selecting and analyzing parts of the
      graphs, beginning with the       
<fo:inline font-weight="bold">constants</fo:inline>:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Expression ::= Constants</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Constants ::= Consts | Consts <fo:inline font-family="monospace">:</fo:inline> Type | RegExpr</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Consts ::= Constant | <fo:inline font-family="monospace">[</fo:inline>Constant<fo:inline font-family="monospace">,</fo:inline> ...<fo:inline font-family="monospace">]</fo:inline>
       | <fo:inline font-family="monospace">{</fo:inline>Constant<fo:inline font-family="monospace">,</fo:inline> ...<fo:inline font-family="monospace">}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Constant ::= Call | Const</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Call ::= FunSpec <fo:inline font-family="monospace">-&gt;</fo:inline> FunSpec
       | <fo:inline font-family="monospace">{</fo:inline>MFA<fo:inline font-family="monospace">,</fo:inline> MFA<fo:inline font-family="monospace">}</fo:inline>
       | AtomConst <fo:inline font-family="monospace">-&gt;</fo:inline> AtomConst 
       | <fo:inline font-family="monospace">{</fo:inline>AtomConst<fo:inline font-family="monospace">,</fo:inline> AtomConst<fo:inline font-family="monospace">}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Const ::= AtomConst | FunSpec | MFA</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>AtomConst ::= Application | Module | Release</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>FunSpec ::= Module <fo:inline font-family="monospace">:</fo:inline> Function <fo:inline font-family="monospace">/</fo:inline> Arity</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MFA ::=
      <fo:inline font-family="monospace">{</fo:inline>Module<fo:inline font-family="monospace">,</fo:inline> Function<fo:inline font-family="monospace">,</fo:inline> Arity<fo:inline font-family="monospace">}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>RegExpr ::= RegString <fo:inline font-family="monospace">:</fo:inline> Type 
       | RegFunc 
       | RegFunc <fo:inline font-family="monospace">:</fo:inline> Type</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>RegFunc ::= RegModule <fo:inline font-family="monospace">:</fo:inline> RegFunction <fo:inline font-family="monospace">/</fo:inline> RegArity</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>RegModule ::= RegAtom</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>RegFunction ::= RegAtom</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>RegArity ::= RegString | Number | <fo:inline font-family="monospace">_</fo:inline> | <fo:inline font-family="monospace">-1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>RegAtom ::= RegString | Atom | <fo:inline font-family="monospace">_</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>RegString ::= - a regular expression, as described in the 
      <fo:inline font-family="monospace">re</fo:inline> module, enclosed in double quotes -</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Type ::= <fo:inline font-family="monospace">Fun</fo:inline> | <fo:inline font-family="monospace">Mod</fo:inline> | <fo:inline font-family="monospace">App</fo:inline> | <fo:inline font-family="monospace">Rel</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Function ::= Atom</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Application ::= Atom</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Module ::= Atom</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Release ::= Atom</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Arity ::= Number | <fo:inline font-family="monospace">-1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Atom ::= - same as Erlang atoms -</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Number ::= - same as non-negative Erlang integers -</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples of constants are: <fo:inline font-family="monospace">kernel</fo:inline>, <fo:inline font-family="monospace">kernel-&gt;stdlib</fo:inline>,
      <fo:inline font-family="monospace">[kernel, sasl]</fo:inline>, <fo:inline font-family="monospace">[pg -&gt; mnesia, {tv, mnesia}] : Mod</fo:inline>.
      It is an error if an instance of <fo:inline font-family="monospace">Const</fo:inline> does not match any
      vertex of any graph. 
      If there  are more than one vertex matching an untyped instance
      of <fo:inline font-family="monospace">AtomConst</fo:inline>, then the one of the most general type is
      chosen.
      A list of constants is interpreted as a set of constants, all of
      the same type.
      A tuple of constants constitute a chain of calls (which may,
      but does not have to, correspond to an actual chain of calls of
      some graph).
      Assigning a type to a list or tuple of <fo:inline font-family="monospace">Constant</fo:inline> is
      equivalent to assigning the type to each <fo:inline font-family="monospace">Constant</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Regular expressions</fo:inline> are used as a
      means to select some of the vertices of a graph.
      A <fo:inline font-family="monospace">RegExpr</fo:inline> consisting of a <fo:inline font-family="monospace">RegString</fo:inline> and a type -
      an example is <fo:inline font-family="monospace">"xref_.*" : Mod</fo:inline> - is interpreted as those
      modules (or applications or releases, depending on the type)
      that match the expression.
      Similarly, a <fo:inline font-family="monospace">RegFunc</fo:inline> is interpreted as those vertices
      of the Call Graph that match the expression. 
      An example is <fo:inline font-family="monospace">"xref_.*":"add_.*"/"(2|3)"</fo:inline>, which matches
      all <fo:inline font-family="monospace">add</fo:inline> functions of arity two or three of any of the
      xref modules.
      Another example, one that matches all functions of arity 10 or
      more: <fo:inline font-family="monospace">_:_/"[1-9].+"</fo:inline>. Here <fo:inline font-family="monospace">_</fo:inline> is an abbreviation for
      <fo:inline font-family="monospace">".*"</fo:inline>, that is, the regular expression that matches
      anything.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The syntax of       
<fo:inline font-weight="bold">variables</fo:inline> is
      simple:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Expression ::= Variable</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Variable ::= - same as Erlang variables -</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two kinds of variables: predefined variables and user 
      variables. 
            
<fo:inline font-weight="bold">Predefined variables</fo:inline>
      hold set up module data, and cannot be assigned to but only used 
      in queries. 
            
<fo:inline font-weight="bold">User variables</fo:inline> on the other 
      hand can be assigned to, and are typically used for
      temporary results while evaluating a query, and for keeping
      results of queries for use in subsequent queries. 
      The predefined variables are (variables marked with (*) are
      available in <fo:inline font-family="monospace">functions</fo:inline> mode only):
      </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">E</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Call Graph Edges (*).</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">V</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Call Graph Vertices (*).
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">M</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Modules. All modules: analyzed modules, used library
       modules, and unknown modules.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">A</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Applications.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">R</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Releases.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ME</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Module Edges. All module calls.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">AE</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Application Edges. All application calls. </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">RE</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Release Edges. All release calls.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">L</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Local Functions (*). All local functions of analyzed modules.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">X</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Exported Functions. All exported functions of analyzed 
       modules and all used exported functions of library modules.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">F</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Functions (*).</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">B</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Used BIFs. <fo:inline font-family="monospace">B</fo:inline> is empty if <fo:inline font-family="monospace">builtins</fo:inline> is 
      <fo:inline font-family="monospace">false</fo:inline> for all analyzed modules.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">U</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Unknown Functions.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">UU</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Unused Functions (*). All local and exported functions of
       analyzed modules that have not been used. </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">XU</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Externally Used Functions. Functions of all modules -
       including local functions - that have been used in some
       external call.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">LU</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Locally Used Functions (*). Functions of all modules that have
       been used in some local call.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">LC</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Local Calls (*).</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">XC</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">External Calls (*).
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">AM</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Analyzed Modules.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">UM</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Unknown Modules.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">LM</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Used Library Modules.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">UC</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Unresolved Calls. Empty in <fo:inline font-family="monospace">modules</fo:inline> mode.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EE</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Inter Call Graph Edges (*).
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">DF</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Deprecated Functions. All deprecated exported 
       functions and all used deprecated BIFs.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">DF_1</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Deprecated Functions. All deprecated functions 
       to be removed in next version.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">DF_2</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Deprecated Functions. All deprecated functions 
       to be removed in next version or next major release.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">DF_3</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Deprecated Functions. All deprecated functions to be
       removed in next version, next major release, or later.</fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These are a few       
facts about the
      predefined variables (the set operators <fo:inline font-family="monospace">+</fo:inline> (union) and
      <fo:inline font-family="monospace">-</fo:inline> (difference) as well as the cast operator
      <fo:inline font-family="monospace">(</fo:inline>Type<fo:inline font-family="monospace">)</fo:inline> are described below):
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">F</fo:inline> is equal to  <fo:inline font-family="monospace">L + X</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">V</fo:inline> is equal to <fo:inline font-family="monospace">X + L + B + U</fo:inline>, where <fo:inline font-family="monospace">X</fo:inline>,
      <fo:inline font-family="monospace">L</fo:inline>, <fo:inline font-family="monospace">B</fo:inline> and <fo:inline font-family="monospace">U</fo:inline> are pairwise disjoint (that
       is, have no elements in common).</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">UU</fo:inline> is equal to <fo:inline font-family="monospace">V - (XU + LU)</fo:inline>, where
      <fo:inline font-family="monospace">LU</fo:inline> and <fo:inline font-family="monospace">XU</fo:inline> may have elements in common. Put in
       another way:</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">V</fo:inline> is equal to <fo:inline font-family="monospace">UU + XU + LU</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">E</fo:inline> is equal to <fo:inline font-family="monospace">LC + XC</fo:inline>. Note that <fo:inline font-family="monospace">LC</fo:inline>
       and <fo:inline font-family="monospace">XC</fo:inline> may have elements in common, namely if some
       function is locally and externally used from one and the same
       function.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">U</fo:inline> is a subset of <fo:inline font-family="monospace">XU</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">B</fo:inline> is a subset of <fo:inline font-family="monospace">XU</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">LU</fo:inline> is equal to <fo:inline font-family="monospace">range LC</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">XU</fo:inline> is equal to <fo:inline font-family="monospace">range XC</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">LU</fo:inline> is a subset of <fo:inline font-family="monospace">F</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">UU</fo:inline> is a subset of <fo:inline font-family="monospace">F</fo:inline>. </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">range UC</fo:inline> is a subset of <fo:inline font-family="monospace">U</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">M</fo:inline> is equal to <fo:inline font-family="monospace">AM + LM + UM</fo:inline>, where <fo:inline font-family="monospace">AM</fo:inline>,
      <fo:inline font-family="monospace">LM</fo:inline> and <fo:inline font-family="monospace">UM</fo:inline> are pairwise disjoint. </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ME</fo:inline> is equal to <fo:inline font-family="monospace">(Mod) E</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">AE</fo:inline> is equal to <fo:inline font-family="monospace">(App) E</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">RE</fo:inline> is equal to <fo:inline font-family="monospace">(Rel) E</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">(Mod) V</fo:inline> is a subset of <fo:inline font-family="monospace">M</fo:inline>. Equality holds
       if all analyzed modules have some local, exported, or unknown 
       function.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">(App) M</fo:inline> is a subset of <fo:inline font-family="monospace">A</fo:inline>. Equality holds
       if all applications have some module.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">(Rel) A</fo:inline> is a subset of <fo:inline font-family="monospace">R</fo:inline>. Equality holds
       if all releases have some application.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">DF_1</fo:inline> is a subset of <fo:inline font-family="monospace">DF_2</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">DF_2</fo:inline> is a subset of <fo:inline font-family="monospace">DF_3</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">DF_3</fo:inline> is a subset of <fo:inline font-family="monospace">DF</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">DF</fo:inline> is a subset of <fo:inline font-family="monospace">X + B</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An important notion is that of       
<fo:inline font-weight="bold">conversion</fo:inline> of expressions. The syntax of
      a cast expression is:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Expression ::= <fo:inline font-family="monospace">(</fo:inline> Type <fo:inline font-family="monospace">)</fo:inline> Expression</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interpretation of the cast operator depends on the named
      type <fo:inline font-family="monospace">Type</fo:inline>, the type of <fo:inline font-family="monospace">Expression</fo:inline>, and the
      structure of the elements of the interpretation of <fo:inline font-family="monospace">Expression</fo:inline>. 
      If the named type is equal to the
      expression type, no conversion is done. Otherwise, the
      conversion is done one step at a time;
      <fo:inline font-family="monospace">(Fun) (App) RE</fo:inline>, for instance, is equivalent to
      <fo:inline font-family="monospace">(Fun) (Mod) (App) RE</fo:inline>. Now assume that the
      interpretation of <fo:inline font-family="monospace">Expression</fo:inline> is a set of constants
      (functions, modules, applications or releases). If the named
      type is more general than the expression type, say <fo:inline font-family="monospace">Mod</fo:inline>
      and <fo:inline font-family="monospace">Fun</fo:inline> respectively, then the interpretation of the cast
      expression is the set of modules that have at least one
      of their functions mentioned in the interpretation of the
      expression. If the named
      type is more special than the expression type, say <fo:inline font-family="monospace">Fun</fo:inline>
      and <fo:inline font-family="monospace">Mod</fo:inline>, then the interpretation is the set of all the
      functions of the modules (in <fo:inline font-family="monospace">modules</fo:inline> mode, the conversion
      is partial since the local functions are not known).
      The conversions to and from applications and releases
      work analogously. For instance, <fo:inline font-family="monospace">(App) "xref_.*" : Mod</fo:inline>
      returns all applications containing at least one module
      such that <fo:inline font-family="monospace">xref_</fo:inline> is a prefix of the module name.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now assume that the interpretation of <fo:inline font-family="monospace">Expression</fo:inline> is a
      set of calls. If the named type is more general than the
      expression type, say <fo:inline font-family="monospace">Mod</fo:inline> and <fo:inline font-family="monospace">Fun</fo:inline> respectively,
      then the interpretation of the cast expression is the set of
      calls (M1, M2) such that the interpretation of the 
      expression contains a call from some function
      of M1 to some function of M2. If the named type is more special
      than the expression type, say <fo:inline font-family="monospace">Fun</fo:inline> and <fo:inline font-family="monospace">Mod</fo:inline>, then
      the interpretation is the set of all function calls
      (F1, F2) such that the interpretation of the expression
      contains a call (M1, M2) and F1 is
      a function of M1 and F2 is a function of M2 (in <fo:inline font-family="monospace">modules</fo:inline>
      mode, there are no functions calls, so a cast to <fo:inline font-family="monospace">Fun</fo:inline>
      always yields an empty set). Again, the conversions to and from
      applications and releases work analogously.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interpretation of constants and variables are sets, and
      those sets can be used as the basis for forming new sets by the
      application of       
<fo:inline font-weight="bold">set operators</fo:inline>.
      The syntax:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Expression ::= Expression BinarySetOp Expression</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>BinarySetOp ::= <fo:inline font-family="monospace">+</fo:inline> | <fo:inline font-family="monospace">*</fo:inline> | <fo:inline font-family="monospace">-</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">+</fo:inline>, <fo:inline font-family="monospace">*</fo:inline> and <fo:inline font-family="monospace">-</fo:inline> are interpreted as union,
      intersection and difference respectively: the union of two sets
      contains the elements of both sets; the intersection of two sets
      contains the elements common to both sets; and the difference of
      two sets contains the elements of the first set that are not
      members of the second set. The elements of the two sets must be
      of the same structure; for instance, a function call cannot be
      combined with a function. But if a cast operator can make the
      elements compatible, then the more general elements are
      converted to the less general element type. For instance,
      <fo:inline font-family="monospace">M + F</fo:inline> is equivalent to
      <fo:inline font-family="monospace">(Fun) M + F</fo:inline>, and <fo:inline font-family="monospace">E - AE</fo:inline>
      is equivalent to <fo:inline font-family="monospace">E - (Fun) AE</fo:inline>. One more
      example: <fo:inline font-family="monospace">X * xref : Mod</fo:inline> is interpreted as the set of
      functions exported by the module <fo:inline font-family="monospace">xref</fo:inline>; <fo:inline font-family="monospace">xref : Mod</fo:inline>
      is converted to the more special type of <fo:inline font-family="monospace">X</fo:inline> (<fo:inline font-family="monospace">Fun</fo:inline>,
      that is) yielding all functions of <fo:inline font-family="monospace">xref</fo:inline>, and the
      intersection with <fo:inline font-family="monospace">X</fo:inline> (all functions exported by analyzed 
      modules and library modules) is interpreted as those functions
      that are exported by some module <fo:inline font-weight="bold">and</fo:inline> functions of 
      <fo:inline font-family="monospace">xref</fo:inline>. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are also unary set operators:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Expression ::= UnarySetOp Expression</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>UnarySetOp ::= <fo:inline font-family="monospace">domain</fo:inline> | <fo:inline font-family="monospace">range</fo:inline> | <fo:inline font-family="monospace">strict</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Recall that a call is a pair (From, To). <fo:inline font-family="monospace">domain</fo:inline>
      applied to a set of calls is interpreted as the set of all
      vertices From, and <fo:inline font-family="monospace">range</fo:inline> as the set of all vertices To.
      The interpretation of the <fo:inline font-family="monospace">strict</fo:inline> operator is the operand
      with all calls on the form (A, A) removed. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interpretation of the       
<fo:inline font-weight="bold">restriction operators</fo:inline> is a 
      subset of the first operand, a set of calls. The second operand,
      a set of vertices, is converted to the type of the first operand.
      The syntax of the restriction operators:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Expression ::= Expression RestrOp Expression</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>RestrOp ::= <fo:inline font-family="monospace">|</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>RestrOp ::= <fo:inline font-family="monospace">||</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>RestrOp ::= <fo:inline font-family="monospace">|||</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interpretation in some detail for the three operators:
      </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">|</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The subset of calls from any of the vertices.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">||</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The subset of calls to any of the vertices.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">|||</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The subset of calls to and from any of the vertices.
       For all sets of calls <fo:inline font-family="monospace">CS</fo:inline> and all sets of vertices
      <fo:inline font-family="monospace">VS</fo:inline>, <fo:inline font-family="monospace">CS ||| VS </fo:inline> is equivalent to
      <fo:inline font-family="monospace">CS | VS * CS || VS</fo:inline>.</fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">      
Two functions (modules,
      applications, releases) belong to the same strongly connected
      component if they call each other (in)directly. The
      interpretation of the <fo:inline font-family="monospace">components</fo:inline> operator is the set of
      strongly connected components of a set of calls. The
      <fo:inline font-family="monospace">condensation</fo:inline> of a set of calls is a new set of calls
      between the strongly connected components such that there is an
      edge between two components if there is some constant of the first
      component that calls some constant of the second component.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interpretation of the <fo:inline font-family="monospace">of</fo:inline> operator is a chain of
      calls of the second operand (a set of calls) that passes throw
      all of the vertices of the first operand (a tuple of
      constants), in the given order. The second operand
      is converted to the type of the first operand.
      For instance, the <fo:inline font-family="monospace">of</fo:inline> operator can be used for finding out
      whether a function calls another function indirectly, and the
      chain of calls demonstrates how. The syntax of the graph
      analyzing operators:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Expression ::= Expression GraphOp Expression</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>GraphOp ::= <fo:inline font-family="monospace">components</fo:inline> | <fo:inline font-family="monospace">condensation</fo:inline> | <fo:inline font-family="monospace">of</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As was mentioned before, the graph analyses operate on
      the <fo:inline font-family="monospace">digraph</fo:inline> representation of graphs.
      By default, the <fo:inline font-family="monospace">digraph</fo:inline> representation is created when
      needed (and deleted when no longer used), but it can also be
      created explicitly by use of the <fo:inline font-family="monospace">closure</fo:inline> operator:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Expression ::= ClosureOp Expression</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ClosureOp ::= <fo:inline font-family="monospace">closure</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interpretation of the <fo:inline font-family="monospace">closure</fo:inline> operator is the
      transitive closure of the operand. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The restriction operators are defined for closures as well;
      <fo:inline font-family="monospace">closure E | xref : Mod</fo:inline> is
      interpreted as the direct or indirect function calls from the
      <fo:inline font-family="monospace">xref</fo:inline> module, while the interpretation of
      <fo:inline font-family="monospace">E | xref : Mod</fo:inline> is the set of direct
      calls from <fo:inline font-family="monospace">xref</fo:inline>. 
      If some graph is to be used in several graph analyses, it saves
      time to assign the <fo:inline font-family="monospace">digraph</fo:inline> representation of the graph
      to a user variable, 
      and then make sure that every graph analysis operates on that
      variable instead of the list representation of the graph.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The lines where functions are defined (more precisely: where
      the first clause begins) and the lines where functions are used
      are available in <fo:inline font-family="monospace">functions</fo:inline> mode. The line numbers refer
      to the files where the functions are defined. This holds also for
      files included with the <fo:inline font-family="monospace">-include</fo:inline> and <fo:inline font-family="monospace">-include_lib</fo:inline>
      directives, which may result in functions defined apparently in
      the same line. The <fo:inline font-weight="bold">line operators</fo:inline> are used for assigning
      line numbers to functions and for assigning sets of line numbers
      to function calls. 
      The syntax is similar to the one of the cast operator:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Expression ::= <fo:inline font-family="monospace">(</fo:inline> LineOp<fo:inline font-family="monospace">)</fo:inline> Expression</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Expression ::= <fo:inline font-family="monospace">(</fo:inline> XLineOp<fo:inline font-family="monospace">)</fo:inline> Expression</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>LineOp ::= <fo:inline font-family="monospace">Lin</fo:inline> | <fo:inline font-family="monospace">ELin</fo:inline> | <fo:inline font-family="monospace">LLin</fo:inline> | <fo:inline font-family="monospace">XLin</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>XLineOp ::= <fo:inline font-family="monospace">XXL</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interpretation of the <fo:inline font-family="monospace">Lin</fo:inline> operator applied to a set
      of functions assigns to each function the line number where the
      function is defined. Unknown functions and functions of library
      modules are assigned the number 0.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interpretation of some LineOp operator applied to a
      set of function calls assigns to each call the set of line
      numbers where the first function calls the second function. Not
      all calls are assigned line numbers by all operators:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the <fo:inline font-family="monospace">Lin</fo:inline> operator is defined for Call Graph Edges;</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the <fo:inline font-family="monospace">LLin</fo:inline> operator is defined for Local Calls.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the <fo:inline font-family="monospace">XLin</fo:inline> operator is defined for External Calls.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the <fo:inline font-family="monospace">ELin</fo:inline> operator is defined for Inter Call Graph Edges.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Lin</fo:inline> (<fo:inline font-family="monospace">LLin</fo:inline>, <fo:inline font-family="monospace">XLin</fo:inline>) operator assigns
      the lines where calls (local calls, external calls) are made.
      The <fo:inline font-family="monospace">ELin</fo:inline> operator assigns to each call (From, To),
      for which it is defined, every line L such that there is
      a chain of calls from From to To beginning with a call on line
      L.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">XXL</fo:inline> operator is defined for the interpretation of
      any of the LineOp operators applied to a set of function
      calls. The result is that of replacing the function call with
      a line numbered function call, that is, each of the two
      functions of the call is replaced by a pair of the function and
      the line where the function is defined. The effect of the
      <fo:inline font-family="monospace">XXL</fo:inline> operator can be undone by the LineOp operators. For
      instance, <fo:inline font-family="monospace">(Lin) (XXL) (Lin) E</fo:inline> is
      equivalent to <fo:inline font-family="monospace">(Lin) E</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">+</fo:inline>, <fo:inline font-family="monospace">-</fo:inline>, <fo:inline font-family="monospace">*</fo:inline> and <fo:inline font-family="monospace">#</fo:inline> operators are
      defined for line number expressions, provided the operands are
      compatible. The LineOp operators are also defined for
      modules, applications, and releases; the operand is implicitly
      converted to functions. Similarly, the cast operator is defined
      for the interpretation of the LineOp operators.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interpretation of the       
<fo:inline font-weight="bold">counting operator</fo:inline> is the number of elements of a set. The operator
      is undefined for closures. The <fo:inline font-family="monospace">+</fo:inline>, <fo:inline font-family="monospace">-</fo:inline> and <fo:inline font-family="monospace">*</fo:inline>
      operators are interpreted as the obvious arithmetical operators
      when applied to numbers. The syntax of the counting operator:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Expression ::= CountOp Expression</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>CountOp ::= <fo:inline font-family="monospace">#</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All binary operators are left associative; for instance,
      <fo:inline font-family="monospace">A | B  || C</fo:inline> is equivalent to
      <fo:inline font-family="monospace">(A | B) || C</fo:inline>. The following is a list
      of all operators, in increasing order of       
<fo:inline font-weight="bold">precedence</fo:inline>:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">+</fo:inline>, <fo:inline font-family="monospace">-</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">*</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">#</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">|</fo:inline>, <fo:inline font-family="monospace">||</fo:inline>, <fo:inline font-family="monospace">|||</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">of</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">(</fo:inline>Type<fo:inline font-family="monospace">)</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">closure</fo:inline>, <fo:inline font-family="monospace">components</fo:inline>, <fo:inline font-family="monospace">condensation</fo:inline>,
      <fo:inline font-family="monospace">domain</fo:inline>, <fo:inline font-family="monospace">range</fo:inline>, <fo:inline font-family="monospace">strict</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parentheses are used for grouping, either to make an expression
      more readable or to override the default precedence of operators:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Expression ::= <fo:inline font-family="monospace">(</fo:inline> Expression <fo:inline font-family="monospace">)</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A       
<fo:inline font-weight="bold">query</fo:inline> is a non-empty sequence of
      statements. A statement is either an assignment of a user
      variable or an expression. The value of an assignment is the
      value of the right hand side expression. It makes no sense to
      put a plain expression anywhere else but last in queries. The
      syntax of queries is summarized by these productions:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Query ::= Statement<fo:inline font-family="monospace">,</fo:inline> ...</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Statement ::= Assignment | Expression</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Assignment ::= Variable <fo:inline font-family="monospace">:=</fo:inline> Expression 
       | Variable <fo:inline font-family="monospace">=</fo:inline> Expression</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A variable cannot be assigned a new value unless first removed.
      Variables assigned to by the <fo:inline font-family="monospace">=</fo:inline> operator are removed at
      the end of the query, while variables assigned to by the
      <fo:inline font-family="monospace">:=</fo:inline> operator can only be removed by calls to
      <fo:inline font-family="monospace">forget</fo:inline>. There are no user variables when module data
      need to be set up again; if any of the functions that make it
      necessary to set up module data again is called, all user
      variables are forgotten.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Types</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
application() = atom()
arity() = int() | -1
bool() = true | false
call() = {atom(), atom()} | funcall()
constant() = mfa() | module() | application() | release()
directory() = string()
file() = string()
funcall() = {mfa(), mfa()}
function() = atom()
int() = integer() &gt;= 0
library() = atom()
library_path() = path() | code_path
mfa() = {module(), function(), arity()}
mode() = functions | modules
module() = atom()
release() = atom()
string_position() = int() | at_end
variable() = atom()
xref() = atom() | pid()  </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4092064">add_application(Xref, Directory [, Options]) -&gt;  {ok, application()} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Directory = directory()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option] | Option</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = {builtins, bool()} | {name, application()}  | {verbose, bool()} | {warnings, bool()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason =  {application_clash, {application(), directory(), directory()}} | {file_error, file(), error()} | {invalid_filename, term()} | {invalid_options, term()} | - see also add_directory -</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds an application, the modules of the application and <fo:inline font-style="italic">module data</fo:inline> of the
          modules to an <fo:inline font-style="italic">Xref server</fo:inline>.
          The modules will be members of the application.
          The default is to use the base name of the
          directory with the version removed as application name, but
          this can be overridden by the <fo:inline font-family="monospace">name</fo:inline> option. Returns the
          name of the application.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the given directory has a subdirectory named
          <fo:inline font-family="monospace">ebin</fo:inline>, modules (BEAM files) are searched for in that
          directory, otherwise modules are searched for in the given
          directory.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-style="italic">mode</fo:inline> of the Xref
          server is <fo:inline font-family="monospace">functions</fo:inline>, BEAM files that contain no
          <fo:inline font-style="italic">debug information</fo:inline> are
          ignored.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4103472">add_directory(Xref, Directory [, Options]) -&gt;  {ok, Modules} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Directory = directory()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Modules = [module()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option] | Option</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = {builtins, bool()} | {recurse, bool()}  | {verbose, bool()} | {warnings, bool()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {file_error, file(), error()} | {invalid_filename, term()} | {invalid_options, term()} | {unrecognized_file, file()} | - error from beam_lib:chunks/2 -</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds the modules found in the given directory and the <fo:inline font-style="italic">modules' data</fo:inline>
          to an <fo:inline font-style="italic">Xref server</fo:inline>. 
          The default is not to examine subdirectories, but if the option
          <fo:inline font-family="monospace">recurse</fo:inline> has the value <fo:inline font-family="monospace">true</fo:inline>, modules are searched
          for in subdirectories on all levels as well as in the given 
          directory.
          Returns a sorted list of the names of the added modules.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The modules added will not be members of any applications. 
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-style="italic">mode</fo:inline> of the Xref
          server is <fo:inline font-family="monospace">functions</fo:inline>, BEAM files that contain no
          <fo:inline font-style="italic">debug information</fo:inline> are
          ignored.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4115104">add_module(Xref, File [, Options]) -&gt; {ok, module()} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = file()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option] | Option</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = {builtins, bool()} | {verbose, bool()}  | {warnings, bool()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {file_error, file(), error()} | {invalid_filename, term()} | {invalid_options, term()} | {module_clash, {module(), file(), file()}} | {no_debug_info, file()} | - error from beam_lib:chunks/2 -</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a module and its <fo:inline font-style="italic">module data</fo:inline> to an <fo:inline font-style="italic">Xref server</fo:inline>.
          The module will not be member of any application.
          Returns the name of the module.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-style="italic">mode</fo:inline> of the Xref
          server is <fo:inline font-family="monospace">functions</fo:inline>, and the BEAM file contains no
          <fo:inline font-style="italic">debug information</fo:inline>,
          the error message <fo:inline font-family="monospace">no_debug_info</fo:inline> is returned.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4125200">add_release(Xref, Directory [, Options]) -&gt;  {ok, release()} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Directory = directory()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option] | Option</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = {builtins, bool()} | {name, release()}  | {verbose, bool()} | {warnings, bool()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason =  {application_clash, {application(), directory(), directory()}} | {file_error, file(), error()} | {invalid_filename, term()} | {invalid_options, term()} | {release_clash, {release(), directory(), directory()}} | - see also add_directory -</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a release, the applications of the release, the
          modules of the applications, and <fo:inline font-style="italic">module data</fo:inline> of the
          modules to an <fo:inline font-style="italic">Xref server</fo:inline>.
          The applications will be members of the release, 
          and the modules will be members of the applications.
          The default is to use the base name of the
          directory as release name, but this can be overridden by the
          <fo:inline font-family="monospace">name</fo:inline> option. Returns the name of the release.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the given directory has a subdirectory named <fo:inline font-family="monospace">lib</fo:inline>,
          the directories in that directory are assumed to be
          application directories, otherwise all subdirectories of the
          given directory are assumed to be application directories.
          If there are several versions of some application, the one
          with the highest version is chosen.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-style="italic">mode</fo:inline> of the Xref
          server is <fo:inline font-family="monospace">functions</fo:inline>, BEAM files that contain no
          <fo:inline font-style="italic">debug information</fo:inline> are
          ignored.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4136880">analyze(Xref, Analysis [, Options]) -&gt;  {ok, Answer} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Analysis = undefined_function_calls  | undefined_functions | locals_not_used | exports_not_used | deprecated_function_calls | {deprecated_function_calls, DeprFlag} | deprecated_functions | {deprecated_functions, DeprFlag} | {call, FuncSpec} | {use, FuncSpec} | {module_call, ModSpec} | {module_use, ModSpec} | {application_call, AppSpec} | {application_use, AppSpec} | {release_call, RelSpec} | {release_use, RelSpec}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Answer = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AppSpec = application() | [application()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DeprFlag = next_version | next_major_release | eventually</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FuncSpec = mfa() | [mfa()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModSpec = module() | [module()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option] | Option</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = {verbose, bool()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RelSpec = release() | [release()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {invalid_options, term()} | {parse_error, string_position(), term()} | {unavailable_analysis, term()} | {unknown_analysis, term()} | {unknown_constant, string()} | {unknown_variable, variable()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">          
Evaluates a predefined analysis.
          Returns a sorted list without duplicates of <fo:inline font-family="monospace">call()</fo:inline> or
          <fo:inline font-family="monospace">constant()</fo:inline>, depending on the chosen analysis. The
          predefined analyses, which operate on all <fo:inline font-style="italic">analyzed modules</fo:inline>, are
          (analyses marked with (*) are available in <fo:inline font-family="monospace">functions</fo:inline><fo:inline font-style="italic">mode</fo:inline> only):</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">undefined_function_calls</fo:inline>(*)</fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of calls to <fo:inline font-style="italic">undefined functions</fo:inline>.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">undefined_functions</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of <fo:inline font-style="italic">undefined functions</fo:inline>. </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">locals_not_used</fo:inline>(*)</fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of local functions that have not been
           locally used.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">exports_not_used</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of exported functions that have not been
           externally used.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">deprecated_function_calls</fo:inline>(*)</fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of external calls to <fo:inline font-style="italic">deprecated functions</fo:inline>.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{deprecated_function_calls, DeprFlag}</fo:inline>(*)</fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of external calls to deprecated
           functions. If <fo:inline font-family="monospace">DeprFlag</fo:inline> is equal to
          <fo:inline font-family="monospace">next_version</fo:inline>, calls to functions to be removed in
           next version are returned. If <fo:inline font-family="monospace">DeprFlag</fo:inline> is equal to
          <fo:inline font-family="monospace">next_major_release</fo:inline>, calls to functions to be
           removed in next major release are returned as well as
           calls to functions to be removed in next version. Finally,
           if <fo:inline font-family="monospace">DeprFlag</fo:inline> is equal to <fo:inline font-family="monospace">eventually</fo:inline>, all
           calls to functions to be removed are returned, including
           calls to functions to be removed in next version or next
           major release.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">deprecated_functions</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of externally used deprecated
           functions.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{deprecated_functions, DeprFlag}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of externally used deprecated
           functions. If <fo:inline font-family="monospace">DeprFlag</fo:inline> is equal to
          <fo:inline font-family="monospace">next_version</fo:inline>, functions to be removed in next
           version are returned. If <fo:inline font-family="monospace">DeprFlag</fo:inline> is equal to
          <fo:inline font-family="monospace">next_major_release</fo:inline>, functions to be removed in next
           major release are returned as well as functions to be
           removed in next version. Finally, if <fo:inline font-family="monospace">DeprFlag</fo:inline> is
           equal to <fo:inline font-family="monospace">eventually</fo:inline>, all functions to be removed
           are returned, including functions to be removed in next
           version or next major release.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{call, FuncSpec}</fo:inline>(*)</fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of functions called by some of the given 
           functions.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{use, FuncSpec}</fo:inline>(*)</fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of functions that use some of the given 
           functions.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{module_call, ModSpec}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of modules called by some of the given 
           modules.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{module_use, ModSpec}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of modules that use some of the given 
           modules.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{application_call, AppSpec}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of applications called by some of the given 
           applications.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{application_use, AppSpec}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of applications that use some of the given 
           applications.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{release_call, RelSpec}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of releases called by some of the given 
           releases.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{release_use, RelSpec}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns a list of releases that use some of the given 
           releases.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4176112">d(Directory) -&gt; [DebugInfoResult] | [NoDebugInfoResult] | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Directory = directory()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DebugInfoResult = {deprecated, [funcall()]} | {undefined, [funcall()]} | {unused, [mfa()]}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NoDebugInfoResult = {deprecated, [mfa()]} | {undefined, [mfa()]}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {file_error, file(), error()} | {invalid_filename, term()} | {unrecognized_file, file()} | - error from beam_lib:chunks/2 -</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The modules found in the given directory are checked for
          calls to <fo:inline font-style="italic">deprecated functions</fo:inline>, calls to <fo:inline font-style="italic">undefined functions</fo:inline>,
          and for unused local functions. The code path is used as
          <fo:inline font-style="italic">library path</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If some of the found BEAM files contain <fo:inline font-style="italic">debug information</fo:inline>, then those
          modules are checked and a list of tuples is returned. The
          first element of each tuple is one of:
          </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">deprecated</fo:inline>, the second element is a sorted list
           of calls to deprecated functions;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">undefined</fo:inline>, the second element is a sorted list
           of calls to undefined functions;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">unused</fo:inline>, the second element is a sorted list of
           unused local functions.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no BEAM file contains debug information, then a list of
          tuples is returned. The first element of each tuple is one
          of:
          </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">deprecated</fo:inline>, the second element is a sorted list
           of externally used deprecated functions;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">undefined</fo:inline>, the second element is a sorted list
           of undefined functions.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4191040">forget(Xref) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4191488">forget(Xref, Variables) -&gt; ok | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {not_user_variable, term()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Variables = [variable()] | variable()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">forget/1</fo:inline> and <fo:inline font-family="monospace">forget/2</fo:inline> remove all or some of
          the <fo:inline font-style="italic">user variables</fo:inline> of an <fo:inline font-style="italic">xref server</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4198240">format_error(Error) -&gt; Chars</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), term()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Chars = [char() | Chars]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Given the error returned by any function of this module, 
          the function <fo:inline font-family="monospace">format_error</fo:inline> returns a descriptive string
          of the error in English. For file errors, the function 
          <fo:inline font-family="monospace">format_error/1</fo:inline> in the <fo:inline font-family="monospace">file</fo:inline> module is called.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4203408">get_default(Xref) -&gt; [{Option, Value}]</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4203872">get_default(Xref, Option) -&gt; {ok, Value} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = builtins | recurse | verbose | warnings</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {invalid_options, term()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = bool()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the default values of one or more options.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4208944">get_library_path(Xref) -&gt; {ok, LibraryPath}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LibraryPath = library_path()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the <fo:inline font-style="italic">library path</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4213312">info(Xref) -&gt; [Info]</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4213760">info(Xref, Category) -&gt; [{Item, [Info]}]</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4214240">info(Xref, Category, Items) -&gt;  [{Item, [Info]}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Application = [] | [application()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Category = modules | applications | releases | libraries</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Info = {application, Application} | {builtins, bool()} | {directory, directory()} | {library_path, library_path()} | {mode, mode()} | {no_analyzed_modules, int()} | {no_applications, int()} | {no_calls, {NoResolved, NoUnresolved}} | {no_function_calls, {NoLocal, NoResolvedExternal, NoUnresolved}} | {no_functions, {NoLocal, NoExternal}} | {no_inter_function_calls, int()} | {no_releases, int()} | {release, Release} | {version, Version}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item = module() | application() | release() | library()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Items = Item | [Item]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NoLocal = NoExternal = NoResolvedExternal, NoResolved = NoUnresolved = int()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Release = [] | [release()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Version = [int()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">info</fo:inline> functions return information as a list of
          pairs {Tag, term()} in some order about the state and the 
          <fo:inline font-style="italic">module data</fo:inline> of an <fo:inline font-style="italic">Xref server</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">info/1</fo:inline> returns information with the following tags
          (tags  marked with (*) are available in <fo:inline font-family="monospace">functions</fo:inline>
          mode only):</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">library_path</fo:inline>, the <fo:inline font-style="italic">library path</fo:inline>;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mode</fo:inline>, the <fo:inline font-style="italic">mode</fo:inline>;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_releases</fo:inline>, number of releases;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_applications</fo:inline>, total number of applications
           (of all releases);</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_analyzed_modules</fo:inline>, total number of <fo:inline font-style="italic">analyzed modules</fo:inline>;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_calls</fo:inline> (*), total number of calls (in all
           modules), regarding instances of one function call in 
           different lines as separate calls;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_function_calls</fo:inline> (*), total number of <fo:inline font-style="italic">local calls</fo:inline>, resolved <fo:inline font-style="italic">external calls</fo:inline> and 
          <fo:inline font-style="italic">unresolved calls</fo:inline>;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_functions</fo:inline> (*), total number of local and exported
           functions;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_inter_function_calls</fo:inline> (*), total number of
           calls of the <fo:inline font-style="italic">Inter Call Graph</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">info/2</fo:inline> and <fo:inline font-family="monospace">info/3</fo:inline> return information about
          all or some of the analyzed modules, applications, releases
          or library modules of an Xref server. 
          The following information is returned for every analyzed module:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">application</fo:inline>, an empty list if the module does 
           not belong to any application, otherwise a list of 
           the application name;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">builtins</fo:inline>, whether calls to BIFs are included
           in the module's data;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">directory</fo:inline>, the directory where the
           module's BEAM file is located;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_calls</fo:inline> (*), number of calls, regarding
           instances of one function call in different lines as
           separate calls;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_function_calls</fo:inline> (*), number of local
           calls, resolved external calls and unresolved calls;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_functions</fo:inline> (*), number of local and exported
           functions;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_inter_function_calls</fo:inline> (*), number of calls
           of the Inter Call Graph;</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following information is returned for every application:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">directory</fo:inline>, the directory where the
           modules' BEAM files are located;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_analyzed_modules</fo:inline>, number of analyzed
           modules;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_calls</fo:inline> (*), number of calls of the
           application's modules, regarding instances of
           one function call in different lines as separate calls;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_function_calls</fo:inline> (*), number of local
           calls, resolved external calls and unresolved calls of the
           application's modules;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_functions</fo:inline> (*), number of local and exported
           functions of the application's modules;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_inter_function_calls</fo:inline> (*), number of calls
           of the Inter Call Graph of the
           application's modules;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">release</fo:inline>, an empty list if the application does not
           belong to any release, otherwise a list of the release name;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">version</fo:inline>, the application's version as
           a list of numbers. For instance, the directory "kernel-2.6"
           results in the application name <fo:inline font-family="monospace">kernel</fo:inline> and the
           application version [2,6]; "kernel" yields the name
          <fo:inline font-family="monospace">kernel</fo:inline> and the version [].</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following information is returned for every release:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">directory</fo:inline>, the release directory;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_analyzed_modules</fo:inline>, number of analyzed
           modules;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_applications</fo:inline>, number of applications;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_calls</fo:inline> (*), number of calls of the
           release's modules, regarding
           instances of one function call in different lines as
           separate calls;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_function_calls</fo:inline> (*), number of local
           calls, resolved external calls and unresolved
           calls of the release's modules;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_functions</fo:inline> (*), number of local and exported
           functions of the release's modules;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_inter_function_calls</fo:inline> (*), number of calls
           of the Inter Call Graph of the release's modules.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following information is returned for every library module:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">directory</fo:inline>, the directory where the <fo:inline font-style="italic">library module's</fo:inline> BEAM file is located.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For every number of calls, functions etc. returned by the
          <fo:inline font-family="monospace">no_</fo:inline> tags, there is a query returning the same number.
          Listed below are examples of such queries. Some of the
          queries return the sum of a two or more of the <fo:inline font-family="monospace">no_</fo:inline>
          tags numbers. <fo:inline font-family="monospace">mod</fo:inline> (<fo:inline font-family="monospace">app</fo:inline>, <fo:inline font-family="monospace">rel</fo:inline>) refers to
          any module (application, release).
          </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">no_analyzed_modules</fo:inline></fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# AM"</fo:inline> (info/1)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# (Mod) app:App"</fo:inline> 
               (application)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# (Mod) rel:Rel"</fo:inline> (release)</fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">no_applications</fo:inline></fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# A"</fo:inline> (info/1)</fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">no_calls</fo:inline>. The sum of the number of resolved and
              unresolved calls:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# (XLin) E + # (LLin) E"</fo:inline> (info/1)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"T = E | mod:Mod, # (LLin) T + # (XLin) T"</fo:inline> 
               (module)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"T = E | app:App, # (LLin) T + # (XLin) T"</fo:inline> 
               (application)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"T = E | rel:Rel, # (LLin) T + # (XLin) T"</fo:inline> 
               (release)</fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">no_functions</fo:inline>. Functions in library modules and
              the functions <fo:inline font-family="monospace">module_info/0,1</fo:inline> are not counted by
              <fo:inline font-family="monospace">info</fo:inline>. Assuming that <fo:inline font-family="monospace">"Extra := _:module_info/\"(0|1)\" + LM"</fo:inline> has been evaluated, the
              sum of the number of local and exported functions are:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# (F - Extra)"</fo:inline> (info/1)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# (F * mod:Mod - Extra)"</fo:inline> (module)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# (F * app:App - Extra)"</fo:inline> (application)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# (F * rel:Rel - Extra)"</fo:inline> (release)</fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">no_function_calls</fo:inline>. The sum of the number of
              local calls, resolved external calls and unresolved calls:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# LC + # XC"</fo:inline> (info/1)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# LC | mod:Mod + # XC | mod:Mod"</fo:inline> (module)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# LC | app:App + # XC | app:App"</fo:inline> (application)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# LC | rel:Rel + # XC | mod:Rel"</fo:inline> (release)</fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">no_inter_function_calls</fo:inline></fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# EE"</fo:inline> (info/1)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# EE | mod:Mod"</fo:inline> (module)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# EE | app:App"</fo:inline> (application)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# EE | rel:Rel"</fo:inline> (release)</fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">no_releases</fo:inline></fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"# R"</fo:inline> (info/1)</fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4297264">m(Module) -&gt; [DebugInfoResult] | [NoDebugInfoResult] | Error</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4297760">m(File) -&gt; [DebugInfoResult] | [NoDebugInfoResult] | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DebugInfoResult = {deprecated, [funcall()]} | {undefined, [funcall()]} | {unused, [mfa()]}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = file()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = module()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NoDebugInfoResult = {deprecated, [mfa()]} | {undefined, [mfa()]}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {file_error, file(), error()} | {interpreted, module()} | {invalid_filename, term()} | {cover_compiled, module()} | {no_such_module, module()}  | - error from beam_lib:chunks/2 -</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The given BEAM file (with or without the <fo:inline font-family="monospace">.beam</fo:inline>
          extension) or the file found by calling
          <fo:inline font-family="monospace">code:which(Module)</fo:inline> is checked for calls to <fo:inline font-style="italic">deprecated functions</fo:inline>, calls to <fo:inline font-style="italic">undefined functions</fo:inline>,
          and for unused local functions. The code path is used as
          <fo:inline font-style="italic">library path</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the BEAM file contains <fo:inline font-style="italic">debug information</fo:inline>, then a
          list of tuples is returned. The first element of each tuple
          is one of:
          </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">deprecated</fo:inline>, the second element is a sorted list
           of calls to deprecated functions;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">undefined</fo:inline>, the second element is a sorted list
           of calls to undefined functions;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">unused</fo:inline>, the second element is a sorted list of
           unused local functions.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the BEAM file does not contain debug information, then a
          list of tuples is returned. The first element of each tuple
          is one of:
          </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">deprecated</fo:inline>, the second element is a sorted list
           of externally used deprecated functions;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">undefined</fo:inline>, the second element is a sorted list
           of undefined functions.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4314064">q(Xref, Query [, Options]) -&gt; {ok, Answer} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Answer = false | [constant()] | [Call] | [Component] | int() | [DefineAt] | [CallAt] | [AllLines]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Call = call() | ComponentCall</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ComponentCall = {Component, Component}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Component = [constant()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DefineAt = {mfa(), LineNumber}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CallAt = {funcall(), LineNumbers}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllLines = {{DefineAt, DefineAt}, LineNumbers}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LineNumbers = [LineNumber]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LineNumber = int()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option] | Option</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = {verbose, bool()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Query = string() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {invalid_options, term()} | {parse_error, string_position(), term()} | {type_error, string()} | {type_mismatch, string(), string()} | {unknown_analysis, term()} | {unknown_constant, string()} | {unknown_variable, variable()} | {variable_reassigned, string()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluates a <fo:inline font-style="italic">query</fo:inline> in the
          context of an <fo:inline font-style="italic">Xref server</fo:inline>, and returns the value of the last
          statement. The syntax of the value depends on the
          expression:
          </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A set of calls is represented by a sorted list without
           duplicates of <fo:inline font-family="monospace">call()</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A set of constants is represented by a sorted list
           without duplicates of <fo:inline font-family="monospace">constant()</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A set of strongly connected components is a sorted list
           without duplicates of <fo:inline font-family="monospace">Component</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A set of calls between strongly connected components is
           a sorted list without duplicates of <fo:inline font-family="monospace">ComponentCall</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A chain of calls is represented by a list of
          <fo:inline font-family="monospace">constant()</fo:inline>. The list contains the From vertex of every
           call and the To vertex of the last call.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">of</fo:inline> operator returns <fo:inline font-family="monospace">false</fo:inline> if no chain
           of calls between the given constants can be found.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The value of the <fo:inline font-family="monospace">closure</fo:inline> operator (the
          <fo:inline font-family="monospace">digraph</fo:inline> representation) is represented by the atom
          <fo:inline font-family="monospace">'closure()'</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A set of line numbered functions is represented by a sorted
           list without duplicates of <fo:inline font-family="monospace">DefineAt</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A set of line numbered function calls is represented by
           a sorted list without duplicates of <fo:inline font-family="monospace">CallAt</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A set of line numbered functions and function calls is
           represented by a sorted list without duplicates of
          <fo:inline font-family="monospace">AllLines</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For both <fo:inline font-family="monospace">CallAt</fo:inline> and <fo:inline font-family="monospace">AllLines</fo:inline> it holds that for
          no list element is <fo:inline font-family="monospace">LineNumbers</fo:inline> an empty list; such
          elements have been removed. The constants of <fo:inline font-family="monospace">component</fo:inline>
          and the integers of <fo:inline font-family="monospace">LineNumbers</fo:inline> are sorted and without
          duplicates.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4340256">remove_application(Xref, Applications) -&gt; ok | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Applications = application() | [application()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {no_such_application, application()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes applications and their modules and <fo:inline font-style="italic">module data</fo:inline> from an <fo:inline font-style="italic">Xref server</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4346336">remove_module(Xref, Modules) -&gt; ok | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Modules = module() | [module()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {no_such_module, module()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes <fo:inline font-style="italic">analyzed modules</fo:inline> and <fo:inline font-style="italic">module data</fo:inline> from an <fo:inline font-style="italic">Xref server</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4353072">remove_release(Xref, Releases) -&gt; ok | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {no_such_release, release()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Releases = release() | [release()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes releases and their applications, modules and
          <fo:inline font-style="italic">module data</fo:inline> from an
          <fo:inline font-style="italic">Xref server</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4359152">replace_application(Xref, Application,  Directory [, Options]) -&gt; {ok, application()} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Application = application()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Directory = directory()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option] | Option</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = {builtins, bool()} | {verbose, bool()}  | {warnings, bool()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {no_such_application, application()} | - see also add_application -</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Replaces the modules of an application with other modules
          read from an application directory. Release membership of the
          application is retained. Note that the name of the
          application is kept; the name of the given directory is not
          used.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4365504">replace_module(Xref, Module, File [, Options]) -&gt;  {ok, module()} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = file()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = module()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option] | Option</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = {verbose, bool()} | {warnings, bool()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReadModule = module()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {module_mismatch, module(), ReadModule} | {no_such_module, module()}  | - see also add_module -</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Replaces <fo:inline font-style="italic">module data</fo:inline> of an <fo:inline font-style="italic">analyzed module</fo:inline> with
          data read from a BEAM file. Application membership of the
          module is retained, and so is the value of the
          <fo:inline font-family="monospace">builtins</fo:inline> option of the module. An error is returned
          if the name of the read module differs from the given
          module.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">update</fo:inline> function is an alternative for updating
          module data of recompiled modules.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4375120">set_default(Xref, Option, Value) -&gt; {ok, OldValue} | Error</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4375616">set_default(Xref, OptionValues) -&gt; ok | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionValues = [OptionValue] | OptionValue</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionValue = {Option, Value}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = builtins | recurse | verbose | warnings</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {invalid_options, term()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = bool()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the default value of one or more options. 
          The options that can be set this way are:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">builtins</fo:inline>, with initial default value <fo:inline font-family="monospace">false</fo:inline>;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">recurse</fo:inline>, with initial default value <fo:inline font-family="monospace">false</fo:inline>;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">verbose</fo:inline>, with initial default value <fo:inline font-family="monospace">false</fo:inline>;</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">warnings</fo:inline>, with initial default value <fo:inline font-family="monospace">true</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The initial default values are set when creating an <fo:inline font-style="italic">Xref server</fo:inline>. 
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4388400">set_library_path(Xref, LibraryPath [, Options]) -&gt;  ok | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LibraryPath = library_path()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option] | Option</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = {verbose, bool()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {invalid_options, term()} | {invalid_path, term()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the <fo:inline font-style="italic">library path</fo:inline>. If the given path is a list of
          directories, the set of <fo:inline font-style="italic">library modules</fo:inline> is
          determined by choosing the first module
          encountered while traversing the directories in
          the given order, for those modules that occur in more than
          one directory. By default, the library path is an empty list.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The library path           
<fo:inline font-family="monospace">code_path</fo:inline> is
          used by the functions
          <fo:inline font-family="monospace">m/1</fo:inline> and <fo:inline font-family="monospace">d/1</fo:inline>, but can also be set explicitly.
          Note however that the code path will be traversed once for
          each used <fo:inline font-style="italic">library module</fo:inline> while setting up module data.
          On the other hand, if there are only a few modules that are
          used but not analyzed, using <fo:inline font-family="monospace">code_path</fo:inline> may be faster
          than setting the library path to <fo:inline font-family="monospace">code:get_path()</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the library path is set to <fo:inline font-family="monospace">code_path</fo:inline>, the set of
          library modules is not determined, and the <fo:inline font-family="monospace">info</fo:inline>
          functions will return empty lists of library modules.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4401456">start(NameOrOptions) -&gt; Return</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NameOrOptions = Name | Options</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option] | Option</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = {xref_mode, mode()} | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Return = {ok, pid()}  | {error, {already_started, pid()}}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an <fo:inline font-style="italic">Xref server</fo:inline>.
          The process may optionally be given a name.
          The default <fo:inline font-style="italic">mode</fo:inline> is <fo:inline font-family="monospace">functions</fo:inline>.
          Options that are not recognized by Xref
          are passed on to <fo:inline font-family="monospace">gen_server:start/4</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4408960">start(Name, Options) -&gt; Return</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option] | Option</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = {xref_mode, mode()} | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Return = {ok, pid()}  | {error, {already_started, pid()}}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an <fo:inline font-style="italic">Xref server</fo:inline>
          with a given name. 
          The default <fo:inline font-style="italic">mode</fo:inline> is <fo:inline font-family="monospace">functions</fo:inline>.
          Options that are not recognized by Xref
          are passed on to <fo:inline font-family="monospace">gen_server:start/4</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4415968">stop(Xref)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops an <fo:inline font-style="italic">Xref server</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4419824">update(Xref [, Options]) -&gt; {ok, Modules} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, module(), Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Modules = [module()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option] | Option</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = {verbose, bool()} | {warnings, bool()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {invalid_options, term()} | {module_mismatch, module(), ReadModule} | - see also add_module -</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Replaces the <fo:inline font-style="italic">module data</fo:inline> of all <fo:inline font-style="italic">analyzed modules</fo:inline> the BEAM
          files of which have been modified since last read by an
          <fo:inline font-family="monospace">add</fo:inline> function or <fo:inline font-family="monospace">update</fo:inline>. Application membership
          of the modules is retained, and so is the value of the
          <fo:inline font-family="monospace">builtins</fo:inline> option. Returns a sorted list
          of the names of the replaced modules.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4428416">variables(Xref [, Options]) -&gt; {ok, [VariableInfo]}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option] | Option</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = predefined | user | {verbose, bool()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {invalid_options, term()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">VariableInfo = {predefined, [variable()]} | {user, [variable()]}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xref = xref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a sorted lists of the names of the variables of an
          <fo:inline font-style="italic">Xref server</fo:inline>. 
          The default is to return the <fo:inline font-style="italic">user variables</fo:inline> only.</fo:block>
      </fo:block>
  

  <fo:block id="idp4435184" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      <fo:inline font-style="italic">beam_lib(3)</fo:inline>,
      <fo:inline font-style="italic">digraph(3)</fo:inline>,
      <fo:inline font-style="italic">digraph_utils(3)</fo:inline>,
      <fo:inline font-style="italic">re(3)</fo:inline>,
      <fo:inline font-style="italic">TOOLS User's Guide</fo:inline></fo:block>
  
</fo:flow>
  </fo:page-sequence>
</fo:root>
