<module name="code">
<type>
  <name>add_path_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-add_path_ret">add_path_ret()</marker> = true | {error, bad_directory}</typehead></typedecl>
</type>
<type>
  <name>load_error_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-load_error_rsn">load_error_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>badfile |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nofile |<br/><nbsp/><nbsp/><nbsp/><nbsp/>not_purged |<br/><nbsp/><nbsp/><nbsp/><nbsp/>on_load_failure |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sticky_directory</typehead></typedecl>
</type>
<type>
  <name>load_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-load_ret">load_ret()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, What :: <seealso marker="#type-load_error_rsn">load_error_rsn()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{module, Module :: module()}</typehead></typedecl>
  <anno>Module</anno>
  <anno>What</anno>
</type>
<type>
  <name>loaded_filename</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-loaded_filename">loaded_filename()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>(Filename :: <seealso marker="file#type-filename">file:filename()</seealso>) | <seealso marker="#type-loaded_ret_atoms">loaded_ret_atoms()</seealso></typehead></typedecl>
  <anno>Filename</anno>
</type>
<type>
  <name>loaded_ret_atoms</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-loaded_ret_atoms">loaded_ret_atoms()</marker> = cover_compiled | preloaded</typehead></typedecl>
</type>
<type>
  <name>prepared_code</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-prepared_code">prepared_code()</marker></typehead></typedecl>
</type>
<spec>
  <name>add_path</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>add_path(Dir) -&gt; <seealso marker="#type-add_path_ret">add_path_ret()</seealso></head>
      <guard>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
</spec>
<spec>
  <name>add_patha</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>add_patha(Dir) -&gt; <seealso marker="#type-add_path_ret">add_path_ret()</seealso></head>
      <guard>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
</spec>
<spec>
  <name>add_paths</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>add_paths(Dirs) -&gt; ok</head>
      <guard>
        <subtype><typename>Dirs</typename><string>Dirs = [Dir :: <seealso marker="file#type-filename">file:filename()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Dirs</anno>
</spec>
<spec>
  <name>add_pathsa</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>add_pathsa(Dirs) -&gt; ok</head>
      <guard>
        <subtype><typename>Dirs</typename><string>Dirs = [Dir :: <seealso marker="file#type-filename">file:filename()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Dirs</anno>
</spec>
<spec>
  <name>add_pathsz</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>add_pathsz(Dirs) -&gt; ok</head>
      <guard>
        <subtype><typename>Dirs</typename><string>Dirs = [Dir :: <seealso marker="file#type-filename">file:filename()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Dirs</anno>
</spec>
<spec>
  <name>add_pathz</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>add_pathz(Dir) -&gt; <seealso marker="#type-add_path_ret">add_path_ret()</seealso></head>
      <guard>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
</spec>
<spec>
  <name>all_loaded</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>all_loaded() -&gt; [{Module, Loaded}]</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Loaded</typename><string>Loaded = <seealso marker="#type-loaded_filename">loaded_filename()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Loaded</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>atomic_load</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>atomic_load(Modules) -&gt; ok | {error, [{Module, What}]}</head>
      <guard>
        <subtype><typename>Modules</typename><string>Modules = [Module | {Module, Filename, Binary}]</string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
        <subtype><typename>What</typename><string>What = <br/><nbsp/><nbsp/><nbsp/><nbsp/>badfile |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nofile |<br/><nbsp/><nbsp/><nbsp/><nbsp/>on_load_not_allowed |<br/><nbsp/><nbsp/><nbsp/><nbsp/>duplicated |<br/><nbsp/><nbsp/><nbsp/><nbsp/>not_purged |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sticky_directory |<br/><nbsp/><nbsp/><nbsp/><nbsp/>pending_on_load</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Filename</anno>
  <anno>Module</anno>
  <anno>Modules</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>clash</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>clash() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>compiler_dir</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>compiler_dir() -&gt; <seealso marker="file#type-filename">file:filename()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>del_path</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>del_path(NameOrDir) -&gt; boolean() | {error, What}</head>
      <guard>
        <subtype><typename>NameOrDir</typename><string>NameOrDir = Name | Dir</string></subtype>
        <subtype><typename>Name</typename><string>Name = atom()</string></subtype>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
        <subtype><typename>What</typename><string>What = bad_name</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Name</anno>
  <anno>NameOrDir</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>delete</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>delete(Module) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>ensure_loaded</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ensure_loaded(Module) -&gt; {module, Module} | {error, What}</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>What</typename><string>What = embedded | badfile | nofile | on_load_failure</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>ensure_modules_loaded</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ensure_modules_loaded(Modules :: [Module]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, [{Module, What}]}</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>What</typename><string>What = badfile | nofile | on_load_failure</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
  <anno>Modules</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>finish_loading</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>finish_loading(Prepared) -&gt; ok | {error, [{Module, What}]}</head>
      <guard>
        <subtype><typename>Prepared</typename><string>Prepared = <seealso marker="#type-prepared_code">prepared_code()</seealso></string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>What</typename><string>What = not_purged | sticky_directory | pending_on_load</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
  <anno>Prepared</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>get_chunk</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get_chunk(Bin, Chunk) -&gt; binary() | undefined</head>
      <guard>
        <subtype><typename>Bin</typename><string>Bin = binary()</string></subtype>
        <subtype><typename>Chunk</typename><string>Chunk = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bin</anno>
  <anno>Chunk</anno>
</spec>
<spec>
  <name>get_mode</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_mode() -&gt; embedded | interactive</head></clause>
  </contract>
</spec>
<spec>
  <name>get_object_code</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_object_code(Module) -&gt; {Module, Binary, Filename} | error</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Filename</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>get_path</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_path() -&gt; Path</head>
      <guard>
        <subtype><typename>Path</typename><string>Path = [Dir :: <seealso marker="file#type-filename">file:filename()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Path</anno>
</spec>
<spec>
  <name>is_loaded</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_loaded(Module) -&gt; {file, Loaded} | false</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Loaded</typename><string>Loaded = <seealso marker="#type-loaded_filename">loaded_filename()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Loaded</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>is_module_native</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_module_native(Module) -&gt; true | false | undefined</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>is_sticky</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_sticky(Module) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>lib_dir</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>lib_dir() -&gt; <seealso marker="file#type-filename">file:filename()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>lib_dir</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>lib_dir(Name) -&gt; <seealso marker="file#type-filename">file:filename()</seealso> | {error, bad_name}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>lib_dir</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lib_dir(Name, SubDir) -&gt; <seealso marker="file#type-filename">file:filename()</seealso> | {error, bad_name}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = SubDir = atom()</string></subtype>
        <subtype><typename>SubDir</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>SubDir</anno>
</spec>
<spec>
  <name>load_abs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>load_abs(Filename) -&gt; <seealso marker="#type-load_ret">load_ret()</seealso></head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
</spec>
<spec>
  <name>load_abs</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>load_abs(Filename :: <seealso marker="#type-loaded_filename">loaded_filename()</seealso>, Module :: module()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-load_ret">load_ret()</seealso></head></clause>
  </contract>
  <anno>Filename</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>load_binary</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>load_binary(Module, Filename, Binary) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{module, Module} | {error, What}</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="#type-loaded_filename">loaded_filename()</seealso></string></subtype>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
        <subtype><typename>What</typename><string>What = badarg | <seealso marker="#type-load_error_rsn">load_error_rsn()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Filename</anno>
  <anno>Module</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>load_file</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>load_file(Module) -&gt; <seealso marker="#type-load_ret">load_ret()</seealso></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>load_native_partial</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>load_native_partial(Module :: module(), Binary :: binary()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-load_ret">load_ret()</seealso></head></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>load_native_sticky</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>load_native_sticky(Module :: module(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Binary :: binary(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>WholeModule :: false | binary()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-load_ret">load_ret()</seealso></head></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Module</anno>
  <anno>WholeModule</anno>
</spec>
<spec>
  <name>make_stub_module</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>make_stub_module(LoaderState, Beam, Info) -&gt; module()</head>
      <guard>
        <subtype><typename>LoaderState</typename><string>LoaderState = Beam = binary()</string></subtype>
        <subtype><typename>Beam</typename><string/></subtype>
        <subtype><typename>Info</typename><string>Info = {list(), list(), binary()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Beam</anno>
  <anno>Info</anno>
  <anno>LoaderState</anno>
</spec>
<spec>
  <name>modified_modules</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>modified_modules() -&gt; [module()]</head></clause>
  </contract>
</spec>
<spec>
  <name>module_md5</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>module_md5(X1 :: binary()) -&gt; binary() | undefined</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>module_status</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>module_status(Module :: module()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>not_loaded | loaded | modified | removed</head></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>objfile_extension</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>objfile_extension() -&gt; nonempty_string()</head></clause>
  </contract>
</spec>
<spec>
  <name>prepare_loading</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>prepare_loading(Modules) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Prepared} | {error, [{Module, What}]}</head>
      <guard>
        <subtype><typename>Modules</typename><string>Modules = [Module | {Module, Filename, Binary}]</string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
        <subtype><typename>Prepared</typename><string>Prepared = <seealso marker="#type-prepared_code">prepared_code()</seealso></string></subtype>
        <subtype><typename>What</typename><string>What = badfile | nofile | on_load_not_allowed | duplicated</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Filename</anno>
  <anno>Module</anno>
  <anno>Modules</anno>
  <anno>Prepared</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>priv_dir</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>priv_dir(Name) -&gt; <seealso marker="file#type-filename">file:filename()</seealso> | {error, bad_name}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>purge</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>purge(Module) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>rehash</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>rehash() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>replace_path</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>replace_path(Name, Dir) -&gt; true | {error, What}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = atom()</string></subtype>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
        <subtype><typename>What</typename><string>What = bad_directory | bad_name | {badarg, term()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Name</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>root_dir</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>root_dir() -&gt; <seealso marker="file#type-filename">file:filename()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>set_path</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>set_path(Path) -&gt; true | {error, What}</head>
      <guard>
        <subtype><typename>Path</typename><string>Path = [Dir :: <seealso marker="file#type-filename">file:filename()</seealso>]</string></subtype>
        <subtype><typename>What</typename><string>What = bad_directory</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Path</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>set_primary_archive</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>set_primary_archive(ArchiveFile :: <seealso marker="file#type-filename">file:filename()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ArchiveBin :: binary(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>FileInfo :: <seealso marker="file#type-file_info">file:file_info()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ParserFun :: function()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, atom()}</head></clause>
  </contract>
  <anno>ArchiveBin</anno>
  <anno>ArchiveFile</anno>
  <anno>FileInfo</anno>
  <anno>ParserFun</anno>
</spec>
<spec>
  <name>soft_purge</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>soft_purge(Module) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>start_link() -&gt; {ok, pid()} | {error, crash}</head></clause>
  </contract>
</spec>
<spec>
  <name>stick_dir</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>stick_dir(Dir) -&gt; ok | error</head>
      <guard>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
</spec>
<spec>
  <name>stick_mod</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>stick_mod(Module :: module()) -&gt; true</head></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>stop</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>stop() -&gt; no_return()</head></clause>
  </contract>
</spec>
<spec>
  <name>unstick_dir</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>unstick_dir(Dir) -&gt; ok | error</head>
      <guard>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
</spec>
<spec>
  <name>unstick_mod</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>unstick_mod(Module :: module()) -&gt; true</head></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>where_is_file</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>where_is_file(Filename) -&gt; non_existing | Absname</head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = Absname = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
        <subtype><typename>Absname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Absname</anno>
  <anno>Filename</anno>
</spec>
<spec>
  <name>where_is_file</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>where_is_file(Path :: [Dir | {Dir, Files}],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Filename :: <seealso marker="file#type-filename">file:filename()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>non_existing | <seealso marker="file#type-filename">file:filename()</seealso></head>
      <guard>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
        <subtype><typename>Files</typename><string>Files = [<seealso marker="file#type-filename">file:filename()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Filename</anno>
  <anno>Files</anno>
  <anno>Path</anno>
</spec>
<spec>
  <name>which</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>which(Module) -&gt; Which</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Which</typename><string>Which = <seealso marker="file#type-filename">file:filename()</seealso> | <seealso marker="#type-loaded_ret_atoms">loaded_ret_atoms()</seealso> | non_existing</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
  <anno>Which</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:38.</timestamp>
</module>