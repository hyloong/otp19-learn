<module name="erl_prettypr">
<type>
  <name>clause_t</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-clause_t">clause_t()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>case_expr |<br/><nbsp/><nbsp/><nbsp/><nbsp/>cond_expr |<br/><nbsp/><nbsp/><nbsp/><nbsp/>fun_expr |<br/><nbsp/><nbsp/><nbsp/><nbsp/>if_expr |<br/><nbsp/><nbsp/><nbsp/><nbsp/>receive_expr |<br/><nbsp/><nbsp/><nbsp/><nbsp/>try_expr |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{function, <seealso marker="prettypr#type-document">prettypr:document()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>spec</typehead></typedecl>
</type>
<type>
  <name>context</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-context">context()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#ctxt{prec = integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>sub_indent = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>break_indent = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>clause = <seealso marker="#type-clause_t">clause_t()</seealso> | undefined,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>hook = <seealso marker="#type-hook">hook()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>paper = integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ribbon = integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>user = term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>encoding = <seealso marker="epp#type-source_encoding">epp:source_encoding()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>hook</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-hook">hook()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>none |<br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, term(), term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="prettypr#type-document">prettypr:document()</seealso>)</typehead></typedecl>
</type>
<spec>
  <name>best</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>best(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>empty | <seealso marker="prettypr#type-document">prettypr:document()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>best</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>best(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, Options :: [term()]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>empty | <seealso marker="prettypr#type-document">prettypr:document()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>format</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>format(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt; string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>format</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>format(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, Options :: [term()]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>string()</head></clause>
  </contract>
  <anno>Node</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>get_ctxt_hook</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_ctxt_hook(Ctxt :: <seealso marker="#type-context">context()</seealso>) -&gt; <seealso marker="#type-hook">hook()</seealso></head></clause>
  </contract>
  <anno>Ctxt</anno>
</spec>
<spec>
  <name>get_ctxt_linewidth</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_ctxt_linewidth(Ctxt :: <seealso marker="#type-context">context()</seealso>) -&gt; integer()</head></clause>
  </contract>
  <anno>Ctxt</anno>
</spec>
<spec>
  <name>get_ctxt_paperwidth</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_ctxt_paperwidth(Ctxt :: <seealso marker="#type-context">context()</seealso>) -&gt; integer()</head></clause>
  </contract>
  <anno>Ctxt</anno>
</spec>
<spec>
  <name>get_ctxt_precedence</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_ctxt_precedence(Ctxt :: <seealso marker="#type-context">context()</seealso>) -&gt; integer()</head></clause>
  </contract>
  <anno>Ctxt</anno>
</spec>
<spec>
  <name>get_ctxt_user</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_ctxt_user(Ctxt :: <seealso marker="#type-context">context()</seealso>) -&gt; term()</head></clause>
  </contract>
  <anno>Ctxt</anno>
</spec>
<spec>
  <name>layout</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>layout(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt; <seealso marker="prettypr#type-document">prettypr:document()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>layout</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>layout(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, Options :: [term()]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="prettypr#type-document">prettypr:document()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>set_ctxt_hook</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_ctxt_hook(Ctxt :: <seealso marker="#type-context">context()</seealso>, Hook :: <seealso marker="#type-hook">hook()</seealso>) -&gt; <seealso marker="#type-context">context()</seealso></head></clause>
  </contract>
  <anno>Ctxt</anno>
  <anno>Hook</anno>
</spec>
<spec>
  <name>set_ctxt_linewidth</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_ctxt_linewidth(Ctxt :: <seealso marker="#type-context">context()</seealso>, W :: integer()) -&gt; <seealso marker="#type-context">context()</seealso></head></clause>
  </contract>
  <anno>Ctxt</anno>
  <anno>W</anno>
</spec>
<spec>
  <name>set_ctxt_paperwidth</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_ctxt_paperwidth(Ctxt :: <seealso marker="#type-context">context()</seealso>, W :: integer()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-context">context()</seealso></head></clause>
  </contract>
  <anno>Ctxt</anno>
  <anno>W</anno>
</spec>
<spec>
  <name>set_ctxt_precedence</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_ctxt_precedence(Ctxt :: <seealso marker="#type-context">context()</seealso>, Prec :: integer()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-context">context()</seealso></head></clause>
  </contract>
  <anno>Ctxt</anno>
  <anno>Prec</anno>
</spec>
<spec>
  <name>set_ctxt_user</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_ctxt_user(Ctxt :: <seealso marker="#type-context">context()</seealso>, X :: term()) -&gt; <seealso marker="#type-context">context()</seealso></head></clause>
  </contract>
  <anno>Ctxt</anno>
  <anno>X</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:31:51.</timestamp>
</module>