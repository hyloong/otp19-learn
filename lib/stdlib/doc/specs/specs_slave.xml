<module name="slave">
<spec>
  <name>pseudo</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>pseudo</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>pseudo(Master, ServerList) -&gt; ok</head>
      <guard>
        <subtype><typename>Master</typename><string>Master = node()</string></subtype>
        <subtype><typename>ServerList</typename><string>ServerList = [atom()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Master</anno>
  <anno>ServerList</anno>
</spec>
<spec>
  <name>relay</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>relay(Pid) -&gt; no_return()</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
</spec>
<spec>
  <name>slave_start</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>start</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>start(Host) -&gt; {ok, Node} | {error, Reason}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seealso marker="inet#type-hostname">inet:hostname()</seealso></string></subtype>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = timeout | no_rsh | {already_running, Node}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>start</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start(Host, Name) -&gt; {ok, Node} | {error, Reason}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seealso marker="inet#type-hostname">inet:hostname()</seealso></string></subtype>
        <subtype><typename>Name</typename><string>Name = atom() | string()</string></subtype>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = timeout | no_rsh | {already_running, Node}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Name</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>start</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>start(Host, Name, Args) -&gt; {ok, Node} | {error, Reason}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seealso marker="inet#type-hostname">inet:hostname()</seealso></string></subtype>
        <subtype><typename>Name</typename><string>Name = atom() | string()</string></subtype>
        <subtype><typename>Args</typename><string>Args = string()</string></subtype>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = timeout | no_rsh | {already_running, Node}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Host</anno>
  <anno>Name</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>start</name>
  <arity>5</arity>
  <contract/>
</spec>
<spec>
  <name>start_link</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>start_link(Host) -&gt; {ok, Node} | {error, Reason}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seealso marker="inet#type-hostname">inet:hostname()</seealso></string></subtype>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = timeout | no_rsh | {already_running, Node}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start_link(Host, Name) -&gt; {ok, Node} | {error, Reason}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seealso marker="inet#type-hostname">inet:hostname()</seealso></string></subtype>
        <subtype><typename>Name</typename><string>Name = atom() | string()</string></subtype>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = timeout | no_rsh | {already_running, Node}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Name</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>start_link(Host, Name, Args) -&gt; {ok, Node} | {error, Reason}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seealso marker="inet#type-hostname">inet:hostname()</seealso></string></subtype>
        <subtype><typename>Name</typename><string>Name = atom() | string()</string></subtype>
        <subtype><typename>Args</typename><string>Args = string()</string></subtype>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = timeout | no_rsh | {already_running, Node}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Host</anno>
  <anno>Name</anno>
  <anno>Node</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>stop</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>stop(Node) -&gt; ok</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>wait_for_master_to_die</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>wait_for_slave</name>
  <arity>7</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:26.</timestamp>
</module>