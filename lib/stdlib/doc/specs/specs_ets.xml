<module name="ets">
<type>
  <name>access</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-access">access()</marker> = public | protected | private</typehead></typedecl>
</type>
<type>
  <name>comp_match_spec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-comp_match_spec">comp_match_spec()</marker></typehead></typedecl>
</type>
<type>
  <name>continuation</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-continuation">continuation()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>'$end_of_table' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="#type-tab">tab()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-comp_match_spec">comp_match_spec()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>list(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="#type-tab">tab()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-comp_match_spec">comp_match_spec()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>list(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer()}</typehead></typedecl>
</type>
<type>
  <name>match_pattern</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-match_pattern">match_pattern()</marker> = atom() | tuple()</typehead></typedecl>
</type>
<type>
  <name>match_spec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-match_spec">match_spec()</marker> = [{<seealso marker="#type-match_pattern">match_pattern()</seealso>, [term()], [term()]}]</typehead></typedecl>
</type>
<type>
  <name>tab</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-tab">tab()</marker> = atom() | <seealso marker="#type-tid">tid()</seealso></typehead></typedecl>
</type>
<type>
  <name>tid</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-tid">tid()</marker></typehead></typedecl>
</type>
<type>
  <name>type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-type">type()</marker> = set | ordered_set | bag | duplicate_bag</typehead></typedecl>
</type>
<spec>
  <name>all</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>all() -&gt; [Tab]</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Tab</anno>
</spec>
<spec>
  <name>delete</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>delete(Tab) -&gt; true</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Tab</anno>
</spec>
<spec>
  <name>delete</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>delete(Tab, Key) -&gt; true</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>delete_all_objects</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>delete_all_objects(Tab) -&gt; true</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Tab</anno>
</spec>
<spec>
  <name>delete_object</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>delete_object(Tab, Object) -&gt; true</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Object</typename><string>Object = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Object</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>file2tab</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>file2tab(Filename) -&gt; {ok, Tab} | {error, Reason}</head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-name">file:name()</seealso></string></subtype>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
  <anno>Reason</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>file2tab</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>file2tab(Filename, Options) -&gt; {ok, Tab} | {error, Reason}</head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-name">file:name()</seealso></string></subtype>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = {verify, boolean()}</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Reason</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>filter</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>filter(Tn :: <seealso marker="#type-tab">tab()</seealso>, F :: function(), A :: [term()]) -&gt; [term()]</head></clause>
  </contract>
  <anno>A</anno>
  <anno>F</anno>
  <anno>Tn</anno>
</spec>
<spec>
  <name>first</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>first(Tab) -&gt; Key | '$end_of_table'</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>foldl</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>foldl(Function, Acc0, Tab) -&gt; Acc1</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = fun((Element :: term(), AccIn) -&gt; AccOut)</string></subtype>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Acc0</typename><string>Acc0 = Acc1 = AccIn = AccOut = term()</string></subtype>
        <subtype><typename>Acc1</typename><string></string></subtype>
        <subtype><typename>AccIn</typename><string></string></subtype>
        <subtype><typename>AccOut</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Acc0</anno>
  <anno>Acc1</anno>
  <anno>AccIn</anno>
  <anno>AccOut</anno>
  <anno>Element</anno>
  <anno>Function</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>foldr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>foldr(Function, Acc0, Tab) -&gt; Acc1</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = fun((Element :: term(), AccIn) -&gt; AccOut)</string></subtype>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Acc0</typename><string>Acc0 = Acc1 = AccIn = AccOut = term()</string></subtype>
        <subtype><typename>Acc1</typename><string></string></subtype>
        <subtype><typename>AccIn</typename><string></string></subtype>
        <subtype><typename>AccOut</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Acc0</anno>
  <anno>Acc1</anno>
  <anno>AccIn</anno>
  <anno>AccOut</anno>
  <anno>Element</anno>
  <anno>Function</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>from_dets</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>from_dets(Tab, DetsTab) -&gt; true</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>DetsTab</typename><string>DetsTab = <seealso marker="dets#type-tab_name">dets:tab_name()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>DetsTab</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>fun2ms</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fun2ms(LiteralFun) -&gt; MatchSpec</head>
      <guard>
        <subtype><typename>LiteralFun</typename><string>LiteralFun = function()</string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <seealso marker="#type-match_spec">match_spec()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>LiteralFun</anno>
  <anno>MatchSpec</anno>
</spec>
<spec>
  <name>give_away</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>give_away(Tab, Pid, GiftData) -&gt; true</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>GiftData</typename><string>GiftData = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>GiftData</anno>
  <anno>Pid</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>i</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>i() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>i</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>i(Tab) -&gt; ok</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Tab</anno>
</spec>
<spec>
  <name>i</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>i(Tab :: <seealso marker="#type-tab">tab()</seealso>, Height :: integer() &gt;= 1) -&gt; ok</head></clause>
  </contract>
  <anno>Height</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>i</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>i(Tab :: <seealso marker="#type-tab">tab()</seealso>, Height :: integer() &gt;= 1, Width :: integer() &gt;= 1) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head></clause>
  </contract>
  <anno>Height</anno>
  <anno>Tab</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>info(Tab) -&gt; InfoList | undefined</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>InfoList</typename><string>InfoList = [InfoTuple]</string></subtype>
        <subtype><typename>InfoTuple</typename><string>InfoTuple = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{compressed, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{heir, pid() | none} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{keypos, integer() &gt;= 1} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{memory, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{name, atom()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{named_table, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{node, node()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{owner, pid()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{protection, <seealso marker="#type-access">access()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{size, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{type, <seealso marker="#type-type">type()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{write_concurrency, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{read_concurrency, boolean()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>InfoList</anno>
  <anno>InfoTuple</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>info(Tab, Item) -&gt; Value | undefined</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Item</typename><string>Item = <br/><nbsp/><nbsp/><nbsp/><nbsp/>compressed |<br/><nbsp/><nbsp/><nbsp/><nbsp/>fixed |<br/><nbsp/><nbsp/><nbsp/><nbsp/>heir |<br/><nbsp/><nbsp/><nbsp/><nbsp/>keypos |<br/><nbsp/><nbsp/><nbsp/><nbsp/>memory |<br/><nbsp/><nbsp/><nbsp/><nbsp/>name |<br/><nbsp/><nbsp/><nbsp/><nbsp/>named_table |<br/><nbsp/><nbsp/><nbsp/><nbsp/>node |<br/><nbsp/><nbsp/><nbsp/><nbsp/>owner |<br/><nbsp/><nbsp/><nbsp/><nbsp/>protection |<br/><nbsp/><nbsp/><nbsp/><nbsp/>safe_fixed |<br/><nbsp/><nbsp/><nbsp/><nbsp/>safe_fixed_monotonic_time |<br/><nbsp/><nbsp/><nbsp/><nbsp/>size |<br/><nbsp/><nbsp/><nbsp/><nbsp/>stats |<br/><nbsp/><nbsp/><nbsp/><nbsp/>type |<br/><nbsp/><nbsp/><nbsp/><nbsp/>write_concurrency |<br/><nbsp/><nbsp/><nbsp/><nbsp/>read_concurrency</string></subtype>
        <subtype><typename>Value</typename><string>Value = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Tab</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>init_table</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>init_table(Tab, InitFun) -&gt; true</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>InitFun</typename><string>InitFun = fun((Arg) -&gt; Res)</string></subtype>
        <subtype><typename>Arg</typename><string>Arg = read | close</string></subtype>
        <subtype><typename>Res</typename><string>Res = end_of_input | {Objects :: [term()], InitFun} | term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arg</anno>
  <anno>InitFun</anno>
  <anno>Objects</anno>
  <anno>Res</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>insert</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>insert(Tab, ObjectOrObjects) -&gt; true</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>ObjectOrObjects</typename><string>ObjectOrObjects = tuple() | [tuple()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>ObjectOrObjects</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>insert_new</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>insert_new(Tab, ObjectOrObjects) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>ObjectOrObjects</typename><string>ObjectOrObjects = tuple() | [tuple()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>ObjectOrObjects</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>internal_request_all</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>internal_request_all() -&gt; reference()</head></clause>
  </contract>
</spec>
<spec>
  <name>is_compiled_ms</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_compiled_ms(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>last</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>last(Tab) -&gt; Key | '$end_of_table'</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>lookup</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lookup(Tab, Key) -&gt; [Object]</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Object</typename><string>Object = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Object</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>lookup_element</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>lookup_element(Tab, Key, Pos) -&gt; Elem</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Pos</typename><string>Pos = integer() &gt;= 1</string></subtype>
        <subtype><typename>Elem</typename><string>Elem = term() | [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Elem</anno>
  <anno>Key</anno>
  <anno>Pos</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>match</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>match(Continuation) -&gt; {[Match], Continuation} | '$end_of_table'</head>
      <guard>
        <subtype><typename>Match</typename><string>Match = [term()]</string></subtype>
        <subtype><typename>Continuation</typename><string>Continuation = <seealso marker="#type-continuation">continuation()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Continuation</anno>
  <anno>Match</anno>
</spec>
<spec>
  <name>match</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>match(Tab, Pattern) -&gt; [Match]</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Pattern</typename><string>Pattern = <seealso marker="#type-match_pattern">match_pattern()</seealso></string></subtype>
        <subtype><typename>Match</typename><string>Match = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Match</anno>
  <anno>Pattern</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>match</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>match(Tab, Pattern, Limit) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{[Match], Continuation} | '$end_of_table'</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Pattern</typename><string>Pattern = <seealso marker="#type-match_pattern">match_pattern()</seealso></string></subtype>
        <subtype><typename>Limit</typename><string>Limit = integer() &gt;= 1</string></subtype>
        <subtype><typename>Match</typename><string>Match = [term()]</string></subtype>
        <subtype><typename>Continuation</typename><string>Continuation = <seealso marker="#type-continuation">continuation()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Continuation</anno>
  <anno>Limit</anno>
  <anno>Match</anno>
  <anno>Pattern</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>match_delete</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>match_delete(Tab, Pattern) -&gt; true</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Pattern</typename><string>Pattern = <seealso marker="#type-match_pattern">match_pattern()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pattern</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>match_object</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>match_object(Continuation) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{[Object], Continuation} | '$end_of_table'</head>
      <guard>
        <subtype><typename>Object</typename><string>Object = tuple()</string></subtype>
        <subtype><typename>Continuation</typename><string>Continuation = <seealso marker="#type-continuation">continuation()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Continuation</anno>
  <anno>Object</anno>
</spec>
<spec>
  <name>match_object</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>match_object(Tab, Pattern) -&gt; [Object]</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Pattern</typename><string>Pattern = <seealso marker="#type-match_pattern">match_pattern()</seealso></string></subtype>
        <subtype><typename>Object</typename><string>Object = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Object</anno>
  <anno>Pattern</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>match_object</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>match_object(Tab, Pattern, Limit) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{[Object], Continuation} | '$end_of_table'</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Pattern</typename><string>Pattern = <seealso marker="#type-match_pattern">match_pattern()</seealso></string></subtype>
        <subtype><typename>Limit</typename><string>Limit = integer() &gt;= 1</string></subtype>
        <subtype><typename>Object</typename><string>Object = tuple()</string></subtype>
        <subtype><typename>Continuation</typename><string>Continuation = <seealso marker="#type-continuation">continuation()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Continuation</anno>
  <anno>Limit</anno>
  <anno>Object</anno>
  <anno>Pattern</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>match_spec_compile</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>match_spec_compile(MatchSpec) -&gt; CompiledMatchSpec</head>
      <guard>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <seealso marker="#type-match_spec">match_spec()</seealso></string></subtype>
        <subtype><typename>CompiledMatchSpec</typename><string>CompiledMatchSpec = <seealso marker="#type-comp_match_spec">comp_match_spec()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>CompiledMatchSpec</anno>
  <anno>MatchSpec</anno>
</spec>
<spec>
  <name>match_spec_run</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>match_spec_run(List, CompiledMatchSpec) -&gt; list()</head>
      <guard>
        <subtype><typename>List</typename><string>List = [tuple()]</string></subtype>
        <subtype><typename>CompiledMatchSpec</typename><string>CompiledMatchSpec = <seealso marker="#type-comp_match_spec">comp_match_spec()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>CompiledMatchSpec</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>match_spec_run_r</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>match_spec_run_r(List, CompiledMatchSpec, X3 :: list()) -&gt; list()</head>
      <guard>
        <subtype><typename>List</typename><string>List = [tuple()]</string></subtype>
        <subtype><typename>CompiledMatchSpec</typename><string>CompiledMatchSpec = <seealso marker="#type-comp_match_spec">comp_match_spec()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>CompiledMatchSpec</anno>
  <anno>List</anno>
  <anno>X3</anno>
</spec>
<spec>
  <name>member</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>member(Tab, Key) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>new</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>new(Name, Options) -&gt; <seealso marker="#type-tid">tid()</seealso> | atom()</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = atom()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>Type |<br/><nbsp/><nbsp/><nbsp/><nbsp/>Access |<br/><nbsp/><nbsp/><nbsp/><nbsp/>named_table |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{keypos, Pos} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{heir, Pid :: pid(), HeirData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{heir, none} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>Tweaks</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-type">type()</seealso></string></subtype>
        <subtype><typename>Access</typename><string>Access = <seealso marker="#type-access">access()</seealso></string></subtype>
        <subtype><typename>Tweaks</typename><string>Tweaks = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{write_concurrency, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{read_concurrency, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>compressed</string></subtype>
        <subtype><typename>Pos</typename><string>Pos = integer() &gt;= 1</string></subtype>
        <subtype><typename>HeirData</typename><string>HeirData = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Access</anno>
  <anno>HeirData</anno>
  <anno>Name</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Pid</anno>
  <anno>Pos</anno>
  <anno>Tweaks</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>next</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>next(Tab, Key1) -&gt; Key2 | '$end_of_table'</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key1</typename><string>Key1 = Key2 = term()</string></subtype>
        <subtype><typename>Key2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key1</anno>
  <anno>Key2</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>prev</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>prev(Tab, Key1) -&gt; Key2 | '$end_of_table'</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key1</typename><string>Key1 = Key2 = term()</string></subtype>
        <subtype><typename>Key2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key1</anno>
  <anno>Key2</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>rename</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>rename(Tab, Name) -&gt; Name</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Name</typename><string>Name = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>repair_continuation</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>repair_continuation(Continuation, MatchSpec) -&gt; Continuation</head>
      <guard>
        <subtype><typename>Continuation</typename><string>Continuation = <seealso marker="#type-continuation">continuation()</seealso></string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <seealso marker="#type-match_spec">match_spec()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Continuation</anno>
  <anno>MatchSpec</anno>
</spec>
<spec>
  <name>safe_fixtable</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>safe_fixtable(Tab, Fix) -&gt; true</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Fix</typename><string>Fix = boolean()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fix</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>select</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>select(Continuation) -&gt; {[Match], Continuation} | '$end_of_table'</head>
      <guard>
        <subtype><typename>Match</typename><string>Match = term()</string></subtype>
        <subtype><typename>Continuation</typename><string>Continuation = <seealso marker="#type-continuation">continuation()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Continuation</anno>
  <anno>Match</anno>
</spec>
<spec>
  <name>select</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>select(Tab, MatchSpec) -&gt; [Match]</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <seealso marker="#type-match_spec">match_spec()</seealso></string></subtype>
        <subtype><typename>Match</typename><string>Match = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Match</anno>
  <anno>MatchSpec</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>select</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>select(Tab, MatchSpec, Limit) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{[Match], Continuation} | '$end_of_table'</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <seealso marker="#type-match_spec">match_spec()</seealso></string></subtype>
        <subtype><typename>Limit</typename><string>Limit = integer() &gt;= 1</string></subtype>
        <subtype><typename>Match</typename><string>Match = term()</string></subtype>
        <subtype><typename>Continuation</typename><string>Continuation = <seealso marker="#type-continuation">continuation()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Continuation</anno>
  <anno>Limit</anno>
  <anno>Match</anno>
  <anno>MatchSpec</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>select_count</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>select_count(Tab, MatchSpec) -&gt; NumMatched</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <seealso marker="#type-match_spec">match_spec()</seealso></string></subtype>
        <subtype><typename>NumMatched</typename><string>NumMatched = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>MatchSpec</anno>
  <anno>NumMatched</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>select_delete</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>select_delete(Tab, MatchSpec) -&gt; NumDeleted</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <seealso marker="#type-match_spec">match_spec()</seealso></string></subtype>
        <subtype><typename>NumDeleted</typename><string>NumDeleted = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>MatchSpec</anno>
  <anno>NumDeleted</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>select_replace</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>select_replace(Tab, MatchSpec) -&gt; NumReplaced</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <seealso marker="#type-match_spec">match_spec()</seealso></string></subtype>
        <subtype><typename>NumReplaced</typename><string>NumReplaced = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>MatchSpec</anno>
  <anno>NumReplaced</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>select_reverse</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>select_reverse(Continuation) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{[Match], Continuation} | '$end_of_table'</head>
      <guard>
        <subtype><typename>Continuation</typename><string>Continuation = <seealso marker="#type-continuation">continuation()</seealso></string></subtype>
        <subtype><typename>Match</typename><string>Match = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Continuation</anno>
  <anno>Match</anno>
</spec>
<spec>
  <name>select_reverse</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>select_reverse(Tab, MatchSpec) -&gt; [Match]</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <seealso marker="#type-match_spec">match_spec()</seealso></string></subtype>
        <subtype><typename>Match</typename><string>Match = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Match</anno>
  <anno>MatchSpec</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>select_reverse</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>select_reverse(Tab, MatchSpec, Limit) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{[Match], Continuation} | '$end_of_table'</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <seealso marker="#type-match_spec">match_spec()</seealso></string></subtype>
        <subtype><typename>Limit</typename><string>Limit = integer() &gt;= 1</string></subtype>
        <subtype><typename>Match</typename><string>Match = term()</string></subtype>
        <subtype><typename>Continuation</typename><string>Continuation = <seealso marker="#type-continuation">continuation()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Continuation</anno>
  <anno>Limit</anno>
  <anno>Match</anno>
  <anno>MatchSpec</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>setopts</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>setopts(Tab, Opts) -&gt; true</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Opts</typename><string>Opts = Opt | [Opt]</string></subtype>
        <subtype><typename>Opt</typename><string>Opt = {heir, pid(), HeirData} | {heir, none}</string></subtype>
        <subtype><typename>HeirData</typename><string>HeirData = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>HeirData</anno>
  <anno>Opt</anno>
  <anno>Opts</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>slot</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>slot(Tab, I) -&gt; [Object] | '$end_of_table'</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>I</typename><string>I = integer() &gt;= 0</string></subtype>
        <subtype><typename>Object</typename><string>Object = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>I</anno>
  <anno>Object</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>tab2file</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>tab2file(Tab, Filename) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-name">file:name()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
  <anno>Reason</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>tab2file</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>tab2file(Tab, Filename, Options) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-name">file:name()</seealso></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = {extended_info, [ExtInfo]} | {sync, boolean()}</string></subtype>
        <subtype><typename>ExtInfo</typename><string>ExtInfo = md5sum | object_count</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>ExtInfo</anno>
  <anno>Filename</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Reason</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>tab2list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tab2list(Tab) -&gt; [Object]</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Object</typename><string>Object = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Object</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>tabfile_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tabfile_info(Filename) -&gt; {ok, TableInfo} | {error, Reason}</head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-name">file:name()</seealso></string></subtype>
        <subtype><typename>TableInfo</typename><string>TableInfo = [InfoItem]</string></subtype>
        <subtype><typename>InfoItem</typename><string>InfoItem = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{name, atom()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{type, Type} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{protection, Protection} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{named_table, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{keypos, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{size, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{extended_info, [ExtInfo]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{version,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Major :: integer() &gt;= 0, Minor :: integer() &gt;= 0}}</string></subtype>
        <subtype><typename>ExtInfo</typename><string>ExtInfo = md5sum | object_count</string></subtype>
        <subtype><typename>Type</typename><string>Type = bag | duplicate_bag | ordered_set | set</string></subtype>
        <subtype><typename>Protection</typename><string>Protection = private | protected | public</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>ExtInfo</anno>
  <anno>Filename</anno>
  <anno>InfoItem</anno>
  <anno>Major</anno>
  <anno>Minor</anno>
  <anno>Protection</anno>
  <anno>Reason</anno>
  <anno>TableInfo</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>table</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>table(Tab) -&gt; QueryHandle</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>QueryHandle</typename><string>QueryHandle = <seealso marker="qlc#type-query_handle">qlc:query_handle()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>QueryHandle</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>table</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>table(Tab, Options) -&gt; QueryHandle</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>QueryHandle</typename><string>QueryHandle = <seealso marker="qlc#type-query_handle">qlc:query_handle()</seealso></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option] | Option</string></subtype>
        <subtype><typename>Option</typename><string>Option = {n_objects, NObjects} | {traverse, TraverseMethod}</string></subtype>
        <subtype><typename>NObjects</typename><string>NObjects = default | integer() &gt;= 1</string></subtype>
        <subtype><typename>TraverseMethod</typename><string>TraverseMethod = <br/><nbsp/><nbsp/><nbsp/><nbsp/>first_next |<br/><nbsp/><nbsp/><nbsp/><nbsp/>last_prev |<br/><nbsp/><nbsp/><nbsp/><nbsp/>select |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{select, MatchSpec :: <seealso marker="#type-match_spec">match_spec()</seealso>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>MatchSpec</anno>
  <anno>NObjects</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>QueryHandle</anno>
  <anno>Tab</anno>
  <anno>TraverseMethod</anno>
</spec>
<spec>
  <name>take</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>take(Tab, Key) -&gt; [Object]</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Object</typename><string>Object = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Object</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>test_ms</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>test_ms(Tuple, MatchSpec) -&gt; {ok, Result} | {error, Errors}</head>
      <guard>
        <subtype><typename>Tuple</typename><string>Tuple = tuple()</string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <seealso marker="#type-match_spec">match_spec()</seealso></string></subtype>
        <subtype><typename>Result</typename><string>Result = term()</string></subtype>
        <subtype><typename>Errors</typename><string>Errors = [{warning | error, string()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Errors</anno>
  <anno>MatchSpec</anno>
  <anno>Result</anno>
  <anno>Tuple</anno>
</spec>
<spec>
  <name>to_dets</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>to_dets(Tab, DetsTab) -&gt; DetsTab</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>DetsTab</typename><string>DetsTab = <seealso marker="dets#type-tab_name">dets:tab_name()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>DetsTab</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>update_counter</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_counter(Tab, Key, UpdateOp) -&gt; Result</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>UpdateOp</typename><string>UpdateOp = {Pos, Incr} | {Pos, Incr, Threshold, SetValue}</string></subtype>
        <subtype><typename>Pos</typename><string>Pos = Incr = Threshold = SetValue = Result = integer()</string></subtype>
        <subtype><typename>Incr</typename><string></string></subtype>
        <subtype><typename>Threshold</typename><string></string></subtype>
        <subtype><typename>SetValue</typename><string></string></subtype>
        <subtype><typename>Result</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Incr</anno>
  <anno>Key</anno>
  <anno>Pos</anno>
  <anno>Result</anno>
  <anno>SetValue</anno>
  <anno>Tab</anno>
  <anno>Threshold</anno>
  <anno>UpdateOp</anno>
</spec>
<spec>
  <name>update_counter</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_counter(Tab, Key, X3 :: [UpdateOp]) -&gt; [Result]</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>UpdateOp</typename><string>UpdateOp = {Pos, Incr} | {Pos, Incr, Threshold, SetValue}</string></subtype>
        <subtype><typename>Pos</typename><string>Pos = Incr = Threshold = SetValue = Result = integer()</string></subtype>
        <subtype><typename>Incr</typename><string></string></subtype>
        <subtype><typename>Threshold</typename><string></string></subtype>
        <subtype><typename>SetValue</typename><string></string></subtype>
        <subtype><typename>Result</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Incr</anno>
  <anno>Key</anno>
  <anno>Pos</anno>
  <anno>Result</anno>
  <anno>SetValue</anno>
  <anno>Tab</anno>
  <anno>Threshold</anno>
  <anno>UpdateOp</anno>
  <anno>X3</anno>
</spec>
<spec>
  <name>update_counter</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_counter(Tab, Key, Incr) -&gt; Result</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Incr</typename><string>Incr = Result = integer()</string></subtype>
        <subtype><typename>Result</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Incr</anno>
  <anno>Key</anno>
  <anno>Result</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>update_counter</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>update_counter(Tab, Key, UpdateOp, Default) -&gt; Result</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>UpdateOp</typename><string>UpdateOp = {Pos, Incr} | {Pos, Incr, Threshold, SetValue}</string></subtype>
        <subtype><typename>Pos</typename><string>Pos = Incr = Threshold = SetValue = Result = integer()</string></subtype>
        <subtype><typename>Incr</typename><string/></subtype>
        <subtype><typename>Threshold</typename><string/></subtype>
        <subtype><typename>SetValue</typename><string/></subtype>
        <subtype><typename>Result</typename><string/></subtype>
        <subtype><typename>Default</typename><string>Default = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Default</anno>
  <anno>Incr</anno>
  <anno>Key</anno>
  <anno>Pos</anno>
  <anno>Result</anno>
  <anno>SetValue</anno>
  <anno>Tab</anno>
  <anno>Threshold</anno>
  <anno>UpdateOp</anno>
</spec>
<spec>
  <name>update_counter</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>update_counter(Tab, Key, X3 :: [UpdateOp], Default) -&gt; [Result]</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>UpdateOp</typename><string>UpdateOp = {Pos, Incr} | {Pos, Incr, Threshold, SetValue}</string></subtype>
        <subtype><typename>Pos</typename><string>Pos = Incr = Threshold = SetValue = Result = integer()</string></subtype>
        <subtype><typename>Incr</typename><string/></subtype>
        <subtype><typename>Threshold</typename><string/></subtype>
        <subtype><typename>SetValue</typename><string/></subtype>
        <subtype><typename>Result</typename><string/></subtype>
        <subtype><typename>Default</typename><string>Default = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Default</anno>
  <anno>Incr</anno>
  <anno>Key</anno>
  <anno>Pos</anno>
  <anno>Result</anno>
  <anno>SetValue</anno>
  <anno>Tab</anno>
  <anno>Threshold</anno>
  <anno>UpdateOp</anno>
  <anno>X3</anno>
</spec>
<spec>
  <name>update_counter</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>update_counter(Tab, Key, Incr, Default) -&gt; Result</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Incr</typename><string>Incr = Result = integer()</string></subtype>
        <subtype><typename>Result</typename><string/></subtype>
        <subtype><typename>Default</typename><string>Default = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Default</anno>
  <anno>Incr</anno>
  <anno>Key</anno>
  <anno>Result</anno>
  <anno>Tab</anno>
</spec>
<spec>
  <name>update_element</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_element(Tab, Key, ElementSpec :: {Pos, Value}) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Pos</typename><string>Pos = integer() &gt;= 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>ElementSpec</anno>
  <anno>Key</anno>
  <anno>Pos</anno>
  <anno>Tab</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>update_element</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_element(Tab, Key, ElementSpec :: [{Pos, Value}]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>boolean()</head>
      <guard>
        <subtype><typename>Tab</typename><string>Tab = <seealso marker="#type-tab">tab()</seealso></string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Pos</typename><string>Pos = integer() &gt;= 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>ElementSpec</anno>
  <anno>Key</anno>
  <anno>Pos</anno>
  <anno>Tab</anno>
  <anno>Value</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:17.</timestamp>
</module>