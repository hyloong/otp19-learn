<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>wxEvtHandler</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>wxEvtHandler.xml</file></header>
<module>wxEvtHandler</module>
<modulesummary>The Event handler.</modulesummary>
<description>
<p>The Event handler.</p>
 
  <p>To get events from wxwidgets objects you subscribe to them by
  calling connect/[2-3].  Events are sent as messages, if no callback
  was supplied  These messages will be <seealso marker="#type-wx">#wx{</seealso>} where
  EventRecord is a record that depends on the <seealso marker="#type-wxEventType">event type</seealso>.  The records are defined in:  
wx/include/wx.hrl.</p>
 
  <p>If a callback was supplied to connect, the callback will be invoked  
(in another process) to handle the event. The callback should be of  
arity 2.  fun(EventRecord::wx(), EventObject::wxObject()).</p>
 
  <p>Beware that the callback will be in executed in new process each time.</p>
 
  <p><url href="http://www.wxwidgets.org/manuals/stable/wx_wxevthandler.html">
  The orginal documentation</url>.</p>
 
 </description>
<section><title>DATA TYPES</title><marker id="types"/>

<taglist>
<tag><marker id="type-event"/>event() = <seealso marker="#type-wxActivate">wxActivate()</seealso> | <seealso marker="#type-wxAuiManager">wxAuiManager()</seealso> | <seealso marker="#type-wxAuiNotebook">wxAuiNotebook()</seealso> | <seealso marker="#type-wxCalendar">wxCalendar()</seealso> | <seealso marker="#type-wxChildFocus">wxChildFocus()</seealso> | <seealso marker="#type-wxClipboardText">wxClipboardText()</seealso> | <seealso marker="#type-wxClose">wxClose()</seealso> | <seealso marker="#type-wxColourPicker">wxColourPicker()</seealso> | <seealso marker="#type-wxCommand">wxCommand()</seealso> | <seealso marker="#type-wxContextMenu">wxContextMenu()</seealso> | <seealso marker="#type-wxDate">wxDate()</seealso> | <seealso marker="#type-wxDisplayChanged">wxDisplayChanged()</seealso> | <seealso marker="#type-wxDropFiles">wxDropFiles()</seealso> | <seealso marker="#type-wxErase">wxErase()</seealso> | <seealso marker="#type-wxFileDirPicker">wxFileDirPicker()</seealso> | <seealso marker="#type-wxFocus">wxFocus()</seealso> | <seealso marker="#type-wxFontPicker">wxFontPicker()</seealso> | <seealso marker="#type-wxGrid">wxGrid()</seealso> | <seealso marker="#type-wxHelp">wxHelp()</seealso> | <seealso marker="#type-wxHtmlLink">wxHtmlLink()</seealso> | <seealso marker="#type-wxIconize">wxIconize()</seealso> | <seealso marker="#type-wxIdle">wxIdle()</seealso> | <seealso marker="#type-wxInitDialog">wxInitDialog()</seealso> | <seealso marker="#type-wxJoystick">wxJoystick()</seealso> | <seealso marker="#type-wxKey">wxKey()</seealso> | <seealso marker="#type-wxList">wxList()</seealso> | <seealso marker="#type-wxMaximize">wxMaximize()</seealso> | <seealso marker="#type-wxMenu">wxMenu()</seealso> | <seealso marker="#type-wxMouse">wxMouse()</seealso> | <seealso marker="#type-wxMouseCaptureChanged">wxMouseCaptureChanged()</seealso> | <seealso marker="#type-wxMouseCaptureLost">wxMouseCaptureLost()</seealso> | <seealso marker="#type-wxMove">wxMove()</seealso> | <seealso marker="#type-wxNavigationKey">wxNavigationKey()</seealso> | <seealso marker="#type-wxNotebook">wxNotebook()</seealso> | <seealso marker="#type-wxPaint">wxPaint()</seealso> | <seealso marker="#type-wxPaletteChanged">wxPaletteChanged()</seealso> | <seealso marker="#type-wxQueryNewPalette">wxQueryNewPalette()</seealso> | <seealso marker="#type-wxSash">wxSash()</seealso> | <seealso marker="#type-wxScroll">wxScroll()</seealso> | <seealso marker="#type-wxScrollWin">wxScrollWin()</seealso> | <seealso marker="#type-wxSetCursor">wxSetCursor()</seealso> | <seealso marker="#type-wxShow">wxShow()</seealso> | <seealso marker="#type-wxSize">wxSize()</seealso> | <seealso marker="#type-wxSpin">wxSpin()</seealso> | <seealso marker="#type-wxSplitter">wxSplitter()</seealso> | <seealso marker="#type-wxStyledText">wxStyledText()</seealso> | <seealso marker="#type-wxSysColourChanged">wxSysColourChanged()</seealso> | <seealso marker="#type-wxTaskBarIcon">wxTaskBarIcon()</seealso> | <seealso marker="#type-wxTree">wxTree()</seealso> | <seealso marker="#type-wxUpdateUI">wxUpdateUI()</seealso> | <seealso marker="#type-wxWindowCreate">wxWindowCreate()</seealso> | <seealso marker="#type-wxWindowDestroy">wxWindowDestroy()</seealso></tag>
<item><p/> </item>
<tag><marker id="type-wx"/>wx() = #wx{id=integer(), obj=<seealso marker="wx#type-wx_object">wx:wx_object()</seealso>, userData=term(), event=<seealso marker="#type-event">event()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxActivate"/>wxActivate() = #wxActivate{type=<seealso marker="#type-wxActivateEventType">wxActivateEventType()</seealso>, active=boolean()}</tag>
<item><p/> </item>
<tag><marker id="type-wxActivateEventType"/>wxActivateEventType() = activate | activate_app | hibernate</tag>
<item><p/> </item>
<tag><marker id="type-wxAuiManager"/>wxAuiManager() = #wxAuiManager{type=<seealso marker="#type-wxAuiManagerEventType">wxAuiManagerEventType()</seealso>, manager=<seealso marker="wxAuiManager#type-wxAuiManager">wxAuiManager:wxAuiManager()</seealso>, pane=<seealso marker="wxAuiPaneInfo#type-wxAuiPaneInfo">wxAuiPaneInfo:wxAuiPaneInfo()</seealso>, button=integer(), veto_flag=boolean(), canveto_flag=boolean(), dc=<seealso marker="wxDC#type-wxDC">wxDC:wxDC()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxAuiManagerEventType"/>wxAuiManagerEventType() = aui_pane_button | aui_pane_close | aui_pane_maximize | aui_pane_restore | aui_pane_activated | aui_render | aui_find_manager</tag>
<item><p/> </item>
<tag><marker id="type-wxAuiNotebook"/>wxAuiNotebook() = #wxAuiNotebook{type=<seealso marker="#type-wxAuiNotebookEventType">wxAuiNotebookEventType()</seealso>, old_selection=integer(), selection=integer(), drag_source=<seealso marker="wxAuiNotebook#type-wxAuiNotebook">wxAuiNotebook:wxAuiNotebook()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxAuiNotebookEventType"/>wxAuiNotebookEventType() = command_auinotebook_page_close | command_auinotebook_page_changed | command_auinotebook_page_changing | command_auinotebook_button | command_auinotebook_begin_drag | command_auinotebook_end_drag | command_auinotebook_drag_motion | command_auinotebook_allow_dnd | command_auinotebook_tab_middle_down | command_auinotebook_tab_middle_up | command_auinotebook_tab_right_down | command_auinotebook_tab_right_up | command_auinotebook_page_closed | command_auinotebook_drag_done | command_auinotebook_bg_dclick</tag>
<item><p/> </item>
<tag><marker id="type-wxCalendar"/>wxCalendar() = #wxCalendar{type=<seealso marker="#type-wxCalendarEventType">wxCalendarEventType()</seealso>, wday=<seealso marker="wx#type-wx_enum">wx:wx_enum()</seealso>, date=<seealso marker="wx#type-wx_datetime">wx:wx_datetime()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxCalendarEventType"/>wxCalendarEventType() = calendar_sel_changed | calendar_day_changed | calendar_month_changed | calendar_year_changed | calendar_doubleclicked | calendar_weekday_clicked</tag>
<item><p/> </item>
<tag><marker id="type-wxChildFocus"/>wxChildFocus() = #wxChildFocus{type=<seealso marker="#type-wxChildFocusEventType">wxChildFocusEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxChildFocusEventType"/>wxChildFocusEventType() = child_focus</tag>
<item><p/> </item>
<tag><marker id="type-wxClipboardText"/>wxClipboardText() = #wxClipboardText{type=<seealso marker="#type-wxClipboardTextEventType">wxClipboardTextEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxClipboardTextEventType"/>wxClipboardTextEventType() = command_text_copy | command_text_cut | command_text_paste</tag>
<item><p/> </item>
<tag><marker id="type-wxClose"/>wxClose() = #wxClose{type=<seealso marker="#type-wxCloseEventType">wxCloseEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxCloseEventType"/>wxCloseEventType() = close_window | end_session | query_end_session</tag>
<item><p/> </item>
<tag><marker id="type-wxColourPicker"/>wxColourPicker() = #wxColourPicker{type=<seealso marker="#type-wxColourPickerEventType">wxColourPickerEventType()</seealso>, colour=<seealso marker="wx#type-wx_colour">wx:wx_colour()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxColourPickerEventType"/>wxColourPickerEventType() = command_colourpicker_changed</tag>
<item><p/> </item>
<tag><marker id="type-wxCommand"/>wxCommand() = #wxCommand{type=<seealso marker="#type-wxCommandEventType">wxCommandEventType()</seealso>, cmdString=<seealso marker="unicode#type-chardata">unicode:chardata()</seealso>, commandInt=integer(), extraLong=integer()}</tag>
<item><p/> </item>
<tag><marker id="type-wxCommandEventType"/>wxCommandEventType() = command_button_clicked | command_checkbox_clicked | command_choice_selected | command_listbox_selected | command_listbox_doubleclicked | command_text_updated | command_text_enter | command_menu_selected | command_slider_updated | command_radiobox_selected | command_radiobutton_selected | command_scrollbar_updated | command_vlbox_selected | command_combobox_selected | command_tool_rclicked | command_tool_enter | command_checklistbox_toggled | command_togglebutton_clicked | command_left_click | command_left_dclick | command_right_click | command_set_focus | command_kill_focus | command_enter</tag>
<item><p/> </item>
<tag><marker id="type-wxContextMenu"/>wxContextMenu() = #wxContextMenu{type=<seealso marker="#type-wxContextMenuEventType">wxContextMenuEventType()</seealso>, pos={X::integer(), Y::integer()}}</tag>
<item><p/> </item>
<tag><marker id="type-wxContextMenuEventType"/>wxContextMenuEventType() = context_menu</tag>
<item><p/> </item>
<tag><marker id="type-wxDate"/>wxDate() = #wxDate{type=<seealso marker="#type-wxDateEventType">wxDateEventType()</seealso>, date=<seealso marker="wx#type-wx_datetime">wx:wx_datetime()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxDateEventType"/>wxDateEventType() = date_changed</tag>
<item><p/> </item>
<tag><marker id="type-wxDisplayChanged"/>wxDisplayChanged() = #wxDisplayChanged{type=<seealso marker="#type-wxDisplayChangedEventType">wxDisplayChangedEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxDisplayChangedEventType"/>wxDisplayChangedEventType() = display_changed</tag>
<item><p/> </item>
<tag><marker id="type-wxDropFiles"/>wxDropFiles() = #wxDropFiles{type=<seealso marker="#type-wxDropFilesEventType">wxDropFilesEventType()</seealso>, noFiles=integer(), pos={X::integer(), Y::integer()}, files=[<seealso marker="unicode#type-chardata">unicode:chardata()</seealso>]}</tag>
<item><p/> </item>
<tag><marker id="type-wxDropFilesEventType"/>wxDropFilesEventType() = drop_files</tag>
<item><p/> </item>
<tag><marker id="type-wxErase"/>wxErase() = #wxErase{type=<seealso marker="#type-wxEraseEventType">wxEraseEventType()</seealso>, dc=<seealso marker="wxDC#type-wxDC">wxDC:wxDC()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxEraseEventType"/>wxEraseEventType() = erase_background</tag>
<item><p/> </item>
<tag><marker id="type-wxEventType"/>wxEventType() = <seealso marker="#type-wxActivateEventType">wxActivateEventType()</seealso> | <seealso marker="#type-wxAuiManagerEventType">wxAuiManagerEventType()</seealso> | <seealso marker="#type-wxAuiNotebookEventType">wxAuiNotebookEventType()</seealso> | <seealso marker="#type-wxCalendarEventType">wxCalendarEventType()</seealso> | <seealso marker="#type-wxChildFocusEventType">wxChildFocusEventType()</seealso> | <seealso marker="#type-wxClipboardTextEventType">wxClipboardTextEventType()</seealso> | <seealso marker="#type-wxCloseEventType">wxCloseEventType()</seealso> | <seealso marker="#type-wxColourPickerEventType">wxColourPickerEventType()</seealso> | <seealso marker="#type-wxCommandEventType">wxCommandEventType()</seealso> | <seealso marker="#type-wxContextMenuEventType">wxContextMenuEventType()</seealso> | <seealso marker="#type-wxDateEventType">wxDateEventType()</seealso> | <seealso marker="#type-wxDisplayChangedEventType">wxDisplayChangedEventType()</seealso> | <seealso marker="#type-wxDropFilesEventType">wxDropFilesEventType()</seealso> | <seealso marker="#type-wxEraseEventType">wxEraseEventType()</seealso> | <seealso marker="#type-wxFileDirPickerEventType">wxFileDirPickerEventType()</seealso> | <seealso marker="#type-wxFocusEventType">wxFocusEventType()</seealso> | <seealso marker="#type-wxFontPickerEventType">wxFontPickerEventType()</seealso> | <seealso marker="#type-wxGridEventType">wxGridEventType()</seealso> | <seealso marker="#type-wxHelpEventType">wxHelpEventType()</seealso> | <seealso marker="#type-wxHtmlLinkEventType">wxHtmlLinkEventType()</seealso> | <seealso marker="#type-wxIconizeEventType">wxIconizeEventType()</seealso> | <seealso marker="#type-wxIdleEventType">wxIdleEventType()</seealso> | <seealso marker="#type-wxInitDialogEventType">wxInitDialogEventType()</seealso> | <seealso marker="#type-wxJoystickEventType">wxJoystickEventType()</seealso> | <seealso marker="#type-wxKeyEventType">wxKeyEventType()</seealso> | <seealso marker="#type-wxListEventType">wxListEventType()</seealso> | <seealso marker="#type-wxMaximizeEventType">wxMaximizeEventType()</seealso> | <seealso marker="#type-wxMenuEventType">wxMenuEventType()</seealso> | <seealso marker="#type-wxMouseCaptureChangedEventType">wxMouseCaptureChangedEventType()</seealso> | <seealso marker="#type-wxMouseCaptureLostEventType">wxMouseCaptureLostEventType()</seealso> | <seealso marker="#type-wxMouseEventType">wxMouseEventType()</seealso> | <seealso marker="#type-wxMoveEventType">wxMoveEventType()</seealso> | <seealso marker="#type-wxNavigationKeyEventType">wxNavigationKeyEventType()</seealso> | <seealso marker="#type-wxNotebookEventType">wxNotebookEventType()</seealso> | <seealso marker="#type-wxPaintEventType">wxPaintEventType()</seealso> | <seealso marker="#type-wxPaletteChangedEventType">wxPaletteChangedEventType()</seealso> | <seealso marker="#type-wxQueryNewPaletteEventType">wxQueryNewPaletteEventType()</seealso> | <seealso marker="#type-wxSashEventType">wxSashEventType()</seealso> | <seealso marker="#type-wxScrollEventType">wxScrollEventType()</seealso> | <seealso marker="#type-wxScrollWinEventType">wxScrollWinEventType()</seealso> | <seealso marker="#type-wxSetCursorEventType">wxSetCursorEventType()</seealso> | <seealso marker="#type-wxShowEventType">wxShowEventType()</seealso> | <seealso marker="#type-wxSizeEventType">wxSizeEventType()</seealso> | <seealso marker="#type-wxSpinEventType">wxSpinEventType()</seealso> | <seealso marker="#type-wxSplitterEventType">wxSplitterEventType()</seealso> | <seealso marker="#type-wxStyledTextEventType">wxStyledTextEventType()</seealso> | <seealso marker="#type-wxSysColourChangedEventType">wxSysColourChangedEventType()</seealso> | <seealso marker="#type-wxTaskBarIconEventType">wxTaskBarIconEventType()</seealso> | <seealso marker="#type-wxTreeEventType">wxTreeEventType()</seealso> | <seealso marker="#type-wxUpdateUIEventType">wxUpdateUIEventType()</seealso> | <seealso marker="#type-wxWindowCreateEventType">wxWindowCreateEventType()</seealso> | <seealso marker="#type-wxWindowDestroyEventType">wxWindowDestroyEventType()</seealso></tag>
<item><p/> </item>
<tag><marker id="type-wxEvtHandler"/>wxEvtHandler() = <seealso marker="wx#type-wx_object">wx:wx_object()</seealso></tag>
<item><p/> </item>
<tag><marker id="type-wxFileDirPicker"/>wxFileDirPicker() = #wxFileDirPicker{type=<seealso marker="#type-wxFileDirPickerEventType">wxFileDirPickerEventType()</seealso>, path=<seealso marker="unicode#type-chardata">unicode:chardata()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxFileDirPickerEventType"/>wxFileDirPickerEventType() = command_filepicker_changed | command_dirpicker_changed</tag>
<item><p/> </item>
<tag><marker id="type-wxFocus"/>wxFocus() = #wxFocus{type=<seealso marker="#type-wxFocusEventType">wxFocusEventType()</seealso>, win=<seealso marker="wxWindow#type-wxWindow">wxWindow:wxWindow()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxFocusEventType"/>wxFocusEventType() = set_focus | kill_focus</tag>
<item><p/> </item>
<tag><marker id="type-wxFontPicker"/>wxFontPicker() = #wxFontPicker{type=<seealso marker="#type-wxFontPickerEventType">wxFontPickerEventType()</seealso>, font=<seealso marker="wxFont#type-wxFont">wxFont:wxFont()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxFontPickerEventType"/>wxFontPickerEventType() = command_fontpicker_changed</tag>
<item><p/> </item>
<tag><marker id="type-wxGrid"/>wxGrid() = #wxGrid{type=<seealso marker="#type-wxGridEventType">wxGridEventType()</seealso>, row=integer(), col=integer(), x=integer(), y=integer(), selecting=boolean(), control=boolean(), meta=boolean(), shift=boolean(), alt=boolean()}</tag>
<item><p/> </item>
<tag><marker id="type-wxGridEventType"/>wxGridEventType() = grid_cell_left_click | grid_cell_right_click | grid_cell_left_dclick | grid_cell_right_dclick | grid_label_left_click | grid_label_right_click | grid_label_left_dclick | grid_label_right_dclick | grid_row_size | grid_col_size | grid_range_select | grid_cell_change | grid_select_cell | grid_editor_shown | grid_editor_hidden | grid_editor_created | grid_cell_begin_drag</tag>
<item><p/> </item>
<tag><marker id="type-wxHelp"/>wxHelp() = #wxHelp{type=<seealso marker="#type-wxHelpEventType">wxHelpEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxHelpEventType"/>wxHelpEventType() = help | detailed_help</tag>
<item><p/> </item>
<tag><marker id="type-wxHtmlLink"/>wxHtmlLink() = #wxHtmlLink{type=<seealso marker="#type-wxHtmlLinkEventType">wxHtmlLinkEventType()</seealso>, linkInfo=<seealso marker="wx#type-wx_wxHtmlLinkInfo">wx:wx_wxHtmlLinkInfo()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxHtmlLinkEventType"/>wxHtmlLinkEventType() = command_html_link_clicked</tag>
<item><p/> </item>
<tag><marker id="type-wxIconize"/>wxIconize() = #wxIconize{type=<seealso marker="#type-wxIconizeEventType">wxIconizeEventType()</seealso>, iconized=boolean()}</tag>
<item><p/> </item>
<tag><marker id="type-wxIconizeEventType"/>wxIconizeEventType() = iconize</tag>
<item><p/> </item>
<tag><marker id="type-wxIdle"/>wxIdle() = #wxIdle{type=<seealso marker="#type-wxIdleEventType">wxIdleEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxIdleEventType"/>wxIdleEventType() = idle</tag>
<item><p/> </item>
<tag><marker id="type-wxInitDialog"/>wxInitDialog() = #wxInitDialog{type=<seealso marker="#type-wxInitDialogEventType">wxInitDialogEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxInitDialogEventType"/>wxInitDialogEventType() = init_dialog</tag>
<item><p/> </item>
<tag><marker id="type-wxJoystick"/>wxJoystick() = #wxJoystick{type=<seealso marker="#type-wxJoystickEventType">wxJoystickEventType()</seealso>, pos={X::integer(), Y::integer()}, zPosition=integer(), buttonChange=integer(), buttonState=integer(), joyStick=integer()}</tag>
<item><p/> </item>
<tag><marker id="type-wxJoystickEventType"/>wxJoystickEventType() = joy_button_down | joy_button_up | joy_move | joy_zmove</tag>
<item><p/> </item>
<tag><marker id="type-wxKey"/>wxKey() = #wxKey{type=<seealso marker="#type-wxKeyEventType">wxKeyEventType()</seealso>, x=integer(), y=integer(), keyCode=integer(), controlDown=boolean(), shiftDown=boolean(), altDown=boolean(), metaDown=boolean(), scanCode=boolean(), uniChar=integer(), rawCode=integer(), rawFlags=integer()}</tag>
<item><p/> </item>
<tag><marker id="type-wxKeyEventType"/>wxKeyEventType() = char | char_hook | key_down | key_up</tag>
<item><p/> </item>
<tag><marker id="type-wxList"/>wxList() = #wxList{type=<seealso marker="#type-wxListEventType">wxListEventType()</seealso>, code=integer(), oldItemIndex=integer(), itemIndex=integer(), col=integer(), pointDrag={X::integer(), Y::integer()}}</tag>
<item><p/> </item>
<tag><marker id="type-wxListEventType"/>wxListEventType() = command_list_begin_drag | command_list_begin_rdrag | command_list_begin_label_edit | command_list_end_label_edit | command_list_delete_item | command_list_delete_all_items | command_list_key_down | command_list_insert_item | command_list_col_click | command_list_col_right_click | command_list_col_begin_drag | command_list_col_dragging | command_list_col_end_drag | command_list_item_selected | command_list_item_deselected | command_list_item_right_click | command_list_item_middle_click | command_list_item_activated | command_list_item_focused | command_list_cache_hint</tag>
<item><p/> </item>
<tag><marker id="type-wxMaximize"/>wxMaximize() = #wxMaximize{type=<seealso marker="#type-wxMaximizeEventType">wxMaximizeEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxMaximizeEventType"/>wxMaximizeEventType() = maximize</tag>
<item><p/> </item>
<tag><marker id="type-wxMenu"/>wxMenu() = #wxMenu{type=<seealso marker="#type-wxMenuEventType">wxMenuEventType()</seealso>, menuId=integer(), menu=<seealso marker="wxMenu#type-wxMenu">wxMenu:wxMenu()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxMenuEventType"/>wxMenuEventType() = menu_open | menu_close | menu_highlight</tag>
<item><p/> </item>
<tag><marker id="type-wxMouse"/>wxMouse() = #wxMouse{type=<seealso marker="#type-wxMouseEventType">wxMouseEventType()</seealso>, x=integer(), y=integer(), leftDown=boolean(), middleDown=boolean(), rightDown=boolean(), controlDown=boolean(), shiftDown=boolean(), altDown=boolean(), metaDown=boolean(), wheelRotation=integer(), wheelDelta=integer(), linesPerAction=integer()}</tag>
<item><p/> </item>
<tag><marker id="type-wxMouseCaptureChanged"/>wxMouseCaptureChanged() = #wxMouseCaptureChanged{type=<seealso marker="#type-wxMouseCaptureChangedEventType">wxMouseCaptureChangedEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxMouseCaptureChangedEventType"/>wxMouseCaptureChangedEventType() = mouse_capture_changed</tag>
<item><p/> </item>
<tag><marker id="type-wxMouseCaptureLost"/>wxMouseCaptureLost() = #wxMouseCaptureLost{type=<seealso marker="#type-wxMouseCaptureLostEventType">wxMouseCaptureLostEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxMouseCaptureLostEventType"/>wxMouseCaptureLostEventType() = mouse_capture_lost</tag>
<item><p/> </item>
<tag><marker id="type-wxMouseEventType"/>wxMouseEventType() = left_down | left_up | middle_down | middle_up | right_down | right_up | motion | enter_window | leave_window | left_dclick | middle_dclick | right_dclick | mousewheel</tag>
<item><p/> </item>
<tag><marker id="type-wxMove"/>wxMove() = #wxMove{type=<seealso marker="#type-wxMoveEventType">wxMoveEventType()</seealso>, pos={X::integer(), Y::integer()}, rect={X::integer(), Y::integer(), W::integer(), H::integer()}}</tag>
<item><p/> </item>
<tag><marker id="type-wxMoveEventType"/>wxMoveEventType() = move</tag>
<item><p/> </item>
<tag><marker id="type-wxNavigationKey"/>wxNavigationKey() = #wxNavigationKey{type=<seealso marker="#type-wxNavigationKeyEventType">wxNavigationKeyEventType()</seealso>, flags=integer(), focus=<seealso marker="wxWindow#type-wxWindow">wxWindow:wxWindow()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxNavigationKeyEventType"/>wxNavigationKeyEventType() = navigation_key</tag>
<item><p/> </item>
<tag><marker id="type-wxNotebook"/>wxNotebook() = #wxNotebook{type=<seealso marker="#type-wxNotebookEventType">wxNotebookEventType()</seealso>, nSel=integer(), nOldSel=integer()}</tag>
<item><p/> </item>
<tag><marker id="type-wxNotebookEventType"/>wxNotebookEventType() = command_notebook_page_changed | command_notebook_page_changing</tag>
<item><p/> </item>
<tag><marker id="type-wxPaint"/>wxPaint() = #wxPaint{type=<seealso marker="#type-wxPaintEventType">wxPaintEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxPaintEventType"/>wxPaintEventType() = paint</tag>
<item><p/> </item>
<tag><marker id="type-wxPaletteChanged"/>wxPaletteChanged() = #wxPaletteChanged{type=<seealso marker="#type-wxPaletteChangedEventType">wxPaletteChangedEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxPaletteChangedEventType"/>wxPaletteChangedEventType() = palette_changed</tag>
<item><p/> </item>
<tag><marker id="type-wxQueryNewPalette"/>wxQueryNewPalette() = #wxQueryNewPalette{type=<seealso marker="#type-wxQueryNewPaletteEventType">wxQueryNewPaletteEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxQueryNewPaletteEventType"/>wxQueryNewPaletteEventType() = query_new_palette</tag>
<item><p/> </item>
<tag><marker id="type-wxSash"/>wxSash() = #wxSash{type=<seealso marker="#type-wxSashEventType">wxSashEventType()</seealso>, edge=<seealso marker="wx#type-wx_enum">wx:wx_enum()</seealso>, dragRect={X::integer(), Y::integer(), W::integer(), H::integer()}, dragStatus=<seealso marker="wx#type-wx_enum">wx:wx_enum()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxSashEventType"/>wxSashEventType() = sash_dragged</tag>
<item><p/> </item>
<tag><marker id="type-wxScroll"/>wxScroll() = #wxScroll{type=<seealso marker="#type-wxScrollEventType">wxScrollEventType()</seealso>, commandInt=integer(), extraLong=integer()}</tag>
<item><p/> </item>
<tag><marker id="type-wxScrollEventType"/>wxScrollEventType() = scroll_top | scroll_bottom | scroll_lineup | scroll_linedown | scroll_pageup | scroll_pagedown | scroll_thumbtrack | scroll_thumbrelease | scroll_changed</tag>
<item><p/> </item>
<tag><marker id="type-wxScrollWin"/>wxScrollWin() = #wxScrollWin{type=<seealso marker="#type-wxScrollWinEventType">wxScrollWinEventType()</seealso>, commandInt=integer(), extraLong=integer()}</tag>
<item><p/> </item>
<tag><marker id="type-wxScrollWinEventType"/>wxScrollWinEventType() = scrollwin_top | scrollwin_bottom | scrollwin_lineup | scrollwin_linedown | scrollwin_pageup | scrollwin_pagedown | scrollwin_thumbtrack | scrollwin_thumbrelease</tag>
<item><p/> </item>
<tag><marker id="type-wxSetCursor"/>wxSetCursor() = #wxSetCursor{type=<seealso marker="#type-wxSetCursorEventType">wxSetCursorEventType()</seealso>, x=integer(), y=integer(), cursor=<seealso marker="wxCursor#type-wxCursor">wxCursor:wxCursor()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxSetCursorEventType"/>wxSetCursorEventType() = set_cursor</tag>
<item><p/> </item>
<tag><marker id="type-wxShow"/>wxShow() = #wxShow{type=<seealso marker="#type-wxShowEventType">wxShowEventType()</seealso>, show=boolean()}</tag>
<item><p/> </item>
<tag><marker id="type-wxShowEventType"/>wxShowEventType() = show</tag>
<item><p/> </item>
<tag><marker id="type-wxSize"/>wxSize() = #wxSize{type=<seealso marker="#type-wxSizeEventType">wxSizeEventType()</seealso>, size={W::integer(), H::integer()}, rect={X::integer(), Y::integer(), W::integer(), H::integer()}}</tag>
<item><p/> </item>
<tag><marker id="type-wxSizeEventType"/>wxSizeEventType() = size</tag>
<item><p/> </item>
<tag><marker id="type-wxSpin"/>wxSpin() = #wxSpin{type=<seealso marker="#type-wxSpinEventType">wxSpinEventType()</seealso>, commandInt=integer()}</tag>
<item><p/> </item>
<tag><marker id="type-wxSpinEventType"/>wxSpinEventType() = command_spinctrl_updated | spin_up | spin_down | spin</tag>
<item><p/> </item>
<tag><marker id="type-wxSplitter"/>wxSplitter() = #wxSplitter{type=<seealso marker="#type-wxSplitterEventType">wxSplitterEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxSplitterEventType"/>wxSplitterEventType() = command_splitter_sash_pos_changed | command_splitter_sash_pos_changing | command_splitter_doubleclicked | command_splitter_unsplit</tag>
<item><p/> </item>
<tag><marker id="type-wxStyledText"/>wxStyledText() = #wxStyledText{type=<seealso marker="#type-wxStyledTextEventType">wxStyledTextEventType()</seealso>, position=integer(), key=integer(), modifiers=integer(), modificationType=integer(), text=<seealso marker="unicode#type-chardata">unicode:chardata()</seealso>, length=integer(), linesAdded=integer(), line=integer(), foldLevelNow=integer(), foldLevelPrev=integer(), margin=integer(), message=integer(), wParam=integer(), lParam=integer(), listType=integer(), x=integer(), y=integer(), dragText=<seealso marker="unicode#type-chardata">unicode:chardata()</seealso>, dragAllowMove=boolean(), dragResult=<seealso marker="wx#type-wx_enum">wx:wx_enum()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxStyledTextEventType"/>wxStyledTextEventType() = stc_change | stc_styleneeded | stc_charadded | stc_savepointreached | stc_savepointleft | stc_romodifyattempt | stc_key | stc_doubleclick | stc_updateui | stc_modified | stc_macrorecord | stc_marginclick | stc_needshown | stc_painted | stc_userlistselection | stc_uridropped | stc_dwellstart | stc_dwellend | stc_start_drag | stc_drag_over | stc_do_drop | stc_zoom | stc_hotspot_click | stc_hotspot_dclick | stc_calltip_click | stc_autocomp_selection</tag>
<item><p/> </item>
<tag><marker id="type-wxSysColourChanged"/>wxSysColourChanged() = #wxSysColourChanged{type=<seealso marker="#type-wxSysColourChangedEventType">wxSysColourChangedEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxSysColourChangedEventType"/>wxSysColourChangedEventType() = sys_colour_changed</tag>
<item><p/> </item>
<tag><marker id="type-wxTaskBarIcon"/>wxTaskBarIcon() = #wxTaskBarIcon{type=<seealso marker="#type-wxTaskBarIconEventType">wxTaskBarIconEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxTaskBarIconEventType"/>wxTaskBarIconEventType() = taskbar_move | taskbar_left_down | taskbar_left_up | taskbar_right_down | taskbar_right_up | taskbar_left_dclick | taskbar_right_dclick</tag>
<item><p/> </item>
<tag><marker id="type-wxTree"/>wxTree() = #wxTree{type=<seealso marker="#type-wxTreeEventType">wxTreeEventType()</seealso>, item=integer(), itemOld=integer(), pointDrag={X::integer(), Y::integer()}}</tag>
<item><p/> </item>
<tag><marker id="type-wxTreeEventType"/>wxTreeEventType() = command_tree_begin_drag | command_tree_begin_rdrag | command_tree_begin_label_edit | command_tree_end_label_edit | command_tree_delete_item | command_tree_get_info | command_tree_set_info | command_tree_item_expanded | command_tree_item_expanding | command_tree_item_collapsed | command_tree_item_collapsing | command_tree_sel_changed | command_tree_sel_changing | command_tree_key_down | command_tree_item_activated | command_tree_item_right_click | command_tree_item_middle_click | command_tree_end_drag | command_tree_state_image_click | command_tree_item_gettooltip | command_tree_item_menu</tag>
<item><p/> </item>
<tag><marker id="type-wxUpdateUI"/>wxUpdateUI() = #wxUpdateUI{type=<seealso marker="#type-wxUpdateUIEventType">wxUpdateUIEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxUpdateUIEventType"/>wxUpdateUIEventType() = update_ui</tag>
<item><p/> </item>
<tag><marker id="type-wxWindowCreate"/>wxWindowCreate() = #wxWindowCreate{type=<seealso marker="#type-wxWindowCreateEventType">wxWindowCreateEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxWindowCreateEventType"/>wxWindowCreateEventType() = create</tag>
<item><p/> </item>
<tag><marker id="type-wxWindowDestroy"/>wxWindowDestroy() = #wxWindowDestroy{type=<seealso marker="#type-wxWindowDestroyEventType">wxWindowDestroyEventType()</seealso>}</tag>
<item><p/> </item>
<tag><marker id="type-wxWindowDestroyEventType"/>wxWindowDestroyEventType() = destroy</tag>
<item><p/> </item>
</taglist></section>
<funcs>
<func>
<name>connect(This::<seealso marker="#type-wxEvtHandler">wxEvtHandler()</seealso>, EventType::<seealso marker="#type-wxEventType">wxEventType()</seealso>) -&gt; ok</name>
<fsummary>Equivalent to connect(This, EventType, [])</fsummary>

<desc><marker id="connect-2"/>

<p>Equivalent to <seealso marker="#connect-3">connect(This, EventType, [])</seealso></p>
</desc></func>
<func>
<name>connect(This::<seealso marker="#type-wxEvtHandler">wxEvtHandler()</seealso>, EventType::<seealso marker="#type-wxEventType">wxEventType()</seealso>, Options::[Option]) -&gt; ok</name>
<fsummary>This function subscribes the to events of EventType,  
in the range id, lastId.</fsummary>
<type>
<v>Option = {id, integer()} | {lastId, integer()} | {skip, boolean()} | callback | {callback, function()} | {userData, term()}</v></type>
<desc><marker id="connect-3"/>

<p>This function subscribes the to events of EventType,  
in the range id, lastId. The events will be received as messages  
if no callback is supplied.</p>
 
  <p>Options:
     {id, integer()},      The identifier (or first of the identifier range) to be
                             associated with this event handler.
                           Default ?wxID_ANY
     {lastId, integer()},  The second part of the identifier range.
                           If used 'id' must be set as the starting identifier range.
                           Default ?wxID_ANY
     {skip,  boolean()},   If skip is true further event_handlers will be called.
                           This is not used if the 'callback' option is used.
                           Default false.
     {callback, function()} Use a callback fun(EventRecord::wx(), EventObject::wxObject())
                           to process the event. Default not specfied i.e. a message will
                           be delivered to the process calling this function.
     {userData, term()}    An erlang term that will be sent with the event. Default: [].</p>
</desc></func>
<func>
<name>disconnect(This::<seealso marker="#type-wxEvtHandler">wxEvtHandler()</seealso>) -&gt; boolean()</name>
<fsummary>Equivalent to disconnect(This, null, [])
  Can also have an optional callback Fun() as an additional last argument.</fsummary>

<desc><marker id="disconnect-1"/>

<p>Equivalent to <seealso marker="#disconnect-3">disconnect(This, null, [])</seealso>
  Can also have an optional callback Fun() as an additional last argument.</p>
</desc></func>
<func>
<name>disconnect(This::<seealso marker="#type-wxEvtHandler">wxEvtHandler()</seealso>, EventType::<seealso marker="#type-wxEventType">wxEventType()</seealso>) -&gt; boolean()</name>
<fsummary>Equivalent to disconnect(This, EventType, [])</fsummary>

<desc><marker id="disconnect-2"/>

<p>Equivalent to <seealso marker="#disconnect-3">disconnect(This, EventType, [])</seealso></p>
</desc></func>
<func>
<name>disconnect(This::<seealso marker="#type-wxEvtHandler">wxEvtHandler()</seealso>, EventType::<seealso marker="#type-wxEventType">wxEventType()</seealso>, Opts::[Option]) -&gt; boolean()</name>
<fsummary>See external documentation
  This function unsubscribes the process or callback fun from the event handler.</fsummary>
<type>
<v>Option = {id, integer()} | {lastId, integer()} | {callback, function()}</v></type>
<desc><marker id="disconnect-3"/>

<p>See <url href="http://www.wxwidgets.org/manuals/stable/wx_wxevthandler.html#wxevthandlerdisconnect">external documentation</url>
  This function unsubscribes the process or callback fun from the event handler.
  EventType may be the atom 'null' to match any eventtype.
  Notice that the options skip and userdata is not used to match the eventhandler.</p>
</desc></func></funcs>

<authors>
<aname> </aname>
<email> </email></authors></erlref>