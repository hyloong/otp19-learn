<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>Simple Network Management Protocol (SNMP)</fo:bookmark-title>
      <fo:bookmark internal-destination="idp531632" starting-state="hide">
        <fo:bookmark-title>SNMP User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp691248" starting-state="hide">
          <fo:bookmark-title>SNMP Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp544432" starting-state="hide">
            <fo:bookmark-title>Scope and Purpose</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idm19152" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp729584" starting-state="hide">
            <fo:bookmark-title>Definitions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp570688" starting-state="hide">
            <fo:bookmark-title>About This Manual</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp260656" starting-state="hide">
            <fo:bookmark-title>Where to Find More Information</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp621616" starting-state="hide">
          <fo:bookmark-title>Agent Functional Description</fo:bookmark-title>
          <fo:bookmark internal-destination="idp529520" starting-state="hide">
            <fo:bookmark-title>Features</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp988880" starting-state="hide">
            <fo:bookmark-title>SNMPv1, SNMPv2 and SNMPv3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1766096" starting-state="hide">
            <fo:bookmark-title>Operation</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1861792" starting-state="hide">
            <fo:bookmark-title>Sub-agents and MIB Loading</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2246240" starting-state="hide">
            <fo:bookmark-title>Contexts and Communities</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2192032" starting-state="hide">
            <fo:bookmark-title>Management of the Agent</fo:bookmark-title>
            <fo:bookmark internal-destination="idp2288576" starting-state="hide">
              <fo:bookmark-title>STANDARD-MIB and SNMPv2-MIB</fo:bookmark-title>
              <fo:bookmark internal-destination="idp2295760" starting-state="hide">
                <fo:bookmark-title>Data Types</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2124528" starting-state="hide">
              <fo:bookmark-title>SNMP-FRAMEWORK-MIB and SNMP-MPD-MIB</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2128032" starting-state="hide">
              <fo:bookmark-title>SNMP-TARGET-MIB and SNMP-NOTIFICATION-MIB</fo:bookmark-title>
              <fo:bookmark internal-destination="idp2133552" starting-state="hide">
                <fo:bookmark-title>snmpNotifyTable</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp2137120" starting-state="hide">
                <fo:bookmark-title>snmpTargetAddrTable</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp2140896" starting-state="hide">
                <fo:bookmark-title>snmpTargetParamsTable</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2145408" starting-state="hide">
              <fo:bookmark-title>SNMP-VIEW-BASED-ACM-MIB</fo:bookmark-title>
              <fo:bookmark internal-destination="idp2154352" starting-state="hide">
                <fo:bookmark-title>vacmContextTable</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp2156112" starting-state="hide">
                <fo:bookmark-title>vacmSecurityToGroupTable</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp2159296" starting-state="hide">
                <fo:bookmark-title>vacmAccessTable</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp2164624" starting-state="hide">
                <fo:bookmark-title>vacmViewTreeFamilyTable</fo:bookmark-title>
                <fo:bookmark internal-destination="idp2322848" starting-state="hide">
                  <fo:bookmark-title>MIB View Semantics</fo:bookmark-title>
                </fo:bookmark>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2330832" starting-state="hide">
              <fo:bookmark-title>SNMP-COMMUNITY-MIB</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2336032" starting-state="hide">
              <fo:bookmark-title>SNMP-USER-BASED-SM-MIB</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2341328" starting-state="hide">
              <fo:bookmark-title>OTP-SNMPEA-MIB</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2343040" starting-state="hide">
            <fo:bookmark-title>Notifications</fo:bookmark-title>
            <fo:bookmark internal-destination="idp2353504" starting-state="hide">
              <fo:bookmark-title>Notification Sending</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2375424" starting-state="hide">
              <fo:bookmark-title>Notification Filters</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2380720" starting-state="hide">
              <fo:bookmark-title>Sub-agent Path</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2384592" starting-state="hide">
            <fo:bookmark-title>Discovery</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2398720" starting-state="hide">
          <fo:bookmark-title>Manager Functional Description</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2402112" starting-state="hide">
            <fo:bookmark-title>Features</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2420160" starting-state="hide">
            <fo:bookmark-title>Operation</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2428272" starting-state="hide">
            <fo:bookmark-title>MIB loading</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2434208" starting-state="hide">
          <fo:bookmark-title>The MIB Compiler</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2442976" starting-state="hide">
            <fo:bookmark-title>Operation</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2450528" starting-state="hide">
            <fo:bookmark-title>Importing MIBs</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2459104" starting-state="hide">
            <fo:bookmark-title>MIB Consistency Checking</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2463488" starting-state="hide">
            <fo:bookmark-title>.hrl File Generation</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2469472" starting-state="hide">
            <fo:bookmark-title>Emacs Integration</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2475056" starting-state="hide">
            <fo:bookmark-title>Compiling from a Shell or a Makefile</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2481504" starting-state="hide">
            <fo:bookmark-title>Deviations from the Standard</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2502992" starting-state="hide">
          <fo:bookmark-title>Running the application</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2512560" starting-state="hide">
            <fo:bookmark-title>Configuring the application</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2846768" starting-state="hide">
            <fo:bookmark-title>Modifying the Configuration Files</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2857616" starting-state="hide">
            <fo:bookmark-title>Starting the application</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2863600" starting-state="hide">
            <fo:bookmark-title>Debugging the application</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2896816" starting-state="hide">
          <fo:bookmark-title>Definition of Agent Configuration Files</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2922752" starting-state="hide">
            <fo:bookmark-title>Agent Information</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2942432" starting-state="hide">
            <fo:bookmark-title>Contexts</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2949200" starting-state="hide">
            <fo:bookmark-title>System Information</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2958272" starting-state="hide">
            <fo:bookmark-title>Communities</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2970576" starting-state="hide">
            <fo:bookmark-title>MIB Views for VACM</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2999104" starting-state="hide">
            <fo:bookmark-title>Security data for USM</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3024960" starting-state="hide">
            <fo:bookmark-title>Notify Definitions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3034528" starting-state="hide">
            <fo:bookmark-title>Target Address Definitions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3063504" starting-state="hide">
            <fo:bookmark-title>Target Parameters Definitions</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3081856" starting-state="hide">
          <fo:bookmark-title>Definition of Manager Configuration Files</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3091216" starting-state="hide">
            <fo:bookmark-title>Manager Information</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3122384" starting-state="hide">
            <fo:bookmark-title>Users</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3134496" starting-state="hide">
            <fo:bookmark-title>Agents</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3162000" starting-state="hide">
            <fo:bookmark-title>Security data for USM</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3186704" starting-state="hide">
          <fo:bookmark-title>Agent Implementation Example</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3192128" starting-state="hide">
            <fo:bookmark-title>MIB</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3196912" starting-state="hide">
            <fo:bookmark-title>Default Implementation</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3206448" starting-state="hide">
            <fo:bookmark-title>Manual Implementation</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3210272" starting-state="hide">
              <fo:bookmark-title>Code</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3219072" starting-state="hide">
              <fo:bookmark-title>Association File</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3221696" starting-state="hide">
              <fo:bookmark-title>Transcript</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3225600" starting-state="hide">
              <fo:bookmark-title>Trap Sending</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3237888" starting-state="hide">
          <fo:bookmark-title>Manager Implementation Example</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3246320" starting-state="hide">
            <fo:bookmark-title>The example manager</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3257152" starting-state="hide">
            <fo:bookmark-title>A simple standard test</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3263440" starting-state="hide">
          <fo:bookmark-title>Instrumentation Functions</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3274288" starting-state="hide">
            <fo:bookmark-title>Instrumentation Functions</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3277808" starting-state="hide">
              <fo:bookmark-title>New / Delete Operations</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3281744" starting-state="hide">
              <fo:bookmark-title>Get Operation</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3286992" starting-state="hide">
              <fo:bookmark-title>Set Operation</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3292480" starting-state="hide">
              <fo:bookmark-title>Is-set-ok Operation</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3298640" starting-state="hide">
              <fo:bookmark-title>Undo Operation</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3306032" starting-state="hide">
              <fo:bookmark-title>GetNext Operation</fo:bookmark-title>
              <fo:bookmark internal-destination="idp3313008" starting-state="hide">
                <fo:bookmark-title>GetNext Example</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3348064" starting-state="hide">
            <fo:bookmark-title>Using the ExtraArgument</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3360976" starting-state="hide">
            <fo:bookmark-title>Default Instrumentation</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3369696" starting-state="hide">
              <fo:bookmark-title>Table Operations</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3373600" starting-state="hide">
            <fo:bookmark-title>Atomic Set</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3390336" starting-state="hide">
          <fo:bookmark-title>Definition of Instrumentation Functions</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3394720" starting-state="hide">
            <fo:bookmark-title>Variable Instrumentation</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3401536" starting-state="hide">
              <fo:bookmark-title>f(new [, ExtraArgs])</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3403984" starting-state="hide">
              <fo:bookmark-title>f(delete [, ExtraArgs])</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3406416" starting-state="hide">
              <fo:bookmark-title>f(get [, ExtraArgs])</fo:bookmark-title>
              <fo:bookmark internal-destination="idp3408592" starting-state="hide">
                <fo:bookmark-title>Valid Return Values</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3415648" starting-state="hide">
              <fo:bookmark-title>f(is_set_ok, NewValue [, ExtraArgs])</fo:bookmark-title>
              <fo:bookmark internal-destination="idp3420256" starting-state="hide">
                <fo:bookmark-title>Valid return values</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3424176" starting-state="hide">
              <fo:bookmark-title>f(undo, NewValue [, ExtraArgs])</fo:bookmark-title>
              <fo:bookmark internal-destination="idp3428208" starting-state="hide">
                <fo:bookmark-title>Valid return values</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3432032" starting-state="hide">
              <fo:bookmark-title>f(set, NewValue [, ExtraArgs])</fo:bookmark-title>
              <fo:bookmark internal-destination="idp3435680" starting-state="hide">
                <fo:bookmark-title>Valid return values</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3439680" starting-state="hide">
            <fo:bookmark-title>Table Instrumentation</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3447392" starting-state="hide">
              <fo:bookmark-title>f(new [, ExtraArgs])</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3449824" starting-state="hide">
              <fo:bookmark-title>f(delete [, ExtraArgs])</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3452256" starting-state="hide">
              <fo:bookmark-title>f(get, RowIndex, Cols [, ExtraArgs])</fo:bookmark-title>
              <fo:bookmark internal-destination="idp3454432" starting-state="hide">
                <fo:bookmark-title>Arguments</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp3459168" starting-state="hide">
                <fo:bookmark-title>Valid Return Values</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3470688" starting-state="hide">
              <fo:bookmark-title>f(get_next, RowIndex, Cols [, ExtraArgs])</fo:bookmark-title>
              <fo:bookmark internal-destination="idp3475024" starting-state="hide">
                <fo:bookmark-title>Arguments</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp3479264" starting-state="hide">
                <fo:bookmark-title>Valid Return Values</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3488768" starting-state="hide">
              <fo:bookmark-title>f(is_set_ok, RowIndex, Cols [, ExtraArgs])</fo:bookmark-title>
              <fo:bookmark internal-destination="idp3492464" starting-state="hide">
                <fo:bookmark-title>Arguments</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp3499120" starting-state="hide">
                <fo:bookmark-title>Valid Return Values</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3504528" starting-state="hide">
              <fo:bookmark-title>f(undo, RowIndex, Cols [, ExtraArgs])</fo:bookmark-title>
              <fo:bookmark internal-destination="idp3508080" starting-state="hide">
                <fo:bookmark-title>Arguments</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp3514752" starting-state="hide">
                <fo:bookmark-title>Valid Return Values</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3520160" starting-state="hide">
              <fo:bookmark-title>f(set, RowIndex, Cols [, ExtraArgs])</fo:bookmark-title>
              <fo:bookmark internal-destination="idp3523344" starting-state="hide">
                <fo:bookmark-title>Arguments</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp3530016" starting-state="hide">
                <fo:bookmark-title>Valid Return Values</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3539504" starting-state="hide">
          <fo:bookmark-title>Definition of Agent Net if</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3548976" starting-state="hide">
            <fo:bookmark-title>Mandatory Functions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3551648" starting-state="hide">
            <fo:bookmark-title>Messages</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3558496" starting-state="hide">
              <fo:bookmark-title>Outgoing Messages</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3579216" starting-state="hide">
              <fo:bookmark-title>Incoming Messages</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3633904" starting-state="hide">
              <fo:bookmark-title>Notes</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3642480" starting-state="hide">
          <fo:bookmark-title>Definition of Manager Net if</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3652448" starting-state="hide">
            <fo:bookmark-title>Mandatory Functions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3654560" starting-state="hide">
            <fo:bookmark-title>Messages</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3691776" starting-state="hide">
              <fo:bookmark-title>Notes</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3699808" starting-state="hide">
          <fo:bookmark-title>Audit Trail Log</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3707168" starting-state="hide">
            <fo:bookmark-title>Agent Logging</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3712320" starting-state="hide">
            <fo:bookmark-title>Manager Logging</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3721392" starting-state="hide">
          <fo:bookmark-title>Advanced Agent Topics</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3730112" starting-state="hide">
            <fo:bookmark-title>When to use a Sub-agent</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3731872" starting-state="hide">
              <fo:bookmark-title>Special Set Transaction Mechanism</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3737104" starting-state="hide">
              <fo:bookmark-title>Process Communication</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3739840" starting-state="hide">
              <fo:bookmark-title>Frequent Loading of MIBs</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3741584" starting-state="hide">
              <fo:bookmark-title>Interaction With Other SNMP Agent Toolkits</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3743328" starting-state="hide">
            <fo:bookmark-title>Agent Semantics</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3751040" starting-state="hide">
            <fo:bookmark-title>Sub-agents and Dependencies </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3753136" starting-state="hide">
            <fo:bookmark-title>Distributed Tables</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3759936" starting-state="hide">
            <fo:bookmark-title>Fault Tolerance</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3764208" starting-state="hide">
              <fo:bookmark-title>Using the SNMP Agent in a Distributed Environment</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3768768" starting-state="hide">
            <fo:bookmark-title>Using Mnesia Tables as SNMP Tables</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3775632" starting-state="hide">
              <fo:bookmark-title>Creating the Mnesia Table</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3786352" starting-state="hide">
              <fo:bookmark-title>Instrumentation Functions</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3789488" starting-state="hide">
              <fo:bookmark-title>Adding Own Actions</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3794000" starting-state="hide">
              <fo:bookmark-title>Extending the Mnesia Table</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3802128" starting-state="hide">
            <fo:bookmark-title>Deviations from the Standard</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3816512" starting-state="hide">
          <fo:bookmark-title>SNMP Appendix A</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3819872" starting-state="hide">
            <fo:bookmark-title>Appendix A</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3863408" starting-state="hide">
          <fo:bookmark-title>SNMP Appendix B</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3866768" starting-state="hide">
            <fo:bookmark-title>Appendix B</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3867504" starting-state="hide">
              <fo:bookmark-title>RowStatus (from RFC1903)</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp529296" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp4380608" starting-state="hide">
          <fo:bookmark-title>snmp</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4499904" starting-state="hide">
            <fo:bookmark-title>config/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5217728" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5217120" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5212704" starting-state="hide">
            <fo:bookmark-title>start_agent/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4694160" starting-state="hide">
            <fo:bookmark-title>start_agent/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4689712" starting-state="hide">
            <fo:bookmark-title>start_manager/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4863984" starting-state="hide">
            <fo:bookmark-title>start_manager/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp616048" starting-state="hide">
            <fo:bookmark-title>date_and_time/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp774448" starting-state="hide">
            <fo:bookmark-title>date_and_time_to_universal_time_dst/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4386416" starting-state="hide">
            <fo:bookmark-title>date_and_time_to_string/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4386832" starting-state="hide">
            <fo:bookmark-title>date_and_time_to_string/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4041952" starting-state="hide">
            <fo:bookmark-title>date_and_time_to_string2/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2099136" starting-state="hide">
            <fo:bookmark-title>local_time_to_date_and_time_dst/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4374672" starting-state="hide">
            <fo:bookmark-title>universal_time_to_date_and_time/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2021408" starting-state="hide">
            <fo:bookmark-title>validate_date_and_time/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4327904" starting-state="hide">
            <fo:bookmark-title>validate_date_and_time/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2022448" starting-state="hide">
            <fo:bookmark-title>passwd2localized_key/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4191824" starting-state="hide">
            <fo:bookmark-title>octet_string_to_bits/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp259920" starting-state="hide">
            <fo:bookmark-title>bits_to_octet_string/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5508208" starting-state="hide">
            <fo:bookmark-title>read_mib/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp301040" starting-state="hide">
            <fo:bookmark-title>log_to_txt/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp301456" starting-state="hide">
            <fo:bookmark-title>log_to_txt/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp301984" starting-state="hide">
            <fo:bookmark-title>log_to_txt/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5437008" starting-state="hide">
            <fo:bookmark-title>log_to_txt/8</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4268976" starting-state="hide">
            <fo:bookmark-title>log_to_io/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4269392" starting-state="hide">
            <fo:bookmark-title>log_to_io/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4269808" starting-state="hide">
            <fo:bookmark-title>log_to_io/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4775968" starting-state="hide">
            <fo:bookmark-title>log_to_io/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4867984" starting-state="hide">
            <fo:bookmark-title>change_log_size/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4928496" starting-state="hide">
            <fo:bookmark-title>print_version_info/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4928912" starting-state="hide">
            <fo:bookmark-title>print_version_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5420096" starting-state="hide">
            <fo:bookmark-title>versions1/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5420576" starting-state="hide">
            <fo:bookmark-title>versions2/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5090368" starting-state="hide">
            <fo:bookmark-title>print_versions/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5090832" starting-state="hide">
            <fo:bookmark-title>print_versions/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5097296" starting-state="hide">
            <fo:bookmark-title>enable_trace/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5100496" starting-state="hide">
            <fo:bookmark-title>disable_trace/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5329152" starting-state="hide">
            <fo:bookmark-title>set_trace/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5337248" starting-state="hide">
            <fo:bookmark-title>reset_trace/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5341840" starting-state="hide">
            <fo:bookmark-title>set_trace/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp5360736" starting-state="hide">
          <fo:bookmark-title>snmp</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6316080" starting-state="hide">
          <fo:bookmark-title>snmpa</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6329584" starting-state="hide">
            <fo:bookmark-title>add_agent_caps/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6334384" starting-state="hide">
            <fo:bookmark-title>del_agent_caps/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6338272" starting-state="hide">
            <fo:bookmark-title>get_agent_caps/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6343504" starting-state="hide">
            <fo:bookmark-title>get/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6343984" starting-state="hide">
            <fo:bookmark-title>get/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6351056" starting-state="hide">
            <fo:bookmark-title>get_next/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6351536" starting-state="hide">
            <fo:bookmark-title>get_next/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6359584" starting-state="hide">
            <fo:bookmark-title>backup/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6360064" starting-state="hide">
            <fo:bookmark-title>backup/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6367264" starting-state="hide">
            <fo:bookmark-title>info/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6367728" starting-state="hide">
            <fo:bookmark-title>info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6372880" starting-state="hide">
            <fo:bookmark-title>old_info_format/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6376752" starting-state="hide">
            <fo:bookmark-title>load_mib/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6377216" starting-state="hide">
            <fo:bookmark-title>load_mib/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6383680" starting-state="hide">
            <fo:bookmark-title>load_mibs/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6384144" starting-state="hide">
            <fo:bookmark-title>load_mibs/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6384624" starting-state="hide">
            <fo:bookmark-title>load_mibs/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6385104" starting-state="hide">
            <fo:bookmark-title>load_mibs/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6394944" starting-state="hide">
            <fo:bookmark-title>unload_mib/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6395408" starting-state="hide">
            <fo:bookmark-title>unload_mib/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6400512" starting-state="hide">
            <fo:bookmark-title>unload_mibs/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6400992" starting-state="hide">
            <fo:bookmark-title>unload_mibs/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6401472" starting-state="hide">
            <fo:bookmark-title>unload_mibs/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6401952" starting-state="hide">
            <fo:bookmark-title>unload_mibs/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6410432" starting-state="hide">
            <fo:bookmark-title>which_mibs/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6410880" starting-state="hide">
            <fo:bookmark-title>which_mibs/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6416064" starting-state="hide">
            <fo:bookmark-title>whereis_mib/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6416544" starting-state="hide">
            <fo:bookmark-title>whereis_mib/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6423360" starting-state="hide">
            <fo:bookmark-title>current_request_id/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6423840" starting-state="hide">
            <fo:bookmark-title>current_context/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6424320" starting-state="hide">
            <fo:bookmark-title>current_community/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6424800" starting-state="hide">
            <fo:bookmark-title>current_address/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6431136" starting-state="hide">
            <fo:bookmark-title>enum_to_int/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6431616" starting-state="hide">
            <fo:bookmark-title>enum_to_int/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6439840" starting-state="hide">
            <fo:bookmark-title>int_to_enum/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6440320" starting-state="hide">
            <fo:bookmark-title>int_to_enum/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6448544" starting-state="hide">
            <fo:bookmark-title>name_to_oid/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6449024" starting-state="hide">
            <fo:bookmark-title>name_to_oid/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6455408" starting-state="hide">
            <fo:bookmark-title>oid_to_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6455888" starting-state="hide">
            <fo:bookmark-title>oid_to_name/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6462624" starting-state="hide">
            <fo:bookmark-title>which_aliasnames/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6466384" starting-state="hide">
            <fo:bookmark-title>which_tables/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6470128" starting-state="hide">
            <fo:bookmark-title>which_variables/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6473888" starting-state="hide">
            <fo:bookmark-title>which_notifications/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6479040" starting-state="hide">
            <fo:bookmark-title>log_to_txt/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6479488" starting-state="hide">
            <fo:bookmark-title>log_to_txt/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6479952" starting-state="hide">
            <fo:bookmark-title>log_to_txt/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6480448" starting-state="hide">
            <fo:bookmark-title>log_to_txt/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6480960" starting-state="hide">
            <fo:bookmark-title>log_to_txt/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6481472" starting-state="hide">
            <fo:bookmark-title>log_to_txt/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6482000" starting-state="hide">
            <fo:bookmark-title>log_to_txt/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6482528" starting-state="hide">
            <fo:bookmark-title>log_to_txt/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6483056" starting-state="hide">
            <fo:bookmark-title>log_to_txt/8</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6495648" starting-state="hide">
            <fo:bookmark-title>log_to_io/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6496128" starting-state="hide">
            <fo:bookmark-title>log_to_io/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6496624" starting-state="hide">
            <fo:bookmark-title>log_to_io/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6497120" starting-state="hide">
            <fo:bookmark-title>log_to_io/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6497632" starting-state="hide">
            <fo:bookmark-title>log_to_io/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6498144" starting-state="hide">
            <fo:bookmark-title>log_to_io/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6498656" starting-state="hide">
            <fo:bookmark-title>log_to_io/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6499168" starting-state="hide">
            <fo:bookmark-title>log_to_io/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6510864" starting-state="hide">
            <fo:bookmark-title>change_log_size/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6516768" starting-state="hide">
            <fo:bookmark-title>set_log_type/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6517264" starting-state="hide">
            <fo:bookmark-title>set_log_type/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6523104" starting-state="hide">
            <fo:bookmark-title>mib_of/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6523584" starting-state="hide">
            <fo:bookmark-title>mib_of/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6529264" starting-state="hide">
            <fo:bookmark-title>me_of/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6529744" starting-state="hide">
            <fo:bookmark-title>me_of/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6535440" starting-state="hide">
            <fo:bookmark-title>invalidate_mibs_cache/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6535904" starting-state="hide">
            <fo:bookmark-title>invalidate_mibs_cache/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6540128" starting-state="hide">
            <fo:bookmark-title>enable_mibs_cache/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6540592" starting-state="hide">
            <fo:bookmark-title>enable_mibs_cache/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6544336" starting-state="hide">
            <fo:bookmark-title>disable_mibs_cache/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6544800" starting-state="hide">
            <fo:bookmark-title>disable_mibs_cache/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6548544" starting-state="hide">
            <fo:bookmark-title>which_mibs_cache_size/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6549008" starting-state="hide">
            <fo:bookmark-title>which_mibs_cache_size/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6552768" starting-state="hide">
            <fo:bookmark-title>gc_mibs_cache/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6553264" starting-state="hide">
            <fo:bookmark-title>gc_mibs_cache/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6553760" starting-state="hide">
            <fo:bookmark-title>gc_mibs_cache/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6554256" starting-state="hide">
            <fo:bookmark-title>gc_mibs_cache/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6554752" starting-state="hide">
            <fo:bookmark-title>gc_mibs_cache/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6555248" starting-state="hide">
            <fo:bookmark-title>gc_mibs_cache/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6562400" starting-state="hide">
            <fo:bookmark-title>enable_mibs_cache_autogc/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6562864" starting-state="hide">
            <fo:bookmark-title>enable_mibs_cache_autogc/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6566672" starting-state="hide">
            <fo:bookmark-title>disable_mibs_cache_autogc/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6567136" starting-state="hide">
            <fo:bookmark-title>disable_mibs_cache_autogc/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6570928" starting-state="hide">
            <fo:bookmark-title>update_mibs_cache_age/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6571408" starting-state="hide">
            <fo:bookmark-title>update_mibs_cache_age/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6576560" starting-state="hide">
            <fo:bookmark-title>update_mibs_cache_gclimit/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6577056" starting-state="hide">
            <fo:bookmark-title>update_mibs_cache_gclimit/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6582224" starting-state="hide">
            <fo:bookmark-title>register_notification_filter/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6582720" starting-state="hide">
            <fo:bookmark-title>register_notification_filter/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6583232" starting-state="hide">
            <fo:bookmark-title>register_notification_filter/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6583744" starting-state="hide">
            <fo:bookmark-title>register_notification_filter/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6592832" starting-state="hide">
            <fo:bookmark-title>unregister_notification_filter/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6593328" starting-state="hide">
            <fo:bookmark-title>unregister_notification_filter/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6598016" starting-state="hide">
            <fo:bookmark-title>which_notification_filter/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6598480" starting-state="hide">
            <fo:bookmark-title>which_notification_filter/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6603152" starting-state="hide">
            <fo:bookmark-title>set_request_limit/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6603648" starting-state="hide">
            <fo:bookmark-title>set_request_limit/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6609488" starting-state="hide">
            <fo:bookmark-title>register_subagent/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6617056" starting-state="hide">
            <fo:bookmark-title>unregister_subagent/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6621872" starting-state="hide">
            <fo:bookmark-title>send_notification2/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6667296" starting-state="hide">
            <fo:bookmark-title>send_notification/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6667776" starting-state="hide">
            <fo:bookmark-title>send_notification/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6668272" starting-state="hide">
            <fo:bookmark-title>send_notification/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6668768" starting-state="hide">
            <fo:bookmark-title>send_notification/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6669296" starting-state="hide">
            <fo:bookmark-title>send_notification/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6735840" starting-state="hide">
            <fo:bookmark-title>discovery/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6736352" starting-state="hide">
            <fo:bookmark-title>discovery/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6736880" starting-state="hide">
            <fo:bookmark-title>discovery/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6737408" starting-state="hide">
            <fo:bookmark-title>discovery/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6737936" starting-state="hide">
            <fo:bookmark-title>discovery/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6738464" starting-state="hide">
            <fo:bookmark-title>discovery/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6739008" starting-state="hide">
            <fo:bookmark-title>discovery/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6756752" starting-state="hide">
            <fo:bookmark-title>convert_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6764560" starting-state="hide">
            <fo:bookmark-title>restart_worker/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6765024" starting-state="hide">
            <fo:bookmark-title>restart_worker/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6769328" starting-state="hide">
            <fo:bookmark-title>restart_set_worker/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6769792" starting-state="hide">
            <fo:bookmark-title>restart_set_worker/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6774128" starting-state="hide">
            <fo:bookmark-title>print_mib_info/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6777024" starting-state="hide">
            <fo:bookmark-title>print_mib_tables/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6779904" starting-state="hide">
            <fo:bookmark-title>print_mib_variables/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6782800" starting-state="hide">
            <fo:bookmark-title>verbosity/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6796080" starting-state="hide">
          <fo:bookmark-title>snmpa_conf</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6805536" starting-state="hide">
            <fo:bookmark-title>agent_entry/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6812864" starting-state="hide">
            <fo:bookmark-title>write_agent_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6813328" starting-state="hide">
            <fo:bookmark-title>write_agent_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6820848" starting-state="hide">
            <fo:bookmark-title>append_agent_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6827088" starting-state="hide">
            <fo:bookmark-title>read_agent_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6833312" starting-state="hide">
            <fo:bookmark-title>standard_entry/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6840688" starting-state="hide">
            <fo:bookmark-title>write_standard_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6841152" starting-state="hide">
            <fo:bookmark-title>write_standard_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6848720" starting-state="hide">
            <fo:bookmark-title>append_standard_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6855008" starting-state="hide">
            <fo:bookmark-title>read_standard_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6861264" starting-state="hide">
            <fo:bookmark-title>context_entry/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6867152" starting-state="hide">
            <fo:bookmark-title>write_context_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6867616" starting-state="hide">
            <fo:bookmark-title>write_context_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6875168" starting-state="hide">
            <fo:bookmark-title>append_context_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6881440" starting-state="hide">
            <fo:bookmark-title>read_context_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6887680" starting-state="hide">
            <fo:bookmark-title>community_entry/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6888160" starting-state="hide">
            <fo:bookmark-title>community_entry/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6899680" starting-state="hide">
            <fo:bookmark-title>write_community_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6900144" starting-state="hide">
            <fo:bookmark-title>write_community_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6907696" starting-state="hide">
            <fo:bookmark-title>append_community_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6913984" starting-state="hide">
            <fo:bookmark-title>read_community_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6920224" starting-state="hide">
            <fo:bookmark-title>target_addr_entry/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6920752" starting-state="hide">
            <fo:bookmark-title>target_addr_entry/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6921280" starting-state="hide">
            <fo:bookmark-title>target_addr_entry/8</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6921824" starting-state="hide">
            <fo:bookmark-title>target_addr_entry/10</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6937008" starting-state="hide">
            <fo:bookmark-title>write_target_addr_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6937488" starting-state="hide">
            <fo:bookmark-title>write_target_addr_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6945072" starting-state="hide">
            <fo:bookmark-title>append_target_addr_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6951376" starting-state="hide">
            <fo:bookmark-title>read_target_addr_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6957632" starting-state="hide">
            <fo:bookmark-title>target_params_entry/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6958112" starting-state="hide">
            <fo:bookmark-title>target_params_entry/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6958624" starting-state="hide">
            <fo:bookmark-title>target_params_entry/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6974160" starting-state="hide">
            <fo:bookmark-title>write_target_params_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6974640" starting-state="hide">
            <fo:bookmark-title>write_target_params_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6982240" starting-state="hide">
            <fo:bookmark-title>append_target_params_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6988592" starting-state="hide">
            <fo:bookmark-title>read_target_params_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6994864" starting-state="hide">
            <fo:bookmark-title>vacm_s2g_entry/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6995360" starting-state="hide">
            <fo:bookmark-title>vacm_acc_entry/8</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6995904" starting-state="hide">
            <fo:bookmark-title>vacm_vtf_entry/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6996400" starting-state="hide">
            <fo:bookmark-title>vacm_vtf_entry/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7010416" starting-state="hide">
            <fo:bookmark-title>write_vacm_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7010880" starting-state="hide">
            <fo:bookmark-title>write_vacm_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7018880" starting-state="hide">
            <fo:bookmark-title>append_vacm_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7025136" starting-state="hide">
            <fo:bookmark-title>read_vacm_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7031360" starting-state="hide">
            <fo:bookmark-title>usm_entry/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7031824" starting-state="hide">
            <fo:bookmark-title>usm_entry/13</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7044608" starting-state="hide">
            <fo:bookmark-title>write_usm_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7045072" starting-state="hide">
            <fo:bookmark-title>write_usm_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7052576" starting-state="hide">
            <fo:bookmark-title>append_usm_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7058832" starting-state="hide">
            <fo:bookmark-title>read_usm_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7065056" starting-state="hide">
            <fo:bookmark-title>notify_entry/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7073024" starting-state="hide">
            <fo:bookmark-title>write_notify_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7073488" starting-state="hide">
            <fo:bookmark-title>write_notify_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7081024" starting-state="hide">
            <fo:bookmark-title>append_notify_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7087280" starting-state="hide">
            <fo:bookmark-title>read_notify_config/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7100704" starting-state="hide">
          <fo:bookmark-title>snmpa_discovery_handler</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7106752" starting-state="hide">
            <fo:bookmark-title>stage1_finish/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7132992" starting-state="hide">
          <fo:bookmark-title>snmpa_error_report</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7139536" starting-state="hide">
            <fo:bookmark-title>config_err/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7144944" starting-state="hide">
            <fo:bookmark-title>user_err/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7157504" starting-state="hide">
          <fo:bookmark-title>snmpa_error</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7165408" starting-state="hide">
            <fo:bookmark-title>config_err/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7171376" starting-state="hide">
            <fo:bookmark-title>user_err/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7183936" starting-state="hide">
          <fo:bookmark-title>snmpa_error_io</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7191056" starting-state="hide">
            <fo:bookmark-title>config_err/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7196464" starting-state="hide">
            <fo:bookmark-title>user_err/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7209024" starting-state="hide">
          <fo:bookmark-title>snmpa_error_logger</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7216224" starting-state="hide">
            <fo:bookmark-title>config_err/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7221632" starting-state="hide">
            <fo:bookmark-title>user_err/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7235536" starting-state="hide">
          <fo:bookmark-title>snmpa_local_db</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7253376" starting-state="hide">
            <fo:bookmark-title>dump/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7256608" starting-state="hide">
            <fo:bookmark-title>match/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7259424" starting-state="hide">
            <fo:bookmark-title>print/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7259872" starting-state="hide">
            <fo:bookmark-title>print/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7260320" starting-state="hide">
            <fo:bookmark-title>print/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7265776" starting-state="hide">
            <fo:bookmark-title>table_create/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7269936" starting-state="hide">
            <fo:bookmark-title>table_create_row/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7274112" starting-state="hide">
            <fo:bookmark-title>table_delete/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7276368" starting-state="hide">
            <fo:bookmark-title>table_delete_row/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7278672" starting-state="hide">
            <fo:bookmark-title>table_exists/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7280944" starting-state="hide">
            <fo:bookmark-title>table_get_row/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7292608" starting-state="hide">
          <fo:bookmark-title>snmpa_mib_data</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7318960" starting-state="hide">
            <fo:bookmark-title>Module:new/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7323152" starting-state="hide">
            <fo:bookmark-title>Module:close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7326880" starting-state="hide">
            <fo:bookmark-title>Module:sync/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7331216" starting-state="hide">
            <fo:bookmark-title>Module:load_mib/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7338288" starting-state="hide">
            <fo:bookmark-title>Module:unload_mib/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7343456" starting-state="hide">
            <fo:bookmark-title>Module:lookup/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7350976" starting-state="hide">
            <fo:bookmark-title>Module:next/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7356656" starting-state="hide">
            <fo:bookmark-title>Module:register_subagent/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7362272" starting-state="hide">
            <fo:bookmark-title>Module:unregister_subagent/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7370688" starting-state="hide">
            <fo:bookmark-title>Module:dump/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7377168" starting-state="hide">
            <fo:bookmark-title>Module:which_mib/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7383184" starting-state="hide">
            <fo:bookmark-title>Module:which_mibs/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7388288" starting-state="hide">
            <fo:bookmark-title>Module:whereis_mib/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7393872" starting-state="hide">
            <fo:bookmark-title>Module:info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7399520" starting-state="hide">
            <fo:bookmark-title>Module:backup/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7405200" starting-state="hide">
            <fo:bookmark-title>Module:code_change/4</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7418144" starting-state="hide">
          <fo:bookmark-title>snmpa_mib_storage</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7439776" starting-state="hide">
            <fo:bookmark-title>Module:open/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7449120" starting-state="hide">
            <fo:bookmark-title>Module:close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7452864" starting-state="hide">
            <fo:bookmark-title>Module:read/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7457552" starting-state="hide">
            <fo:bookmark-title>Module:write/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7462224" starting-state="hide">
            <fo:bookmark-title>Module:delete/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7465968" starting-state="hide">
            <fo:bookmark-title>Module:delete/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7470656" starting-state="hide">
            <fo:bookmark-title>Module:match_object/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7475872" starting-state="hide">
            <fo:bookmark-title>Module:match_delete/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7481152" starting-state="hide">
            <fo:bookmark-title>Module:tab2list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7485392" starting-state="hide">
            <fo:bookmark-title>Module:info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7490096" starting-state="hide">
            <fo:bookmark-title>Module:sync/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7494336" starting-state="hide">
            <fo:bookmark-title>Module:backup/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7506112" starting-state="hide">
          <fo:bookmark-title>snmpa_mpd</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7512800" starting-state="hide">
            <fo:bookmark-title>init/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7517568" starting-state="hide">
            <fo:bookmark-title>process_packet/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7518128" starting-state="hide">
            <fo:bookmark-title>process_packet/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7531104" starting-state="hide">
            <fo:bookmark-title>generate_response_msg/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7531632" starting-state="hide">
            <fo:bookmark-title>generate_response_msg/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7540272" starting-state="hide">
            <fo:bookmark-title>generate_msg/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7540800" starting-state="hide">
            <fo:bookmark-title>generate_msg/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7556080" starting-state="hide">
            <fo:bookmark-title>process_taddrs/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7565776" starting-state="hide">
            <fo:bookmark-title>discarded_pdu/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7576736" starting-state="hide">
          <fo:bookmark-title>snmpa_network_interface</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7589744" starting-state="hide">
            <fo:bookmark-title>start_link/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7599856" starting-state="hide">
            <fo:bookmark-title>info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7605584" starting-state="hide">
            <fo:bookmark-title>verbosity/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7609840" starting-state="hide">
            <fo:bookmark-title>get_log_type/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7615024" starting-state="hide">
            <fo:bookmark-title>set_log_type/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7627664" starting-state="hide">
          <fo:bookmark-title>snmpa_network_interface_filter</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7649200" starting-state="hide">
            <fo:bookmark-title>accept_recv/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7655280" starting-state="hide">
            <fo:bookmark-title>accept_send/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7661360" starting-state="hide">
            <fo:bookmark-title>accept_recv_pdu/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7667552" starting-state="hide">
            <fo:bookmark-title>accept_send_pdu/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7684752" starting-state="hide">
          <fo:bookmark-title>snmpa_notification_delivery_info_receiver</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7697216" starting-state="hide">
            <fo:bookmark-title>delivery_targets/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7703920" starting-state="hide">
            <fo:bookmark-title>delivery_info/4</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7719056" starting-state="hide">
          <fo:bookmark-title>snmpa_notification_filter</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7725200" starting-state="hide">
            <fo:bookmark-title>handle_notification/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7739520" starting-state="hide">
          <fo:bookmark-title>snmpa_supervisor</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7742080" starting-state="hide">
            <fo:bookmark-title>start_sub_sup/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7748416" starting-state="hide">
            <fo:bookmark-title>start_master_sup/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7756832" starting-state="hide">
            <fo:bookmark-title>start_sub_agent/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7762864" starting-state="hide">
            <fo:bookmark-title>stop_sub_agent/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7774672" starting-state="hide">
          <fo:bookmark-title>snmp_community_mib</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7778688" starting-state="hide">
            <fo:bookmark-title>configure/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7788144" starting-state="hide">
            <fo:bookmark-title>reconfigure/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7797664" starting-state="hide">
            <fo:bookmark-title>add_community/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7798160" starting-state="hide">
            <fo:bookmark-title>add_community/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7806976" starting-state="hide">
            <fo:bookmark-title>delete_community/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7818224" starting-state="hide">
          <fo:bookmark-title>snmp_framework_mib</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7821696" starting-state="hide">
            <fo:bookmark-title>configure/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7830192" starting-state="hide">
            <fo:bookmark-title>init/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7833632" starting-state="hide">
            <fo:bookmark-title>add_context/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7839200" starting-state="hide">
            <fo:bookmark-title>delete_context/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7850432" starting-state="hide">
          <fo:bookmark-title>snmp_generic</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7872432" starting-state="hide">
            <fo:bookmark-title>get_status_col/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7872896" starting-state="hide">
            <fo:bookmark-title>get_status_col/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7880656" starting-state="hide">
            <fo:bookmark-title>get_index_types/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7885488" starting-state="hide">
            <fo:bookmark-title>get_table_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7893008" starting-state="hide">
            <fo:bookmark-title>table_func/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7893456" starting-state="hide">
            <fo:bookmark-title>table_func/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7910464" starting-state="hide">
            <fo:bookmark-title>table_get_elements/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7916528" starting-state="hide">
            <fo:bookmark-title>table_next/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7921680" starting-state="hide">
            <fo:bookmark-title>table_row_exists/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7925888" starting-state="hide">
            <fo:bookmark-title>table_set_elements/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7933424" starting-state="hide">
            <fo:bookmark-title>variable_func/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7933888" starting-state="hide">
            <fo:bookmark-title>variable_func/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7942016" starting-state="hide">
            <fo:bookmark-title>variable_get/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7946224" starting-state="hide">
            <fo:bookmark-title>variable_set/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7963712" starting-state="hide">
          <fo:bookmark-title>snmp_index</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8000048" starting-state="hide">
            <fo:bookmark-title>delete/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8004512" starting-state="hide">
            <fo:bookmark-title>delete/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8008224" starting-state="hide">
            <fo:bookmark-title>get/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8013088" starting-state="hide">
            <fo:bookmark-title>get_last/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8017216" starting-state="hide">
            <fo:bookmark-title>get_next/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8022320" starting-state="hide">
            <fo:bookmark-title>insert/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8026976" starting-state="hide">
            <fo:bookmark-title>key_to_oid/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8031520" starting-state="hide">
            <fo:bookmark-title>new/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8042800" starting-state="hide">
          <fo:bookmark-title>snmp_notification_mib</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8046256" starting-state="hide">
            <fo:bookmark-title>configure/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8054240" starting-state="hide">
            <fo:bookmark-title>reconfigure/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8062848" starting-state="hide">
            <fo:bookmark-title>add_notify/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8069344" starting-state="hide">
            <fo:bookmark-title>delete_notify/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8080608" starting-state="hide">
          <fo:bookmark-title>snmp_pdus</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8087152" starting-state="hide">
            <fo:bookmark-title>dec_message/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8092832" starting-state="hide">
            <fo:bookmark-title>dec_message_only/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8097120" starting-state="hide">
            <fo:bookmark-title>dec_pdu/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8100304" starting-state="hide">
            <fo:bookmark-title>dec_scoped_pdu/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8103504" starting-state="hide">
            <fo:bookmark-title>dec_scoped_pdu_data/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8107280" starting-state="hide">
            <fo:bookmark-title>dec_usm_security_parameters/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8110528" starting-state="hide">
            <fo:bookmark-title>enc_encrypted_scoped_pdu/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8116160" starting-state="hide">
            <fo:bookmark-title>enc_message/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8119344" starting-state="hide">
            <fo:bookmark-title>enc_message_only/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8125216" starting-state="hide">
            <fo:bookmark-title>enc_pdu/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8128384" starting-state="hide">
            <fo:bookmark-title>enc_scoped_pdu/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8133536" starting-state="hide">
            <fo:bookmark-title>enc_usm_security_parameters/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8143936" starting-state="hide">
          <fo:bookmark-title>snmp_standard_mib</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8147408" starting-state="hide">
            <fo:bookmark-title>configure/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8156336" starting-state="hide">
            <fo:bookmark-title>inc/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8156784" starting-state="hide">
            <fo:bookmark-title>inc/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8161296" starting-state="hide">
            <fo:bookmark-title>reconfigure/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8170320" starting-state="hide">
            <fo:bookmark-title>reset/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8173456" starting-state="hide">
            <fo:bookmark-title>sys_up_time/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8183776" starting-state="hide">
          <fo:bookmark-title>snmp_target_mib</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8193056" starting-state="hide">
            <fo:bookmark-title>configure/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8202960" starting-state="hide">
            <fo:bookmark-title>reconfigure/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8212912" starting-state="hide">
            <fo:bookmark-title>set_target_engine_id/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8217712" starting-state="hide">
            <fo:bookmark-title>add_addr/10</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8227504" starting-state="hide">
            <fo:bookmark-title>delete_addr/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8232176" starting-state="hide">
            <fo:bookmark-title>add_params/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8239664" starting-state="hide">
            <fo:bookmark-title>delete_params/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8250976" starting-state="hide">
          <fo:bookmark-title>snmp_user_based_sm_mib</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8254448" starting-state="hide">
            <fo:bookmark-title>configure/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8263360" starting-state="hide">
            <fo:bookmark-title>reconfigure/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8272928" starting-state="hide">
            <fo:bookmark-title>add_user/13</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8284112" starting-state="hide">
            <fo:bookmark-title>delete_user/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8295392" starting-state="hide">
          <fo:bookmark-title>snmp_view_based_acm_mib</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8299408" starting-state="hide">
            <fo:bookmark-title>configure/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8308752" starting-state="hide">
            <fo:bookmark-title>reconfigure/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8318576" starting-state="hide">
            <fo:bookmark-title>add_sec2group/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8325136" starting-state="hide">
            <fo:bookmark-title>delete_sec2group/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8329824" starting-state="hide">
            <fo:bookmark-title>add_access/8</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8338640" starting-state="hide">
            <fo:bookmark-title>delete_access/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8343312" starting-state="hide">
            <fo:bookmark-title>add_view_tree_fam/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8350384" starting-state="hide">
            <fo:bookmark-title>delete_view_tree_fam/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8361664" starting-state="hide">
          <fo:bookmark-title>snmpc</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8365120" starting-state="hide">
            <fo:bookmark-title>compile/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8365568" starting-state="hide">
            <fo:bookmark-title>compile/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8428704" starting-state="hide">
            <fo:bookmark-title>is_consistent/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8432976" starting-state="hide">
            <fo:bookmark-title>mib_to_hrl/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8448544" starting-state="hide">
          <fo:bookmark-title>snmpc(command)</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8516384" starting-state="hide">
          <fo:bookmark-title>snmpm</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8524352" starting-state="hide">
            <fo:bookmark-title>monitor/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8528208" starting-state="hide">
            <fo:bookmark-title>demonitor/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8531968" starting-state="hide">
            <fo:bookmark-title>notify_started/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8544736" starting-state="hide">
            <fo:bookmark-title>cancel_notify_started/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8548528" starting-state="hide">
            <fo:bookmark-title>register_user/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8549008" starting-state="hide">
            <fo:bookmark-title>register_user/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8560816" starting-state="hide">
            <fo:bookmark-title>register_user_monitor/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8561312" starting-state="hide">
            <fo:bookmark-title>register_user_monitor/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8573856" starting-state="hide">
            <fo:bookmark-title>unregister_user/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8577584" starting-state="hide">
            <fo:bookmark-title>which_users/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8581760" starting-state="hide">
            <fo:bookmark-title>register_agent/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8596368" starting-state="hide">
            <fo:bookmark-title>unregister_agent/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8600576" starting-state="hide">
            <fo:bookmark-title>agent_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8605232" starting-state="hide">
            <fo:bookmark-title>update_agent_info/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8605728" starting-state="hide">
            <fo:bookmark-title>update_agent_info/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8614368" starting-state="hide">
            <fo:bookmark-title>which_agents/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8614832" starting-state="hide">
            <fo:bookmark-title>which_agents/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8619552" starting-state="hide">
            <fo:bookmark-title>register_usm_user/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8629392" starting-state="hide">
            <fo:bookmark-title>unregister_usm_user/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8634064" starting-state="hide">
            <fo:bookmark-title>usm_user_info/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8639216" starting-state="hide">
            <fo:bookmark-title>update_usm_user_info/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8644800" starting-state="hide">
            <fo:bookmark-title>which_usm_users/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8649456" starting-state="hide">
            <fo:bookmark-title>which_usm_users/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8654128" starting-state="hide">
            <fo:bookmark-title>sync_get2/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8654640" starting-state="hide">
            <fo:bookmark-title>sync_get2/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8676384" starting-state="hide">
            <fo:bookmark-title>sync_get/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8676896" starting-state="hide">
            <fo:bookmark-title>sync_get/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8677424" starting-state="hide">
            <fo:bookmark-title>sync_get/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8677952" starting-state="hide">
            <fo:bookmark-title>sync_get/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8678496" starting-state="hide">
            <fo:bookmark-title>sync_get/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8695760" starting-state="hide">
            <fo:bookmark-title>async_get2/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8696256" starting-state="hide">
            <fo:bookmark-title>async_get2/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8711856" starting-state="hide">
            <fo:bookmark-title>async_get/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8712352" starting-state="hide">
            <fo:bookmark-title>async_get/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8712864" starting-state="hide">
            <fo:bookmark-title>async_get/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8713376" starting-state="hide">
            <fo:bookmark-title>async_get/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8713904" starting-state="hide">
            <fo:bookmark-title>async_get/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8725472" starting-state="hide">
            <fo:bookmark-title>sync_get_next2/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8726000" starting-state="hide">
            <fo:bookmark-title>sync_get_next2/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8747744" starting-state="hide">
            <fo:bookmark-title>sync_get_next/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8748256" starting-state="hide">
            <fo:bookmark-title>sync_get_next/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8748784" starting-state="hide">
            <fo:bookmark-title>sync_get_next/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8749312" starting-state="hide">
            <fo:bookmark-title>sync_get_next/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8749856" starting-state="hide">
            <fo:bookmark-title>sync_get_next/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8763168" starting-state="hide">
            <fo:bookmark-title>async_get_next2/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8763680" starting-state="hide">
            <fo:bookmark-title>async_get_next2/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8778352" starting-state="hide">
            <fo:bookmark-title>async_get_next/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8778864" starting-state="hide">
            <fo:bookmark-title>async_get_next/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8779376" starting-state="hide">
            <fo:bookmark-title>async_get_next/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8779888" starting-state="hide">
            <fo:bookmark-title>async_get_next/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8780416" starting-state="hide">
            <fo:bookmark-title>async_get_next/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8791984" starting-state="hide">
            <fo:bookmark-title>sync_set2/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8792512" starting-state="hide">
            <fo:bookmark-title>sync_set2/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8815664" starting-state="hide">
            <fo:bookmark-title>sync_set/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8816192" starting-state="hide">
            <fo:bookmark-title>sync_set/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8816720" starting-state="hide">
            <fo:bookmark-title>sync_set/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8817248" starting-state="hide">
            <fo:bookmark-title>sync_set/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8817792" starting-state="hide">
            <fo:bookmark-title>sync_set/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8832528" starting-state="hide">
            <fo:bookmark-title>async_set2/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8833040" starting-state="hide">
            <fo:bookmark-title>async_set2/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8850032" starting-state="hide">
            <fo:bookmark-title>async_set/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8850544" starting-state="hide">
            <fo:bookmark-title>async_set/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8851072" starting-state="hide">
            <fo:bookmark-title>async_set/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8851584" starting-state="hide">
            <fo:bookmark-title>async_set/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8852112" starting-state="hide">
            <fo:bookmark-title>async_set/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8864640" starting-state="hide">
            <fo:bookmark-title>sync_get_bulk2/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8865184" starting-state="hide">
            <fo:bookmark-title>sync_get_bulk2/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8887840" starting-state="hide">
            <fo:bookmark-title>sync_get_bulk/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8888368" starting-state="hide">
            <fo:bookmark-title>sync_get_bulk/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8888912" starting-state="hide">
            <fo:bookmark-title>sync_get_bulk/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8889456" starting-state="hide">
            <fo:bookmark-title>sync_get_bulk/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8890016" starting-state="hide">
            <fo:bookmark-title>sync_get_bulk/8</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8903792" starting-state="hide">
            <fo:bookmark-title>async_get_bulk2/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8904320" starting-state="hide">
            <fo:bookmark-title>async_get_bulk2/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8919840" starting-state="hide">
            <fo:bookmark-title>async_get_bulk/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8920368" starting-state="hide">
            <fo:bookmark-title>async_get_bulk/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8920896" starting-state="hide">
            <fo:bookmark-title>async_get_bulk/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8921424" starting-state="hide">
            <fo:bookmark-title>async_get_bulk/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8921968" starting-state="hide">
            <fo:bookmark-title>async_get_bulk/8</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8934448" starting-state="hide">
            <fo:bookmark-title>cancel_async_request/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8939120" starting-state="hide">
            <fo:bookmark-title>log_to_txt/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8939568" starting-state="hide">
            <fo:bookmark-title>log_to_txt/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8940032" starting-state="hide">
            <fo:bookmark-title>log_to_txt/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8940528" starting-state="hide">
            <fo:bookmark-title>log_to_txt/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8941040" starting-state="hide">
            <fo:bookmark-title>log_to_txt/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8941552" starting-state="hide">
            <fo:bookmark-title>log_to_txt/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8942080" starting-state="hide">
            <fo:bookmark-title>log_to_txt/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8942608" starting-state="hide">
            <fo:bookmark-title>log_to_txt/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8943136" starting-state="hide">
            <fo:bookmark-title>log_to_txt/8</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8955728" starting-state="hide">
            <fo:bookmark-title>log_to_io/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8956208" starting-state="hide">
            <fo:bookmark-title>log_to_io/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8956688" starting-state="hide">
            <fo:bookmark-title>log_to_io/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8957168" starting-state="hide">
            <fo:bookmark-title>log_to_io/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8957664" starting-state="hide">
            <fo:bookmark-title>log_to_io/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8958176" starting-state="hide">
            <fo:bookmark-title>log_to_io/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8958688" starting-state="hide">
            <fo:bookmark-title>log_to_io/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8959200" starting-state="hide">
            <fo:bookmark-title>log_to_io/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8959712" starting-state="hide">
            <fo:bookmark-title>log_to_io/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8971408" starting-state="hide">
            <fo:bookmark-title>change_log_size/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8977328" starting-state="hide">
            <fo:bookmark-title>set_log_type/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8982720" starting-state="hide">
            <fo:bookmark-title>load_mib/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8989136" starting-state="hide">
            <fo:bookmark-title>unload_mib/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8995568" starting-state="hide">
            <fo:bookmark-title>which_mibs/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9000224" starting-state="hide">
            <fo:bookmark-title>name_to_oid/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9005056" starting-state="hide">
            <fo:bookmark-title>oid_to_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9009712" starting-state="hide">
            <fo:bookmark-title>oid_to_type/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9014384" starting-state="hide">
            <fo:bookmark-title>backup/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9018624" starting-state="hide">
            <fo:bookmark-title>info/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9023008" starting-state="hide">
            <fo:bookmark-title>verbosity/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9028272" starting-state="hide">
            <fo:bookmark-title>format_reason/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9028736" starting-state="hide">
            <fo:bookmark-title>format_reason/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp9045104" starting-state="hide">
          <fo:bookmark-title>snmpm_conf</fo:bookmark-title>
          <fo:bookmark internal-destination="idp9048640" starting-state="hide">
            <fo:bookmark-title>manager_entry/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9055952" starting-state="hide">
            <fo:bookmark-title>write_manager_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9056416" starting-state="hide">
            <fo:bookmark-title>write_manager_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9063952" starting-state="hide">
            <fo:bookmark-title>append_manager_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9070208" starting-state="hide">
            <fo:bookmark-title>read_manager_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9076448" starting-state="hide">
            <fo:bookmark-title>users_entry/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9076912" starting-state="hide">
            <fo:bookmark-title>users_entry/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9077392" starting-state="hide">
            <fo:bookmark-title>users_entry/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9086656" starting-state="hide">
            <fo:bookmark-title>write_users_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9087120" starting-state="hide">
            <fo:bookmark-title>write_users_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9094656" starting-state="hide">
            <fo:bookmark-title>append_users_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9100912" starting-state="hide">
            <fo:bookmark-title>read_users_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9107136" starting-state="hide">
            <fo:bookmark-title>agents_entry/12</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9118128" starting-state="hide">
            <fo:bookmark-title>write_agents_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9118592" starting-state="hide">
            <fo:bookmark-title>write_agents_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9126128" starting-state="hide">
            <fo:bookmark-title>append_agents_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9132384" starting-state="hide">
            <fo:bookmark-title>read_agents_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9138608" starting-state="hide">
            <fo:bookmark-title>usm_entry/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9139120" starting-state="hide">
            <fo:bookmark-title>usm_entry/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9147824" starting-state="hide">
            <fo:bookmark-title>write_usm_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9148288" starting-state="hide">
            <fo:bookmark-title>write_usm_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9155808" starting-state="hide">
            <fo:bookmark-title>append_usm_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9162064" starting-state="hide">
            <fo:bookmark-title>read_usm_config/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp9175440" starting-state="hide">
          <fo:bookmark-title>snmpm_mpd</fo:bookmark-title>
          <fo:bookmark internal-destination="idp9181088" starting-state="hide">
            <fo:bookmark-title>init_mpd/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9185872" starting-state="hide">
            <fo:bookmark-title>process_msg/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9198400" starting-state="hide">
            <fo:bookmark-title>generate_msg/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9207328" starting-state="hide">
            <fo:bookmark-title>generate_response_msg/4</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp9221664" starting-state="hide">
          <fo:bookmark-title>snmpm_network_interface</fo:bookmark-title>
          <fo:bookmark internal-destination="idp9239968" starting-state="hide">
            <fo:bookmark-title>start_link/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9245728" starting-state="hide">
            <fo:bookmark-title>stop/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9249456" starting-state="hide">
            <fo:bookmark-title>send_pdu/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9263552" starting-state="hide">
            <fo:bookmark-title>inform_response/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9270816" starting-state="hide">
            <fo:bookmark-title>note_store/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9275136" starting-state="hide">
            <fo:bookmark-title>info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9280848" starting-state="hide">
            <fo:bookmark-title>verbosity/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9285072" starting-state="hide">
            <fo:bookmark-title>get_log_type/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9290256" starting-state="hide">
            <fo:bookmark-title>set_log_type/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp9302848" starting-state="hide">
          <fo:bookmark-title>snmpm_user</fo:bookmark-title>
          <fo:bookmark internal-destination="idp9319888" starting-state="hide">
            <fo:bookmark-title>handle_error/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9328736" starting-state="hide">
            <fo:bookmark-title>handle_agent/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9354032" starting-state="hide">
            <fo:bookmark-title>handle_pdu/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9362640" starting-state="hide">
            <fo:bookmark-title>handle_trap/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9371680" starting-state="hide">
            <fo:bookmark-title>handle_inform/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9382848" starting-state="hide">
            <fo:bookmark-title>handle_report/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9392736" starting-state="hide">
            <fo:bookmark-title>handle_invalid_result/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp9409136" starting-state="hide">
          <fo:bookmark-title>snmpm_network_interface_filter</fo:bookmark-title>
          <fo:bookmark internal-destination="idp9429584" starting-state="hide">
            <fo:bookmark-title>accept_recv/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9435664" starting-state="hide">
            <fo:bookmark-title>accept_send/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9441744" starting-state="hide">
            <fo:bookmark-title>accept_recv_pdu/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9447936" starting-state="hide">
            <fo:bookmark-title>accept_send_pdu/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">Simple Network Management Protocol (SNMP)</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">Simple Network Management Protocol (SNMP) 5.2.6</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            Simple Network Management Protocol (SNMP)</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            Simple Network Management Protocol (SNMP) | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp531632" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      SNMP User's Guide</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A multilingual Simple Network Management Protocol application,
      featuring an Extensible Agent, a simple manager and a MIB 
      compiler and facilities for implementing SNMP MIBs etc.</fo:block>
  <fo:block id="idp691248" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  SNMP Introduction</fo:marker>1.1  SNMP Introduction</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SNMP development toolkit contains the following parts:
    </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>An Extensible multi-lingual SNMP agent, which understands SNMPv1
     (RFC1157), SNMPv2c (RFC1901, 1905, 1906 and 1907), SNMPv3
     (RFC2271, 2272, 2273, 2274 and 2275), or any combination of
     these protocols.
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A multi-lingual SNMP manager.
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A MIB compiler, which understands SMIv1 (RFC1155, 1212, and
     1215) and SMIv2 (RFC1902, 1903, and 1904).
    </fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SNMP development tool provides an environment for
    rapid agent/manager prototyping and construction. With the 
    following information provided, this tool is used to set up a 
    running multi-lingual SNMP agent/manager:
    </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>a description of a Management Information Base (MIB) in
     Abstract Syntax Notation One (ASN.1)
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>instrumentation functions for the managed objects in the MIB,
     written in Erlang.
    </fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The advantage of using an extensible (agent/manager) toolkit is to 
    remove details such as type-checking, access rights, Protocol Data Unit
    (PDU), encoding, decoding, and trap distribution from the
    programmer, who only has to write the instrumentation functions,
    which implement the MIBs. The <fo:inline font-family="monospace">get-next</fo:inline> function only
    has to be implemented for tables, and not for every variable in
    the global naming tree. This information can be deduced from the
    ASN.1 file.
    </fo:block><fo:block id="idp544432" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Scope and Purpose</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This manual describes the SNMP development tool,
      as a component of the Erlang/Open Telecom Platform development
      environment. It is assumed that the reader is familiar with the
      Erlang Development Environment, which is described in a separate
      User's Guide.</fo:block>
  <fo:block id="idm19152" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Prerequisites</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following prerequisites
      is required for understanding the material in the SNMP
      User's Guide:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the basics of the Simple Network Management Protocol
       version 1 (SNMPv1)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the basics of the community-based Simple Network
       Management Protocol version 2 (SNMPv2c)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the basics of the Simple Network Management Protocol
       version 3 (SNMPv3)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the knowledge of defining MIBs using SMIv1 and SMIv2
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>familiarity with the Erlang system and Erlang programming
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The tool requires Erlang release 4.7 or later.
      </fo:block>
  <fo:block id="idp729584" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.3 
      Definitions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following definitions are used in the SNMP User's Guide.
      </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">MIB</fo:block>
      <fo:block-container><fo:block start-indent="2em">The conceptual repository for management information is
       called the Management Information Base (MIB). It  does not
       hold any data, merely a definition of what
       data can be accessed.  A definition of an MIB is a
       description of a collection of managed objects.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">SMI</fo:block>
      <fo:block-container><fo:block start-indent="2em">The MIB is specified in an adapted subset of the Abstract
       Syntax Notation One (ASN.1) language.  This adapted subset is
       called the Structure of Management Information (SMI).
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">ASN.1</fo:block>
      <fo:block-container><fo:block start-indent="2em">ASN.1 is used in two different ways in SNMP.  The SMI is
       based on ASN.1, and the messages in the protocol are defined by
       using ASN.1.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Managed object</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A resource to be managed is represented by a managed
          object, which resides in the MIB. In an SNMP MIB, the managed
          objects are either:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">scalar variables</fo:inline>, which have only one instance
           per context. They have single values, not multiple values like
           vectors or structures.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">tables</fo:inline>, which can grow dynamically.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>a <fo:inline font-weight="bold">table element</fo:inline>, which is a special type of
           scalar variable.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Operations</fo:block>
      <fo:block-container><fo:block start-indent="2em">SNMP relies on the three basic operations: get (object),
       set (object, value) and get-next (object).
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Instrumentation function</fo:block>
      <fo:block-container><fo:block start-indent="2em">An instrumentation function is associated with each
       managed object. This is the function, which actually implements
       the operations and will be called by the agent when it receives
       a request from the management station.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Manager</fo:block>
      <fo:block-container><fo:block start-indent="2em">A manager generates commands and receives notifications 
       from agents. There usually are only a few managers in a system.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Agent</fo:block>
      <fo:block-container><fo:block start-indent="2em">An agent responds to commands from the manager, and sends
       notification to the manager. There are potentially many agents 
       in a system.</fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp570688" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.4 
      About This Manual</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In addition to this introductory chapter, the SNMP User's Guide
      contains the following chapters:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Chapter 2: "Functional Description" describes the features
       and operation of the SNMP development toolkit. It includes
       topics on Sub-agents and MIB loading, Internal MIBs, and Traps.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Chapter 3: "The MIB Compiler" describes the features and the
       operation of the MIB compiler.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Chapter 4: "Running the application" describes how to start and
       configure the application. Topics on how to debug the application 
       are also included.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Chapter 5: "Definition of Agent Configuration Files" is a
       reference chapter, which contains more detailed information about
       the agent configuration files.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Chapter 6: "Definition of Manager Configuration Files" is a
       reference chapter, which contains more detailed information about
       the manager configuration files.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Chapter 7: "Agent Implementation Example" describes how an MIB
       can be implemented with the SNMP Development Toolkit. 
       Implementation examples are included.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Chapter 8: "Instrumentation Functions" describes how
       instrumentation functions should be defined in Erlang for the
       different operations.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Chapter 9: "Definition of Instrumentation Functions" is a
       reference chapter which contains more detailed information
       about the instrumentation functions.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Chapter 10: "Definition of Agent Net if" is a reference chapter,
       which describes the Agent Net if function in detail.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Chapter 11: "Definition of Manager Net if" is a reference chapter,
       which describes the Manager Net if function in detail.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Chapter 12: "Advanced Agent Topics" describes sub-agents, agent
       semantics, audit trail logging, and the consideration of
       distributed tables.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Appendix A describes the conversion of SNMPv2 to SNMPv1
       error messages.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Appendix B contains the RFC1903 text on <fo:inline font-family="monospace">RowStatus</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp260656" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.5 
      Where to Find More Information</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Refer to the following documentation for more information about
      SNMP and about the Erlang/OTP development system:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Marshall T. Rose (1991), "The Simple Book - An
       Introduction to Internet Management", Prentice-Hall
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Evan McGinnis and David Perkins (1997), "Understanding SNMP
       MIBs", Prentice-Hall
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>RFC1155, 1157, 1212 and 1215 (SNMPv1)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>RFC1901-1907 (SNMPv2c)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>RFC1908, 2089 (coexistence between SNMPv1 and SNMPv2)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>RFC2271, RFC2273 (SNMP std MIBs)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the Mnesia User's Guide
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the Erlang 4.4 Extensions User's Guide
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the Reference Manual
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the Erlang Embedded Systems User's Guide
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the System Architecture Support Libraries (SASL) User's
       Guide
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the Installation Guide
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the Asn1 User's Guide
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Concurrent Programming in Erlang, 2nd Edition (1996),
       Prentice-Hall, ISBN 0-13-508301-X.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp621616" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  Agent Functional Description</fo:marker>1.2  Agent Functional Description</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SNMP agent system consists of one Master Agent and
    optional Sub-agents.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The tool makes it easy to dynamically extend an SNMP agent in
    run-time. MIBs can be loaded and unloaded at any time. It is also
    easy to change the implementation of an MIB in run-time, without
    having to recompile the MIB. The MIB implementation is clearly
    separated from the agent.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To facilitate incremental MIB implementation, the tool can
    generate a prototype implementation for a whole MIB, or parts
    thereof. This allows different MIBs and management applications to
    be developed at the same time.
    </fo:block><fo:block id="idp529520" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      Features</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To implement an agent, the programmer writes instrumentation
      functions for the variables and the tables in the MIBs that the
      agent is going to support. A running prototype which handles <fo:inline font-family="monospace">set</fo:inline>,
      <fo:inline font-family="monospace">get</fo:inline>, and <fo:inline font-family="monospace">get-next</fo:inline> can be created without any programming.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The toolkit provides the following:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>multi-lingual multi-threaded extensible SNMP agent</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>easy writing of instrumentation functions with a
       high-level programming language</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>basic fault handling such as automatic type checking</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>access control</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>authentication</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>privacy through encryption</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>loading and unloading of MIBs in run-time</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the ability to change instrumentation functions without
       recompiling the MIB</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>rapid prototyping environment where the MIB compiler can
       use generic instrumentation functions, which later can be
       refined by the programmer</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>a simple and extensible model for transaction handling and
       consistency checking of set-requests</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>support of the sub-agent concept via distributed Erlang</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>a mechanism for sending notifications (traps and informs)</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>support for implementing SNMP tables in the Mnesia DBMS.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp988880" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.2 
      SNMPv1, SNMPv2 and SNMPv3</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SNMP development toolkit works with all three versions of
      Standard Internet Management Framework; SNMPv1, SNMPv2 and SNMPv3.
      They all share the same basic structure and components. And they 
      follow the same architecture.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The versions are defined in following RFCs</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>SNMPv1        RFC 1555, 1157 1212, 1213 and 1215</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>SNMPv2        RFC 1902 - 1907</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>SNMPv3        RFC  2570 - 2575</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Over time, as the Framework has evolved from SNMPv1 , through SNMPv2, 
      to SNMPv3 the definitions of each of these architectural components
      have become richer and more clearly defined, but the fundamental
      architecture has remained consistent.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The main features of SNMPv2 compared to SNMPv1 are:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">get-bulk</fo:inline> operation for transferring large
       amounts of data.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Enhanced error codes.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A more precise language for MIB specification</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The standard documents that define SNMPv2 are incomplete, in
      the sense that they do not specify how an SNMPv2 message looks
      like.  The message format and security issues are left to a
      special Administrative Framework. One such framework is the
      Community-based SNMPv2 Framework (SNMPv2c), which uses the same
      message format and framework as SNMPv1.   Other
      experimental frameworks as exist, e.g. SNMPv2u and SNMPv2*.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SNMPv3 specifications take a modular 
      approach to SNMP.  All modules are
      separated from each other, and can be extended or replaced
      individually.  Examples of modules are Message definition,
      Security and Access Control.  The main features of SNMPv3 are:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Encryption and authentication is added.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MIBs for agent configuration are defined.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All these specifications are commonly referred to as "SNMPv3",
      but it is actually only the Message module, which defines a new
      message format, and Security module, which takes care of
      encryption and authentication, that cannot be used with SNMPv1 or
      SNMPv2c.  In this version of the agent toolkit, all the standard
      MIBs for agent configuration are used.  This includes MIBs for
      definition of management targets for notifications.  These MIBs
      are used regardless of which SNMP version the agent is configured
      to use.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The extensible agent in this toolkit understands the SNMPv1,
      SNMPv2c and SNMPv3. Recall that SNMP consists of two separate
      parts, the MIB definition language (SMI), and the protocol.  On
      the protocol level, the agent can be configured to speak v1, v2c,
      v3 or any combination of them at the same time, i.e. a v1 request
      gets an v1 reply, a v2c request gets a v2c reply, and a v3 request
      gets a v3 reply.  On the MIB level, the MIB compiler can compile
      both SMIv1 and SMIv2 MIBs.  Once compiled, any of the formats can
      be loaded into the agent, regardless of which protocol version the
      agent is configured to use.  This means that the agent translates
      from v2 notifications to v1 traps, and vice versa.  For example,
      v2 MIBs can be loaded into an agent that speaks v1 only.  The
      procedures for the translation between the two protocols are
      described in RFC 1908 and RFC 2089.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order for an implementation to make full use of the enhanced
      SNMPv2 error codes, it is essential that the instrumentation
      functions always return SNMPv2 error codes, in case of error.
      These are translated into the corresponding SNMPv1 error codes by
      the agent, if necessary.</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The translation from an SMIv1 MIB to an SNMPv2c or SNMPv3 reply
        is always very straightforward, but the translation from a v2 MIB
        to a v1 reply is somewhat more complicated.  There is one data
        type in SMIv2, called <fo:inline font-family="monospace">Counter64</fo:inline>, that an SNMPv1 manager cannot
        decode correctly.  Therefore, an agent may never send a <fo:inline font-family="monospace">Counter64</fo:inline>
        object to an SNMPv1 manager.  The common practice in these
        situations is to simple ignore any <fo:inline font-family="monospace">Counter64</fo:inline> objects, when sending
        a reply or a trap to an SNMPv1 manager.  For example, if an SNMPv1
        manager tries to GET an object of type <fo:inline font-family="monospace">Counter64</fo:inline>, he will get a
        <fo:inline font-family="monospace">noSuchName</fo:inline> error, while an SNMPv2 manager would get a
        correct value.</fo:block>
    </fo:block>
  <fo:block id="idp1766096" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.3 
      Operation</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following steps are needed to get a running agent:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write your MIB in SMI in a text file.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write the instrumentation functions in Erlang and compile them.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Put their names in the association file.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Run the MIB together with the association file through the
          MIB compiler.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configure the application (agent).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start the application (agent).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Load the compiled MIB into the agent.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The figures in this section illustrate the steps involved in
      the development of an SNMP agent.</fo:block>
    
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="snmp-um-1-image-1.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.1:
         
        MIB Compiler Principles</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler parses the SMI file and associates each table or
      variable with an instrumentation function (see the figure <fo:inline font-style="italic">MIB Compiler Principles</fo:inline>). The actual
      instrumentation functions are not needed at MIB compile time, only
      their names.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The binary output file produced by the compiler is read by the
      agent at MIB load time (see the figure <fo:inline font-style="italic">Starting the Agent</fo:inline>). The instrumentation is ordinary Erlang code which
      is loaded explicitly or automatically the first time it is called.</fo:block>
    
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="snmp-um-1-image-2.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.2:
         
        Starting the Agent</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SNMP agent system consists of one Master Agent and optional
      sub-agents. The Master Agent can be seen as a special kind of
      sub-agent. It implements the core agent functionality, UDP packet
      processing, type checking, access control, trap distribution, and
      so on. From a user perspective, it is used as an ordinary
      sub-agent.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sub-agents are only needed if your application requires special
      support for distribution from the SNMP toolkit. A sub-agent can
      also be used if the application requires a more complex set
      transaction scheme than is found in the master agent.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following illustration shows how a system can look  in runtime.</fo:block>
    
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="snmp-um-1-image-3.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.3:
         
        Architecture</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A typical operation could include the following steps:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The Manager sends a request to the Agent.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The Master Agent  decodes the incoming UDP packet.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The Master Agent determines which items in the request
       that should be processed here and which items should be
       forwarded to its subagent.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Step 3 is repeated by all subagents.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Each sub-agent calls the instrumentation for its loaded MIBs.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The results of calling the instrumentation are propagated
       back to the Master Agent.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The answer to the request is encoded to a UDP Protocol
       Data Unit (PDU).</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The sequence of steps shown is probably more complex than
      normal, but it illustrates the amount of functionality which is
      available. The following points should be noted:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>An agent can have many MIBs loaded at the same time.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Sub-agents can also have sub-agents. Each sub-agent can have
       an arbitrary number of child sub-agents registered, forming a
       hierarchy.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>One MIB can communicate with many applications.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Instrumentation can use Distributed Erlang to communicate
       with an application.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Most applications only need the Master Agent because an agent
      can have multiple MIBs loaded at the same time.</fo:block>
  <fo:block id="idp1861792" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.4 
      Sub-agents and MIB Loading</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since applications tend to be transient (they are dynamically
      loaded and unloaded), the management of these applications must be
      dynamic as well. For example, if we have an equipment MIB for a
      rack and different MIBs for boards, which can be installed in the
      rack, the MIB for a card should be loaded when the card is
      inserted, and unloaded when the card is removed.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this agent system, there are two ways to dynamically install
      management information. The most common way is to load an MIB into
      an agent. The other way is to use a sub-agent, which is controlled
      by the application and is able to register and unregister itself. A
      sub-agent can register itself for managing a sub-tree (not to be mixed up
      with <fo:inline font-family="monospace">erlang:register</fo:inline>). The sub-tree is identified by an
      Object Identifier. When a sub-agent is registered, it receives all
      requests for this particular sub-tree and it is responsible for
      answering them. It should also be noted that a sub-agent can be
      started and stopped at any time.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compared to other SNMP agent packages, there is a significant
      difference in this way of using sub-agents. Other packages normally
      use sub-agents to load and unload MIBs in run-time. In Erlang, it is
      easy to load code in run-time and it is possible to load an MIB
      into an existing sub-agent. It is not necessary to create a new process
      for handling a new MIB.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sub-agents are used for the following reasons:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>to provide a more complex set-transaction scheme than
       master agent</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>to avoid unnecessary process communication</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>to provide a more lightweight mechanism for loading and
       unloading MIBs in run-time</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>to provide interaction with other SNMP agent toolkits.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Refer to the chapter 
      <fo:inline font-style="italic">Advanced Agent Topics</fo:inline> 
      in this User's Guide for more information about these topics.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The communication protocol between sub-agents is the normal
      message passing which is used in distributed Erlang systems. This
      implies that sub-agent communication is very efficient compared to
      SMUX, DPI, AgentX, and similar protocols.</fo:block>
  <fo:block id="idp2246240" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.5 
      Contexts and Communities</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A context is a collection of management information accessible
      by an SNMP entity. An instance of a management object may exist in
      more than one context. An SNMP entity potentially has access to
      many contexts.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each managed object can exist in many instances within a
      SNMP entity. To identify the instances, specified by an MIB module,
      a method to distinguish the actual instance by its 'scope' or 
      context is used. Often the context is a physical or a logical device. 
      It can include multiple devices, a subset of a single device or a 
      subset of multiple devices, but the context is always
      defined as a subset of a single SNMP entity. To be able to 
      identify a specific 
      item of management information within an SNMP entity, the context,
      the object type and its instance must be used.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, the managed object type <fo:inline font-family="monospace">ifDescr</fo:inline> from RFC1573, is
      defined as the description of a network interface.  To identify
      the description of device-X's first network interface, four pieces
      of information are needed: the snmpEngineID of the SNMP entity
      which provides access to the management information at device-X,
      the <fo:inline font-family="monospace">contextName</fo:inline> (device-X), the managed object type 
      (<fo:inline font-family="monospace">ifDescr</fo:inline>), and the instance ("1").
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In SNMPv1 and SNMPv2c, the community string in the message was
      used for (at least) three different purposes:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">to identify the context</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">to provide authentication</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">to identify a set of trap targets</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In SNMPv3, each of these usage areas has its own unique
      mechanism.  A context is identified by the name of the SNMP
      entity, <fo:inline font-family="monospace">contextEngineID</fo:inline>, and the name of the context,
      <fo:inline font-family="monospace">contextName</fo:inline>.  Each SNMPv3 message contains values for these
      two parameters.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is a MIB, SNMP-COMMUNITY-MIB, which maps a community
      string to a <fo:inline font-family="monospace">contextEngineID</fo:inline> and <fo:inline font-family="monospace">contextName</fo:inline>. Thus, 
      each message, an SNMPv1, SNMPv2c or an SNMPv3 message, always 
      uniquely identifies a context.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For an agent, the <fo:inline font-family="monospace">contextEngineID</fo:inline> identified by a received
      message, is always equal to the <fo:inline font-family="monospace">snmpEngineID</fo:inline> of the agent.
      Otherwise, the message was not intended for the agent.  If the
      agent is configured with more than one context, the
      instrumentation code must be able to figure out for which context
      the request was intended.  There is a function
      <fo:inline font-family="monospace">snmpa:current_context/0</fo:inline> provided for this purpose.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, the agent has no knowledge of any other contexts
      than the default context, <fo:inline font-family="monospace">""</fo:inline>.  If it is to support more
      contexts, these must be explicitly added, by using an appropriate
      configuration file 
      <fo:inline font-style="italic">Agent Configuration Files</fo:inline>.
      </fo:block>
  <fo:block id="idp2192032" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.6 
      Management of the Agent</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is a set of standard MIBs, which are used to control and
      configure an SNMP agent.  All of these MIBs, with the exception of
      the optional SNMP-PROXY-MIB (which is only used for proxy agents),
      are implemented in this agent.  Further, it is configurable which
      of these MIBs are actually loaded, and thus made visible to SNMP
      managers.  For example, in a non-secure environment, it might be a
      good idea to not make MIBs that define access control visible.
      Note, the data the MIBs define is used internally in the
      agent, even if the MIBs not are loaded.  This chapter describes
      these standard MIBs, and some aspects of their implementation.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any SNMP agent must implement the <fo:inline font-family="monospace">system</fo:inline> group and the
      <fo:inline font-family="monospace">snmp</fo:inline> group, defined in MIB-II.  The definitions of these
      groups have changed from SNMPv1 to SNMPv2.   MIBs and implementations
      for both of these versions are Provided in the
      distribution.  The MIB file for SNMPv1 is called STANDARD-MIB, and the
      corresponding for SNMPv2 is called SNMPv2-MIB.  If the agent is
      configured for SNMPv1 only, the STANDARD-MIB is loaded by default;
      otherwise, the SNMPv2-MIB is loaded by default.  It is possible to
      override this default behavior, by explicitly loading another
      version of this MIB, for example, you could choose to implement
      the union of all objects in these two MIBs.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An SNMPv3 agent must implement the SNMP-FRAMEWORK-MIB and
      SNMP-MPD-MIB.  These MIBs are loaded by default, if the agent is
      configured for SNMPv3.  These MIBs can be loaded for other
      versions as well.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are five other standard MIBs, which also may be loaded
      into the agent.  These MIBs are:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">SNMP-TARGET-MIB and SNMP-NOTIFICATION-MIB, which defines
          managed objects for configuration of management targets,
          i.e. receivers of notifications (traps and informs).  These
          MIBs can be used with any SNMP version.
          </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">SNMP-VIEW-BASED-ACM-MIB, which defined managed objects
          for access control.  This MIB can be used with any SNMP
          version.
          </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">SNMP-COMMUNITY-MIB, which defines managed objects for
          coexistence of SNMPv1 and SNMPv2c with SNMPv3.  This MIB is
          only useful if SNMPv1 or SNMPv2c is used, possibly in
          combination with SNMPv3.
          </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">SNMP-USER-BASED-SM-MIB, which defines managed objects
          for authentication and privacy.  This MIB is only useful
          with SNMPv3.
          </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All of these MIBs should be loaded into the Master Agent.  Once
      loaded, these MIBs are always available in all contexts.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ASN.1 code, the Erlang source code, and the generated
      <fo:inline font-family="monospace">.hrl</fo:inline> files for them are provided in the distribution and are 
      placed  in the directories <fo:inline font-family="monospace">mibs</fo:inline>, <fo:inline font-family="monospace">src</fo:inline>, and <fo:inline font-family="monospace">include</fo:inline>,
      respectively, in the <fo:inline font-family="monospace">snmp</fo:inline> application.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">.hrl</fo:inline> files are generated with
      <fo:inline font-family="monospace">snmpc:mib_to_hrl/1</fo:inline>.  Include these files in your code as in
      the following example:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-include_lib("snmp/include/SNMPv2-MIB.hrl").
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The initial values for the managed objects defined in these
      tables, are read at start-up from a set of configuration files.
      These are described in <fo:inline font-style="italic">Configuration Files</fo:inline>.
      </fo:block>

    <fo:block id="idp2288576" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">STANDARD-MIB and SNMPv2-MIB</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These MIBs contain the <fo:inline font-family="monospace">snmp-</fo:inline> and <fo:inline font-family="monospace">system</fo:inline> groups
        from MIB-II which is defined in RFC1213 (STANDARD-MIB) or
        RFC1907 (SNMPv2-MIB).  They are implemented in the
        <fo:inline font-family="monospace">snmp_standard_mib</fo:inline> module. The <fo:inline font-family="monospace">snmp</fo:inline> counters all
        reside in volatile memory and the <fo:inline font-family="monospace">system</fo:inline> and
        <fo:inline font-family="monospace">snmpEnableAuthenTraps</fo:inline> variables in persistent memory,
        using the SNMP built-in database (refer to the Reference Manual,
        section <fo:inline font-family="monospace">snmp</fo:inline>, module <fo:inline font-family="monospace">snmpa_local_db</fo:inline> for more
        details).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If another implementation of any of these variables is needed,
        e.g. to store the persistent variables in a Mnesia database,
        an own implementation of the variables must be made. That MIB 
        will be compiled and loaded instead of the default MIB. 
        The new compiled MIB
        must have the same name as the original MIB (i.e. STANDARD-MIB
        or SNMPv2-MIB), and be located in the SNMP configuration
        directory (see <fo:inline font-style="italic">Configuration Files</fo:inline>.) 
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One of these MIBs is always loaded.  If only SNMPv1 is used,
        STANDARD-MIB is loaded, otherwise SNMPv2-MIB is loaded.
        </fo:block>

      <fo:block id="idp2295760" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Data Types</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are some new data types in SNMPv2 that are useful in
          SNMPv1 as well.  In the STANDARD-MIB, three data types are
          defined, <fo:inline font-family="monospace">RowStatus</fo:inline>, <fo:inline font-family="monospace">TruthValue</fo:inline> and
          <fo:inline font-family="monospace">DateAndTime</fo:inline>.  These data types are originally defined
          as textual conventions in SNMPv2-TC (RFC1903).
          </fo:block>
      
    

    <fo:block id="idp2124528" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">SNMP-FRAMEWORK-MIB and SNMP-MPD-MIB</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SNMP-FRAMEWORK-MIB and SNMP-MPD-MIB define additional 
        read-only managed objects, which
        is used in the generic SNMP framework defined in RFC2271 and the
        generic message processing and dispatching module defined in
        RFC2272.  They are generic in the sense that they are not tied
        to any specific SNMP version.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The objects in these MIBs are implemented in the modules
        <fo:inline font-family="monospace">snmp_framework_mib</fo:inline> and <fo:inline font-family="monospace">snmp_standard_mib</fo:inline>,
        respectively.  All objects reside in volatile memory, and the
        configuration files are always reread at start-up.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If SNMPv3 is used, these MIBs are loaded by default.
        </fo:block>
    

    <fo:block id="idp2128032" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">SNMP-TARGET-MIB and SNMP-NOTIFICATION-MIB</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SNMP-TARGET-MIB and SNMP-NOTIFICATION-MIB define managed 
        objects for configuration of notification receivers.  They 
        are described in detail in RFC2273.  Only a brief description 
        is given here.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All tables in these MIBs have a column of type
        <fo:inline font-family="monospace">StorageType</fo:inline>.  The value of this column specifies how each
        row is stored, and what happens in case of a restart of the
        agent.  The implementation supports the values <fo:inline font-family="monospace">volatile</fo:inline>
        and <fo:inline font-family="monospace">nonVolatile</fo:inline>.  When the tables are initially filled
        with data from the configuration files, these rows will
        automatically have storage type <fo:inline font-family="monospace">nonVolatile</fo:inline>.  Should the
        agent restart, all <fo:inline font-family="monospace">nonVolatile</fo:inline> rows survive the restart,
        while the <fo:inline font-family="monospace">volatile</fo:inline> rows are lost.
        The configuration files are not read at restart, by default.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These MIBs are not loaded by default.
        </fo:block>

      <fo:block id="idp2133552" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">snmpNotifyTable</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An entry in the <fo:inline font-family="monospace">snmpNotifyTable</fo:inline> selects a set
          of management targets, which should receive notifications, 
          as well as the type (trap or inform) of notification that 
          should be sent to each selected management target.
          When an application sends a notification using
          the function <fo:inline font-family="monospace">send_notification/5</fo:inline> or the function
          <fo:inline font-family="monospace">send_trap</fo:inline> the parameter <fo:inline font-family="monospace">NotifyName</fo:inline>, specified in
          the call, is used as an index in the table.  The notification
          is sent to the management targets selected by that entry.
          </fo:block>
      

      <fo:block id="idp2137120" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">snmpTargetAddrTable</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An entry in the <fo:inline font-family="monospace">snmpTargetAddrTable</fo:inline> defines
          transport parameters (such as
          IP address and UDP port) for each management target.  Each row
          in the <fo:inline font-family="monospace">snmpNotifyTable</fo:inline> refers to potentially many rows
          in the <fo:inline font-family="monospace">snmpTargetAddrTable</fo:inline>.  Each row in the
          <fo:inline font-family="monospace">snmpTargetAddrTable</fo:inline>
          refers to an entry in the <fo:inline font-family="monospace">snmpTargetParamsTable</fo:inline>.
          </fo:block>
      

      <fo:block id="idp2140896" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">snmpTargetParamsTable</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An entry in the <fo:inline font-family="monospace">snmpTargetParamsTable</fo:inline> defines 
          which SNMP version to use, and which security parameters to use.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Which SNMP version to use is implicitly defined by
          specifying the Message Processing Model.  This version of the
          agent handles the models <fo:inline font-family="monospace">v1</fo:inline>, <fo:inline font-family="monospace">v2c</fo:inline> and <fo:inline font-family="monospace">v3</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each row specifies which security model to use, along with
          security level and security parameters.
          </fo:block>
      
    

    <fo:block id="idp2145408" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">SNMP-VIEW-BASED-ACM-MIB</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SNMP-VIEW-BASED-ACM-MIB defines managed objects to
        control access to the the managed objects for the managers.  
        The View Based Access Control Module (VACM) can be used with 
        any SNMP version. However, if it is used with SNMPv1 or SNMPv2c, 
        the SNMP-COMMUNITY-MIB defines additional objects to map 
        community strings to VACM parameters.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All tables in this MIB have a column of type <fo:inline font-family="monospace">StorageType</fo:inline>.  
        The value of this column specifies how each
        row is stored, and what happens in case of a restart of the
        agent.  The implementation supports the values <fo:inline font-family="monospace">volatile</fo:inline>
        and <fo:inline font-family="monospace">nonVolatile</fo:inline>.  When the tables are initially filled
        with data from the configuration files, these rows will
        automatically have storage type <fo:inline font-family="monospace">nonVolatile</fo:inline>.  Should the
        agent restart, all <fo:inline font-family="monospace">nonVolatile</fo:inline> rows survive the restart,
        while the <fo:inline font-family="monospace">volatile</fo:inline> rows are lost.
        The configuration files are not read at restart by default.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This MIB is not loaded by default.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">VACM is described in detail in RFC2275.  Here is only a brief
        description given.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The basic concept is that of a <fo:inline font-weight="bold">MIB view</fo:inline>.  An MIB view
        is a subset of all the objects implemented by an agent.  A
        manager has access to a certain MIB view, depending on which
        security parameters are used, in which context the request is
        made, and which type of request is made.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following picture gives an overview of the mechanism to
        select an MIB view:</fo:block>
      <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="MIB_mechanism.gif"/>
        <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.4:
         
        Overview of the mechanism of MIB selection</fo:block>
      </fo:block>

      <fo:block id="idp2154352" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">vacmContextTable</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">vacmContextTable</fo:inline> is a read-only table that lists all
          available contexts.
          </fo:block>
      

      <fo:block id="idp2156112" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">vacmSecurityToGroupTable</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">vacmSecurityToGroupTable</fo:inline> maps a <fo:inline font-family="monospace">securityModel</fo:inline>
          and a
          <fo:inline font-family="monospace">securityName</fo:inline> to a <fo:inline font-family="monospace">groupName</fo:inline>.
          </fo:block>
      

      <fo:block id="idp2159296" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">vacmAccessTable</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">vacmAccessTable</fo:inline> maps the <fo:inline font-family="monospace">groupName</fo:inline> (found in
          <fo:inline font-family="monospace">vacmSecurityToGroupTable</fo:inline>), <fo:inline font-family="monospace">contextName</fo:inline>,
          <fo:inline font-family="monospace">securityModel</fo:inline>, and <fo:inline font-family="monospace">securityLevel</fo:inline> to an MIB view
          for each type of operation (read, write, or notify).  The MIB
          view is represented as a <fo:inline font-family="monospace">viewName</fo:inline>.  The definition of
          the MIB view represented by the <fo:inline font-family="monospace">viewName</fo:inline> is found in
          the <fo:inline font-family="monospace">vacmViewTreeFamilyTable</fo:inline></fo:block>
      

      <fo:block id="idp2164624" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">vacmViewTreeFamilyTable</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">vacmViewTreeFamilyTable</fo:inline> is indexed by the
          <fo:inline font-family="monospace">viewName</fo:inline>, and defines
          which objects are included in the MIB view.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MIB definition for the table looks as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
VacmViewTreeFamilyEntry ::= SEQUENCE
    {
        vacmViewTreeFamilyViewName     SnmpAdminString,
        vacmViewTreeFamilySubtree      OBJECT IDENTIFIER,
        vacmViewTreeFamilyMask         OCTET STRING,
        vacmViewTreeFamilyType         INTEGER,
        vacmViewTreeFamilyStorageType  StorageType,
        vacmViewTreeFamilyStatus       RowStatus
    }

INDEX { vacmViewTreeFamilyViewName,
        vacmViewTreeFamilySubtree
      }
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each <fo:inline font-family="monospace">vacmViewTreeFamilyViewName</fo:inline> refers to a
          collection of sub-trees.
          </fo:block>

        <fo:block id="idp2322848" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">MIB View Semantics</fo:block>
          
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An MIB view is a collection of included and excluded
            sub-trees. A sub-tree is identified by an OBJECT IDENTIFIER. A
            mask is associated with each sub-tree.
            </fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each possible MIB object instance, the instance
            belongs to a sub-tree if:
            </fo:block>
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the OBJECT IDENTIFIER name of that MIB object
             instance comprises at least as many sub-identifiers as
             does the sub-tree, and
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>each sub-identifier in the name of that MIB object
             instance matches the corresponding sub-identifier of the
             sub-tree whenever the corresponding bit of the associated
             mask is 1 (0 is a wild card that matches anything).</fo:block></fo:list-item-body></fo:list-item>
          </fo:list-block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Membership of an object instance in an MIB view is
            determined by the following algorithm:
            </fo:block>
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If an MIB object instance does not belong to any of
             the relevant sub-trees, then the instance is not in the
             MIB view.
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If an MIB object instance belongs to exactly one
             sub-tree, then the instance is included in, or excluded
             from, the relevant MIB view according to the type of
             that entry.
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If an MIB object instance belongs to more than one
             sub-tree, then the sub-tree which comprises the greatest
             number of sub-identifiers, and is the lexicographically
             greatest, is used.
            </fo:block></fo:list-item-body></fo:list-item>
          </fo:list-block>
          <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the OBJECT IDENTIFIER is longer than an OBJECT
              IDENTIFIER of an object type in the MIB, it refers to
              object instances. Because of this, it is possible to
              control whether or not particular rows in a table shall be
              visible.</fo:block>
          </fo:block>
        
      
    

    <fo:block id="idp2330832" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">SNMP-COMMUNITY-MIB</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SNMP-COMMUNITY-MIB defines managed objects that is used 
        for coexistence between SNMPv1 and SNMPv2c with SNMPv3.  
        Specifically, it contains objects for mapping between community 
        strings and version-independent SNMP message parameters.  In 
        addition, this MIB provides a mechanism for performing source address
        validation on incoming requests, and for selecting community
        strings based on target addresses for outgoing notifications.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All tables in this MIB have a column of type
        <fo:inline font-family="monospace">StorageType</fo:inline>.  The value of this column specifies how each
        row is stored, and what happens in case of a restart of the
        agent.  The implementation supports the values <fo:inline font-family="monospace">volatile</fo:inline>
        and <fo:inline font-family="monospace">nonVolatile</fo:inline>.  When the tables are initially filled
        with data from the configuration files, these rows will
        automatically have storage type <fo:inline font-family="monospace">nonVolatile</fo:inline>.  Should the
        agent restart, all <fo:inline font-family="monospace">nonVolatile</fo:inline> rows survive the restart,
        while the <fo:inline font-family="monospace">volatile</fo:inline> rows are lost.
        The configuration files are not read at restart, by default.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This MIB is not loaded by default.
        </fo:block>
    

    <fo:block id="idp2336032" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">SNMP-USER-BASED-SM-MIB</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SNMP-USER-BASED-SM-MIB defines managed objects that is
        used for the User-Based Security Model.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All tables in this MIB have a column of type
        <fo:inline font-family="monospace">StorageType</fo:inline>.  The value of the column specifies how each
        row is stored, and what happens in case of a restart of the
        agent.  The implementation supports the values <fo:inline font-family="monospace">volatile</fo:inline>
        and <fo:inline font-family="monospace">nonVolatile</fo:inline>.  When the tables are initially filled
        with data from the configuration files, these rows will
        automatically have storage type <fo:inline font-family="monospace">nonVolatile</fo:inline>.  Should the
        agent restart, all <fo:inline font-family="monospace">nonVolatile</fo:inline> rows survive the restart,
        while the <fo:inline font-family="monospace">volatile</fo:inline> rows are lost.
        The configuration files are not read at restart, by default.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This MIB is not loaded by default.
        </fo:block>
    

    <fo:block id="idp2341328" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">OTP-SNMPEA-MIB</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The OTP-SNMPEA-MIB was used in earlier versions of the agent, before
        standard MIBs existed for access control, MIB views, and trap
        target specification.  All objects in this MIB are now obsolete.
        </fo:block>
    
  <fo:block id="idp2343040" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.7 
      Notifications</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notifications are defined in SMIv1 with the TRAP-TYPE macro in
      the definition of an MIB (see RFC1215).  The corresponding
      macro in SMIv2 is NOTIFICATION-TYPE.  When an application
      decides to send a notification, it calls one of the following
      functions:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
snmpa:send_notification(Agent, Notification, Receiver
                       [, NotifyName, ContextName, Varbinds])
snmpa:send_trap(Agent, Notification, Community [, Receiver, Varbinds])
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">providing the registered name or process identifier of the
      agent where the MIB, which defines the notification is loaded and
      the symbolic name of the notification.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">send_notification/3,4</fo:inline> function is used, all
      management targets are selected, as defined in RFC2273.  The
      <fo:inline font-family="monospace">Receiver</fo:inline> parameter defines where the agent should send
      information about the delivery of inform requests.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">send_notification/5</fo:inline> function is used, an
      <fo:inline font-family="monospace">NotifyName</fo:inline> must be provided.  This parameter is used as an
      index in the <fo:inline font-family="monospace">snmpNotifyTable</fo:inline>, and the management targets
      defined by that single entry is used.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">send_notification/6</fo:inline> function is the most general
      version of the function.  A <fo:inline font-family="monospace">ContextName</fo:inline> must be specified,
      from which the notification will be sent.  If this parameter is
      not specified, the default context (<fo:inline font-family="monospace">""</fo:inline>) is used.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">send_trap</fo:inline> is kept for backwards
      compatibility and should not be used in new code.  Applications
      that use this function will
      continue to work.  The <fo:inline font-family="monospace">snmpNotifyName</fo:inline> is used as the
      community string by the agent when a notification is sent.
      </fo:block>

    <fo:block id="idp2353504" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Notification Sending</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The simplest way to send a notification is to call the function 
        <fo:inline font-family="monospace">snmpa:send_notification(Agent, Notification, no_receiver)</fo:inline>.
        In this case, the agent performs a get-operation to retrieve the
        object values that are defined in the notification
        specification (with the TRAP-TYPE or NOTIFICATION-TYPE macros).
        The notification is sent to all managers defined in the target
        and notify tables, either unacknowledged as traps, or
        acknowledged as inform requests.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the caller of the function wants to know whether or not
        acknowledgments are received for a certain notification
        (provided it is sent as an inform), the <fo:inline font-family="monospace">Receiver</fo:inline>
        parameter can be specified as <fo:inline font-family="monospace">{Tag, ProcessName}</fo:inline> (refer
        to the Reference Manual, section snmp, module <fo:inline font-family="monospace">snmp</fo:inline> for
        more details).  In this case, the agent send a message
        <fo:inline font-family="monospace">{snmp_notification, Tag, {got_response, ManagerAddr}}</fo:inline> or
        <fo:inline font-family="monospace">{snmp_notification, Tag, {no_response, ManagerAddr}}</fo:inline> for
        each management target.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sometimes it is not possible to retrieve the values for some
        of the objects in the notification specification with a
        get-operation.  However, they are known when the
        <fo:inline font-family="monospace">send_notification</fo:inline> function is called. This is the case if
        an object is an element in a table.  It is possible to give the
        values of some objects to the <fo:inline font-family="monospace">send_notification</fo:inline> function
        <fo:inline font-family="monospace">snmpa:send_notification(Agent, Notification, Receiver, Varbinds)</fo:inline>.  In this function, <fo:inline font-family="monospace">Varbinds</fo:inline> is a list of
        <fo:inline font-family="monospace">Varbind</fo:inline>, where each <fo:inline font-family="monospace">Varbind</fo:inline> is one of:
        </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{Variable, Value}</fo:inline>, where <fo:inline font-family="monospace">Variable</fo:inline> is the
         symbolic name of a scalar variable referred to in the notification
         specification.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{Column, RowIndex, Value}</fo:inline>, where <fo:inline font-family="monospace">Column</fo:inline> is
         the symbolic name of a column variable.  <fo:inline font-family="monospace">RowIndex</fo:inline> is a
         list of indices for the specified element.  If this is the
         case, the OBJECT IDENTIFIER sent in the trap is the
        <fo:inline font-family="monospace">RowIndex</fo:inline> appended to the OBJECT IDENTIFIER for the
         table column. This is the OBJECT IDENTIFIER which specifies
         the element.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{OID, Value}</fo:inline>, where <fo:inline font-family="monospace">OID</fo:inline> is the OBJECT
         IDENTIFIER for an instance of an object, scalar variable or
         column variable.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, to specify that <fo:inline font-family="monospace">sysLocation</fo:inline> should have the
        value <fo:inline font-family="monospace">"upstairs"</fo:inline> in the notification, we could use one of:
        </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{sysLocation, "upstairs"}</fo:inline> or</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{[1,3,6,1,2,1,1,6,0], "upstairs"}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also possible to specify names and values for extra
        variables that should be sent in the notification, but were not
        defined in the notification specification.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The notification is sent to all management targets found in
        the tables.  However, make sure that each manager has access to
        the variables in the notification. If a variable is outside a
        manager's MIB view, this manager will not receive the
        notification.
        </fo:block>
      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By definition, it is not possible to send objects with
          ACCESS <fo:inline font-family="monospace">not-accessible</fo:inline> in notifications. However,
          historically this is often done and for this reason we allow
          it in notification sending. If a variable has ACCESS
          <fo:inline font-family="monospace">not-accessible</fo:inline>, the user must provide a value for the
          variable in the <fo:inline font-family="monospace">Varbinds</fo:inline> list. It is not possible for
          the agent to perform a get-operation to retrieve this value.
          </fo:block>
      </fo:block>
    

    <fo:block id="idp2375424" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Notification Filters</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to add <fo:inline font-weight="bold">notification filters</fo:inline> to an agent.
        These filters will be called when a notification is to be 
        sent. Their purpose is to allow modification, suppression or 
        other type of actions.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A notification filter is a module implementing the 
        <fo:inline font-style="italic">snmpa_notification_filter</fo:inline> behaviour. A filter is added/deleted using the functions:
        <fo:inline font-style="italic">snmpa:register_notification_filter</fo:inline> and 
        <fo:inline font-style="italic">snmpa:unregister_notification_filter</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unless otherwise specified, the order of the registered filters
        will be the order in which they are registered.</fo:block>
    

    <fo:block id="idp2380720" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Sub-agent Path</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a value for an object is not given to the
        <fo:inline font-family="monospace">send_notification</fo:inline> function, the sub-agent will perform a
        get-operation to retrieve it. If the object is not implemented
        in this sub-agent, its parent agent tries to perform a
        get-operation to retrieve it. If the object is not implemented
        in this agent either, it forwards the object to its parent, and
        so on. Eventually the Master Agent is reached and at this point
        all unknown object values must be resolved. If some object is
        unknown even to the Master Agent, this is regarded as an error
        and is reported with a call to <fo:inline font-family="monospace">user_err/2</fo:inline> of the 
        error report module. No notifications are sent in this case.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a given notification, the variables, which are referred to
        in the notification specification, must be implemented by the
        agent that has the MIB loaded, or by some parent to this
        agent. If not, the application must provide values for the
        unknown variables. The application must also provide values for
        all elements in tables.
        </fo:block>
    
  <fo:block id="idp2384592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.8 
      Discovery</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">sender</fo:inline> is <fo:inline font-weight="bold">authoritative</fo:inline> for messages containing
      payload which does <fo:inline font-weight="bold">not</fo:inline> expect a response (for example 
      SNMPv2-Trap, Response or Report PDU). </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">receiver</fo:inline> is <fo:inline font-weight="bold">authoritative</fo:inline> for messages containing
      payload which expects a response (for example 
      Get, GetNext, Get-Bulk, Set or Inform PDU). </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The agent can both perform and respond to discovery.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The agent responds to discovery autonomously, without interaction
      by the user. </fo:block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initiating discovery towards a manager is done by calling the 
      <fo:inline font-style="italic">discovery</fo:inline> function. 
      The <fo:inline font-family="monospace">EngineId</fo:inline> field of the target (manager) entry in the 
      <fo:inline font-style="italic">target_addr.conf</fo:inline> file has to have the value <fo:inline font-family="monospace">discovery</fo:inline>. 
      Note that if the manager does not respond, the <fo:inline font-family="monospace">Timeout</fo:inline> and 
      <fo:inline font-family="monospace">RetryCount</fo:inline> 
      fields decide how long the function will hang before it returns. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Discovery can only be performed towards one manager at a time.</fo:block>
  <fo:block id="idp2398720" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.3  Manager Functional Description</fo:marker>1.3  Manager Functional Description</fo:block><fo:block id="idp2402112" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.1 
      Features</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The manager provided with the tool is a lightweight manager
      that basically provides a means to communicate with agents.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It does not really implement any management capabilities by 
      itself. That is up to the <fo:inline font-weight="bold">user</fo:inline>. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">user</fo:inline> in this context is basically a module implementing
      the <fo:inline font-style="italic">snmpm_user</fo:inline> behaviour. 
      A <fo:inline font-weight="bold">user</fo:inline> can issue snmp requests and receive 
      notification/traps.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Agents to be accessed by the manager needs to be registered by 
      a user. Once registered, they can be accessed by all registered 
      users.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notifications/traps from an agent is delivered to the user that 
      did the registration.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any message from an agent that is not registered is delivered to 
      the <fo:inline font-weight="bold">default user</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, the <fo:inline font-weight="bold">default user</fo:inline> is set to the 
      <fo:inline font-family="monospace">snmpm_user_default</fo:inline> module, which simply sends an info message
      to the error_logger. It is however highly recommended that this
      module be replaced by another that does something useful
      (see <fo:inline font-style="italic">configuration params</fo:inline> for more info).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When using version 3, then (at least one) <fo:inline font-weight="bold">usm user</fo:inline> has to 
      be registered.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Requests can be issued in two different ways. Synchronous (see
      <fo:inline font-style="italic">sync_set</fo:inline>,
      <fo:inline font-style="italic">sync_get</fo:inline>, 
      <fo:inline font-style="italic">sync_get_next</fo:inline> and 
      <fo:inline font-style="italic">sync_get_bulk</fo:inline>)
      and asynchronous (see 
      <fo:inline font-style="italic">async_set</fo:inline>,
      <fo:inline font-style="italic">async_get</fo:inline>, 
      <fo:inline font-style="italic">async_get_next</fo:inline> and  
      <fo:inline font-style="italic">async_get_bulk</fo:inline>). 
      With synchronous 
      the snmp reply is returned by the function. With asynchronous,
      the reply will instead be delivered through a call to one of the
      <fo:inline font-family="monospace">handle_pdu</fo:inline> callback function defined by the 
      <fo:inline font-style="italic">handle_pdu</fo:inline> 
      behaviour.</fo:block>
  <fo:block id="idp2420160" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.2 
      Operation</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following steps are needed to get the manager running:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">[optional] Implement the default user.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Implement the user(s).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configure the application (manager).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start the application (manager).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Register the user(s).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The user(s) register their agents.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2428272" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.3 
      MIB loading</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to load mibs into the manager, but this is not 
      necessary for normal operation, and not recommended.</fo:block>
  <fo:block id="idp2434208" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.4  The MIB Compiler</fo:marker>1.4  The MIB Compiler</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The chapter <fo:inline font-weight="bold">The MIB Compiler</fo:inline> describes the MIB compiler
    and contains the following topics:
    </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Operation</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Import</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Consistency checking between MIBs</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>.hrl file generation</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Emacs integration</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Deviations from the standard
    </fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When importing MIBs, ensure that the imported MIBs as well as the 
      importing MIB are compiled using the same version of the 
      SNMP-compiler.</fo:block>
  </fo:block><fo:block id="idp2442976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.1 
      Operation</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MIB must be written as a text file in SMIv1 or SMIv2 using 
      an ASN.1 notation before
      it will be compiled. This text file must have the same name as the MIB,
      but with the suffix <fo:inline font-family="monospace">.mib</fo:inline>. This is necessary for handling
      the <fo:inline font-family="monospace">IMPORT</fo:inline> statement.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The association file, which contains the names of
      instrumentation functions for the MIB, should have the suffix
      <fo:inline font-family="monospace">.funcs</fo:inline>. If the compiler does not find the association file,
      it gives a warning message and uses default instrumentation
      functions.  (See <fo:inline font-style="italic">Default Instrumentation</fo:inline> for more details).
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MIB compiler is started with a call to
      <fo:inline font-family="monospace">snmpc:compile(&lt;mibname&gt;).</fo:inline> For example:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
snmpc:compile("RFC1213-MIB").
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The output is a new file which is called <fo:inline font-family="monospace">&lt;mibname&gt;.bin</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MIB compiler understands both SMIv1 and SMIv2 MIBs.  It
      uses the MODULE-IDENTITY statement to determinate if the MIB is
      written in SMI version 1 or 2.
      </fo:block>
  <fo:block id="idp2450528" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.2 
      Importing MIBs</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler handles the <fo:inline font-family="monospace">IMPORT</fo:inline> statement. It is important to
      import the compiled file and not the ASN.1 (source) file. A MIB must
      be recompiled to make changes visible to other MIBs importing it.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiled files of the imported MIBs must be present in the
      current directory, or a directory in the current path. The path is
      supplied with the <fo:inline font-family="monospace">{i, Path}</fo:inline> option, for example:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
snmpc:compile("MY-MIB", 
       [{i, ["friend_mibs/", "../standard_mibs/"]}]).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also possible to import MIBs from OTP applications in an
      <fo:inline font-family="monospace">"include_lib"</fo:inline> like fashion with the <fo:inline font-family="monospace">il</fo:inline>
      option. Example:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
snmpc:compile("MY-MIB", 
       [{il, ["snmp/priv/mibs/", "myapp/priv/mibs/"]}]).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">finds the latest version of the <fo:inline font-family="monospace">snmp</fo:inline> and <fo:inline font-family="monospace">myapp</fo:inline>
      applications in the OTP system and uses the expanded paths as
      include paths.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that an SMIv2 MIB can import an SMIv1 MIB and vice versa.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following MIBs are built-ins of the Erlang SNMP compiler:
      SNMPv2-SMI, RFC-1215, RFC-1212, SNMPv2-TC, SNMPv2-CONF, and
      RFC1155-SMI. They cannot therefore be compiled separately.
      </fo:block>
  <fo:block id="idp2459104" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.3 
      MIB Consistency Checking</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When an MIB is compiled, the compiler detects if several
      managed objects use the same <fo:inline font-family="monospace">OBJECT IDENTIFIER</fo:inline>. If that is
      the case, it issues an error message. However, the compiler cannot
      detect Oid conflicts between different MIBs. These kinds of
      conflicts generate an error at load time. To avoid this, the
      following function can be used to do consistency checking between
      MIBs:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

erl&gt;<fo:inline font-weight="bold">snmpc:is_consistent(ListOfMibNames).</fo:inline>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ListOfMibNames</fo:inline> is a list of compiled MIBs, for example
      <fo:inline font-family="monospace">["RFC1213-MIB", "MY-MIB"]</fo:inline>. The function also performs
      consistency checking of trap definitions.</fo:block>
  <fo:block id="idp2463488" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.4 
      .hrl File Generation</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to generate an <fo:inline font-family="monospace">.hrl</fo:inline> file which contains
      definitions of Erlang constants from a compiled MIB file. This
      file can then be included in Erlang source code. The file will
      contain constants for:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>object Identifiers for tables, table entries and variables</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>column numbers</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>enumerated values</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>default values for variables and table columns.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use the following command to  generate a .hrl file from an MIB:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl&gt;<fo:inline font-weight="bold">snmpc:mib_to_hrl(MibName).</fo:inline>
    </fo:block>
  <fo:block id="idp2469472" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.5 
      Emacs Integration</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With the Emacs editor, the <fo:inline font-family="monospace">next-error</fo:inline> (<fo:inline font-family="monospace">C-X `</fo:inline>)
      function can be used indicate where a compilation error occurred,
      provided the error message is described by a line number.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use <fo:inline font-family="monospace">M-x compile</fo:inline> to compile an MIB from inside Emacs, and
      enter:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 <fo:inline font-weight="bold">erl -s snmpc compile &lt;MibName&gt; -noshell</fo:inline>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An example of <fo:inline font-family="monospace">&lt;MibName&gt;</fo:inline> is <fo:inline font-family="monospace">RFC1213-MIB</fo:inline>.
      </fo:block>
  <fo:block id="idp2475056" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.6 
      Compiling from a Shell or a Makefile</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">erlc</fo:inline> commands can be used to compile SNMP MIBs. Example:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 <fo:inline font-weight="bold">erlc MY-MIB.mib</fo:inline>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All the standard <fo:inline font-family="monospace">erlc</fo:inline> flags are supported, e.g.
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 <fo:inline font-weight="bold">erlc -I mymibs -o mymibs -W MY-MIB.mib</fo:inline>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The flags specific to the MIB compiler can be specified by
      using the <fo:inline font-family="monospace">+</fo:inline> syntax:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 <fo:inline font-weight="bold">erlc +'{group_check,false}' MY-MIB.mib</fo:inline>
    </fo:block>
  <fo:block id="idp2481504" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.7 
      Deviations from the Standard</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In some aspects the Erlang MIB compiler does not follow or
      implement the SMI fully. Here are the differences:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tables must be written in the following order:
          <fo:inline font-family="monospace">tableObject</fo:inline>, <fo:inline font-family="monospace">entryObject</fo:inline>, <fo:inline font-family="monospace">column1</fo:inline>, ...,
          <fo:inline font-family="monospace">columnN</fo:inline> (in order).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Integer values, for example in the <fo:inline font-family="monospace">SIZE</fo:inline> expression
          must be entered in decimal syntax, not in hex or bit syntax.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Symbolic names must be unique within a MIB and within a
          system.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Hyphens are allowed in SMIv2 (a pragmatic approach).  The
          reason for this is that according to SMIv2, hyphens are allowed
          for objects converted from SMIv1, but not for others.  This is
          impossible to check for the compiler.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a word is a keyword in any of SMIv1 or SMIv2, it is a
          keyword in the compiler (deviates from SMIv1 only).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indexes in a table must be objects, not types (deviates
          from SMIv1 only).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A subset of all semantic checks on types are
          implemented. For example, strictly the <fo:inline font-family="monospace">TimeTicks</fo:inline> may not
          be sub-classed but the compiler allows this (standard MIBs must
          pass through the compiler) (deviates from SMIv2 only).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">MIB.Object</fo:inline> syntax is not implemented (since all
          objects must be unique anyway).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two different names cannot define the same OBJECT IDENTIFIER.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type checking in the SEQUENCE construct is non-strict 
          (i.e. subtypes may be specified).  The reason for this is 
          that some standard MIBs use this.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A definition has normally a status field. When the status field
       has the value deprecated, then the MIB-compiler will ignore this 
       definition. With the MIB-compiler option <fo:inline font-family="monospace">{deprecated,true}</fo:inline> 
       the MIB-compiler does not ignore the deprecated definitions.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>An object has a DESCRIPTIONS field. The descriptions-field will 
       not be included in the compiled mib by default. In order to get 
       the description, the mib must be compiled with the option 
      <fo:inline font-family="monospace">description</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2502992" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.5  Running the application</fo:marker>1.5  Running the application</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The chapter <fo:inline font-weight="bold">Running the application</fo:inline> describes how the 
    application is configured and started.
    The topics include:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>configuration directories and parameters</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>modifying the configuration files</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>starting the application (agent and/or manager)</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>debugging the application (agent and/or manager)</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Refer also to the chapter(s) 
    <fo:inline font-style="italic">Definition of Agent  Configuration Files</fo:inline> and  
    <fo:inline font-style="italic">Definition of Manager  Configuration Files</fo:inline> which contains more detailed information 
    about the agent and manager configuration files.</fo:block><fo:block id="idp2512560" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.1 
      Configuring the application</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following two directories must exist in the system
      to run the agent:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">the <fo:inline font-weight="bold">configuration directory</fo:inline> stores all
          configuration files used by the agent (refer to the chapter 
          <fo:inline font-style="italic">Definition of Agent Configuration Files</fo:inline> for more information). </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the <fo:inline font-weight="bold">database directory</fo:inline> stores the internal
       database files.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following directory must exist in the system
      to run the manager:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">the <fo:inline font-weight="bold">configuration directory</fo:inline> stores all
          configuration files used by the manager (refer to the chapter 
          <fo:inline font-style="italic">Definition of Manager  Configuration Files</fo:inline> for more information). </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">the <fo:inline font-weight="bold">database directory</fo:inline> stores the internal
           database files. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>


    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The agent and manager uses (application) configuration parameters to 
      find out where these directories are located. The parameters should be
      defined in an Erlang system configuration file. The following
      configuration parameters are defined for the SNMP application:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      agent_options() = [agent_option()]
      agent_option() = {restart_type,     restart_type()}     | 
                       {agent_type,       agent_type()}       |  
                       {agent_verbosity,  verbosity()}        |  
                       {versions,         versions()}         |  
                       {discovery,        agent_discovery()}  |  
                       {gb_max_vbs,       gb_max_vbs()}       |  
                       {priority,         priority()}         |  
                       {multi_threaded,   multi_threaded()}   |  
                       {db_dir,           db_dir()}           |  
                       {db_init_error,    db_init_error()}    |  
                       {local_db,         local_db()}         |  
                       {net_if,           agent_net_if()}     |  
                       {mibs,             mibs()}             |  
                       {mib_storage,      mib_storage()}      |  
                       {mib_server,       mib_server()}       |  
                       {audit_trail_log,  audit_trail_log()}  |  
                       {error_report_mod, error_report_mod()} |  
                       {note_store,       note_store()}       |  
                       {symbolic_store,   symbolic_store()}   |  
                       {target_cache,     target_cache()}     |  
                       {config,           agent_config()}
      manager_options() = [manager_option()]
      manager_option() = {restart_type,             restart_type()}    | 
                         {net_if,                   manager_net_if()}  |  
                         {server,                   server()}          | 
                         {note_store,               note_store()}      | 
                         {config,                   manager_config()}  |  
                         {inform_request_behaviour, manager_irb()}     | 
                         {mibs,                     manager_mibs()}    | 
                         {priority,                 priority()}        |  
                         {audit_trail_log,          audit_trail_log()} | 
                         {versions,                 versions()}        | 
                         {def_user_mod,             def_user_module()  | 
                         {def_user_data,            def_user_data()}
    </fo:block>

    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Agent specific config options and types:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_type() = master | sub &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">master</fo:inline>, one master agent is
          started. Otherwise, no agents are started. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">master</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_discovery() = [agent_discovery_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">agent_discovery_opt() = 
          {terminating, agent_terminating_discovery_opts()} | 
          {originating, agent_originating_discovery_opts()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">terminating</fo:inline> options effects discovery initiated by 
          a manager. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">originating</fo:inline> options effects discovery initiated 
          by this agent. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">agent_discovery_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_terminating_discovery_opts() = [agent_terminating_discovery_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">agent_terminating_discovery_opt() = 
          {enable, boolean()} | 
          {stage2, discovery | plain} | 
          {trigger_username, string()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These are options effecting discovery <fo:inline font-family="monospace">terminating</fo:inline> in this
          agent (i.e. initiated by a manager). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default values for the <fo:inline font-family="monospace">terminating</fo:inline> 
          discovery options are: </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>enable: <fo:inline font-family="monospace">true</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>stage2: <fo:inline font-family="monospace">discovery</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>trigger_username: <fo:inline font-family="monospace">""</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_originating_discovery_opts() = [agent_originating_discovery_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">agent_originating_discovery_opt() = 
          {enable, boolean()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These are options effecting discovery <fo:inline font-family="monospace">originating</fo:inline> in this
          agent. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default values for the <fo:inline font-family="monospace">originating</fo:inline> 
          discovery options are: </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>enable: <fo:inline font-family="monospace">true</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">multi_threaded() = bool() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">true</fo:inline>, the agent is multi-threaded, with one
          thread for each get request. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">db_dir() = string() &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines where the SNMP agent internal db files are stored.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">gb_max_vbs() = pos_integer() | infinity &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines the maximum number of varbinds allowed 
	in a Get-BULK response.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">1000</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">local_db() = [local_db_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">local_db_opt() = {repair, agent_repair()} | {auto_save, agent_auto_save()} |   {verbosity, verbosity()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines options specific for the SNMP agent local database.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">local_db_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_repair() = false | true | force &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When starting snmpa_local_db it always tries to open an
          existing database. If <fo:inline font-family="monospace">false</fo:inline>, and some errors occur, a new
          database is created instead. If <fo:inline font-family="monospace">true</fo:inline>, an existing file
          will be repaired. If <fo:inline font-family="monospace">force</fo:inline>, the table will be repaired
          even if it was properly closed. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_auto_save() = integer() | infinity &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The auto save interval. The table is flushed to disk
          whenever not accessed for this amount of time.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">5000</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_net_if() = [agent_net_if_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">agent_net_if_option() = {module, agent_net_if_module()} | 
            {verbosity, verbosity()} | 
            {options, agent_net_if_options()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines options specific for the SNMP agent network interface 
          entity. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">agent_net_if_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_net_if_module() = atom() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Module which handles the network interface part for the
          SNMP agent. Must implement the 
          <fo:inline font-style="italic">snmpa_network_interface</fo:inline> behaviour.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">snmpa_net_if</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_net_if_options() = [agent_net_if_option()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">agent_net_if_option() = {bind_to, bind_to()} |  
            {sndbuf, sndbuf()} |  
            {recbuf, recbuf()} |  
            {no_reuse, no_reuse()} | 
	    {req_limit, req_limit()} |
            {filter, agent_net_if_filter_options()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These options are actually specific to the used module.
          The ones shown here are applicable to the default 
          <fo:inline font-family="monospace">agent_net_if_module()</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">agent_net_if_option()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">req_limit() = integer() | infinity &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Max number of simultaneous requests handled by the agent.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_net_if_filter_options() = [agent_net_if_filter_option()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">agent_net_if_filter_option() = {module, agent_net_if_filter_module()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These options are actually specific to the used module.
	  The ones shown here are applicable to the default 
	  <fo:inline font-family="monospace">agent_net_if_filter_module()</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">agent_net_if_filter_option()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_net_if_filter_module() = atom() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Module which handles the network interface filter part for the
	  SNMP agent. Must implement the 
	  <fo:inline font-style="italic">snmpa_network_interface_filter
	    </fo:inline> behaviour.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">snmpa_net_if_filter</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_mibs() = [string()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a list of MIBs (including path) that defines which MIBs
          are initially loaded into the SNMP master agent. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the following will always be loaded:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>version v1: <fo:inline font-family="monospace">STANDARD-MIB</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>version v2: <fo:inline font-family="monospace">SNMPv2</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>version v3: <fo:inline font-family="monospace">SNMPv2</fo:inline>, <fo:inline font-family="monospace">SNMP-FRAMEWORK-MIB</fo:inline> 
           and <fo:inline font-family="monospace">SNMP-MPD-MIB</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mib_storage() = [mib_storage_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mib_storage_opt() = {module, mib_storage_module()} |  {options, mib_storage_options()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option specifies how basic mib data is stored. 
	This option is used by two parts of the snmp agent: 
	The mib-server and the symbolic-store. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">[{module, snmpa_mib_storage_ets}]</fo:inline>. </fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mib_storage_module() = snmpa_mib_data_ets | snmpa_mib_data_dets | snmpa_mib_data_mnesia | module()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines the mib storage module of the SNMP agent as defined by the 
	<fo:inline font-style="italic">snmpa_mib_storage</fo:inline> 
	behaviour. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Several entities (<fo:inline font-family="monospace">mib-server</fo:inline> via the its data module and 
	the <fo:inline font-family="monospace">symbolic-store</fo:inline>) of the snmp agent uses this for storage 
	of miscelaneous mib related data dataretrieved while loading a mib. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are several implementations provided with the agent: 
	<fo:inline font-family="monospace">snmpa_mib_storage_ets</fo:inline>, <fo:inline font-family="monospace">snmpa_mib_storage_dets</fo:inline> and 
	<fo:inline font-family="monospace">snmpa_mib_storage_mnesia</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default module is <fo:inline font-family="monospace">snmpa_mib_storage_ets</fo:inline>. </fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mib_storage_options() = list() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is implementattion depended. That is, it depends on the 
	module. For each module a specific set of options are valid. 
	For the module provided with the app, these options are supported: </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">snmpa_mib_storage_ets</fo:inline>: <fo:inline font-family="monospace">{dir, filename()} | {action, keep | clear}, {checksum, boolean()}</fo:inline></fo:block>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">dir</fo:inline> - If present, points to a directory where a file 
		to which all data in the ets table is "synced". </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, when a table is opened this file is read, 
		if it exists. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, this will <fo:inline font-weight="bold">not</fo:inline> be used. </fo:block> 
	      </fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">action</fo:inline> - Specifies the behaviour when a non-empty 
		file is found: Keep its content or clear it out. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">keep</fo:inline>. </fo:block> 
	      </fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">checksum</fo:inline> - Defines if the file is checksummed 
		or not. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>. </fo:block> 
	      </fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
	  </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">snmpa_mib_storage_dets</fo:inline>: <fo:inline font-family="monospace">{dir, filename()} | {action, keep | clear}, {auto_save, default | pos_integer()} | {repair, force | boolean()}</fo:inline></fo:block>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">dir</fo:inline> - This <fo:inline font-weight="bold">mandatory</fo:inline> option points to a 
		directory where to place the file of a dets table. </fo:block>
	      </fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">action</fo:inline> - Specifies the behaviour when a non-empty 
		file is found: Keep its content or clear it out. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">keep</fo:inline>. </fo:block> 
	      </fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">auto_save</fo:inline> - Defines the dets auto-save frequency. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">default</fo:inline>. </fo:block> 
	      </fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">repair</fo:inline> - Defines the dets repair behaviour. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>. </fo:block> 
	      </fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
	  </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">snmpa_mib_storage_mnesia</fo:inline>: <fo:inline font-family="monospace">{action, keep | clear}, {nodes, [node()]}</fo:inline></fo:block>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">action</fo:inline> - Specifies the behaviour when a non-empty, 
		already existing, table: Keep its content or clear it out. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">keep</fo:inline>. </fo:block>
	      </fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">nodes</fo:inline> - A list of node names (or an atom 
		describing a list of nodes) defining where to open the table. 
		Its up to the user to ensure that mnesia is actually running 
		on the specified nodes. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following distinct values are recognised: </fo:block>
		<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[]</fo:inline> - Translated into a list of the own node: <fo:inline font-family="monospace">[node()]</fo:inline></fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">all</fo:inline> - <fo:inline font-family="monospace">erlang:nodes()</fo:inline></fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">visible</fo:inline> - <fo:inline font-family="monospace">erlang:nodes(visible)</fo:inline></fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">connected</fo:inline> - <fo:inline font-family="monospace">erlang:nodes(connected)</fo:inline></fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">db_nodes</fo:inline> - <fo:inline font-family="monospace">mnesia:system_info(db_nodes)</fo:inline></fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
		</fo:list-block>
		
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is the result of the call: <fo:inline font-family="monospace">erlang:nodes()</fo:inline>. </fo:block>
	      </fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
	  </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:block-container>



      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mib_server() = [mib_server_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mib_server_opt() = {mibentry_override, mibentry_override()} |  {trapentry_override, trapentry_override()} |  {verbosity, verbosity()} | {cache, mibs_cache()} | {data_module, mib_server_data_module()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines options specific for the SNMP agent mib server. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">mib_server_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mibentry_override() = bool() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If this value is false, then when loading a mib each mib-
          entry is checked prior to installation of the mib. 
          The purpose of the check is to prevent that the same symbolic 
          mibentry name is used for different oid's.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">trapentry_override() = bool() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If this value is false, then when loading a mib each trap
          is checked prior to installation of the mib. 
          The purpose of the check is to prevent that the same symbolic 
          trap name is used for different trap's.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mib_server_data_module() = snmpa_mib_data_tttn | module() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines the backend data module of the SNMP agent mib-server as 
	defined by the 
	<fo:inline font-style="italic">snmpa_mib_data</fo:inline> 
	behaviour. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At present only the default module is provided with the agent,  
	<fo:inline font-family="monospace">snmpa_mib_data_tttn</fo:inline>. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default module is <fo:inline font-family="monospace">snmpa_mib_data_tttn</fo:inline>. </fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mibs_cache() = bool() | mibs_cache_opts() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shall the agent utilize the mib server lookup cache or not.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">true</fo:inline> (in which case the <fo:inline font-family="monospace">mibs_cache_opts()</fo:inline> 
          default values apply).</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mibs_cache_opts() = [mibs_cache_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mibs_cache_opt() = {autogc, mibs_cache_autogc()} | {gclimit, mibs_cache_gclimit()} | {age, mibs_cache_age()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines options specific for the SNMP agent mib server cache. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">mibs_cache_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mibs_cache_autogc() = bool() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines if the mib server shall perform cache gc automatically or 
	leave it to the user (see 
	<fo:inline font-style="italic">gc_mibs_cache/0,1,2,3</fo:inline>). </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mibs_cache_age() = integer() &gt; 0 &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines how old the entries in the cache will be allowed 
	to become before they are GC'ed (assuming GC is performed). 
	Each entry in the cache is "touched" whenever it is accessed. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The age is defined in milliseconds. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">10 timutes</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mibs_cache_gclimit() = integer() &gt; 0 | infinity &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When performing a GC, this is the max number of cache entries 
	that will be deleted from the cache. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reason for having this limit is that if the cache is 
	large, the GC can potentially take a long time, during which 
	the agent is locked. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">100</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">error_report_mod() = atom() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines an error report module, implementing the 
          <fo:inline font-style="italic">snmpa_error_report</fo:inline> 
          behaviour. Two modules are provided with the toolkit: 
          <fo:inline font-family="monospace">snmpa_error_logger</fo:inline> and <fo:inline font-family="monospace">snmpa_error_io</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">snmpa_error_logger</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">symbolic_store() = [symbolic_store_opt()]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">symbolic_store_opt() = {verbosity, verbosity()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines options specific for the SNMP agent symbolic store. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">symbolic_store_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">target_cache() = [target_cache_opt()]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">target_cache_opt() = {verbosity, verbosity()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines options specific for the SNMP agent target cache. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">target_cache_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_config() = [agent_config_opt()] &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">agent_config_opt() = {dir, agent_config_dir()} |  {force_load, force_load()} | {verbosity, verbosity()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines specific config related options for the SNMP agent. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">agent_config_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_config_dir = dir() &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines where the SNMP agent configuration files are stored.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">force_load() = bool() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">true</fo:inline> the configuration files are re-read
          during start-up, and the contents of the configuration 
          database ignored.  Thus, if <fo:inline font-family="monospace">true</fo:inline>, changes to 
          the configuration database are lost upon reboot of the 
          agent. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>

    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Manager specific config options and types:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">server() = [server_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">server_opt() = {timeout, server_timeout()} |  {verbosity, verbosity()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the options for the manager server process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">silence</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">server_timeout() = integer() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asynchronous request cleanup time. For every requests,
          some info is stored internally, in order to be able to 
          deliver the reply (when it arrives) to the proper destination.
          If the reply arrives, this info will be deleted. But if
          there is no reply (in time), the info has to be deleted
          after the <fo:inline font-weight="bold">best before</fo:inline> time has been passed.
          This cleanup will be performed at regular intervals, defined 
          by the <fo:inline font-family="monospace">server_timeout()</fo:inline> time.
          The information will have a <fo:inline font-weight="bold">best before</fo:inline> time,
          defined by the <fo:inline font-family="monospace">Expire</fo:inline> time given when calling the
          request function (see 
          <fo:inline font-style="italic">async_get</fo:inline>,
          <fo:inline font-style="italic">async_get_next</fo:inline> and 
          <fo:inline font-style="italic">async_set</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Time in milli-seconds.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">30000</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_config() = [manager_config_opt()] &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">manager_config_opt() = {dir, manager_config_dir()} |  {db_dir, manager_db_dir()} |  {db_init_error, db_init_error()} |  {repair, manager_repair()} |  {auto_save, manager_auto_save()} |  {verbosity, verbosity()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines specific config related options for the SNMP manager. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">manager_config_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_config_dir = dir() &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines where the SNMP manager configuration files are stored.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_db_dir = dir() &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines where the SNMP manager store persistent data.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_repair() = false | true | force &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines the repair option for the persistent database (if 
          and how the table is repaired when opened). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_auto_save() = integer() | infinity &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The auto save interval. The table is flushed to disk
          whenever not accessed for this amount of time.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">5000</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_irb() = auto | user | {user, integer()} &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option defines how the manager will handle the sending of 
          response (acknowledgment) to received inform-requests. </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">auto</fo:inline> - The manager will autonomously send response
              (acknowledgment&gt; to inform-request messages.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{user, integer()}</fo:inline> - The manager will send response
              (acknowledgment) to inform-request messages when the 
              <fo:inline font-style="italic">handle_inform</fo:inline> 
              function completes. The integer is the time, in milli-seconds, 
              that the manager will consider the stored inform-request info 
              valid.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">user</fo:inline> - Same as <fo:inline font-family="monospace">{user, integer()}</fo:inline>, except that 
              the default time, 15000 milli-seconds, is used.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">snmpm_network_interface</fo:inline>, 
          <fo:inline font-style="italic">handle_inform</fo:inline> and 
          <fo:inline font-style="italic">definition of the manager net if</fo:inline> for more info.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">auto</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_mibs() = [string()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a list of MIBs (including path) and defines which MIBs
          are initially loaded into the SNMP manager. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_net_if() = [manager_net_if_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">manager_net_if_opt() = {module, manager_net_if_module()} | 
          {verbosity, verbosity()} | 
          {options, manager_net_if_options()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines options specific for the SNMP manager network interface 
          entity. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">manager_net_if_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_net_if_options() = [manager_net_if_option()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">manager_net_if_option() = {bind_to, bind_to()} | 
          {sndbuf, sndbuf()} | 
          {recbuf, recbuf()} | 
          {no_reuse, no_reuse()} |
          {filter, manager_net_if_filter_options()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These options are actually specific to the used module.
	The ones shown here are applicable to the default 
	<fo:inline font-family="monospace">manager_net_if_module()</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">manager_net_if_option()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_net_if_module() = atom() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module which handles the network interface part for the
	SNMP manager. It must implement the 
	<fo:inline font-style="italic">snmpm_network_interface</fo:inline> behaviour. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">snmpm_net_if</fo:inline>. </fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_net_if_filter_options() = [manager_net_if_filter_option()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">manager_net_if_filter_option() = {module, manager_net_if_filter_module()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These options are actually specific to the used module.
	  The ones shown here are applicable to the default 
	  <fo:inline font-family="monospace">manager_net_if_filter_module()</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in 
          <fo:inline font-family="monospace">manager_net_if_filter_option()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_net_if_filter_module() = atom() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Module which handles the network interface filter part for the
	  SNMP manager. Must implement the 
	  <fo:inline font-style="italic">snmpm_network_interface_filter</fo:inline> behaviour.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">snmpm_net_if_filter</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">def_user_module() = atom() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module implementing the default user. See the 
          <fo:inline font-style="italic">snmpm_user</fo:inline> behaviour.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">snmpm_user_default</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">def_user_data() = term() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Data for the default user. Passed to the user when calling 
          the callback functions.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>

    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Common config types:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">restart_type() = permanent | transient | temporary</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">supervisor</fo:inline> 
          documentation for more info.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">permanent</fo:inline> for the agent and <fo:inline font-family="monospace">transient</fo:inline>
          for the manager.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">db_init_error() = terminate | create | create_db_and_dir</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines what to do if the agent is unable to open an
          existing database file. <fo:inline font-family="monospace">terminate</fo:inline> means that the
          agent/manager will terminate, <fo:inline font-family="monospace">create</fo:inline> means that the 
          agent/manager will remove the faulty file(s) and create new ones,
          and <fo:inline font-family="monospace">create_db_and_dir</fo:inline> means that the agent/manager will
          create the database file along with any missing parent directories
          for the database file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">terminate</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">priority() = atom() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines the Erlang priority for all SNMP processes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">normal</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">versions() = [version()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">version() = v1 | v2 | v3</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Which SNMP versions shall be accepted/used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">[v1,v2,v3]</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">verbosity() = silence | info | log | debug | trace &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Verbosity for a SNMP process. This specifies now much debug info
          is printed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">silence</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">bind_to() = bool() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">true</fo:inline>, net_if binds to the IP address.
          If <fo:inline font-family="monospace">false</fo:inline>, net_if listens on any IP address on the host
          where it is running. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">no_reuse() = bool() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">true</fo:inline>, net_if does not specify that the IP
          and port address should be reusable. If <fo:inline font-family="monospace">false</fo:inline>, 
          the address is set to reusable. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">recbuf() = integer() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receive buffer size. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default value is defined by <fo:inline font-family="monospace">gen_udp</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">sndbuf() = integer() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Send buffer size. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default value is defined by <fo:inline font-family="monospace">gen_udp</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">note_store() = [note_store_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">note_store_opt() = {timeout, note_store_timeout()} |  {verbosity, verbosity()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the options for the SNMP note store.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">note_store_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">note_store_timeout() = integer() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note cleanup time. When storing a note in the note store,
          each note is given lifetime. Every <fo:inline font-family="monospace">timeout</fo:inline> the note_store
          process performs a GC to remove the expired note's. Time in
          milli-seconds.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">30000</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">audit_trail_log() [audit_trail_log_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">audit_trail_log_opt() = {type, atl_type()} | {dir, atl_dir()} |  {size, atl_size()} |  {repair, atl_repair()} | {seqno, atl_seqno()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If present, this option specifies the options for the 
          <fo:inline font-weight="bold">audit trail logging</fo:inline>. The <fo:inline font-family="monospace">disk_log</fo:inline> module is used 
          to maintain a wrap log. If present, the <fo:inline font-family="monospace">dir</fo:inline> and 
          <fo:inline font-family="monospace">size</fo:inline> options are mandatory.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If not present, audit trail logging is not used.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">atl_type() = read | write | read_write &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies what type of an audit trail log should be used. 
          The effect of the type is actually different for the the agent
          and the manager. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the agent:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">write</fo:inline> is specified, only set requests are logged.  </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">read</fo:inline> is specified, only get requests are logged.  </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">read_write</fo:inline>, all requests are logged.  </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the manager:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">write</fo:inline> is specified, only sent messages are logged.  </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">read</fo:inline> is specified, only received messages are logged.  </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">read_write</fo:inline>, both outgoing and incoming messages are 
           logged.  </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">read_write</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">atl_dir = dir() &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies where the audit trail log should be stored.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">audit_trail_log</fo:inline> specifies that logging should take
          place, this parameter <fo:inline font-weight="bold">must</fo:inline> be defined.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">atl_size() = {integer(), integer()} &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the size of the audit
          trail log.  This parameter is sent to <fo:inline font-family="monospace">disk_log</fo:inline>.  </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">audit_trail_log</fo:inline> specifies that logging should 
          take place, this parameter <fo:inline font-weight="bold">must</fo:inline> be defined.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">atl_repair() = true | false | truncate | snmp_repair &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies if and how the audit trail log shall be repaired
          when opened. Unless this parameter has the value <fo:inline font-family="monospace">snmp_repair</fo:inline>
          it is sent to <fo:inline font-family="monospace">disk_log</fo:inline>. If, on the other hand, the value is
          <fo:inline font-family="monospace">snmp_repair</fo:inline>, snmp attempts to handle certain faults on its
          own. And even if it cannot repair the file, it does not truncate it 
          directly, but instead <fo:inline font-weight="bold">moves it aside</fo:inline> for later off-line 
          analysis.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">atl_seqno() = true | false &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies if the audit trail log entries will be (sequence)
          numbered or not. The range of the sequence numbers are according
          to RFC 5424, i.e. 1 through 2147483647. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp2846768" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.2 
      Modifying the Configuration Files</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To to start the application (agent and/or manager), the 
      configuration files must be modified and there are two ways 
      of doing this. Either edit the files manually, or run the 
      configuration tool as follows.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If authentication or encryption is used (SNMPv3 only), start
      the <fo:inline font-family="monospace">crypto</fo:inline> application.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; snmp:config().

Simple SNMP configuration tool (version 4.0)
------------------------------------------------
Note: Non-trivial configurations still has to be
      done manually. IP addresses may be entered 
      as dront.ericsson.se (UNIX only) or
      123.12.13.23
------------------------------------------------

Configure an agent (y/n)? [y] 

Agent system config: 
--------------------
1. Agent process priority (low/normal/high) [normal] 
2. What SNMP version(s) should be used (1,2,3,1&amp;2,1&amp;2&amp;3,2&amp;3)? [3] 1&amp;2&amp;3
3. Configuration directory (absolute path)? [/ldisk/snmp] /ldisk/snmp/agent/conf
4. Config verbosity (silence/info/log/debug/trace)? [silence] 
5. Database directory (absolute path)? [/ldisk/snmp] /ldisk/snmp/agent/db
6. Mib storage type (ets/dets/mnesia)? [ets] 
7. Target cache verbosity (silence/info/log/debug/trace)? [silence] 
8. Symbolic store verbosity (silence/info/log/debug/trace)? [silence] 
9. Local DB verbosity (silence/info/log/debug/trace)? [silence] 
10. Local DB repair (true/false/force)? [true] 
11. Local DB auto save (infinity/milli seconds)? [5000] 
12. Error report module? [snmpa_error_logger] 
13. Agent type (master/sub)? [master] 
14. Master-agent verbosity (silence/info/log/debug/trace)? [silence] log
15. Shall the agent re-read the configuration files during startup 
    (and ignore the configuration database) (true/false)? [true] 
16. Multi threaded agent (true/false)? [false] true
17. Check for duplicate mib entries when installing a mib (true/false)? [false] 
18. Check for duplicate trap names when installing a mib (true/false)? [false] 
19. Mib server verbosity (silence/info/log/debug/trace)? [silence] 
20. Mib server cache (true/false)? [true]
21. Note store verbosity (silence/info/log/debug/trace)? [silence] 
22. Note store GC timeout? [30000] 
23. Shall the agent use an audit trail log (y/n)? [n] y
23b. Audit trail log type (write/read_write)? [read_write] 
23c. Where to store the audit trail log? [/ldisk/snmp] /ldisk/snmp/agent/log
23d. Max number of files? [10] 
23e. Max size (in bytes) of each file? [10240] 
23f. Audit trail log repair (true/false/truncate)? [true] 
24. Which network interface module shall be used? [snmpa_net_if] 
25. Network interface verbosity (silence/info/log/debug/trace)? [silence] log
25a. Bind the agent IP address (true/false)? [false] 
25b. Shall the agents IP address and port be not reusable (true/false)? [false] 
25c. Agent request limit (used for flow control) (infinity/pos integer)? [infinity] 32
25d. Receive buffer size of the agent (in bytes) (default/pos integer)? [default] 
25e. Send buffer size of the agent (in bytes) (default/pos integer)? [default]
25f. Do you wish to specify a network interface filter module (or use default) [default] 

Agent snmp config: 
------------------
1. System name (sysName standard variable) [bmk's agent] 
2. Engine ID (snmpEngineID standard variable) [bmk's engine] 
3. Max message size? [484] 
4. The UDP port the agent listens to. (standard 161) [4000] 
5. IP address for the agent (only used as id 
   when sending traps) [127.0.0.1] 
6. IP address for the manager (only this manager 
   will have access to the agent, traps are sent 
   to this one) [127.0.0.1] 
7. To what UDP port at the manager should traps 
   be sent (standard 162)? [5000] 
8. Do you want a none- minimum- or semi-secure configuration? 
   Note that if you chose v1 or v2, you won't get any security for these
   requests (none, minimum, semi_des, semi_aes) [minimum] 
making sure crypto server is started...
8b. Give a password of at least length 8. It is used to generate 
    private keys for the configuration:  kalle-anka
9. Current configuration files will now be overwritten. Ok (y/n)? [y] 

- - - - - - - - - - - - -
Info: 1. SecurityName "initial" has noAuthNoPriv read access
         and authenticated write access to the "restricted"
         subtree.
      2. SecurityName "all-rights" has noAuthNoPriv read/write
         access to the "internet" subtree.
      3. Standard traps are sent to the manager.
      4. Community "public" is mapped to security name "initial".
      5. Community "all-rights" is mapped to security name "all-rights".
The following agent files were written: agent.conf, community.conf,
standard.conf, target_addr.conf, target_params.conf, 
notify.conf, vacm.conf and usm.conf
- - - - - - - - - - - - -

Configure a manager (y/n)? [y] 

Manager system config: 
----------------------
1. Manager process priority (low/normal/high) [normal] 
2. What SNMP version(s) should be used (1,2,3,1&amp;2,1&amp;2&amp;3,2&amp;3)? [3] 1&amp;2&amp;3
3. Configuration directory (absolute path)? [/ldisk/snmp] /ldisk/snmp/manager/conf
4. Config verbosity (silence/info/log/debug/trace)? [silence] log
5. Database directory (absolute path)? [/ldisk/snmp] /ldisk/snmp/manager/db
6. Database repair (true/false/force)? [true] 
7. Database auto save (infinity/milli seconds)? [5000] 
8. Inform request behaviour (auto/user)? [auto] 
9. Server verbosity (silence/info/log/debug/trace)? [silence] log
10. Server GC timeout? [30000] 
11. Note store verbosity (silence/info/log/debug/trace)? [silence] 
12. Note store GC timeout? [30000] 
13. Which network interface module shall be used? [snmpm_net_if] 
14. Network interface verbosity (silence/info/log/debug/trace)? [silence] log
15. Bind the manager IP address (true/false)? [false] 
16. Shall the manager IP address and port be not reusable (true/false)? [false] 
17. Receive buffer size of the manager (in bytes) (default/pos integer)? [default] 
18. Send buffer size of the manager (in bytes) (default/pos integer)? [default] 
19. Shall the manager use an audit trail log (y/n)? [n] y
19b. Where to store the audit trail log? [/ldisk/snmp] /ldisk/snmp/manager/log
19c. Max number of files? [10] 
19d. Max size (in bytes) of each file? [10240] 
19e. Audit trail log repair (true/false/truncate)? [true] 
20. Do you wish to assign a default user [yes] or use
    the default settings [no] (y/n)? [n] 

Manager snmp config: 
--------------------
1. Engine ID (snmpEngineID standard variable) [bmk's engine] 
2. Max message size? [484] 
3. IP address for the manager (only used as id 
   when sending requests) [127.0.0.1] 
4. Port number (standard 162)? [5000] 
5. Configure a user of this manager (y/n)? [y] 
5b. User id? kalle
5c. User callback module? snmpm_user_default
5d. User (callback) data? [undefined] 
5. Configure a user of this manager (y/n)? [y] n
6. Configure an agent handled by this manager (y/n)? [y] 
6b. User id? kalle
6c. Target name? [bmk's agent] 
6d. Version (1/2/3)? [1] 3
6e. Community string ? [public] 
6f. Engine ID (snmpEngineID standard variable) [bmk's engine] 
6g. IP address for the agent [127.0.0.1] 
6h. The UDP port the agent listens to. (standard 161) [4000] 
6i. Retransmission timeout (infinity/pos integer)? [infinity] 
6j. Max message size? [484] 
6k. Security model (any/v1/v2c/usm)? [any] usm
6l. Security name? ["initial"] 
6m. Security level (noAuthNoPriv/authNoPriv/authPriv)? [noAuthNoPriv] authPriv
6. Configure an agent handled by this manager (y/n)? [y] n
7. Configure an usm user handled by this manager (y/n)? [y] 
7a. Engine ID [bmk's engine] 
7b. User name? hobbes
7c. Security name? [hobbes] 
7d. Authentication protocol (no/sha/md5)? [no] sha
7e  Authentication [sha] key (length 0 or 20)? [""] [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16, \
    17,18,19,20]
7d. Priv protocol (no/des/aes)? [no] des
7f  Priv [des] key (length 0 or 16)? [""] 10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
7. Configure an usm user handled by this manager (y/n)? [y] n
8. Current configuration files will now be overwritten. Ok (y/n)? [y] 

- - - - - - - - - - - - -
The following manager files were written: manager.conf, agents.conf , users.conf and usm.conf
- - - - - - - - - - - - -

--------------------
Configuration directory for system file (absolute path)? [/ldisk/snmp] 
ok
    </fo:block>
  <fo:block id="idp2857616" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.3 
      Starting the application</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start Erlang with the command:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl -config /tmp/snmp/sys
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If authentication or encryption is used (SNMPv3 only), start
      the <fo:inline font-family="monospace">crypto</fo:inline> application.  If this step is forgotten, the
      agent will not start, but report a
      <fo:inline font-family="monospace">{config_error,{unsupported_crypto,_}}</fo:inline> error.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">application:start(crypto).</fo:inline>
ok
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">application:start(snmp).</fo:inline>
ok
    </fo:block>
  <fo:block id="idp2863600" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.4 
      Debugging the application</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to debug every (non-supervisor) process of the 
      application (both agent and manager), possibly with the exception 
      of the net_if module(s), which could be supplied by a user of the 
      application). This is done by calling the 
      <fo:inline font-family="monospace">snmpa:verbosity/2</fo:inline> and <fo:inline font-family="monospace">snmpm:verbosity/2</fo:inline> function(s) 
      and/or using 
      <fo:inline font-style="italic">configuration parameters</fo:inline>.
      The verbosity itself has several <fo:inline font-weight="bold">levels</fo:inline>: <fo:inline font-family="monospace">silence | info |  log | debug | trace</fo:inline>. For the lowest verbosity <fo:inline font-family="monospace">silence</fo:inline>, 
      nothing is printed. The higher the verbosity, the more is printed.
      Default value is always <fo:inline font-family="monospace">silence</fo:inline>.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; <fo:inline font-weight="bold">snmpa:verbosity(master_agent, log).</fo:inline>
ok
5&gt; <fo:inline font-weight="bold">snmpa:verbosity(net_if, log).</fo:inline>
ok
6&gt; 
%% Example of output from the agent when a get-next-request arrives:
** SNMP NET-IF LOG: 
   got packet from {147,12,12,12}:5000

** SNMP NET-IF MPD LOG: 
   v1, community: all-rights

** SNMP NET-IF LOG: 
   got pdu from {147,12,12,12}:5000 {pdu, 'get-next-request',
                                          62612569,noError,0,
                                          [{varbind,[1,1],'NULL','NULL',1}]}

** SNMP MASTER-AGENT LOG: 
   apply: snmp_generic,variable_func,[get,{sysDescr,persistent}]

** SNMP MASTER-AGENT LOG: 
   returned: {value,"Erlang SNMP agent"}

** SNMP NET-IF LOG: 
   reply pdu: {pdu,'get-response',62612569,noError,0,
                   [{varbind,[1,3,6,1,2,1,1,1,0],
                             'OCTET STRING',
                             "Erlang SNMP agent",1}]}

** SNMP NET-IF INFO: time in agent: 19711 mysec
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other useful function(s) for debugging the agent are: </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">snmpa:info/0,1</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">info</fo:inline> is used to retrieve a list of miscellaneous agent information.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">snmpa:which_aliasnames/0</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">which_aliasnames</fo:inline> is used to retrieve a list of all alias-names known to the agent. </fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">snmpa:which_tables/0</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">which_tables</fo:inline> is used to retrieve a list of all (MIB) tables known to the agent. </fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">snmpa:which_variables/0</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">which_variables</fo:inline> is used to retrieve a list of all (MIB) variables known to the agent. </fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">snmpa:which_notifications/0</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">which_notifications</fo:inline> is used to retrieve a list of all (MIB) notifications/traps known to the agent. </fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">snmpa:restart_worker/0,1</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">restart_worker</fo:inline> is used to restart the worker process of a multi-threaded agent. </fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">snmpa:restart_set_worker/0,1</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">restart_set_worker</fo:inline> is used to restart the set-worker process of a multi-threaded agent. </fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">snmpa_local_db:print/0,1,2</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, this function can show the counters 
          <fo:inline font-family="monospace">snmpInPkts</fo:inline> and <fo:inline font-family="monospace">snmpOutPkts</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another usefull way to debug the agent is to pretty-print the content of 
    all the tables and/or variables handled directly by the agent. 
    This can be done by simply calling: </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">snmpa:print_mib_info()</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
    <fo:inline font-style="italic">print_mib_info/0</fo:inline>, 
    <fo:inline font-style="italic">print_mib_tables/0</fo:inline>
    or
    <fo:inline font-style="italic">print_mib_variables/0</fo:inline> 
    for more info. </fo:block>
      
  <fo:block id="idp2896816" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.6  Definition of Agent Configuration Files</fo:marker>1.6  Definition of Agent Configuration Files</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All configuration data must be included in configuration files
  that are located in the configuration directory. The name of this
  directory is given in the <fo:inline font-family="monospace">config_dir</fo:inline> configuration
  parameter.  These files are read at start-up, and are used to
  initialize the SNMPv2-MIB or STANDARD-MIB, SNMP-FRAMEWORK-MIB,
  SNMP-MPD-MIB, SNMP-VIEW-BASED-ACM-MIB, SNMP-COMMUNITY-MIB,
  SNMP-USER-BASED-SM-MIB, SNMP-TARGET-MIB and SNMP-NOTIFICATION-MIB
  (refer to the 
  <fo:inline font-style="italic">Management of the Agent</fo:inline> 
  for a description of the MIBs). </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The files are: </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">agent.conf</fo:inline>: see 
        <fo:inline font-style="italic">Agent Information</fo:inline></fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">standard.conf</fo:inline>: see 
        <fo:inline font-style="italic">System Information</fo:inline></fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">context.conf</fo:inline>: see 
        <fo:inline font-style="italic">Contexts</fo:inline></fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">community.conf</fo:inline>: see 
        <fo:inline font-style="italic">Communities</fo:inline></fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">target_addr.conf</fo:inline>: see 
        <fo:inline font-style="italic">Target Address Definitions</fo:inline></fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">target_params.conf</fo:inline>: see 
        <fo:inline font-style="italic">Target Parameters Definitions</fo:inline></fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">vacm.conf</fo:inline>: see 
        <fo:inline font-style="italic">MIB Views for VACM</fo:inline></fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">usm.conf</fo:inline>: see 
        <fo:inline font-style="italic">Security data for USM</fo:inline></fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">notify.conf</fo:inline>: see 
        <fo:inline font-style="italic">Notify Definitions</fo:inline></fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The directory where the configuration files are found is given as
  a parameter to the agent. </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The entry format in all files are Erlang terms, separated by a
  '<fo:inline font-weight="bold">.</fo:inline>' and a <fo:inline font-weight="bold">newline</fo:inline>. In the following sections, the
  formats of these terms are described. Comments may be specified as
  ordinary Erlang comments. </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Syntax errors in these files are discovered and reported with the
  function <fo:inline font-family="monospace">config_err/2</fo:inline> of the error report module at start-up. </fo:block><fo:block id="idp2922752" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.1 
      Agent Information</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The agent information should be stored in a file called
    <fo:inline font-family="monospace">agent.conf</fo:inline>. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each entry is a tuple of size two:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{AgentVariable, Value}.</fo:inline></fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">AgentVariable</fo:inline> is one of the variables is
	SNMP-FRAMEWORK-MIB or one of the internal variables
	<fo:inline font-family="monospace">intAgentUDPPort</fo:inline>, which defines which UDP port the agent
	listens to, or <fo:inline font-family="monospace">intAgentTransports</fo:inline>, which defines the
	transport domains and addresses of the agent. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Value</fo:inline> is the value for the variable.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows an <fo:inline font-family="monospace">agent.conf</fo:inline> file: </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{intAgentUDPPort, 4000}.
{intAgentTransports,
 [{transportDomainUdpIpv4, {141,213,11,24}},
  {transportDomainUdpIpv6, {0,0,0,0,0,0,0,1}}]}.
{snmpEngineID, "mbj's engine"}.
{snmpEngineMaxPacketSize, 484}.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of <fo:inline font-family="monospace">intAgentTransports</fo:inline> is a list of
    <fo:inline font-family="monospace">{Domain, Addr}</fo:inline> tuples, where <fo:inline font-family="monospace">Domain</fo:inline>
    is either <fo:inline font-family="monospace">transportDomainUdpIpv4</fo:inline> or <fo:inline font-family="monospace">transportDomainUdpIpv6</fo:inline>,
    and <fo:inline font-family="monospace">Addr</fo:inline> is the address in the domain.
    <fo:inline font-family="monospace">Addr</fo:inline> can be specified either as an
    <fo:inline font-family="monospace">IpAddr</fo:inline> or as an <fo:inline font-family="monospace">{IpAddr, IpPort}</fo:inline> tuple.
    <fo:inline font-family="monospace">IpAddr</fo:inline> is either a regular Erlang/OTP
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ip_address()</fo:inline></fo:inline>
    or a traditional SNMP integer list and <fo:inline font-family="monospace">IpPort</fo:inline> is an integer.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the <fo:inline font-family="monospace">Addr</fo:inline> value does not contain a port number,
    the value of <fo:inline font-family="monospace">intAgentUDPPort</fo:inline> is used.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The legacy and intermediate variables <fo:inline font-family="monospace">intAgentIpAddress</fo:inline>
    and <fo:inline font-family="monospace">intAgentTransportDomain</fo:inline> are still supported so old
    <fo:inline font-family="monospace">agent.conf</fo:inline> files will work.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of <fo:inline font-family="monospace">snmpEngineID</fo:inline> is a string, which for a 
    deployed agent should have a very specific structure. See
    RFC 2271/2571 for details.</fo:block>

    
  <fo:block id="idp2942432" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.2 
      Contexts</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The context information should be stored in a file called
    <fo:inline font-family="monospace">context.conf</fo:inline>.  The default context <fo:inline font-family="monospace">""</fo:inline>
    need not be present.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each row defines a context in the agent.  This information is
    used in the table <fo:inline font-family="monospace">vacmContextTable</fo:inline> in the
    SNMP-VIEW-BASED-ACM-MIB.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each entry is a term:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ContextName.</fo:inline></fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ContextName</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    
  <fo:block id="idp2949200" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.3 
      System Information</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The system information should be stored in a file called
    <fo:inline font-family="monospace">standard.conf</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each entry is a tuple of size two:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{SystemVariable, Value}.</fo:inline></fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SystemVariable</fo:inline> is one of the variables in the
	system group, or <fo:inline font-family="monospace">snmpEnableAuthenTraps</fo:inline>. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Value</fo:inline> is the value for the variable. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows a valid <fo:inline font-family="monospace">standard.conf</fo:inline> file: </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{sysDescr, "Erlang SNMP agent"}.
{sysObjectID, [1,2,3]}.
{sysContact, "(mbj,eklas)@erlang.ericsson.se"}.
{sysName, "test"}.
{sysServices, 72}.
{snmpEnableAuthenTraps, enabled}.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A value must be provided for all variables, which lack default
    values in the MIB. </fo:block>

    
  <fo:block id="idp2958272" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.4 
      Communities</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The community information should be stored in a file called
    <fo:inline font-family="monospace">community.conf</fo:inline>. It must be present if the agent is
    configured for SNMPv1 or SNMPv2c. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An SNMP <fo:inline font-weight="bold">community</fo:inline> is a relationship between an SNMP
    agent and a set of SNMP managers that defines authentication, access 
    control and proxy characteristics. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The corresponding table is <fo:inline font-family="monospace">snmpCommunityTable</fo:inline> in the
    SNMP-COMMUNITY-MIB. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each entry is a term: </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{CommunityIndex, CommunityName, SecurityName, ContextName, TransportTag}.</fo:inline> </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CommunityIndex</fo:inline> is a non-empty string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CommunityName</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SecurityName</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ContextName</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">TransportTag</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    
  <fo:block id="idp2970576" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.5 
      MIB Views for VACM</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The information about MIB Views for VACM should be stored in a 
    file called <fo:inline font-family="monospace">vacm.conf</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The corresponding tables are <fo:inline font-family="monospace">vacmSecurityToGroupTable</fo:inline>,
    <fo:inline font-family="monospace">vacmAccessTable</fo:inline> and <fo:inline font-family="monospace">vacmViewTreeFamilyTable</fo:inline> in the
    SNMP-VIEW-BASED-ACM-MIB.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each entry is one of the terms, one entry corresponds to one
    row in one of the tables.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{vacmSecurityToGroup, SecModel, SecName, GroupName}.</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{vacmAccess, GroupName, Prefix, SecModel, SecLevel, Match, ReadView, WriteView, NotifyView}.</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{vacmViewTreeFamily, ViewIndex, ViewSubtree, ViewStatus, ViewMask}.</fo:inline></fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SecModel</fo:inline> is <fo:inline font-family="monospace">any</fo:inline>, <fo:inline font-family="monospace">v1</fo:inline>, <fo:inline font-family="monospace">v2c</fo:inline>, or
	<fo:inline font-family="monospace">usm</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SecName</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GroupName</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Prefix</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SecLevel</fo:inline> is <fo:inline font-family="monospace">noAuthNoPriv</fo:inline>, <fo:inline font-family="monospace">authNoPriv</fo:inline>,
	or <fo:inline font-family="monospace">authPriv</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Match</fo:inline> is <fo:inline font-family="monospace">prefix</fo:inline> or <fo:inline font-family="monospace">exact</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ReadView</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">WriteView</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NotifyView</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ViewIndex</fo:inline> is an integer.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ViewSubtree</fo:inline> is a list of integer.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ViewStatus</fo:inline> is either <fo:inline font-family="monospace">included</fo:inline> or <fo:inline font-family="monospace">excluded</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ViewMask</fo:inline> is either <fo:inline font-family="monospace">null</fo:inline> or a list of ones and
	zeros. Ones nominate that an exact match is used for this
	sub-identifier. Zeros are wild-cards which match any
	sub-identifier. If the mask is shorter than the sub-tree, the
	tail is regarded as all ones. <fo:inline font-family="monospace">null</fo:inline> is shorthand for a
	mask with all ones. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    
  <fo:block id="idp2999104" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.6 
      Security data for USM</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The information about Security data for USM should be stored in a 
    file called <fo:inline font-family="monospace">usm.conf</fo:inline>, which must be present if the agent is 
    configured for SNMPv3. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The corresponding table is <fo:inline font-family="monospace">usmUserTable</fo:inline> in the
    SNMP-USER-BASED-SM-MIB.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each entry is a term:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{EngineID, UserName, SecName, Clone, AuthP, AuthKeyC, OwnAuthKeyC, PrivP, PrivKeyC, OwnPrivKeyC, Public, AuthKey, PrivKey}.</fo:inline></fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">EngineID</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">UserName</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SecName</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Clone</fo:inline> is <fo:inline font-family="monospace">zeroDotZero</fo:inline> or a list of integers.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">AuthP</fo:inline> is a <fo:inline font-family="monospace">usmNoAuthProtocol</fo:inline>,
	<fo:inline font-family="monospace">usmHMACMD5AuthProtocol</fo:inline>, or <fo:inline font-family="monospace">usmHMACSHAAuthProtocol</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">AuthKeyC</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OwnAuthKeyC</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">PrivP</fo:inline> is a <fo:inline font-family="monospace">usmNoPrivProtocol</fo:inline>, 
	<fo:inline font-family="monospace">usmDESPrivProtocol</fo:inline> or <fo:inline font-family="monospace">usmAesCfb128Protocol</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">PrivKeyC</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OwnPrivKeyC</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Public</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">AuthKey</fo:inline> is a list (of integer). This is the User's secret
	localized authentication key. It is not visible in the MIB. The length
	of this key needs to be 16 if <fo:inline font-family="monospace">usmHMACMD5AuthProtocol</fo:inline> is used, 
	and 20 if <fo:inline font-family="monospace">usmHMACSHAAuthProtocol</fo:inline> is used.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">PrivKey</fo:inline> is a list (of integer).  This is the User's secret
	localized encryption key.  It is not visible in the MIB.  The length
	of this key needs to be 16 if <fo:inline font-family="monospace">usmDESPrivProtocol</fo:inline> or 
	<fo:inline font-family="monospace">usmAesCfb128Protocol</fo:inline> is used. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    
  <fo:block id="idp3024960" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.7 
      Notify Definitions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The information about Notify Definitions should be stored in a
    file called <fo:inline font-family="monospace">notify.conf</fo:inline>. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The corresponding table is <fo:inline font-family="monospace">snmpNotifyTable</fo:inline> in the
    SNMP-NOTIFICATION-MIB.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each entry is a term:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{NotifyName, Tag, Type}.</fo:inline></fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NotifyName</fo:inline> is a unique non-empty string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Tag</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Type</fo:inline> is <fo:inline font-family="monospace">trap</fo:inline> or <fo:inline font-family="monospace">inform</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    
  <fo:block id="idp3034528" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.8 
      Target Address Definitions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The information about Target Address Definitions should be 
    stored in a file called <fo:inline font-family="monospace">target_addr.conf</fo:inline>. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The corresponding tables are <fo:inline font-family="monospace">snmpTargetAddrTable</fo:inline> in the
    SNMP-TARGET-MIB and <fo:inline font-family="monospace">snmpTargetAddrExtTable</fo:inline> in the 
    SNMP-COMMUNITY-MIB. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each entry is a term: </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{TargetName, Domain, Addr, Timeout, RetryCount, TagList, ParamsName, EngineId}.</fo:inline>
    <fo:block/> or <fo:block/>
    <fo:inline font-family="monospace">{TargetName, Domain, Addr, Timeout, RetryCount, TagList, ParamsName, EngineId, TMask, MaxMessageSize}.</fo:inline> </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">TargetName</fo:inline> is a unique non-empty string. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Domain</fo:inline> is one of the atoms: 
	<fo:inline font-family="monospace">transportDomainUdpIpv4</fo:inline> | <fo:inline font-family="monospace">transportDomainUdpIpv6</fo:inline>. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Addr</fo:inline> is either an <fo:inline font-family="monospace">IpAddr</fo:inline> or
	an <fo:inline font-family="monospace">{IpAddr, IpPort}</fo:inline> tuple. <fo:inline font-family="monospace">IpAddr</fo:inline> is either
	a regular Erlang/OTP
	<fo:inline font-style="italic"><fo:inline font-family="monospace">ip_address()</fo:inline></fo:inline>
	or a traditional SNMP integer list, and <fo:inline font-family="monospace">IpPort</fo:inline> is an integer.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">IpPort</fo:inline> is omitted <fo:inline font-family="monospace">162</fo:inline> is used.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Timeout</fo:inline> is an integer. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RetryCount</fo:inline> is an integer. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">TagList</fo:inline> is a string. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ParamsName</fo:inline> is a string. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">EngineId</fo:inline> is a string or the atom <fo:inline font-family="monospace">discovery</fo:inline>. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">TMask</fo:inline> is specified just as <fo:inline font-family="monospace">Addr</fo:inline> or as <fo:inline font-family="monospace">[]</fo:inline>.
	Note in particular that using a list of 6 bytes	for IPv4
	or 8 words plus 2 bytes for IPv6 are still valid address formats
	so old configurations will work.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">MaxMessageSize</fo:inline> is an integer (default: 2048). </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The old tuple formats with <fo:inline font-family="monospace">Ip</fo:inline> address and <fo:inline font-family="monospace">Udp</fo:inline>
    port number found in old configurations still work.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that if <fo:inline font-family="monospace">EngineId</fo:inline> has the value <fo:inline font-family="monospace">discovery</fo:inline>, 
    the agent cannot send
    <fo:inline font-family="monospace">inform</fo:inline> messages to that manager until it has performed the
    <fo:inline font-weight="bold">discovery</fo:inline> process with that manager. </fo:block>
    
    
  <fo:block id="idp3063504" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.9 
      Target Parameters Definitions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The information about Target Parameters Definitions should be
    stored in a file called <fo:inline font-family="monospace">target_params.conf</fo:inline>. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The corresponding table is <fo:inline font-family="monospace">snmpTargetParamsTable</fo:inline> in the
    SNMP-TARGET-MIB. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each entry is a term: </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{ParamsName, MPModel, SecurityModel, SecurityName, SecurityLevel}.</fo:inline></fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ParamsName</fo:inline> is a unique non-empty string. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">MPModel</fo:inline> is <fo:inline font-family="monospace">v1</fo:inline>, <fo:inline font-family="monospace">v2c</fo:inline> or <fo:inline font-family="monospace">v3</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SecurityModel</fo:inline> is <fo:inline font-family="monospace">v1</fo:inline>, <fo:inline font-family="monospace">v2c</fo:inline>, or <fo:inline font-family="monospace">usm</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SecurityName</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SecurityLevel</fo:inline> is <fo:inline font-family="monospace">noAuthNoPriv</fo:inline>, <fo:inline font-family="monospace">authNoPriv</fo:inline>
	or <fo:inline font-family="monospace">authPriv</fo:inline>. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp3081856" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.7  Definition of Manager Configuration Files</fo:marker>1.7  Definition of Manager Configuration Files</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configuration data may be included in configuration files
    that is located in the configuration directory. The name of this
    directory is given in the <fo:inline font-family="monospace">config_dir</fo:inline> configuration
    parameter. These files are read at start-up.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The directory where the configuration files are found is given as
    a parameter to the manager.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The entry format in all files are Erlang terms, separated by a
    '<fo:inline font-weight="bold">.</fo:inline>' and a <fo:inline font-weight="bold">newline</fo:inline>. In the following sections, the
    formats of these terms are described. Comments may be specified as
    ordinary Erlang comments.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If syntax errors are discovered in these files they are reported with the
    function <fo:inline font-family="monospace">config_err/2</fo:inline> of the 
    <fo:inline font-style="italic">error report module</fo:inline>  
    at start-up.
    </fo:block><fo:block id="idp3091216" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.1 
      Manager Information</fo:block>
    
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The manager information should be stored in a file called
      <fo:inline font-family="monospace">manager.conf</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each entry is a tuple of size two:
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{Variable, Value}.</fo:inline></fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Variable</fo:inline> is one of the following:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">transports</fo:inline> - which defines the transport domains
	    and their addresses for the manager. <fo:inline font-weight="bold">Mandatory</fo:inline>
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Value</fo:inline> is a list of <fo:inline font-family="monospace">{Domain, Addr}</fo:inline> tuples
	    or <fo:inline font-family="monospace">Domain</fo:inline> atoms.
	    </fo:block>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Domain</fo:inline> is one of <fo:inline font-family="monospace">transportDomainUdpIpv4</fo:inline>
		or <fo:inline font-family="monospace">transportDomainUdpIpv6</fo:inline>.</fo:block>
	      </fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Addr</fo:inline> is for the currently supported domains
		either an <fo:inline font-family="monospace">IpAddr</fo:inline> or an <fo:inline font-family="monospace">{IpAddr, IpPort}</fo:inline>
		tuple.<fo:inline font-family="monospace">IpAddr</fo:inline> is either a regular Erlang/OTP
		<fo:inline font-style="italic">
		<fo:inline font-family="monospace">ip_address()</fo:inline></fo:inline> or a traditional SNMP integer list
		and <fo:inline font-family="monospace">IpPort</fo:inline> is an integer.
		</fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Addr</fo:inline> does not contain a port number,
		the value of <fo:inline font-family="monospace">port</fo:inline> is used.
		</fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a <fo:inline font-family="monospace">Addr</fo:inline> is not specified i.e by
		using only a <fo:inline font-family="monospace">Domain</fo:inline> atom, the host's name
		is resolved to find the IP address, and the value of
		<fo:inline font-family="monospace">port</fo:inline> is used.
		</fo:block>
	      </fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
	  </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">port</fo:inline> - which defines which UDP port the manager uses
              for communicating with agents.
	    <fo:inline font-weight="bold">Mandatory</fo:inline> if <fo:inline font-family="monospace">transports</fo:inline> does not define
	    a port number for every transport.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">engine_id</fo:inline> - The <fo:inline font-family="monospace">SnmpEngineID</fo:inline> as defined in 
              SNMP-FRAMEWORK-MIB. <fo:inline font-weight="bold">Mandatory</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">max_message_size</fo:inline> - The <fo:inline font-family="monospace">snmpEngineMaxMessageSize</fo:inline> as
              defined in SNMP-FRAMEWORK-MIB. <fo:inline font-weight="bold">Mandatory</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Value</fo:inline> is the value for the variable.
          </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The legacy and intermediate variables <fo:inline font-family="monospace">address</fo:inline> and <fo:inline font-family="monospace">domain</fo:inline>
    are still supported so old configurations will work.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows a <fo:inline font-family="monospace">manager.conf</fo:inline> file: 
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{transports,       [{transportDomainUdpIpv4, {{141,213,11,24}, 5000}},
                    {transportDomainUdpIpv6, {{0,0,0,0,0,0,0,1}, 5000}}]}.
{engine_id,        "mgrEngine"}.
{max_message_size, 484}.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of <fo:inline font-family="monospace">engine_id</fo:inline> is a string, which should have a 
      very specific structure. See RFC 2271/2571 for details.
      </fo:block>
  <fo:block id="idp3122384" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.2 
      Users</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each <fo:inline font-weight="bold">manager user</fo:inline>, the manager needs some information.
      This information is either added in the <fo:inline font-family="monospace">users.conf</fo:inline> config 
      file or by calling the 
      <fo:inline font-style="italic">register_user</fo:inline> 
      function in run-time.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each row defines a <fo:inline font-weight="bold">manager user</fo:inline> of the manager. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each entry is a tuple of size four:
      </fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{UserId, UserMod, UserData, DefaultAgentConfig}.</fo:inline></fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">UserId</fo:inline> is any term (used to uniquely identify the user).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">UserMod</fo:inline> is the user callback module (atom).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">UserData</fo:inline> is any term (passed on to the user when calling the
          <fo:inline font-family="monospace">UserMod</fo:inline>.
          </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">DefaultAgentConfig</fo:inline> is a list of default agent config's. 
          These values are used as default values when this user registers 
          agents.
          </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp3134496" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.3 
      Agents</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The information needed to handle agents should be stored in a 
      file called <fo:inline font-family="monospace">agents.conf</fo:inline>. It is also possible to add agents
      in run-time by calling the 
      <fo:inline font-style="italic">register_agent</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each entry is a tuple:
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{UserId,  TargetName, Comm, Domain, Addr, EngineID, Timeout,  MaxMessageSize, Version, SecModel, SecName, SecLevel}.</fo:inline></fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">UserId</fo:inline> is the identity of the <fo:inline font-weight="bold">manager user</fo:inline>
          responsible for this agent (term).
          </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">TargetName</fo:inline> is a <fo:inline font-weight="bold">unique</fo:inline> <fo:inline font-weight="bold">non-empty</fo:inline> string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Comm</fo:inline> is the community string (string).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Domain</fo:inline> is the transport domain, either
	<fo:inline font-family="monospace">transportDomainUdpIpv4</fo:inline> or <fo:inline font-family="monospace">transportDomainUdpIpv6</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Addr</fo:inline> is the address in the transport domain,
	either an <fo:inline font-family="monospace">{IpAddr, IpPort}</fo:inline> tuple or a traditional SNMP
	integer list containing port number. <fo:inline font-family="monospace">IpAddr</fo:inline> is either
	a regular Erlang/OTP
	<fo:inline font-style="italic"><fo:inline font-family="monospace">ip_address()</fo:inline></fo:inline>
	or a traditional SNMP integer list not containing port number,
	and <fo:inline font-family="monospace">IpPort</fo:inline> is an integer.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">EngineID</fo:inline> is the engine-id of the agent (string).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Timeout</fo:inline> is re-transmission timeout 
          (<fo:inline font-family="monospace">infinity</fo:inline> | integer).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">MaxMessageSize</fo:inline> is the max message size for outgoing messages 
          to this agent (integer).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Version</fo:inline> is the version (v1 | v2 | v3).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SecModel</fo:inline> is the security model (any | v1 | v2c | usm).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SecName</fo:inline> is the security name (string).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SecLevel</fo:inline> is security level (noAuthNoPriv | authNoPriv | 
          authPriv).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Legacy configurations using tuples without <fo:inline font-family="monospace">Domain</fo:inline> element,
    as well as with all <fo:inline font-family="monospace">TDomain</fo:inline>, <fo:inline font-family="monospace">Ip</fo:inline> and <fo:inline font-family="monospace">Port</fo:inline> elements
    still work.</fo:block>
  <fo:block id="idp3162000" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.4 
      Security data for USM</fo:block>
    
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The information about Security data for USM should be stored in a 
      file called <fo:inline font-family="monospace">usm.conf</fo:inline>, which must be present if the manager
      wishes to use SNMPv3 when communicating with agents. It is also 
      possible to add usm data in run-time by calling the 
      <fo:inline font-style="italic">register_usm_user</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The corresponding table is <fo:inline font-family="monospace">usmUserTable</fo:inline> in the
      SNMP-USER-BASED-SM-MIB.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each entry is a term:
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{EngineID, UserName, AuthP, AuthKey, PrivP, PrivKey}.</fo:inline>      <fo:block/>
<fo:inline font-family="monospace">{EngineID, UserName, SecName, AuthP, AuthKey, PrivP, PrivKey}.</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first case is when we have the identity-function 
      (<fo:inline font-family="monospace">SecName</fo:inline> = <fo:inline font-family="monospace">UserName</fo:inline>).
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">EngineID</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">UserName</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SecName</fo:inline> is a string.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">AuthP</fo:inline> is a <fo:inline font-family="monospace">usmNoAuthProtocol</fo:inline>,
          <fo:inline font-family="monospace">usmHMACMD5AuthProtocol</fo:inline> or <fo:inline font-family="monospace">usmHMACSHAAuthProtocol</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">AuthKey</fo:inline> is a list (of integer). This is the User's 
          secret localized authentication key. It is not visible in the MIB. 
          The length of this key needs to be 16 if 
          <fo:inline font-family="monospace">usmHMACMD5AuthProtocol</fo:inline> is used and 20 if 
          <fo:inline font-family="monospace">usmHMACSHAAuthProtocol</fo:inline> is used.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">PrivP</fo:inline> is a <fo:inline font-family="monospace">usmNoPrivProtocol</fo:inline>, 
          <fo:inline font-family="monospace">usmDESPrivProtocol</fo:inline> or <fo:inline font-family="monospace">usmAesCfb128Protocol</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">PrivKey</fo:inline> is a list (of integer). This is the User's secret
          localized encryption key.  It is not visible in the MIB. The length
          of this key needs to be 16 if <fo:inline font-family="monospace">usmDESPrivProtocol</fo:inline> 
          or <fo:inline font-family="monospace">usmAesCfb128Protocol</fo:inline> is used.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp3186704" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.8  Agent Implementation Example</fo:marker>1.8  Agent Implementation Example</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This <fo:inline font-weight="bold">Implementation Example</fo:inline> section describes how an
    MIB can be implemented with the SNMP Development Toolkit. </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The example shown can be found in the toolkit distribution. </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The agent is configured with the configuration tool, using
    default suggestions for everything but the manager node. </fo:block><fo:block id="idp3192128" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.1 
      MIB</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MIB used in this example is called EX1-MIB. It contains two
      objects, a variable with a name and a table with friends.
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
EX1-MIB DEFINITIONS ::= BEGIN
 
          IMPORTS
                  RowStatus      FROM STANDARD-MIB
                  DisplayString  FROM RFC1213-MIB
                  OBJECT-TYPE    FROM RFC-1212
                  ;
 
          example1       OBJECT IDENTIFIER ::= { experimental 7 }
 
          myName OBJECT-TYPE
              SYNTAX  DisplayString (SIZE (0..255))
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "My own name"
              ::= { example1 1 }
 
          friendsTable OBJECT-TYPE
              SYNTAX  SEQUENCE OF FriendsEntry
              ACCESS  not-accessible
              STATUS  mandatory
              DESCRIPTION
                      "A list of friends."
              ::= { example1 4 }
 
          friendsEntry OBJECT-TYPE
              SYNTAX  FriendsEntry
              ACCESS  not-accessible
              STATUS  mandatory
              DESCRIPTION
                      ""
              INDEX   { fIndex }
              ::= { friendsTable 1 }
 
          FriendsEntry ::=
              SEQUENCE {
            fIndex
                      INTEGER,
                   fName
                      DisplayString,
                   fAddress
                      DisplayString,
                   fStatus
                      RowStatus              }
 
          fIndex OBJECT-TYPE
              SYNTAX  INTEGER
              ACCESS  not-accessible
              STATUS  mandatory
               DESCRIPTION
                      "number of friend"
              ::= { friendsEntry 1 }
 
          fName OBJECT-TYPE
              SYNTAX  DisplayString (SIZE (0..255))
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "Name of friend"
              ::= { friendsEntry 2 }
          fAddress OBJECT-TYPE
              SYNTAX  DisplayString (SIZE (0..255))
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "Address of friend"
              ::= { friendsEntry 3 }
           fStatus OBJECT-TYPE
              SYNTAX      RowStatus
              ACCESS      read-write
              STATUS      mandatory
              DESCRIPTION
                      "The status of this conceptual row."
              ::= { friendsEntry 4 }
          fTrap TRAP-TYPE
              ENTERPRISE  example1
              VARIABLES   { myName, fIndex }
              DESCRIPTION
                          "This trap is sent when something happens to
         the friend specified by fIndex."
              ::= 1
END
    </fo:block>
  <fo:block id="idp3196912" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.2 
      Default Implementation</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Without writing any instrumentation functions, we can compile
      the MIB and use the default implementation of it. Recall that MIBs
      imported by "EX1-MIB.mib" must be present and compiled in the
      current directory ("./STANDARD-MIB.bin","./RFC1213-MIB.bin") when
      compiling.
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
unix&gt; <fo:inline font-weight="bold">erl -config ./sys</fo:inline>
1&gt; <fo:inline font-weight="bold">application:start(snmp).</fo:inline>
ok
2&gt; <fo:inline font-weight="bold">snmpc:compile("EX1-MIB").</fo:inline>
No accessfunction for 'friendsTable', using default.
No accessfunction for 'myName', using default.
{ok, "EX1-MIB.bin"}
3&gt; <fo:inline font-weight="bold">snmpa:load_mibs(snmp_master_agent, ["EX1-MIB"]).</fo:inline>
ok
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This MIB is now loaded into the agent, and a manager can ask
      questions. As an example of this, we start another Erlang system
      and the simple Erlang manager in the toolkit:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">snmp_test_mgr:start_link([{agent,"dront.ericsson.se"},{community,"all-rights"},</fo:inline>
 %% making it understand symbolic names: {mibs,["EX1-MIB","STANDARD-MIB"]}]).
{ok, &lt;0.89.0&gt;}
%% a get-next request with one OID.
2&gt; <fo:inline font-weight="bold">snmp_test_mgr:gn([[1,3,6,1,3,7]]).</fo:inline>
ok 
* Got PDU:
[myName,0] = [] 
%% A set-request (now using symbolic names for convenience)
3&gt; <fo:inline font-weight="bold">snmp_test_mgr:s([{[myName,0], "Martin"}]).</fo:inline>
ok                           
* Got PDU:
[myName,0] = "Martin"    
%% Try the same get-next request again
4&gt; <fo:inline font-weight="bold">snmp_test_mgr:gn([[1,3,6,1,3,7]]).</fo:inline>
ok                           
* Got PDU:
[myName,0] = "Martin"    
%% ... and we got the new value.
%% you can event do row operations. How to add a row:
5&gt; <fo:inline font-weight="bold">snmp_test_mgr:s([{[fName,0], "Martin"}, {[fAddress,0],"home"}, {[fStatus,0],4}]).</fo:inline>
 %% createAndGo
ok
* Got PDU:
[fName,0] = "Martin"    
[fAddress,0] = "home"    
[fStatus,0] = 4    
6&gt; <fo:inline font-weight="bold">snmp_test_mgr:gn([[myName,0]]).</fo:inline>
ok
* Got PDU:
[fName,0] = "Martin"    
7&gt; <fo:inline font-weight="bold">snmp_test_mgr:gn().</fo:inline>
ok
* Got PDU:
[fAddress,0] = "home"    
8&gt; <fo:inline font-weight="bold">snmp_test_mgr:gn().</fo:inline>
ok
* Got PDU:
[fStatus,0] = 1    
9&gt; 
    </fo:block>
  <fo:block id="idp3206448" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.3 
      Manual Implementation</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows a "manual" implementation of the
      EX1-MIB in Erlang.  In this example, the values of the objects are
      stored in an Erlang server.  The server has a 2-tuple as loop
      data, where the first element is the value of variable
      <fo:inline font-family="monospace">myName</fo:inline>, and the second is a sorted list of rows in the
      table <fo:inline font-family="monospace">friendsTable</fo:inline>.  Each row is a 4-tuple.
      </fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are more efficient ways to create tables manually, i.e.
        to use the module <fo:inline font-family="monospace">snmp_index</fo:inline>.</fo:block>
    </fo:block>

    <fo:block id="idp3210272" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Code</fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(ex1).
-author('dummy@flop.org').
%% External exports
-export([start/0, my_name/1, my_name/2, friends_table/3]).
%% Internal exports
-export([init/0]).
-define(status_col, 4).
-define(active, 1).
-define(notInService, 2).
-define(notReady, 3).
-define(createAndGo, 4).   % Action; written, not read
-define(createAndWait, 5). % Action; written, not read
-define(destroy, 6).       % Action; written, not read
start() -&gt;
    spawn(ex1, init, []).
%%----------------------------------------------------------------
%% Instrumentation function for variable myName.
%% Returns: (get) {value, Name}
%%          (set) noError
%%----------------------------------------------------------------
my_name(get) -&gt;
    ex1_server ! {self(), get_my_name},
    Name = wait_answer(),
    {value, Name}.
my_name(set, NewName) -&gt;
    ex1_server ! {self(), {set_my_name, NewName}},
    noError.
%%----------------------------------------------------------------
%% Instrumentation function for table friendsTable.
%%----------------------------------------------------------------
friends_table(get, RowIndex, Cols) -&gt;
    case get_row(RowIndex) of
   {ok, Row} -&gt;
        get_cols(Cols, Row);
   _  -&gt;
        {noValue, noSuchInstance}
    end;
friends_table(get_next, RowIndex, Cols) -&gt;
    case get_next_row(RowIndex) of
   {ok, Row} -&gt;
        get_next_cols(Cols, Row);
   _  -&gt;
       case get_next_row([]) of
     {ok, Row} -&gt;
         % Get next cols from first row.
         NewCols = add_one_to_cols(Cols),
         get_next_cols(NewCols, Row);
     _  -&gt;
        end_of_table(Cols)
        end
    end;
%%----------------------------------------------------------------
%% If RowStatus is set, then:
%%    *) If set to destroy, check that row does exist
%%    *) If set to createAndGo, check that row does not exist AND
%%         that all columns are given values.
%%    *) Otherwise, error (for simplicity).
%% Otherwise, row is modified; check that row exists.
%%----------------------------------------------------------------
friends_table(is_set_ok, RowIndex, Cols) -&gt;
    RowExists = 
   case get_row(RowIndex) of
        {ok, _Row} -&gt; true;
       _ -&gt; false
   end, 
    case is_row_status_col_changed(Cols) of
   {true, ?destroy} when RowExists == true -&gt;
        {noError, 0};
   {true, ?createAndGo} when RowExists == false,
                                 length(Cols) == 3 -&gt;
        {noError, 0};
   {true, _} -&gt;
       {inconsistentValue, ?status_col};
   false when RowExists == true -&gt;
        {noError, 0};
   _ -&gt;
        [{Col, _NewVal} | _Cols] = Cols,
       {inconsistentName, Col}
      end;
friends_table(set, RowIndex, Cols) -&gt;
    case is_row_status_col_changed(Cols) of
   {true, ?destroy} -&gt;
        ex1_server ! {self(), {delete_row, RowIndex}};
   {true, ?createAndGo} -&gt;
       NewRow = make_row(RowIndex, Cols),
        ex1_server ! {self(), {add_row, NewRow}};
   false -&gt;
       {ok, Row} = get_row(RowIndex),
        NewRow = merge_rows(Row, Cols),
    ex1_server ! {self(), {delete_row, RowIndex}},
       ex1_server ! {self(), {add_row, NewRow}}
   end,
    {noError, 0}.
    
%%----------------------------------------------------------------
%% Make a list of {value, Val} of the Row and Cols list.
%%----------------------------------------------------------------
get_cols([Col | Cols], Row) -&gt;
    [{value, element(Col, Row)} | get_cols(Cols, Row)];
get_cols([], _Row) -&gt;
    [].
%%----------------------------------------------------------------
%% As get_cols, but the Cols list may contain invalid column
%% numbers. If it does, we must find the next valid column,
%% or return endOfTable.
%%----------------------------------------------------------------
get_next_cols([Col | Cols], Row) when Col &lt; 2 -&gt;
    [{[2, element(1, Row)], element(2, Row)} | 
     get_next_cols(Cols, Row)];
get_next_cols([Col | Cols], Row) when Col &gt; 4 -&gt;
    [endOfTable | 
     get_next_cols(Cols, Row)];
get_next_cols([Col | Cols], Row) -&gt;
    [{[Col, element(1, Row)], element(Col, Row)} | 
     get_next_cols(Cols, Row)];
get_next_cols([], _Row) -&gt;
    [].
%%----------------------------------------------------------------
%% Make a list of endOfTable with as many elems as Cols list.
%%----------------------------------------------------------------
end_of_table([Col | Cols]) -&gt;
    [endOfTable | end_of_table(Cols)];
end_of_table([]) -&gt;
    [].
add_one_to_cols([Col | Cols]) -&gt;
    [Col + 1 | add_one_to_cols(Cols)];
add_one_to_cols([]) -&gt;
    [].
is_row_status_col_changed(Cols) -&gt;
    case lists:keysearch(?status_col, 1, Cols) of
   {value, {?status_col, StatusVal}} -&gt;
        {true, StatusVal};
   _ -&gt; false
    end.
get_row(RowIndex) -&gt;
    ex1_server ! {self(), {get_row, RowIndex}},
    wait_answer().
get_next_row(RowIndex) -&gt;
    ex1_server ! {self(), {get_next_row, RowIndex}},
    wait_answer().
wait_answer() -&gt;
    receive
   {ex1_server, Answer} -&gt;
     Answer
    end.
%%%---------------------------------------------------------------
%%% Server code follows
%%%---------------------------------------------------------------
init() -&gt;
    register(ex1_server, self()),
    loop("", []).
    
loop(MyName, Table) -&gt;
    receive
   {From, get_my_name} -&gt;
        From ! {ex1_server, MyName},
       loop(MyName, Table);
   {From, {set_my_name, NewName}} -&gt;
        loop(NewName, Table);
   {From, {get_row, RowIndex}} -&gt;
       Res = table_get_row(Table, RowIndex),
       From ! {ex1_server, Res},
       loop(MyName, Table);
   {From, {get_next_row, RowIndex}} -&gt;
       Res = table_get_next_row(Table, RowIndex),
        From ! {ex1_server, Res},
       loop(MyName, Table);
   {From, {delete_row, RowIndex}} -&gt;
    NewTable = table_delete_row(Table, RowIndex),
       loop(MyName, NewTable);
   {From, {add_row, NewRow}} -&gt;
       NewTable = table_add_row(Table, NewRow),
       loop(MyName, NewTable)
    end.
%%%---------------------------------------------------------------
%%% Functions for table operations. The table is represented as
%%% a list of rows.
%%%---------------------------------------------------------------
table_get_row([{Index, Name, Address, Status} | _], [Index]) -&gt;
    {ok, {Index, Name, Address, Status}};
table_get_row([H | T], RowIndex) -&gt;
    table_get_row(T, RowIndex);
table_get_row([], _RowIndex) -&gt;
    no_such_row.
table_get_next_row([Row | T], []) -&gt;
    {ok, Row};
table_get_next_row([Row | T], [Index | _]) 
when element(1, Row) &gt; Index -&gt;
    {ok, Row};
table_get_next_row([Row | T], RowIndex) -&gt;
    table_get_next_row(T, RowIndex);
table_get_next_row([], RowIndex) -&gt;
    endOfTable.
table_delete_row([{Index, _, _, _} | T], [Index]) -&gt;
    T;
table_delete_row([H | T], RowIndex) -&gt;
    [H | table_delete_row(T, RowIndex)];
table_delete_row([], _RowIndex) -&gt;
    [].
table_add_row([Row | T], NewRow) 
  when element(1, Row) &gt; element(1, NewRow) -&gt;
    [NewRow, Row | T];
table_add_row([H | T], NewRow) -&gt;
    [H | table_add_row(T, NewRow)];
table_add_row([], NewRow) -&gt;
    [NewRow].
make_row([Index], [{2, Name}, {3, Address} | _]) -&gt;
    {Index, Name, Address, ?active}.
merge_rows(Row, [{Col, NewVal} | T]) -&gt;
    merge_rows(setelement(Col, Row, NewVal), T);
merge_rows(Row, []) -&gt;
    Row.
      </fo:block>
    

    <fo:block id="idp3219072" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Association File</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The association file <fo:inline font-family="monospace">EX1-MIB.funcs</fo:inline> for the real
        implementation looks as follows:
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{myName, {ex1, my_name, []}}.
{friendsTable, {ex1, friends_table, []}}.
      </fo:block>
    

    <fo:block id="idp3221696" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Transcript</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To use the real implementation, we must recompile the MIB and
        load it into the agent.
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">application:start(snmp).</fo:inline>
ok
2&gt; <fo:inline font-weight="bold">snmpc:compile("EX1-MIB").</fo:inline>
{ok,"EX1-MIB.bin"}
3&gt; <fo:inline font-weight="bold">snmpa:load_mibs(snmp_master_agent, ["EX1-MIB"]).</fo:inline>
ok
4&gt; <fo:inline font-weight="bold">ex1:start().</fo:inline>
&lt;0.115.0&gt;
%% Now all requests operates on this "real" implementation.
%% The output from the manager requests will *look* exactly the
%% same as for the default implementation.
      </fo:block>
    

    <fo:block id="idp3225600" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Trap Sending</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">How to send a trap by sending the
        <fo:inline font-family="monospace">fTrap</fo:inline> from the master agent is shown in this section. 
        The master agent has the MIB <fo:inline font-family="monospace">EX1-MIB</fo:inline> loaded, where the 
        trap is defined. This trap specifies that two variables should 
        be sent along with the trap, <fo:inline font-family="monospace">myName</fo:inline> and <fo:inline font-family="monospace">fIndex</fo:inline>. 
        <fo:inline font-family="monospace">fIndex</fo:inline> is a table column, so we must provide its value 
        and the index for the row in the call to <fo:inline font-family="monospace">snmpa:send_trap/4</fo:inline>. 
        In the example below, we assume that the row in question is 
        indexed by 2 (the row with <fo:inline font-family="monospace">fIndex</fo:inline> 2).
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">we use a simple Erlang SNMP manager, which can receive traps.
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[MANAGER]
1&gt; <fo:inline font-weight="bold">snmp_test_mgr:start_link([{agent,"dront.ericsson.se"},{community,"public"}</fo:inline>
 %% does not have write-access
1&gt;<fo:inline font-weight="bold">{mibs,["EX1-MIB","STANDARD-MIB"]}]).</fo:inline>
{ok, &lt;0.100.0&gt;}
2&gt; <fo:inline font-weight="bold">snmp_test_mgr:s([{[myName,0], "Klas"}]).</fo:inline>
ok                           
* Got PDU:
Received a trap:
      Generic: 4       %% authenticationFailure
   Enterprise: [iso,2,3]
     Specific: 0
   Agent addr: [123,12,12,21]
    TimeStamp: 42993
2&gt; 
[AGENT]
3&gt; <fo:inline font-weight="bold">snmpa:send_trap(snmp_master_agent, fTrap,"standard trap", [{fIndex,[2],2}]).</fo:inline>
[MANAGER]
2&gt;
* Got PDU:
Received a trap:             
      Generic: 6
   Enterprise: [example1]
     Specific: 1
   Agent addr: [123,12,12,21]
    TimeStamp: 69649
[myName,0] = "Martin"    
[fIndex,2] = 2    
2&gt;
      </fo:block>
    
  <fo:block id="idp3237888" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.9  Manager Implementation Example</fo:marker>1.9  Manager Implementation Example</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This <fo:inline font-weight="bold">Implementation Example</fo:inline> section describes 
    how a simple manager can be implemented with the 
    SNMP Development Toolkit. </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The example shown, <fo:inline font-weight="bold">ex2</fo:inline>, can be found in the toolkit 
    distribution. </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This example has two functions: </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A simple example of how to use the manager component of 
        the SNMP Development Toolkit.</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A simple example of how to write agent test cases, using the new
        manager.</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block id="idp3246320" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.1 
      The example manager</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The example manager, <fo:inline font-family="monospace">snmp_ex2_manager</fo:inline>, is a simple example of 
      how to implement an snmp manager using the manager component of the
      SNMP Development Toolkit.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module exports the following functions:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">start_link/0, start_link/1</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">stop/0</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">agent/2, agent/3</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">sync_get/2, sync_get/3</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">sync_get_next/2, sync_get_next/3</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">sync_get_bulk/4, sync_get_bulk/5</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">sync_set/2, sync_set/3</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">oid_to_name/1</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module is also used by the test module described in the 
      next section.</fo:block>
  <fo:block id="idp3257152" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.2 
      A simple standard test</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This simple standard test, <fo:inline font-family="monospace">snmp_ex2_simple_standard_test</fo:inline>,
      a module which, using the <fo:inline font-family="monospace">snmp_ex2_manager</fo:inline> described in the
      previous section, implements a simple agent test utility. </fo:block>
  <fo:block id="idp3263440" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.10  Instrumentation Functions</fo:marker>1.10  Instrumentation Functions</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A user-defined instrumentation function for each object attaches
    the managed objects to real resources. This function is called by
    the agent on a <fo:inline font-family="monospace">get</fo:inline> or <fo:inline font-family="monospace">set</fo:inline> operation. The function
    could read some hardware register, perform a calculation, or
    whatever is necessary to implement the semantics associated with the
    conceptual variable. These functions must be written both for scalar
    variables and for tables. They are specified in the association
    file, which is a text file. In this file, the <fo:inline font-family="monospace">OBJECT IDENTIFIER</fo:inline>, or symbolic name for each managed object, is
    associated with an Erlang tuple <fo:inline font-family="monospace">{Module,</fo:inline><fo:inline font-family="monospace">Function</fo:inline>,
    <fo:inline font-family="monospace">ListOfExtraArguments}</fo:inline>.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a managed object is referenced in an SNMP operation, the
    associated <fo:inline font-family="monospace">{Module, Function, ListOfExtraArguments}</fo:inline> is
    called. The function is applied to some standard arguments (for
    example, the operation type) and the extra arguments supplied by the
    user.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Instrumentation functions must be written for <fo:inline font-family="monospace">get</fo:inline> and
    <fo:inline font-family="monospace">set</fo:inline> for scalar variables and tables, and for <fo:inline font-family="monospace">get-next</fo:inline>
    for tables only.  The <fo:inline font-family="monospace">get-bulk</fo:inline> operation is translated into a
    series of calls to <fo:inline font-family="monospace">get-next</fo:inline>.
    </fo:block><fo:block id="idp3274288" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.1 
      Instrumentation Functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following sections describe how the instrumentation
      functions should be defined in Erlang for the different
      operations. In the following, <fo:inline font-family="monospace">RowIndex</fo:inline> is a list of key
      values for the table, and <fo:inline font-family="monospace">Column</fo:inline> is a column number.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions are described in detail in 
      <fo:inline font-style="italic">Definition of Instrumentation Functions</fo:inline>.
      </fo:block>

    <fo:block id="idp3277808" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">New / Delete Operations</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For scalar variables:
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
variable_access(new [, ExtraArg1, ...])
variable_access(delete [, ExtraArg1, ...])
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For tables:
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
table_access(new [, ExtraArg1, ...])
table_access(delete [, ExtraArg1, ...])
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions are called for each object in an MIB when the
        MIB is unloaded or loaded, respectively.</fo:block>
    

    <fo:block id="idp3281744" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Get Operation</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For scalar variables:
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
variable_access(get [, ExtraArg1, ...])
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For tables:
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
table_access(get,RowIndex,Cols [,ExtraArg1, ...])
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Cols</fo:inline> is a list of <fo:inline font-family="monospace">Column</fo:inline>. The agent will sort
        incoming variables so that all operations on one row (same
        index) will be supplied at the same time. The reason for this is
        that a database normally retrieves information row by row.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions must return the current values of the
        associated variables.</fo:block>
    

    <fo:block id="idp3286992" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Set Operation</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For scalar variables:
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
variable_access(set, NewValue [, ExtraArg1, ...])
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For tables:
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
table_access(set, RowIndex, Cols [, ExtraArg1,..])
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Cols</fo:inline> is a list of tuples <fo:inline font-family="monospace">{Column, NewValue}</fo:inline>.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions returns <fo:inline font-family="monospace">noError</fo:inline> if the assignment was
        successful, otherwise an error code.</fo:block>
    

    <fo:block id="idp3292480" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Is-set-ok Operation</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As a complement to the <fo:inline font-family="monospace">set</fo:inline> operation, it is possible
        to specify a test function. This function has the same syntax as
        the set operation above, except that the first argument is
        <fo:inline font-family="monospace">is_set_ok</fo:inline> instead of <fo:inline font-family="monospace">set</fo:inline>. This function is called
        before the variable is set. Its purpose is to ensure that it is
        permissible to set the variable to the new value.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
variable_access(is_set_ok, NewValue [, ExtraArg1, ...])
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For tables:
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
table_access(set, RowIndex, Cols [, ExtraArg1,..])
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Cols</fo:inline> is a list of tuples <fo:inline font-family="monospace">{Column, NewValue}</fo:inline>.
        </fo:block>
    

    <fo:block id="idp3298640" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Undo Operation</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A function which has been called with <fo:inline font-family="monospace">is_set_ok</fo:inline> will
        be called again, either with <fo:inline font-family="monospace">set</fo:inline> if there was no error,
        or with <fo:inline font-family="monospace">undo</fo:inline>, if an error occurred. In this way,
        resources can be reserved in the <fo:inline font-family="monospace">is_set_ok</fo:inline> operation,
        released in the <fo:inline font-family="monospace">undo</fo:inline> operation, or made permanent in the
        <fo:inline font-family="monospace">set</fo:inline> operation.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
variable_access(undo, NewValue [, ExtraArg1, ...])
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For tables:
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
table_access(set, RowIndex, Cols [, ExtraArg1,..])
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Cols</fo:inline> is a list of tuples <fo:inline font-family="monospace">{Column, NewValue}</fo:inline>.
        </fo:block>
    

    <fo:block id="idp3306032" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">GetNext Operation</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The GetNext Operation operation should only be defined for 
        tables since the
        agent can find the next instance of plain variables in the MIB
        and call the instrumentation with the <fo:inline font-family="monospace">get</fo:inline> operation.
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
table_access(get_next, RowIndex, Cols [, ExtraArg1, ...])
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Cols</fo:inline> is a list of integers, all greater than or equal
        to zero. This indicates that the instrumentation should find the
        next accessible instance. This function returns the tuple
        <fo:inline font-family="monospace">{NextOid, NextValue}</fo:inline>, or
        <fo:inline font-family="monospace">endOfTable</fo:inline>. <fo:inline font-family="monospace">NextOid</fo:inline> should be the
        lexicographically next accessible instance of a managed object
        in the table. It should be a list of integers, where the first
        integer is the column, and the rest of the list is the indices
        for the next row. If <fo:inline font-family="monospace">endOfTable</fo:inline> is returned, the agent
        continues to search for the next instance among the other
        variables and tables.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RowIndex</fo:inline> may be an empty list, an incompletely
        specified row index, or the index for an unspecified row.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This operation is best described with an example.
        </fo:block>

      <fo:block id="idp3313008" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">GetNext Example</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A table called <fo:inline font-family="monospace">myTable</fo:inline> has five columns. The first
          two are keys (not accessible), and the table has three
          rows. The instrumentation function for this table is called
          <fo:inline font-family="monospace">my_table</fo:inline>.</fo:block>
        
        <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="getnext1.gif"/>
          <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        10.1:
         
        Contents of my_table</fo:block>
        </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">N/A means not accessible.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The manager issues the following <fo:inline font-family="monospace">getNext</fo:inline> request:
          </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
getNext{ myTable.myTableEntry.3.1.1,
         myTable.myTableEntry.5.1.1 } 
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since both operations involve the 1.1 index, this is
          transformed into one call to <fo:inline font-family="monospace">my_table</fo:inline>:
          </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
my_table(get_next, [1, 1], [3, 5])
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this call, <fo:inline font-family="monospace">[1, 1]</fo:inline> is the <fo:inline font-family="monospace">RowIndex</fo:inline>, where
          key 1 has value 1, and key 2 has value 1, and <fo:inline font-family="monospace">[3, 5]</fo:inline> is
          the list of requested columns. The function should now return
          the lexicographically next elements:
          </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{[3, 1, 2], d}, {[5, 1, 2], f}]
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is illustrated in the following table:
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
        
        <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="getnext2.gif"/>
          <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        10.2:
         
        GetNext from [3,1,1] and [5,1,1].</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The manager now issues the following <fo:inline font-family="monospace">getNext</fo:inline> request:
          </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
getNext{ myTable.myTableEntry.3.2.1,
         myTable.myTableEntry.5.2.1 } 
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is transformed into one call to <fo:inline font-family="monospace">my_table</fo:inline>:
          </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
my_table(get_next, [2, 1], [3, 5])
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function should now return:
          </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{[4, 1, 1], b}, endOfTable]
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is illustrated in the following table:
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
        
        <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="getnext3.gif"/>
          <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        10.3:
         
        GetNext from [3,2,1] and [5,2,1].</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The manager now issues the following <fo:inline font-family="monospace">getNext</fo:inline> request:
          </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
getNext{ myTable.myTableEntry.3.1.2,
         myTable.myTableEntry.4.1.2 } 
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This will be transform into one call to <fo:inline font-family="monospace">my_table</fo:inline>:
          </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
my_table(get_next, [1, 2], [3, 4])
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function should now return:
          </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{[3, 2, 1], g}, {[5, 1, 1], c}]
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is illustrated in the following table:
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
        
        <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="getnext4.gif"/>
          <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        10.4:
         
        GetNext from [3,1,2] and [4,1,2].</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The manager now issues the following <fo:inline font-family="monospace">getNext</fo:inline> request:
          </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
getNext{ myTable.myTableEntry,
         myTable.myTableEntry.1.3.2 } 
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This will be transform into two calls to <fo:inline font-family="monospace">my_table</fo:inline>:
          </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
my_table(get_next, [], [0]) and
my_table(get_next, [3, 2], [1])
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function should now return:
          </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{[3, 1, 1], a}] and
[{[3, 1, 1], a}]
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In both cases, the first accessible element in the table
          should be returned. As the key columns are not accessible,
          this means that the third column is the first row.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally, the functions described above behave exactly as
            shown, but they are free to perform other actions. For
            example, a get-request may have side effects such as setting
            some other variable, perhaps a global <fo:inline font-family="monospace">lastAccessed</fo:inline>
            variable.</fo:block>
        </fo:block>
      
    
  <fo:block id="idp3348064" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.2 
      Using the ExtraArgument</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ListOfExtraArguments</fo:inline> can be used to write generic
      functions. This list is appended to the standard arguments for
      each function. Consider two read-only variables for a device,
      <fo:inline font-family="monospace">ipAdr</fo:inline> and <fo:inline font-family="monospace">name</fo:inline> with object identifiers 1.1.23.4 and
      1.1.7 respectively. To access these variables, one could implement
      the two Erlang functions <fo:inline font-family="monospace">ip_access</fo:inline> and <fo:inline font-family="monospace">name_access</fo:inline>,
      which will be in the MIB. The functions could be specified in a
      text file as follows:
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{ipAdr, {my_module, ip_access, []}}.
% Or using the oid syntax for 'name'
{[1,1,7], {my_module, name_access, []}}.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ExtraArgument</fo:inline> parameter is the empty list. For
      example, when the agent receives a get-request for the
      <fo:inline font-family="monospace">ipAdr</fo:inline> variable, a call will be made to
      <fo:inline font-family="monospace">ip_access(get)</fo:inline>. The value returned by this function is the
      answer to the get-request.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">ip_access</fo:inline> and <fo:inline font-family="monospace">name_access</fo:inline> are implemented
      similarly, we could write a <fo:inline font-family="monospace">generic_access</fo:inline> function using
      the <fo:inline font-family="monospace">ListOfExtraArguments</fo:inline>:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{ipAdr, {my_module, generic_access, ['IPADR']}}.
% The mnemonic 'name' is more convenient than 1.1.7
{name, {my_module, generic_access, ['NAME']}}.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the agent receives the same get-request as above, a call
      will be made to <fo:inline font-family="monospace">generic_access(get, </fo:inline>'<fo:inline font-family="monospace">IPADR')</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Yet another possibility, closer to the hardware, could be:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{ipAdr, {my_module, generic_access, [16#2543]}}.
{name, {my_module, generic_access, [16#A2B3]}}.
    </fo:block>
  <fo:block id="idp3360976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.3 
      Default Instrumentation</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the MIB definition work is finished, there are two major
      issues left.
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Implementing the MIB
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Implementing a Manager Application.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Implementing an MIB can be a tedious task. Most probably, there
      is a need to test the agent before all tables and variables are
      implemented. In this case, the default instrumentation functions
      are useful. The toolkit can generate default instrumentation
      functions for variables as well as for tables. Consequently, a
      running prototype agent, which can handle <fo:inline font-family="monospace">set</fo:inline>, <fo:inline font-family="monospace">get</fo:inline>,
      <fo:inline font-family="monospace">get-next</fo:inline> and table operations, is generated without any
      programming.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The agent stores the values in an internal volatile database,
      which is based on the standard module <fo:inline font-family="monospace">ets</fo:inline>. However, it is
      possible to let the MIB compiler generate functions which use an
      internal, persistent database, or the Mnesia DBMS. Refer to the
      Mnesia User Guide and the Reference Manual, section SNMP, module
      <fo:inline font-family="monospace">snmp_generic</fo:inline> for more information.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When parts of the MIB are implemented, you recompile it and
      continue on by using default functions. With this approach, the
      SNMP agent can be developed incrementally.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default instrumentation allows the application on the
      manager side to be developed and tested simultaneously with the
      agent. As soon as the ASN.1 file is completed, let the MIB
      compiler generate a default implementation and develop the
      management application from this.
      </fo:block>

    <fo:block id="idp3369696" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Table Operations</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The generation of default functions for tables works for
        tables which use the <fo:inline font-family="monospace">RowStatus</fo:inline> textual convention from
        SNMPv2, defined in STANDARD-MIB and SNMPv2-TC.
        </fo:block>
      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We strongly encourage the use of the <fo:inline font-family="monospace">RowStatus</fo:inline>
          convention for every table that can be modified from the
          manager, even for newly designed SNMPv1 MIBs. In SNMPv1,
          everybody has invented their own scheme for emulating table
          operations, which has led to numerous inconsistencies. The
          convention in SNMPv2 is flexible and powerful and has been
          tested successfully. If the table is read only, no RowStatus
          column should be used.
          </fo:block>
      </fo:block>
    
  <fo:block id="idp3373600" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.4 
      Atomic Set</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In SNMP, the <fo:inline font-family="monospace">set</fo:inline> operation is atomic. Either all
      variables which are specified in a <fo:inline font-family="monospace">set</fo:inline> operation are
      changed, or none are changed. Therefore, the <fo:inline font-family="monospace">set</fo:inline> operation
      is divided into two phases. In the first phase, the new value of
      each variable is checked against the definition of the variable in
      the MIB. The following definitions are checked:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the type</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the length</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the range</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>the variable is writable and within the MIB view.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At
      the end of phase one, the user defined <fo:inline font-family="monospace">is_set_ok</fo:inline> functions
      are called for each scalar variable, and for each group of table
      operations.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no error occurs, the second phase is performed. This phase
      calls the user defined <fo:inline font-family="monospace">set</fo:inline> function for all variables.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error occurs, either in the <fo:inline font-family="monospace">is_set_ok</fo:inline> phase, or in
      the <fo:inline font-family="monospace">set</fo:inline> phase, all functions which were called with
      <fo:inline font-family="monospace">is_set_ok</fo:inline> but not <fo:inline font-family="monospace">set</fo:inline>, are called with <fo:inline font-family="monospace">undo</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are limitations with this transaction mechanism. If
      complex dependencies exist between variables, for example between
      <fo:inline font-family="monospace">month</fo:inline> and <fo:inline font-family="monospace">day</fo:inline>, another mechanism is needed. Setting
      the date to 'Feb 31' can be avoided by a somewhat more generic
      transaction mechanism. You can continue and find more and more
      complex situations and construct an N-phase set-mechanism. This
      toolkit only contains a trivial mechanism.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The most common application of transaction mechanisms is to
      keep row operations together. Since our agent sorts row
      operations, the mechanism implemented in combination with the
      RowStatus (particularly 'createAndWait' value) solve most
      problems elegantly.
      </fo:block>
  <fo:block id="idp3390336" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.11  Definition of Instrumentation Functions</fo:marker>1.11  Definition of Instrumentation Functions</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The section <fo:inline font-weight="bold">Definition of Instrumentation Functions</fo:inline> describes
    the user defined functions, which the agent calls at different times.
    </fo:block><fo:block id="idp3394720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.1 
      Variable Instrumentation</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For scalar variables, a function <fo:inline font-family="monospace">f(Operation, ...)</fo:inline> must
      be defined.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Operation</fo:inline> can be <fo:inline font-family="monospace">new</fo:inline>, <fo:inline font-family="monospace">delete</fo:inline>,
      <fo:inline font-family="monospace">get</fo:inline>, <fo:inline font-family="monospace">is_set_ok</fo:inline>, <fo:inline font-family="monospace">set</fo:inline>, or <fo:inline font-family="monospace">undo</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In case of an error, all instrumentation functions may return
      either an SNMPv1 or an SNMPv2 error code. If it returns an SNMPv2
      code, it is converted into an SNMPv1 code before it is sent to a
      SNMPv1 manager.  It is  recommended to use the SNMPv2 error codes
      for all instrumentation functions, as these provide more
      details. See <fo:inline font-style="italic">Appendix A</fo:inline> for a
      description of error code conversions.
      </fo:block>

    <fo:block id="idp3401536" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">f(new [, ExtraArgs])</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">f(new [, ExtraArgs])</fo:inline> is called for each
        variable in the MIB when the
        MIB is loaded into the agent. This makes it possible to perform
        necessary initialization.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is optional. The return value is discarded.</fo:block>
    

    <fo:block id="idp3403984" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">f(delete [, ExtraArgs])</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">f(delete [, ExtraArgs])</fo:inline> is called
        for each object in an MIB when the
        MIB is unloaded from the agent. This makes it possible to
        perform necessary clean-up.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is optional. The return value is discarded.</fo:block>
    

    <fo:block id="idp3406416" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">f(get [, ExtraArgs])</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">f(get [, ExtraArgs])</fo:inline> is called when a
        get-request or a get-next
        request refers to the variable.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is mandatory.
        </fo:block>

      <fo:block id="idp3408592" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Valid Return Values</fo:block>
        
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{value, Value}</fo:inline>. The <fo:inline font-family="monospace">Value</fo:inline> must be of
           correct type, length and within ranges, otherwise
          <fo:inline font-family="monospace">genErr</fo:inline> is returned in the response PDU.  If the
           object is an enumerated integer, the symbolic enum value
           may be used as an atom. If the object is of type BITS, the
           return value shall be an integer or a list of bits that
           are set.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{noValue, noSuchName}</fo:inline>(SNMPv1)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{noValue, noSuchObject | noSuchInstance} </fo:inline>(SNMPv2)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">genErr</fo:inline>.  Used if an error occurred.  Note,
           this should be an internal processing error, e.g. a caused
           by a programing fault somewhere.  If the variable does not
           exist, use <fo:inline font-family="monospace">{noValue, noSuchName}</fo:inline> or
          <fo:inline font-family="monospace">{noValue, noSuchInstance}</fo:inline>.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      
    

    <fo:block id="idp3415648" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">f(is_set_ok, NewValue [, ExtraArgs])</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">f(is_set_ok, NewValue [, ExtraArgs])</fo:inline> is
        called in phase one of the set-request
        processing so that the new value can be checked for
        inconsistencies.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NewValue</fo:inline> is guaranteed to be of the correct type,
        length and within ranges, as specified in the MIB.  If the
        object is an enumerated integer or of type BITS, the integer
        value is used.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is optional.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If this function is called, it will be called again, either
        with <fo:inline font-family="monospace">undo</fo:inline> or with <fo:inline font-family="monospace">set</fo:inline> as first argument.
        </fo:block>

      <fo:block id="idp3420256" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Valid return values</fo:block>
        
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">noError</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">badValue | noSuchName | genErr</fo:inline>(SNMPv1)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">noAccess | noCreation | inconsistentValue | resourceUnavailable | inconsistentName | genErr</fo:inline>(SNMPv2)</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      
    

    <fo:block id="idp3424176" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">f(undo, NewValue [, ExtraArgs])</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error occurred, this function is called after the
        <fo:inline font-family="monospace">is_set_ok</fo:inline> function is called. If <fo:inline font-family="monospace">set</fo:inline> is called for
        this object, <fo:inline font-family="monospace">undo</fo:inline> is not called.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NewValue</fo:inline> is guaranteed to be of the correct type,
        length and within ranges, as specified in the MIB.  If the
        object is an enumerated integer or of type BITS, the integer
        value is used.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is optional.
        </fo:block>

      <fo:block id="idp3428208" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Valid return values</fo:block>
        
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">noError</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">genErr</fo:inline>(SNMPv1)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">undoFailed | genErr</fo:inline>(SNMPv2)</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      
    

    <fo:block id="idp3432032" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">f(set, NewValue [, ExtraArgs])</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called to perform the set in phase two of
        the set-request processing. It is only called if the
        corresponding <fo:inline font-family="monospace">is_set_ok</fo:inline> function is present and returns
        <fo:inline font-family="monospace">noError</fo:inline>.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NewValue</fo:inline> is guaranteed to be of the correct type,
        length and within ranges, as specified in the MIB.  If the
        object is an enumerated integer or of type BITS, the integer
        value is used.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is mandatory.
        </fo:block>

      <fo:block id="idp3435680" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Valid return values</fo:block>
        
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">noError</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">genErr</fo:inline>(SNMPv1)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">commitFailed | undoFailed | genErr</fo:inline>(SNMPv2)</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      
    
  <fo:block id="idp3439680" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.2 
      Table Instrumentation</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For tables, a <fo:inline font-family="monospace">f(Operation, ...)</fo:inline> function should be
      defined (the function shown is exemplified with <fo:inline font-family="monospace">f</fo:inline>).
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Operation</fo:inline> can be <fo:inline font-family="monospace">new</fo:inline>, <fo:inline font-family="monospace">delete</fo:inline>,
      <fo:inline font-family="monospace">get</fo:inline>, <fo:inline font-family="monospace">next</fo:inline>, <fo:inline font-family="monospace">is_set_ok</fo:inline>, <fo:inline font-family="monospace">undo</fo:inline> or
      <fo:inline font-family="monospace">set</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In case of an error, all instrumentation functions may return
      either an SNMPv1 or an SNMPv2 error code. If it returns an SNMPv2
      code, it is converted into an SNMPv1 code before it is sent to a
      SNMPv1 manager. It is  recommended to use the SNMPv2 error codes
      for all instrumentation functions, as these provide more
      details. See <fo:inline font-style="italic">Appendix A</fo:inline> for a
      description of error code conversions.</fo:block>

    <fo:block id="idp3447392" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">f(new [, ExtraArgs])</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">f(new [, ExtraArgs])</fo:inline> is called for each object in an MIB when the
        MIB is loaded into the agent. This makes it possible to perform
        the necessary initialization.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is optional. The return value is discarded.</fo:block>
    

    <fo:block id="idp3449824" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">f(delete [, ExtraArgs])</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">f(delete [, ExtraArgs])</fo:inline> is called for each object in an MIB when the
        MIB is unloaded from the agent. This makes it possible to
        perform any necessary clean-up.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is optional. The return value is discarded.</fo:block>
    

    <fo:block id="idp3452256" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">f(get, RowIndex, Cols [, ExtraArgs])</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">f(get, RowIndex, Cols [, ExtraArgs])</fo:inline> is
        called when a get-request refers to a table.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is mandatory.
        </fo:block>

      <fo:block id="idp3454432" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Arguments</fo:block>
        
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">RowIndex</fo:inline> is a list of integers which define the
           key values for the row. The <fo:inline font-family="monospace">RowIndex</fo:inline> is the list
           representation (list of integers) which follow the
          <fo:inline font-family="monospace">Cols</fo:inline> integer in the OBJECT IDENTIFIER.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Cols</fo:inline> is a list of integers which represent the
           column numbers. The <fo:inline font-family="monospace">Cols</fo:inline> are sorted by increasing
           value and are guaranteed to be valid column numbers.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      

      <fo:block id="idp3459168" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Valid Return Values</fo:block>
        
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list with as many elements as the <fo:inline font-family="monospace">Cols</fo:inline> list,
              where each element is the value of the corresponding
              column.  Each element can be:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{value, Value}</fo:inline>. The <fo:inline font-family="monospace">Value</fo:inline> must be of
               correct type, length and within ranges, otherwise
              <fo:inline font-family="monospace">genErr</fo:inline> is returned in the response PDU.  If the
               object is an enumerated integer, the symbolic enum
               value may be used (as an atom). If the object is of
               type BITS, the return value shall be an integer or a
               list of bits that are set.
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{noValue, noSuchName}</fo:inline>(SNMPv1)
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{noValue, noSuchObject | noSuchInstance}</fo:inline>(SNMPv2)
              </fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{noValue, Error}</fo:inline>. If the row does not exist,
           because all columns have <fo:inline font-family="monospace">{noValue, Error}</fo:inline>), the
           single tuple <fo:inline font-family="monospace">{noValue, Error}</fo:inline> can be returned.
           This is a shorthand for a list with all elements
          <fo:inline font-family="monospace">{noValue, Error}</fo:inline>.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">genErr</fo:inline>.  Used if an error occurred.  Note that
           this should be an internal processing error, e.g. a caused
           by a programing fault somewhere.  If some column does not
           exist, use <fo:inline font-family="monospace">{noValue, noSuchName}</fo:inline> or
          <fo:inline font-family="monospace">{noValue, noSuchInstance}</fo:inline>.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      
    

    <fo:block id="idp3470688" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">f(get_next, RowIndex, Cols [, ExtraArgs])</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">f(get_next, RowIndex, Cols [, ExtraArgs])</fo:inline> is 
        called when a get-next- or a
        get-bulk-request refers to the table.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">RowIndex</fo:inline> argument may refer to an existing row or a
        non-existing row, or it may be unspecified. The <fo:inline font-family="monospace">Cols</fo:inline> list
        may refer to inaccessible columns or non-existing columns. For
        each column in the <fo:inline font-family="monospace">Cols</fo:inline> list, the corresponding next
        instance is determined, and the last part of its OBJECT
        IDENTIFIER and its value is returned.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is mandatory.
        </fo:block>

      <fo:block id="idp3475024" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Arguments</fo:block>
        
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">RowIndex</fo:inline> is a list of integers (possibly empty)
           that defines the key values for a row. The <fo:inline font-family="monospace">RowIndex</fo:inline>
           is the list representation (list of integers), which follow
           the <fo:inline font-family="monospace">Cols</fo:inline> integer in the OBJECT IDENTIFIER.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Cols</fo:inline> is a list of integers, greater than or
           equal to zero, which represents the column numbers.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      

      <fo:block id="idp3479264" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Valid Return Values</fo:block>
        
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list with as many elements as the <fo:inline font-family="monospace">Cols</fo:inline> list
              Each element can be:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{NextOid, NextValue}</fo:inline>, where <fo:inline font-family="monospace">NextOid</fo:inline>
               is the lexicographic next OBJECT IDENTIFIER for the
               corresponding column. This should be specified as the
               OBJECT IDENTIFER part following the table entry. This
               means that the first integer is the column number and
               the rest is a specification of the keys.
              <fo:inline font-family="monospace">NextValue</fo:inline> is the value of this element.
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">endOfTable</fo:inline> if there are no accessible
               elements after this one.
              </fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{genErr, Column}</fo:inline> where <fo:inline font-family="monospace">Column</fo:inline> denotes
           the column that caused the error.  <fo:inline font-family="monospace">Column</fo:inline> must be
           one of the columns in the <fo:inline font-family="monospace">Cols</fo:inline> list.  Note that
           this should be an internal processing error, e.g. a caused
           by a programing fault somewhere.  If some column does not
           exist, you must return the next accessible element (or
          <fo:inline font-family="monospace">endOfTable</fo:inline>). 
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      
    

    <fo:block id="idp3488768" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">f(is_set_ok, RowIndex, Cols [, ExtraArgs])</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">f(is_set_ok, RowIndex, Cols [, ExtraArgs])</fo:inline>
        is called in phase one of the set-request
        processing so that new values can be checked for
        inconsistencies.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the function is called, it will be called again with
        <fo:inline font-family="monospace">undo</fo:inline>, or with <fo:inline font-family="monospace">set</fo:inline> as first argument.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is optional.
        </fo:block>

      <fo:block id="idp3492464" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Arguments</fo:block>
        
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">RowIndex</fo:inline> is a list of integers which define the
           key values for the row. The <fo:inline font-family="monospace">RowIndex</fo:inline> is the list
           representation (list of integers) which follow the
          <fo:inline font-family="monospace">Cols</fo:inline> integer in the OBJECT IDENTIFIER.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Cols</fo:inline> is a list of <fo:inline font-family="monospace">{Column, NewValue}</fo:inline>,
           where <fo:inline font-family="monospace">Column</fo:inline> is an integer, and <fo:inline font-family="monospace">NewValue</fo:inline> is
           guaranteed to be of the correct type, length and within
           ranges, as specified in the MIB.  If the object is an
           enumerated integer or of type BITS, the integer value is
           used.  The list is sorted by <fo:inline font-family="monospace">Column</fo:inline> (increasing) and
           each <fo:inline font-family="monospace">Column</fo:inline> is guaranteed to be a valid column
           number.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      

      <fo:block id="idp3499120" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Valid Return Values</fo:block>
        
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{noError, 0}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{Error, Column}</fo:inline>, where <fo:inline font-family="monospace">Error</fo:inline> is the same
           as for <fo:inline font-family="monospace">is_set_ok</fo:inline> for variables, and <fo:inline font-family="monospace">Column</fo:inline>
           denotes the faulty column.  <fo:inline font-family="monospace">Column</fo:inline> must be one of the
           columns in the <fo:inline font-family="monospace">Cols</fo:inline> list.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      
    

    <fo:block id="idp3504528" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">f(undo, RowIndex, Cols [, ExtraArgs])</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error occurs, The function
        <fo:inline font-family="monospace">f(undo, RowIndex, Cols [, ExtraArgs])</fo:inline> is called after the
        <fo:inline font-family="monospace">is_set_ok</fo:inline> function. If <fo:inline font-family="monospace">set</fo:inline> is called for this
        object, <fo:inline font-family="monospace">undo</fo:inline> is not called.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is optional.
        </fo:block>

      <fo:block id="idp3508080" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Arguments</fo:block>
        
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">RowIndex</fo:inline> is a list of integers which define the
           key values for the row. The <fo:inline font-family="monospace">RowIndex</fo:inline> is the list
           representation (list of integers) which follow the
          <fo:inline font-family="monospace">Cols</fo:inline> integer in the OBJECT IDENTIFIER.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Cols</fo:inline> is a list of <fo:inline font-family="monospace">{Column, NewValue}</fo:inline>,
           where <fo:inline font-family="monospace">Column</fo:inline> is an integer, and <fo:inline font-family="monospace">NewValue</fo:inline> is
           guaranteed to be of the correct type, length and within
           ranges, as specified in the MIB.  If the object is an
           enumerated integer or of type BITS, the integer value is
           used.  The list is sorted by <fo:inline font-family="monospace">Column</fo:inline> (increasing) and
           each <fo:inline font-family="monospace">Column</fo:inline> is guaranteed to be a valid column
           number.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      

      <fo:block id="idp3514752" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Valid Return Values</fo:block>
        
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{noError, 0}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{Error, Column}</fo:inline> where <fo:inline font-family="monospace">Error</fo:inline> is the same
           as for <fo:inline font-family="monospace">undo</fo:inline> for variables, and <fo:inline font-family="monospace">Column</fo:inline> denotes
           the faulty column.  <fo:inline font-family="monospace">Column</fo:inline> must be one of the columns
           in the <fo:inline font-family="monospace">Cols</fo:inline> list.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      
    

    <fo:block id="idp3520160" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">f(set, RowIndex, Cols [, ExtraArgs])</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">f(set, RowIndex, Cols [, ExtraArgs])</fo:inline> is
        called to perform the set in phase two of
        the set-request processing. It is only called if the
        corresponding <fo:inline font-family="monospace">is_set_ok</fo:inline> function did not exist, or
        returned <fo:inline font-family="monospace">{noError, 0}</fo:inline>.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is mandatory.
        </fo:block>

      <fo:block id="idp3523344" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Arguments</fo:block>
        
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">RowIndex</fo:inline> is a list of integers that define the
           key values for the row. The <fo:inline font-family="monospace">RowIndex</fo:inline> is the list
           representation (list of integers) which follow the
          <fo:inline font-family="monospace">Cols</fo:inline> integer in the OBJECT IDENTIFIER.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Cols</fo:inline> is a list of <fo:inline font-family="monospace">{Column, NewValue}</fo:inline>,
           where <fo:inline font-family="monospace">Column</fo:inline> is an integer, and <fo:inline font-family="monospace">NewValue</fo:inline> is
           guaranteed to be of the correct type, length and within
           ranges, as specified in the MIB.  If the object is an
           enumerated integer or of type BITS, the integer value is
           used.  The list is sorted by <fo:inline font-family="monospace">Column</fo:inline> (increasing) and
           each <fo:inline font-family="monospace">Column</fo:inline> is guaranteed to be a valid column
           number.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      

      <fo:block id="idp3530016" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Valid Return Values</fo:block>
        
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{noError, 0}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{Error, Column}</fo:inline> where <fo:inline font-family="monospace">Error</fo:inline> is the same
           as <fo:inline font-family="monospace">set</fo:inline> for variables, and <fo:inline font-family="monospace">Column</fo:inline> denotes
           the faulty column.  <fo:inline font-family="monospace">Column</fo:inline> must be one of the columns
           in the <fo:inline font-family="monospace">Cols</fo:inline> list.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      
    
  <fo:block id="idp3539504" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.12  Definition of Agent Net if</fo:marker>1.12  Definition of Agent Net if</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/><fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="snmp_agent_netif_1.gif"/>
    <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        12.1:
         
        The Purpose of Agent Net if</fo:block>
  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Network Interface (Net if) process delivers SNMP PDUs to a
    master agent, and receives SNMP PDUs from the master agent. The most
    common behaviour of a Net if process is that is receives bytes from
    a network, decodes them into an SNMP PDU, which it sends to a master
    agent. When the master agent has processed the PDU, it sends a
    response PDU to the Net if process, which encodes the PDU into bytes
    and transmits the bytes onto the network.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, that simple behaviour can be modified in numerous
    ways. For example, the Net if process can apply some kind of
    encrypting/decrypting scheme on the bytes or
    act as a proxy filter, which sends some packets to a proxy agent and
    some packets to the master agent.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also possible to write your own Net if process. The default
    Net if process is implemented in the module <fo:inline font-family="monospace">snmpa_net_if</fo:inline> and
    it uses UDP as the transport protocol i.e the transport domains
    <fo:inline font-family="monospace">transportDomainUdpIpv4</fo:inline> and/or <fo:inline font-family="monospace">transportDomainUdpIpv6</fo:inline>.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes how to write a Net if process.
    </fo:block><fo:block id="idp3548976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.12.1 
      Mandatory Functions</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A Net if process must implement the SNMP agent 
      <fo:inline font-style="italic">network interface behaviour</fo:inline>.
      </fo:block>
  <fo:block id="idp3551648" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.12.2 
      Messages</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The section <fo:inline font-weight="bold">Messages</fo:inline> describes mandatory messages, which
      Net if must send and be able to receive.     
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this section an <fo:inline font-family="monospace">Address</fo:inline> field is a
    <fo:inline font-family="monospace">{Domain, Addr}</fo:inline> tuple where <fo:inline font-family="monospace">Domain</fo:inline> is
    <fo:inline font-family="monospace">transportDomainUdpIpv4</fo:inline> or <fo:inline font-family="monospace">transportDomainUdpIpv4</fo:inline>,
    and <fo:inline font-family="monospace">Addr</fo:inline> is an
    <fo:inline font-family="monospace">{</fo:inline><fo:inline font-style="italic"><fo:inline font-family="monospace">IpAddr</fo:inline></fo:inline><fo:inline font-family="monospace">,IpPort}</fo:inline> tuple.</fo:block>

    <fo:block id="idp3558496" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Outgoing Messages</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Net if must send the following message when it receives an
      SNMP PDU from the network that is aimed for the MasterAgent:
      </fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
MasterAgent ! {snmp_pdu, Vsn, Pdu, PduMS, ACMData, From, Extra}
      </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Vsn</fo:inline> is either <fo:inline font-family="monospace">'version-1'</fo:inline>,
        <fo:inline font-family="monospace">'version-2'</fo:inline>, or <fo:inline font-family="monospace">'version-3'</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Pdu</fo:inline> is an SNMP PDU record, as defined in
        <fo:inline font-family="monospace">snmp_types.hrl</fo:inline>, with the SNMP request.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">PduMS</fo:inline> is the Maximum Size of the response Pdu
         allowed.  Normally this is returned from
        <fo:inline font-family="monospace">snmpa_mpd:process_packet</fo:inline> (see Reference Manual).
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ACMData</fo:inline> is data used by the Access Control Module
         in use.  Normally this is returned from
        <fo:inline font-family="monospace">snmpa_mpd:process_packet</fo:inline> (see Reference Manual).
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">From</fo:inline> is the source <fo:inline font-family="monospace">Address</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Extra</fo:inline> is any term the Net if process wishes to
         send to the agent. This term can be retrieved by the
         instrumentation functions by calling
        <fo:inline font-family="monospace">snmp:current_net_if_data()</fo:inline>. This data is also sent back
         to the Net if process when the agent generates a response to
         the request.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following message is used to report that a response to a
      request has been received.  The only request an agent can send
      is an Inform-Request.
      </fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Pid ! {snmp_response_received, Vsn, Pdu, From}
      </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Pid</fo:inline> is the Process that waits for the response
         for the request.  The Pid was specified in the
        <fo:inline font-family="monospace">send_pdu_req</fo:inline> message 
	<fo:inline font-style="italic">(see below)</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Vsn</fo:inline> is either <fo:inline font-family="monospace">'version-1'</fo:inline>, <fo:inline font-family="monospace">'version-2'</fo:inline>, or
        <fo:inline font-family="monospace">'version-3'</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Pdu</fo:inline> is the SNMP Pdu received
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">From</fo:inline> is the source <fo:inline font-family="monospace">Address</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp3579216" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Incoming Messages</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the incoming messages which a Net if
      process must be able to receive.
      </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	  
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{snmp_response, Vsn, Pdu, Type, ACMData, To, Extra}</fo:inline></fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This message is sent to the Net if process from a master
            agent as a response to a previously received request.
            </fo:block>
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Vsn</fo:inline> is either <fo:inline font-family="monospace">'version-1'</fo:inline>,
	      <fo:inline font-family="monospace">'version-2'</fo:inline>, or <fo:inline font-family="monospace">'version-3'</fo:inline>. </fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Pdu</fo:inline> is an SNMP PDU record (as defined in
	      snmp_types.hrl) with the SNMP response. </fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Type</fo:inline> is the <fo:inline font-family="monospace">#pdu.type</fo:inline> 
	      of the original request. </fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ACMData</fo:inline> is data used by the Access Control
	      Module in use.  Normally this is just sent to
	      <fo:inline font-family="monospace">snmpa_mpd:generate_response_message</fo:inline> 
	      (see Reference Manual). </fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">To</fo:inline> is the destination <fo:inline font-family="monospace">Address</fo:inline> that comes
	      from the <fo:inline font-family="monospace">From</fo:inline> field in the corresponding <fo:inline font-family="monospace">snmp_pdu</fo:inline>
	      message previously sent to the MasterAgent.</fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Extra</fo:inline> is the term that the Net if process
	      sent to the agent when the request was sent to the agent. </fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
          </fo:list-block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	  
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{discarded_pdu, Vsn, ReqId, ACMData, Variable, Extra}</fo:inline></fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This message is sent from a master agent if it for some
	  reason decided to discard the pdu. </fo:block>
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Vsn</fo:inline> is either <fo:inline font-family="monospace">'version-1'</fo:inline>,
	      <fo:inline font-family="monospace">'version-2'</fo:inline>, or <fo:inline font-family="monospace">'version-3'</fo:inline>. </fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ReqId</fo:inline> is the request id of the original request. </fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ACMData</fo:inline> is data used by the Access Control
	      Module in use. Normally this is just sent to
	      <fo:inline font-family="monospace">snmpa_mpd:generate_response_message</fo:inline> 
	      (see Reference Manual). </fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Variable</fo:inline> is the name of an snmp counter that
	      represents the error, e.g. <fo:inline font-family="monospace">snmpInBadCommunityUses</fo:inline>. </fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Extra</fo:inline> is the term that the Net if process
	      sent to the agent when the request was sent to the agent. </fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
          </fo:list-block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	  
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{send_pdu, Vsn, Pdu, MsgData, To, Extra}</fo:inline></fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This message is sent from a master agent when a trap is
            to be sent. </fo:block>
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Vsn</fo:inline> is either <fo:inline font-family="monospace">'version-1'</fo:inline>,
	      <fo:inline font-family="monospace">'version-2'</fo:inline>, or <fo:inline font-family="monospace">'version-3'</fo:inline>.</fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Pdu</fo:inline> is an SNMP PDU record (as defined in
	      snmp_types.hrl) with the SNMP response. </fo:block>
	    </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">MsgData</fo:inline> is the message specific data used in
	      the SNMP message.  This value is normally sent to
	      <fo:inline font-family="monospace">snmpa_mpd:generate_message/4</fo:inline>.  In SNMPv1 and
	      SNMPv2c, this message data is the community string.  In
	      SNMPv3, it is the context information. </fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">To</fo:inline> is a list of <fo:inline font-family="monospace">{Address, SecData}</fo:inline>
	      tuples i.e the destination addresses and
	      their corresponding security parameters.  This value is
	      normally sent to <fo:inline font-family="monospace">snmpa_mpd:generate_message/4</fo:inline>. </fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Extra</fo:inline> is any term that the notification sender
	      wishes to pass to the Net if process when sending a notification 
	      (see 
	      <fo:inline font-style="italic">send notification
	      </fo:inline> for more info). </fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
          </fo:list-block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	  
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{send_pdu_req, Vsn, Pdu, MsgData, To, Pid, Extra}</fo:inline></fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This message is sent from a master agent when a request is to 
	  be sent.  The only request an agent can send is Inform-Request.  
	  The net if process needs to remember the request id and the Pid, 
	  and when a response is received for the request id, send it to Pid, 
	  using a <fo:inline font-family="monospace">snmp_response_received</fo:inline> message. </fo:block>
	  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Vsn</fo:inline> is either <fo:inline font-family="monospace">'version-1'</fo:inline>,
	      <fo:inline font-family="monospace">'version-2'</fo:inline>,  or <fo:inline font-family="monospace">'version-3'</fo:inline>.</fo:block>
	    </fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Pdu</fo:inline> is an SNMP PDU record (as defined in
	      snmp_types.hrl) with the SNMP response. </fo:block>
	    </fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">MsgData</fo:inline> is the message specific data used in
	      the SNMP message.  This value is normally sent to
	      <fo:inline font-family="monospace">snmpa_mpd:generate_message/4</fo:inline>. In SNMPv1 and
	      SNMPv2c, this message data is the community string. In
	      SNMPv3, it is the context information. </fo:block>
	    </fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">To</fo:inline> is a list of <fo:inline font-family="monospace">{Address, SecData}</fo:inline>
	      tuples i.e the destination addresses and
	      their corresponding security parameters. This value is
	      normally sent to <fo:inline font-family="monospace">snmpa_mpd:generate_message/4</fo:inline>. </fo:block>
	    </fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Pid</fo:inline> is a process identifier. </fo:block>
	    </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Extra</fo:inline> is any term that the notification sender
	      wishes to pass to the Net if process when sending a notification 
	      (see 
	      <fo:inline font-style="italic">send notification
	      </fo:inline> for more info). </fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
	  </fo:list-block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp3633904" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Notes</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since the Net if process is responsible for encoding and
        decoding of SNMP messages, it must also update the relevant
        counters in the SNMP group in MIB-II. It can use the functions
        in the module <fo:inline font-family="monospace">snmpa_mpd</fo:inline> for this purpose (refer to the 
        Reference Manual, section <fo:inline font-family="monospace">snmp</fo:inline>, 
        module <fo:inline font-style="italic">snmpa_mpd</fo:inline>
        for more details.)
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are also some useful functions for encoding and
        decoding of SNMP messages in the module 
        <fo:inline font-style="italic">snmp_pdus</fo:inline>.
        </fo:block>
    
  <fo:block id="idp3642480" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.13  Definition of Manager Net if</fo:marker>1.13  Definition of Manager Net if</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/><fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="snmp_manager_netif_1.gif"/>
    <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        13.1:
         
        The Purpose of Manager Net if</fo:block>
  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Network Interface (Net if) process delivers SNMP PDUs to the
  manager server, and receives SNMP PDUs from the manager server. 
  The most common behaviour of a Net if process is that is receives 
  request PDU from the manager server, encodes the PDU into bytes
  and transmits the bytes onto the network to an agent. When the 
  reply from the agent is received by the Net if process, which it
  decodes into an SNMP PDU, which it sends to the manager server. </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, that simple behaviour can be modified in numerous
  ways. For example, the Net if process can apply some kind of
  encrypting/decrypting scheme on the bytes. </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The snmp application provides two different modules, 
  <fo:inline font-family="monospace">snmpm_net_if</fo:inline> (the default) and <fo:inline font-family="monospace">snmpm_net_if_mt</fo:inline>, 
  both uses UDP as the transport protocol i.e the transport domains
  <fo:inline font-family="monospace">transportDomainUdpIpv4</fo:inline> and/or <fo:inline font-family="monospace">transportDomainUdpIpv6</fo:inline>.
  The difference between the two modules is that the latter is
  "multi-threaded",  i.e. for each message/request a new process
  is created that processes the message/request and then exits. </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also possible to write your own Net if process and
  this section describes how to do that.</fo:block><fo:block id="idp3652448" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.13.1 
      Mandatory Functions</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A Net if process must implement the SNMP manager 
    <fo:inline font-style="italic">network interface behaviour</fo:inline>. </fo:block>
  <fo:block id="idp3654560" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.13.2 
      Messages</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The section <fo:inline font-weight="bold">Messages</fo:inline> describes mandatory messages, which
      Net if must send to the manager server process.     
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this section a <fo:inline font-family="monospace">Domain</fo:inline> field is the transport domain i.e
    one of <fo:inline font-family="monospace">transportDomainUdpIpv4</fo:inline> or <fo:inline font-family="monospace">transportDomainUdpIpv6</fo:inline>,
    and an <fo:inline font-family="monospace">Addr</fo:inline> field is an
    <fo:inline font-family="monospace">{</fo:inline><fo:inline font-style="italic"><fo:inline font-family="monospace">IpAddr</fo:inline></fo:inline><fo:inline font-family="monospace">,IpPort}</fo:inline> tuple.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Net if must send the following message when it receives an
      SNMP PDU from the network that is aimed for the MasterAgent:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Server ! {snmp_pdu, Pdu, Domain, Addr}
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Pdu</fo:inline> is an SNMP PDU record, as defined in
          <fo:inline font-family="monospace">snmp_types.hrl</fo:inline>, with the SNMP request.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Domain</fo:inline> is the source transport domain. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Addr</fo:inline> is the source address. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Server ! {snmp_trap, Trap, Domain, Addr}
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Trap</fo:inline> is either an SNMP pdu record or an trappdu record, 
          as defined in <fo:inline font-family="monospace">snmp_types.hrl</fo:inline>, with the SNMP request.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Domain</fo:inline> is the source transport domain. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Addr</fo:inline> is the source address. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Server ! {snmp_inform, Ref, Pdu, PduMS, Domain, Addr}
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Ref</fo:inline> is either the atom <fo:inline font-family="monospace">ignore</fo:inline> or something
          that can be used to identify the inform-request (e.g. request-id).
          <fo:inline font-family="monospace">ignore</fo:inline> is used if the response (acknowledgment) to the
          inform-request has already been sent (this means that the server 
          will not make the call to the 
          <fo:inline font-style="italic">inform_response</fo:inline> 
          function). See the 
          <fo:inline font-style="italic">inform request behaviour</fo:inline> 
          configuration option for more info.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Pdu</fo:inline> is an SNMP PDU record, as defined in
          <fo:inline font-family="monospace">snmp_types.hrl</fo:inline>, with the SNMP request.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Domain</fo:inline> is the source transport domain. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Addr</fo:inline> is the source address. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Server ! {snmp_report, Data, Domain, Addr}
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Data</fo:inline> is either <fo:inline font-family="monospace">{ok, Pdu}</fo:inline> or 
          <fo:inline font-family="monospace">{error, ReqId, ReasonInfo, Pdu}</fo:inline>. Which one is used depends 
          on the return value from the MPD 
          <fo:inline font-style="italic">process_msg</fo:inline> function. If the MsgData is <fo:inline font-family="monospace">ok</fo:inline>, 
          the first is used, and if it is <fo:inline font-family="monospace">{error, ReqId, Reason}</fo:inline>
          the latter is used.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Pdu</fo:inline> is an SNMP PDU record, as defined in
          <fo:inline font-family="monospace">snmp_types.hrl</fo:inline>, with the SNMP request.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ReqId</fo:inline> is an integer.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ReasonInfo</fo:inline> is a term().</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Domain</fo:inline> is the source transport domain. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Addr</fo:inline> is the source address. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block id="idp3691776" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Notes</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since the Net if process is responsible for encoding and
        decoding of SNMP messages, it must also update the relevant
        counters in the SNMP group in MIB-II.  It can use the functions
        in the module <fo:inline font-family="monospace">snmpm_mpd</fo:inline> for this purpose (refer to the 
        Reference Manual, section <fo:inline font-family="monospace">snmp</fo:inline>, module <fo:inline font-family="monospace">snmpm_mpd</fo:inline>
        for more details).
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are also some useful functions for encoding and
        decoding of SNMP messages in the module <fo:inline font-family="monospace">snmp_pdus</fo:inline>.
        </fo:block>
    
  <fo:block id="idp3699808" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.14  Audit Trail Log</fo:marker>1.14  Audit Trail Log</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The chapter <fo:inline font-weight="bold">Audit Trail Log</fo:inline> describes the audit trail logging.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Both the agent and the manager can be configured to log 
    incoming and outgoing messages. It uses the Erlang standard log
    mechanism <fo:inline font-family="monospace">disk_log</fo:inline> for logging. The size and location of
    the log files are configurable. A wrap log is used, which means
    that when the log has grown to a maximum size, it starts from the
    beginning of the log, overwriting existing log records.
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The log can be either a <fo:inline font-family="monospace">read</fo:inline>, <fo:inline font-family="monospace">write</fo:inline> or a 
    <fo:inline font-family="monospace">read_write</fo:inline>. 
    </fo:block><fo:block id="idp3707168" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.14.1 
      Agent Logging</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the agent, a <fo:inline font-family="monospace">write</fo:inline>, means that all <fo:inline font-family="monospace">set</fo:inline> 
      requests and their responses are stored. No <fo:inline font-family="monospace">get</fo:inline> requests
      or traps are stored in a <fo:inline font-family="monospace">write</fo:inline>. A <fo:inline font-family="monospace">read_write</fo:inline>, 
      all requests, responses and traps are stored.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The log uses a raw data format (basically the BER encoded
      message), in order to minimize the CPU load needed for the log
      mechanism.  This means that the log is not human readable, but
      needs to be formatted off-line before it can be read.  Use the
      function 
      <fo:inline font-style="italic">snmpa:log_to_txt</fo:inline> 
      for this purpose.
      </fo:block>
  <fo:block id="idp3712320" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.14.2 
      Manager Logging</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the manager, a <fo:inline font-family="monospace">write</fo:inline>, means that all  
      requests (<fo:inline font-family="monospace">set</fo:inline> and <fo:inline font-family="monospace">get</fo:inline>) and their responses are stored. 
      No traps are stored in a <fo:inline font-family="monospace">write</fo:inline>. A <fo:inline font-family="monospace">read_write</fo:inline>, 
      all requests, responses and traps are stored.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The log uses a raw data format (basically the BER encoded
      message), in order to minimize the CPU load needed for the log
      mechanism. This means that the log is not human readable, but
      needs to be formatted off-line before it can be read. Use the
      function 
      <fo:inline font-style="italic">snmpm:log_to_txt</fo:inline> 
      for this purpose.
      </fo:block>
  <fo:block id="idp3721392" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.15  Advanced Agent Topics</fo:marker>1.15  Advanced Agent Topics</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The chapter <fo:inline font-weight="bold">Advanced Agent Topics</fo:inline> describes the more advanced 
    agent related features of the SNMP development tool. The following topics 
    are covered:
    </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>When to use a Sub-agent</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Agent semantics</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Sub-agents and dependencies</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Distributed tables</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Fault tolerance</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Using Mnesia tables as SNMP tables</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Audit Trail Logging</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Deviations from the standard
    </fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block id="idp3730112" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.15.1 
      When to use a Sub-agent</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The section <fo:inline font-weight="bold">When to use a Sub-agent</fo:inline> describes situations
      where the mechanism of loading and unloading MIBs is insufficient. 
      In these cases a sub-agent is needed.
      </fo:block>

    <fo:block id="idp3731872" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Special Set Transaction Mechanism</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each sub-agent can implement its own mechanisms for
        <fo:inline font-family="monospace">set</fo:inline>, <fo:inline font-family="monospace">get</fo:inline> and <fo:inline font-family="monospace">get-next</fo:inline>. For example, if the
        application requires the <fo:inline font-family="monospace">get</fo:inline> mechanism to be
        asynchronous, or needs a N-phase <fo:inline font-family="monospace">set</fo:inline> mechanism, a
        specialized sub-agent should be used.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The toolkit allows different kinds of sub-agents at the same
        time. Accordingly, different MIBs can have different <fo:inline font-family="monospace">set</fo:inline>
        or <fo:inline font-family="monospace">get</fo:inline> mechanisms.
        </fo:block>
    

    <fo:block id="idp3737104" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Process Communication</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A simple distributed agent can be managed without sub-agents. 
        The instrumentation functions can use distributed Erlang to 
        communicate with other parts of the application. However, a 
        sub-agent can be used on each node if this generates too much 
        unnecessary traffic. A sub-agent processes requests per 
        incoming SNMP request, not per variable. Therefore the network 
        traffic is minimized.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the instrumentation functions communicate with UNIX
        processes, it might be a good idea to use a special
        sub-agent. This sub-agent sends the SNMP request to the other
        process in one packet in order to minimize context switches. For
        example, if a whole MIB is implemented on the C level in UNIX,
        but you still want to use the Erlang SNMP tool, then you may
        have one special sub-agent, which sends the variables in the
        request as a single operation down to C.
        </fo:block>
    

    <fo:block id="idp3739840" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Frequent Loading of MIBs</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Loading and unloading of MIBs are quite cheap
        operations. However, if the application does this very often,
        perhaps several times per minute, it should load the MIBs once
        and for all in a sub-agent. This sub-agent only registers and
        unregisters itself under another agent instead of loading the
        MIBs each time. This is cheaper than loading an MIB.
        </fo:block>
    

    <fo:block id="idp3741584" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Interaction With Other SNMP Agent Toolkits</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the SNMP agent needs to interact with sub-agents
        constructed in another package, a special sub-agent should be
        used, which communicates through a protocol specified by the
        other package.
        </fo:block>
    
  <fo:block id="idp3743328" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.15.2 
      Agent Semantics</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The agent can be configured to be multi-threaded, to process
      one incoming request at a time, or to have a request limit
      enabled (this can be used for load control or to limit the effect
      of DoS attacks). If it is multi-threaded, read requests (<fo:inline font-family="monospace">get</fo:inline>, 
      <fo:inline font-family="monospace">get-next</fo:inline> and <fo:inline font-family="monospace">get-bulk</fo:inline>) and traps are processed in 
      parallel with each other and <fo:inline font-family="monospace">set</fo:inline> requests. However, all 
      <fo:inline font-family="monospace">set</fo:inline> requests are serialized, which means that if the agent 
      is waiting for the application to complete a complicated write 
      operation, it will not process any new write requests until this 
      operation is finished. It processes read requests and sends traps, 
      concurrently. The reason for not handle write requests in parallel is 
      that a complex locking mechanism would be needed even in the simplest 
      cases. Even with the scheme described above, the user must be 
      careful not to violate that the <fo:inline font-family="monospace">set</fo:inline> requests are atoms. 
      If this is hard to do, do not use the multi-threaded feature.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The order within an request is undefined and variables are not
      processed in a defined order. Do not assume that the first
      variable in the PDU will be processed before the second, even if
      the agent processes variables in this order. It
      cannot even be  assumed that requests belonging to different
      sub-agents have any order.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the manager tries to set the same variable many times in the
      same PDU, the agent is free to improvise. There is no definition
      which determines if the instrumentation will be called once or
      twice. If called once only, there is no definition that determines 
      which of the new values is going to be supplied.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the agent receives a request, it keeps the request ID for
      one second after the response is sent. If the agent receives
      another request with the same request ID during this time, from
      the same IP address and UDP port, that request will be
      discarded. This mechanism has nothing to do with the function
      <fo:inline font-family="monospace">snmpa:current_request_id/0</fo:inline>.</fo:block>
  <fo:block id="idp3751040" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.15.3 
      Sub-agents and Dependencies </fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The toolkit supports the use of different types of sub-agents,
      but not the construction of sub-agents.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, the toolkit does not support dependencies between
      sub-agents. A sub-agent should by definition be stand alone and it is
      therefore not good design to create dependencies between them.
      </fo:block>
  <fo:block id="idp3753136" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.15.4 
      Distributed Tables</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A common situation in more complex systems is that the data in
      a table is distributed. Different table rows are implemented in
      different places. Some SNMP tool-kits dedicate an SNMP sub-agent for
      each part of the table and load the corresponding MIB into all
      sub-agents. The Master Agent is responsible for presenting the
      distributed table as a single table to the manager. The toolkit
      supplied uses a different method.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The method used to implement distributed tables with this SNMP
      tool is to implement a table coordinator process responsible for 
      coordinating the processes, which hold the table data and they 
      are called  table holders. All table holders must in some way be 
      known by the coordinator; the structure of the table data 
      determines how this is achieved. The coordinator may require 
      that the table holders explicitly register themselves and specify 
      their information. In other cases, the table holders can be 
      determined once at compile time.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the instrumentation function for the distributed table is
      called, the request should be forwarded to the table
      coordinator. The coordinator finds the requested information among
      the table holders and then returns the answer to the
      instrumentation function. The SNMP toolkit contains no support for
      coordination of tables since this must be independent of the
      implementation.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The advantages of separating the table coordinator from the
      SNMP tool are:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>We do not need a sub-agent for each table holder. Normally,
       the sub-agent is needed to take care of communication, but in
       Distributed Erlang we use ordinary message passing.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Most likely, some type of table coordinator already
       exists. This process should take care of the instrumentation for
       the table.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The method used to present a distributed table is strongly
       application dependent. The use of different masking techniques
       is only valid for a small subset of problems and registering
       every row in a distributed table makes it non-distributed.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp3759936" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.15.5 
      Fault Tolerance</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SNMP agent toolkit gets input from three different sources:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>UDP packets from the network</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>return values from the user defined instrumentation functions</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>return values from the MIB.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The agent is highly fault tolerant. If the manager gets an
      unexpected response from the agent, it is possible that some
      instrumentation function has returned an erroneous value. The
      agent will not crash even if the instrumentation does. It should
      be noted that if an instrumentation function enters an infinite
      loop, the agent will also be blocked forever. The supervisor ,or
      the application, specifies how to restart the agent.
      </fo:block>

    <fo:block id="idp3764208" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Using the SNMP Agent in a Distributed Environment</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The normal way to use the agent in a distributed
        environment is to use one master agent located at one node,
        and zero or more sub-agents located on other nodes.  However,
        this configuration makes the master agent node a single point
        of failure.  If that node goes down, the agent will not work.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One solution to this problem is to make the snmp application
        a distributed Erlang application, and that means, the agent
        may be configured to run on one of several nodes.  If the node
        where it runs goes down, another node restarts the agent.
        This is called <fo:inline font-weight="bold">failover</fo:inline>.  When the node starts again,
        it may  <fo:inline font-weight="bold">takeover</fo:inline> the application.  This solution to
        the problem adds another problem.  Generally, the new node has
        another IP address than the first one, which may cause
        problems in the  communication between the SNMP managers and
        the agent.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the snmp agent is configured as a distributed Erlang
        application, it will during takeover try to load the same MIBs
        that were loaded at the old node. It uses the same filenames
        as the old node. If the MIBs are not located in the same
        paths at the different nodes, the MIBs must be loaded
        explicitly after takeover.
        </fo:block>
    
  <fo:block id="idp3768768" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.15.6 
      Using Mnesia Tables as SNMP Tables</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Mnesia DBMS can be used for storing data of SNMP
      tables. This means that an SNMP table can be implemented as a
      Mnesia table, and that a Mnesia table can be made visible via
      SNMP. This mapping is largely automated.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are three main reasons for using this mapping:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>We get all features of Mnesia, such as fault tolerance,
       persistent data storage, replication, and so on.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Much of the work involved is automated. This includes
      <fo:inline font-family="monospace">get-next</fo:inline> processing and <fo:inline font-family="monospace">RowStatus</fo:inline> handling.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The table may be used as an ordinary Mnesia table, using
       the Mnesia API internally in the application at the same time as
       it is visible through SNMP.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When this mapping is used, insertion and deletion in the
      original Mnesia table is slower, with a factor O(log n). The read
      access is not affected.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A drawback with implementing an SNMP table as a Mnesia table is
      that the internal resource is forced to use the table definition
      from the MIB, which means that the external data model must be
      used internally. Actually, this is only partially true. The Mnesia
      table may extend the SNMP table, which means that the Mnesia table
      may have columns which are use internally and are not seen by
      SNMP. Still, the data model from SNMP must be maintained. Although
      this is undesirable, it is a pragmatic compromise in many
      situations where simple and efficient implementation is preferable
      to abstraction.
      </fo:block>

    <fo:block id="idp3775632" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Creating the Mnesia Table</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The table must be created in Mnesia before the manager can
        use it. The table must be declared as type <fo:inline font-family="monospace">snmp</fo:inline>.  This
        makes the table ordered in accordance with the lexicographical
        ordering rules of SNMP.  The name of the Mnesia table must be
        identical to the SNMP table name.  The types of the INDEX fields
        in the corresponding SNMP table must be specified.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the SNMP table has more than one INDEX column, the
        corresponding Mnesia row is a tuple, where the first element 
        is a tuple with the INDEX columns. Generally, if the SNMP table 
        has <fo:inline font-weight="bold">N</fo:inline> INDEX columns and <fo:inline font-weight="bold">C</fo:inline> data columns, the 
        Mnesia table is of arity <fo:inline font-weight="bold">(C-N)+1</fo:inline>, where the key is a 
        tuple of arity <fo:inline font-weight="bold">N</fo:inline> if <fo:inline font-weight="bold">N &gt; 1</fo:inline>, or a single term 
        if <fo:inline font-weight="bold">N = 1</fo:inline>.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Refer to the Mnesia User's Guide for information on how to
        declare a Mnesia table as an SNMP table.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example illustrates a situation in which we
        have an SNMP table that we wish to implement as a Mnesia
        table. The table stores information about employees at a
        company. Each employee is indexed with the department number and
        the name.
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
       empTable OBJECT-TYPE
              SYNTAX      SEQUENCE OF EmpEntry
              ACCESS      not-accessible
              STATUS      mandatory
              DESCRIPTION
                      "A table with information about employees."
       ::= { emp 1}
       empEntry OBJECT-TYPE
              SYNTAX      EmpEntry
              ACCESS      not-accessible
              STATUS      mandatory
              DESCRIPTION
                 ""
              INDEX      { empDepNo, empName }
       ::= { empTable 1 }
       EmpEntry ::=
              SEQUENCE {
                  empDepNo         INTEGER,
                  empName          DisplayString,
                  empTelNo         DisplayString,
                  empStatus        RowStatus
              }
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The corresponding Mnesia table is specified as follows:
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mnesia:create_table([{name, employees},
                     {snmp, [{key, {integer, string}}]},
                     {attributes, [key, telno, row_status]}]).
      </fo:block>
      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the Mnesia tables, the two key columns are stored as a
          tuple with two elements. Therefore, the arity of the table is
          3.</fo:block>
      </fo:block>
    

    <fo:block id="idp3786352" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Instrumentation Functions</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MIB table shown in the previous section can be compiled
        as follows:
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">snmpc:compile("EmpMIB", [{db, mnesia}]).</fo:inline>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is all that has to be done! Now the manager can read,
        add, and modify rows. Also, you can use the ordinary Mnesia API
        to access the table from your programs. The only explicit action
        is to create the Mnesia table, an action the user has to perform
        in order to create the required table schemas.</fo:block>
    

    <fo:block id="idp3789488" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Adding Own Actions</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is often necessary to take some specific action when a
        table is modified. This is accomplished with an instrumentation
        function. It executes some specific code when the table is set,
        and passes all other requests down to the pre-defined function.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example illustrates this idea:
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
emp_table(set, RowIndex, Cols) -&gt;
    notify_internal_resources(RowIndex, Cols),
    snmp_generic:table_func(set, RowIndex, Cols, {empTable, mnesia});
emp_table(Op, RowIndex, Cols) -&gt;
    snmp_generic:table_func(Op, RowIndex, Cols, {empTable, mnesia}).
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default instrumentation functions are defined in the
        module <fo:inline font-family="monospace">snmp_generic</fo:inline>. Refer to the Reference Manual,
        section SNMP, module <fo:inline font-family="monospace">snmp_generic</fo:inline> for details.</fo:block>
    

    <fo:block id="idp3794000" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Extending the Mnesia Table</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A table may contain columns that are used internally, but
        should not be visible to a manager. These internal columns must
        be the last columns in the table. The <fo:inline font-family="monospace">set</fo:inline> operation will
        not work with this arrangement, because there are columns that
        the agent does not know about. This situation is handled by
        adding values for the internal columns in the <fo:inline font-family="monospace">set</fo:inline>
        function.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To illustrate this, suppose we extend our Mnesia
        <fo:inline font-family="monospace">empTable</fo:inline> with one internal column. We create it as
        before, but with an arity of 4, by adding another attribute.
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mnesia:create_table([{name, employees},
                     {snmp, [{key, {integer, string}}]},
                     {attributes, {key, telno, row_status, internal_col}}]).
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The last column is the internal column. When performing a
        <fo:inline font-family="monospace">set</fo:inline> operation, which creates a row, we must give a
        value to the internal column. The instrumentation functions will now
        look as follows:
        </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-define(createAndGo, 4).
-define(createAndWait, 5).

emp_table(set, RowIndex, Cols) -&gt;
  notify_internal_resources(RowIndex, Cols),
  NewCols =
    case is_row_created(empTable, Cols) of
      true -&gt; Cols ++ [{4, "internal"}]; % add internal column
      false -&gt; Cols                      % keep original cols
  end,
  snmp_generic:table_func(set, RowIndex, NewCols, {empTable, mnesia});
emp_table(Op, RowIndex, Cols) -&gt;
  snmp_generic:table_func(Op, RowIndex, Cols, {empTable, mnesia}).

is_row_created(Name, Cols) -&gt;
  case snmp_generic:get_status_col(Name, Cols) of
    {ok, ?createAndGo} -&gt; true;
    {ok, ?createAndWait} -&gt; true;
    _ -&gt; false
  end.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a row is created, we always set the internal column to
        <fo:inline font-family="monospace">"internal"</fo:inline>.
        </fo:block>
    
  <fo:block id="idp3802128" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.15.7 
      Deviations from the Standard</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In some aspects the agent does not implement SNMP fully.  Here
      are the differences:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The default functions and <fo:inline font-family="monospace">snmp_generic</fo:inline> cannot
       handle an object of type <fo:inline font-family="monospace">NetworkAddress</fo:inline> as INDEX
       (SNMPv1 only!).  Use <fo:inline font-family="monospace">IpAddress</fo:inline> instead.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The agent does not check complex ranges specified for
       INTEGER objects.  In these cases it just checks that the value
       lies within the minimum and maximum values specified.  For
       example, if the range is specified as <fo:inline font-family="monospace">1..10 | 12..20</fo:inline>
       the agent would let 11 through, but not 0 or 21.  The
       instrumentation functions must check the complex ranges
       itself.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The agent will never generate the <fo:inline font-family="monospace">wrongEncoding</fo:inline>
       error.  If a variable binding is erroneous encoded, the
      <fo:inline font-family="monospace">asn1ParseError</fo:inline> counter will be incremented.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-family="monospace">tooBig</fo:inline> error in an SNMPv1 packet will always use
       the <fo:inline font-family="monospace">'NULL'</fo:inline> value in all variable bindings.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The default functions and <fo:inline font-family="monospace">snmp_generic</fo:inline> do not check
       the range of each OCTET in textual conventions derived from
       OCTET STRING, e.g. <fo:inline font-family="monospace">DisplayString</fo:inline> and
      <fo:inline font-family="monospace">DateAndTime</fo:inline>.  This must be checked in an overloaded
      <fo:inline font-family="monospace">is_set_ok</fo:inline> function.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp3816512" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.16  SNMP Appendix A</fo:marker>1.16  SNMP Appendix A</fo:block><fo:block id="idp3819872" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.16.1 
      Appendix A</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This appendix describes the conversion of SNMPv2 to SNMPv1
      error messages. The instrumentation functions should return v2
      error messages.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mapping of SNMPv2 error message to SNMPv1:
      </fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">SNMPv2 message</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">SNMPv1 message</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">noError</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">noError</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">genErr</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">genErr</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">noAccess</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">noSuchName</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">wrongType</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">badValue</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">wrongLength</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">badValue</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">wrongEncoding</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">badValue</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">wrongValue</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">badValue</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">noCreation</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">noSuchName</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">inconsistentValue</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">badValue</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">resourceUnavailable</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">genErr</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">commitFailed</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">genErr</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">undoFailed</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">genErr</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">notWritable</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">noSuchName</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">inconsistentName</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">noSuchName</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        16.1:
         
        Error Messages</fo:block>
  <fo:block id="idp3863408" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.17  SNMP Appendix B</fo:marker>1.17  SNMP Appendix B</fo:block><fo:block id="idp3866768" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.17.1 
      Appendix B</fo:block>
    

    <fo:block id="idp3867504" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">RowStatus (from RFC1903)</fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
RowStatus ::= TEXTUAL-CONVENTION
    STATUS       current
    DESCRIPTION
            "The RowStatus textual convention is used to manage the
            creation and deletion of conceptual rows, and is used as the
            value of the SYNTAX clause for the status column of a
            conceptual row (as described in Section 7.7.1 in RFC1902.)

            The status column has six defined values:

                 - `active', which indicates that the conceptual row is
                 available for use by the managed device;

                 - `notInService', which indicates that the conceptual
                 row exists in the agent, but is unavailable for use by
                 the managed device (see NOTE below);

                 - `notReady', which indicates that the conceptual row
                 exists in the agent, but is missing information
                 necessary in order to be available for use by the
                 managed device;

                 - `createAndGo', which is supplied by a management
                 station wishing to create a new instance of a
                 conceptual row and to have its status automatically set
                 to active, making it available for use by the managed
                 device;

                 - `createAndWait', which is supplied by a management
                 station wishing to create a new instance of a
                 conceptual row (but not make it available for use by
                 the managed device); and,

                 - `destroy', which is supplied by a management station
                 wishing to delete all of the instances associated with
                 an existing conceptual row.

            Whereas five of the six values (all except `notReady') may
            be specified in a management protocol set operation, only
            three values will be returned in response to a management
            protocol retrieval operation:  `notReady', `notInService' or
            `active'.  That is, when queried, an existing conceptual row
            has only three states:  it is either available for use by
            the managed device (the status column has value `active');
            it is not available for use by the managed device, though
            the agent has sufficient information to make it so (the
            status column has value `notInService'); or, it is not
            available for use by the managed device, and an attempt to
            make it so would fail because the agent has insufficient
            information (the state column has value `notReady').


                                     NOTE WELL

                 This textual convention may be used for a MIB table,
                 irrespective of whether the values of that table's
                 conceptual rows are able to be modified while it is
                 active, or whether its conceptual rows must be taken
                 out of service in order to be modified.  That is, it is
                 the responsibility of the DESCRIPTION clause of the
                 status column to specify whether the status column must
                 not be `active' in order for the value of some other
                 column of the same conceptual row to be modified.  If
                 such a specification is made, affected columns may be
                 changed by an SNMP set PDU if the RowStatus would not
                 be equal to `active' either immediately before or after
                 processing the PDU.  In other words, if the PDU also
                 contained a varbind that would change the RowStatus
                 value, the column in question may be changed if the
                 RowStatus was not equal to `active' as the PDU was
                 received, or if the varbind sets the status to a value
                 other than 'active'.


            Also note that whenever any elements of a row exist, the
            RowStatus column must also exist.

            To summarize the effect of having a conceptual row with a
            status column having a SYNTAX clause value of RowStatus,
            consider the following state diagram:


                                         STATE
              +--------------+-----------+-------------+-------------
              |      A       |     B     |      C      |      D
              |              |status col.|status column|
              |status column |    is     |      is     |status column
    ACTION    |does not exist|  notReady | notInService|  is active
--------------+--------------+-----------+-------------+-------------
set status    |noError    -&gt;D|inconsist- |inconsistent-|inconsistent-
column to     |       or     |   entValue|        Value|        Value
createAndGo   |inconsistent- |           |             |
              |         Value|           |             |
--------------+--------------+-----------+-------------+-------------
set status    |noError  see 1|inconsist- |inconsistent-|inconsistent-
column to     |       or     |   entValue|        Value|        Value
createAndWait |wrongValue    |           |             |
--------------+--------------+-----------+-------------+-------------
set status    |inconsistent- |inconsist- |noError      |noError
column to     |         Value|   entValue|             |
active        |              |           |             |
              |              |     or    |             |
              |              |           |             |
              |              |see 2   -&gt;D|          -&gt;D|          -&gt;D
--------------+--------------+-----------+-------------+-------------
set status    |inconsistent- |inconsist- |noError      |noError   -&gt;C
column to     |         Value|   entValue|             |
notInService  |              |           |             |
              |              |     or    |             |      or
              |              |           |             |
              |              |see 3   -&gt;C|          -&gt;C|wrongValue
--------------+--------------+-----------+-------------+-------------
set status    |noError       |noError    |noError      |noError
column to     |              |           |             |
destroy       |           -&gt;A|        -&gt;A|          -&gt;A|          -&gt;A
--------------+--------------+-----------+-------------+-------------
set any other |see 4         |noError    |noError      |see 5
column to some|              |           |             |
value         |              |      see 1|          -&gt;C|          -&gt;D
--------------+--------------+-----------+-------------+-------------

            (1) goto B or C, depending on information available to the
            agent.

            (2) if other variable bindings included in the same PDU,
            provide values for all columns which are missing but
            required, then return noError and goto D.

            (3) if other variable bindings included in the same PDU,
            provide values for all columns which are missing but
            required, then return noError and goto C.

            (4) at the discretion of the agent, the return value may be
            either:

                 inconsistentName:  because the agent does not choose to
                 create such an instance when the corresponding
                 RowStatus instance does not exist, or

                 inconsistentValue:  if the supplied value is
                 inconsistent with the state of some other MIB object's
                 value, or

                 noError: because the agent chooses to create the
                 instance.

            If noError is returned, then the instance of the status
            column must also be created, and the new state is B or C,
            depending on the information available to the agent.  If
            inconsistentName or inconsistentValue is returned, the row
            remains in state A.

            (5) depending on the MIB definition for the column/table,
            either noError or inconsistentValue may be returned.

            NOTE: Other processing of the set request may result in a
            response other than noError being returned, e.g.,
            wrongValue, noCreation, etc.


                              Conceptual Row Creation

            There are four potential interactions when creating a
            conceptual row:  selecting an instance-identifier which is
            not in use; creating the conceptual row; initializing any
            objects for which the agent does not supply a default; and,
            making the conceptual row available for use by the managed
            device.


            Interaction 1: Selecting an Instance-Identifier

            The algorithm used to select an instance-identifier varies
            for each conceptual row.  In some cases, the instance-
            identifier is semantically significant, e.g., the
            destination address of a route, and a management station
            selects the instance-identifier according to the semantics.

            In other cases, the instance-identifier is used solely to
            distinguish conceptual rows, and a management station
            without specific knowledge of the conceptual row might
            examine the instances present in order to determine an
            unused instance-identifier.  (This approach may be used, but
            it is often highly sub-optimal; however, it is also a
            questionable practice for a naive management station to
            attempt conceptual row creation.)

            Alternately, the MIB module which defines the conceptual row
            might provide one or more objects which provide assistance
            in determining an unused instance-identifier.  For example,
            if the conceptual row is indexed by an integer-value, then
            an object having an integer-valued SYNTAX clause might be
            defined for such a purpose, allowing a management station to
            issue a management protocol retrieval operation.  In order
            to avoid unnecessary collisions between competing management
            stations, `adjacent' retrievals of this object should be
            different.

            Finally, the management station could select a pseudo-random
            number to use as the index.  In the event that this index
            was already in use and an inconsistentValue was returned in
            response to the management protocol set operation, the
            management station should simply select a new pseudo-random
            number and retry the operation.

            A MIB designer should choose between the two latter
            algorithms based on the size of the table (and therefore the
            efficiency of each algorithm).  For tables in which a large
            number of entries are expected, it is recommended that a MIB
            object be defined that returns an acceptable index for
            creation.  For tables with small numbers of entries, it is
            recommended that the latter pseudo-random index mechanism be
            used.


            Interaction 2: Creating the Conceptual Row

            Once an unused instance-identifier has been selected, the
            management station determines if it wishes to create and
            activate the conceptual row in one transaction or in a
            negotiated set of interactions.

            Interaction 2a: Creating and Activating the Conceptual Row

            The management station must first determine the column
            requirements, i.e., it must determine those columns for
            which it must or must not provide values.  Depending on the
            complexity of the table and the management station's
            knowledge of the agent's capabilities, this determination
            can be made locally by the management station.  Alternately,
            the management station issues a management protocol get
            operation to examine all columns in the conceptual row that
            it wishes to create.  In response, for each column, there
            are three possible outcomes:

                 - a value is returned, indicating that some other
                 management station has already created this conceptual
                 row.  We return to interaction 1.

                 - the exception `noSuchInstance' is returned,
                 indicating that the agent implements the object-type
                 associated with this column, and that this column in at
                 least one conceptual row would be accessible in the MIB
                 view used by the retrieval were it to exist. For those
                 columns to which the agent provides read-create access,
                 the `noSuchInstance' exception tells the management
                 station that it should supply a value for this column
                 when the conceptual row is to be created.

                 - the exception `noSuchObject' is returned, indicating
                 that the agent does not implement the object-type
                 associated with this column or that there is no
                 conceptual row for which this column would be
                 accessible in the MIB view used by the retrieval.  As
                 such, the management station cannot issue any
                 management protocol set operations to create an
                 instance of this column.

            Once the column requirements have been determined, a
            management protocol set operation is accordingly issued.
            This operation also sets the new instance of the status
            column to `createAndGo'.

            When the agent processes the set operation, it verifies that
            it has sufficient information to make the conceptual row
            available for use by the managed device.  The information
            available to the agent is provided by two sources:  the
            management protocol set operation which creates the
            conceptual row, and, implementation-specific defaults
            supplied by the agent (note that an agent must provide
            implementation-specific defaults for at least those objects
            which it implements as read-only).  If there is sufficient
            information available, then the conceptual row is created, a
            `noError' response is returned, the status column is set to
            `active', and no further interactions are necessary (i.e.,
            interactions 3 and 4 are skipped).  If there is insufficient
            information, then the conceptual row is not created, and the
            set operation fails with an error of `inconsistentValue'.
            On this error, the management station can issue a management
            protocol retrieval operation to determine if this was
            because it failed to specify a value for a required column,
            or, because the selected instance of the status column
            already existed.  In the latter case, we return to
            interaction 1.  In the former case, the management station
            can re-issue the set operation with the additional
            information, or begin interaction 2 again using
            `createAndWait' in order to negotiate creation of the
            conceptual row.

                                     NOTE WELL

                 Regardless of the method used to determine the column
                 requirements, it is possible that the management
                 station might deem a column necessary when, in fact,
                 the agent will not allow that particular columnar
                 instance to be created or written.  In this case, the
                 management protocol set operation will fail with an
                 error such as `noCreation' or `notWritable'.  In this
                 case, the management station decides whether it needs
                 to be able to set a value for that particular columnar
                 instance.  If not, the management station re-issues the
                 management protocol set operation, but without setting
                 a value for that particular columnar instance;
                 otherwise, the management station aborts the row
                 creation algorithm.

            Interaction 2b: Negotiating the Creation of the Conceptual
            Row

            The management station issues a management protocol set
            operation which sets the desired instance of the status
            column to `createAndWait'.  If the agent is unwilling to
            process a request of this sort, the set operation fails with
            an error of `wrongValue'.  (As a consequence, such an agent
            must be prepared to accept a single management protocol set
            operation, i.e., interaction 2a above, containing all of the
            columns indicated by its column requirements.)  Otherwise,
            the conceptual row is created, a `noError' response is
            returned, and the status column is immediately set to either
            `notInService' or `notReady', depending on whether it has
            sufficient information to make the conceptual row available
            for use by the managed device.  If there is sufficient
            information available, then the status column is set to
            `notInService'; otherwise, if there is insufficient
            information, then the status column is set to `notReady'.
            Regardless, we proceed to interaction 3.

            Interaction 3: Initializing non-defaulted Objects

            The management station must now determine the column
            requirements.  It issues a management protocol get operation
            to examine all columns in the created conceptual row.  In
            the response, for each column, there are three possible
            outcomes:

                 - a value is returned, indicating that the agent
                 implements the object-type associated with this column
                 and had sufficient information to provide a value.  For
                 those columns to which the agent provides read-create
                 access (and for which the agent allows their values to
                 be changed after their creation), a value return tells
                 the management station that it may issue additional
                 management protocol set operations, if it desires, in
                 order to change the value associated with this column.

                 - the exception `noSuchInstance' is returned,
                 indicating that the agent implements the object-type
                 associated with this column, and that this column in at
                 least one conceptual row would be accessible in the MIB
                 view used by the retrieval were it to exist. However,
                 the agent does not have sufficient information to
                 provide a value, and until a value is provided, the
                 conceptual row may not be made available for use by the
                 managed device.  For those columns to which the agent
                 provides read-create access, the `noSuchInstance'
                 exception tells the management station that it must
                 issue additional management protocol set operations, in
                 order to provide a value associated with this column.

                 - the exception `noSuchObject' is returned, indicating
                 that the agent does not implement the object-type
                 associated with this column or that there is no
                 conceptual row for which this column would be
                 accessible in the MIB view used by the retrieval.  As
                 such, the management station cannot issue any
                 management protocol set operations to create an
                 instance of this column.

            If the value associated with the status column is
            `notReady', then the management station must first deal with
            all `noSuchInstance' columns, if any.  Having done so, the
            value of the status column becomes `notInService', and we
            proceed to interaction 4.

            Interaction 4: Making the Conceptual Row Available

            Once the management station is satisfied with the values
            associated with the columns of the conceptual row, it issues
            a management protocol set operation to set the status column
            to `active'.  If the agent has sufficient information to
            make the conceptual row available for use by the managed
            device, the management protocol set operation succeeds (a
            `noError' response is returned).  Otherwise, the management
            protocol set operation fails with an error of
            `inconsistentValue'.


                                     NOTE WELL

                 A conceptual row having a status column with value
                 `notInService' or `notReady' is unavailable to the
                 managed device.  As such, it is possible for the
                 managed device to create its own instances during the
                 time between the management protocol set operation
                 which sets the status column to `createAndWait' and the
                 management protocol set operation which sets the status
                 column to `active'.  In this case, when the management
                 protocol set operation is issued to set the status
                 column to `active', the values held in the agent
                 supersede those used by the managed device.

            If the management station is prevented from setting the
            status column to `active' (e.g., due to management station
            or network failure) the conceptual row will be left in the
            `notInService' or `notReady' state, consuming resources
            indefinitely.  The agent must detect conceptual rows that
            have been in either state for an abnormally long period of
            time and remove them.  It is the responsibility of the
            DESCRIPTION clause of the status column to indicate what an
            abnormally long period of time would be.  This period of
            time should be long enough to allow for human response time
            (including `think time') between the creation of the
            conceptual row and the setting of the status to `active'.
            In the absence of such information in the DESCRIPTION
            clause, it is suggested that this period be approximately 5
            minutes in length.  This removal action applies not only to
            newly-created rows, but also to previously active rows which
            are set to, and left in, the notInService state for a
            prolonged period exceeding that which is considered normal
            for such a conceptual row.


                             Conceptual Row Suspension

            When a conceptual row is `active', the management station
            may issue a management protocol set operation which sets the
            instance of the status column to `notInService'.  If the
            agent is unwilling to do so, the set operation fails with an
            error of `wrongValue'.  Otherwise, the conceptual row is
            taken out of service, and a `noError' response is returned.
            It is the responsibility of the DESCRIPTION clause of the
            status column to indicate under what circumstances the
            status column should be taken out of service (e.g., in order
            for the value of some other column of the same conceptual
            row to be modified).


                              Conceptual Row Deletion

            For deletion of conceptual rows, a management protocol set
            operation is issued which sets the instance of the status
            column to `destroy'.  This request may be made regardless of
            the current value of the status column (e.g., it is possible
            to delete conceptual rows which are either `notReady',
            `notInService' or `active'.)  If the operation succeeds,
            then all instances associated with the conceptual row are
            immediately removed."


    SYNTAX       INTEGER {
                     -- the following two values are states:
                     -- these values may be read or written
                     active(1),
                     notInService(2),

                     -- the following value is a state:
                     -- this value may be read, but not written
                     notReady(3),

                     -- the following three values are
                     -- actions: these values may be written,
                     --   but are never read
                     createAndGo(4),
                     createAndWait(5),
                     destroy(6)
                 }
      </fo:block>
    
  <fo:block id="idp529296" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A multilingual Simple Network Management Protocol 
      application featuring an Extensible Agent, simple manager,
      a MIB compiler and facilities for implementing SNMP MIBs etc.
      </fo:block>
  <fo:block page-break-before="always" id="idp4380608" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmp</fo:marker>snmp</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmp
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmp</fo:inline> contains interface functions to the 
      SNMP toolkit.</fo:block>
  

  <fo:block id="idp4377936" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Common Data Types</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following data-types are used in the functions below: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">datetime() = {date(), time()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">calendar</fo:inline> 
          for more info.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

    </fo:list-block>
    
    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4499904">config() -&gt; ok | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A simple interactive configuration tool. Simple
          configuration files can be generated, but more complex
          configurations still have to be edited manually.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The tool is a textual based tool that asks some questions
          and generates <fo:inline font-family="monospace">sys.config</fo:inline> and <fo:inline font-family="monospace">*.conf</fo:inline> files.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Note</fo:inline> that if the application shall support version 3, 
          then the crypto app must be started before running this function 
          (password generation).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Note</fo:inline> also that some of the configuration files for the 
          agent and manager share the same names. This means that 
          they have to be stored in <fo:inline font-weight="bold">different</fo:inline> directories!</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5217728">start() -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5217120">start(Type) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = start_type()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the SNMP application.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">application</fo:inline> for more info.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5212704">start_agent() -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4694160">start_agent(Type) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = start_type()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SNMP application consists of several entities, of which the
          agent is one. This function starts the agent entity of the 
          application. 
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the only way to actually start the agent in this way is
          to add the agent related config after starting the application (e.g
          it cannot be part of the normal application config; sys.config).
          This is done by calling: 
          <fo:inline font-family="monospace">application:set_env(snmp, agent, Conf)</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default value for <fo:inline font-family="monospace">Type</fo:inline> is <fo:inline font-family="monospace">normal</fo:inline>.</fo:block>
	
	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4689712">start_manager() -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4863984">start_manager(Type) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = start_type()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SNMP application consists of several entities, of which the
          manager is one. This function starts the manager entity of the 
          application. 
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the only way to actually start the manager in this way is
          to add the manager related config after starting the application (e.g
          it cannot be part of the normal application config; sys.config).
          This is done by calling: 
          <fo:inline font-family="monospace">application:set_env(snmp, manager, Conf)</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default value for <fo:inline font-family="monospace">Type</fo:inline> is <fo:inline font-family="monospace">normal</fo:inline>.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp616048">date_and_time() -&gt; DateAndTime</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DateAndTime = [int()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns current date and time as the data type DateAndTime,
          as specified in RFC1903. This is an OCTET STRING.</fo:block>
	  
	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp774448">date_and_time_to_universal_time_dst(DateAndTime) -&gt; [utc()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DateAndTime = [int()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">utc() = {{Y,Mo,D},{H,M,S}}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts a DateAndTime list to a list of possible universal 
          time(s). The universal time value on the same format as defined in
          calendar(3). </fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4386416">date_and_time_to_string(DateAndTime) -&gt; string()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4386832">date_and_time_to_string(DateAndTime, Validate) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DateAndTime = [int()]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Validate = fun(Kind, Data) -&gt; boolean()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts a DateAndTime list to a printable string, according
          to the DISPLAY-HINT definition in RFC2579.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The validation fun,  <fo:inline font-family="monospace">Validate</fo:inline>, allows for a more "flexible" 
          validation of the <fo:inline font-family="monospace">DateAndTime</fo:inline> argument. Whenever the data 
          is found to not follow RFC2579, the fun is called to allow a more
          "lax" validation. 
          See the <fo:inline font-style="italic">validate_date_and_time/2</fo:inline> 
          function for more info on the <fo:inline font-family="monospace">Validate</fo:inline> fun. </fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4041952">date_and_time_to_string2(DateAndTime) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DateAndTime = [int()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts a DateAndTime list to a printable string, according
	  to the DISPLAY-HINT definition in RFC2579, with the extension 
          that it also allows the values "hours from UTC" = 14 together with 
          "minutes from UTC" = 0. </fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2099136">local_time_to_date_and_time_dst(Local) -&gt; [DateAndTime]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Local = {{Y,Mo,D},{H,M,S}}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DateAndTime = [int()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts a local time value to a list of possible DateAndTime 
          list(s). The local time value on the same format as defined in 
          calendar(3).</fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4374672">universal_time_to_date_and_time(UTC) -&gt; DateAndTime</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UTC = {{Y,Mo,D},{H,M,S}}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DateAndTime = [int()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts a universal time value to a DateAndTime list.  The
          universal time value on the same format as defined in calendar(3).</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2021408">validate_date_and_time(DateAndTime) -&gt; bool()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4327904">validate_date_and_time(DateAndTime, Validate) -&gt; bool()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DateAndTime = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Validate = fun(Kind, Data) -&gt; boolean()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks if <fo:inline font-family="monospace">DateAndTime</fo:inline> is a correct DateAndTime
          value, as specified in RFC2579.  This function can be used in
          instrumentation functions to validate a DateAndTime value.</fo:block>


        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The validation fun,  <fo:inline font-family="monospace">Validate</fo:inline>, allows for a more "flexible" 
          validation of the <fo:inline font-family="monospace">DateAndTime</fo:inline> argument. Whenever the data 
          is found to not follow RFC2579, the fun is called to allow a more
          "lax" validation. 
          The input to the validation fun looks like this: </fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          Kind             Data
          --------------   ----------------------
          year             {Year1, Year2}
          month            Month
          day              Day
          hour             Hour
          minute           Minute
          seconds          Seconds
          deci_seconds     DeciSeconds
          diff             [Sign, Hour, Minute]
          valid_date       {Year, Month, Day}
	</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2022448">passwd2localized_key(Alg, Passwd, EngineID) -&gt; Key</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Alg = algorithm()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">algorithm() = md5 | sha</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Passwd = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EngineID = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = list()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generates a key that can be used as an authentication
          or privacy key using MD5 och SHA.  The key is
          localized for EngineID.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4191824">octet_string_to_bits(S) -&gt; Val</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val = bits()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Utility function for converting a value of type 
          <fo:inline font-family="monospace">OCTET-STRING</fo:inline> to <fo:inline font-family="monospace">BITS</fo:inline>. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp259920">bits_to_octet_string(B) -&gt; Val</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val = octet_string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Utility function for converting a value of type <fo:inline font-family="monospace">BITS</fo:inline> 
          to <fo:inline font-family="monospace">OCTET-STRING</fo:inline>. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5508208">read_mib(FileName) -&gt; {ok, mib()} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FileName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">mib() = #mib{}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read a compiled mib.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp301040">log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp301456">log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Block | Start) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp301984">log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Start, Block | Stop) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5437008">log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Start, Stop, Block) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mibs = [MibName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OutFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Start = Stop = null | datetime() | {local_time,datetime()} |  {universal_time,datetime()} </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Block = boolean()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts an Audit Trail Log to a readable text file, where
	each item has a trailing TAB character, and any TAB
	character in the body of an item has been replaced by ESC
	TAB. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function can be used on a running system, or by copying
	the entire log directory and calling this function. SNMP
	must be running in order to provide MIB information. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">LogDir</fo:inline> is the name of the directory where the audit
	trail log is stored. 
	<fo:inline font-family="monospace">Mibs</fo:inline> is a list of Mibs to be used. The function uses 
	the information in the Mibs to convert for example object 
	identifiers to their symbolic name. 
	<fo:inline font-family="monospace">OutFile</fo:inline> is the name of the generated text-file.
	<fo:inline font-family="monospace">LogName</fo:inline> is the name of the log, 
	<fo:inline font-family="monospace">LogFile</fo:inline> is the name of the log file. 
	<fo:inline font-family="monospace">Start</fo:inline> is the start (first) date and time from which 
	log events will be converted and 
	<fo:inline font-family="monospace">Stop</fo:inline> is the stop (last) date and time to which log 
	events will be converted.
	The <fo:inline font-family="monospace">Block</fo:inline> argument indicates if the log should be blocked
	during conversion. This could be usefull when converting large 
	logs (when otherwise the log could wrap during conversion). 
	Defaults to <fo:inline font-family="monospace">true</fo:inline>. 
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The format of an audit trail log text item is as follows: </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Tag Addr - Community [TimeStamp] Vsn</fo:inline><fo:block/>
	<fo:inline font-family="monospace">PDU</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">Tag</fo:inline> is <fo:inline font-family="monospace">request</fo:inline>, <fo:inline font-family="monospace">response</fo:inline>, 
	<fo:inline font-family="monospace">report</fo:inline>, <fo:inline font-family="monospace">trap</fo:inline> or <fo:inline font-family="monospace">inform</fo:inline>; Addr is 
	<fo:inline font-family="monospace">IP:Port</fo:inline> (or comma space separated list of such);
	<fo:inline font-family="monospace">Community</fo:inline> is the community parameter (SNMP version
	v1 and v2), or <fo:inline font-family="monospace">SecLevel:"AuthEngineID":"UserName"</fo:inline>
	(SNMP v3); <fo:inline font-family="monospace">TimeStamp</fo:inline> is a date and time stamp,
	and <fo:inline font-family="monospace">Vsn</fo:inline> is the SNMP version. <fo:inline font-family="monospace">PDU</fo:inline> is a textual
	version of the protocol data unit. There is a new line
	between <fo:inline font-family="monospace">Vsn</fo:inline> and <fo:inline font-family="monospace">PDU</fo:inline>.</fo:block>
	
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4268976">log_to_io(LogDir, Mibs, LogName, LogFile) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4269392">log_to_io(LogDir, Mibs, LogName, LogFile, Block | Start) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4269808">log_to_io(LogDir, Mibs, LogName, LogFile, Start, Block | Stop) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4775968">log_to_io(LogDir, Mibs, LogName, LogFile, Start, Stop, Block) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mibs = [MibName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Start = Stop = null | datetime() | {local_time,datetime()} |  {universal_time,datetime()} </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts an Audit Trail Log to a readable format and 
	prints it on stdio. See 
	<fo:inline font-style="italic">log_to_txt</fo:inline> 
	above for more info.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4867984">change_log_size(LogName, NewSize) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewSize = {MaxBytes, MaxFiles}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxBytes = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxFiles = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the log size of the Audit Trail Log.  The
          application must be configured to use the audit trail log
          function. Please refer to disk_log(3) in Kernel Reference 
          Manual for a description of how to change the log size.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The change is permanent, as long as the log is not deleted. 
          That means, the log size is remembered across reboots.</fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4928496">print_version_info() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4928912">print_version_info(Prefix) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Prefix = string() | integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Utility function(s) to produce a formatted printout of the versions
          info generated by the <fo:inline font-family="monospace">versions1</fo:inline> function</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the same as doing, e.g.: </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
           {ok, V} = snmp:versions1(), 
           snmp:print_versions(V).
        </fo:block>

	
	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5420096">versions1() -&gt; {ok, Info} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5420576">versions2() -&gt; {ok, Info} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Info = [info()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">info() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Utility functions used to retrieve some system and
          application info.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The difference between the two functions is in how they get
          the modules to check. <fo:inline font-family="monospace">versions1</fo:inline> uses the app-file and
          <fo:inline font-family="monospace">versions2</fo:inline> uses the function <fo:inline font-family="monospace">application:get_key</fo:inline>.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5090368">print_versions(VersionInfo) -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5090832">print_versions(Prefix, VersionInfo) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">VersionInfo = [version_info()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">version_info() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Prefix = string() | integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Utility function to produce a formatted printout of the versions
          info generated by the <fo:inline font-family="monospace">versions1</fo:inline> and <fo:inline font-family="monospace">versions2</fo:inline>
          functions</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example: </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
           {ok, V} = snmp:versions1(), 
           snmp:print_versions(V).
        </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5097296">enable_trace() -&gt; void()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts a dbg tracer that prints trace events to stdout (using
          plain io:format after a minor formatting). </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5100496">disable_trace() -&gt; void()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stop the tracer. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5329152">set_trace(Targets) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Targets = target() | targets()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">target() = module()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">module() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">targets() = [target() | {target(), target_options()}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">target_options() = [target_option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">target_option() = {return_trace, boolean()} | {scope, scope()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">scope() = all_functions | exported_functions | function_name() | {function_name(), function_arity()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">function_name() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">function_arity() = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to set up default trace on function(s) 
          for the given module or modules. The scope of the trace will be 
          all <fo:inline font-weight="bold">exported</fo:inline> functions (both the call info and the return 
	  value). Timestamp info will also be included. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5337248">reset_trace(Targets) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Targets = module() | modules()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">modules() = [module()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">module() = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to reset (disable) trace for the 
	  given module(s). </fo:block>
      
	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5341840">set_trace(Targets, Opts) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Targets = target() | targets()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">target() = module()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">module() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">targets() = [target() | {target(), target_options()}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">target_options() = [target_option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">target_option() = {return_trace, boolean()} | {scope, scope()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">scope() = all_functions | exported_functions | function_name() | {function_name(), function_arity()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">function_name() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">function_arity() = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = disable | trace_options()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">trace_options() = [trace_option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">trace_option() = {timestamp, boolean()} | target_option()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to set up trace on function(s) for the given
	  module or modules. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The example below sets up trace on the exported functions (default) 
	  of module <fo:inline font-family="monospace">snmp_generic</fo:inline> and all functions of module 
	  <fo:inline font-family="monospace">snmp_generic_mnesia</fo:inline>. With return values (which is default)
          and timestamps in both cases (which is also default): </fo:block>

	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
	  snmp:enable_trace(),
	  snmp:set_trace([snmp_generic, 
                          {snmp_generic_mnesia, [{scope, all_functions}]}]),
	  .
	  .
	  .
          snmp:set_trace(snmp_generic, disable),
	  .
	  .
	  .
	  snmp:disable_trace(),
	</fo:block>

      </fo:block>

  

  <fo:block id="idp5352400" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">calendar(3)
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp5360736" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmp</fo:marker>snmp</fo:block>Application</fo:block>
  <fo:block/>
  snmp
  The SNMP Application
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This chapter describes the <fo:inline font-family="monospace">snmp</fo:inline>
    application in OTP.  The SNMP application provides the following
    services:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">a multilingual extensible SNMP agent</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">a SNMP manager</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">a MIB compiler</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

  

  <fo:block id="idp5271376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Configuration</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following configuration parameters are defined for the SNMP
      application. Refer to application(3) for more information about
      configuration parameters.
      </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The snmp part of the config file specifying the configuration 
      parameters is basically the following tuple:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      {snmp, snmp_components_config()}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A minimal config file for starting a node with both a manager 
      and an agent:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      [{snmp, 
        [{agent, [{db_dir, "/tmp/snmp/agent/db"},
                  {config, [{dir, "/tmp/snmp/agent/conf"}]}]},
         {manager, [{config, [{dir, "/tmp/snmp/manager/conf"},
                              {db_dir, "/tmp/snmp/manager/db"}]}]}]}
        ]
       }
      ].
    </fo:block>


    


    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each snmp component has its own set of configuration parameters,
      even though some of the types are common to both components. </fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      snmp_components_config() -&gt; [snmp_component_config()]
      snmp_component_config() -&gt; {agent, agent_options()} | {manager, manager_options()}
      agent_options() = [agent_option()]
      agent_option() = {restart_type,     restart_type()}     | 
                       {agent_type,       agent_type()}       |  
                       {agent_verbosity,  verbosity()}        |  
                       {discovery,        agent_discovery()}  |  
                       {versions,         versions()}         |  
                       {gb_max_vbs,       gb_max_vbs()}       |  
                       {priority,         priority()}         |  
                       {multi_threaded,   multi_threaded()}   |  
                       {db_dir,           db_dir()}           |  
                       {db_init_error,    db_init_error()}    |  
                       {local_db,         local_db()}         |  
                       {net_if,           agent_net_if()}     |  
                       {mibs,             mibs()}             |  
                       {mib_storage,      mib_storage()}      |  
                       {mib_server,       mib_server()}       |  
                       {audit_trail_log,  audit_trail_log()}  |  
                       {error_report_mod, error_report_mod()} |  
                       {note_store,       note_store()}       |  
                       {symbolic_store,   symbolic_store()}   |  
                       {target_cache,     target_cache()}     |  
                       {config,           agent_config()}
      manager_options() = [manager_option()]
      manager_option() = {restart_type,             restart_type()}    | 
                         {net_if,                   manager_net_if()}  |  
                         {server,                   server()}          | 
                         {note_store,               note_store()}      | 
                         {config,                   manager_config()}  |  
                         {inform_request_behaviour, manager_irb()}     | 
                         {mibs,                     manager_mibs()}    | 
                         {priority,                 priority()}        |  
                         {audit_trail_log,          audit_trail_log()} | 
                         {versions,                 versions()}        | 
                         {def_user_mod,             def_user_module()  | 
                         {def_user_data,            def_user_data()}
    </fo:block>

    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Agent specific config options and types:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_type() = master | sub &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">master</fo:inline>, one master agent is
          started. Otherwise, no agents are started. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">master</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_discovery() = [agent_discovery_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">agent_discovery_opt() = 
          {terminating, agent_terminating_discovery_opts()} | 
          {originating, agent_originating_discovery_opts()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">terminating</fo:inline> options effects discovery initiated by 
          a manager. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">originating</fo:inline> options effects discovery initiated 
          by this agent. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">agent_discovery_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_terminating_discovery_opts() = [agent_terminating_discovery_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">agent_terminating_discovery_opt() = 
          {enable, boolean()} | 
          {stage2, discovery | plain} | 
          {trigger_username, string()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These are options effecting discovery <fo:inline font-family="monospace">terminating</fo:inline> in this
          agent (i.e. initiated by a manager). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default values for the <fo:inline font-family="monospace">terminating</fo:inline> 
          discovery options are: </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>enable: <fo:inline font-family="monospace">true</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>stage2: <fo:inline font-family="monospace">discovery</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>trigger_username: <fo:inline font-family="monospace">""</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_originating_discovery_opts() = [agent_originating_discovery_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">agent_originating_discovery_opt() = 
          {enable, boolean()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These are options effecting discovery <fo:inline font-family="monospace">originating</fo:inline> in this
          agent. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default values for the <fo:inline font-family="monospace">originating</fo:inline> 
          discovery options are: </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>enable: <fo:inline font-family="monospace">true</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">multi_threaded() = bool() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">true</fo:inline>, the agent is multi-threaded, with one
          thread for each get request. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">db_dir() = string() &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines where the SNMP agent internal db files are stored.</fo:block>
      </fo:block></fo:block-container>

      
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">gb_max_vbs() = pos_integer() | infinity &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines the maximum number of varbinds allowed 
	in a Get-BULK response.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">1000</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">local_db() = [local_db_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">local_db_opt() = {repair, agent_repair()} | {auto_save, agent_auto_save()} |   {verbosity, verbosity()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines options specific for the SNMP agent local database.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">local_db_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_repair() = false | true | force &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When starting snmpa_local_db it always tries to open an
          existing database. If <fo:inline font-family="monospace">false</fo:inline>, and some errors occur, a new
          database is created instead. If <fo:inline font-family="monospace">true</fo:inline>, an existing file
          will be repaired. If <fo:inline font-family="monospace">force</fo:inline>, the table will be repaired
          even if it was properly closed. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_auto_save() = integer() | infinity &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The auto save interval. The table is flushed to disk
          whenever not accessed for this amount of time.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">5000</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_net_if() = [agent_net_if_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">agent_net_if_opt() = {module, agent_net_if_module()} |  {verbosity, verbosity()} |  {options, agent_net_if_options()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines options specific for the SNMP agent network interface 
          entity. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">agent_net_if_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_net_if_module() = atom() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Module which handles the network interface part for the
          SNMP agent. Must implement the 
          <fo:inline font-style="italic">snmpa_network_interface</fo:inline> behaviour.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">snmpa_net_if</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_net_if_options() = [agent_net_if_option()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">agent_net_if_option() = {bind_to, bind_to()} |  
            {sndbuf, sndbuf()} |  
            {recbuf, recbuf()} |  
            {no_reuse, no_reuse()} |  
	    {req_limit, req_limit()} |
            {filter, agent_net_if_filter_options()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These options are actually specific to the used module.
          The ones shown here are applicable to the default 
          <fo:inline font-family="monospace">agent_net_if_module()</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">agent_net_if_option()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">req_limit() = integer() | infinity &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Max number of simultaneous requests handled by the agent.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_net_if_filter_options() = [agent_net_if_filter_option()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">agent_net_if_filter_option() = {module, agent_net_if_filter_module()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These options are actually specific to the used module.
	  The ones shown here are applicable to the default 
	  <fo:inline font-family="monospace">agent_net_if_filter_module()</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in 
          <fo:inline font-family="monospace">agent_net_if_filter_option()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_net_if_filter_module() = atom() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Module which handles the network interface filter part for the
	  SNMP agent. Must implement the 
	  <fo:inline font-style="italic">snmpa_network_interface_filter</fo:inline> behaviour.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">snmpa_net_if_filter</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_mibs() = [string()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a list of MIBs (including path) that defines which MIBs
          are initially loaded into the SNMP master agent. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the following mibs will always be loaded:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>version v1: <fo:inline font-family="monospace">STANDARD-MIB</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>version v2: <fo:inline font-family="monospace">SNMPv2</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>version v3: <fo:inline font-family="monospace">SNMPv2</fo:inline>, <fo:inline font-family="monospace">SNMP-FRAMEWORK-MIB</fo:inline> 
           and <fo:inline font-family="monospace">SNMP-MPD-MIB</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mib_storage() = [mib_storage_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mib_storage_opt() = {module, mib_storage_module()} |  {options, mib_storage_options()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option specifies how basic mib data is stored. 
	This option is used by two parts of the snmp agent: 
	The mib-server and the symbolic-store. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">[{module, snmpa_mib_storage_ets}]</fo:inline>. </fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mib_storage_module() = snmpa_mib_data_ets | snmpa_mib_data_dets | snmpa_mib_data_mnesia | module()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines the mib storage module of the SNMP agent as defined by the 
	<fo:inline font-style="italic">snmpa_mib_storage</fo:inline> 
	behaviour. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Several entities (<fo:inline font-family="monospace">mib-server</fo:inline> via the its data module and 
	the <fo:inline font-family="monospace">symbolic-store</fo:inline>) of the snmp agent uses this for storage 
	of miscelaneous mib related data retrieved while loading a mib. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are several implementations provided with the agent: 
	<fo:inline font-family="monospace">snmpa_mib_storage_ets</fo:inline>, <fo:inline font-family="monospace">snmpa_mib_storage_dets</fo:inline> and 
	<fo:inline font-family="monospace">snmpa_mib_storage_mnesia</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default module is <fo:inline font-family="monospace">snmpa_mib_storage_ets</fo:inline>. </fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mib_storage_options() = list() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is implementattion depended. That is, it depends on the 
	module. For each module a specific set of options are valid. 
	For the module provided with the app, these options are supported: </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">snmpa_mib_storage_ets</fo:inline>: <fo:inline font-family="monospace">{dir, filename()} | {action, keep | clear}, {checksum, boolean()}</fo:inline></fo:block>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">dir</fo:inline> - If present, points to a directory where a file 
		to which all data in the ets table is "synced". </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, when a table is opened this file is read, 
		if it exists. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, this will <fo:inline font-weight="bold">not</fo:inline> be used. </fo:block> 
	      </fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">action</fo:inline> - Specifies the behaviour when a non-empty 
		file is found: Keep its content or clear it out. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">keep</fo:inline>. </fo:block> 
	      </fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">checksum</fo:inline> - Defines if the file is checksummed 
		or not. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>. </fo:block> 
	      </fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
	  </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">snmpa_mib_storage_dets</fo:inline>: <fo:inline font-family="monospace">{dir, filename()} | {action, keep | clear}, {auto_save, default | pos_integer()} | {repair, force | boolean()}</fo:inline></fo:block>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">dir</fo:inline> - This <fo:inline font-weight="bold">mandatory</fo:inline> option points to a 
		directory where to place the file of a dets table. </fo:block>
	      </fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">action</fo:inline> - Specifies the behaviour when a non-empty 
		file is found: Keep its content or clear it out. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">keep</fo:inline>. </fo:block> 
	      </fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">auto_save</fo:inline> - Defines the dets auto-save frequency. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">default</fo:inline>. </fo:block> 
	      </fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">repair</fo:inline> - Defines the dets repair behaviour. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>. </fo:block> 
	      </fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
	  </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">snmpa_mib_storage_mnesia</fo:inline>: <fo:inline font-family="monospace">{action, keep | clear}, {nodes, [node()]}</fo:inline></fo:block>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">action</fo:inline> - Specifies the behaviour when a non-empty, 
		already existing, table: Keep its content or clear it out. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">keep</fo:inline>. </fo:block>
	      </fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">nodes</fo:inline> - A list of node names (or an atom 
		describing a list of nodes) defining where to open the table. 
		Its up to the user to ensure that mnesia is actually running 
		on the specified nodes. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following distinct values are recognised: </fo:block>
		<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[]</fo:inline> - Translated into a list of the own node: <fo:inline font-family="monospace">[node()]</fo:inline></fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">all</fo:inline> - <fo:inline font-family="monospace">erlang:nodes()</fo:inline></fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">visible</fo:inline> - <fo:inline font-family="monospace">erlang:nodes(visible)</fo:inline></fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">connected</fo:inline> - <fo:inline font-family="monospace">erlang:nodes(connected)</fo:inline></fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">db_nodes</fo:inline> - <fo:inline font-family="monospace">mnesia:system_info(db_nodes)</fo:inline></fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
		</fo:list-block>
		
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is the result of the call: <fo:inline font-family="monospace">erlang:nodes()</fo:inline>. </fo:block>
	      </fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
	  </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mib_server() = [mib_server_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mib_server_opt() = {mibentry_override, mibentry_override()} |  {trapentry_override, trapentry_override()} |  {verbosity, verbosity()} | {cache, mibs_cache()} | {data_module, mib_server_data_module()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines options specific for the SNMP agent mib server. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">mib_server_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mibentry_override() = bool() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If this value is false, then when loading a mib each mib-
          entry is checked prior to installation of the mib. 
          The purpose of the check is to prevent that the same symbolic 
          mibentry name is used for different oid's.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">trapentry_override() = bool() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If this value is false, then when loading a mib each trap
          is checked prior to installation of the mib. 
          The purpose of the check is to prevent that the same symbolic 
          trap name is used for different trap's.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>


      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mib_server_data_module() = snmpa_mib_data_tttn | module() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines the backend data module of the SNMP agent mib-server as 
	defined by the 
	<fo:inline font-style="italic">snmpa_mib_data</fo:inline> 
	behaviour. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At present only the default module is provided with the agent,  
	<fo:inline font-family="monospace">snmpa_mib_data_tttn</fo:inline>. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default module is <fo:inline font-family="monospace">snmpa_mib_data_tttn</fo:inline>. </fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mibs_cache() = bool() | mibs_cache_opts() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shall the agent utilize the mib server lookup cache or not.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">true</fo:inline> (in which case the <fo:inline font-family="monospace">mibs_cache_opts()</fo:inline> 
          default values apply).</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mibs_cache_opts() = [mibs_cache_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mibs_cache_opt() = {autogc, mibs_cache_autogc()} | {gclimit, mibs_cache_gclimit()} | {age, mibs_cache_age()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines options specific for the SNMP agent mib server cache. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">mibs_cache_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mibs_cache_autogc() = bool() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines if the mib server shall perform cache gc automatically or 
	leave it to the user (see 
	<fo:inline font-style="italic">gc_mibs_cache/0,1,2,3</fo:inline>). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mibs_cache_age() = integer() &gt; 0 &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines how old the entries in the cache will be allowed 
	to become before they are GC'ed (assuming GC is performed). 
	Each entry in the cache is "touched" whenever it is accessed. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The age is defined in milliseconds. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">10 timutes</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">mibs_cache_gclimit() = integer() &gt; 0 | infinity &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When performing a GC, this is the max number of cache entries 
	that will be deleted from the cache. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reason for having this limit is that if the cache is 
	large, the GC can potentially take a long time, during which 
	the agent is locked. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">100</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">error_report_mod() = atom() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines an error report module, implementing the 
          <fo:inline font-style="italic">snmpa_error_report</fo:inline> 
          behaviour. Two modules are provided with the toolkit: 
          <fo:inline font-family="monospace">snmpa_error_logger</fo:inline> and <fo:inline font-family="monospace">snmpa_error_io</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">snmpa_error_logger</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">symbolic_store() = [symbolic_store_opt()]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">symbolic_store_opt() = {verbosity, verbosity()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines options specific for the SNMP agent symbolic store. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">symbolic_store_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">target_cache() = [target_cache_opt()]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">target_cache_opt() = {verbosity, verbosity()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines options specific for the SNMP agent target cache. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">target_cache_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_config() = [agent_config_opt()] &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">agent_config_opt() = {dir, agent_config_dir()} |  {force_load, force_load()} | {verbosity, verbosity()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines specific config related options for the SNMP agent. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">agent_config_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">agent_config_dir = dir() &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines where the SNMP agent configuration files are stored.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">force_load() = bool() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">true</fo:inline> the configuration files are re-read
          during start-up, and the contents of the configuration 
          database ignored.  Thus, if <fo:inline font-family="monospace">true</fo:inline>, changes to 
          the configuration database are lost upon reboot of the 
          agent. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>

    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Manager specific config options and types:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">server() = [server_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">server_opt() = {timeout, server_timeout()} |  {verbosity, verbosity()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the options for the manager server process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">silence</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">server_timeout() = integer() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asynchronous request cleanup time. For every requests,
          some info is stored internally, in order to be able to 
          deliver the reply (when it arrives) to the proper destination.
          If the reply arrives, this info will be deleted. But if
          there is no reply (in time), the info has to be deleted
          after the <fo:inline font-weight="bold">best before</fo:inline> time has been passed.
          This cleanup will be performed at regular intervals, defined 
          by the <fo:inline font-family="monospace">server_timeout()</fo:inline> time.
          The information will have an <fo:inline font-weight="bold">best before</fo:inline> time,
          defined by the <fo:inline font-family="monospace">Expire</fo:inline> time given when calling the
          request function (see 
          <fo:inline font-style="italic">async_get</fo:inline>,
          <fo:inline font-style="italic">async_get_next</fo:inline> and 
          <fo:inline font-style="italic">async_set</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Time in milli-seconds.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">30000</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_config() = [manager_config_opt()] &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">manager_config_opt() = {dir, manager_config_dir()} |  {db_dir, manager_db_dir()} |  {db_init_error, db_init_error()} |  {repair, manager_repair()} |  {auto_save, manager_auto_save()} |  {verbosity, verbosity()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines specific config related options for the SNMP manager. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">manager_config_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_config_dir = dir() &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines where the SNMP manager configuration files are stored.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_db_dir = dir() &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines where the SNMP manager store persistent data.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_repair() = false | true | force &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines the repair option for the persistent database (if 
          and how the table is repaired when opened). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_auto_save() = integer() | infinity &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The auto save interval. The table is flushed to disk
          whenever not accessed for this amount of time.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">5000</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_irb() = auto | user | {user, integer()} &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option defines how the manager will handle the sending of 
          response (acknowledgment) to received inform-requests. </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">auto</fo:inline> - The manager will autonomously send response
              (acknowledgment&gt; to inform-request messages.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{user, integer()}</fo:inline> - The manager will send response
              (acknowledgment) to inform-request messages when the 
              <fo:inline font-style="italic">handle_inform</fo:inline> 
              function completes. The integer is the time, in milli-seconds, 
              that the manager will consider the stored inform-request info 
              valid.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">user</fo:inline> - Same as <fo:inline font-family="monospace">{user, integer()}</fo:inline>, except that 
              the default time, 15 seconds (15000), is used.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">snmpm_network_interface</fo:inline>, 
          <fo:inline font-style="italic">handle_inform</fo:inline> and 
          <fo:inline font-style="italic">definition of the manager net if</fo:inline> for more info.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">auto</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_mibs() = [string()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a list of MIBs (including path) and defines which MIBs
          are initially loaded into the SNMP manager. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_net_if() = [manager_net_if_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">manager_net_if_opt() = {module, manager_net_if_module()} | 
          {verbosity, verbosity()} | 
          {options, manager_net_if_options()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines options specific for the SNMP manager network interface 
          entity. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">manager_net_if_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_net_if_options() = [manager_net_if_option()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">manager_net_if_option() = {bind_to, bind_to()} | 
          {sndbuf, sndbuf()} |  
          {recbuf, recbuf()} | 
          {no_reuse, no_reuse()} |
          {filter, manager_net_if_filter_options()} </fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These options are actually specific to the used module.
	The ones shown here are applicable to the default 
	<fo:inline font-family="monospace">manager_net_if_module()</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">manager_net_if_option()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_net_if_module() = atom() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module which handles the network interface part for the
          SNMP manager. It must implement the 
          <fo:inline font-style="italic">snmpm_network_interface</fo:inline> behaviour.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">snmpm_net_if</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_net_if_filter_options() = [manager_net_if_filter_option()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">manager_net_if_filter_option() = {module, manager_net_if_filter_module()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These options are actually specific to the used module.
	  The ones shown here are applicable to the default 
	  <fo:inline font-family="monospace">manager_net_if_filter_module()</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in 
          <fo:inline font-family="monospace">manager_net_if_filter_option()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">manager_net_if_filter_module() = atom() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Module which handles the network interface filter part for the
	  SNMP manager. Must implement the 
	  <fo:inline font-style="italic">snmpm_network_interface_filter</fo:inline> behaviour.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">snmpm_net_if_filter</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">def_user_module() = atom() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module implementing the default user. See the 
          <fo:inline font-style="italic">snmpm_user</fo:inline> behaviour.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">snmpm_user_default</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">def_user_data() = term() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Data for the default user. Passed to the user module when 
          calling the callback functions.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>

    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Common config types:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">restart_type() = permanent | transient | temporary</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">supervisor</fo:inline> 
          documentation for more info.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">permanent</fo:inline> for the agent and <fo:inline font-family="monospace">transient</fo:inline>
          for the manager.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">db_init_error() = terminate | create | create_db_and_dir</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines what to do if the agent or manager is unable to open an
          existing database file. <fo:inline font-family="monospace">terminate</fo:inline> means that the
          agent/manager will terminate and <fo:inline font-family="monospace">create</fo:inline> means that the 
          agent/manager will remove the faulty file(s) and create new ones,
          and <fo:inline font-family="monospace">create_db_and_dir</fo:inline> means that the agent/manager will
          create the database file along with any missing parent directories
          for the database file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">terminate</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">priority() = atom() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines the Erlang priority for all SNMP processes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">normal</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">versions() = [version()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">version() = v1 | v2 | v3</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Which SNMP versions shall be accepted/used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">[v1,v2,v3]</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">verbosity() = silence | info | log | debug | trace &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Verbosity for a SNMP process. This specifies now much debug info
          is printed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">silence</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">bind_to() = bool() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">true</fo:inline>, net_if binds to the IP address.
          If <fo:inline font-family="monospace">false</fo:inline>, net_if listens on any IP address on the host
          where it is running. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">no_reuse() = bool() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">true</fo:inline>, net_if does not specify that the IP
          and port address should be reusable. If <fo:inline font-family="monospace">false</fo:inline>, 
          the address is set to reusable. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">recbuf() = integer() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receive buffer size. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default value is defined by <fo:inline font-family="monospace">gen_udp</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">sndbuf() = integer() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Send buffer size. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default value is defined by <fo:inline font-family="monospace">gen_udp</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">note_store() = [note_store_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">note_store_opt() = {timeout, note_store_timeout()} |  {verbosity, verbosity()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the start-up verbosity for the SNMP note store.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For defaults see the options in <fo:inline font-family="monospace">note_store_opt()</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">note_store_timeout() = integer() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note cleanup time. When storing a note in the note store,
          each note is given lifetime. Every <fo:inline font-family="monospace">timeout</fo:inline> the note_store
          process performs a GC to remove the expired note's. Time in
          milli-seconds.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">30000</fo:inline>.</fo:block>

      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">audit_trail_log() = [audit_trail_log_opt()] &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">audit_trail_log_opt() = {type, atl_type()} | {dir, atl_dir()} |  {size, atl_size()} |  {repair, atl_repair()} | {seqno, atl_seqno()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If present, this option specifies the options for the 
          audit trail logging. The <fo:inline font-family="monospace">disk_log</fo:inline> module is used 
          to maintain a wrap log. If present, the <fo:inline font-family="monospace">dir</fo:inline> and 
          <fo:inline font-family="monospace">size</fo:inline> options are mandatory.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If not present, audit trail logging is not used.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">atl_type() = read | write | read_write &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies what type of an audit trail log should be used. 
          The effect of the type is actually different for the the agent
          and the manager. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the agent:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">write</fo:inline> is specified, only set requests are logged.  </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">read</fo:inline> is specified, only get requests are logged.  </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">read_write</fo:inline>, all requests are logged.  </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the manager:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">write</fo:inline> is specified, only sent messages are logged.  </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">read</fo:inline> is specified, only received messages are logged.  </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">read_write</fo:inline>, both outgoing and incoming messages are 
           logged.  </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">read_write</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">atl_dir = dir() &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies where the audit trail log should be stored.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">audit_trail_log</fo:inline> specifies that logging should take
          place, this parameter <fo:inline font-weight="bold">must</fo:inline> be defined.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">atl_size() = {integer(), integer()} &lt;mandatory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the size of the audit
          trail log.  This parameter is sent to <fo:inline font-family="monospace">disk_log</fo:inline>.  </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">audit_trail_log</fo:inline> specifies that logging should 
          take place, this parameter <fo:inline font-weight="bold">must</fo:inline> be defined.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">atl_repair() = true | false | truncate | snmp_repair &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies if and how the audit trail log shall be repaired
          when opened. Unless this parameter has the value <fo:inline font-family="monospace">snmp_repair</fo:inline>
          it is sent to <fo:inline font-family="monospace">disk_log</fo:inline>. If, on the other hand, the value is
          <fo:inline font-family="monospace">snmp_repair</fo:inline>, snmp attempts to handle certain faults on its
          own. And even if it cannot repair the file, it does not truncate it 
          directly, but instead <fo:inline font-weight="bold">moves it aside</fo:inline> for later off-line 
          analysis.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">atl_seqno() = true | false &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies if the audit trail log entries will be (sequence)
          numbered or not. The range of the sequence numbers are according
          to RFC 5424, i.e. 1 through 2147483647. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp6307728" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">application(3), disk_log(3)</fo:block>
  
  
<fo:block page-break-before="always" id="idp6316080" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa</fo:marker>snmpa</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpa
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmpa</fo:inline> contains interface functions to the 
      SNMP agent.</fo:block>

    
  

  <fo:block id="idp6319232" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
oid() = [byte()] 
atl_type() = read | write | read_write
notification_delivery_info() = #snmpa_notification_delivery_info{}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">oid()</fo:inline> type is used to represent an ASN.1 OBJECT IDENTIFIER. </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The record <fo:inline font-family="monospace">snmpa_notification_delivery_info</fo:inline> contains the following fields: </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">tag = term()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A user defined identity representing this notification send 
          operation.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">mod = module()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A module implementing the 
          <fo:inline font-style="italic">snmpa_notification_delivery_info_receiver</fo:inline> 
          behaviour. The info functions of this module will be called at 
          various stages of delivery. </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">extra = term()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is any extra info the user wants to have supplied 
          when the functions in the callback module is called. </fo:block>
      </fo:block></fo:block-container>
    </fo:block>
    
    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6329584">add_agent_caps(SysORID, SysORDescr) -&gt; SysORIndex</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SysORID = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SysORDescr = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SysORIndex = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be used to add an AGENT-CAPABILITY
          statement to the sysORTable in the agent.  The table is
          defined in the SNMPv2-MIB.</fo:block>
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6334384">del_agent_caps(SysORIndex) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SysORIndex = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be used to delete an AGENT-CAPABILITY
          statement to the sysORTable in the agent.  This table is
          defined in the SNMPv2-MIB. </fo:block>

          
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6338272">get_agent_caps() -&gt; [[SysORIndex, SysORID, SysORDescr, SysORUpTime]]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SysORIndex = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SysORId = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SysORDescr = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SysORUpTime = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns all AGENT-CAPABILITY statements in the sysORTable
          in the agent.  This table is defined in the SNMPv2-MIB. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6343504">get(Agent, Vars) -&gt; Values | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6343984">get(Agent, Vars, Context) -&gt; Values | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Vars = [oid()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Context = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Values = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {atom(), oid()}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs a GET operation on the agent.  All loaded MIB
          objects are visible in this operation.  The agent calls the
          corresponding instrumentation functions just as if it was a
          GET request coming from a manager. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the request specific parameters (such as 
          <fo:inline font-style="italic">current_request_id</fo:inline>) 
          are not accessible for the instrumentation functions if this 
          function is used. </fo:block>

          
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6351056">get_next(Agent, Vars) -&gt; Values | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6351536">get_next(Agent, Vars, Context) -&gt; Values | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Vars = [oid()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Context = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Values = [{oid(), term()}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {atom(), oid()}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs a GET-NEXT operation on the agent.  All loaded MIB
          objects are visible in this operation.  The agent calls the
          corresponding instrumentation functions just as if it was a
          GET request coming from a manager. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the request specific parameters (such as 
          <fo:inline font-family="monospace">snmpa:current_request_id/0</fo:inline> are not accessible for the 
          instrumentation functions if this function is used. </fo:block>

        
        
      </fo:block>


    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6359584">backup(BackupDir) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6360064">backup(Agent, BackupDir) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">BackupDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = backup_in_progress | term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Backup persistent/permanent data handled by the agent
          (such as local-db, mib-data and vacm). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Data stored by mnesia is not handled. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">BackupDir cannot be identical to DbDir. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Simultaneous backup calls are <fo:inline font-weight="bold">not</fo:inline> allowed. 
	That is, two different processes cannot simultaneously 
	successfully call this function. One of them will be first, 
	and succeed. The second will fail with the error reason
	<fo:inline font-family="monospace">backup_in_progress</fo:inline>. </fo:block>

        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6367264">info() -&gt; [{Key, Value}]</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6367728">info(Agent) -&gt; [{Key, Value}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list (a dictionary) containing information about
	the agent. Information includes loaded MIBs, registered
	sub-agents, some information about the memory allocation. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As of version 4.4 the format of the info has been changed. 
	To convert the info to the old format, call the 
	<fo:inline font-style="italic">old_info_format</fo:inline> 
	function. </fo:block>
	
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6372880">old_info_format(NewInfo) -&gt; OldInfo</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OldInfo = NewInfo = [{Key, Value}]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As of version 4.4 the format of the info has been changed. 
          This function is used to convert to the old (pre-4.4) info 
          format. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6376752">load_mib(Mib) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6377216">load_mib(Agent, Mib) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = already_loaded | term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Load a single <fo:inline font-family="monospace">Mib</fo:inline> into an agent. The <fo:inline font-family="monospace">MibName</fo:inline> 
	is the name of the Mib, including the path to where the compiled 
	mib is found. For example: </fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          Dir = code:priv_dir(my_app) ++ "/mibs/",
          snmpa:load_mib(snmp_master_agent, Dir ++ "MY-MIB").
        </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6383680">load_mibs(Mibs) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6384144">load_mibs(Mibs, Force) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6384624">load_mibs(Agent, Mibs) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6385104">load_mibs(Agent, Mibs, Force) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mibs = [MibName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Force = boolean()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {'load aborted at', MibName, InternalReason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InternalReason = already_loaded | term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Load <fo:inline font-family="monospace">Mibs</fo:inline> into an agent.  If the agent cannot load all 
	MIBs (the default value of the <fo:inline font-family="monospace">Force</fo:inline> argument is <fo:inline font-family="monospace">false</fo:inline>), 
	it will indicate where loading was aborted. The <fo:inline font-family="monospace">MibName</fo:inline> 
	is the name of the Mib, including the path to where the compiled 
	mib is found. For example,</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          Dir = code:priv_dir(my_app) ++ "/mibs/",
          snmpa:load_mibs(snmp_master_agent, [Dir ++ "MY-MIB"]).
        </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Force = true</fo:inline> then the agent will continue attempting
	to load each mib even after failing to load a previous mib. Use with 
	care. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6394944">unload_mib(Mib) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6395408">unload_mib(Agent, Mib) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = not_loaded | term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unload a single <fo:inline font-family="monospace">Mib</fo:inline> from an agent. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6400512">unload_mibs(Mibs) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6400992">unload_mibs(Mibs, Force) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6401472">unload_mibs(Agent, Mibs) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6401952">unload_mibs(Agent, Mibs, Force) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mibs = [MibName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Force = boolean()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {'unload aborted at', MibName, InternalReason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InternalReason = not_loaded | term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unload <fo:inline font-family="monospace">Mibs</fo:inline> from an agent. If it cannot unload all MIBs
	(the default value of the <fo:inline font-family="monospace">Force</fo:inline> argument is <fo:inline font-family="monospace">false</fo:inline>),
	it will indicate where unloading was aborted. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Force = true</fo:inline> then the agent will continue attempting
	to unload each mib even after failing to unload a previous mib. 
	Use with care. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6410432">which_mibs() -&gt; Mibs</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6410880">which_mibs(Agent) -&gt; Mibs</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mibs = [{MibName, MibFile}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibFile = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieve the list of all the mibs loaded into this agent. Default 
          is the master agent. </fo:block>
                    
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6416064">whereis_mib(MibName) -&gt; {ok, MibFile} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6416544">whereis_mib(Agent, MibName) -&gt; {ok, MibFile} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get the full path to the (compiled) mib-file. </fo:block>

        
        
        
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6423360">current_request_id() -&gt; {value, RequestId} | false</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6423840">current_context() -&gt; {value, Context} | false</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6424320">current_community() -&gt; {value, Community} | false</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6424800">current_address() -&gt; {value, Address} | false</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RequestId = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Context = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Community = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Address = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get the request-id, context, community and address of the 
          request currently being processed by the agent. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that these functions is intended to be called by the 
          instrumentation functions and <fo:inline font-weight="bold">only</fo:inline> if they are 
          executed in the context of the agent process (e.g. it does 
          not work if called from a spawned process).</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6431136">enum_to_int(Name, Enum) -&gt; {value, Int} | false</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6431616">enum_to_int(Db, Name, Enum) -&gt; {value, Int} | false</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Db   = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Enum = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Int  = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts the symbolic value <fo:inline font-family="monospace">Enum</fo:inline> to the
          corresponding integer of the enumerated object or type
          <fo:inline font-family="monospace">Name</fo:inline> in a MIB.  The MIB must be loaded. 
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">false</fo:inline> is returned if the object or type is not
          defined in any loaded MIB, or if it does not define the
          symbolic value as enumerated.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Db</fo:inline> is a reference to the symbolic store database 
          (retrieved by a call to <fo:inline font-family="monospace">get_symbolic_store_db/0</fo:inline>). </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6439840">int_to_enum(Name, Int) -&gt; {value, Enum} | false</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6440320">int_to_enum(Db, Name, Int) -&gt; {value, Enum} | false</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Db   = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Int  = int()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Enum = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts the integer <fo:inline font-family="monospace">Int</fo:inline> to the corresponding
          symbolic value of the enumerated object or type <fo:inline font-family="monospace">Name</fo:inline> in
          a MIB.  The MIB must be loaded. 
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">false</fo:inline> is returned if the object or type is not
          defined in any loaded MIB, or if it does not define the
          symbolic value as enumerated.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Db</fo:inline> is a reference to the symbolic store database 
          (retrieved by a call to <fo:inline font-family="monospace">get_symbolic_store_db/0</fo:inline>). </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6448544">name_to_oid(Name) -&gt; {value, oid()} | false</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6449024">name_to_oid(Db, Name) -&gt; {value, oid()} | false</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Db   = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Looks up the OBJECT IDENTIFIER of a MIB object, given the
          symbolic name.  Note, the OBJECT IDENTIFIER is given for the
          object, not for an instance. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">false</fo:inline> is returned if the object is not defined in any
          loaded MIB. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Db</fo:inline> is a reference to the symbolic store database 
          (retrieved by a call to <fo:inline font-family="monospace">get_symbolic_store_db/0</fo:inline>). </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6455408">oid_to_name(OID) -&gt; {value, Name} | false</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6455888">oid_to_name(Db, OID) -&gt; {value, Name} | false</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Db   = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OID  = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Looks up the symbolic name of a MIB object, given OBJECT
          IDENTIFIER. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">false</fo:inline> is returned if the object is not defined in any
          loaded MIB. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Db</fo:inline> is a reference to the symbolic store database 
          (retrieved by a call to <fo:inline font-family="monospace">get_symbolic_store_db/0</fo:inline>). </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6462624">which_aliasnames() -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = [atom()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieve all alias-names known to the agent.</fo:block>
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6466384">which_tables() -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = [atom()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieve all tables known to the agent.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6470128">which_variables() -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = [atom()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieve all variables known to the agent.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6473888">which_notifications() -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = [{Name, MibName, Info}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Info = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieve all notifications (and traps) known to the agent.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6479040">log_to_txt(LogDir)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6479488">log_to_txt(LogDir, Block | Mibs)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6479952">log_to_txt(LogDir, Mibs, Block | OutFile) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6480448">log_to_txt(LogDir, Mibs, OutFile, Block | LogName) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6480960">log_to_txt(LogDir, Mibs, OutFile, LogName, Block | LogFile) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6481472">log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Block | Start) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6482000">log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Block, Start)  -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6482528">log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Start, Stop)  -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6483056">log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Block, Start, Stop)  -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mibs = [MibName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Block = boolean()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OutFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Start = Stop = null | calendar:datetime() | {local_time, calendar:datetime()} | {universal_time, calendar:datetime()} </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = disk_log_open_error() | file_open_error() | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">disk_log_open_error() = {LogName, term()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">file_open_error() = {OutFile, term()}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts an Audit Trail Log to a readable text file. 
	<fo:inline font-family="monospace">OutFile</fo:inline> defaults to "./snmpa_log.txt". 
	<fo:inline font-family="monospace">LogName</fo:inline> defaults to "snmpa_log". 
	<fo:inline font-family="monospace">LogFile</fo:inline> defaults to "snmpa.log". </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Block</fo:inline> option indicates if the log should be blocked
	during conversion. This could be usefull when converting large 
	logs (when otherwise the log could wrap during conversion). 
	Defaults to <fo:inline font-family="monospace">true</fo:inline>. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">snmp:log_to_txt</fo:inline> 
	for more info.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6495648">log_to_io(LogDir) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6496128">log_to_io(LogDir, Block | Mibs) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6496624">log_to_io(LogDir, Mibs, Block | LogName) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6497120">log_to_io(LogDir, Mibs, LogName, Block | LogFile) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6497632">log_to_io(LogDir, Mibs, LogName, LogFile, Block | Start) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6498144">log_to_io(LogDir, Mibs, LogName, LogFile, Block, Start) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6498656">log_to_io(LogDir, Mibs, LogName, LogFile, Start, Stop) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6499168">log_to_io(LogDir, Mibs, LogName, LogFile, Block, Start, Stop) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mibs = [MibName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Block = boolean()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Start = Stop = null | calendar:datetime() | {local_time, calendar:datetime()} | {universal_time, calendar:datetime()} </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = disk_log_open_error() | file_open_error() | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">disk_log_open_error() = {LogName, term()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">file_open_error() = {OutFile, term()}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts an Audit Trail Log to a readable format and 
	prints it on stdio. 
	<fo:inline font-family="monospace">LogName</fo:inline> defaults to "snmpa_log". 
	<fo:inline font-family="monospace">LogFile</fo:inline> defaults to "snmpa.log".</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Block</fo:inline> option indicates if the log should be blocked
	during conversion. This could be usefull when converting large 
	logs (when otherwise the log could wrap during conversion). 
	Defaults to <fo:inline font-family="monospace">true</fo:inline>. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">snmp:log_to_io</fo:inline> 
	for more info.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6510864">change_log_size(NewSize) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewSize = {MaxBytes, MaxFiles}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxBytes = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxFiles = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the log size of the Audit Trail Log. The application must 
          be configured to use the audit trail log function. Please refer to 
          disk_log(3) in Kernel Reference Manual for a description of how to 
          change the log size. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The change is permanent, as long as the log is not deleted. 
          That means, the log size is remembered across reboots. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6516768">set_log_type(NewType) -&gt; {ok, OldType} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6517264">set_log_type(Agent, NewType) -&gt; {ok, OldType} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewType = OldType = atl_type()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the run-time Audit Trail log type. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that this has no effect on the application configuration as
          defined by configuration files, so a node restart will revert the 
          config to whatever is in those files. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is primarily useful in testing/debugging 
          scenarios. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6523104">mib_of(Oid) -&gt; {ok, MibName} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6523584">mib_of(Agent, Oid) -&gt; {ok, MibName} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oid = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Finds the mib corresponding to the <fo:inline font-family="monospace">Oid</fo:inline>. If it is a
          variable, the Oid must be 
          &lt;Oid for var&gt;.0 and if it is a table, Oid must be 
          &lt;table&gt;.&lt;entry&gt;.&lt;col&gt;.&lt;any&gt;</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6529264">me_of(Oid) -&gt; {ok, Me} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6529744">me_of(Agent, Oid) -&gt; {ok, Me} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oid = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Me = #me{}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Finds the mib entry corresponding to the <fo:inline font-family="monospace">Oid</fo:inline>. If it is a
          variable, the Oid must be 
          &lt;Oid for var&gt;.0 and if it is a table, Oid must be 
          &lt;table&gt;.&lt;entry&gt;.&lt;col&gt;.&lt;any&gt;</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6535440">invalidate_mibs_cache() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6535904">invalidate_mibs_cache(Agent) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Invalidate the mib server cache. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The entire contents of the cache will be deleted. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6540128">enable_mibs_cache() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6540592">enable_mibs_cache(Agent) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enable the mib server cache. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6544336">disable_mibs_cache() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6544800">disable_mibs_cache(Agent) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Disable the mib server cache. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6548544">which_mibs_cache_size() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6549008">which_mibs_cache_size(Agent) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retreive the size of the mib server cache. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6552768">gc_mibs_cache() -&gt; {ok, NumElementsGCed} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6553264">gc_mibs_cache(Agent) -&gt; {ok, NumElementsGCed} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6553760">gc_mibs_cache(Age) -&gt; {ok, NumElementsGCed} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6554256">gc_mibs_cache(Agent, Age) -&gt; {ok, NumElementsGCed} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6554752">gc_mibs_cache(Age, GcLimit) -&gt; {ok, NumElementsGCed} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6555248">gc_mibs_cache(Agent, Age, GcLimit) -&gt; {ok, NumElementsGCed} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Age = integer() &gt; 0</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GcLimit = integer() &gt; 0 | infinity</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NumElementsGCed = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Perform mib server cache gc. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Manually performs a mib server cache gc. 
          This can be done regardless of the value of the 
          <fo:inline font-family="monospace">autogc</fo:inline> option. 
          The <fo:inline font-family="monospace">NumElementsGCed</fo:inline> value indicates how many 
          elements where actually removed from the cache. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6562400">enable_mibs_cache_autogc() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6562864">enable_mibs_cache_autogc(Agent) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enable automatic gc of the mib server cache. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6566672">disable_mibs_cache_autogc() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6567136">disable_mibs_cache_autogc(Agent) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Disable automatic gc of the mib server cache. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6570928">update_mibs_cache_age(NewAge) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6571408">update_mibs_cache_age(Agent, NewAge) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewAge = integer() &gt; 0</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Change the mib server cache <fo:inline font-family="monospace">age</fo:inline> property. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6576560">update_mibs_cache_gclimit(NewGcLimit) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6577056">update_mibs_cache_gclimit(Agent, NewGCLimit) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewGcLimit = integer() &gt; 0 | infinity</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Change the mib server cache <fo:inline font-family="monospace">gclimit</fo:inline> property. </fo:block>

        
      </fo:block>


    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6582224">register_notification_filter(Id, Mod, Data) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6582720">register_notification_filter(Agent, Id, Mod, Data) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6583232">register_notification_filter(Id, Mod, Data, Where) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6583744">register_notification_filter(Agent, Id, Mod, Data, Where) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Id = filter_id()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">filter_id() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mod = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Where = filter_position()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">filter_position() = first | last | {insert_before, filter_id()} | {insert_after, filter_id()} </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Registers a notification filter.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mod</fo:inline> is a module implementing the 
          <fo:inline font-family="monospace">snmpa_notification_filter</fo:inline> behaviour.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Data</fo:inline> will be passed on to the filter when calling the
          functions of the behaviour.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6592832">unregister_notification_filter(Id) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6593328">unregister_notification_filter(Agent, Id) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Id = filter_id()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">filter_id() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unregister a notification filter. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6598016">which_notification_filter() -&gt; Filters</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6598480">which_notification_filter(Agent) -&gt; Filters</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filters = [filter_id()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">filter_id() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">List all notification filters in an agent.</fo:block>

        
      </fo:block>

   <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6603152">set_request_limit(NewLimit) -&gt; {ok, OldLimit} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6603648">set_request_limit(Agent, NewLimit) -&gt; {ok, OldLimit} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewLimit = OldLimit = infinity | integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the request limit. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that this has no effect on the application configuration as
          defined by configuration files, so a node restart will revert the 
          config to whatever is in those files. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is primarily useful in load regulation 
          scenarios. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6609488">register_subagent(Agent, SubTreeOid, Subagent) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubTreeOid = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubAgent = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Registers a sub-agent under a sub-tree of another agent. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is easy to make mistakes when registering sub-agents and
          this activity should be done carefully.  For example, a
          strange behaviour would result from the following
          configuration:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
snmp_agent:register_subagent(MAPid,[1,2,3,4],SA1),
snmp_agent:register_subagent(SA1,[1,2,3], SA2).
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SA2</fo:inline> will not get requests starting with object
          identifier <fo:inline font-family="monospace">[1,2,3]</fo:inline> since <fo:inline font-family="monospace">SA1</fo:inline> does not. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6617056">unregister_subagent(Agent, SubagentOidOrPid) -&gt; ok | {ok, SubAgentPid} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubTreeOidorPid = oid() | pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unregister a sub-agent.  If the second argument is a pid,
          then that sub-agent will be unregistered from all trees in
          <fo:inline font-family="monospace">Agent</fo:inline>. </fo:block>

          
      </fo:block>


    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6621872">send_notification2(Agent, Notification, SendOpts) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Notification = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendOpts = [send_option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_option() = {receiver, receiver()} | {name, notify_name()} | {context, context_name()} | {varbinds, varbinds()} | {local_engine_id, string()} | {extra, extra_info()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">receiver() = no_receiver | {tag(), tag_receiver()} | notification_delivery_info()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">tag() = term(()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">tag_receiver() = pid() | registered_name() | {Mod, Func, Args}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">registered_name() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mod = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Func = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">notify_name() = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">context_name() = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">varbinds() = [varbind()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">varbind() = {variable(), value()} | {column(), row_index(), value()} | {oid(), value()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">variable() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">value() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">column() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">row_index() = [int()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">extra_info() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Send the notification <fo:inline font-family="monospace">Notification</fo:inline> to the management 
	targets defined for notify-name (<fo:inline font-family="monospace">name</fo:inline>) in the 
	<fo:inline font-family="monospace">snmpNotifyTable</fo:inline> in SNMP-NOTIFICATION-MIB from the 
	specified <fo:inline font-family="monospace">context</fo:inline>. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no <fo:inline font-family="monospace">name</fo:inline> is specified (or if it is <fo:inline font-family="monospace">""</fo:inline>), the
	notification is sent to all management targets. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no <fo:inline font-family="monospace">context</fo:inline> is specified, the default context, <fo:inline font-family="monospace">""</fo:inline>, 
	is used. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The send option <fo:inline font-family="monospace">receiver</fo:inline> specifies where information
	about delivery of Inform-Requests should be sent.  The agent
	sends Inform-Requests and waits for acknowledgments from the
	management targets. 
	The <fo:inline font-family="monospace">receiver</fo:inline> can have three values: </fo:block>

	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">no_receiver</fo:inline> - No information is delivered. </fo:block>
	  </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">notification_delivery_info()</fo:inline> - The information is 
	    delivered via a function call according to this data. See the 
	    <fo:inline font-style="italic">DATA TYPES</fo:inline> section 
	    above for details. </fo:block>
	  </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{tag(), tag_receiver()}</fo:inline> - The information is delivered 
	    either via messages or via a function call according to the value 
	    of <fo:inline font-family="monospace">tag_receiver()</fo:inline>. </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delivery is done differently depending on the value
	    of <fo:inline font-family="monospace">tag_receiver()</fo:inline>: </fo:block>

	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">pid() | registered_name()</fo:inline> - The info will be delivered in  
		the following messages: </fo:block>
		<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{snmp_targets, tag(), Addresses}</fo:inline></fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This informs the user which target addresses the 
		    notification was sent to. </fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{snmp_notification, tag(), {got_response, Address}}</fo:inline></fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This informs the user that this target address 
		    acknowledged the notification. </fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{snmp_notification, tag(), {no_response, Address}}</fo:inline></fo:block>
		    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This informs the user that this target address 
		    did not acknowledge the notification. </fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
		</fo:list-block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The notification is sent as an Inform-Request to each 
		target address in <fo:inline font-family="monospace">Addresses</fo:inline> and if there are no 
		targets for which an Inform-Request is sent, <fo:inline font-family="monospace">Addresses</fo:inline> 
		is the empty list <fo:inline font-family="monospace">[]</fo:inline>. </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">tag_receiver()</fo:inline> will first be sent the 
		<fo:inline font-family="monospace">snmp_targets</fo:inline> message, and then for each address in 
		<fo:inline font-family="monospace">Addresses</fo:inline> list, one of the two <fo:inline font-family="monospace">snmp_notification</fo:inline> 
		messages. </fo:block>
	      </fo:block></fo:list-item-body></fo:list-item>

	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{Mod, Func, Args}</fo:inline> - The info will be delivered via
		the function call: </fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mod:Func([Msg | Args])</fo:inline></fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">Msg</fo:inline> has the same content and purpose as the 
		messages descrived above.</fo:block>
	      </fo:block></fo:list-item-body></fo:list-item>

	    </fo:list-block>
	  </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>

	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">extra</fo:inline> info is not normally interpreted by the agent, 
	  instead it is passed through to the 
	  <fo:inline font-style="italic">net-if</fo:inline> process. It is 
	  up to the implementor of that process to make use of this data. </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The version of net-if provided by this application makes no use
	  of this data, with one exception: 
	  Any tuple containing the atom 
	  <fo:inline font-family="monospace">snmpa_default_notification_extra_info</fo:inline> 
	  may be used by the agent and is therefor <fo:inline font-weight="bold">reserved</fo:inline>. </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See the net-if incomming messages for sending a 
	  <fo:inline font-style="italic">
	  trap</fo:inline> and 
	  <fo:inline font-style="italic">
	  notification</fo:inline> for more info. </fo:block>
	</fo:block>

	
      </fo:block>


    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6667296">send_notification(Agent, Notification, Receiver)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6667776">send_notification(Agent, Notification, Receiver, Varbinds)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6668272">send_notification(Agent, Notification, Receiver, NotifyName, Varbinds)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6668768">send_notification(Agent, Notification, Receiver, NotifyName, ContextName, Varbinds) -&gt; void() </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6669296">send_notification(Agent, Notification, Receiver, NotifyName, ContextName, Varbinds, LocalEngineID) -&gt; void() </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Notification = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Receiver = no_receiver | {Tag, Recv} | notification_delivery_info()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tag = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Recv = receiver()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">receiver() = pid() | atom() | {Mod, Func, Args}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mod = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Func = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NotifyName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ContextName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Varbinds = varbinds()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">varbinds() = [varbind()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">varbind() = {Variable, Value} | {Column, RowIndex, Value} | {OID, Value}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Variable = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Column = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OID = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RowIndex = [int()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LocalEngineID = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends the notification <fo:inline font-family="monospace">Notification</fo:inline> to the
	management targets defined for <fo:inline font-family="monospace">NotifyName</fo:inline> in the
	<fo:inline font-family="monospace">snmpNotifyTable</fo:inline> in SNMP-NOTIFICATION-MIB from the
	specified context.  </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no <fo:inline font-family="monospace">NotifyName</fo:inline> is specified (or if it is <fo:inline font-family="monospace">""</fo:inline>), 
	the notification is sent to all management targets 
	(<fo:inline font-family="monospace">Addresses</fo:inline> below).  </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no <fo:inline font-family="monospace">ContextName</fo:inline> is specified, the default <fo:inline font-family="monospace">""</fo:inline> 
	context is used. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The parameter <fo:inline font-family="monospace">Receiver</fo:inline> specifies where information
	about delivery of Inform-Requests should be sent.  The agent
	sends Inform-Requests and waits for acknowledgments from the
	managers. <fo:inline font-family="monospace">Receiver</fo:inline> can have three values: </fo:block>

	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">no_receiver</fo:inline> - No information is delivered. </fo:block>
	  </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">notification_delivery_info()</fo:inline> - The information is 
              delivered via a function call according to this data. See the 
              <fo:inline font-style="italic">DATA TYPES</fo:inline> section 
              above for details. </fo:block>
	  </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{Tag, Recv}</fo:inline> - The information is delivered either via 
	    messages or via a function call according to the value of 
	    <fo:inline font-family="monospace">Recv</fo:inline>. </fo:block>
	  </fo:block></fo:list-item-body></fo:list-item>

        </fo:list-block>


        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Receiver</fo:inline> has the value <fo:inline font-family="monospace">{Tag, Recv}</fo:inline>, the delivery is
          done according to <fo:inline font-family="monospace">Recv</fo:inline>: </fo:block>

        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">pid() | atom()</fo:inline> - The info will be delivered in  
              the following messages: </fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{snmp_targets, Tag, Addresses}</fo:inline></fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This inform the user which target addresses the 
                  notification was sent to. </fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{snmp_notification, Tag, {got_response, Address}}</fo:inline></fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This informs the user that this target address 
                  acknowledged the notification. </fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{snmp_notification, Tag, {no_response, Address}}</fo:inline></fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This informs the user that this target address 
                  did not acknowledge notification. </fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
		</fo:list-block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The notification is sent as an Inform-Request to each 
              target address in <fo:inline font-family="monospace">Addresses</fo:inline> and if there are no 
              targets for which an Inform-Request is sent, <fo:inline font-family="monospace">Addresses</fo:inline> 
              is the empty list <fo:inline font-family="monospace">[]</fo:inline>. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">receiver</fo:inline> will first be sent the <fo:inline font-family="monospace">snmp_targets</fo:inline> 
              message, and then for each address in <fo:inline font-family="monospace">Addresses</fo:inline> list, 
              one of the two <fo:inline font-family="monospace">snmp_notification</fo:inline> messages. </fo:block>
	  </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{Mod, Func, Args}</fo:inline> - The info will be delivered via
              the function call: </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mod:Func([Msg | Args])</fo:inline></fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">Msg</fo:inline> has the same content and purpose as the 
              messages descrived above.</fo:block>
	  </fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Address</fo:inline> is a management target address and <fo:inline font-family="monospace">Addresses</fo:inline> is a 
          list of management target addresses. They are defined as followes: </fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        Addresses  = [address()]
        Address    = address()
        address()  = v1_address() | v3_address()
        v1_address() = {TDomain, TAddress}
        v3_address() = {{TDomain, TAddress}, V3MsgData}
        TDomain    = tdoamin()
        TAddress   = taddress()
        tdomain()  = The oid of snmpUDPDomain 
                     This is the only supported transport domain.
        taddress() = [A1, A2, A3, A4, P1, P3]
                     The 4 first bytes makes up the IP-address and the last 2,
                     the UDP-port number.
        V3MsgData  = v3_msg_data()
        v3_msg_data() = term()
</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Receiver</fo:inline> is a <fo:inline font-family="monospace">notification_delivery_info()</fo:inline> record,
          then the information about the notification delivery will be delivered 
          to the <fo:inline font-family="monospace">receiver</fo:inline> via the callback functions defined by the 
          <fo:inline font-style="italic">snmpa_notification_delivery_info_receiver</fo:inline> 
          behaviour according to the content of the <fo:inline font-family="monospace">notification_delivery_info()</fo:inline> 
          record. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The optional argument <fo:inline font-family="monospace">Varbinds</fo:inline> defines
          values for the objects in the notification.  If no value is
          given for an object, the <fo:inline font-family="monospace">Agent</fo:inline> performs a get-operation
          to retrieve the value.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Varbinds</fo:inline> is a list of <fo:inline font-family="monospace">Varbind</fo:inline>, where each
          <fo:inline font-family="monospace">Varbind</fo:inline> is one of:
          </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{Variable, Value}</fo:inline>, where <fo:inline font-family="monospace">Variable</fo:inline> is the
           symbolic name of a scalar variable referred to in the notification
           specification.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{Column, RowIndex, Value}</fo:inline>, where <fo:inline font-family="monospace">Column</fo:inline>
           is the symbolic name of a column variable.
          <fo:inline font-family="monospace">RowIndex</fo:inline> is a list of indices for the specified
           element.  If this is the case, the OBJECT IDENTIFIER sent
           in the notification is the <fo:inline font-family="monospace">RowIndex</fo:inline> appended to the OBJECT
           IDENTIFIER for the table column. This is the OBJECT
           IDENTIFIER which specifies the element.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{OID, Value}</fo:inline>, where <fo:inline font-family="monospace">OID</fo:inline> is the OBJECT
           IDENTIFIER for an instance of an object, scalar variable,
           or column variable.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, to specify that <fo:inline font-family="monospace">sysLocation</fo:inline> should have the
          value <fo:inline font-family="monospace">"upstairs"</fo:inline> in the notification, we could use one of:
          </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{sysLocation, "upstairs"}</fo:inline> or</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{[1,3,6,1,2,1,1,6,0], "upstairs"}</fo:inline> or</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{?sysLocation_instance, "upstairs"}</fo:inline> (provided
           that the generated <fo:inline font-family="monospace">.hrl</fo:inline> file is included)</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a variable in the notification is a table element, the
          <fo:inline font-family="monospace">RowIndex</fo:inline> for the element must be given in the
          <fo:inline font-family="monospace">Varbinds</fo:inline> list. In this case, the OBJECT IDENTIFIER sent
          in the notification is the OBJECT IDENTIFIER that identifies this
          element.  This OBJECT IDENTIFIER could be used in a get
          operation later.
          </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is asynchronous, and does not return any
          information.  If an error occurs, <fo:inline font-family="monospace">user_err/2</fo:inline> of the error
          report module is called and the notification is discarded.
          </fo:block>

        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the use of the LocalEngineID argument is only intended 
            for special cases, if the agent is to "emulate" multiple EngineIDs!
            By default, the agent uses the value of <fo:inline font-family="monospace">SnmpEngineID</fo:inline> 
            (see SNMP-FRAMEWORK-MIB). </fo:block>
	</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ExtraInfo</fo:inline> is not normally used in any way by the agent. 
	It is intended to be passed along to the net-if process, which is
	a component that a user can implement themself. The users own net-if
	may then make use of ExtraInfo. The net-if provided with this 
	application does not process ExtraInfo. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is one exception. <fo:inline font-weight="bold">Any</fo:inline> tuple containing the atom
	<fo:inline font-family="monospace">snmpa_default_notification_extra_info</fo:inline> will, in this context,
	be considered belonging to this application, and may be processed
	by the agent. </fo:block>

	
      </fo:block>


    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6735840">discovery(TargetName, Notification) -&gt; {ok, ManagerEngineID} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6736352">discovery(TargetName, Notification, Varbinds) -&gt; {ok, ManagerEngineID} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6736880">discovery(TargetName, Notification, DiscoHandler) -&gt; {ok, ManagerEngineID} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6737408">discovery(TargetName, Notification, ContextName, Varbinds) -&gt; {ok, ManagerEngineID} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6737936">discovery(TargetName, Notification, Varbinds, DiscoHandler) -&gt; {ok, ManagerEngineID} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6738464">discovery(TargetName, Notification, ContextName, Varbinds, DiscoHandler) -&gt; {ok, ManagerEngineID} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6739008">discovery(TargetName, Notification, ContextName, Varbinds, DiscoHandler, ExtraInfo) -&gt; {ok, ManagerEngineID} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Notification = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ContextName = string() (defaults to "")</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Varbinds = varbinds()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">varbinds() = [varbind()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DiscoHandler = snmpa_discovery_handler()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExtraInfo = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">snmpa_discovery_handler() = Module implementing the snmpa_discovery_handler behaviour</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ManagerEngineID = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">varbind() = {Variable, Value} | {Column, RowIndex, Value} | {OID, Value}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Variable = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Column = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OID = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RowIndex = [int()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initiate the discovery process with the manager identified by
          <fo:inline font-family="monospace">TargetName</fo:inline> using the notification <fo:inline font-family="monospace">Notification</fo:inline>. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is synchronous, which means that it will return when
          the discovery process has been completed or failed. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">DiscoHandler</fo:inline> module is used during the discovery 
          process. See 
          <fo:inline font-style="italic">discovery handler</fo:inline>
          for more info. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ExtraInfo</fo:inline> argument is passed on to the callback functions
          of the <fo:inline font-family="monospace">DiscoHandler</fo:inline>. </fo:block>

        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If we are not at security-level <fo:inline font-family="monospace">noAuthNoPriv</fo:inline>,
          this could be complicated, since the agent will then continue 
          with stage 2, before which the usm-related updates must be 
          done. </fo:block></fo:block>

        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default discovery handler will require 
          additional actions by the caller and the discovery will not work
          if the security-level is higher then <fo:inline font-family="monospace">noAuthNoPriv</fo:inline>. </fo:block></fo:block>

          
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6756752">convert_config(OldConfig) -&gt; AgentConfig</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OldConfig = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AgentConfig = list()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This off-line utility function can be used to convert
          the old snmp application config (pre snmp-4.0) to the 
          new snmp agent config (as of snmp-4.0).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about the old config (<fo:inline font-family="monospace">OldConfig</fo:inline>) 
          see the OTP R9C documentation.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about the current agent config 
          (<fo:inline font-family="monospace">AgentConfig</fo:inline>), see either
          the <fo:inline font-style="italic">SNMP application</fo:inline> 
          part of the reference manual or the 
          <fo:inline font-style="italic">Configuring the application</fo:inline> 
          chapter of the SNMP user's guide.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6764560">restart_worker() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6765024">restart_worker(Agent) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Restart the worker process of a multi-threaded agent.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a utility function, that can be useful when
          e.g. debugging instrumentation functions.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6769328">restart_set_worker() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6769792">restart_set_worker(Agent) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = pid() | atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Restart the set worker process of a multi-threaded agent.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a utility function, that can be useful when
          e.g. debugging instrumentation functions.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6774128">print_mib_info() -&gt; void()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints the content of all the (snmp) tables and variables 
	for all mibs handled by the snmp agent. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6777024">print_mib_tables() -&gt; void()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints the content of all the (snmp) tables 
	for all mibs handled by the snmp agent. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6779904">print_mib_variables() -&gt; void()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints the content of all the (snmp) variables 
	for all mibs handled by the snmp agent. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6782800">verbosity(Ref,Verbosity) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ref = pid() | sub_agents | master_agent | net_if | mib_server | symbolic_store | note_store | local_db</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Verbosity = verbosity() | {subagents, verbosity()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">verbosity() = silence | info | log | debug | trace </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets verbosity for the designated process. For the lowest 
          verbosity <fo:inline font-family="monospace">silence</fo:inline>, nothing is printed. The higher the
          verbosity, the more is printed. </fo:block>
      </fo:block>
  

  <fo:block id="idp6787744" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">calendar(3), erlc(1) </fo:block>
  

  
<fo:block page-break-before="always" id="idp6796080" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa_conf</fo:marker>snmpa_conf</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpa_conf
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmpa_conf</fo:inline> contains various utility functions to 
      used for manipulating (write/append/read) the config files of the
      SNMP agent. </fo:block>

    
  

  <fo:block id="idp6799312" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
transportDomain() = transportDomainUdpIpv4 | transportDomainUdpIpv6

transportAddress() =
    transportAddressIPv4() | transportAddressIPv6()

transportAddressWithPort() =
    transportAddressIPv4WithPort() | transportAddressIPv6WithPort()

transportAddressWithoutPort() =
    transportAddressIPv4WithoutPort() | transportAddressIPv6WithoutPort()

transportAddressIPv4() =
    transportAddressIPv4WithPort() | transportAddressIPv4WithoutPort()
transportAddressIPv4WithPort =
    {transportAddressIPv4WithoutPort(), inet:port_number()} |
    [byte() x 4, byte() x 2]
transportAddressIPv4WithoutPort =
    inet:ip4_address() | [byte() x 4]

transportAddressIPv6() =
    transportAddressIPv6WithPort() | transportAddressIPv6WithoutPort()
transportAddressIPv6WithPort =
    {transportAddressIPv6WithoutPort(), inet:port_number()} |
    [word() x 8, inet:port_number()] |
    [word() x 8, byte() x 2] |
    {byte() x 16, byte() x 2]
transportAddressIPv6WithoutPort =
    inet:ip6_address() | [word() x 8] | [byte() x 16]

transportAddressMask() =
    [] | transportAddressWithPort()

byte() = 0..255
word() = 0..65535
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">inet:ip4_address()</fo:inline>, <fo:inline font-family="monospace">inet:ip6_address()</fo:inline>
    and <fo:inline font-family="monospace">inet:port_number()</fo:inline>, see also
    <fo:inline font-style="italic">
    <fo:inline font-family="monospace">inet:ip_address()</fo:inline></fo:inline></fo:block>

    
  



  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6805536">agent_entry(Tag, Val) -&gt; agent_entry()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tag = intAgentTransports | intAgentUDPPort | intAgentMaxPacketSize | snmpEngineMaxMessageSize | snmpEngineID</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">agent_entry() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create an entry for the agent config file, <fo:inline font-family="monospace">agent.conf</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type of <fo:inline font-family="monospace">Val</fo:inline> depends on the value of <fo:inline font-family="monospace">Tag</fo:inline>, 
          see 
          <fo:inline font-style="italic">Agent Information</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6812864">write_agent_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6813328">write_agent_config(Dir, Hdr, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hdr = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [agent_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write the agent config to the agent config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hdr</fo:inline> is an optional file header (note that this text is
          written to the file as is). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Agent Information</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6820848">append_agent_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [agent_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Append the config to the current agent config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Agent Information</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6827088">read_agent_config(Dir) -&gt; Conf</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [agent_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read the current agent config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Agent Information</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6833312">standard_entry(Tag, Val) -&gt; standard_entry()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tag = sysDescr | sysObjectID | sysContact | sysName | sysLocation | sysServices | snmpEnableAuthenTraps</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">standard_entry() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create an entry for the agent standard config file, 
          <fo:inline font-family="monospace">standard.conf</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type of <fo:inline font-family="monospace">Val</fo:inline> depends on the value of <fo:inline font-family="monospace">Tag</fo:inline>, 
          see 
          <fo:inline font-style="italic">System Information</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6840688">write_standard_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6841152">write_standard_config(Dir, Hdr, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hdr = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [standard_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write the agent standard config to the agent standard 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hdr</fo:inline> is an optional file header (note that this text is
          written to the file as is). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">System Information</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6848720">append_standard_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [standard_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Append the standard config to the current agent standard 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">System Information</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6855008">read_standard_config(Dir) -&gt; Conf</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [standard_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read the current agent standard config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">System Information</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6861264">context_entry(Context) -&gt; context_entry()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Context = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">context_entry() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create an entry for the agent context config file, 
          <fo:inline font-family="monospace">context.conf</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Contexts</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6867152">write_context_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6867616">write_context_config(Dir, Hdr, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hdr = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [context_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write the agent context config to the agent context 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hdr</fo:inline> is an optional file header (note that this text is
          written to the file as is). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Contexts</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6875168">append_context_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [context_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Append the context config to the current agent context 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Contexts</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6881440">read_context_config(Dir) -&gt; Conf</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [context_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read the current agent context config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Contexts</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6887680">community_entry(CommunityIndex) -&gt; community_entry()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6888160">community_entry(CommunityIndex, CommunityName, SecName, ContextName, TransportTag) -&gt; community_entry()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CommunityIndex = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CommunityName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CtxName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TransportTag = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">community_entry() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create an entry for the agent community config file, 
          <fo:inline font-family="monospace">community.conf</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CommunityIndex</fo:inline> must be a <fo:inline font-weight="bold">non-empty</fo:inline> string. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">community_entry("public")</fo:inline> translates to the following call:
          <fo:inline font-family="monospace">community_entry(CommunityIndex, CommunityIndex, "initial", "", "")</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">community_entry("all-rights")</fo:inline> translates to the following 
          call: <fo:inline font-family="monospace">community_entry(CommunityIndex, CommunityIndex, CommunityIndex, "", "")</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Community</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6899680">write_community_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6900144">write_community_config(Dir, Hdr, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hdr = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [community_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write the agent community config to the agent community 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hdr</fo:inline> is an optional file header (note that this text is
          written to the file as is). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Community</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6907696">append_community_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [community_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Append the community config to the current agent community 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Community</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6913984">read_community_config(Dir) -&gt; Conf</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [community_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read the current agent community config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Communities</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6920224">target_addr_entry(Name, Domain, Addr, TagList, ParamsName, EngineId) -&gt; target_addr_entry()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6920752">target_addr_entry(Name, Domain, Addr, TagList, ParamsName, EngineId, TMask) -&gt; target_addr_entry()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6921280">target_addr_entry(Name, Domain, Addr, TagList, ParamsName, EngineId, TMask, MaxMessageSize) -&gt; target_addr_entry()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6921824">target_addr_entry(Name, Domain, Addr, Timeout, RetryCount, TagList, ParamsName, EngineId, TMask, MaxMessageSize) -&gt; target_addr_entry()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Domain = transportDomain()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ip = transportAddress() (depends on Domain)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RetryCount = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TagList = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ParamsName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EngineId = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TMask = transportAddressMask() (depends on Domain)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxMessageSize = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">target_addr_entry() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create an entry for the agent target_addr config file, 
          <fo:inline font-family="monospace">target_addr.conf</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Name</fo:inline> must be a <fo:inline font-weight="bold">non-empty</fo:inline> string. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">target_addr_entry/6</fo:inline> translates to the following call:
          <fo:inline font-family="monospace">target_addr_entry(Name, Domain, Addr, TagList, ParamsName, EngineId, [])</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">target_addr_entry/7</fo:inline> translates to the following call:
          <fo:inline font-family="monospace">target_addr_entry(Name, Domain, Addr, TagList, ParamsName, EngineId, TMask, 2048)</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">target_addr_entry/8</fo:inline> translates to the following call:
          <fo:inline font-family="monospace">target_addr_entry(Name, Domain, Addr, 1500, 3, TagList, ParamsName, EngineId, TMask, MaxMessageSize)</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Target Address Definitions</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6937008">write_target_addr_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6937488">write_target_addr_config(Dir, Hdr, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hdr = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [target_addr_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write the agent target_addr config to the agent target_addr 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hdr</fo:inline> is an optional file header (note that this text is
          written to the file as is). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Target Address Definitions</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6945072">append_target_addr_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [target_addr_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Append the target_addr config to the current agent target_addr 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Target Address Definitions</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6951376">read_target_addr_config(Dir) -&gt; Conf</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [target_addr_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read the current agent target_addr config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Target Address Definitions</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6957632">target_params_entry(Name, Vsn) -&gt; target_params_entry()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6958112">target_params_entry(Name, Vsn, SecName, SecLevel) -&gt; target_params_entry()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6958624">target_params_entry(Name, MPModel, SecModel, SecName, SecLevel) -&gt; target_params_entry()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Vsn = v1 | v2 | v3</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MPModel = v1 | v2c | v3</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecModel = v1 | v2c | usm</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecLevel = noAuthNoPriv | authNoPriv | authPriv</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">target_params_entry() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create an entry for the agent target_params config file, 
          <fo:inline font-family="monospace">target_params.conf</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Name</fo:inline> must be a <fo:inline font-weight="bold">non-empty</fo:inline> string. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Vsn</fo:inline> translates into <fo:inline font-family="monospace">MPModel</fo:inline> and <fo:inline font-family="monospace">SecModel</fo:inline> as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
\011  Vsn = v1 =&gt; MPModel = v1,  SecModel = v1
\011  Vsn = v2 =&gt; MPModel = v2c, SecModel = v2c
\011  Vsn = v3 =&gt; MPModel = v3,  SecModel = usm
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">target_params_entry/2</fo:inline> translates to the following call:
          <fo:inline font-family="monospace">target_params_entry(Name, Vsn, "initial", noAuthNoPriv)</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">target_params_entry/4</fo:inline> translates to the following
          call: <fo:inline font-family="monospace">target_params_entry(Name, MPModel, SecModel, SecName, SecLevel)</fo:inline> where <fo:inline font-family="monospace">MPModel</fo:inline> and
          <fo:inline font-family="monospace">SecModel</fo:inline> is mapped from <fo:inline font-family="monospace">Vsn</fo:inline>, see above. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Target Parameters Definitions</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6974160">write_target_params_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6974640">write_target_params_config(Dir, Hdr, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hdr = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [target_params_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write the agent target_params config to the agent target_params 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hdr</fo:inline> is an optional file header (note that this text is
          written to the file as is). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Target Parameters Definitions</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6982240">append_target_params_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [target_params_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Append the target_params config to the current agent target_params 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Target Parameters Definitions</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6988592">read_target_params_config(Dir) -&gt; Conf</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [target_params_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read the current agent target_params config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Target Parameters Definitions</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6994864">vacm_s2g_entry(SecModel, SecName, GroupName) -&gt; vacm_s2g_entry()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6995360">vacm_acc_entry(GroupName, Prefix, SecModel, SecLevel, Match, ReadView, WriteView, NotifyView) -&gt; vacm_acc_entry()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6995904">vacm_vtf_entry(ViewIndex, ViewSubtree) -&gt; vacm_vtf_entry()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6996400">vacm_vtf_entry(ViewIndex, ViewSubtree, ViewStatus, ViewMask) -&gt; vacm_vtf_entry()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecModel = v1 | v2c | usm</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Prefix = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecLevel = noAuthNoPriv | authNoPriv | authPriv</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Match = prefix | exact</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReadView = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">WriteView = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NotifyView = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ViewIndex = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ViewSubtree = [integer()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ViewStatus = included | excluded</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ViewMask = null | [zero_or_one()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">zero_or_one() = 0 | 1</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">vacm_s2g_entry() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">vacm_acc_entry() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">vacm_vtf_entry() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create an entry for the agent vacm config file, 
          <fo:inline font-family="monospace">vacm.conf</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">vacm_vtf_entry/2</fo:inline> translates to the following call:
          <fo:inline font-family="monospace">vacm_vtf_entry(ViewIndex, ViewSubtree, included, null)</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">MIB Views for VACM</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7010416">write_vacm_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7010880">write_vacm_config(Dir, Hdr, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hdr = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [vacm_entry()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">vacm_entry() = vacm_sg2_entry() | vacm_acc_entry() | vacm_vtf_entry()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write the agent vacm config to the agent vacm 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hdr</fo:inline> is an optional file header (note that this text is
          written to the file as is). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">MIB Views for VACM</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7018880">append_vacm_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [vacm_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Append the vacm config to the current agent vacm 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">MIB Views for VACM</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7025136">read_vacm_config(Dir) -&gt; Conf</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [vacm_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read the current agent vacm config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">MIB Views for VACM</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7031360">usm_entry(EngineId) -&gt; usm_entry()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7031824">usm_entry(EngineID, UserName, SecName, Clone, AuthP, AuthKeyC, OwnAuthKeyC, PrivP, PrivKeyC, OwnPrivKeyC, Public, AuthKey, PrivKey) -&gt; usm_entry()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EngineId = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Clone = zeroDotZero | [integer()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AuthP = usmNoAuthProtocol | usmHMACMD5AuthProtocol, | usmHMACSHAAuthProtocol</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AuthKeyC = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OwnAuthKeyC = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PrivP = usmNoPrivProtocol | usmDESPrivProtocol | usmAesCfb128Protocol</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PrivKeyC = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OwnPrivKeyC = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Public = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AuthKey = [integer()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PrivKey = [integer()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">usm_entry() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create an entry for the agent vacm config file, 
          <fo:inline font-family="monospace">vacm.conf</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">usm_entry/1</fo:inline> translates to the following call:
          <fo:inline font-family="monospace">usm_entry("initial", "initial", zeroDotZero, usmNoAuthProtocol, "", "", usmNoPrivProtocol, "", "", "", "", "")</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Security data for USM</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7044608">write_usm_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7045072">write_usm_config(Dir, Hdr, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hdr = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [usm_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write the agent usm config to the agent usm 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hdr</fo:inline> is an optional file header (note that this text is
          written to the file as is). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Security data for USM</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7052576">append_usm_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [usm_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Append the usm config to the current agent vacm 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Security data for USM</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7058832">read_usm_config(Dir) -&gt; Conf</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [usm_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read the current agent usm config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Security data for USM</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7065056">notify_entry(Name, Tag, Type) -&gt; notify_entry()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tag = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = trap | inform</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">community_entry() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create an entry for the agent notify config file, 
          <fo:inline font-family="monospace">notify.conf</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Name</fo:inline> must be a <fo:inline font-weight="bold">non-empty</fo:inline> string. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Notify Definitions</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7073024">write_notify_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7073488">write_notify_config(Dir, Hdr, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hdr = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [notify_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write the agent notify config to the agent notify 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hdr</fo:inline> is an optional file header (note that this text is
          written to the file as is). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Notify Definitions</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7081024">append_notify_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [notify_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Append the notify config to the current agent notify 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Notify Definitions</fo:inline> 
          for more info. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7087280">read_notify_config(Dir) -&gt; Conf</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [community_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read the current agent notify config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Notify Definitions</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp7100704" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa_discovery_handler</fo:marker>snmpa_discovery_handler</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpa_discovery_handler
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module defines the behaviour of the agent discovery
      handler. A <fo:inline font-family="monospace">snmpa_discovery_handler</fo:inline> compliant module 
      must export the following functions: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">stage1_finish/2</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of them and their exact signatures are explained
      below. </fo:block>

     
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7106752">stage1_finish(TargetName, ManagerEngineID, ExtraInfo) -&gt; ignore | {ok, usm_entry() | [usm_entry()]} | {ok, usm_entry() | [usm_entry()], NewExtraInfo}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ManagerEngineID = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExtraInfo = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">usm_entry() = tuple() compatible with usm.conf</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewExtraInfo = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called at the end of stage 1 of the 
          discovery process. It should return either the atom 
          <fo:inline font-family="monospace">ignore</fo:inline> or <fo:inline font-family="monospace">{ok, usm_entry() | [usm_entry()]}</fo:inline>. See 
          <fo:inline font-style="italic">usm_entry()</fo:inline>
          and 
          <fo:inline font-style="italic">usm_entry/13</fo:inline>
          for more info. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the function returns <fo:inline font-family="monospace">ignore</fo:inline>, then it is assumed that 
          either: </fo:block>
        
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The caller (of the discovery function) will make the 
             needed updates later. </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The callback function itself did the updates. </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In either case, the agent will do nothing, but return
          the retrieved ManagerEngineID (see 
          <fo:inline font-style="italic">discovery</fo:inline>
          for more info) and possible continue with stage 2 of 
          the discovery process. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ExtraInfo</fo:inline> argument is passed on from the 
          <fo:inline font-style="italic">discovery</fo:inline>
          function. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function may return an updated <fo:inline font-family="monospace">NewExtraInfo</fo:inline> 
          that will be used in subsequent calls to the callback 
          functions. Intended for future use. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The purpose of this function is to generate the usm-
          related security data needed for usm processing in the 
          agent. Specifically, updating the usmUserTable. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When an <fo:inline font-family="monospace">usm_entry()</fo:inline> tuple (or a list of such
          tuples) is returned, this data is then added to the 
          <fo:inline font-family="monospace">usmUserTable</fo:inline> by the (master-) agent. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When an <fo:inline font-family="monospace">usm_entry()</fo:inline> tuple (or a list of such
          tuples) is returned, this data is then added to the 
          <fo:inline font-family="monospace">usmUserTable</fo:inline> by the (master-) agent. </fo:block>

        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the function does not check if this entry 
          already exists. </fo:block></fo:block>

        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that this function is executed in the context of 
          the master-agent process. </fo:block></fo:block>

      </fo:block>

  
  
<fo:block page-break-before="always" id="idp7132992" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa_error_report</fo:marker>snmpa_error_report</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpa_error_report
  <fo:block/>
  
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module defines the behaviour of the agent error reporting.
      A <fo:inline font-family="monospace">snmpa_error_report</fo:inline> compliant module 
      must export the following functions: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">config_err/2</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">user_err/2</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of them and their exact signatures are explained
      below. </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7139536">config_err(Format, Args) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Format = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is called if an error occurs during the
          configuration phase, for example if a syntax error is found in
          a configuration file.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">Args</fo:inline> are as in
          <fo:inline font-family="monospace">io:format(Format, Args)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7144944">user_err(Format, Args) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Format = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is called if a user related error occurs at
          run-time, for example if a user defined instrumentation
          function returns erroneous.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">Args</fo:inline> are as in
          <fo:inline font-family="monospace">io:format(Format, Args)</fo:inline>.</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp7157504" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa_error</fo:marker>snmpa_error</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpa_error
  <fo:block/>
  
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmpa_error</fo:inline> contains two callback functions 
      which are called if an error occurs at different times during agent 
      operation. These functions in turn calls the corresponding function
      in the configured error report module, which implements the actual 
      report functionality.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two simple implementation(s) is provided with the
      toolkit; the modules 
      <fo:inline font-style="italic">snmpa_error_logger</fo:inline> 
      which is the default and 
      <fo:inline font-style="italic">snmpa_error_io</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The error report module is configured using the directive 
      <fo:inline font-family="monospace">error_report_mod</fo:inline>, see
      <fo:inline font-style="italic">configuration parameters</fo:inline>.
      </fo:block>

      
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7165408">config_err(Format, Args) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Format = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is called if an error occurs during the
          configuration phase, for example if a syntax error is found in
          a configuration file.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">Args</fo:inline> are as in
          <fo:inline font-family="monospace">io:format(Format, Args)</fo:inline>.</fo:block>

	  
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7171376">user_err(Format, Args) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Format = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is called if a user related error occurs at
          run-time, for example if a user defined instrumentation
          function returns erroneous.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">Args</fo:inline> are as in
          <fo:inline font-family="monospace">io:format(Format, Args)</fo:inline>.</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp7183936" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa_error_io</fo:marker>snmpa_error_io</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpa_error_io
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmpa_error_io</fo:inline> implements the 
      <fo:inline font-family="monospace">snmp_error_report</fo:inline> behaviour 
      (see <fo:inline font-style="italic">snmpa_error_report</fo:inline>) 
      containing two callback functions which are called in order to 
      report SNMP errors.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module provides a simple mechanism for reporting SNMP
      errors. Errors are written to stdout using the <fo:inline font-family="monospace">io</fo:inline> module.
      It is provided as an simple example.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module needs to be explicitly configured, see
      <fo:inline font-style="italic">snmpa_error</fo:inline> and
      <fo:inline font-style="italic">configuration parameters</fo:inline>.
      </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7191056">config_err(Format, Args) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Format = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is called if an error occurs during the
          configuration phase, for example if a syntax error is found in
          a configuration file.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">Args</fo:inline> are as in
          <fo:inline font-family="monospace">io:format(Format, Args)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7196464">user_err(Format, Args) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Format = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is called if a user related error occurs at
          run-time, for example if a user defined instrumentation
          function returns erroneous.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">Args</fo:inline> are as in
          <fo:inline font-family="monospace">io:format(Format, Args)</fo:inline>.</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp7209024" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa_error_logger</fo:marker>snmpa_error_logger</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpa_error_logger
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmpa_error_logger</fo:inline> implements the 
      <fo:inline font-family="monospace">snmpa_error_report</fo:inline> behaviour 
      (see <fo:inline font-style="italic">snmpa_error_report</fo:inline>) 
      containing two callback functions which are called in order to 
      report SNMP errors.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module provides a simple mechanism for reporting SNMP
      errors. Errors are sent to the <fo:inline font-family="monospace">error_logger</fo:inline> after a 
      size check. Messages are truncated after 1024 chars. 
      It is provided as an example.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module is the default error report module, but can be 
      explicitly configured, see
      <fo:inline font-style="italic">snmpa_error</fo:inline> and
      <fo:inline font-style="italic">configuration parameters</fo:inline>.
      </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7216224">config_err(Format, Args) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Format = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is called if an error occurs during the
          configuration phase, for example if a syntax error is found in
          a configuration file.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">Args</fo:inline> are as in
          <fo:inline font-family="monospace">io:format(Format, Args)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7221632">user_err(Format, Args) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Format = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is called if a user related error occurs at
          run-time, for example if a user defined instrumentation
          function returns erroneous.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">Args</fo:inline> are as in
          <fo:inline font-family="monospace">io:format(Format, Args)</fo:inline>.</fo:block>
      </fo:block>
  

  <fo:block id="idp7227200" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">error_logger(3)</fo:block>
  
  
<fo:block page-break-before="always" id="idp7235536" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa_local_db</fo:marker>snmpa_local_db</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpa_local_db
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmpa_local_db</fo:inline> contains functions for
      implementing tables (and variables) using the SNMP built-in 
      database. The database exists in two instances, one volatile 
      and one persistent. The volatile database is implemented with 
      ets. The persistent database is implemented with dets. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is a scaling problem with this database.
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Insertions and deletions are inefficient for large tables.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This problem is best solved by using Mnesia instead.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions describe the interface to 
      <fo:inline font-family="monospace">snmpa_local_db</fo:inline>. Each function has a Mnesia equivalent. 
      The argument <fo:inline font-family="monospace">NameDb</fo:inline> is a tuple <fo:inline font-family="monospace">{Name, Db}</fo:inline> where 
      <fo:inline font-family="monospace">Name</fo:inline> is the symbolic name of the managed object (as defined 
      in the MIB), and <fo:inline font-family="monospace">Db</fo:inline> is either <fo:inline font-family="monospace">volatile</fo:inline> or 
      <fo:inline font-family="monospace">persistent</fo:inline>. <fo:inline font-family="monospace">mnesia</fo:inline> is not possible since all these 
      functions are <fo:inline font-family="monospace">snmpa_local_db</fo:inline> specific.
      </fo:block>
  

  <fo:block id="idp7245232" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Common Data Types</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the functions defined below, the following types are
      used:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NameDb = {Name, Db}</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Name = atom(), Db = volatile | persistent</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RowIndex = [int()]</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Cols = [Col] | [{Col, Value}], Col = int(), Value = term()</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">RowIndex</fo:inline> denotes the last part of the OID, that
      specifies the index of the row in the table.  <fo:inline font-family="monospace">Cols</fo:inline> is a
      list of column numbers in case of a get operation, and a list of
      column numbers and values in case of a set operation.
      </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7253376">dump() -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be used to manually dump the database 
          to file.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7256608">match(NameDb, Pattern)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs an ets/dets matching on the table. 
          See Stdlib documentation, module ets, for a description of 
          <fo:inline font-family="monospace">Pattern</fo:inline> and the return values.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7259424">print()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7259872">print(TableName)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7260320">print(TableName, Db)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TableName = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints the contents of the database on
          screen. This is useful for debugging since the 
          <fo:inline font-family="monospace">STANDARD-MIB</fo:inline> and <fo:inline font-family="monospace">OTP-SNMPEA-MIB</fo:inline> 
          (and maybe your own MIBs) are stored in <fo:inline font-family="monospace">snmpa_local_db</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">TableName</fo:inline> is an atom for a table in the database. 
          When no name is supplied, the whole database is shown.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7265776">table_create(NameDb) -&gt; bool()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a table. If the table already exist, the old copy
          is destroyed.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">false</fo:inline> if the <fo:inline font-family="monospace">NameDb</fo:inline> argument is
          incorrectly specified, <fo:inline font-family="monospace">true</fo:inline> otherwise.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7269936">table_create_row(NameDb, RowIndex, Row) -&gt; bool()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Row = {Val1, Val2, ..., ValN}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val1 = Val2 = ... = ValN = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a row in a table.  <fo:inline font-family="monospace">Row</fo:inline> is a tuple with
          values for all columns, including the index columns.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7274112">table_delete(NameDb) -&gt; void()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes a table.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7276368">table_delete_row(NameDb, RowIndex) -&gt; bool()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes the row in the table.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7278672">table_exists(NameDb) -&gt; bool()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks if a table exists.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7280944">table_get_row(NameDb, RowIndex) -&gt; Row | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Row = {Val1, Val2, ..., ValN}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val1 = Val2 = ... = ValN = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Row</fo:inline> is a tuple with values for all columns,
          including the index columns.</fo:block>
      </fo:block>
  

  <fo:block id="idp7285120" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ets(3), dets(3), snmp_generic(3)
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp7292608" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa_mib_data</fo:marker>snmpa_mib_data</fo:block>Erlang module</fo:block>
  <fo:block/>

  snmpa_mib_data
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module defines the behaviour of the SNMP agent mib-server 
    data module. A <fo:inline font-family="monospace">snmpa_mib_data</fo:inline> compliant module 
    must export the following functions: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">new/1</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">close/1</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">sync/1</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">load_mib/4</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">unload_mib/4</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">lookup/2</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">next/3</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">register_subagent/3</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">unregister_subagent/2</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">which_mib/2</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">which_mibs/1</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">whereis_mib/2</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">dump/2</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">info/1</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">backup/2</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">code_change/4</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of them and their exact signatures are 
    explained below. </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the data extracted from the imported (loaded) 
    mibs are stored partly by the mib-server and partly by the 
    symbolic-store server. See the default mib-server data 
    module, <fo:inline font-family="monospace">snmpa_mib_data_tttn</fo:inline> for details. </fo:block>

  

  <fo:block id="idp7316288" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">CALLBACK FUNCTIONS</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions must be exported from a 
    <fo:inline font-family="monospace">mib-server</fo:inline> data callback module: </fo:block>

    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7318960">Module:new(Storage) -&gt; State</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Storage = mib_storage()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create a new mib-server data instance. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7323152">Module:close(State) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Close the mib-storage.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7326880">Module:sync(State) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Synchronize (write to disc, if possible) the mib-server data. 
	This depends on the <fo:inline font-family="monospace">mib_storage</fo:inline> option, and will only have 
	an effect if the mib-storage option has an actual disc component 
	(such as dets, or ets with a file). </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7331216">Module:load_mib(State, Filename, MeOverride, TeOverride) -&gt; {ok, NewState} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = NewState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filename = filename()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MeOverride = boolean()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TeOverride = boolean()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = already_loaded | term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Load the mib specified by the <fo:inline font-family="monospace">Filename</fo:inline> argument 
	into the mib-server. 
	The <fo:inline font-family="monospace">MeOverride</fo:inline> and <fo:inline font-family="monospace">TeOverride</fo:inline> arguments 
	specifies how the mib-server shall handle duplicate mib- and trap-
	entries. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7338288">Module:unload_mib(State, Filename) -&gt; {ok, NewState} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = NewState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filename = filename()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = not_loaded | term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unload the mib specified by the <fo:inline font-family="monospace">Filename</fo:inline> argument 
	from the mib-server. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7343456">Module:lookup(State, Oid) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = {variable, ME} | {table_column, ME, TEOid} | {subagent, SAPid, SAOid} | {false, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oid = TEOid = SAOid = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SAPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ME = me()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Find the mib-entry corresponding to the <fo:inline font-family="monospace">Oid</fo:inline>. 
	If it is a variable, the <fo:inline font-family="monospace">Oid</fo:inline> must be 
	&lt;Oid for var&gt;.0 
	and if it is a table, <fo:inline font-family="monospace">Oid</fo:inline> must be 
	&lt;table&gt;.&lt;entry&gt;.&lt;col&gt;.&lt;any&gt;.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7350976">Module:next(State, Oid, MibView) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = false | endOfTable | {subagent, SAPid, SAOid} | {variable, ME, VarOid} | {table, TableOid, TableRestOid, ME}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oid = SAOid = VarOid = TableOid = TableRestOid = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SAPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ME = me()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Finds the lexicographically next oid. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7356656">Module:register_subagent(State, Oid, Pid) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = NewState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = {ok, NewState} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oid = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Register the subagent, process, 
	handling part of the mib-tree. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7362272">Module:unregister_subagent(State, PidOrOid) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = NewState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = {ok, NewState} | {ok, NewState, Pid} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PidOrOid = pid() | oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unregister the subagent, handling part of the mib-tree, 
	as specified by the <fo:inline font-family="monospace">oid()</fo:inline> or <fo:inline font-family="monospace">pid()</fo:inline> 
	(<fo:inline font-family="monospace">PidOrOid</fo:inline>). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When unregister the subagent using an <fo:inline font-family="monospace">oid()</fo:inline>, the <fo:inline font-family="monospace">pid()</fo:inline> 
	of the process handling the sub-tree is also returned. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7370688">Module:dump(State, Destination) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = ok | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Destination = io | filename()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dump the mib-server data to <fo:inline font-family="monospace">stdio</fo:inline> (Destination = <fo:inline font-family="monospace">io</fo:inline>) or
	the specified file. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7377168">Module:which_mib(State, Oid) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = {ok, MibFile} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oid = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieve the mib-file to which an given <fo:inline font-family="monospace">oid()</fo:inline> belongs. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7383184">Module:which_mibs(State) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = [{MibName, Filename}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filename = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieve all loaded mib-files. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7388288">Module:whereis_mib(State, MibName) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = {ok, Filename} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filename = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieve the mib file for the mib. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7393872">Module:info(State) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = {ok, Filename} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filename = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieve misc info for the mib data. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a utility function used to inspect, for instance, 
	memory usage, in a simple way. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7399520">Module:backup(State, BackupDir) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = ok | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">BackupDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Perform a backup of the mib-server data. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that its implementation dependant (and also 
	dependent on mib-storage is used) if a backup is possible. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7405200">Module:code_change(Destination, Vsn, Extra, State) -&gt; NewState</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Destination = up | down</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Vsn = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = NewState = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Perform a code-change (upgrade or downgrade). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
	<fo:inline font-style="italic">gen_server</fo:inline>
	for more info regarding the <fo:inline font-family="monospace">Vsn</fo:inline> and <fo:inline font-family="monospace">Extra</fo:inline> arguments. </fo:block>

      </fo:block>

  
  
<fo:block page-break-before="always" id="idp7418144" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa_mib_storage</fo:marker>snmpa_mib_storage</fo:block>Erlang module</fo:block>
  <fo:block/>

  snmpa_mib_storage
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module defines the behaviour of the SNMP agent mib storage. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The mib storage is used by the agent to store internal mib-
    related information. The mib storage module is used by several entities, 
    not just the mib-server. </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">snmpa_mib_storage</fo:inline> compliant module 
    must export the following functions: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">open/5</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">close/1</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">read/2</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">write/2</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">delete/1</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">delete/2</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">match_object/2</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">match_delete/2</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">tab2list/1</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">info/1</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">sync/1</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">backup/2</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of them and their exact signatures are 
    explained below. </fo:block>

  

  <fo:block id="idp7437104" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">CALLBACK FUNCTIONS</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions must be exported from a 
    <fo:inline font-family="monospace">mib-server</fo:inline> data callback module: </fo:block>

    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7439776">Module:open(Name, RecordName, Fields, Type, Options) -&gt; {ok, TabId} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RecordName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fields = [atom()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = set | bag()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TabId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create or open a mib storage table. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the <fo:inline font-family="monospace">RecordName</fo:inline> and <fo:inline font-family="monospace">Fields</fo:inline> arguments 
	my not be used in all implementations (they are actually only 
	needed for mnesia-based implementations). </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note also that the <fo:inline font-family="monospace">Options</fo:inline> argument comes from
	the <fo:inline font-family="monospace">options</fo:inline> config option of the mib-storage config option, 
	and is passed on as is. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7449120">Module:close(TabId) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Close the mib-storage table.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7452864">Module:read(TabId, Key) -&gt; false | {value, Record}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TabId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Record = tuple()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read a record from the mib-storage table. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7457552">Module:write(TabId, Record) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TabId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Record = tuple()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write a record to the mib-storage table. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7462224">Module:delete(TabId) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TabId = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delete an entire mib-storage table. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7465968">Module:delete(TabId, Key) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TabId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delete a record from the mib-storage table. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7470656">Module:match_object(TabId, Pattern) -&gt; {ok, Recs} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TabId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pattern = match_pattern()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Recs = [tuple()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Search the mib-storage table for record that match the
	specified pattern. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7475872">Module:match_delete(TabId, Pattern) -&gt; {ok, Recs} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TabId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pattern = match_pattern()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Recs = [tuple()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Search the mib-storage table for record that match the
	specified pattern and then delete them. The records deleted are
	also returned. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7481152">Module:tab2list(TabId) -&gt; Recs</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TabId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Recs = [tuple()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Return all records in the mib-storage table in the form 
	of a list. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7485392">Module:info(TabId) -&gt; {ok, Info} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TabId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Info = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieve implementation dependent mib-storage table 
	information. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7490096">Module:sync(TabId) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TabId = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Synchronize the mib-storage table. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">What this means, if anything, is implementation dependent. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7494336">Module:backup(TabId, BackupDir) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TabId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">BackupDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Perform a backup of the mib-storage table. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">What this means, if anything, is implementation dependent. </fo:block>

      </fo:block>

  
  
<fo:block page-break-before="always" id="idp7506112" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa_mpd</fo:marker>snmpa_mpd</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpa_mpd
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmpa_mpd</fo:inline> implements the version independent
      Message Processing and Dispatch functionality in SNMP for the agent. 
      It is supposed to be used from a Network Interface process 
      (<fo:inline font-style="italic">Definition of Agent Net if</fo:inline>).
      </fo:block>

    
  

  <fo:block id="idp7510160" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See the <fo:inline font-style="italic">
    data types in <fo:inline font-family="monospace">snmpa_conf</fo:inline></fo:inline>.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7512800">init(Vsns) -&gt; mpd_state()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Vsns = [Vsn]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Vsn = v1 | v2 | v3</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called from the net_if process at start-up.
          The options list defines which versions to use.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It also initializes some SNMP counters.
          </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7517568">process_packet(Packet, From, State, NoteStore, Log) -&gt; {ok, Vsn, Pdu, PduMS, ACMData} | {discarded, Reason} | {discovery, DiscoPacket}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7518128">process_packet(Packet, From, LocalEngineID, State, NoteStore, Log) -&gt; {ok, Vsn, Pdu, PduMS, ACMData} | {discarded, Reason} | {discovery, DiscoPacket}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Packet = binary()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">From = {TDomain, TAddr}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TDomain = transportDomainUdpIpv4 | transportDomainUdpIpv6</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TAddr = {IpAddr, IpPort}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LocalEngineID = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IpAddr = <fo:inline font-style="italic">inet:ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IpPort = inet:port_number()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = mpd_state()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NoteStore = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Log = snmp_log()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Vsn = 'version-1' | 'version-2' | 'version-3'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pdu = #pdu</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PduMs = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ACMData = acm_data()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DiscoPacket = binary()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Processes an incoming packet.  Performs authentication and 
          decryption as necessary.  The return values should be passed to the
          agent.</fo:block>

        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the use of the LocalEngineID argument is only intended 
            for special cases, if the agent is to "emulate" multiple EngineIDs!
            By default, the agent uses the value of <fo:inline font-family="monospace">SnmpEngineID</fo:inline> 
            (see SNMP-FRAMEWORK-MIB). </fo:block>
	</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7531104">generate_response_msg(Vsn, RePdu, Type, ACMData, Log) -&gt; {ok, Packet} | {discarded, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7531632">generate_response_msg(Vsn, RePdu, Type, ACMData, LocalEngineID, Log) -&gt; {ok, Packet} | {discarded, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Vsn = 'version-1' | 'version-2' | 'version-3'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RePdu = #pdu</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ACMData = acm_data()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LocalEngineID = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Packet = binary()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generates a possibly encrypted response packet to be sent to the
          network. <fo:inline font-family="monospace">Type</fo:inline> is the <fo:inline font-family="monospace">#pdu.type</fo:inline> of the original
          request.</fo:block>

        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the use of the LocalEngineID argument is only intended 
            for special cases, if the agent is to "emulate" multiple EngineIDs!
            By default, the agent uses the value of <fo:inline font-family="monospace">SnmpEngineID</fo:inline> 
            (see SNMP-FRAMEWORK-MIB). </fo:block>
	</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7540272">generate_msg(Vsn, NoteStore, Pdu, MsgData, To) -&gt; {ok, PacketsAndAddresses} | {discarded, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7540800">generate_msg(Vsn, NoteStore, Pdu, MsgData, LocalEngineID, To) -&gt; {ok, PacketsAndAddresses} | {discarded, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Vsn = 'version-1' | 'version-2' | 'version-3'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NoteStore = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pdu = #pdu</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MsgData = msg_data()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LocalEngineID = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">To = [dest_addrs()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PacketsAndAddresses = [{TDomain, TAddress, Packet}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TDomain = snmpUDPDomain</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TAddress = {Ip, Udp}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ip = {integer(), integer(), integer(), integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Udp = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Packet = binary()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generates a possibly encrypted request packet to be sent to the
          network.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">MsgData</fo:inline> is the message specific data used in
          the SNMP message.  This value is received in a
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">send_pdu</fo:inline></fo:inline>
          or
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">send_pdu_req</fo:inline></fo:inline>
	  message from the agent.  In SNMPv1 and
          SNMPv2c, this message data is the community string.  In
          SNMPv3, it is the context information.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          <fo:inline font-family="monospace">To</fo:inline> is a list of destination addresses and
          their corresponding security parameters.  This value is
          received in the same message from the agent and then transformed
	  trough <fo:inline font-style="italic"><fo:inline font-family="monospace">process_taddrs</fo:inline></fo:inline>
	  before passed to this function.</fo:block>

        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the use of the LocalEngineID argument is only intended 
            for special cases, if the agent is to "emulate" multiple EngineIDs!
            By default, the agent uses the value of <fo:inline font-family="monospace">SnmpEngineID</fo:inline> 
            (see SNMP-FRAMEWORK-MIB). </fo:block>
	</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7556080">process_taddrs(TDests) -&gt; Dests</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TDests = [TDest]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TDest = {{TDomain, TAddr}, SecData} | {TDomain, TAddr}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TDomain = term()  % Not at tuple</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TAddr = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecData = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dests = [Dest]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dest = {{Domain, Addr}, SecData} | {Domain, Addr}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Domain = transportDomain()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = transportAddress()  % Depends on Domain</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Transforms addresses from internal MIB format to one
	more useful to <fo:inline font-style="italic">Agent Net if</fo:inline>.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic"><fo:inline font-family="monospace">generate_msg</fo:inline>.</fo:inline>
	</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7565776">discarded_pdu(Variable) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Variable = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Increments the variable associated with a discarded pdu.
          This function can be used when the net_if process receives a
          <fo:inline font-family="monospace">discarded_pdu</fo:inline> message from the agent.
          </fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp7576736" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa_network_interface</fo:marker>snmpa_network_interface</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpa_network_interface
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module defines the behaviour of the agent network
      interface. A <fo:inline font-family="monospace">snmpa_network_interface</fo:inline> compliant module 
      must export the following functions: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">start_link/4</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">info/1</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">get_log_type/1</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">set_log_type/2</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">verbosity/2</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of them and their exact signatures are explained
      below. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">But this is not enough. There is also a set of <fo:inline font-weight="bold">mandatory</fo:inline>
      messages which the network interface entity must be able to 
      receive and be able to send. This is described in chapter
      <fo:inline font-style="italic">snmp_agent_netif</fo:inline>.
      </fo:block>

     
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7589744">start_link(Prio, NoteStore, MasterAgent, Opts) -&gt; {ok, Pid} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Prio        = priority()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NoteStore   = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MasterAgent = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts        = [opt()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">opt()       = {verbosity, verbosity()} | {versions, versions()} | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">versions()  = [version()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">version()   = v1 | v2 | v3</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start-link the network interface process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NoteStore</fo:inline> is the pid of the note-store process and 
          <fo:inline font-family="monospace">MasterAgent</fo:inline> is the pid of the master-agent process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Opts</fo:inline> is an (basically) implementation dependent list of 
          options to the network interface process. There are however
          a number of options which <fo:inline font-weight="bold">must</fo:inline> be handled: 
          <fo:inline font-family="monospace">versions</fo:inline> and <fo:inline font-family="monospace">verbosity</fo:inline>.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7599856">info(Pid) -&gt; [{Key, Value}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The info returned is basically up to the implementer to decide. 
          This implementation provided by the application provides info about 
          memory allocation and various socket information.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The info returned by this function is returned together with other 
          info collected by the agent when the 
          <fo:inline font-style="italic">info</fo:inline> function is called 
          (tagged with with the key <fo:inline font-family="monospace">net_if</fo:inline>).</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7605584">verbosity(Pid, Verbosity) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid       = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Verbosity = verbosity()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Change the verbosity of a running network interface process.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7609840">get_log_type(Pid) -&gt; {ok, LogType} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid     = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogType = atl_type()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason  = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Audit Trail Log is managed by the network interface process. 
          So, it is this process that has to retrieve the actual log-type. </fo:block>


        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7615024">set_log_type(Pid, NewType) -&gt; {ok, OldType} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid     = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewType = OldType = atl_type()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason  = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Audit Trail Log is managed by the network interface process. 
          So, it is this process that has to do the actual changing of the 
          type. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">set_log_type</fo:inline>
          for more info. </fo:block>
      </fo:block>

  

  
<fo:block page-break-before="always" id="idp7627664" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa_network_interface_filter</fo:marker>snmpa_network_interface_filter</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpa_network_interface_filter
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module defines the behaviour of the agent network interface
      filter. A <fo:inline font-family="monospace">snmpa_network_interface_filter</fo:inline> compliant module 
      must export the following functions: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">accept_recv/2</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">accept_send/2</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">accept_recv_pdu/3</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">accept_send_pdu/2</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of them and their exact signatures are explained
      below. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The purpose of the network interface filter is to allow for filtering
      of messages (accept or reject) receive and send. This is done 
      on two levels: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first level is at the transport entry / exit point, i.e.
          immediately after the receipt of the message before any message
          processing is done (accept_recv) and 
          immediately before sending the message after all message
          processing is done (accept_send).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second level is at the MPD entry / exit point, i.e.
          immediately after the basic message processing (accept_recv_pdu) / 
          immediately before the basic message processing (accept_send_pdu).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the network interface filter is something which is used 
      by the network interface implementation provided by the application 
      (<fo:inline font-family="monospace">snmpa_net_if</fo:inline>). The default filter accepts all messages.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A network interface filter can e.g. be used during testing or for load 
      regulation. If the intended use is load regulation, see also 
      <fo:inline font-style="italic">req_limit</fo:inline> and 
      the function 
      <fo:inline font-style="italic">register_notification_filter</fo:inline>. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Legacy network interface filter modules used arguments on the form
      <fo:inline font-family="monospace">(IpAddr, PortNumber,...)</fo:inline> instead of
      <fo:inline font-family="monospace">(Domain, Addr, ...)</fo:inline>, and if the SNMP agent is run without
      changing the configuration to use transport domains
      the network interface filter will still get
      the old arguments and work as before.</fo:block>
  

  <fo:block id="idp7645104" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
port() = integer() &gt; 0
pdu_type() = 'get-request' | 'get-next-request' | 'get-response' | 
             'set-request' | trap | 'get-bulk-request' | 'inform-request' | 
             report
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also the <fo:inline font-style="italic">
    data types in <fo:inline font-family="monospace">snmpa_conf</fo:inline></fo:inline>.</fo:block>
    
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7649200">accept_recv(Domain, Addr) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Domain = transportDomain()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = transportAddressWithPort()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called at the reception of a message (before <fo:inline font-weight="bold">any</fo:inline> processing 
          has been done).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the message to be discarded, the function <fo:inline font-weight="bold">must</fo:inline> return
          <fo:inline font-weight="bold">false</fo:inline>. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7655280">accept_send(Domain, Addr) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Domain = transportDomain()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = transportAddressWithPort()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called before the sending of a message (after <fo:inline font-weight="bold">all</fo:inline> processing 
          has been done).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the message to be discarded, the function <fo:inline font-weight="bold">must</fo:inline> return
          <fo:inline font-weight="bold">false</fo:inline>. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7661360">accept_recv_pdu(Domain, Addr, PduType) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Domain = transportDomain()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = transportAddressWithPort()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PduType = pdu_type()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called after the basic message processing (MPD) has been done, 
          but before the pdu is handed over to the master-agent for 
          primary processing.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the pdu to be discarded, the function <fo:inline font-weight="bold">must</fo:inline> return
          <fo:inline font-weight="bold">false</fo:inline>. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7667552">accept_send_pdu(Targets, PduType) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Targets = targets()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">targets() = [target()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">target() = {Domain, Addr}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Domain = transportDomain()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = transportAddressWithPort()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PduType = pdu_type() &gt; 0</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = boolean() | NewTargets</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewTargets = targets()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called before the basic message processing (MPD) is done, 
          when a pdu has been received from the master-agent.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the message to be discarded all together, the function 
          <fo:inline font-weight="bold">must</fo:inline> return <fo:inline font-weight="bold">false</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that it is possible for this function to filter out targets
          (but <fo:inline font-weight="bold">not</fo:inline> to add its own) by returning an updated
          <fo:inline font-family="monospace">Targets</fo:inline> list (<fo:inline font-family="monospace">NewTargets</fo:inline>). </fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp7684752" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa_notification_delivery_info_receiver</fo:marker>snmpa_notification_delivery_info_receiver</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpa_notification_delivery_info_receiver
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module defines the behaviour of the notification 
      delivery information receiver. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">snmpa_notification_delivery_info_receiver</fo:inline> compliant module 
      must export the following functions: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">delivery_targets/3</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">delivery_info/4</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of them and their exact signatures are explained
      below. </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Legacy notification delivery information receiver modules
      used a target argument on the form
      <fo:inline font-family="monospace">{IpAddr, PortNumber}</fo:inline> instead of
      <fo:inline font-family="monospace">{Domain, Addr}</fo:inline>, and if the SNMP Agent is run without
      changing the configuration to use transport domains
      the notification delivery information receiver will still get
      the old arguments and work as before.</fo:block>

  

  <fo:block id="idp7693456" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See the <fo:inline font-style="italic">
    data types in <fo:inline font-family="monospace">snmpa_conf</fo:inline></fo:inline>.</fo:block>
    

     
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7697216">delivery_targets(Tag, Targets, Extra) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tag = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Targets = [Target]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Target = {transportDomain(), transportAddressWithPort()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inform about target addresses. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the first function called when a notification delivery is
          in progress. It informs the <fo:inline font-family="monospace">receiver</fo:inline> which targets will
          get the notification. The result of the delivery will be 
          provided via successive calls to <fo:inline font-family="monospace">delivery_info/4</fo:inline> function, 
          see below.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7703920">delivery_info(Tag, Target, DeliveryResult, Extra) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tag = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Targets = [Target]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Target = {transportDomain(), transportAddressWithPort()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DeliveryResult = delivery_result()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">delivery_result() = no_response | got_response</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inform about delivery result.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called for each target in the <fo:inline font-family="monospace">Targets</fo:inline>
          argument of the <fo:inline font-family="monospace">delivery_targets/3</fo:inline> function, see above. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The purpose is to inform the <fo:inline font-family="monospace">receiver</fo:inline> of the 
          result of the delivery (was the notification acknowledged or 
          not) for each target.</fo:block>

      </fo:block>

  

  
<fo:block page-break-before="always" id="idp7719056" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa_notification_filter</fo:marker>snmpa_notification_filter</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpa_notification_filter
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module defines the behaviour of the agent notification
      filters. A <fo:inline font-family="monospace">snmpa_notification_filter</fo:inline> compliant module 
      must export the following functions: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">handle_notification/2</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of them and their exact signatures are explained
      below. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The purpose of notification filters is to allow for modification
      and/or suppression of a notification.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A misbehaving filter will be removed.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7725200">handle_notification(Notif, Data) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = send | {send, NewNotif} | dont_send</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Notif =  NewNotif = notification() | trap()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data  = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handle a notification to be sent. The filter can either
          accept the notification as is, return <fo:inline font-family="monospace">send</fo:inline>, modify
          the notification, return <fo:inline font-family="monospace">{send, NewNotif}</fo:inline> or
          suppress the notification, return <fo:inline font-family="monospace">dont_send</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Data</fo:inline> is supplied at filter registration time,
          see <fo:inline font-style="italic">register_notification_filter</fo:inline>.
          </fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp7739520" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpa_supervisor</fo:marker>snmpa_supervisor</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpa_supervisor
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the top supervisor for the agent part of the SNMP 
      application. There is always one supervisor at each node with 
      an SNMP agent (master agent or sub-agent).
      </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7742080">start_sub_sup(Opts) -&gt; {ok, pid()} | {error, {already_started, pid()}} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [opt()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">opt() = {db_dir, string()} | ...</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts a supervisor for the SNMP agent system without a
          master agent.  The supervisor starts all involved SNMP
          processes, but no agent processes.  Sub-agents should be
          started by calling <fo:inline font-family="monospace">start_sub_agent/3</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">db_dir</fo:inline> is mandatory.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">configuration parameters</fo:inline> for 
          a description of the options.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7748416">start_master_sup(Opts) -&gt; {ok, pid()} |  {error, {already_started, pid()}} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [opt()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">opt() = {db_dir, string()} | {config, ConfOpts()} | ...</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfOpts = [conf_opts()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">conf_opts() = {dir, string()} | ...</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts a supervisor for the SNMP agent system.  The
          supervisor starts all involved SNMP processes, including the
          master agent.  Sub-agents should be started by calling
          <fo:inline font-family="monospace">start_subagent/3</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">db_dir</fo:inline> is mandatory.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">dir</fo:inline> in config is mandatory.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">snmp config</fo:inline> for 
          a description of the options.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7756832">start_sub_agent(ParentAgent,Subtree,Mibs) -&gt; {ok, pid()} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ParentAgent = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubTree = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mibs = [MibName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = [string()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts a sub-agent on the node where the function is
          called.  The <fo:inline font-family="monospace">snmpa_supervisor</fo:inline> must be running.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the supervisor is not running, the function fails with the
          reason <fo:inline font-family="monospace">badarg</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7762864">stop_sub_agent(SubAgent) -&gt; ok | no_such_child</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubAgent = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the sub-agent on the node where the function is
          called.  The <fo:inline font-family="monospace">snmpa_supervisor</fo:inline> must be running.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the supervisor is not running, the function fails with the
          reason <fo:inline font-family="monospace">badarg</fo:inline>.</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp7774672" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmp_community_mib</fo:marker>snmp_community_mib</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmp_community_mib
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmp_community_mib</fo:inline> implements the instrumentation
    functions for the SNMP-COMMUNITY-MIB, and functions for configuring the 
    database. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration files are described in the SNMP User's Manual.</fo:block>

    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7778688">configure(ConfDir) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfDir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called from the supervisor at system
          start-up.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inserts all data in the configuration files into the
          database and destroys all old rows with StorageType
          <fo:inline font-family="monospace">volatile</fo:inline>.  The rows created from the configuration file
          will have StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All <fo:inline font-family="monospace">snmp</fo:inline> counters are set to zero.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error is found in the configuration file, it is
          reported using the function <fo:inline font-family="monospace">config_err/2</fo:inline> of the error,
          report module and the function fails with reason 
          <fo:inline font-family="monospace">configuration_error</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConfDir</fo:inline> is a string which points to the directory
          where the configuration files are found.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration file read is: <fo:inline font-family="monospace">community.conf</fo:inline>.
          </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7788144">reconfigure(ConfDir) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfDir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inserts all data in the configuration files into the
          database and destroys all old data, including the rows with
          StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>.  The rows created from the
          configuration file will have StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, the data in the SNMP-COMMUNITY-MIB, after this
          function has been called, is from the configuration files.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All <fo:inline font-family="monospace">snmp</fo:inline> counters are set to zero.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error is found in the configuration file, it is
          reported using the function <fo:inline font-family="monospace">config_err/2</fo:inline> of the error report 
          module, and the function fails with reason 
          <fo:inline font-family="monospace">configuration_error</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConfDir</fo:inline> is a string which points to the directory
          where the configuration files are found.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration file read is: <fo:inline font-family="monospace">community.conf</fo:inline>.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7797664">add_community(Idx, CommName, SecName, CtxName, TransportTag) -&gt; Ret</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7798160">add_community(Idx, CommName, SecName, EngineId, CtxName, TransportTag) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Idx = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CommName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecName = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EngineId = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CtxName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TransportTag = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = {ok, Key} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a community to the agent config. 
	Equivalent to one line in the <fo:inline font-family="monospace">community.conf</fo:inline> file.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With the <fo:inline font-family="monospace">EngineId</fo:inline> argument it is possible to 
	override the configured engine-id (SNMP-FRAMEWORK-MIB).</fo:block>
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7806976">delete_community(Key) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = ok | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delete a community from the agent config.</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp7818224" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmp_framework_mib</fo:marker>snmp_framework_mib</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmp_framework_mib
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmp_framework_mib</fo:inline> implements instrumentation
      functions for the
      SNMP-FRAMEWORK-MIB, and functions for initializing and configuring the
      database.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration files are described in the SNMP User's Manual.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7821696">configure(ConfDir) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfDir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called from the supervisor at system
          start-up.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inserts all data in the configuration files into the
          database and destroys all old data.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, the data in the SNMP-FRAMEWORK-MIB, after this
          function has been called, is from the configuration
          files.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All <fo:inline font-family="monospace">snmp</fo:inline> counters are set to zero.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error is found in the configuration file, it is
          reported using the function <fo:inline font-family="monospace">config_err/2</fo:inline> of the error 
          report module, and the function fails with reason 
          <fo:inline font-family="monospace">configuration_error</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConfDir</fo:inline> is a string which points to the directory
          where the configuration files are found.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration file read is: <fo:inline font-family="monospace">context.conf</fo:inline>.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7830192">init() -&gt; void()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called from the supervisor at system
          start-up.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates the necessary objects in the database if they do not
          exist. It does not destroy any old values.
                    
</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7833632">add_context(Ctx) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ctx = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = {ok, Key} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a context to the agent config. 
          Equivalent to one line in the <fo:inline font-family="monospace">context.conf</fo:inline> file.</fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7839200">delete_context(Key) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = ok | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delete a context from the agent config.</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp7850432" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmp_generic</fo:marker>snmp_generic</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmp_generic
  <fo:block/>
  
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmp_generic</fo:inline> contains generic functions for 
    implementing tables (and variables) using the SNMP built-in database 
    or Mnesia. These default functions are used if no instrumentation 
    function is provided for a managed object in a MIB. Sometimes, 
    it might be necessary to customize the behaviour of the default 
    functions. For example, in some situations a trap should be sent 
    if a row is deleted or modified, or some hardware is to be informed, 
    when information is changed. </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The overall structure is shown in the following figure:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
         +---------------+
         |   SNMP Agent  |
         +- - - - - - - -+
         |      MIB      |
         +---------------+
                 |
         Association file       (associates a MIB object with
                 |               snmp_generic:table_funct
                 |               snmp_generic:variable_func)
+--------------------------------------+
|           snmp_generic               |  Support for get-next,
|                                      |  RowStatus operations
+----------------------+---------------+
|    snmpa_local_db    |    Mnesia     |  Database
+--------------+-------+---------------+
|     dets     |  ets  | 
| (persistent) |       | 
+--------------+-------+     </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each function takes the argument <fo:inline font-family="monospace">NameDb</fo:inline>, which is a
      tuple <fo:inline font-family="monospace">{Name, Db}</fo:inline>, to identify which database the
      functions should use. <fo:inline font-family="monospace">Name</fo:inline> is the symbolic name of the
      managed object as defined in the MIB, and <fo:inline font-family="monospace">Db</fo:inline> is either
      <fo:inline font-family="monospace">volatile</fo:inline>, <fo:inline font-family="monospace">persistent</fo:inline>, or <fo:inline font-family="monospace">mnesia</fo:inline>. If it is
      <fo:inline font-family="monospace">mnesia</fo:inline>, all variables are stored in the Mnesia table
      <fo:inline font-family="monospace">snmp_variables</fo:inline> which must be a table with two attributes
      (not a Mnesia SNMP table). The SNMP tables are stored in Mnesia
      tables with the same names as the SNMP tables.  All functions
      assume that a Mnesia table exists with the correct name and
      attributes. It is the programmer's responsibility to ensure
      this. Specifically, if variables are stored in Mnesia, the table
      <fo:inline font-family="monospace">snmp_variables</fo:inline> must be created by the programmer.  The
      record definition for this table is defined in the file
      <fo:inline font-family="monospace">snmp/include/snmp_types.hrl</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an instrumentation function in the association file for a
      variable <fo:inline font-family="monospace">myVar</fo:inline> does not have a name when compiling an
      MIB, the compiler generates an entry.
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{myVar, {snmp_generic, variable_func, [{myVar, Db]}}.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And for a table:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{myTable, {snmp_generic, table_func, [{myTable, Db]}}.
    </fo:block>
  

  <fo:block id="idp7864752" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the functions defined below, the following types are used:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
name_db() = {name(), db()} 
name() = atom()
db() = volatile | persistent | mnesia
row_index() = [int()]
columns() = [column()] | [{column(), value()}]
column() = int()
value() = term()
    </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">row_index()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Denotes the last part of the OID which specifies the 
          index of the row in the table (see RFC1212, 4.1.6 for 
          more information about INDEX).  </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">columns()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Is a list of column numbers in the case of a <fo:inline font-family="monospace">get</fo:inline> 
          operation, and a list of column numbers and values in the 
          case of a <fo:inline font-family="monospace">set</fo:inline> operation. </fo:block>
      </fo:block></fo:block-container>
    </fo:block>

    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7872432">get_status_col(Name, Cols)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7872896">get_status_col(NameDb, Cols) -&gt; {ok, StatusVal} | false</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NameDb = name_db()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cols = columns()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StatusVal = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the value of the status column from <fo:inline font-family="monospace">Cols</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be used in instrumentation functions for
          <fo:inline font-family="monospace">is_set_ok</fo:inline>, <fo:inline font-family="monospace">undo</fo:inline> or <fo:inline font-family="monospace">set</fo:inline> to check if the
          status column of a table is modified.</fo:block>
	  
	  
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7880656">get_index_types(Name)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = name()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the index types of <fo:inline font-family="monospace">Name</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be used in instrumentation functions to
	retrieve the index types part of the table info.</fo:block>
	
	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7885488">get_table_info(Name, Item) -&gt; table_info_result()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item = table_item() | all</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">table_item() = nbr_of_cols | defvals | status_col | not_accessible | 
	index_types | first_accessible | first_own_index</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">table_info_result() = Value | [{table_item(), Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get a specific table info item or, if <fo:inline font-family="monospace">Item</fo:inline> has the
	value <fo:inline font-family="monospace">all</fo:inline>, a two tuple list (property list) is instead 
	returned with all the items and their respctive values of the 
	given table. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be used in instrumentation functions to
	retrieve a given part of the table info.</fo:block>
	
	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7893008">table_func(Op1, NameDb)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7893456">table_func(Op2, RowIndex, Cols, NameDb) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Op1 = new | delete </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Op2 = get | next | is_set_ok | set | undo</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NameDb = name_db()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RowIndex = row_index()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cols = columns()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the default instrumentation function for tables.
          </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">new</fo:inline> function creates the table if it does
           not exist, but only if the database is the SNMP internal db.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">delete</fo:inline> function does not delete the table
           from the database since unloading an MIB does not
           necessarily mean that the table should be destroyed.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">is_set_ok</fo:inline> function checks that a row which
           is to be modified or deleted exists, and that a row which
           is to be created does not exist.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">undo</fo:inline> function does nothing.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">set</fo:inline> function checks if it has enough
           information to make the row change its status from
          <fo:inline font-family="monospace">notReady</fo:inline> to <fo:inline font-family="monospace">notInService</fo:inline> (when a row has
           been been set to <fo:inline font-family="monospace">createAndWait</fo:inline>). If a row is set to
          <fo:inline font-family="monospace">createAndWait</fo:inline>, columns without a value are set to
          <fo:inline font-family="monospace">noinit</fo:inline>. If Mnesia is used, the set functionality is
           handled within a transaction.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If it is possible for a manager to create or delete rows in
          the table, there must be a <fo:inline font-family="monospace">RowStatus</fo:inline> column for
          <fo:inline font-family="monospace">is_set_ok</fo:inline>, <fo:inline font-family="monospace">set</fo:inline> and <fo:inline font-family="monospace">undo</fo:inline> to work properly.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns according to the specification of an
          instrumentation function.
          </fo:block>
	
	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7910464">table_get_elements(NameDb, RowIndex, Cols) -&gt; Values</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NameDb = name_db()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RowIndex = row_index()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cols = columns()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Values = [value() | noinit]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list with values for all columns in <fo:inline font-family="monospace">Cols</fo:inline>.
          If a column is undefined, its value is <fo:inline font-family="monospace">noinit</fo:inline>.</fo:block>
	
	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7916528">table_next(NameDb, RestOid) -&gt; RowIndex | endOfTable</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NameDb = name_db()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RestOid = [int()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RowIndex = row_index()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Finds the indices of the next row in the table.  <fo:inline font-family="monospace">RestOid</fo:inline>
          does not have to specify an existing row.</fo:block>
	
	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7921680">table_row_exists(NameDb, RowIndex) -&gt; bool()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NameDb = name_db()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RowIndex = row_index()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks if a row in a table exists.</fo:block>
	
	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7925888">table_set_elements(NameDb, RowIndex, Cols) -&gt; bool()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NameDb = name_db()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RowIndex = row_index()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cols = columns()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the elements in <fo:inline font-family="monospace">Cols</fo:inline> to the row specified by
          <fo:inline font-family="monospace">RowIndex</fo:inline>.  No checks are performed on the new values.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the Mnesia database is used, this function calls
          <fo:inline font-family="monospace">mnesia:write</fo:inline> to store the values.  This means that
          this function must be called from within a transaction
          (<fo:inline font-family="monospace">mnesia:transaction/1</fo:inline> or <fo:inline font-family="monospace">mnesia:dirty/1</fo:inline>).</fo:block>
	
	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7933424">variable_func(Op1, NameDb)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7933888">variable_func(Op2, Val, NameDb) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Op1 = new | delete | get</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Op2 = is_set_ok | set | undo</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NameDb = name_db()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val = value()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the default instrumentation function for variables.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">new</fo:inline> function creates a new variable in the
          database with a default value as defined in the MIB, or a zero
          value (depending on the type).  </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">delete</fo:inline> function does not delete the variable from 
          the database. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns according to the specification of an 
          instrumentation function. </fo:block>
	
	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7942016">variable_get(NameDb) -&gt; {value, Value} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NameDb = name_db()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = value()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the value of a variable.</fo:block>
	
	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7946224">variable_set(NameDb, NewVal) -&gt; true | false</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NameDb = name_db()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewVal = value()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a new value to a variable.  The variable is created if
          it does not exist.  No checks are made on the type of the
          new value.  </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">false</fo:inline> if the <fo:inline font-family="monospace">NameDb</fo:inline> argument
          is incorrectly specified, otherwise <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
      </fo:block>
  

  <fo:block id="idp7952544" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Example</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows an implementation of a table which is
      stored in Mnesia, but with some checks performed at set-request
      operations.
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
myTable_func(new, NameDb) -&gt;   % pass unchanged
  snmp_generic:table_func(new, NameDb).

myTable_func(delete, NameDb) -&gt;   % pass unchanged
  snmp_generic:table_func(delete, NameDb).

%% change row
myTable_func(is_set_ok, RowIndex, Cols, NameDb) -&gt;
  case snmp_generic:table_func(is_set_ok, RowIndex,
                               Cols, NameDb) of
    {noError, 0} -&gt; 
      myApplication:is_set_ok(RowIndex, Cols);
    Err -&gt;
      Err
  end;

myTable_func(set, RowIndex, Cols, NameDb) -&gt;
  case snmp_generic:table_func(set, RowIndex, Cols,
                               NameDb),
    {noError, 0} -&gt;
      % Now the row is updated, tell the application
      myApplication:update(RowIndex, Cols);
    Err -&gt;
      Err
  end;

myTable_func(Op, RowIndex, Cols, NameDb) -&gt;   % pass unchanged
  snmp_generic:table_func(Op, RowIndex, Cols, NameDb).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">.funcs</fo:inline> file would look like:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{myTable, {myModule, myTable_func, [{myTable, mnesia}]}}.
    </fo:block>
  
  
<fo:block page-break-before="always" id="idp7963712" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmp_index</fo:marker>snmp_index</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmp_index
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmp_index</fo:inline> implements an Abstract
      Data Type (ADT) for an SNMP
      index structure for SNMP tables.  It is implemented as an ets
      table of the ordered_set data-type, which means that all operations are
      O(log n).  In the table, the key is an ASN.1 OBJECT
      IDENTIFIER.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This index is used to separate the implementation of the SNMP
      ordering from the actual implementation of the table.  The SNMP
      ordering, that is implementation of GET NEXT, is implemented in this
      module.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, suppose there is an SNMP table, which is best
      implemented in Erlang as one process per SNMP table row.  Suppose
      further that the INDEX in the SNMP table is an OCTET STRING.  The
      index structure would be created as follows:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
snmp_index:new(string)
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each new process we create, we insert an item in an
      <fo:inline font-family="monospace">snmp_index</fo:inline> structure:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
new_process(Name, SnmpIndex) -&gt;
  Pid = start_process(),
  NewSnmpIndex = 
    snmp_index:insert(SnmpIndex, Name, Pid),
  &lt;...&gt;
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With this structure, we can now map an OBJECT IDENTIFIER in
      e.g. a GET NEXT request, to the correct process:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
get_next_pid(Oid, SnmpIndex) -&gt;
  {ok, {_, Pid}} = snmp_index:get_next(SnmpIndex, Oid),
  Pid.
    </fo:block>
  

  <fo:block id="idp7971744" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Common data types</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following data types are used in the functions below:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">index()</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">oid() = [byte()]</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">key_types = type_spec()  |  {type_spec(), type_spec(), ...}</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">type_spec() = fix_string | string | integer</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">key() = key_spec() | {key_spec(), key_spec(), ...}</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">key_spec() = string() | integer()</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">index()</fo:inline> type denotes an snmp index structure.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">oid()</fo:inline> type is used to represent an ASN.1 OBJECT
      IDENTIFIER.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">key_types()</fo:inline> type is used when creating the
      index structure, and the <fo:inline font-family="monospace">key()</fo:inline> type is used when inserting
      and deleting items from the structure.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">key_types()</fo:inline> type defines the types of the SNMP INDEX
      columns for the table.  If the table has one single INDEX column,
      this type should be a single atom, but if the table has multiple
      INDEX columns, it should be a tuple with atoms.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the INDEX column is of type INTEGER, or derived from
      INTEGER, the corresponding type should be <fo:inline font-family="monospace">integer</fo:inline>.  If it
      is a variable length type (e.g. OBJECT IDENTIFIER, OCTET STRING),
      the corresponding type should be <fo:inline font-family="monospace">string</fo:inline>.  Finally, if the
      type is of variable length, but with a fixed size restriction
      (e.g. IpAddress), the corresponding type should be
      <fo:inline font-family="monospace">fix_string</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, if the SNMP table has two INDEX columns, the first
      one an OCTET STRING with size 2, and the second one an OBJECT
      IDENTIFER, the corresponding <fo:inline font-family="monospace">key_types</fo:inline> parameter would be
      <fo:inline font-family="monospace">{fix_string, string}</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">key()</fo:inline> type correlates to the <fo:inline font-family="monospace">key_types()</fo:inline>
      type. If the <fo:inline font-family="monospace">key_types()</fo:inline> is a single atom, the
      corresponding <fo:inline font-family="monospace">key()</fo:inline> is a single type as well, but if the
      <fo:inline font-family="monospace">key_types()</fo:inline> is a tuple, <fo:inline font-family="monospace">key</fo:inline> must be a tuple of the
      same size.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the example above, valid <fo:inline font-family="monospace">keys</fo:inline> could be <fo:inline font-family="monospace">{"hi", "mom"}</fo:inline> and <fo:inline font-family="monospace">{"no", "thanks"}</fo:inline>, whereas <fo:inline font-family="monospace">"hi"</fo:inline>,
      <fo:inline font-family="monospace">{"hi", 42}</fo:inline> and <fo:inline font-family="monospace">{"hello", "there"}</fo:inline> would be invalid.</fo:block>
    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All API functions that update the index return a <fo:inline font-family="monospace">NewIndex</fo:inline>
        term. This is for backward compatibility with a previous
        implementation that used a B+ tree written purely in Erlang for 
        the index. The <fo:inline font-family="monospace">NewIndex</fo:inline> return value can now be ignored. 
        The return value is now the unchanged table identifier for the 
        ets table.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The implementation using ets tables introduces a semantic
        incompatibility with older implementations. In those older 
        implementations, using pure Erlang terms, the index was garbage 
        collected like any other Erlang term and did not have to be 
        deleted when discarded. An ets table is deleted only when the 
        process creating it explicitly deletes it or when the creating 
        process terminates.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A new interface <fo:inline font-family="monospace">delete/1</fo:inline> is now added to
        handle the case when a process wants to discard an index table
        (i.e. to build a completely new). Any application using
        transient snmp indexes has to be modified to handle this.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As an snmp adaption usually keeps the index for the whole of the
        systems lifetime, this is rarely a problem.</fo:block>
    </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8000048">delete(Index) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Index = NewIndex = index()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = key()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes a complete index structure (i.e. the ets table
          holding the index). The index can no longer be referenced
          after this call. See the <fo:inline font-style="italic">warning note</fo:inline>
          above.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8004512">delete(Index, Key) -&gt; NewIndex</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Index = NewIndex = index()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = key()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes a key and its value from the index structure.
          Returns a new structure.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8008224">get(Index, KeyOid) -&gt; {ok, {KeyOid, Value}} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Index = index()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyOid = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the item with key <fo:inline font-family="monospace">KeyOid</fo:inline>.  Could be used from
          within an SNMP instrumentation function.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8013088">get_last(Index) -&gt; {ok, {KeyOid, Value}} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Index = index()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyOid = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the last item in the index structure.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8017216">get_next(Index, KeyOid) -&gt; {ok, {NextKeyOid, Value}} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Index = index()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyOid = NextKeyOid = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the next item in the SNMP lexicographic ordering,
          after <fo:inline font-family="monospace">KeyOid</fo:inline> in the index structure.  <fo:inline font-family="monospace">KeyOid</fo:inline>
          does not have to refer to an existing item in the index.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8022320">insert(Index, Key, Value) -&gt; NewIndex</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Index = NewIndex = index()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = key()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inserts a new key value tuple into the index structure.  If
          an item with the same key already exists, the new <fo:inline font-family="monospace">Value</fo:inline>
          overwrites the old value.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8026976">key_to_oid(Index, Key) -&gt; KeyOid</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Index = index()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = key()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyOid = NextKeyOid = oid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts <fo:inline font-family="monospace">Key</fo:inline> to an OBJECT IDENTIFIER.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8031520">new(KeyTypes) -&gt; Index</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyTypes = key_types()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Index = index()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a new snmp index structure.  The <fo:inline font-family="monospace">key_types()</fo:inline>
          type is described above.</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp8042800" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmp_notification_mib</fo:marker>snmp_notification_mib</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmp_notification_mib
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmp_notification_mib</fo:inline> implements the
      instrumentation functions for the
      SNMP-NOTIFICATION-MIB, and functions for configuring the database.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration files are described in the SNMP User's Manual.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8046256">configure(ConfDir) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfDir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called from the supervisor at system
          start-up.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inserts all data in the configuration files into the
          database and destroys all old rows with StorageType
          <fo:inline font-family="monospace">volatile</fo:inline>.  The rows created from the configuration file
          will have StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error is found in the configuration file, it is
          reported using the function <fo:inline font-family="monospace">config_err/2</fo:inline> of the 
          error report module,
          and the function fails with reason <fo:inline font-family="monospace">configuration_error</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConfDir</fo:inline> is a string which points to the directory
          where the configuration files are found.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration file read is: <fo:inline font-family="monospace">notify.conf</fo:inline>.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8054240">reconfigure(ConfDir) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfDir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inserts all data in the configuration files into the
          database and destroys all old data, including the rows with
          StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>.  The rows created from the
          configuration file will have StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, the data in the SNMP-NOTIFICATION-MIB, after this
          function has been called, is from the configuration files.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error is found in the configuration file, it is
          reported using the function <fo:inline font-family="monospace">config_err/2</fo:inline> of the 
          error report module,
          and the function fails with reason <fo:inline font-family="monospace">configuration_error</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConfDir</fo:inline> is a string which points to the directory
          where the configuration files are found.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration file read is: <fo:inline font-family="monospace">notify.conf</fo:inline>.
                    
</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8062848">add_notify(Name, Tag, Type) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tag = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = trap | inform</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = {ok, Key} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a notify definition to the agent config. 
          Equivalent to one line in the <fo:inline font-family="monospace">notify.conf</fo:inline> file.</fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8069344">delete_notify(Key) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = ok | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delete a notify definition from the agent config.</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp8080608" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmp_pdus</fo:marker>snmp_pdus</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmp_pdus
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">RFC1157, RFC1905 and/or RFC2272 should be studied carefully
      before using this module, <fo:inline font-family="monospace">snmp_pdus</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmp_pdus</fo:inline> contains functions for encoding 
      and decoding of
      SNMP protocol data units (PDUs).  In short, this module converts a
      list of bytes to Erlang record representations and vice versa.
      The record definitions can be found in the file
      <fo:inline font-family="monospace">snmp/include/snmp_types.hrl</fo:inline>.  If snmpv3 is used, the module
      that includes <fo:inline font-family="monospace">snmp_types.hrl</fo:inline> must define the constant
      <fo:inline font-family="monospace">SNMP_USE_V3</fo:inline> before the header file is included.  Example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-define(SNMP_USE_V3, true).
-include_lib("snmp/include/snmp_types.hrl").    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encoding and decoding must be done explicitly when writing your
      own Net if process.
      </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8087152">dec_message([byte()]) -&gt; Message</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Message = #message</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a list of bytes into an SNMP Message.  Note, if there
          is a v3 message, the <fo:inline font-family="monospace">msgSecurityParameters</fo:inline> are not
          decoded.  They must be explicitly decoded by a call to a
          security model specific decoding function,
          e.g. <fo:inline font-family="monospace">dec_usm_security_parameters/1</fo:inline>.  Also note, if
          the <fo:inline font-family="monospace">scopedPDU</fo:inline> is encrypted, the OCTET STRING encoded
          <fo:inline font-family="monospace">encryptedPDU</fo:inline> will be present in the <fo:inline font-family="monospace">data</fo:inline> field.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8092832">dec_message_only([byte()]) -&gt; Message</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Message = #message</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a list of bytes into an SNMP Message, but does not
          decode the data part of the Message. That means, data is still
          a list of bytes, normally an encoded <fo:inline font-family="monospace">PDU</fo:inline> (v1 and V2) or an
          encoded and possibly encrypted <fo:inline font-family="monospace">scopedPDU</fo:inline> (v3).</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8097120">dec_pdu([byte()]) -&gt; Pdu</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pdu = #pdu</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a list of bytes into an SNMP Pdu.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8100304">dec_scoped_pdu([byte()]) -&gt; ScopedPdu</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ScopedPdu = #scoped_pdu</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a list of bytes into an SNMP ScopedPdu.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8103504">dec_scoped_pdu_data([byte()]) -&gt; ScopedPduData</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ScopedPduData = #scoped_pdu | EncryptedPDU</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncryptedPDU = [byte()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a list of bytes into either a scoped pdu record, or
          - if the scoped pdu was encrypted - to a list of bytes.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8107280">dec_usm_security_parameters([byte()]) -&gt; UsmSecParams</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UsmSecParams = #usmSecurityParameters</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a list of bytes into an SNMP UsmSecurityParameters</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8110528">enc_encrypted_scoped_pdu(EncryptedScopedPdu) -&gt; [byte()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncryptedScopedPdu = [byte()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes an encrypted SNMP ScopedPdu into an OCTET STRING
          that can be used as the <fo:inline font-family="monospace">data</fo:inline> field in a
          <fo:inline font-family="monospace">message</fo:inline> record, that later can be encoded with a call
          to <fo:inline font-family="monospace">enc_message_only/1</fo:inline>. 
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function should be used whenever the <fo:inline font-family="monospace">ScopedPDU</fo:inline>
          is encrypted.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8116160">enc_message(Message) -&gt; [byte()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Message = #message</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a message record to a list of bytes.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8119344">enc_message_only(Message) -&gt; [byte()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Message = #message</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Message</fo:inline> is a record where the <fo:inline font-family="monospace">data</fo:inline> field is
          assumed to be encoded (a list of bytes).  If there is a v1 or v2
          message, the <fo:inline font-family="monospace">data</fo:inline> field is an encoded <fo:inline font-family="monospace">PDU</fo:inline>, and if
          there is a v3 message, <fo:inline font-family="monospace">data</fo:inline> is an encoded and possibly
          encrypted <fo:inline font-family="monospace">scopedPDU</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8125216">enc_pdu(Pd) -&gt; [byte()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pdu = #pdu</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes an SNMP Pdu into a list of bytes.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8128384">enc_scoped_pdu(ScopedPdu) -&gt; [byte()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ScopedPdu = #scoped_pdu</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes an SNMP ScopedPdu into a list of bytes, which can be
          encrypted, and after encryption, encoded with
          a call to <fo:inline font-family="monospace">enc_encrypted_scoped_pdu/1</fo:inline>; or it can be
          used as the <fo:inline font-family="monospace">data</fo:inline> field in a <fo:inline font-family="monospace">message</fo:inline> record, which
          then can be encoded with <fo:inline font-family="monospace">enc_message_only/1</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8133536">enc_usm_security_parameters(UsmSecParams) -&gt; [byte()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UsmSecParams = #usmSecurityParameters</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes SNMP UsmSecurityParameters into a list of bytes.</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp8143936" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmp_standard_mib</fo:marker>snmp_standard_mib</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmp_standard_mib
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmp_standard_mib</fo:inline> implements the instrumentation functions for the
      STANDARD-MIB and SNMPv2-MIB, and functions for configuring the database.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration files are described in the SNMP User's Manual.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8147408">configure(ConfDir) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfDir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called from the supervisor at system
          start-up.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inserts all data in the configuration files into the
          database and destroys all old rows with StorageType
          <fo:inline font-family="monospace">volatile</fo:inline>.  The rows created from the configuration file
          will have StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All <fo:inline font-family="monospace">snmp</fo:inline> counters are set to zero.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error is found in the configuration file, it is
          reported using the function <fo:inline font-family="monospace">config_err/2</fo:inline> of the error 
          report module, and the function fails with the reason 
          <fo:inline font-family="monospace">configuration_error</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConfDir</fo:inline> is a string which points to the directory
          where the configuration files are found.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration file read is: <fo:inline font-family="monospace">standard.conf</fo:inline>.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8156336">inc(Name) -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8156784">inc(Name, N) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">N = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Increments a variable in the MIB with <fo:inline font-family="monospace">N</fo:inline>, or one if
          <fo:inline font-family="monospace">N</fo:inline> is not specified.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8161296">reconfigure(ConfDir) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfDir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inserts all data in the configuration files into the
          database and destroys all old data, including the rows with
          StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>.  The rows created from the
          configuration file will have StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, the data in the SNMP-STANDARD-MIB and SNMPv2-MIB,
          after this function has been called, is from the
          configuration files.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All <fo:inline font-family="monospace">snmp</fo:inline> counters are set to zero.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error is found in the configuration file, it is
          reported using the function <fo:inline font-family="monospace">config_err/2</fo:inline> of the error
          report module, and the function fails with the reason 
          <fo:inline font-family="monospace">configuration_error</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConfDir</fo:inline> is a string which points to the directory
          where the configuration files are found.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration file read is: <fo:inline font-family="monospace">standard.conf</fo:inline>.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8170320">reset() -&gt; void()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Resets all <fo:inline font-family="monospace">snmp</fo:inline> counters to 0.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8173456">sys_up_time() -&gt; Time</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Time = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the system up time in hundredth of a second.</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp8183776" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmp_target_mib</fo:marker>snmp_target_mib</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmp_target_mib
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmp_target_mib</fo:inline> implements the instrumentation
      functions for the SNMP-TARGET-MIB, 
      and functions for configuring the database. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration files are described in the SNMP User's Manual.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Legacy API functions <fo:inline font-family="monospace">add_addr/10</fo:inline> that does not specify
      transport domain, and <fo:inline font-family="monospace">add_addr/11</fo:inline> that has got separate
      <fo:inline font-family="monospace">IpAddr</fo:inline> and <fo:inline font-family="monospace">PortNumber</fo:inline> arguments still work as before
      for backwards compatibility reasons.</fo:block>

    
  

  <fo:block id="idp8189856" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See the <fo:inline font-style="italic">
    data types in <fo:inline font-family="monospace">snmpa_conf</fo:inline></fo:inline>.</fo:block>

    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8193056">configure(ConfDir) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfDir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called from the supervisor at system
          start-up.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inserts all data in the configuration files into the
          database and destroys all old rows with StorageType
          <fo:inline font-family="monospace">volatile</fo:inline>.  The rows created from the configuration file
          will have StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All <fo:inline font-family="monospace">snmp</fo:inline> counters are set to zero. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error is found in the configuration file, it is
          reported using the function <fo:inline font-family="monospace">config_err/2</fo:inline> of the error
          report module, and the function fails with the reason 
          <fo:inline font-family="monospace">configuration_error</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConfDir</fo:inline> is a string which points to the directory
          where the configuration files are found. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration files read are: <fo:inline font-family="monospace">target_addr.conf</fo:inline>
          and <fo:inline font-family="monospace">target_params.conf</fo:inline>. </fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8202960">reconfigure(ConfDir) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfDir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inserts all data in the configuration files into the
          database and destroys all old data, including the rows with
          StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>.  The rows created from the
          configuration file will have StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, the data in the SNMP-TARGET-MIB, after this
          function has been called, is the data from the configuration
          files. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All <fo:inline font-family="monospace">snmp</fo:inline> counters are set to zero.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error is found in the configuration file, it is
          reported using the function <fo:inline font-family="monospace">config_err/2</fo:inline> of the ,
          and the function fails with the reason 
          <fo:inline font-family="monospace">configuration_error</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConfDir</fo:inline> is a string which points to the directory
          where the configuration files are found. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration files read are: <fo:inline font-family="monospace">target_addr.conf</fo:inline>
          and <fo:inline font-family="monospace">target_params.conf</fo:inline>. </fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8212912">set_target_engine_id(TargetAddrName, EngineId) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetAddrName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EngineId = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the engine id for a target in the 
          <fo:inline font-family="monospace">snmpTargetAddrTable</fo:inline>.
          If notifications are sent as Inform requests to a target, its
          engine id must be set. </fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8217712">add_addr(Name, Domain, Addr, Timeout, Retry, TagList, Params, EngineId, TMask, MMS) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Domain = transportDomain()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = transportAddress()  % Default port is 162</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Retry = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TagList = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ParamsName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EngineId = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TMask = transportAddressMask()  % Depends on Domain</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MMS = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = {ok, Key} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a target address definition to the agent config. 
          Equivalent to one line in the <fo:inline font-family="monospace">target_addr.conf</fo:inline> file.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8227504">delete_addr(Key) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = ok | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delete a target address definition from the agent config.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8232176">add_params(Name, MPModel, SecModel, SecName, SecLevel) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MPModel = v1 | v2c | v3</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecModel = v1 | v2c | usm</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecLevel = noAuthNoPriv | authNoPriv | authPriv</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = {ok, Key} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a target parameter definition to the agent config. 
          Equivalent to one line in the <fo:inline font-family="monospace">target_params.conf</fo:inline> file.</fo:block>

        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8239664">delete_params(Key) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = ok | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delete a target parameter definition from the agent config.</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp8250976" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmp_user_based_sm_mib</fo:marker>snmp_user_based_sm_mib</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmp_user_based_sm_mib
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmp_user_based_sm_mib</fo:inline> implements the instrumentation 
      functions for the SNMP-USER-BASED-SM-MIB, and functions for configuring 
      the database.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration files are described in the SNMP User's Manual.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8254448">configure(ConfDir) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfDir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called from the supervisor at system
          start-up.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inserts all data in the configuration files into the
          database and destroys all old rows with StorageType
          <fo:inline font-family="monospace">volatile</fo:inline>.  The rows created from the configuration file
          will have StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All <fo:inline font-family="monospace">snmp</fo:inline> counters are set to zero.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error is found in the configuration file, it is
          reported using the function <fo:inline font-family="monospace">config_err/2</fo:inline> of the error
          report module, and the function fails with the reason 
          <fo:inline font-family="monospace">configuration_error</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConfDir</fo:inline> is a string which points to the directory
          where the configuration files are found.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration file read is: <fo:inline font-family="monospace">usm.conf</fo:inline>.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8263360">reconfigure(ConfDir) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfDir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inserts all data in the configuration files into the
          database and destroys all old data, including the rows with
          StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>.  The rows created from the
          configuration file will have StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, the data in the SNMP-USER-BASED-SM-MIB, after this
          function has been called, is the data from the configuration
          files.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All <fo:inline font-family="monospace">snmp</fo:inline> counters are set to zero.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error is found in the configuration file, it is
          reported using the function <fo:inline font-family="monospace">config_err/2</fo:inline> of the error
          report module, and the function fails with the reason 
          <fo:inline font-family="monospace">configuration_error</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConfDir</fo:inline> is a string which points to the directory
          where the configuration files are found.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration file read is: <fo:inline font-family="monospace">usm.conf</fo:inline>.
                    
</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8272928">add_user(EngineID, Name, SecName, Clone, AuthP, AuthKeyC, OwnAuthKeyC, PrivP, PrivKeyC, OwnPrivKeyC, Public, AuthKey, PrivKey) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EngineID = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Clone = zeroDotZero | [integer()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AuthP = usmNoAuthProtocol | usmHMACMD5AuthProtocol | usmHMACSHAAuthProtocol</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AuthKeyC = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OwnAuthKeyC = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PrivP = usmNoPrivProtocol | usmDESPrivProtocol</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PrivKeyC = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OwnPrivKeyC = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Public = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AuthKey = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PrivKey = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = {ok, Key} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a USM security data (user) to the agent config. 
          Equivalent to one line in the <fo:inline font-family="monospace">usm.conf</fo:inline> file.</fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8284112">delete_user(Key) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = ok | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delete a USM security data (user) from the agent config.</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp8295392" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmp_view_based_acm_mib</fo:marker>snmp_view_based_acm_mib</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmp_view_based_acm_mib
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmp_view_based_acm_mib</fo:inline> implements the instrumentation functions for the
      SNMP-VIEW-BASED-ACM-MIB, and functions for configuring the database.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration files are described in the SNMP User's Manual.</fo:block>

    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8299408">configure(ConfDir) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfDir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called from the supervisor at system
	start-up. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inserts all data in the configuration files into the
	database and destroys all old rows with StorageType
	<fo:inline font-family="monospace">volatile</fo:inline>.  The rows created from the configuration file
	will have StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All <fo:inline font-family="monospace">snmp</fo:inline> counters are set to zero. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error is found in the configuration file, it is
	reported using the function <fo:inline font-family="monospace">config_err/2</fo:inline> of the error
	report module, and the function fails with the reason 
	<fo:inline font-family="monospace">configuration_error</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConfDir</fo:inline> is a string which points to the directory
	where the configuration files are found. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration file read is: <fo:inline font-family="monospace">vacm.conf</fo:inline>. </fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8308752">reconfigure(ConfDir) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfDir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inserts all data in the configuration files into the
          database and destroys all old data, including the rows with
          StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>.  The rows created from the
          configuration file will have StorageType <fo:inline font-family="monospace">nonVolatile</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, the data in the SNMP-VIEW-BASED-ACM-MIB, after this
          function has been called, is the data from the configuration
          files.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All <fo:inline font-family="monospace">snmp</fo:inline> counters are set to zero.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error is found in the configuration file, it is
          reported using the function 
	  <fo:inline font-style="italic">config_err/2</fo:inline> 
	  of the error report module, and the function fails with the reason 
          <fo:inline font-family="monospace">configuration_error</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConfDir</fo:inline> is a string which points to the directory
          where the configuration files are found.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration file read is: <fo:inline font-family="monospace">vacm.conf</fo:inline>. </fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8318576">add_sec2group(SecModel, SecName, GroupName) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecModel = v1 | v2c | usm</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = {ok, Key} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a security to group definition to the agent config. 
	Equivalent to one vacmSecurityToGroup-line in the 
	<fo:inline font-family="monospace">vacm.conf</fo:inline> file.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8325136">delete_sec2group(Key) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = ok | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delete a security to group definition from the agent config.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8329824">add_access(GroupName, Prefix, SecModel, SecLevel, Match, RV, WV, NV) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Prefix = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecModel = v1 | v2c | usm</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecLevel = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Match = prefix | exact</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RV = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">WV = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NV = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = {ok, Key} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a access definition to the agent config. 
	Equivalent to one vacmAccess-line in the <fo:inline font-family="monospace">vacm.conf</fo:inline> file.</fo:block>
        
	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8338640">delete_access(Key) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = ok | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delete a access definition from the agent config.</fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8343312">add_view_tree_fam(ViewIndex, SubTree, Status, Mask) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ViewIndex = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubTree = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Status = included | excluded</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mask = null | [integer()], where all values are either 0 or 1</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = {ok, Key} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a view tree family definition to the agent config. 
	Equivalent to one vacmViewTreeFamily-line in the 
	<fo:inline font-family="monospace">vacm.conf</fo:inline> file.</fo:block>
	  
	  
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8350384">delete_view_tree_fam(Key) -&gt; Ret</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ret = ok | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delete a view tree family definition from the agent config.</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp8361664" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpc</fo:marker>snmpc</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpc
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmpc</fo:inline> contains interface functions to the 
      SNMP toolkit MIB compiler.</fo:block>

    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8365120">compile(File)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8365568">compile(File, Options) -&gt; {ok, BinFileName} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [opt()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">opt() = db() | relaxed_row_name_assign_check() | deprecated() | 
	description() | reference() | group_check() |  i() | il() | 
	imports() | module() | module_identity() | module_compliance() | 
	agent_capabilities() | outdir() |  no_defs() | verbosity() | 
	warnings() | warnings_as_errors()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">db() = {db, volatile|persistent|mnesia}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">deprecated() = {deprecated, bool()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">relaxed_row_name_assign_check() = relaxed_row_name_assign_check</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">description() = description</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reference() = reference</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">group_check() = {group_check, bool()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">i() = {i, [dir()]}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">il() = {il, [dir()]}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">imports() = imports</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">module() = {module, atom()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">module_identity() = module_identity</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">module_compliance() = module_compliance</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">agent_capabilities() = agent_capabilities</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">no_defs() = no_defs</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">outdir() = {outdir, dir()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">verbosity() = {verbosity, silence|warning|info|log|debug|trace}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">warnings() = {warnings, bool()}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">warnings_as_errors() = warnings_as_errors</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">dir() = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">BinFileName = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compiles the specified MIB file <fo:inline font-family="monospace">&lt;File&gt;.mib</fo:inline>.  The
          compiled file <fo:inline font-family="monospace">BinFileName</fo:inline> is called 
          <fo:inline font-family="monospace">&lt;File&gt;.bin</fo:inline>. </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">db</fo:inline> specifies which database should
	      be used for the default instrumentation. </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">volatile</fo:inline>. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">deprecated</fo:inline> specifies if a deprecated 
              definition should be kept or not. If the option is 
              false the MIB compiler will ignore all deprecated
              definitions. </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">true</fo:inline>. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">relaxed_row_name_assign_check</fo:inline>, if present,
	      specifies that the row name assign check shall not be done 
	      strictly according to the SMI (which allows only the value 1). 
              With this option, all values greater than zero is allowed 
	      (&gt;= 1). This means that the error will be converted to a 
              warning. </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default it is not included, but if this option is present 
	      it will be. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">description</fo:inline> specifies if the text
              of the DESCRIPTION field will be included or not. </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default it is not included, but if this option is 
	      present it will be. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">reference</fo:inline> specifies if the text
              of the REFERENCE field, when found in a table definition, 
              will be included or not. </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default it is not included, but if this option is present 
	      it will be. The reference text will be placed in the allocList 
	      field of the mib-entry record (#me{}) for the table. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">group_check</fo:inline> specifies whether the
	      mib compiler should check the OBJECT-GROUP macro and
              the NOTIFICATION-GROUP macro for correctness or not.  </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">true</fo:inline>. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">i</fo:inline> specifies the path to search for
	      imported (compiled) MIB files. The directories should be
              strings with a trailing directory delimiter. </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">["./"]</fo:inline>. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">il</fo:inline> (include_lib) also specifies a
              list of directories to search for imported MIBs. It
              assumes that the first element in the directory name
              corresponds to an OTP application. The compiler will find
              the current installed version. For example, the value
              ["snmp/mibs/"] will be replaced by ["snmp-3.1.1/mibs/"]
              (or what the current version may be in the system). The
              current directory and the 
	      <fo:inline font-family="monospace">&lt;snmp-home&gt;/priv/mibs/</fo:inline>
              are always listed last in the include path. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">imports</fo:inline>, if present, specifies that 
              the IMPORT statement of the MIB shall be included in the 
	      compiled mib. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">module</fo:inline>, if present, specifies the
              name of a module which implements all instrumentation
              functions for the MIB.  </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name of all instrumentation
              functions must be the same as the corresponding managed
              object it implements. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">module_identity</fo:inline>, if present, specifies 
              that the info part of the MODULE-IDENTITY statement of the MIB 
              shall be included in the compiled mib. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">module_compliance</fo:inline>, if present, specifies 
              that the MODULE-COMPLIANCE statement of the MIB shall be included 
              (with a mib-entry record) in the compiled mib. The mib-entry record 
	      of the module-compliance will contain <fo:inline font-family="monospace">reference</fo:inline> and <fo:inline font-family="monospace">module</fo:inline> 
	      part(s) this info in the <fo:inline font-family="monospace">assocList</fo:inline> field). </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">agent_capabilities</fo:inline>, if present, specifies 
              that the AGENT-CAPABILITIES statement of the MIB shall be included 
              (with a mib-entry record) in the compiled mib. The mib-entry record 
	      of the agent-capabilitie will contain <fo:inline font-family="monospace">reference</fo:inline> and <fo:inline font-family="monospace">modules</fo:inline> 
	      part(s) this info in the <fo:inline font-family="monospace">assocList</fo:inline> field). </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">no_defs</fo:inline>, if present, specifies 
              that if a managed object does not have an instrumentation
              function, the default instrumentation function should NOT
              be used, instead this is reported as an error, and the
              compilation aborts. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">verbosity</fo:inline> specifies the verbosity of
	      the SNMP mib compiler. I.e. if warning, info, log, debug 
              and trace messages shall be shown. </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">silence</fo:inline>. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that if the option <fo:inline font-family="monospace">warnings</fo:inline> is <fo:inline font-family="monospace">true</fo:inline> and the 
              option <fo:inline font-family="monospace">verbosity</fo:inline> is <fo:inline font-family="monospace">silence</fo:inline>, warning messages will
              still be shown. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">warnings</fo:inline> specifies whether warning
	    messages should be shown. </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">true</fo:inline>. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">warnings_as_errors</fo:inline>, if present, specifies 
	    whether warnings should be treated as errors.</fo:block>
	  </fo:block></fo:list-item-body></fo:list-item>

        </fo:list-block>
	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MIB compiler understands both SMIv1 and SMIv2 MIBs.  It
          uses the <fo:inline font-family="monospace">MODULE-IDENTITY</fo:inline> statement to determine if the MIB is
          version 1 or 2.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MIB compiler can be invoked from the OS command line by
          using the command <fo:inline font-family="monospace">erlc</fo:inline>.  <fo:inline font-family="monospace">erlc</fo:inline> recognizes the
          extension <fo:inline font-family="monospace">.mib</fo:inline>, and invokes the SNMP MIB compiler for
          files with that extension. The options <fo:inline font-family="monospace">db</fo:inline>, 
          <fo:inline font-family="monospace">group_check</fo:inline>, <fo:inline font-family="monospace">deprecated</fo:inline>, <fo:inline font-family="monospace">description</fo:inline>,
          <fo:inline font-family="monospace">verbosity</fo:inline>, <fo:inline font-family="monospace">imports</fo:inline> and <fo:inline font-family="monospace">module_identity</fo:inline>
          have to be specified to <fo:inline font-family="monospace">erlc</fo:inline> using the syntax 
          <fo:inline font-family="monospace">+term</fo:inline>.  See <fo:inline font-family="monospace">erlc(1)</fo:inline> for details.
          </fo:block>

	  
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8428704">is_consistent(Mibs) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mibs = [MibName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks for multiple usage of object identifiers and traps
          between MIBs.
          </fo:block>

	  
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8432976">mib_to_hrl(MibName) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generates a <fo:inline font-family="monospace">.hrl</fo:inline> file with definitions of Erlang
          constants for the objects in the MIB. The <fo:inline font-family="monospace">.hrl</fo:inline> file is
          called <fo:inline font-family="monospace">&lt;MibName&gt;.hrl</fo:inline>. The MIB must be compiled, and
          present in the current directory.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">mib_to_hrl</fo:inline> generator can be invoked from the OS
          command line by using the command <fo:inline font-family="monospace">erlc</fo:inline>.  <fo:inline font-family="monospace">erlc</fo:inline>
          recognizes the extension <fo:inline font-family="monospace">.bin</fo:inline>, and invokes this function
          for files with that extension.
          </fo:block>
      </fo:block>
  

  <fo:block id="idp8440208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">erlc(1)
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp8448544" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpc(command)</fo:marker>snmpc(command)</fo:block>Command</fo:block>
  <fo:block/>
  snmpc(command)
  SNMP MIB compiler frontend
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">snmpc</fo:inline> program provides a way to run
    the SNMP MIB compiler of the Erlang system. </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8451440">snmpc [options] file.mib | file.bin</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">snmpc</fo:inline> compile a SNMP MIB file, 
	see <fo:inline font-style="italic">compile/1,2</fo:inline> for 
	more info. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It can also be used to generate a header file (.hrl) 
	with definitions of Erlang constants for the objects in 
	the MIB, see 
	<fo:inline font-style="italic">mib_to_hrl/1</fo:inline>. </fo:block>

	
      </fo:block>
  

  <fo:block id="idp8456720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Compiler options</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following options are supported (note that most of these relate 
    to the compilation of the MIB file):</fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">--help</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints help info.</fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--version</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints application and mib format version.</fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--verbosity <fo:inline font-weight="bold">verbosity</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Print debug info. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">verbosity</fo:inline> = <fo:inline font-family="monospace">trace</fo:inline> | <fo:inline font-family="monospace">debug</fo:inline> | <fo:inline font-family="monospace">log</fo:inline> | <fo:inline font-family="monospace">info</fo:inline> | <fo:inline font-family="monospace">silence</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-family="monospace">silence</fo:inline>.</fo:block>
	
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--warnings | --W</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Print warning messages. </fo:block>
	
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--wae | --Werror</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Warnings as errors. 
	Indicates that warnings shall be treated as errors. </fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--o <fo:inline font-weight="bold">directory</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The directory where the compiler should place the output files.
	If not specified, output files will be placed in the current working
	directory.</fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--i <fo:inline font-weight="bold">Directory</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the path to search for imported (compiled) MIB files. 
	By default, the current working directory is always included. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option can be present several times, each time specifying
	<fo:inline font-weight="bold">one</fo:inline> path. </fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--il <fo:inline font-weight="bold">Directory</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option (include_lib), specifies a list of directories to 
	search for imported MIBs. It assumes that the first element in 
	the directory name corresponds to an OTP application. The compiler 
	will find the current installed version. For example, the value 
	["snmp/mibs/"] will be replaced by ["snmp-3.1.1/mibs/"] (or what 
	the current version may be in the system). The current directory 
	and the "snmp-home"/priv/mibs/ are always listed last in the
        include path. </fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--sgc</fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option (skip group check), if present, disables the 
	group check of the mib compiler. 
	That is, should the OBJECT-GROUP and the NOTIFICATION-GROUP 
	macro(s) be checked for correctness or not. </fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--dep</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Keep deprecated definition(s). 
	If not specified the compiler will ignore deprecated definitions. </fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--desc</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The DESCRIPTION field will be included. </fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--ref</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The REFERENCE field will be included. </fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--imp</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The IMPORTS field will be included. </fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--mi</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MODULE-IDENTITY field will be included. </fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--mc</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MODULE-COMPLIANCE field will be included. </fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--ac</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The AGENT-CAPABILITIES field will be included. </fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--mod <fo:inline font-weight="bold">module</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module which implements all the instrumentation functions. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name of all instrumentation functions must be the 
	same as the corresponding managed object it implements. </fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--nd</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default instrumentation functions will <fo:inline font-weight="bold">not</fo:inline> be
	used if a managed object have no instrumentation function.
	Instead this will be reported as an error, and the compilation 
	aborts. </fo:block>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">--rrnac</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option, if present, specifies that the row name assign check 
	shall not be done strictly according to the SMI (which allows only 
	the value 1). </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With this option, all values greater than zero is allowed (&gt;= 1). 
	This means that the error will be converted to a warning. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default it is not included, but if this option is present 
	it will be. </fo:block>
	
      </fo:block></fo:block-container>

    </fo:block>
  

  <fo:block id="idp8506208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SEE ALSO</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">erlc(1)</fo:inline>,
    <fo:inline font-style="italic">compile(3)</fo:inline>,
    <fo:inline font-style="italic">snmpc(3)</fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp8516384" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpm</fo:marker>snmpm</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpm
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmpm</fo:inline> contains interface functions to the 
      SNMP manager. </fo:block>
  

  <fo:block id="idp8518992" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Common Data Types</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following data types are used in the functions below:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
oid() = [byte()]  -  The oid() type is used to represent an ASN.1 OBJECT IDENTIFIER
snmp_reply() = {error_status(), error_index(), varbinds()}
error_status() = noError | atom()
error_index() = integer()
varbinds() = [varbind()]
atl_type() = read | write | read_write
target_name() = string()  -  Is a unique *non-empty* string
vars_and_vals() = [var_and_val()]
var_and_val() = {oid(), value_type(), value()} | {oid(), value()}
value_type() = o ('OBJECT IDENTIFIER') | 
               i ('INTEGER') | 
               u ('Unsigned32') | 
               g ('Unsigned32') | 
               s ('OCTET SRING') | 
               b ('BITS') | 
               ip ('IpAddress') | 
               op ('Opaque') | 
               c32 ('Counter32') | 
               c64 ('Counter64') | 
               tt ('TimeTicks')
value() = term()
community() = string()
sec_model() = any | v1 | v2c | usm
sec_name() = string()
sec_level() = noAuthNoPriv | authNoPriv | authPriv
</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also the <fo:inline font-style="italic">
    data types in <fo:inline font-family="monospace">snmpa_conf</fo:inline></fo:inline>.</fo:block>

    
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8524352">monitor() -&gt; Ref</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ref = reference()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Monitor the SNMP manager. In case of a crash, the calling 
          (monitoring) process will get a 'DOWN' message (see the erlang 
          module for more info). </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8528208">demonitor(Ref) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ref = reference()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Turn off monitoring of the SNMP manager. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8531968">notify_started(Timeout) -&gt; Pid</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Request a notification (message) when the SNMP manager has 
          started. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Timeout</fo:inline> is the time the request is valid. The 
          value has to be greater then zero. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Pid</fo:inline> is the process handling the supervision of the 
          SNMP manager start. When the manager has started a completion
          message will be sent to the client from this process: 
          <fo:inline font-family="monospace">{snmpm_started, Pid}</fo:inline>. If the SNMP manager was not started 
          in time, a timeout message will be sent to the client: 
          <fo:inline font-family="monospace">{snmpm_start_timeout, Pid}</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A client application that is dependent on the SNMP manager 
          will use this function in order to be notified of when the
          manager has started. There are two situations when this 
          is useful:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">During the start of a system, when a client application 
              <fo:inline font-weight="bold">could</fo:inline> start prior to the SNMP manager but is dependent
              upon it, and therefor has to wait for it to start.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the SNMP manager has crashed, the dependent client 
              application has to wait for the SNMP manager to be restarted
              before it can <fo:inline font-weight="bold">reconnect</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns the pid() of a handler process, that does
          the supervision on behalf of the client application. Note that the 
          client application is linked to this handler. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used in conjunction with the monitor function.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8544736">cancel_notify_started(Pid) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Cancel a previous request to be notified of SNMP manager start.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8548528">register_user(Id, Module, Data) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8549008">register_user(Id, Module, Data, DefaultAgentConfig) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Id = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = snmpm_user()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DefaultAgentConfig = [default_agent_config()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">default_agent_config() = {Item, Val}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item = community | timeout | max_message_size | version | sec_model | sec_name | sec_level</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">snmpm_user() = Module implementing the snmpm_user behaviour</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Register the manager entity (=user) responsible for specific 
	agent(s). </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Module</fo:inline> is the callback module (snmpm_user behaviour) which 
	will be called whenever something happens (detected 
	agent, incoming reply or incoming trap/notification).
	Note that this could have already been done as a 
	consequence of the node config. (see users.conf).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The argument <fo:inline font-family="monospace">DefaultAgentConfig</fo:inline> is used as default 
	values when this user register agents.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type of <fo:inline font-family="monospace">Val</fo:inline> depends on <fo:inline font-family="monospace">Item</fo:inline>: </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
community = string()
timeout = integer() | snmp_timer()
max_message_size = integer()
version = v1 | v2 | v3 
sec_model = any | v1 | v2c | usm 
sec_name = string() 
sec_level = noAuthNoPriv | authNoPriv | authPriv
        </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8560816">register_user_monitor(Id, Module, Data) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8561312">register_user_monitor(Id, Module, Data, DefaultAgentConfig) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Id = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = snmpm_user()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DefaultAgentConfig = [default_agent_config()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">default_agent_config() = {Item, Val}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item = community | timeout | max_message_size | version | sec_model | sec_name | sec_level</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">snmpm_user() = Module implementing the snmpm_user behaviour</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Register the monitored manager entity (=user) responsible 
          for specific agent(s). </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process performing the registration will be monitored. 
          Which means that if that process should die, all agents 
          registered by that user process will be unregistered. All 
          outstanding requests will be canceled. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Module</fo:inline> is the callback module (snmpm_user behaviour) which 
          will be called whenever something happens (detected 
          agent, incoming reply or incoming trap/notification).
          Note that this could have already been done as a 
          consequence of the node config. (see users.conf).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The argument <fo:inline font-family="monospace">DefaultAgentConfig</fo:inline> is used as default values when 
          this user register agents.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type of <fo:inline font-family="monospace">Val</fo:inline> depends on <fo:inline font-family="monospace">Item</fo:inline>: </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
community = string()
timeout = integer() | snmp_timer()
max_message_size = integer()
version = v1 | v2 | v3 
sec_model = any | v1 | v2c | usm 
sec_name = string() 
sec_level = noAuthNoPriv | authNoPriv | authPriv
        </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8573856">unregister_user(Id) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Id = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unregister the user.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8577584">which_users() -&gt; Users</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Users = [UserId]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get a list of the identities of all registered users.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8581760">register_agent(UserId, TargetName, Config) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = [agent_config()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">agent_config() = {Item, Val}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item = engine_id | address | port | community | timeout | max_message_size | version | sec_model | sec_name | sec_level | tdomain</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Explicitly instruct the manager to handle this agent, with
	<fo:inline font-family="monospace">UserId</fo:inline> as the responsible user. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called to instruct the manager that this agent shall be handled. 
	This function is used when the user knows in advance which agents 
	the manager shall handle.
	Note that there is an alternate way to do the same thing:
	Add the agent to the manager config files (see 
	<fo:inline font-style="italic">agents.conf</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">TargetName</fo:inline> is a non-empty string, 
	uniquely identifying the agent. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type of <fo:inline font-family="monospace">Val</fo:inline> depends on <fo:inline font-family="monospace">Item</fo:inline>: </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[mandatory] engine_id = string()
[mandatory] tadress = transportAddress()  % Depends on tdomain
[optional]  port = inet:port_number()
[optional]  tdomain = transportDomain()
[optional]  community = string()
[optional]  timeout = integer() | snmp_timer()
[optional]  max_message_size = integer()
[optional]  version = v1 | v2 | v3 
[optional]  sec_model = any | v1 | v2c | usm 
[optional]  sec_name = string() 
[optional]  sec_level = noAuthNoPriv | authNoPriv | authPriv
</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that if no <fo:inline font-family="monospace">tdomain</fo:inline> is given, the default value,
	<fo:inline font-family="monospace">transportDomainUdpIpv4</fo:inline>, is used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that if no <fo:inline font-family="monospace">port</fo:inline> is given and if <fo:inline font-family="monospace">taddress</fo:inline> does not
	contain a port number, the default value is used.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8596368">unregister_agent(UserId, TargetName) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unregister the agent.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8600576">agent_info(TargetName, Item) -&gt; {ok, Val} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieve agent config.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8605232">update_agent_info(UserId, TargetName, Info) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8605728">update_agent_info(UserId, TargetName, Item, Val) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Info = [{item(), item_value()}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item = item()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">item() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val = item_value()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">item_value() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Update agent config. The function <fo:inline font-family="monospace">update_agent_info/3</fo:inline> 
	should be used when several values needs to be updated atomically. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See function 
	<fo:inline font-style="italic">register_agent</fo:inline>
	for more info about what kind of items are allowed. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8614368">which_agents() -&gt; Agents</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8614832">which_agents(UserId) -&gt; Agents</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agents = [TargetName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get a list of all registered agents or all agents registered
          by a specific user.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8619552">register_usm_user(EngineID, UserName, Conf) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EngineID = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [usm_config()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">usm_config() = {Item, Val}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item = sec_name | auth | auth_key | priv | priv_key</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Explicitly instruct the manager to handle this USM user.
          Note that there is an alternate way to do the same thing:
          Add the usm user to the manager config files (see 
          <fo:inline font-style="italic">usm.conf</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type of <fo:inline font-family="monospace">Val</fo:inline> depends on <fo:inline font-family="monospace">Item</fo:inline>: </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
sec_name = string()
auth = usmNoAuthProtocol | usmHMACMD5AuthProtocol | usmHMACSHAAuthProtocoltimeout
auth_key = [integer()]   (length 16 if auth = usmHMACMD5AuthProtocol, 
                          length 20 if auth = usmHMACSHAAuthProtocol)
priv = usmNoPrivProtocol | usmDESPrivProtocol | usmAesCfb128Protocol
priv_key = [integer()]   (length is 16 if priv = usmDESPrivProtocol | usmAesCfb128Protocol).
</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8629392">unregister_usm_user(EngineID, UserName) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EngineID = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unregister this USM user.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8634064">usm_user_info(EngineID, UserName, Item) -&gt; {ok, Val} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EngineID = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UsmName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item = sec_name | auth | auth_key | priv | priv_key</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieve usm user config.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8639216">update_usm_user_info(EngineID, UserName, Item, Val) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EngineID = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UsmName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item = sec_name | auth | auth_key | priv | priv_key</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Update usm user config.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8644800">which_usm_users() -&gt; UsmUsers</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UsmUsers = [{EngineID,UserName}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EngineID = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UsmName = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get a list of all registered usm users.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8649456">which_usm_users(EngineID) -&gt; UsmUsers</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UsmUsers = [UserName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserName = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get a list of all registered usm users with engine-id 
          <fo:inline font-family="monospace">EngineID</fo:inline>.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8654128">sync_get2(UserId, TargetName, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8654640">sync_get2(UserId, TargetName, Oids, SendOpts) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = [oid()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendOpts = send_opts()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_opts() = [send_opt()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpReply = snmp_reply()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Remaining = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {send_failed, ReqId, ActualReason} | {invalid_sec_info, SecInfo, SnmpInfo} | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ActualReason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecInfo = [sec_info()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">sec_info() = {sec_tag(), ExpectedValue, ReceivedValue}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">sec_tag() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExpectedValue = ReceivedValue = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpInfo = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Synchronous <fo:inline font-family="monospace">get-request</fo:inline>. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Remaining</fo:inline> is the remaining time of the given (or default) 
	timeout time.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-weight="bold">Reason</fo:inline> is <fo:inline font-weight="bold">{send_failed, ...}</fo:inline> it means that
	the net_if process failed to send the message. This could happen
	because of any number of reasons, i.e. encoding error. 
	<fo:inline font-weight="bold">ActualReason</fo:inline> is the actual reason in this case. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The send option <fo:inline font-family="monospace">extra</fo:inline> specifies an opaque data structure 
	passed on to the net-if process. The net-if process included in this
	application makes, with one exception, no use of this info, 
	so the only use for it in such a option (when using the built in 
	net-if) would be tracing. The one usage exception is: 
	<fo:inline font-weight="bold">Any</fo:inline> tuple with <fo:inline font-family="monospace">snmpm_extra_info_tag</fo:inline> as its first 
	element is reserved for internal use. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some of the send options (<fo:inline font-family="monospace">community</fo:inline>, <fo:inline font-family="monospace">sec_model</fo:inline>, 
	<fo:inline font-family="monospace">sec_name</fo:inline>, <fo:inline font-family="monospace">sec_level</fo:inline> and <fo:inline font-family="monospace">max_message_size</fo:inline>) 
	are <fo:inline font-family="monospace">override options</fo:inline>. That is,
	for <fo:inline font-weight="bold">this</fo:inline> request, they override any configuration done 
	when the agent was registered. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">SnmpInfo</fo:inline>, see the user callback function 
	<fo:inline font-style="italic">handle_report</fo:inline>.</fo:block>

	
      </fo:block>

   <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8676384">sync_get(UserId, TargetName, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8676896">sync_get(UserId, TargetName, ContextName, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8677424">sync_get(UserId, TargetName, Oids, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8677952">sync_get(UserId, TargetName, ContextName, Oids, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8678496">sync_get(UserId, TargetName, ContextName, Oids, Timeout, ExtraInfo) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ContextName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = [oid()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExtraInfo = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpReply = snmp_reply()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Remaining = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {send_failed, ReqId, R} | {invalid_sec_info, SecInfo, SnmpInfo} | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">R = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecInfo = [sec_info()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">sec_info() = {sec_tag(), ExpectedValue, ReceivedValue}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">sec_tag() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExpectedValue = ReceivedValue = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpInfo = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Synchronous <fo:inline font-family="monospace">get-request</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Remaining</fo:inline> is the remaining time of the given or 
	default timeout time.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-weight="bold">Reason</fo:inline> is <fo:inline font-weight="bold">{send_failed, ...}</fo:inline> it means that
	the net_if process failed to send the message. This could happen
	because of any number of reasons, i.e. encoding error. <fo:inline font-weight="bold">R</fo:inline> 
	is the actual reason in this case. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ExtraInfo</fo:inline> is an opaque data structure passed on to
	the net-if process. The net-if process included in this
	application makes, with one exception, no use of this info, 
	so the only use for it in such a configuration (when using the 
	built in net-if) would be tracing. The one usage exception is: 
	<fo:inline font-weight="bold">Any</fo:inline> tuple with <fo:inline font-family="monospace">snmpm_extra_info_tag</fo:inline> as its first 
	element is reserved for internal use. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">SnmpInfo</fo:inline>, see the user callback function 
          <fo:inline font-style="italic">handle_report</fo:inline>.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8695760">async_get2(UserId, TargetName, Oids) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8696256">async_get2(UserId, TargetName, Oids, SendOpts) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = [oid()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendOpts = send_opts()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_opts() = [send_opt()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asynchronous <fo:inline font-family="monospace">get-request</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reply, if it arrives, will be delivered to the user 
	through a call to the snmpm_user callback function 
	<fo:inline font-family="monospace">handle_pdu</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The send option <fo:inline font-family="monospace">timeout</fo:inline> specifies for how long the request is 
	valid (after which the manager is free to delete it).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The send option <fo:inline font-family="monospace">extra</fo:inline> specifies an opaque data structure 
	passed on to the net-if process. The net-if process included in this
	application makes, with one exception, no use of this info, 
	so the only use for it in such a option (when using the built in 
	net-if) would be tracing. The one usage exception is: 
	<fo:inline font-weight="bold">Any</fo:inline> tuple with <fo:inline font-family="monospace">snmpm_extra_info_tag</fo:inline> as its first 
	element is reserved for internal use. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some of the send options (<fo:inline font-family="monospace">community</fo:inline>, <fo:inline font-family="monospace">sec_model</fo:inline>, 
	<fo:inline font-family="monospace">sec_name</fo:inline>, <fo:inline font-family="monospace">sec_level</fo:inline> and <fo:inline font-family="monospace">max_message_size</fo:inline>) 
	are <fo:inline font-family="monospace">override options</fo:inline>. That is,
	for <fo:inline font-weight="bold">this</fo:inline> request, they override any configuration done 
	when the agent was registered. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8711856">async_get(UserId, TargetName, Oids) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8712352">async_get(UserId, TargetName, ContextName, Oids) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8712864">async_get(UserId, TargetName, Oids, Expire) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8713376">async_get(UserId, TargetName, ContextName, Oids, Expire) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8713904">async_get(UserId, TargetName, ContextName, Oids, Expire, ExtraInfo) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ContextName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = [oid()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Expire = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExtraInfo = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asynchronous <fo:inline font-family="monospace">get-request</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reply, if it arrives, will be delivered to the user 
	through a call to the snmpm_user callback function 
	<fo:inline font-family="monospace">handle_pdu</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Expire</fo:inline> time indicates for how long the request is 
	valid (after which the manager is free to delete it).</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ExtraInfo</fo:inline> is an opaque data structure passed on to
	the net-if process. The net-if process included in this
	application makes, with one exception, no use of this info, 
	so the only use for it in such a configuration (when using the 
	built in net-if) would be tracing. The one usage exception is: 
	<fo:inline font-weight="bold">Any</fo:inline> tuple with <fo:inline font-family="monospace">snmpm_extra_info_tag</fo:inline> as its first 
	element is reserved for internal use. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8725472">sync_get_next2(UserId, TargetName, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8726000">sync_get_next2(UserId, TargetName, Oids, SendOpts) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = [oid()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendOpts = send_opts()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_opts() = [send_opt()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpReply = snmp_reply()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Remaining = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {send_failed, ReqId, ActualReason} | {invalid_sec_info, SecInfo, SnmpInfo} | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ActualReason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecInfo = [sec_info()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">sec_info() = {sec_tag(), ExpectedValue, ReceivedValue}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">sec_tag() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExpectedValue = ReceivedValue = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpInfo = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Synchronous <fo:inline font-family="monospace">get-next-request</fo:inline>. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Remaining</fo:inline> is the remaining time of the given (or default) 
	timeout time.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-weight="bold">Reason</fo:inline> is <fo:inline font-weight="bold">{send_failed, ...}</fo:inline> it means that
	the net_if process failed to send the message. This could happen
	because of any number of reasons, i.e. encoding error. 
	<fo:inline font-weight="bold">ActualReason</fo:inline> is the actual reason in this case. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The send option <fo:inline font-family="monospace">extra</fo:inline> specifies an opaque data structure 
	passed on to the net-if process. The net-if process included in this
	application makes, with one exception, no use of this info, 
	so the only use for it in such a option (when using the built in 
	net-if) would be tracing. The one usage exception is: 
	<fo:inline font-weight="bold">Any</fo:inline> tuple with <fo:inline font-family="monospace">snmpm_extra_info_tag</fo:inline> as its first 
	element is reserved for internal use. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some of the send options (<fo:inline font-family="monospace">community</fo:inline>, <fo:inline font-family="monospace">sec_model</fo:inline>, 
	<fo:inline font-family="monospace">sec_name</fo:inline>, <fo:inline font-family="monospace">sec_level</fo:inline> and <fo:inline font-family="monospace">max_message_size</fo:inline>) 
	are <fo:inline font-family="monospace">override options</fo:inline>. That is,
	for <fo:inline font-weight="bold">this</fo:inline> request, they override any configuration done 
	when the agent was registered. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">SnmpInfo</fo:inline>, see the user callback function 
	<fo:inline font-style="italic">handle_report</fo:inline>.</fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8747744">sync_get_next(UserId, TargetName, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8748256">sync_get_next(UserId, TargetName, ContextName, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8748784">sync_get_next(UserId, TargetName, Oids, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8749312">sync_get_next(UserId, TargetName, ContextName, Oids, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8749856">sync_get_next(UserId, TargetName, ContextName, Oids, Timeout, ExtraInfo) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ContextName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = [oid()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExtraInfo = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpReply = snmp_reply()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Remaining = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {send_failed, ReqId, R} | {invalid_sec_info, SecInfo, SnmpInfo} | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">R = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Synchronous <fo:inline font-family="monospace">get-next-request</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Remaining</fo:inline> time of the given or default timeout time.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-weight="bold">Reason</fo:inline> is <fo:inline font-weight="bold">{send_failed, ...}</fo:inline> it means that
	the net_if process failed to send the message. This could happen
	because of any number of reasons, i.e. encoding error. <fo:inline font-weight="bold">R</fo:inline> 
	is the actual reason in this case. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ExtraInfo</fo:inline> is an opaque data structure passed on to
	the net-if process. The net-if process included in this
	application makes, with one exception, no use of this info, 
	so the only use for it in such a configuration (when using the 
	built in net-if) would be tracing. The one usage exception is: 
	<fo:inline font-weight="bold">Any</fo:inline> tuple with <fo:inline font-family="monospace">snmpm_extra_info_tag</fo:inline> as its first 
	element is reserved for internal use. </fo:block>
	
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8763168">async_get_next2(UserId, TargetName, Oids) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8763680">async_get_next2(UserId, TargetName, Oids, SendOpts) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = [oid()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqId = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asynchronous <fo:inline font-family="monospace">get-next-request</fo:inline>. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reply will be delivered to the user through a call
	to the snmpm_user callback function <fo:inline font-family="monospace">handle_pdu</fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The send option <fo:inline font-family="monospace">timeout</fo:inline> specifies for how long the request is 
	valid (after which the manager is free to delete it).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The send option <fo:inline font-family="monospace">extra</fo:inline> specifies an opaque data structure 
	passed on to the net-if process. The net-if process included in this
	application makes, with one exception, no use of this info, 
	so the only use for it in such a option (when using the built in 
	net-if) would be tracing. The one usage exception is: 
	<fo:inline font-weight="bold">Any</fo:inline> tuple with <fo:inline font-family="monospace">snmpm_extra_info_tag</fo:inline> as its first 
	element is reserved for internal use. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some of the send options (<fo:inline font-family="monospace">community</fo:inline>, <fo:inline font-family="monospace">sec_model</fo:inline>, 
	<fo:inline font-family="monospace">sec_name</fo:inline>, <fo:inline font-family="monospace">sec_level</fo:inline> and <fo:inline font-family="monospace">max_message_size</fo:inline>) 
	are <fo:inline font-family="monospace">override options</fo:inline>. That is,
	for <fo:inline font-weight="bold">this</fo:inline> request, they override any configuration done 
	when the agent was registered. </fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8778352">async_get_next(UserId, TargetName, Oids) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8778864">async_get_next(UserId, TargetName, ContextName, Oids) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8779376">async_get_next(UserId, TargetName, Oids, Expire) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8779888">async_get_next(UserId, TargetName, ContextName, Oids, Expire) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8780416">async_get_next(UserId, TargetName, ContextName, Oids, Expire, ExtraInfo) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ContextName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = [oid()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Expire = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExtraInfo = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqId = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asynchronous <fo:inline font-family="monospace">get-next-request</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reply will be delivered to the user through a call
	to the snmpm_user callback function <fo:inline font-family="monospace">handle_pdu</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Expire</fo:inline> time indicates for how long the request is 
	valid (after which the manager is free to delete it).</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ExtraInfo</fo:inline> is an opaque data structure passed on to
	the net-if process. The net-if process included in this
	application makes, with one exception, no use of this info, 
	so the only use for it in such a configuration (when using the 
	built in net-if) would be tracing. The one usage exception is: 
	<fo:inline font-weight="bold">Any</fo:inline> tuple with <fo:inline font-family="monospace">snmpm_extra_info_tag</fo:inline> as its first 
	element is reserved for internal use. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8791984">sync_set2(UserId, TargetName, VarsAndVals) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8792512">sync_set2(UserId, TargetName, VarsAndVals, SendOpts) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">VarsAndVals = vars_and_vals()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendOpts = send_opts()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_opts() = [send_opt()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpReply = snmp_reply()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Remaining = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {send_failed, ReqId, ActualReason} | {invalid_sec_info, SecInfo, SnmpInfo} | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ActualReason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecInfo = [sec_info()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">sec_info() = {sec_tag(), ExpectedValue, ReceivedValue}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">sec_tag() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExpectedValue = ReceivedValue = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpInfo = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Synchronous <fo:inline font-family="monospace">set-request</fo:inline>. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Remaining</fo:inline> is the remaining time of the given (or default) 
	timeout time.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-weight="bold">Reason</fo:inline> is <fo:inline font-weight="bold">{send_failed, ...}</fo:inline> it means that
	the net_if process failed to send the message. This could happen
	because of any number of reasons, i.e. encoding error. 
	<fo:inline font-weight="bold">ActualReason</fo:inline> is the actual reason in this case. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-weight="bold">var_and_val()</fo:inline> is <fo:inline font-weight="bold">{oid(), value()}</fo:inline>, the
	manager makes an educated guess based on the loaded mibs. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The send option <fo:inline font-family="monospace">extra</fo:inline> specifies an opaque data structure 
	passed on to the net-if process. The net-if process included in this
	application makes, with one exception, no use of this info, 
	so the only use for it in such a option (when using the built in 
	net-if) would be tracing. The one usage exception is: 
	<fo:inline font-weight="bold">Any</fo:inline> tuple with <fo:inline font-family="monospace">snmpm_extra_info_tag</fo:inline> as its first 
	element is reserved for internal use. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some of the send options (<fo:inline font-family="monospace">community</fo:inline>, <fo:inline font-family="monospace">sec_model</fo:inline>, 
	<fo:inline font-family="monospace">sec_name</fo:inline>, <fo:inline font-family="monospace">sec_level</fo:inline> and <fo:inline font-family="monospace">max_message_size</fo:inline>) 
	are <fo:inline font-family="monospace">override options</fo:inline>. That is,
	for <fo:inline font-weight="bold">this</fo:inline> request, they override any configuration done 
	when the agent was registered. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">SnmpInfo</fo:inline>, see the user callback function 
	<fo:inline font-style="italic">handle_report</fo:inline>.</fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8815664">sync_set(UserId, TargetName, VarsAndVals) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8816192">sync_set(UserId, TargetName, ContextName, VarsAndVals) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8816720">sync_set(UserId, TargetName, VarsAndVals, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8817248">sync_set(UserId, TargetName, ContextName, VarsAndVals, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8817792">sync_set(UserId, TargetName, ContextName, VarsAndVals, Timeout, ExtraInfo) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ContextName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">VarsAndVals = vars_and_vals()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExtraInfo = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpReply = snmp_reply()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Remaining = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {send_failed, ReqId, ActualReason} | {invalid_sec_info, SecInfo, SnmpInfo} | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ActualReason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Synchronous <fo:inline font-family="monospace">set-request</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Remaining</fo:inline> time of the given or default timeout time.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-weight="bold">Reason</fo:inline> is <fo:inline font-weight="bold">{send_failed, ...}</fo:inline> it means that
	the net_if process failed to send the message. This could happen
	because of any number of reasons, i.e. encoding error. <fo:inline font-weight="bold">R</fo:inline> 
	is the actual reason in this case. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-weight="bold">var_and_val()</fo:inline> is <fo:inline font-weight="bold">{oid(), value()}</fo:inline>, the
	manager makes an educated guess based on the loaded mibs. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ExtraInfo</fo:inline> is an opaque data structure passed on to
	the net-if process. The net-if process included in this
	application makes, with one exception, no use of this info, 
	so the only use for it in such a configuration (when using the 
	built in net-if) would be tracing. The one usage exception is: 
	<fo:inline font-weight="bold">Any</fo:inline> tuple with <fo:inline font-family="monospace">snmpm_extra_info_tag</fo:inline> as its first 
	element is reserved for internal use. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8832528">async_set2(UserId, TargetName, VarsAndVals) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8833040">async_set2(UserId, TargetName, VarsAndVals, SendOpts) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">VarsAndVals = vars_and_vals()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendOpts = send_opts()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_opts() = [send_opt()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asynchronous <fo:inline font-family="monospace">set-request</fo:inline>. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reply will be delivered to the user through a call
	to the snmpm_user callback function <fo:inline font-family="monospace">handle_pdu</fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The send option <fo:inline font-family="monospace">timeout</fo:inline> specifies for how long the request is 
	valid (after which the manager is free to delete it).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-weight="bold">var_and_val()</fo:inline> is <fo:inline font-weight="bold">{oid(), value()}</fo:inline>, the
	manager makes an educated guess based on the loaded mibs. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The send option <fo:inline font-family="monospace">extra</fo:inline> specifies an opaque data structure 
	passed on to the net-if process. The net-if process included in this
	application makes, with one exception, no use of this info, 
	so the only use for it in such a option (when using the built in 
	net-if) would be tracing. The one usage exception is: 
	<fo:inline font-weight="bold">Any</fo:inline> tuple with <fo:inline font-family="monospace">snmpm_extra_info_tag</fo:inline> as its first 
	element is reserved for internal use. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some of the send options (<fo:inline font-family="monospace">community</fo:inline>, <fo:inline font-family="monospace">sec_model</fo:inline>, 
	<fo:inline font-family="monospace">sec_name</fo:inline>, <fo:inline font-family="monospace">sec_level</fo:inline> and <fo:inline font-family="monospace">max_message_size</fo:inline>) 
	are <fo:inline font-family="monospace">override options</fo:inline>. That is,
	for <fo:inline font-weight="bold">this</fo:inline> request, they override any configuration done 
	when the agent was registered. </fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8850032">async_set(UserId, TargetName, VarsAndVals) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8850544">async_set(UserId, TargetName, ContextName, VarsAndVals) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8851072">async_set(UserId, TargetName, VarsAndVals, Expire) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8851584">async_set(UserId, TargetName, ContextName, VarsAndVals, Expire) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8852112">async_set(UserId, TargetName, ContextName, VarsAndVals, Expire, ExtraInfo) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">VarsAndVals = vars_and_vals()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Expire = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExtraInfo = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asynchronous <fo:inline font-family="monospace">set-request</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reply will be delivered to the user through a call
	to the snmpm_user callback function <fo:inline font-family="monospace">handle_pdu</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Expire</fo:inline> time indicates for how long the request is 
	valid (after which the manager is free to delete it).</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-weight="bold">var_and_val()</fo:inline> is <fo:inline font-weight="bold">{oid(), value()}</fo:inline>, the
	manager makes an educated guess based on the loaded mibs. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ExtraInfo</fo:inline> is an opaque data structure passed on to
	the net-if process. The net-if process included in this
	application makes, with one exception, no use of this info, 
	so the only use for it in such a configuration (when using the 
	built in net-if) would be tracing. The one usage exception is: 
	<fo:inline font-weight="bold">Any</fo:inline> tuple with <fo:inline font-family="monospace">snmpm_extra_info_tag</fo:inline> as its first 
	element is reserved for internal use. </fo:block>
	
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8864640">sync_get_bulk2(UserId, TragetName, NonRep, MaxRep, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8865184">sync_get_bulk2(UserId, TragetName, NonRep, MaxRep, Oids, SendOpts) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NonRep = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxRep = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = [oid()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendOpts = send_opts()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_opts() = [send_opt()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpReply = snmp_reply()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Remaining = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {send_failed, ReqId, ActualReason} | {invalid_sec_info, SecInfo, SnmpInfo} | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ActualReason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecInfo = [sec_info()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">sec_info() = {sec_tag(), ExpectedValue, ReceivedValue}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">sec_tag() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExpectedValue = ReceivedValue = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpInfo = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Synchronous <fo:inline font-family="monospace">get-bulk-request</fo:inline> (See RFC1905).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Remaining</fo:inline> is the remaining time of the given (or default) 
	timeout time.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-weight="bold">Reason</fo:inline> is <fo:inline font-weight="bold">{send_failed, ...}</fo:inline> it means that
	the net_if process failed to send the message. This could happen
	because of any number of reasons, i.e. encoding error. 
	<fo:inline font-weight="bold">ActualReason</fo:inline> is the actual reason in this case. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The send option <fo:inline font-family="monospace">extra</fo:inline> specifies an opaque data structure 
	passed on to the net-if process. The net-if process included in this
	application makes, with one exception, no use of this info, 
	so the only use for it in such a option (when using the built in 
	net-if) would be tracing. The one usage exception is: 
	<fo:inline font-weight="bold">Any</fo:inline> tuple with <fo:inline font-family="monospace">snmpm_extra_info_tag</fo:inline> as its first 
	element is reserved for internal use. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some of the send options (<fo:inline font-family="monospace">community</fo:inline>, <fo:inline font-family="monospace">sec_model</fo:inline>, 
	<fo:inline font-family="monospace">sec_name</fo:inline>, <fo:inline font-family="monospace">sec_level</fo:inline> and <fo:inline font-family="monospace">max_message_size</fo:inline>) 
	are <fo:inline font-family="monospace">override options</fo:inline>. That is,
	for <fo:inline font-weight="bold">this</fo:inline> request, they override any configuration done 
	when the agent was registered. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">SnmpInfo</fo:inline>, see the user callback function 
	<fo:inline font-style="italic">handle_report</fo:inline>.</fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8887840">sync_get_bulk(UserId, TragetName, NonRep, MaxRep, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8888368">sync_get_bulk(UserId, TragetName, NonRep, MaxRep, ContextName, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8888912">sync_get_bulk(UserId, TragetName, NonRep, MaxRep, Oids, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8889456">sync_get_bulk(UserId, TragetName, NonRep, MaxRep, ContextName, Oids, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8890016">sync_get_bulk(UserId, TragetName, NonRep, MaxRep, ContextName, Oids, Timeout, ExtraInfo) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NonRep = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxRep = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ContextName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = [oid()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExtraInfo = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpReply = snmp_reply()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Remaining = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {send_failed, ReqId, R} | {invalid_sec_info, SecInfo, SnmpInfo} | term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Synchronous <fo:inline font-family="monospace">get-bulk-request</fo:inline> (See RFC1905).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Remaining</fo:inline> time of the given or default timeout time.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-weight="bold">Reason</fo:inline> is <fo:inline font-weight="bold">{send_failed, ...}</fo:inline> it means that
	the net_if process failed to send the message. This could happen
	because of any number of reasons, i.e. encoding error. <fo:inline font-weight="bold">R</fo:inline> 
	is the actual reason in this case. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ExtraInfo</fo:inline> is an opaque data structure passed on to
	the net-if process. The net-if process included in this
	application makes, with one exception, no use of this info, 
	so the only use for it in such a configuration (when using the 
	built in net-if) would be tracing. The one usage exception is: 
	<fo:inline font-weight="bold">Any</fo:inline> tuple with <fo:inline font-family="monospace">snmpm_extra_info_tag</fo:inline> as its first 
	element is reserved for internal use. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8903792">async_get_bulk2(UserId, TargetName, NonRep, MaxRep, Oids) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8904320">async_get_bulk2(UserId, TargetName, NonRep, MaxRep, Oids, SendOpts) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NonRep = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxRep = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = [oid()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendOpts = send_opts()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_opts() = [send_opt()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqId = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asynchronous <fo:inline font-family="monospace">get-bulk-request</fo:inline> (See RFC1905).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reply will be delivered to the user through a call
	to the snmpm_user callback function <fo:inline font-family="monospace">handle_pdu</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The send option <fo:inline font-family="monospace">timeout</fo:inline> specifies for how long the request is 
	valid (after which the manager is free to delete it).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The send option <fo:inline font-family="monospace">extra</fo:inline> specifies an opaque data structure 
	passed on to the net-if process. The net-if process included in this
	application makes no use of this info, so the only use for it
	in such a configuration (when using the built in net-if) would
	be tracing.</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some of the send options (<fo:inline font-family="monospace">community</fo:inline>, <fo:inline font-family="monospace">sec_model</fo:inline>, 
	<fo:inline font-family="monospace">sec_name</fo:inline>, <fo:inline font-family="monospace">sec_level</fo:inline> and <fo:inline font-family="monospace">max_message_size</fo:inline>) 
	are <fo:inline font-family="monospace">override options</fo:inline>. That is,
	for <fo:inline font-weight="bold">this</fo:inline> request, they override any configuration done 
	when the agent was registered. </fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8919840">async_get_bulk(UserId, TargetName, NonRep, MaxRep, Oids) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8920368">async_get_bulk(UserId, TargetName, NonRep, MaxRep, ContextName, Oids) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8920896">async_get_bulk(UserId, TargetName, NonRep, MaxRep, Oids, Expire) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8921424">async_get_bulk(UserId, TargetName, NonRep, MaxRep, ContextName, Oids, Expire) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8921968">async_get_bulk(UserId, TargetName, NonRep, MaxRep, ContextName, Oids, Expire, ExtraInfo) -&gt; {ok, ReqId} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NonRep = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxRep = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ContextName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = [oid()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Expire = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExtraInfo = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqId = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asynchronous <fo:inline font-family="monospace">get-bulk-request</fo:inline> (See RFC1905).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reply will be delivered to the user through a call
	to the snmpm_user callback function <fo:inline font-family="monospace">handle_pdu</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Expire</fo:inline> time indicates for how long the request is 
	valid (after which the manager is free to delete it).</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ExtraInfo</fo:inline> is an opaque data structure passed on to
	the net-if process. The net-if process included in this
	application makes, with one exception, no use of this info, 
	so the only use for it in such a configuration (when using the 
	built in net-if) would be tracing. The one usage exception is: 
	<fo:inline font-weight="bold">Any</fo:inline> tuple with <fo:inline font-family="monospace">snmpm_extra_info_tag</fo:inline> as its first 
	element is reserved for internal use. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8934448">cancel_async_request(UserId, ReqId) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Cancel a previous asynchronous request.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8939120">log_to_txt(LogDir)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8939568">log_to_txt(LogDir, Block | Mibs)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8940032">log_to_txt(LogDir, Mibs, Block | OutFile) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8940528">log_to_txt(LogDir, Mibs, OutFile, Block | LogName) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8941040">log_to_txt(LogDir, Mibs, OutFile, LogName, Block | LogFile) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8941552">log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Block | Start) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8942080">log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Block, Start)  -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8942608">log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Start, Stop)  -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8943136">log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Block, Start, Stop)  -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mibs = [MibName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Block = boolean()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OutFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Start = Stop = null | calendar:datetime() | {local_time, calendar:datetime()} | {universal_time, calendar:datetime()} </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = disk_log_open_error() | file_open_error() | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">disk_log_open_error() = {LogName, term()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">file_open_error() = {OutFile, term()}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts an Audit Trail Log to a readable text file. 
	<fo:inline font-family="monospace">OutFile</fo:inline> defaults to "./snmpm_log.txt". 
	<fo:inline font-family="monospace">LogName</fo:inline> defaults to "snmpm_log". 
	<fo:inline font-family="monospace">LogFile</fo:inline> defaults to "snmpm.log".</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Block</fo:inline> argument indicates if the log should be blocked
	during conversion. This could be usefull when converting large 
	logs (when otherwise the log could wrap during conversion). 
	Defaults to <fo:inline font-family="monospace">true</fo:inline>. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">snmp:log_to_txt</fo:inline> 
	for more info.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8955728">log_to_io(LogDir) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8956208">log_to_io(LogDir, Block | Mibs) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8956688">log_to_io(LogDir, Mibs) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8957168">log_to_io(LogDir, Mibs, Block | LogName) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8957664">log_to_io(LogDir, Mibs, LogName, Block | LogFile) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8958176">log_to_io(LogDir, Mibs, LogName, LogFile, Block | Start) -&gt;  ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8958688">log_to_io(LogDir, Mibs, LogName, LogFile, Block, Start)  -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8959200">log_to_io(LogDir, Mibs, LogName, LogFile, Start, Stop)  -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8959712">log_to_io(LogDir, Mibs, LogName, LogFile, Block, Start, Stop)  -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mibs = [MibName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Block = boolean()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Start = Stop = null | calendar:datetime() | {local_time, calendar:datetime()} | {universal_time, calendar:datetime()} </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = disk_log_open_error() | file_open_error() | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">disk_log_open_error() = {LogName, term()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">file_open_error() = {OutFile, term()}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts an Audit Trail Log to a readable format and 
	prints it on stdio. 
	<fo:inline font-family="monospace">LogName</fo:inline> defaults to "snmpm_log". 
	<fo:inline font-family="monospace">LogFile</fo:inline> defaults to "snmpm.log".</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Block</fo:inline> argument indicates if the log should be blocked
	during conversion. This could be usefull when converting large 
	logs (when otherwise the log could wrap during conversion). 
	Defaults to <fo:inline font-family="monospace">true</fo:inline>. </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">snmp:log_to_io</fo:inline> 
	for more info.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8971408">change_log_size(NewSize) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewSize = {MaxBytes, MaxFiles}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxBytes = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxFiles = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the log size of the Audit Trail Log. The application must 
          be configured to use the audit trail log function. Please refer to 
          disk_log(3) in Kernel Reference Manual for a description of how to 
          change the log size.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The change is permanent, as long as the log is not deleted. 
          That means, the log size is remembered across reboots.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8977328">set_log_type(NewType) -&gt; {ok, OldType} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewType = OldType = atl_type()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the run-time Audit Trail log type. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that this has no effect on the application configuration as
          defined by configuration files, so a node restart will revert the 
          config to whatever is in those files. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is primarily useful in testing/debugging 
          scenarios. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8982720">load_mib(Mib) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mib = MibName</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Load a <fo:inline font-family="monospace">Mib</fo:inline> into the manager. The <fo:inline font-family="monospace">MibName</fo:inline> is the 
          name of the Mib, including the path to where the compiled mib is 
          found.  For example,</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          Dir = code:priv_dir(my_app) ++ "/mibs/",
          snmpm:load_mib(Dir ++ "MY-MIB").
        </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8989136">unload_mib(Mib) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mib = MibName</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unload a <fo:inline font-family="monospace">Mib</fo:inline> from the manager. The <fo:inline font-family="monospace">MibName</fo:inline> is the 
          name of the Mib, including the path to where the compiled mib is 
          found.  For example,</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          Dir = code:priv_dir(my_app) ++ "/mibs/",
          snmpm:unload_mib(Dir ++ "MY-MIB").
        </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp8995568">which_mibs() -&gt; Mibs</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mibs = [{MibName, MibFile}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibFile = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get a list of all the mib's loaded into the manager.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9000224">name_to_oid(Name) -&gt; {ok, Oids} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = [oid()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Transform a alias-name to its oid.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that an alias-name is only unique within the mib, so
          when loading several mib's into a manager, there might be
          several instances of the same aliasname.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9005056">oid_to_name(Oid) -&gt; {ok, Name} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oid = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Transform a oid to its aliasname.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9009712">oid_to_type(Oid) -&gt; {ok, Type} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oid = oid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retreive the type (asn1 bertype) of an oid.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9014384">backup(BackupDir) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">BackupDir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Backup persistent data handled by the manager. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">BackupDir cannot be identical to DbDir. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9018624">info() -&gt; [{Key, Value}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list (a dictionary) containing information about
          the manager. Information includes statistics counters, 
          miscellaneous info about each process (e.g. memory allocation), 
          and so on.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9023008">verbosity(Ref, Verbosity) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ref = server | config | net_if | note_store | all</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Verbosity = verbosity()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">verbosity() = silence | info | log | debug | trace </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets verbosity for the designated process. For the lowest 
          verbosity <fo:inline font-family="monospace">silence</fo:inline>, nothing is printed. The higher the
          verbosity, the more is printed.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9028272">format_reason(Reason) -&gt; string()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9028736">format_reason(Prefix, Reason) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Prefix = integer() | string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This utility function is used to create a formatted 
          (pretty printable) string of the error reason received
          from either:
          </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Reason</fo:inline> returned value if any of the 
              sync/async get/get-next/set/get-bulk
              functions returns <fo:inline font-family="monospace">{error, Reason}</fo:inline></fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Reason</fo:inline> parameter in the 
              <fo:inline font-style="italic">handle_error</fo:inline> user callback function.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Prefix</fo:inline> should either be an indention string
          (e.g. a list of spaces) or a positive integer (which will be used
          to create the indention string of that length).</fo:block>
      </fo:block>
  

  
<fo:block page-break-before="always" id="idp9045104" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpm_conf</fo:marker>snmpm_conf</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpm_conf
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmpm_conf</fo:inline> contains various utility functions to 
      used for manipulating (write/append/read) the config files of the
      SNMP manager. </fo:block>
    
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9048640">manager_entry(Tag, Val) -&gt; manager_entry()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tag = address | port | engine_id | max_message_size</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">manager_entry() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create an entry for the manager config file, 
          <fo:inline font-family="monospace">manager.conf</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type of <fo:inline font-family="monospace">Val</fo:inline> depends on the value of <fo:inline font-family="monospace">Tag</fo:inline>, 
          see 
          <fo:inline font-style="italic">Manager Information</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9055952">write_manager_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9056416">write_manager_config(Dir, Hdr, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hdr = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [manager_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write the manager config to the manager config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hdr</fo:inline> is an optional file header (note that this text is
          written to the file as is). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Manager Information</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9063952">append_manager_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [manager_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Append the config to the current manager config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Manager Information</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9070208">read_manager_config(Dir) -&gt; Conf</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [manager_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read the current manager config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Manager Information</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9076448">users_entry(UserId) -&gt; users_entry()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9076912">users_entry(UserId, UserMod) -&gt; users_entry()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9077392">users_entry(UserId, UserMod, UserData) -&gt; users_entry()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserMod = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserData = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">standard_entry() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create an entry for the manager users config file, 
          <fo:inline font-family="monospace">users.conf</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">users_entry(UserId)</fo:inline> translates to the following call:
          <fo:inline font-family="monospace">users_entry(UserId, snmpm_user_default)</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">users_entry(UserId, UserMod)</fo:inline> translates to the following 
          call: <fo:inline font-family="monospace">users_entry(UserId, UserMod, undefined)</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Users</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9086656">write_users_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9087120">write_users_config(Dir, Hdr, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hdr = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [users_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write the manager users config to the manager users 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hdr</fo:inline> is an optional file header (note that this text is
          written to the file as is). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Users</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9094656">append_users_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [users_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Append the users config to the current manager users  
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Users</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9100912">read_users_config(Dir) -&gt; Conf</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [users_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read the current manager users config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Users</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9107136">agents_entry(UserId, TargetName, Comm, Domain, Addr, EngineID, Timeout, MaxMessageSize, Version, SecModel, SecName, SecLevel) -&gt; agents_entry()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Comm = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Domain = transportDomain()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = transportAddress()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EngineID = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxMessageSize = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Version = v1 | v2 | v3</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecModel = v1 | v2c | usm</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecLevel = noAuthNoPriv | authNoPriv | authPriv</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">agents_entry() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create an entry for the manager agents config file, 
          <fo:inline font-family="monospace">agents.conf</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Agents</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9118128">write_agents_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9118592">write_agents_config(Dir, Hdr, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hdr = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write the manager agents config to the manager agents 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hdr</fo:inline> is an optional file header (note that this text is
          written to the file as is). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Agents</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9126128">append_agents_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [agents_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Append the agents config to the current manager agents 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Agents</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9132384">read_agents_config(Dir) -&gt; Conf</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [agents_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read the current manager agents config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Agents</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9138608">usm_entry(EngineID, UserName, AuthP, AuthKey, PrivP, PrivKey) -&gt; usm_entry()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9139120">usm_entry(EngineID, UserName, SecName, AuthP, AuthKey, PrivP, PrivKey) -&gt; usm_entry()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EngineID = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AuthP = usmNoAuthProtocol | usmHMACMD5AuthProtocol | usmHMACSHAAuthProtocol</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AuthKey = [integer()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PrivP = usmNoPrivProtocol | usmDESPrivProtocol | usmAesCfb128Protocol</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PrivKey = [integer()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">usm_entry() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create an entry for the agent community config file, 
          <fo:inline font-family="monospace">community.conf</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Security data for USM</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9147824">write_usm_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9148288">write_usm_config(Dir, Hdr, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hdr = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [usm_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write the manager usm config to the manager usm 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hdr</fo:inline> is an optional file header (note that this text is
          written to the file as is). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Security data for USM</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9155808">append_usm_config(Dir, Conf) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [usm_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Append the usm config to the current manager usm 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Security data for USM</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9162064">read_usm_config(Dir) -&gt; Conf</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conf = [usm_entry()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read the current manager usm config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is the path to the directory where to store the 
          config file. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
          <fo:inline font-style="italic">Security data for USM</fo:inline> 
          for more info. </fo:block>
        
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp9175440" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpm_mpd</fo:marker>snmpm_mpd</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpm_mpd
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">snmpm_mpd</fo:inline> implements the version independent
      Message Processing and Dispatch functionality in SNMP for the manager. 
      It is supposed to be used from a Network Interface process 
      (<fo:inline font-style="italic">Definition of Manager Net if</fo:inline>).
      </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Legacy API function <fo:inline font-family="monospace">process_msg/7</fo:inline> that has got separate
      <fo:inline font-family="monospace">IpAddr</fo:inline> and <fo:inline font-family="monospace">PortNumber</fo:inline> arguments still works as before
      for backwards compatibility reasons.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9181088">init_mpd(Vsns) -&gt; mpd_state()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Vsns = [Vsn]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Vsn = v1 | v2 | v3</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called from the net_if process at start-up.
          The options list defines which versions to use.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It also initializes some SNMP counters.
                    
</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9185872">process_msg(Msg, Domain, Addr, State, NoteStore, Logger) -&gt; {ok, Vsn, Pdu, PduMS, MsgData} | {discarded, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Msg = binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Domain = transportDomainUdpIpv4 | transportDomainUdpIpv6</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = {<fo:inline font-style="italic">inet:ip_address(), inet:port_number()</fo:inline>} </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = mpd_state()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NoteStore = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Logger = function()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Vsn = 'version-1' | 'version-2' | 'version-3'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pdu = #pdu</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PduMs = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MsgData = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Processes an incoming message. Performs authentication and 
          decryption as necessary. The return values should be passed the
          manager server.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NoteStore</fo:inline> is the <fo:inline font-family="monospace">pid()</fo:inline> of the note-store process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Logger</fo:inline> is the function used for audit trail logging.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the case when the pdu type is <fo:inline font-family="monospace">report</fo:inline>, <fo:inline font-family="monospace">MsgData</fo:inline> is 
          either <fo:inline font-family="monospace">ok</fo:inline> or <fo:inline font-family="monospace">{error, ReqId, Reason}</fo:inline>.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9198400">generate_msg(Vsn, NoteStore, Pdu, MsgData, Logger) -&gt; {ok, Packet} | {discarded, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Vsn = 'version-1' | 'version-2' | 'version-3'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NoteStore = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pdu = #pdu</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MsgData = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Logger = function()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Packet = binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generates a possibly encrypted packet to be sent to the network.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NoteStore</fo:inline> is the <fo:inline font-family="monospace">pid()</fo:inline> of the note-store process.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">MsgData</fo:inline> is the message specific data used in the SNMP 
          message. In SNMPv1 and SNMPv2c, this message data is the community 
          string. In SNMPv3, it is the context information.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Logger</fo:inline> is the function used for audit trail logging.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9207328">generate_response_msg(Vsn, Pdu, MsgData, Logger) -&gt; {ok, Packet} | {discarded, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Vsn = 'version-1' | 'version-2' | 'version-3'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pdu = #pdu</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MsgData = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Logger = function()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Packet = binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generates a possibly encrypted response packet to be sent to the
          network.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">MsgData</fo:inline> is the message specific data used in the SNMP 
          message. This value is received from the 
          <fo:inline font-style="italic">process_msg</fo:inline> 
          function.
          </fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp9221664" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpm_network_interface</fo:marker>snmpm_network_interface</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpm_network_interface
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module defines the behaviour of the manager network
      interface. A <fo:inline font-family="monospace">snmpm_network_interface</fo:inline> compliant module 
      must export the following functions: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">start_link/2</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">stop/1</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">send_pdu/7</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">inform_response/4</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">note_store/2</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">info/1</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">get_log_type/1</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">set_log_type/2</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">verbosity/2</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of them and their exact signatures are explained
      below. </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Legacy API function <fo:inline font-family="monospace">send_pdu/7</fo:inline> that has got separate
      <fo:inline font-family="monospace">IpAddr</fo:inline> and <fo:inline font-family="monospace">PortNumber</fo:inline> arguments still works as before
      for backwards compatibility reasons.</fo:block>

    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9239968">start_link(Server, NoteStore) -&gt; {ok, Pid} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Server    = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NoteStore = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start-link the network interface process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Server</fo:inline> is the pid of the managing process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NoteStore</fo:inline> is the pid of the note-store process.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9245728">stop(Pid) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stop the network interface process.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9249456">send_pdu(Pid, Pdu, Vsn, MsgData, Domain, Addr, ExtraInfo) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pdu = pdu()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Vsn = 'version-1' | 'version-2' | 'version-3'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MsgData = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Domain = transportDomainUdpIpv4 | transportDomainUdpIpv6</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = {<fo:inline font-style="italic">inet:ip_address(), inet:port_number()</fo:inline>} </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExtraInfo = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Request the network interface process (<fo:inline font-family="monospace">Pid</fo:inline>) to send
          this pdu (<fo:inline font-family="monospace">Pdu</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ExtraInfo</fo:inline> is some opaque data that is passed to the
          net-if process. It originates from the <fo:inline font-family="monospace">ExtraInfo</fo:inline>
          parameter in the calls to the 
          <fo:inline font-style="italic">synchronous get-request</fo:inline>, 
          <fo:inline font-style="italic">asynchronous get-request</fo:inline>,
          <fo:inline font-style="italic">synchronous get-next-request</fo:inline>, 
          <fo:inline font-style="italic">asynchronous get-next-request</fo:inline>,
          <fo:inline font-style="italic">synchronous set-request</fo:inline>
          and 
          <fo:inline font-style="italic">asynchronous set-request</fo:inline>
          functions. 
          Whether the net-if process chooses
          to use this is implementation dependent. The net-if process
          included in this application ignores it. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9263552">inform_response(Pid, Ref, Addr, Port) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ref = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = address()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Instruct the network interface process to send the response
          (acknowledgment) to an inform-request.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Ref</fo:inline> is something that can be used to identify the 
          inform-request, e.g. request-id of the inform-request.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Addr</fo:inline> and <fo:inline font-family="monospace">Port</fo:inline> identifies the agent, from 
          which the inform-request originated.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9270816">note_store(Pid, NoteStore) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid       = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NoteStore = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Change the pid of the note-store process.
          This is used when the server re-starts the note_store 
          (e.g. after a crach).</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9275136">info(Pid) -&gt; [{Key, Value}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The info returned is basically up to the implementer to decide. 
          The implementation provided by this application provides info about 
          memory allocation and various socket information.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The info returned by this function is returned together with other
          info collected by the manager when the
          <fo:inline font-style="italic">info</fo:inline> function is called 
          (tagged with the key <fo:inline font-family="monospace">net_if</fo:inline>).</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9280848">verbosity(Pid, Verbosity) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid       = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Verbosity = verbosity()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Change the verbosity of the network interface process.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9285072">get_log_type(Pid) -&gt; {ok, LogType} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid     = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogType = atl_type()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason  = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Audit Trail Log is managed by the network interface process.
          So, it is this process that has to return the actual log-type. </fo:block>


        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9290256">set_log_type(Pid, NewType) -&gt; {ok, OldType} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid     = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewType = OldType = atl_type()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason  = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Audit Trail Log is managed by the network interface process.
          So, it is this process that has to do the actual changing of the
          type. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See
          <fo:inline font-style="italic">set_log_type</fo:inline>
          for more info. </fo:block>
      </fo:block>

  

  
<fo:block page-break-before="always" id="idp9302848" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpm_user</fo:marker>snmpm_user</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpm_user
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module defines the behaviour of the manager user. 
      A <fo:inline font-family="monospace">snmpm_user</fo:inline> compliant module 
      must export the following functions: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">handle_error/3</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">handle_agent/4</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">handle_pdu/4</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">handle_trap/3</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">handle_inform/3</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">handle_report/3</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">handle_invalid_result/2</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of them and their exact signatures are explained
    below. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some of the function has no defined return value (<fo:inline font-family="monospace">void()</fo:inline>), 
    they can of course return anything. But the functions that do have
    specified return value(s) <fo:inline font-weight="bold">must</fo:inline> adhere to this. None of the 
    functions can use exit of throw to return. </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the manager is not configured to use any particular
    transport domain, the behaviour <fo:inline font-family="monospace">handle_agent/4</fo:inline>
    will for backwards copmpatibility reasons be called with the old
    <fo:inline font-family="monospace">IpAddr</fo:inline> and <fo:inline font-family="monospace">PortNumber</fo:inline> arguments</fo:block>

    
  

  <fo:block id="idp9317040" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
snmp_gen_info() = {ErrorStatus :: atom(), 
                   ErrorIndex  :: pos_integer(), 
                   Varbinds    :: [snmp:varbind()]}
snmp_v1_trap_info() :: {Enteprise :: snmp:oid(), 
                        Generic   :: integer(), 
                        Spec      :: integer(), 
                        Timestamp :: integer(), 
                        Varbinds  :: [snmp:varbind()]}
    </fo:block>
    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9319888">handle_error(ReqId, Reason, UserData) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqId = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {unexpected_pdu, SnmpInfo} | {invalid_sec_info, SecInfo, SnmpInfo} | {empty_message, Addr, Port} | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpInfo = snmp_gen_info()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SecInfo = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = ip_address()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserData = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called when the manager needs to
	communicate an "asynchronous" error to the user:
	e.g. failure to send an asynchronous message (i.e. encoding
	error), a received message was discarded due to security
	error, the manager failed to generate a response message to
	a received inform-request, or when receiving an unexpected
	PDU from an agent (could be an expired async request). </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">ReqId</fo:inline> is less then 0, it means that this
	information was not available to the manager (that info was
	never retrieved before the message was discarded). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">SnmpInfo</fo:inline> see handle_agent below.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9328736">handle_agent(Domain, Addr, Type, SnmpInfo, UserData) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Domain = transportDomainUdpIpv4 | transportDomainUdpIpv6</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = {<fo:inline font-style="italic">inet:ip_address(), inet:port_number()</fo:inline>} </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = pdu | trap | report | inform</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpInfo = SnmpPduInfo | SnmpTrapInfo | SnmpReportInfo | SnmpInformInfo</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpPduInfo = snmp_gen_info()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpTrapInfo = snmp_v1_trap_info()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpReportInfo = snmp_gen_info()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpInformInfo = snmp_gen_info()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserData = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = ignore | {register, UserId, TargetName, AgentConfig}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AgentConfig = [agent_config()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called when a message is received from an 
	unknown agent.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that this will always be the default user that is called.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more info about the <fo:inline font-family="monospace">agent_config()</fo:inline>, see 
	<fo:inline font-style="italic">register_agent</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The arguments <fo:inline font-family="monospace">Type</fo:inline> and <fo:inline font-family="monospace">SnmpInfo</fo:inline> relates in the 
          following way: </fo:block>

	  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">pdu</fo:inline> - <fo:inline font-family="monospace">SnmpPduInfo</fo:inline> 
                (see <fo:inline font-style="italic">handle_pdu</fo:inline>
                for more info).</fo:block>
	    </fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">trap</fo:inline> - <fo:inline font-family="monospace">SnmpTrapInfo</fo:inline> 
                (see <fo:inline font-style="italic">handle_trap</fo:inline>
                for more info).</fo:block>
	    </fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">report</fo:inline> - <fo:inline font-family="monospace">SnmpReportInfo</fo:inline> 
                (see <fo:inline font-style="italic">handle_report</fo:inline>
                for more info).</fo:block>
	    </fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">inform</fo:inline> - <fo:inline font-family="monospace">SnmpInformInfo</fo:inline> 
                (see <fo:inline font-style="italic">handle_inform</fo:inline>
                for more info).</fo:block>
	    </fo:block></fo:list-item-body></fo:list-item>
	  </fo:list-block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The only user which would return 
          <fo:inline font-family="monospace">{register, UserId, TargetName, AgentConfig}</fo:inline> is the 
          <fo:inline font-weight="bold">default user</fo:inline>.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9354032">handle_pdu(TargetName, ReqId, SnmpPduInfo, UserData) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpPduInfo = snmp_gen_info()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserData = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handle the reply to an asynchronous request, such as 
          <fo:inline font-style="italic">async_get</fo:inline>, 
          <fo:inline font-style="italic">async_get_next</fo:inline> or 
          <fo:inline font-style="italic">async_set</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It could also be a late reply to a synchronous request.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ReqId</fo:inline> is returned by the asynchronous request function.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9362640">handle_trap(TargetName, SnmpTrapInfo, UserData) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = TargetName2 = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpTrapInfo = snmp_v1_trap_info() | snmp_gen_info()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserData = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = ignore | unregister | {register, UserId, TargetName2, AgentConfig}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AgentConfig = [agent_config()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handle a trap/notification message from an agent.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more info about the <fo:inline font-family="monospace">agent_config()</fo:inline>, see 
	<fo:inline font-style="italic">register_agent</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The only user which would return 
	<fo:inline font-family="monospace">{register, UserId, TargetName2, agent_info()}</fo:inline> is the 
	<fo:inline font-weight="bold">default user</fo:inline>.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9371680">handle_inform(TargetName, SnmpInformInfo, UserData) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = TargetName2 = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpInformInfo = snmp_gen_info()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserData = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = ignore | no_reply | unregister | {register, UserId, TargetName2, AgentConfig}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AgentConfig = [agent_config()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handle a inform message.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more info about the <fo:inline font-family="monospace">agent_config()</fo:inline>, see 
	<fo:inline font-style="italic">register_agent</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The only user which would return 
	<fo:inline font-family="monospace">{register, UserId, TargetName2, AgentConfig}</fo:inline> is the 
	<fo:inline font-weight="bold">default user</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the 
	<fo:inline font-style="italic">inform request behaviour</fo:inline> 
	configuration option is set to <fo:inline font-family="monospace">user</fo:inline> or 
	<fo:inline font-family="monospace">{user, integer()}</fo:inline>, the response (acknowledgment) to this 
	inform-request will be sent when this function returns.</fo:block>
	
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9382848">handle_report(TargetName, SnmpReportInfo, UserData) -&gt; Reply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = TargetName2 = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = ip_address()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpReportInfo = snmp_gen_info()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserData = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = ignore | unregister | {register, UserId, TargetName2, AgentConfig}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserId = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AgentConfig = [agent_config()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handle a report message.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more info about the <fo:inline font-family="monospace">agent_config()</fo:inline>, see 
	<fo:inline font-style="italic">register_agent</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The only user which would return 
	<fo:inline font-family="monospace">{register, UserId, TargetName2, AgentConfig}</fo:inline> is the 
	<fo:inline font-weight="bold">default user</fo:inline>.</fo:block>
	
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9392736">handle_invalid_result(IN, OUT) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IN = {Func, Args}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Func = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OUT = {crash, CrashInfo} | {result, InvalidResult}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CrashInfo = {ErrorType, Error, Stacktrace}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ErrorType = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Stacktrace = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InvalidResult = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-weight="bold">any</fo:inline> of the <fo:inline font-weight="bold">other</fo:inline> callback functions crashes 
	(exit, throw or a plain crash) or return an invalid result (if a valid 
	return has been specified), this function is called. 
	The purpose is to allow the user handle this 
	error (for instance to issue an error report).</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">IN</fo:inline> reprecents the function called (and its arguments). 
	<fo:inline font-family="monospace">OUT</fo:inline> represents the unexpected/invalid result. </fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp9409136" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">snmpm_network_interface_filter</fo:marker>snmpm_network_interface_filter</fo:block>Erlang module</fo:block>
  <fo:block/>
  snmpm_network_interface_filter
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module defines the behaviour of the manager network interface
      filter. A <fo:inline font-family="monospace">snmpm_network_interface_filter</fo:inline> compliant module 
      must export the following functions: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">accept_recv/2</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">accept_send/2</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">accept_recv_pdu/3</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">accept_send_pdu/2</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of them and their exact signatures are explained
      below. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The purpose of the network interface filter is to allow for filtering
      of messages (accept or reject) receive and send. This is done 
      on two levels: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first level is at the UDP entry / exit point, i.e. 
          immediately after the receipt of the message, before any message 
          processing is done (accept_recv) and 
          immediately before sending the message, after all message 
          processing is done (accept_send).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second level is at the MPD entry / exit point, i.e.
          immediately after the basic message processing (accept_recv_pdu) / 
          immediately before the basic message processing (accept_send_pdu).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the network interface filter is something which is used 
      by the network interface implementation provided by the application 
    (<fo:inline font-family="monospace">snmpm_net_if</fo:inline> and <fo:inline font-family="monospace">snmpm_net_if_mt</fo:inline>). 
    The default filter accepts all messages.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A network interface filter can e.g. be used during testing or for load 
    regulation. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Legacy network interface filter modules used arguments on the form
      <fo:inline font-family="monospace">(IpAddr, PortNumber,...)</fo:inline> instead of
      <fo:inline font-family="monospace">(Domain, Addr, ...)</fo:inline>, and if the SNMP manager is run without
      changing the configuration to use transport domains
      the network interface filter will still get
      the old arguments and work as before.</fo:block>
  

  <fo:block id="idp9425472" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
port() = integer() &gt; 0
pdu_type() = 'get-request' | 'get-next-request' | 'get-response' | 
             'set-request' | trap | 'get-bulk-request' | 'inform-request' | 
             report | trappdu
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also the <fo:inline font-style="italic">
    data types in <fo:inline font-family="monospace">snmpa_conf</fo:inline></fo:inline>.</fo:block>
    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9429584">accept_recv(Domain, Addr) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Domain = transportDomain()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = transportAddressWithPort()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called at the reception of a message (before <fo:inline font-weight="bold">any</fo:inline> processing 
          has been done).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the message to be rejected, the function <fo:inline font-weight="bold">must</fo:inline> return
          <fo:inline font-weight="bold">false</fo:inline>. </fo:block>
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9435664">accept_send(Domain, Addr) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Domain = transportDomain()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = transportAddressWithPort()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called before the sending of a message (after <fo:inline font-weight="bold">all</fo:inline> processing 
          has been done).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the message to be rejected, the function <fo:inline font-weight="bold">must</fo:inline> return
          <fo:inline font-weight="bold">false</fo:inline>. </fo:block>
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9441744">accept_recv_pdu(Domain, Addr, PduType) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Domain = transportDomain()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = transportAddressWithPort()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PduType = pdu_type()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called after the basic message processing (MPD) has been done, 
          but before the pdu is handed over to the server for primary 
          processing.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the pdu to be rejected, the function <fo:inline font-weight="bold">must</fo:inline> return
          <fo:inline font-weight="bold">false</fo:inline>. </fo:block>
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp9447936">accept_send_pdu(Domain, Addr, PduType) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Domain = transportDomain()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Addr = transportAddressWithPort()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PduType = pdu_type() &gt; 0</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called before the basic message processing (MPD) is done, 
          when a pdu has been received from the master-agent.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the message to be rejected, the function <fo:inline font-weight="bold">must</fo:inline> return 
          <fo:inline font-weight="bold">false</fo:inline>. </fo:block>
      </fo:block>
  
  
</fo:flow>
  </fo:page-sequence>
</fo:root>
