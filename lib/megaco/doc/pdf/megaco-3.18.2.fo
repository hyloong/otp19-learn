<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>Megaco/H.248</fo:bookmark-title>
      <fo:bookmark internal-destination="idp765920" starting-state="hide">
        <fo:bookmark-title>Megaco/H.248 Users Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp761488" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp744720" starting-state="hide">
            <fo:bookmark-title>Scope and Purpose</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp743344" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp738352" starting-state="hide">
            <fo:bookmark-title>About This Manual</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp861568" starting-state="hide">
            <fo:bookmark-title>Where to Find More Information</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp783984" starting-state="hide">
          <fo:bookmark-title>Architecture</fo:bookmark-title>
          <fo:bookmark internal-destination="idp575440" starting-state="hide">
            <fo:bookmark-title>Network view</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp952352" starting-state="hide">
            <fo:bookmark-title>General</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp543856" starting-state="hide">
            <fo:bookmark-title>Single node config</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp536336" starting-state="hide">
            <fo:bookmark-title>Distributed config</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp596288" starting-state="hide">
            <fo:bookmark-title>Message round-trip call flow</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp557888" starting-state="hide">
          <fo:bookmark-title>Running the stack</fo:bookmark-title>
          <fo:bookmark internal-destination="idp485968" starting-state="hide">
            <fo:bookmark-title>Starting</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idm25984" starting-state="hide">
            <fo:bookmark-title>MGC startup call flow</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp451392" starting-state="hide">
            <fo:bookmark-title>MG startup call flow</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp932112" starting-state="hide">
            <fo:bookmark-title>Configuring the Megaco stack</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp494880" starting-state="hide">
            <fo:bookmark-title>Initial configuration</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp724592" starting-state="hide">
            <fo:bookmark-title>Changing the configuration</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp727760" starting-state="hide">
            <fo:bookmark-title>The transaction sender</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp897920" starting-state="hide">
            <fo:bookmark-title>Segmentation of transaction replies</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp914272" starting-state="hide">
          <fo:bookmark-title>Internal form and its encodings</fo:bookmark-title>
          <fo:bookmark internal-destination="idp922448" starting-state="hide">
            <fo:bookmark-title>Internal form of messages</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1068096" starting-state="hide">
            <fo:bookmark-title>The different encodings</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1083664" starting-state="hide">
            <fo:bookmark-title>Configuration of Erlang distribution encoding module</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1093312" starting-state="hide">
            <fo:bookmark-title>Configuration of text encoding module(s)</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1119264" starting-state="hide">
            <fo:bookmark-title>Configuration of binary encoding module(s)</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1127184" starting-state="hide">
            <fo:bookmark-title>Handling megaco versions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1156976" starting-state="hide">
            <fo:bookmark-title>Encoder callback functions</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1163472" starting-state="hide">
          <fo:bookmark-title>Transport mechanisms</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1167648" starting-state="hide">
            <fo:bookmark-title>Callback interface</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1175968" starting-state="hide">
            <fo:bookmark-title>Examples</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1182816" starting-state="hide">
          <fo:bookmark-title>Implementation examples</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1186976" starting-state="hide">
            <fo:bookmark-title>A simple Media Gateway Controller</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1192736" starting-state="hide">
            <fo:bookmark-title>A simple Media Gateway</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1203040" starting-state="hide">
          <fo:bookmark-title>Megaco mib</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1207200" starting-state="hide">
            <fo:bookmark-title>Intro</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1210224" starting-state="hide">
            <fo:bookmark-title>Statistics counters</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1214544" starting-state="hide">
            <fo:bookmark-title>Distribution</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1220048" starting-state="hide">
          <fo:bookmark-title>Performance comparison</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1224208" starting-state="hide">
            <fo:bookmark-title>Comparison of encoder/decoders</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1323984" starting-state="hide">
            <fo:bookmark-title>System performance characteristics</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1328432" starting-state="hide">
            <fo:bookmark-title>Description of encoders/decoders</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1341600" starting-state="hide">
            <fo:bookmark-title>Setup</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1343200" starting-state="hide">
            <fo:bookmark-title>Summary</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1354800" starting-state="hide">
          <fo:bookmark-title>Testing and tools</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1358960" starting-state="hide">
            <fo:bookmark-title>Tracing</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1364336" starting-state="hide">
            <fo:bookmark-title>Measurement and transformation</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1366144" starting-state="hide">
              <fo:bookmark-title>Requirement</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1372352" starting-state="hide">
              <fo:bookmark-title>Meas results</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1378160" starting-state="hide">
              <fo:bookmark-title>Instruction</fo:bookmark-title>
              <fo:bookmark internal-destination="idp1383728" starting-state="hide">
                <fo:bookmark-title>Message Transformation</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp1386000" starting-state="hide">
                <fo:bookmark-title>Measurement(s)</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp1402032" starting-state="hide">
                <fo:bookmark-title>Message package file</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1408848" starting-state="hide">
              <fo:bookmark-title>Notes</fo:bookmark-title>
              <fo:bookmark internal-destination="idp1409584" starting-state="hide">
                <fo:bookmark-title>Binary codecs</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp1413264" starting-state="hide">
                <fo:bookmark-title>Included test messages</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp1414768" starting-state="hide">
                <fo:bookmark-title>Measurement tool directory name</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp114144" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp795888" starting-state="hide">
          <fo:bookmark-title>megaco</fo:bookmark-title>
          <fo:bookmark internal-destination="idp634160" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1534704" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1535616" starting-state="hide">
            <fo:bookmark-title>start_user/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1531120" starting-state="hide">
            <fo:bookmark-title>stop_user/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp852560" starting-state="hide">
            <fo:bookmark-title>user_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp853024" starting-state="hide">
            <fo:bookmark-title>user_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp335760" starting-state="hide">
            <fo:bookmark-title>update_user_info/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp341456" starting-state="hide">
            <fo:bookmark-title>conn_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp341936" starting-state="hide">
            <fo:bookmark-title>conn_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2626224" starting-state="hide">
            <fo:bookmark-title>update_conn_info/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2631984" starting-state="hide">
            <fo:bookmark-title>system_info/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2632464" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2646544" starting-state="hide">
            <fo:bookmark-title>info/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2654176" starting-state="hide">
            <fo:bookmark-title>connect/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2654704" starting-state="hide">
            <fo:bookmark-title>connect/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2685920" starting-state="hide">
            <fo:bookmark-title>disconnect/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2691536" starting-state="hide">
            <fo:bookmark-title>call/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2731440" starting-state="hide">
            <fo:bookmark-title>cast/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2745408" starting-state="hide">
            <fo:bookmark-title>encode_actions/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2754592" starting-state="hide">
            <fo:bookmark-title>token_tag2string/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2755056" starting-state="hide">
            <fo:bookmark-title>token_tag2string/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2755536" starting-state="hide">
            <fo:bookmark-title>token_tag2string/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2765904" starting-state="hide">
            <fo:bookmark-title>cancel/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2771360" starting-state="hide">
            <fo:bookmark-title>process_received_message/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2771872" starting-state="hide">
            <fo:bookmark-title>process_received_message/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2799024" starting-state="hide">
            <fo:bookmark-title>receive_message/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2799520" starting-state="hide">
            <fo:bookmark-title>receive_message/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2808448" starting-state="hide">
            <fo:bookmark-title>parse_digit_map/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2814192" starting-state="hide">
            <fo:bookmark-title>eval_digit_map/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2814688" starting-state="hide">
            <fo:bookmark-title>eval_digit_map/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2826192" starting-state="hide">
            <fo:bookmark-title>report_digit_event/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2836176" starting-state="hide">
            <fo:bookmark-title>test_digit_event/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2848768" starting-state="hide">
            <fo:bookmark-title>encode_sdp/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2858912" starting-state="hide">
            <fo:bookmark-title>decode_sdp/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2871360" starting-state="hide">
            <fo:bookmark-title>get_sdp_record_from_PropertGroup/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2877584" starting-state="hide">
            <fo:bookmark-title>versions1/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2878064" starting-state="hide">
            <fo:bookmark-title>versions2/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2884704" starting-state="hide">
            <fo:bookmark-title>print_version_info/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2885168" starting-state="hide">
            <fo:bookmark-title>print_version_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2892288" starting-state="hide">
            <fo:bookmark-title>enable_trace/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2905808" starting-state="hide">
            <fo:bookmark-title>disable_trace/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2908656" starting-state="hide">
            <fo:bookmark-title>set_trace/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2913952" starting-state="hide">
            <fo:bookmark-title>get_stats/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2914432" starting-state="hide">
            <fo:bookmark-title>get_stats/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2914928" starting-state="hide">
            <fo:bookmark-title>get_stats/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2915424" starting-state="hide">
            <fo:bookmark-title>get_stats/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2924000" starting-state="hide">
            <fo:bookmark-title>reset_stats/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2924448" starting-state="hide">
            <fo:bookmark-title>reset_stats/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2928048" starting-state="hide">
            <fo:bookmark-title>test_request/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2938672" starting-state="hide">
            <fo:bookmark-title>test_reply/5</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2957248" starting-state="hide">
          <fo:bookmark-title>megaco_edist_compress</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2960128" starting-state="hide">
            <fo:bookmark-title>Module:encode/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2964384" starting-state="hide">
            <fo:bookmark-title>Module:decode/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2976496" starting-state="hide">
          <fo:bookmark-title>megaco_encoder</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2982256" starting-state="hide">
            <fo:bookmark-title>Module:encode_message/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2987856" starting-state="hide">
            <fo:bookmark-title>Module:decode_message/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2994992" starting-state="hide">
            <fo:bookmark-title>Module:decode_mini_message/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3002800" starting-state="hide">
            <fo:bookmark-title>Module:encode_transaction/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3011360" starting-state="hide">
            <fo:bookmark-title>Module:encode_action_requests/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3020176" starting-state="hide">
            <fo:bookmark-title>Module:encode_action_reply/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3036064" starting-state="hide">
          <fo:bookmark-title>megaco_transport</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3046384" starting-state="hide">
            <fo:bookmark-title>Module:send_message/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3046880" starting-state="hide">
            <fo:bookmark-title>Module:send_message/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3061248" starting-state="hide">
            <fo:bookmark-title>Module:resend_message/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3082896" starting-state="hide">
          <fo:bookmark-title>megaco_tcp</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3085408" starting-state="hide">
            <fo:bookmark-title>start_transport/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3088528" starting-state="hide">
            <fo:bookmark-title>listen/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3092640" starting-state="hide">
            <fo:bookmark-title>connect/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3100624" starting-state="hide">
            <fo:bookmark-title>close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3103664" starting-state="hide">
            <fo:bookmark-title>socket/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3107264" starting-state="hide">
            <fo:bookmark-title>send_message/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3110752" starting-state="hide">
            <fo:bookmark-title>block/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3113776" starting-state="hide">
            <fo:bookmark-title>unblock/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3117376" starting-state="hide">
            <fo:bookmark-title>upgrade_receive_handle/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3121040" starting-state="hide">
            <fo:bookmark-title>get_stats/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3121520" starting-state="hide">
            <fo:bookmark-title>get_stats/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3122016" starting-state="hide">
            <fo:bookmark-title>get_stats/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3128944" starting-state="hide">
            <fo:bookmark-title>reset_stats/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3129392" starting-state="hide">
            <fo:bookmark-title>reset_stats/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3140384" starting-state="hide">
          <fo:bookmark-title>megaco_udp</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3142896" starting-state="hide">
            <fo:bookmark-title>start_transport/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3146016" starting-state="hide">
            <fo:bookmark-title>open/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3154432" starting-state="hide">
            <fo:bookmark-title>close/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3157920" starting-state="hide">
            <fo:bookmark-title>socket/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3161520" starting-state="hide">
            <fo:bookmark-title>create_send_handle/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3165568" starting-state="hide">
            <fo:bookmark-title>send_message/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3169792" starting-state="hide">
            <fo:bookmark-title>block/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3172816" starting-state="hide">
            <fo:bookmark-title>unblock/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3176416" starting-state="hide">
            <fo:bookmark-title>upgrade_receive_handle/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3181008" starting-state="hide">
            <fo:bookmark-title>get_stats/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3181488" starting-state="hide">
            <fo:bookmark-title>get_stats/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3181984" starting-state="hide">
            <fo:bookmark-title>get_stats/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3188912" starting-state="hide">
            <fo:bookmark-title>reset_stats/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3189360" starting-state="hide">
            <fo:bookmark-title>reset_stats/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3200352" starting-state="hide">
          <fo:bookmark-title>megaco_user</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3240880" starting-state="hide">
            <fo:bookmark-title>handle_connect/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3241392" starting-state="hide">
            <fo:bookmark-title>handle_connect/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3254496" starting-state="hide">
            <fo:bookmark-title>handle_disconnect/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3259824" starting-state="hide">
            <fo:bookmark-title>handle_syntax_error/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3260368" starting-state="hide">
            <fo:bookmark-title>handle_syntax_error/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3273376" starting-state="hide">
            <fo:bookmark-title>handle_message_error/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3273872" starting-state="hide">
            <fo:bookmark-title>handle_message_error/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3284288" starting-state="hide">
            <fo:bookmark-title>handle_trans_request/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3284832" starting-state="hide">
            <fo:bookmark-title>handle_trans_request/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3316048" starting-state="hide">
            <fo:bookmark-title>handle_trans_long_request/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3316560" starting-state="hide">
            <fo:bookmark-title>handle_trans_long_request/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3330048" starting-state="hide">
            <fo:bookmark-title>handle_trans_reply/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3330560" starting-state="hide">
            <fo:bookmark-title>handle_trans_reply/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3378016" starting-state="hide">
            <fo:bookmark-title>handle_trans_ack/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3378512" starting-state="hide">
            <fo:bookmark-title>handle_trans_ack/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3400064" starting-state="hide">
            <fo:bookmark-title>handle_unexpected_trans/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3400560" starting-state="hide">
            <fo:bookmark-title>handle_unexpected_trans/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3408784" starting-state="hide">
            <fo:bookmark-title>handle_trans_request_abort/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3409296" starting-state="hide">
            <fo:bookmark-title>handle_trans_request_abort/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3417712" starting-state="hide">
            <fo:bookmark-title>handle_segment_reply/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3418224" starting-state="hide">
            <fo:bookmark-title>handle_segment_reply/6</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3435136" starting-state="hide">
          <fo:bookmark-title>megaco_flex_scanner</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3443632" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3449392" starting-state="hide">
            <fo:bookmark-title>stop/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3453024" starting-state="hide">
            <fo:bookmark-title>is_reentrant_enabled/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3456592" starting-state="hide">
            <fo:bookmark-title>is_scanner_port/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3461152" starting-state="hide">
            <fo:bookmark-title>scan/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3474496" starting-state="hide">
          <fo:bookmark-title>megaco_codec_meas</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3478704" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3479152" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3491136" starting-state="hide">
          <fo:bookmark-title>megaco_codec_mstone1</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3495792" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3496240" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3496704" starting-state="hide">
            <fo:bookmark-title>start/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3502656" starting-state="hide">
            <fo:bookmark-title>start_flex/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3503104" starting-state="hide">
            <fo:bookmark-title>start_flex/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3503568" starting-state="hide">
            <fo:bookmark-title>start_flex/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3510064" starting-state="hide">
            <fo:bookmark-title>start_only_drv/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3510528" starting-state="hide">
            <fo:bookmark-title>start_only_drv/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3511008" starting-state="hide">
            <fo:bookmark-title>start_only_drv/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3519760" starting-state="hide">
            <fo:bookmark-title>start_no_drv/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3520224" starting-state="hide">
            <fo:bookmark-title>start_no_drv/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3520688" starting-state="hide">
            <fo:bookmark-title>start_no_drv/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3537424" starting-state="hide">
          <fo:bookmark-title>megaco_codec_mstone2</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3542080" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3542528" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3555520" starting-state="hide">
          <fo:bookmark-title>megaco_codec_transform</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3559744" starting-state="hide">
            <fo:bookmark-title>export_messages/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3560208" starting-state="hide">
            <fo:bookmark-title>export_messages/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">Megaco/H.248</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 2000-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">Megaco/H.248 3.18.2</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 2000-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            Megaco/H.248</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            Megaco/H.248 | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp765920" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      Megaco/H.248 Users Guide</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Megaco application is a framework for building
      applications on top of the Megaco/H.248 protocol. </fo:block>
  <fo:block id="idp761488" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  Introduction</fo:marker>1.1  Introduction</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Megaco/H.248 is a protocol for control of elements in a
    physically decomposed multimedia gateway, enabling separation of
    call control from media conversion. A Media Gateway Controller
    (MGC) controls one or more Media Gateways (MG).</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This version of the stack supports version 1, 2 and 3 as 
    defined by:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">version 1 - RFC 3525 and H.248-IG (v10-v13)</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">version 2 - draft-ietf-megaco-h248v2-04 &amp; H.248.1 
        v2 Corrigendum 1 (03/2004)</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">version 3: </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">prev3a - as defined by TD-33 (except segments)</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">prev3b - TD-33 updated to be backward compatible with v2 
            (except segments)</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">prev3c - As defined by ITU H.248.1 (09/2005) 
            (except segments)</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">v3 - Full version 3 as defined by ITU H.248.1 (09/2005) 
            (including segments)</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    </fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of the protocol has jointly been defined by two
    standardization bodies:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">IETF - which calls the protocol Megaco</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ITU  - which calls the protocol H.248</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block id="idp744720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Scope and Purpose</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This manual describes the Megaco application, as a component
      of the Erlang/Open Telecom Platform development environment. It
      is assumed that the reader is familiar with the Erlang
      Development Environment, which is described in a separate User's
      Guide.</fo:block>
  <fo:block id="idp743344" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Prerequisites</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following prerequisites is required for understanding the
      material in the Megaco User's Guide:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">the basics of the Megaco/H.248 protocol</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">the basics of the Abstract Syntax Notation One (ASN.1)</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">familiarity with the Erlang system and Erlang programming</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application requires Erlang/OTP release R10B or later.</fo:block>
  <fo:block id="idp738352" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.3 
      About This Manual</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In addition to this introductory chapter, the Megaco User's
      Guide contains the following chapters:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Chapter 2: "Architecture" describes the architecture
          and typical usage of the application.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Chapter 3: "Internal form and its encodings" describes
          the internal form of Megaco/H.248 messages and its various
          encodings.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Chapter 4: "Transport mechanisms" describes how
          different mechanisms can be used to transport the
          Megaco/H.248 messages.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Chapter 5: "Debugging" describes tracing and debugging.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp861568" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.4 
      Where to Find More Information</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Refer to the following documentation for more information about
      Megaco/H.248 and about the Erlang/OTP development system:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold"><fo:basic-link external-destination="href">version 1, RFC 3525</fo:basic-link></fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold"><fo:basic-link external-destination="href">old version 1, RFC 3015</fo:basic-link></fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold"><fo:basic-link external-destination="href">Version 2 Corrigendum 1</fo:basic-link></fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold"><fo:basic-link external-destination="href">version 2, draft-ietf-megaco-h248v2-04</fo:basic-link></fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold"><fo:basic-link external-destination="href">TD-33 (Draft H.248.1 version 3)</fo:basic-link></fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold"><fo:basic-link external-destination="href">H.248.1 version 3</fo:basic-link></fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">the ASN.1 application User's Guide</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">the Megaco application Reference Manual</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Concurrent Programming in Erlang, 2nd Edition (1996),
          Prentice-Hall, ISBN 0-13-508301-X.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp783984" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  Architecture</fo:marker>1.2  Architecture</fo:block><fo:block id="idp575440" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      Network view</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Megaco is a (master/slave) protocol for control of gateway functions at 
      the edge of the packet network. Examples of this is IP-PSTN trunking 
      gateways and analog line gateways. The main function of Megaco is to 
      allow gateway decomposition into a call agent (call control) part (known
      as Media Gateway Controller, MGC) - master, and an gateway interface 
      part (known as Media Gateway, MG) - slave. The MG has no call control 
      knowledge and only handle making the connections and simple 
      configurations.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">SIP and H.323 are peer-to-peer protocols for call control (valid only 
      for some of the protocols within H.323), or more generally multi-media 
      session protocols. They both operate at a different level (call control) 
      from Megaco in a decomposed network, and are therefor not aware of 
      whether or not Megaco is being used underneath.</fo:block>
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="megaco_sys_arch.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.1:
         
        Network architecture</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Megaco and peer protocols are complementary in nature and entirely
      compatible within the same system. At a system level, Megaco allows 
      for</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">overall network cost and performance optimization</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">protection of investment by isolation of changes at the call 
          control layer</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">freedom to geographically distribute both call function and 
          gateway function</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">adaption of legacy equipment</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp952352" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.2 
      General</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This Erlang/OTP application supplies a framework for building
      applications that needs to utilize the Megaco/H.248 protocol.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We have introduced the term "user" as a generic term for either
      an MG or an MGC, since most of the functionality we support, is
      common for both MG's and MGC's. A (local) user may be configured
      in various ways and it may establish any number of connections
      to its counterpart, the remote user. Once a connection has been
      established, the connection is supervised and it may be used for
      the purpose of sending messages. N.B. according to the standard
      an MG is connected to at most one MGC, while an MGC may be
      connected to any number of MG's.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the purpose of managing "virtual MG's", one Erlang node may
      host any number of MG's. In fact it may host a mix of MG's and
      MGC's. You may say that an Erlang node may host any number of
      "users".</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The protocol engine uses callback modules to handle various
      things:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">encoding callback modules - handles the encoding and
          decoding of messages. Several modules for handling different
          encodings are included, such as ASN.1 BER, pretty well
          indented text, compact text and some others. Others may be
          written by you.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">transport callback modules - handles sending and receiving
          of messages. Transport modules for TCP/IP and UDP/IP are
          included and others may be written by you.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">user callback modules - the actual implementation of an MG
          or MGC. Most of the functions are intended for handling of a
          decoded transaction (request, reply, acknowledgement), but
          there are others that handles connect, disconnect and
          errors cases.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each connection may have its own configuration of callback
      modules, re-send timers, transaction id ranges etc. and they may
      be re-configured on-the-fly.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the API of Megaco, a user may explicitly send action
      requests, but generation of transaction identifiers, the
      encoding and actual transport of the message to the remote user
      is handled automatically by the protocol engine according to the
      actual connection configuration. Megaco messages are not exposed
      in the API.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On the receiving side the transport module receives the message
      and forwards it to the protocol engine, which decodes it and
      invokes user callback functions for each transaction. When a
      user has handled its action requests, it simply returns a list
      of action replies (or a message error) and the protocol engine
      uses the encoding module and transport module to compose and
      forward the message to the originating user.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The protocol stack does also handle things like automatic
      sending of acknowledgements, pending transactions, re-send of
      messages, supervision of connections etc.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order to provide a solution for scalable implementations of
      MG's and MGC's, a user may be distributed over several Erlang
      nodes. One of the Erlang nodes is connected to the physical
      network interface, but messages may be sent from other nodes and
      the replies are automatically forwarded back to the originating
      node.</fo:block>
  <fo:block id="idp543856" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.3 
      Single node config</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here a system configuration with an MG and MGC residing
      in one Erlang node each is outlined:</fo:block>
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="single_node_config.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.2:
         
        Single node config</fo:block>
    </fo:block>
  <fo:block id="idp536336" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.4 
      Distributed config</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a larger system with a user (in this case an MGC)
      distributed over several Erlang nodes, it looks a little bit
      different. Here the encoding is performed on the originating
      Erlang node (1) and the binary is forwarded to the node (2) with
      the physical network interface. When the potential message reply
      is received on the interface on node (2), it is decoded there
      and then different actions will be taken for each transaction in
      the message. The transaction reply will be forwarded in its
      decoded form to the originating node (1) while the other types
      of transactions will be handled locally on node (2).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Timers and re-send of messages will be handled on locally on
      one node, that is node(1), in order to avoid unnecessary
      transfer of data between the Erlang nodes.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="distr_node_config.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.3:
         
        Distributes node config</fo:block>
    </fo:block>
  <fo:block id="idp596288" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.5 
      Message round-trip call flow</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The typical round-trip of a message can be viewed as
      follows. Firstly we view the call flow on the originating
      side:</fo:block>
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="call_flow.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.4:
         
        Message Call Flow (originating side)</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then we continue with the call flow on the destination
      side:</fo:block>
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="call_flow_cont.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.5:
         
        Message Call Flow (destination side)</fo:block>
    </fo:block>
  <fo:block id="idp557888" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.3  Running the stack</fo:marker>1.3  Running the stack</fo:block><fo:block id="idp485968" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.1 
      Starting</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A user may have a number of "virtual" connections to other
      users. An MG is connected to at most one MGC, while an MGC may
      be connected to any number of MG's. For each connection the user
      selects a transport service, an encoding scheme and a user
      callback module.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An MGC must initiate its transport service in order to listen
      to MG's trying to connect. How the actual transport is initiated
      is outside the scope of this application. However a send handle
      (typically a socket id or host and port) must be provided from
      the transport service in order to enable us to send the message
      to the correct destination. We do however not assume anything
      about this, from our point of view, opaque handle. Hopefully it
      is rather small since it will passed around the system between
      processes rather frequently.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A user may either be statically configured in a .config file
      according to the application concept of Erlang/OTP or
      dynamically started with the configuration settings as arguments
      to megaco:start_user/2. These configuration settings may be
      updated later on with megaco:update_conn_info/2.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function megaco:connect/4 is used to tell the Megaco
      application about which control process it should supervise,
      which MID the remote user has, which callback module it should
      use to send messages etc. When this "virtual" connection is
      established the user may use megaco:call/3 and megaco:cast/3 in
      order to send messages to the other side. Then it is up to the
      MG to send its first Service Change Request message after
      applying some clever algorithm in order to fight the problem
      with startup avalanche (as discussed in the RFC).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The originating user will wait for a reply or a timeout
      (defined by the request_timer). When it receives the reply this
      will optionally be acknowledged (regulated by auto_ack), and
      forwarded to the user.  If an interim pending reply is received,
      the long_request_timer will be used instead of the usual
      request_timer, in order to enable avoidance of spurious re-sends
      of the request.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On the destination side the transport service waits for
      messages. Each message is forwarded to the Megaco application
      via the megaco:receive_message/4 callback function. The
      transport service may or may not provide means for blocking and
      unblocking the reception of the incoming messages.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a message is received before the "virtual" connection has
      been established, the connection will be setup automatically. An
      MGC may be real open minded and dynamically decide which
      encoding and transport service to use depending on how the
      transport layer contact is performed. For IP transports two
      ports are standardized, one for textual encoding and one for
      binary encoding. If for example an UDP packet was received on
      the text port it would be possible to decide encoding and
      transport on the fly.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After decoding a message various user callback functions are
      invoked in order to allow the user to act properly.  See the
      megaco_user module for more info about the callback
      arguments.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the user has processed a transaction request in its
      callback function, the Megaco application assembles a
      transaction reply, encodes it using the selected encoding module
      and sends the message back by invoking the callback
      function:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">SendMod:send_message(SendHandle, ErlangBinary)</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Re-send of messages, handling pending transactions,
      acknowledgements etc. is handled automatically by the Megaco
      application but the user is free to override the default
      behaviour by the various configuration possibilities. See
      megaco:update_user_info/2 and megaco:update_conn_info/2 about
      the possibilities.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When connections gets broken (that is explicitly by
      megaco:disconnect/2 or when its controlling process dies) a user
      callback function is invoked in order to allow the user to
      re-establish the connection. The internal state of kept
      messages, re-send timers etc. is not affected by this. A few
      re-sends will of course fail while the connection is down, but
      the automatic re-send algorithm does not bother about this and
      eventually when the connection is up and running the messages
      will be delivered if the timeouts are set to be long enough. The
      user has the option of explicitly invoking megaco:cancel/2 to
      cancel all messages for a connection.</fo:block>
  <fo:block id="idm25984" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.2 
      MGC startup call flow</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order to prepare the MGC for the reception of the initial
      message, hopefully a Service Change Request, the following needs
      to be done:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start the Megaco application.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start the MGC user. This may either be done explicitly
          with megaco:start_user/2 or implicitly by providing the -megaco
          users configuration parameter.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initiate the transport service and provide it with a
          receive handle obtained from megaco:user_info/2.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the initial message arrives the transport service
      forwards it to the protocol engine which automatically
      sets up the connection and invokes UserMod:handle_connect/2
      before it invokes UserMod:handle_trans_request/3 with
      the Service Change Request like this:</fo:block>
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="MGC_startup_call_flow.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.1:
         
        MGC Startup Call Flow</fo:block>
    </fo:block>
  <fo:block id="idp451392" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.3 
      MG startup call flow</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order to prepare the MG for the sending of the initial
      message, hopefully a Service Change Request, the following needs
      to be done:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start the Megaco application.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start the MG user. This may either be done explicitly
          with megaco:start_user/2 or implicitly by providing the -megaco
          users configuration parameter.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initiate the transport service and provide it with a
          receive handle obtained from megaco:user_info/2.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Setup a connection to the MGC with megaco:connect/4 and
          provide it with a receive handle obtained from
          megaco:user_info/2.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the MG has been provisioned with the MID of the MGC it can
      be given as the RemoteMid parameter to megaco:connect/4 and the
      call flow will look like this:</fo:block>
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="MG_startup_call_flow.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.2:
         
        MG Startup Call Flow</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the MG cannot be provisioned with the MID of the MGC, the
      MG can use the atom 'preliminary_mid' as the RemoteMid parameter
      to megaco:connect/4 and the call flow will look like this:</fo:block>
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="MG-startup_flow_noMID.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.3:
         
        MG Startup Call Flow (no MID)</fo:block>
    </fo:block>
  <fo:block id="idp932112" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.4 
      Configuring the Megaco stack</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are three kinds of configuration:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">User info - Information related to megaco users. Read/Write. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A User is an entity identified by a MID, e.g. a MGC or a MG. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This information can be retrieved using 
          <fo:inline font-style="italic">megaco:user_info</fo:inline>. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Connection info - Information regarding connections. Read/Write.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This information can be retrieved using 
          <fo:inline font-style="italic">megaco:conn_info</fo:inline>. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">System info - System wide information. Read only.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This information can be retrieved using 
          <fo:inline font-style="italic">megaco:system_info</fo:inline>. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp494880" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.5 
      Initial configuration</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The initial configuration of the Megaco should be defined in the
      Erlang system configuration file. The following configured parameters
      are defined for the Megaco application:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">users = [{Mid, [user_config()]}].</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each user is represented by a tuple with the Mid of the user and a
          list of config parameters (each parameter is in turn a tuple:
          <fo:inline font-family="monospace">{Item, Value}</fo:inline>).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">scanner = flex | {Module, Function, Arguments, Modules}</fo:inline></fo:block>

        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">flex</fo:inline> will result in the start of the flex scanner with default 
              options.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MFA alternative makes it possible for Megaco to start and
              supervise a scanner written by the user (see 
            <fo:inline font-family="monospace">supervisor:start_child</fo:inline> for an explanation of the 
              parameters).</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">Configuration of text encoding module(s)</fo:inline> 
      for more info. </fo:block>
  <fo:block id="idp724592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.6 
      Changing the configuration</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration can be changed during runtime. This is done with
      the functions <fo:inline font-style="italic">megaco:update_user_info</fo:inline> and 
      <fo:inline font-style="italic">megaco:update_conn_info</fo:inline></fo:block>
  <fo:block id="idp727760" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.7 
      The transaction sender</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The transaction sender is a process (one per connection), which handle
      all transaction sending, if so configured (see 
      <fo:inline font-style="italic">megaco:user_info</fo:inline> and 
      <fo:inline font-style="italic">megaco:conn_info</fo:inline>).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The purpose of the transaction sender is to accumulate transactions 
      for a more efficient message sending. The transactions that are 
      accumulated are transaction request and transaction ack. For 
      transaction ack's the benefit is quite large, since the transactions 
      are small and it is possible to have ranges (which means that 
      transaction acks for transactions 1, 2, 3 and 4 can be sent as a 
      range 1-4 in one transaction ack, instead of four separate 
      transactions). </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are a number of configuration parameter's that control the 
      operation of the transaction sender. In principle, a message with 
      everything stored (ack's and request's) is sent from the process 
      when:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">trans_timer</fo:inline> expires.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">trans_ack_maxcount</fo:inline> number of ack's has been 
          received.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">trans_req_maxcount</fo:inline> number of requests's has 
          been received.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the size of all received requests exceeds 
          <fo:inline font-family="monospace">trans_req_maxsize</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a reply transaction is sent.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a pending transaction is sent.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When something is to be sent, everything is packed into one message,  
      unless the trigger was a reply transaction and the added size of the 
      reply and all the requests is greater then 
      <fo:inline font-family="monospace">trans_req_maxsize</fo:inline>, in which case the stored 
      transactions are sent first in a separate message and the reply in 
      another message.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the transaction sender receives a request which is already 
      "in storage" (indicated by the transaction id) it is assumed to 
      be a resend and everything stored is sent. This could happen if 
      the values of the <fo:inline font-family="monospace">trans_timer</fo:inline> and the
      <fo:inline font-family="monospace">request_timer</fo:inline> is not properly chosen.</fo:block>
  <fo:block id="idp897920" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.8 
      Segmentation of transaction replies</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In version 3 of the megaco standard the Segmentation package was
      introduced. Simply, this package defines a procedure to segment 
      megaco messages (transaction replies) when using a transport that 
      does not automatically do this (e.g. UDP). See also
      <fo:inline font-style="italic">version3</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Although it would be both pointless and counterproductive to use
      segmentation on a transport that already does this (e.g. TCP), the 
      megaco application does not check this. Instead, it is up to the 
      user to configure this properly. </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receiving segmented messages: </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is handled automatically by the megaco application. 
          There is however one thing that need to be configured by the user, 
          the 
          <fo:inline font-style="italic">segment_recv_timer</fo:inline>
          option. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the segments are delivered to the user differently 
          depending on which function is used to issue the original request.
          When issuing the request using the 
          <fo:inline font-style="italic">megaco:cast</fo:inline> function,
          the segments are delivered to the user via the 
          <fo:inline font-style="italic">handle_trans_reply</fo:inline>
          callback function one at a time, as they arrive. But this obviously
          doe not work for the 
          <fo:inline font-style="italic">megaco:call</fo:inline> function. 
          In this case, the segments are accumulated and then delivered
          all at once as the function returns.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sending segmented messages: </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is also handled automatically by the megaco application. 
          First of all, segmentation is only attempted if so configured, see 
          the <fo:inline font-style="italic">segment_send</fo:inline> option.
          Secondly, megaco relies on the ability of the used codec to
          encode action replies, which is the smallest component the
          megaco application handles when segmenting. Thirdly, the 
          reply will be segmented only if the sum of the size of the
          action replies (plus an arbitrary message header size) are greater
          then the specified max message size (see the 
          <fo:inline font-style="italic">max_pdu_size</fo:inline> option).
          Finally, if segmentation is decided, then each action reply
          will make up its own (segment) message.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp914272" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.4  Internal form and its encodings</fo:marker>1.4  Internal form and its encodings</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This version of the stack is compliant with: </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Megaco/H.248 version 1 (RFC3525)
        updated according to Implementors Guide version 10-13.</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Megaco/H.248 version 2 as defined by 
        draft-ietf-megaco-h248v2-04
        updated according to Implementors Guide version 10-13.</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Megaco/H.248 version 3 as defined by 
        ITU H.248.1 (09/2005).</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block id="idp922448" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.1 
      Internal form of messages</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We use the same internal form for both the binary and text
      encoding.  Our internal form of Megaco/H.248 messages is heavily
      influenced by the internal format used by ASN.1
      encoders/decoders:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"SEQUENCE OF" is represented as a list.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"CHOICE" is represented as a tagged tuple with size 2.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"SEQUENCE" is represented as a record, defined in
          "megaco/include/megaco_message_v1.hrl".</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"OPTIONAL" is represented as an ordinary field in a
          record which defaults to 'asn1_NOVALUE', meaning that the
          field has no value.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"OCTET STRING" is represented as a list of unsigned integers.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"ENUMERATED" is represented as a single atom.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"BIT STRING" is represented as a list of atoms.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"BOOLEAN" is represented as the atom 'true' or 'false'.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"INTEGER" is represented as an integer.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"IA5String" is represented as a list of integers,
          where each integer is the ASCII value of the corresponding
          character.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"NULL" is represented as the atom 'NULL'.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order to fully understand the internal form you must get
      hold on a ASN.1 specification for the Megaco/H.248 protocol, 
      and apply the rules above.
      Please, see the documentation of the ASN.1 compiler in
      Erlang/OTP for more details of the semantics in mapping between
      ASN.1 and the corresponding internal form.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Observe that the 'TerminationId' record is not used in the
      internal form. It has been replaced with a megaco_term_id record
      (defined in "megaco/include/megaco.hrl").</fo:block>
  <fo:block id="idp1068096" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.2 
      The different encodings</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Megaco/H.248 standard defines both a plain text encoding
      and a binary encoding (ASN.1 BER) and we have implemented
      encoders and decoders for both. We do in fact supply five
      different encoding/decoding modules.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the text encoding, implementors have the choice of using a
      mix of short and long keywords. It is also possible to add white
      spaces to improve readability. We use the term compact for text
      messages with the shortest possible keywords and no optional
      white spaces, and the term pretty for a well indented text
      format using long keywords and an indentation style like the
      text examples in the Megaco/H.248 specification).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here follows an example of a text message to give a feeling
      of the difference between the pretty and compact versions of
      text messages. First the pretty, well indented version with long
      keywords:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
   MEGACO/1 [124.124.124.222]
   Transaction = 9998 {
           Context = - {
                   ServiceChange = ROOT {
                           Services {
                                   Method = Restart,
                                   ServiceChangeAddress = 55555,
                                   Profile = ResGW/1,
                                   Reason = "901 Cold Boot"
                           }
                   }
           }
   }    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then the compact version without indentation and with short keywords:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 
   !/1 [124.124.124.222]
   T=9998{C=-{SC=ROOT{SV{MT=RS,AD=55555,PF=ResGW/1,RE="901 Cold Boot"}}}}    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And the programmers view of the same message.
      First a list of ActionRequest records are constructed and
      then it is sent with one of the send functions in the API:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  Prof = #'ServiceChangeProfile'{profileName = "resgw", version = 1},
  Parm = #'ServiceChangeParm'{serviceChangeMethod  = restart,
                              serviceChangeAddress = {portNumber, 55555},
                              serviceChangeReason  = "901 Cold Boot",
                              serviceChangeProfile = Prof},
  Req = #'ServiceChangeRequest'{terminationID = [?megaco_root_termination_id],
                                serviceChangeParms = Parm},
  Actions = [#'ActionRequest'{contextId = ?megaco_null_context_id,
                              commandRequests = {serviceChangeReq, Req}}],
  megaco:call(ConnHandle, Actions, Config).    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And finally a print-out of the entire internal form:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  {'MegacoMessage',
   asn1_NOVALUE,
   {'Message',
    1,
    {ip4Address,{'IP4Address', [124,124,124,222], asn1_NOVALUE}},
    {transactions,
     [
      {transactionRequest,
       {'TransactionRequest',
         9998,
         [{'ActionRequest',
           0,
           asn1_NOVALUE,
           asn1_NOVALUE,
           [
            {'CommandRequest',
             {serviceChangeReq,
              {'ServiceChangeRequest',
               [
                {megaco_term_id, false, ["root"]}],
                {'ServiceChangeParm',
                 restart,
                 {portNumber, 55555},
                 asn1_NOVALUE,
                 {'ServiceChangeProfile', "resgw", version = 1},
                 "901 MG Cold Boot",
                 asn1_NOVALUE,
                 asn1_NOVALUE,
                 asn1_NOVALUE
                }
              }
             },
             asn1_NOVALUE,
             asn1_NOVALUE
            }
           ]
          }
         ]
       }
      }
     ]
    }
   }
  }     </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following encoding modules are provided:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">megaco_pretty_text_encoder - encodes messages into
          pretty text format, decodes both pretty as well as compact
          text.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">megaco_compact_text_encoder - encodes messages into
          compact text format, decodes both pretty as well as compact
          text.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">megaco_binary_encoder - encode/decode ASN.1 BER messages.
          This encoder implements the fastest of the BER encoders/decoders.
          Recommended binary codec.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">megaco_ber_encoder - encode/decode ASN.1 BER 
          messages.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">megaco_per_encoder - encode/decode ASN.1 PER
          messages. N.B. that this format is not included in the
          Megaco standard.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">megaco_erl_dist_encoder - encodes messages into Erlangs
          distribution format. It is rather verbose but encoding and
          decoding is blinding fast. N.B. that this format is not 
          included in the Megaco standard.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1083664" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.3 
      Configuration of Erlang distribution encoding module</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The encoding_config of the megaco_erl_dist_encoder module
      may be one of these:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[]</fo:inline> - Encodes the messages to the standard distribution
          format. It is rather verbose but encoding and decoding is
          blinding fast.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[megaco_compressed]</fo:inline> - Encodes the messages to the
          standard distribution format after an internal transformation. 
          It is less verbose, but the total time of the encoding and 
          decoding will on the other hand be somewhat slower (see the 
          <fo:inline font-style="italic">performance</fo:inline> 
          chapter for more info).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[{megaco_compressed, Module}]</fo:inline> - Works in the same
          way as the megaco_compressed config parameter, only here the 
          user provide their own compress module. This module must 
          implement the 
          <fo:inline font-style="italic">megaco_edist_compress</fo:inline> 
          behaviour.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[compressed]</fo:inline> - Encodes the messages to a compressed
          form of the standard distribution format. It is less
          verbose, but the encoding and decoding will on the other
          hand be slower.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1093312" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.4 
      Configuration of text encoding module(s)</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When using text encoding(s), there is actually two different
      configs controlling what software to use:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[]</fo:inline> - An empty list indicates that the erlang
          scanner should be used.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[{flex, port()}]</fo:inline> - Use the flex scanner when 
          decoding (not optimized for SMP). See 
          <fo:inline font-style="italic">initial configuration</fo:inline> 
          for more info.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[{flex, ports()}]</fo:inline> - Use the flex scanner when 
          decoding (optimized for SMP). See 
          <fo:inline font-style="italic">initial configuration</fo:inline> 
          for more info.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Flex scanner is a Megaco scanner written as a linked in driver 
      (in C). There are two ways to get this working:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let the Megaco stack start the flex scanner 
          (load the driver).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To make this happen the megaco stack has to be configured: </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Add the <fo:inline font-family="monospace">{scanner, flex}</fo:inline> (or similar) directive to an 
              Erlang system config file for the megaco app (see 
              <fo:inline font-style="italic">initial configuration</fo:inline> 
              chapter for details). </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieve the encoding-config using the
              <fo:inline font-style="italic">system_info</fo:inline> 
              function (with <fo:inline font-family="monospace">Item = text_config</fo:inline>). </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Update the receive handle with the encoding-config 
              (the <fo:inline font-family="monospace">encoding_config</fo:inline> field). </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The benefit of this is that Megaco handles the starting, holding
          and the supervision of the driver and port.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Megaco client (user) starts the flex scanner (load the driver).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When starting the flex scanner a port to the linked in driver is 
          created. This port has to be owned by a process. This process must not
          die. If it does the port will also terminate. Therefor:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create a permanent process. Make sure this process is
              supervised (so that if it does die, this will be noticed).</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let this process start the flex scanner by calling the 
              <fo:inline font-family="monospace">megaco_flex_scanner:start/0,1</fo:inline> function.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieve the encoding-config and when initiating
              the <fo:inline font-family="monospace">megaco_receive_handle</fo:inline>, set the 
              field <fo:inline font-family="monospace">encoding_config</fo:inline> accordingly.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Pass the <fo:inline font-family="monospace">megaco_receive_handle</fo:inline> to the 
              transport module.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1119264" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.5 
      Configuration of binary encoding module(s)</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When using binary encoding, the structure of the termination id's 
      needs to be specified.</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[native]</fo:inline> - skips the transformation phase, i.e. 
          the decoded message(s) will not be transformed into our internal
          form.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[integer()]</fo:inline> - A list containing the size (the number 
          of bits) of each level. Example: <fo:inline font-family="monospace">[3,8,5,8]</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">integer()</fo:inline> - Number of one byte (8 bits) levels.
          N.B. This is currently converted into the previous config. 
          Example: <fo:inline font-family="monospace">3</fo:inline> (<fo:inline font-family="monospace">[8,8,8]</fo:inline>).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1127184" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.6 
      Handling megaco versions</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since the version 3 implemented, in this version of the Megaco 
      application, is preliminary, it is necessary to have a way
      to handle different version 3 implementations. For this reason
      the encoding config option <fo:inline font-family="monospace">{version3, version3()}</fo:inline> has been 
      introduced. This option, if present, has to be <fo:inline font-weight="bold">first</fo:inline> in the 
      encoding config list. Version 1 and 2 codec's ignore this option, if 
      found. </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
version3() -&gt; prev3a | prev3b | prev3c | v3    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">prev3a</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Preliminary version 3, based on TD-33</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">prev3b</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Preliminary version 3, based on TD-33, but text encoding 
          updated with the final solution for priority in 
          <fo:inline font-family="monospace">contextProperty</fo:inline> (which is backward compatible with v2).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">prev3c</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Preliminary version 3, based on the final version of the 
          v3-standard, but <fo:inline font-weight="bold">excluding</fo:inline> segments!</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">v3</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Full version 3. Including segmentation. This is the default
          version 3 variant (i.e. if a version 3 messages is to be 
          encoded/decoded and no version3 encoding config is found, 
          then v3 is assumed).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two ways to handle the different megaco encoding versions.
      Either using <fo:inline font-weight="bold">dynamic version detection</fo:inline> (only valid for
      for incoming messages) or by <fo:inline font-weight="bold">explicit version</fo:inline> setting in 
      the connection info.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For incoming messages:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dynamic version detection</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set the protocol version in the megaco_receive_handle to 
          <fo:inline font-family="monospace">dynamic</fo:inline> (this is the default).
          <fo:block/>This works for those codecs that support partial decode of the 
          version, currently <fo:inline font-weight="bold">text</fo:inline>, and ber_bin 
          (<fo:inline font-family="monospace">megaco_binary_encoder</fo:inline> and <fo:inline font-family="monospace">megaco_ber_bin_encoder</fo:inline>). 
          <fo:block/>This way the decoder will detect which version is used and 
          then use the proper decoder. </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Explicit version</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Explicitly set the actual protocol version in the 
          megaco_receive_handle.
          <fo:block/>Start with version 1. When the initial service change has been 
          performed and version 2 has been negotiated, upgrade the 
          megaco_receive_handle of the transport process (control_pid) to 
          version 2.
          See 
          <fo:inline font-style="italic">megaco_tcp</fo:inline>
          and 
          <fo:inline font-style="italic">megaco_udp</fo:inline>.
          <fo:block/>Note that if <fo:inline font-family="monospace">udp</fo:inline> is used, the same transport process 
          could be used for several connections. This could make upgrading 
          impossible.
          <fo:block/>For codecs that does not support partial decode of the version, 
          currently <fo:inline font-family="monospace">megaco_ber_encoder</fo:inline>, <fo:inline font-family="monospace">megaco_per_encoder</fo:inline>
          and <fo:inline font-family="monospace">megaco_per_bin_encoder</fo:inline>, <fo:inline font-family="monospace">dynamic</fo:inline> will revert to 
          version 1.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For outgoing messages:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Update the connection info protocol_version.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Override protocol version when sending a message by adding the
          item <fo:inline font-family="monospace">{protocol_version, integer()}</fo:inline> to the Options.
          See 
          <fo:inline font-style="italic">call</fo:inline> or
          <fo:inline font-style="italic">cast</fo:inline>.
          <fo:block/>Note that this does not effect the messages that are sent
          autonomously by the stack. They use the protocol_version of the
          connection info.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1156976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.7 
      Encoder callback functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The encoder callback interface is defined by the <fo:inline font-family="monospace">megaco_encoder</fo:inline> 
      behaviour, see <fo:inline font-style="italic">megaco_encoder</fo:inline>.</fo:block>
  <fo:block id="idp1163472" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.5  Transport mechanisms</fo:marker>1.5  Transport mechanisms</fo:block><fo:block id="idp1167648" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.1 
      Callback interface</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The callback interface of the transport module contains several
      functions. Some of which are mandatory while others are only
      optional: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">send_message</fo:inline> - Send a message. <fo:inline font-weight="bold">Mandatory</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">block</fo:inline> - Block the transport. <fo:inline font-weight="bold">Optional</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is usefull for flow control.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">unblock</fo:inline> - Unblock the transport. <fo:inline font-weight="bold">Optional</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more detail, see the 
      <fo:inline font-style="italic">megaco_transport</fo:inline>
      behaviour definition.</fo:block>
  <fo:block id="idp1175968" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.2 
      Examples</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Megaco/H.248 application contains implementations
      for the two protocols specified by the Megaco/H.248 standard;
      UDP, see <fo:inline font-style="italic">megaco_udp</fo:inline>, 
      and TCP/TPKT, see <fo:inline font-style="italic">megaco_tcp</fo:inline>. </fo:block>
  <fo:block id="idp1182816" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.6  Implementation examples</fo:marker>1.6  Implementation examples</fo:block><fo:block id="idp1186976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.1 
      A simple Media Gateway Controller</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In megaco/examples/simple/megaco_simple_mgc.erl there is an
      example of a simple MGC that listens on both text and binary
      standard ports and is prepared to handle a Service Change
      Request message to arrive either via TCP/IP or UDP/IP. Messages
      received on the text port are decoded using a text decoder and
      messages received on the binary port are decoded using a binary
      decoder.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Service Change Reply is encoded in the same way as the
      request and sent back to the MG with the same transport
      mechanism UDP/IP or TCP/IP.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After this initial service change message the connection
      between the MG and MGC is fully established and supervised.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MGC, with its four listeners, may be started with:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      cd megaco/examples/simple
      erl -pa ../../../megaco/ebin -s megaco_filter -s megaco
      megaco_simple_mgc:start().
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or simply 'gmake mgc'.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The -s megaco_filter option to erl implies, the event tracing
      mechanism to be enabled and an interactive sequence chart tool
      to be started. This may be quite useful in order to visualize
      how your MGC interacts with the Megaco/H.248 protocol stack.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The event traces may alternatively be directed to a file for
      later analyze. By default the event tracing is disabled, but it
      may dynamically be enabled without any need for re-compilation
      of the code.
      </fo:block>
  <fo:block id="idp1192736" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.2 
      A simple Media Gateway</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In megaco/examples/simple/megaco_simple_mg.erl there is an
      example of a simple MG that connects to an MGC, sends a Service
      Change Request and waits synchronously for a reply.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After this initial service change message the connection
      between the MG and MGC is fully established and supervised.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assuming that the MGC is started on the local host, four
      different MG's, using text over TCP/IP, binary over TCP/IP, text
      over UDP/IP and binary over UDP/IP may be started on the same
      Erlang node with:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      cd megaco/examples/simple
      erl -pa ../../../megaco/ebin -s megaco_filter -s megaco
      megaco_simple_mg:start().
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or simply 'gmake mg'.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you "only" want to start a single MG which tries to connect
      an MG on a host named "baidarka", you may use one of these
      functions (instead of the megaco_simple_mg:start/0 above):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      megaco_simple_mg:start_tcp_text("baidarka", []).
      megaco_simple_mg:start_tcp_binary("baidarka", []).
      megaco_simple_mg:start_udp_text("baidarka", []).
      megaco_simple_mg:start_udp_binary("baidarka", []).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The -s megaco_filter option to erl implies, the event tracing
      mechanism to be enabled and an interactive sequence chart tool
      to be started. This may be quite useful in order to visualize
      how your MG interacts with the Megaco/H.248 protocol stack.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The event traces may alternatively be directed to a file for
      later analyze. By default the event tracing is disabled, but it
      may dynamically be enabled without any need for re-compilation
      of the code.
      </fo:block>
  <fo:block id="idp1203040" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.7  Megaco mib</fo:marker>1.7  Megaco mib</fo:block><fo:block id="idp1207200" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.1 
      Intro</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Megaco mib is as of yet not standardized and our
      implementation is based on
      <fo:inline font-weight="bold">draft-ietf-megaco-mib-04.txt</fo:inline>.  Almost all of the mib
      cannot easily be implemented by the megaco application. Instead
      these things should be implemented by a user (of the megaco
      application). </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">So what part of the mib is implemented? Basically the relevant
      statistic counters of the <fo:inline font-weight="bold">MedGwyGatewayStatsEntry</fo:inline>.</fo:block>
  <fo:block id="idp1210224" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.2 
      Statistics counters</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The implementation of the statistic counters is
      lightweight. I.e.  the statistic counters are handled
      separately by different entities of the application. For
      instance our two transport module(s) (see <fo:inline font-style="italic">megaco_tcp</fo:inline> and <fo:inline font-style="italic">megaco_udp</fo:inline>) maintain their
      own counters and the application engine (see <fo:inline font-style="italic">megaco</fo:inline>) maintain its own
      counters.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This also means that if a user implement their own transport
      service then it has to maintain its own statistics.</fo:block>
  <fo:block id="idp1214544" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.3 
      Distribution</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each megaco application maintains its own set of counters. So
      in a large (distributed) MG/MGC it could be necessary to
      collect the statistics from several nodes (each) running the
      megaco application (only one of them with the transport).</fo:block>
  <fo:block id="idp1220048" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.8  Performance comparison</fo:marker>1.8  Performance comparison</fo:block><fo:block id="idp1224208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.1 
      Comparison of encoder/decoders</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Megaco/H.248 standard defines both a plain text encoding and a 
      binary encoding (ASN.1 BER) and we have implemented encoders and 
      decoders for both. We do supply a bunch of different encoding/decoding 
      modules and the user may in fact implement their own (like our erl_dist 
      module). Using a non-standard encoding format has its obvious drawbacks, 
      but may be useful in some configurations.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We have made four different measurements of our Erlang/OTP 
      implementation of the Megaco/H.248 protocol stack, in order to compare 
      our different encoders/decoders. The result of each one is summarized 
      in the table below.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result above are the fastest 
      of these configurations for each codec. The figures presented are 
      the average of all used messages.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For comparison, also included are first, performance figures with
      megaco (including the measurement software) and asn1 applications 
      hipe-compiled (second figure in the time columns, note that per bin 
      decode had some issues so those figures are not included), and second, 
      performance figures where the flex driver was built as 
      <fo:inline font-family="monospace">non-reentrant</fo:inline> flex
      (third figure in the time columns, 
      only valid for text codecs using the flex-scanner, 
      figures within parenthesis). </fo:block>

    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Codec and config</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-weight="bold">Size</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-weight="bold">Encode</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-weight="bold">Decode</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-weight="bold">Total</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">pretty</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">336</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">20 / 13</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">75 / 40</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">95 / 53</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">pretty [flex]</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">336</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">20 / 13 / 20</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">39 / 33 / 38</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">59 / 46 / 58</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">compact</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">181</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">17 / 10</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">62 / 35</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">79 / 45</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">compact [flex]</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">181</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">17 / 10 / 17</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">37 / 31 / 36</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">54 / 41 / 53</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">per bin</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">91</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">60 / 29</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">64 / -</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">124 / -</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">per bin [driver]</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">91</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">39 / 24</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">42 / 26</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">81 / 50</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">per bin [native]</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">91</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">45 / 21</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">48 / -</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">93 / -</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">per bin [driver,native]</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">91</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">25 / 15</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">27 / 18</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">52 / 33</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">ber bin</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">165</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">32 / 19</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">38 / 21</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">70 / 40</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">ber bin [driver]</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">165</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">32 / 19</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">33 / 20</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">65 / 39</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">ber bin [native]</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">165</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">17 / 11</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">25 / 13</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">42 / 24</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">ber bin [driver,native]</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">165</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">17 / 11</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">17 / 12</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">34 / 23</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">erl_dist</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">875</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">5  /  5</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">10 / 10</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">15 / 15</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">erl_dist [megaco_compressed]</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">405</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">6  / 4</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">7  / 4</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">13 / 8</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">erl_dist [compressed]</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">345</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">47 / 47</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">20 / 20</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">67 / 67</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">erl_dist [megaco_compressed,compressed]</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">200</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">34 / 33</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">11 /  9</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">45 / 42</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        8.1:
         
        Codec performance</fo:block>
  <fo:block id="idp1323984" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.2 
      System performance characteristics</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is primarily a way to show the effects of using the 
      reentrant flex scanner instead of the non-reentrant. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As can be seen from the figures above there is no real difference 
      between a non-reentrant and an reentrant flex scanner when it 
      comes to the decode times of an individual message. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The real difference is instead in system characteristics, which 
      is best shown with the mstone1 test. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When running SMP erlang on a multi-core machine the "throughput"
      is significantly higher. The mstone1 test is an extreme test,
      but it shows what is gained by using the reentrant flex-scanner. </fo:block>
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="mstone1.jpg"/>
        <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        8.1:
         
        MStone1 with mstone1.sh -d flex -s 4</fo:block>
    </fo:block>
  <fo:block id="idp1328432" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.3 
      Description of encoders/decoders</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In Appendix A of the Megaco/H.248 specification (RFC 3525), there are 
      about 30 messages that shows a representative call flow. We have also 
      added a few extra version 1, version 2 and version 3 messages. 
      We have used these messages as basis for our measurements. 
      Our figures have not been weighted in regard to how frequent 
      the different kinds of messages that are sent between the media 
      gateway and its controller.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The test compares the following encoder/decoders:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">pretty</fo:inline> - pretty printed text. In the text encoding, 
          the protocol stack implementors have the choice of using a 
          mix of short and long keywords. It is also possible to add 
          white spaces to improve readability. The pretty text encoding 
          utilizes long keywords and an indentation style like the 
          text examples in the Megaco/H.248 specification.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">compact</fo:inline> - the compact text encoding uses the shortest 
          possible keywords and no optional white spaces.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">ber</fo:inline> - ASN.1 BER.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">per</fo:inline> - ASN.1 PER. Not standardized as a valid 
          Megaco/H.248 encoding, but included for the matter of completeness 
          as its encoding is extremely compact.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">erl_dist</fo:inline> - Erlang's native distribution format. Not 
          standardized as a valid Megaco/H.248 encoding, but included 
          as a reference due to its well known performance characteristics. 
          Erlang is a dynamically typed language and any Erlang data 
          structure may be serialized to the erl_dist format by using 
          built-in functions.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The actual encoded messages have been collected in one directory per 
      encoding type, containing one file per encoded message.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here follows an example of a text message to give a feeling of the 
      difference between the pretty and compact versions of text messages. 
      First the pretty printed, well indented version with long keywords:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
MEGACO/1 [124.124.124.222] 
  Transaction = 9998 { 
    Context = - { 
      ServiceChange = ROOT { 
        Services { 
          Method = Restart, 
          ServiceChangeAddress = 55555, 
          Profile = ResGW/1, 
          Reason = "901 MG Cold Boot"
        }
      }  
    }
  }    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then the compact text version without indentation and with short 
      keywords:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
!/1 [124.124.124.222] T=9998{
  C=-{SC=ROOT{SV{MT=RS,AD=55555,PF=ResGW/1,RE="901 MG Cold Boot"}}}}    </fo:block>
  <fo:block id="idp1341600" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.4 
      Setup</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The measurements has been performed on a 
      HP xw4600 Workstation with 
      a Intel(R) Core(TM)2 Quad CPU Q9550 @ 2.83GHz, with 4 GB memory and 
      running Ubuntu 10.04 x86_64, kernel 2.6.32-22-generic. 
      Software versions was open source OTP R13B04 (megaco-3.14).</fo:block>
  <fo:block id="idp1343200" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.5 
      Summary</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In our measurements we have seen that there are no significant 
      differences in message sizes between ASN.1 BER and the compact 
      text format. Some care should be taken when using the pretty text 
      style (which is used in all the examples included in the protocol 
      specification and preferred during debugging sessions) since the 
      messages can then be quite large. If the message size really is a 
      serious issue, our per encoder should be used, as the ASN.1 PER 
      format is much more compact than all the other alternatives. Its 
      major drawback is that it is has not been approved as a valid 
      Megaco/H.248 message encoding.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When it comes to pure encode/decode performance, it turns out that:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"> 
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">our fastest binary encoder (ber) is about equal 
          to our fastest text encoder (compact). </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">our fastest binary decoder (ber) is about 54% (61%) faster than our 
          fastest text decoder (compact). </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block> 

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the pure encode/decode performance really is a serious issue, our 
      erl_dist encoder could be used, as the encoding/decoding of the 
      erlang distribution format is much faster than all the other 
      alternatives. Its major drawback is that it is has not been approved 
      as a valid Megaco/H.248 message encoding.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is no performance advantage of building (and using) a 
      non-reentrant flex scanner over a reentrant flex scanner (if flex
      supports building such a scanner). </fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Please, observe that these performance figures are related to our 
        implementation in Erlang/OTP. Measurements of other implementations 
        using other tools and techniques may of course result in other 
        figures. </fo:block>
    </fo:block>
  <fo:block id="idp1354800" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.9  Testing and tools</fo:marker>1.9  Testing and tools</fo:block><fo:block id="idp1358960" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.1 
      Tracing</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We have instrumented our code in order to enable
      tracing. Running the application with tracing deactivated,
      causes a negligible performance overhead (an external call to a
      function which returns an atom). Activation of tracing does not
      require any recompilation of the code, since we rely on
      Erlang/OTP's built in support for dynamic trace activation. In
      our case tracing of calls to a given external function.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Event traces can be viewed in a generic message sequence chart
      tool, <fo:inline font-family="monospace">et</fo:inline>, or as standard output (events are written to stdio). </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">enable_trace</fo:inline>, 
      <fo:inline font-style="italic">disable_trace</fo:inline> and
      <fo:inline font-style="italic">set_trace</fo:inline> for
      more info. </fo:block>
  <fo:block id="idp1364336" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.2 
      Measurement and transformation</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We have included some simple tool(s) for codec measurement (meas),
      performance tests (mstone1 and mstone2) and message transformation.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The tool(s) are located in the example/meas directory.</fo:block>

    <fo:block id="idp1366144" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Requirement</fo:block>
      
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang/OTP, version R13B01 or later.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Version 3.11 or later of <fo:inline font-weight="bold">this</fo:inline> application.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Version 1.6.10 or later of the <fo:inline font-weight="bold">asn1</fo:inline> application. </fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The flex libraries. Without it, the flex powered codecs cannot 
            be used.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp1372352" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Meas results</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The results from the measurement run (meas) is four 
        excel-compatible textfiles: </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">decode_time.xls  -&gt; Decoding result</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">encode_time.xls  -&gt; Encoding result</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">total_time.xls   -&gt; Total (Decoding+encoding) result</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">message_size.xls -&gt; Message size</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp1378160" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Instruction</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The tool contain four things:
        </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The transformation module</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The measurement (meas) module(s)</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The mstone (mstone1 and mstone2) module(s)</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The basic message file</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>

      <fo:block id="idp1383728" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Message Transformation</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The messages used by the different tools are contained in 
          single message package file (see below for more info). The messages
          in this file is encoded with just one codec. During 
          measurement initiation, the messages are read and then transformed to all
          codec formats used in the measurement. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The message transformation is done by the transformation module.
          It is used to transform a set of messages encoded with one codec 
          into the other base codec's.</fo:block>
      

      <fo:block id="idp1386000" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Measurement(s)</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two different measurement tools: </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">meas</fo:inline>: </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used to perform codec measurements. That is, to see what 
              kind of performance can be expected by the different codecs 
              provided by the megaco application. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The measurement is done by iterating over the decode/encode 
              function for approx 2 seconds per message and counting 
              the number of decodes/encodes.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Is best run by modifying the meas.sh.skel skeleton script
              provided by the tool.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To run it manually do the following: </fo:block>
              <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        % erl -pa &lt;path-megaco-ebin-dir&gt; -pa &lt;path-to-meas-module-dir&gt;
        Erlang (BEAM) emulator version 5.6 [source]

        Eshell V5.7.1  (abort with ^G)
        1&gt; megaco_codec_meas:start().
        ...
        2&gt; halt().
        </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or to make it even easier, assuming a measure shall be 
              done on all the codecs (as above):</fo:block>
              <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        % erl -noshell -pa &lt;path-megaco-ebin-dir&gt; \\
              -pa &lt;path-to-meas-module-dir&gt; \\
              -s megaco_codec_meas -s init stop
        </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When run as above (this will take some time), the measurement 
              process is done as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
For each codec:
    For each message:
        Read the message from the file
            Detect message version
            Measure decode
                Measure encode
          Write results, encode, decode and total, to file
        </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>

          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">mstone1 and mstone2</fo:inline>: </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These are two different SMP performance monitoring tool(s). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">mstone1</fo:inline> creates a process for each codec config supported by 
              the megaco application and let them run for a specific 
              time (all at the same time), encoding and decoding 
              megaco messages. The number of messages processed in total 
              is the mstone1(1) value. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are different ways to run the mstone1 tool, e.g. with or without 
              the use of drivers, with <fo:inline font-weight="bold">only</fo:inline> flex-empowered configs. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Is best run by modifying the mstone1.sh.skel skeleton script
              provided by the tool.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">mstone2</fo:inline> is similar to the <fo:inline font-weight="bold">mstone1</fo:inline> tool,
              but in this case, each created process makes only <fo:inline font-weight="bold">one</fo:inline> run 
              through the messages and then exits. A soon as a process exits,
              a new process (with the same config and messages) is created to takes 
              its place. 
              The number of messages processed in total 
              is the mstone2(1) value. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Both these tools use the message package (time_test.msgs) provided
          with the tool(s), although it can run on any message package as long as
          it has the same structure. </fo:block>
      

      <fo:block id="idp1402032" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Message package file</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is simply an erlang compatible text-file with the following 
          structure: <fo:inline font-family="monospace">{codec_name(), messages_list()}</fo:inline>. </fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
codec_name() = pretty | compact | ber | per | erlang      (how the messages are encoded)
messages_list() = [{message_name(), message()}]
message_name() = atom()
message() = binary()
</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The codec name is the name of the codec with which all messages in
          the <fo:inline font-family="monospace">message_list()</fo:inline> has been encoded. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This file can be <fo:inline font-family="monospace">exported</fo:inline> to a file structure by calling the 
          <fo:inline font-style="italic">export_messages</fo:inline>
          function. This can be usefull if a measurement shall be done with
          an external tool. Exporting the messages creates a directory tree 
          with the following structure:
          </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;message package&gt;/pretty/&lt;message-files&gt;
                  compact/
                  per/
                  ber/&lt;message-files&gt;
                  erlang/
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file includes both version 1, 2 and version 3 messages.</fo:block>
      
    

    <fo:block id="idp1408848" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Notes</fo:block>
      

      <fo:block id="idp1409584" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Binary codecs</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two basic ways to use the binary encodings: 
          With package related name and termination id transformation
          (the 'native' encoding config) or without. This transformation 
          converts package related names and termination id's to a more 
          convenient internal form (equivalent with the decoded text message).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The transformation is done _after_ the actual decode has been 
          done.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Furthermore, it is possible to make use of a linked in driver that 
          performs some of the decode/encode, decode for ber and encode for per 
          (the 'driver' encoding config).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Therefor in the tests, binary codecs are tested with four 
          different encoding configs to determine exactly how the
          different options effect the performance: with transformation and 
          without driver ([]), without transformation and without driver 
          ([native]), with transformation and with driver ([driver]) and 
          finally without transformation and with driver ([driver,native]).</fo:block>
      

      <fo:block id="idp1413264" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Included test messages</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some of these messages are ripped from the call flow examples 
          in an old version of the RFC and others are created to test
          a specific feature of megaco. </fo:block>
      

      <fo:block id="idp1414768" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Measurement tool directory name</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Be sure <fo:inline font-weight="bold">not</fo:inline> no name the directory containing the measurement
          binaries starting with 'megaco-', e.g. megaco-meas. This will
          confuse the erlang application loader (erlang applications
          are named, e.g. megaco-1.0.2).</fo:block>
      
    
  <fo:block id="idp114144" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Megaco application is a framework for building
      applications on top of the Megaco/H.248 protocol. </fo:block>
  <fo:block page-break-before="always" id="idp795888" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">megaco</fo:marker>megaco</fo:block>Erlang module</fo:block>
  <fo:block/>
  megaco
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Interface module for the Megaco application</fo:block>
  

  <fo:block id="idp632800" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
megaco_mid() = ip4Address() | ip6Address() | 
               domainName() | deviceName() | 
               mtpAddress() 
ip4Address() = #'IP4Address'{}
ip6Address() = #'IP6Address'{}
domainName() = #'DomainName'{}
deviceName() = pathName() 
pathName()   = ia5String(1..64)
mtpAddress() = octetString(2..4)

action_request() = #'ActionRequest'{}
action_reply() = #'ActionReply'{}
error_desc() = #'ErrorDescriptor'{}
transaction_reply() = #'TransactionReply'{}
segment_no() = integer()

resend_indication() = flag | boolean()

property_parm() = #'PropertyParm'{}
property_group() = [property_parm()]
property_groups() = [property_group()]

sdp() = sdp_c() | sdp_o() | sdp_s() | sdp_i() | sdp_u() | 
        sdp_e() | sdp_p() | sdp_b() | sdp_z() | sdp_k() | 
        sdp_a() | sdp_a_rtpmap() | sdp_a_ptime() | 
        sdp_t() | sdp_r() | sdp_m()
sdp_v() = #megaco_sdp_v{} (Protocol version)
sdp_o() = #megaco_sdp_o{} (Owner/creator and session identifier)
sdp_s() = #megaco_sdp_s{} (Session name)
sdp_i() = #megaco_sdp_i{} (Session information)
sdp_u() = #megaco_sdp_u{} (URI of description)
sdp_e() = #megaco_sdp_e{} (Email address)
sdp_p() = #megaco_sdp_p{} (Phone number)
sdp_c() = #megaco_sdp_c{} (Connection information)
sdp_b() = #megaco_sdp_b{} (Bandwidth information)
sdp_k() = #megaco_sdp_k{} (Encryption key)
sdp_a() = #megaco_sdp_a{} (Session attribute)
sdp_a_rtpmap() = #megaco_sdp_a_rtpmap{}
sdp_a_ptime() = #megaco_sdp_a_ptime{}
sdp_a_quality() = #megaco_sdp_a_quality{}
sdp_a_fmtp() = #megaco_sdp_a_fmtp{}
sdp_z() = #megaco_sdp_z{} (Time zone adjustment)
sdp_t() = #megaco_sdp_t{} (Time the session is active)
sdp_r() = #megaco_sdp_r{} (Repeat times)
sdp_m() = #megaco_sdp_m{} (Media name and transport address)
sdp_property_parm() = sdp() | property_parm()
sdp_property_group() = [sdp_property_parm()]
sdp_property_groups() = [sdp_property_group()]

megaco_timer() = infinity | integer() &gt;= 0 | megaco_incr_timer()
megaco_incr_timer() = #megaco_incr_timer{}
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The record <fo:inline font-family="monospace">megaco_incr_timer</fo:inline> contains the following fields: </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">wait_for = integer() &gt;= 0</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The actual timer time.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">factor = integer() &gt;= 0</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The factor when calculating the new timer time 
          (<fo:inline font-family="monospace">wait_for</fo:inline>).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">incr = integer()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The increment value when calculating the new timer time 
          (<fo:inline font-family="monospace">wait_for</fo:inline>). Note that this value <fo:inline font-weight="bold">can</fo:inline> be negative
          and that a timer restart can therefor lead to a <fo:inline font-family="monospace">wait_for</fo:inline>
          value of zero! It is up to the user to be aware of the 
          consequences of a <fo:inline font-family="monospace">wait_for</fo:inline> value of zero. </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">max_retries = infinity | infinity_restartable | integer() &gt;= 0</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The maximum number of repetitions of the timer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is a special case for this field. When the 
          <fo:inline font-family="monospace">max_retries</fo:inline> has the value <fo:inline font-family="monospace">infinity_restartable</fo:inline>, 
          it means that the timer is restartable as long as some 
          external event occurs (e.g. receipt of a pending 
          message for instance). But the timer will never be
          restarted "by itself", i.e. when the timer expires 
          (whatever the timeout time), so does the timer. 
          Whenever the timer is restarted, the timeout time will 
          be calculated in the usual way! Also, as mentioned 
          above, beware the consequences of setting the value to
          <fo:inline font-family="monospace">infinity</fo:inline> if <fo:inline font-weight="bold">incr</fo:inline> has been set to an 
          negative value.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>

    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp634160">start() -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the Megaco application</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Users may either explicitly be registered with
          megaco:start_user/2 and/or be statically configured by
          setting the application environment variable 'users' to a
          list of {UserMid, Config} tuples. See the function
          megaco:start_user/2 for details.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1534704">stop() -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the Megaco application</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1535616">start_user(UserMid, Config) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserMid = megaco_mid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config  = [{user_info_item(), user_info_value()}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason  = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initial configuration of a user</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Requires the megaco application to be started. A user is
          either a Media Gateway (MG) or a Media Gateway Controller
          (MGC). One Erlang node may host many users.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A user is identified by its UserMid, which must be a legal
          Megaco MID.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Config is a list of {Item, Value} tuples.  See
          megaco:user_info/2 about which items and values that are valid.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1531120">stop_user(UserMid) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserMid = megaco_mid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason  = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delete the configuration of a user</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Requires that the user does not have any active connection.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp852560">user_info(UserMid) -&gt; [{Item, Value}]</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp853024">user_info(UserMid, Item) -&gt; Value | exit(Reason)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle  = user_info_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserMid = megaco_mid() </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item    = user_info_item()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value   = user_info_value()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason  = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lookup user information</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following Item's are valid:</fo:block>
        
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">connections</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lists all active connections for this user. Returns a
              list of megaco_conn_handle records.</fo:block>
            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">receive_handle</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Construct a megaco_receive_handle record from user config</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trans_id</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Current transaction id. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A positive integer or the atom 
              <fo:inline font-family="monospace">undefined_serial</fo:inline> (in case no messages has been sent).</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">min_trans_id</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First trans id. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A positive integer, defaults to 1.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">max_trans_id</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Last trans id. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A positive integer or <fo:inline font-family="monospace">infinity</fo:inline>, 
              defaults to <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">request_timer</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Wait for reply. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The timer is cancelled when a reply is received. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a pending message is received, the timer is 
              cancelled and the <fo:inline font-family="monospace">long_request_timer</fo:inline> is started instead 
              (see below). No resends will be performed from this point 
              (since we now know that the other side has received the 
              request). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the timer reaches an intermediate expire, the request
              is resent and the timer is restarted. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the timer reaches the final expire, either the function 
              <fo:inline font-family="monospace">megaco:call</fo:inline> will return with <fo:inline font-family="monospace">{error, timeout}</fo:inline>
              or the callback function <fo:inline font-family="monospace">handle_trans_reply</fo:inline> will be 
              called with <fo:inline font-family="monospace">UserReply = {error, timeout}</fo:inline> (if 
              <fo:inline font-family="monospace">megaco:cast</fo:inline> was used).</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A Megaco Timer (see explanation above), 
              defaults to <fo:inline font-family="monospace">#megaco_incr_timer{}</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">long_request_timer</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Wait for reply after having received a pending message. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the timer reaches an intermediate expire, the timer 
              is restarted. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a pending message is received, and the 
              <fo:inline font-family="monospace">long_request_timer</fo:inline>  
              is <fo:inline font-weight="bold">not</fo:inline> "on its final leg", the timer will be 
              restarted, and, if <fo:inline font-family="monospace">long_request_resend = true</fo:inline>, the
              request will be re-sent. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A Megaco Timer (see explanation above), 
              defaults to <fo:inline font-family="monospace">60 seconds</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">long_request_resend</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option indicates weather the request should be 
              resent until the reply is received,
              <fo:inline font-weight="bold">even</fo:inline> though a pending message has been received. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally, after a pending message has been received, 
              the request is not resent 
              (since a pending message is an indication that the
              request has been received). But since the reply (to the 
              request) can be lost, this behaviour has its values.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is of course pointless to set this value to <fo:inline font-weight="bold">true</fo:inline>
              unless the <fo:inline font-family="monospace">long_request_timer</fo:inline> (see above) is also set
              to an incremental timer (<fo:inline font-family="monospace">#megaco_incr_timer{}</fo:inline>). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">boolean</fo:inline>, 
              defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">reply_timer</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Wait for an ack. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a request is received, some info
              related to the reply is store internally (e.g. the
              binary of the reply). This info will live until either
              an ack is received or this timer expires. For instance,
              if the same request is received again (e.g. a request
              with the same transaction id), the (stored) reply will
              be (re-) sent automatically by megaco.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the timer is of type <fo:inline font-family="monospace">#megaco_incr_timer{}</fo:inline>, 
              then for each intermediate timout, the reply will be resent
              (this is valid until the ack is received or 
              the timer expires). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A Megaco Timer (see explanation above), defaults to 30000.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">request_keep_alive_timeout</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the timeout time for the request-keep-alive timer. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This timer is started when the <fo:inline font-weight="bold">first</fo:inline> reply to an asynchronous
              request (issued using the 
              <fo:inline font-style="italic">megaco:cast/3</fo:inline> function)
              arrives. As long as this timer is running, replies will 
              be delivered via the 
              <fo:inline font-style="italic">handle_trans_reply/4,5</fo:inline> 
              callback function, with their "arrival number" 
              (see <fo:inline font-family="monospace">UserReply</fo:inline> of the 
              <fo:inline font-style="italic">handle_trans_reply/4,5</fo:inline> 
              callback function). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Replies arriving after the timer has expired, will be 
              delivered using the 
              <fo:inline font-style="italic">handle_unexpected_trans/3,4</fo:inline> 
              callback function. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The timeout time can have the values: 
              <fo:inline font-family="monospace">plain | integer() &gt;= 0</fo:inline>. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-family="monospace">plain</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">call_proxy_gc_timeout</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Timeout time for the call proxy. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a request is sent using the 
              <fo:inline font-style="italic">call/3</fo:inline> function, 
              a proxy process is started to handle
              all replies. When the reply has been received and delivered 
              to the user, the proxy process continue to exist for as long
              as this option specifies. Any received messages, is passed on 
              to the user via the 
              <fo:inline font-style="italic">handle_unexpected_trans</fo:inline> 
              callback function. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The timeout time is in milliseconds. A value of 0 (zero) means
              that the proxy process will exit directly after the reply has 
              been delivered. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An integer &gt;= 0, defaults to 5000 (= 5 seconds).</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">auto_ack</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Automatic send transaction ack when the transaction
              reply has been received (see <fo:inline font-family="monospace">trans_ack</fo:inline> below). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is used for <fo:inline font-weight="bold">three-way-handshake</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">boolean</fo:inline>, defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trans_ack</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shall ack's be accumulated or not. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This property is only valid if <fo:inline font-family="monospace">auto_ack</fo:inline> is true.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">auto_ack</fo:inline> is true, then if <fo:inline font-family="monospace">trans_ack</fo:inline> is
              <fo:inline font-family="monospace">false</fo:inline>, ack's will be sent immediately. 
              If <fo:inline font-family="monospace">trans_ack</fo:inline> is <fo:inline font-family="monospace">true</fo:inline>, then 
              ack's will instead be sent to the transaction 
              sender process for accumulation and later sending 
              (see <fo:inline font-family="monospace">trans_ack_maxcount</fo:inline>, <fo:inline font-family="monospace">trans_req_maxcount</fo:inline>, 
              <fo:inline font-family="monospace">trans_req_maxsize</fo:inline>, <fo:inline font-family="monospace">trans_ack_maxcount</fo:inline> and 
              <fo:inline font-family="monospace">trans_timer</fo:inline>). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">transaction sender</fo:inline> for more info.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">boolean</fo:inline>, defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trans_ack_maxcount</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum number of accumulated ack's. At most this many ack's
              will be accumulated by the transaction sender (if started and 
              configured to accumulate ack's).</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">transaction sender</fo:inline> for more info. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">integer</fo:inline>, defaults to 10.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trans_req</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shall requests be accumulated or not. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">trans_req</fo:inline> is <fo:inline font-family="monospace">false</fo:inline>, then request(s)
              will be sent immediately (in its own message).</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">trans_req</fo:inline> is true, then request(s) will 
              instead be sent to the transaction sender process for 
              accumulation and later sending 
              (see <fo:inline font-family="monospace">trans_ack_maxcount</fo:inline>, <fo:inline font-family="monospace">trans_req_maxcount</fo:inline>, 
              <fo:inline font-family="monospace">trans_req_maxsize</fo:inline>, <fo:inline font-family="monospace">trans_ack_maxcount</fo:inline> and 
              <fo:inline font-family="monospace">trans_timer</fo:inline>). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">transaction sender</fo:inline> for more info. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">boolean</fo:inline>, defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trans_req_maxcount</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum number of accumulated requests. At most this many 
              requests will be accumulated by the transaction sender 
              (if started and configured to accumulate requests). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">transaction sender</fo:inline> for more info.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">integer</fo:inline>, defaults to 10.</fo:block>
            
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trans_req_maxsize</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum size of the accumulated requests. At most this much
              requests will be accumulated by the transaction sender 
              (if started and configured to accumulate requests).</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">transaction sender</fo:inline> for more info.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">integer</fo:inline>, defaults to 2048.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trans_timer</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Transaction sender timeout time. Has two functions. First, if 
              the value is 0, then transactions will not be accumulated 
              (e.g. the transaction sender process will not be started). 
              Second, if the value is greater then 0 and <fo:inline font-family="monospace">auto_ack</fo:inline> 
              and <fo:inline font-family="monospace">trans_ack</fo:inline> are both true or 
              if <fo:inline font-family="monospace">trans_req</fo:inline> is true, 
              then transaction sender will be started and transactions 
              (which is depending on the values of <fo:inline font-family="monospace">auto_ack</fo:inline>, 
              <fo:inline font-family="monospace">trans_ack</fo:inline> and <fo:inline font-family="monospace">trans_req</fo:inline>) will be accumulated,
              for later sending. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">transaction sender</fo:inline> for more info. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">integer</fo:inline>, defaults to 0.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pending_timer</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Automatically send pending if the timer expires before a
              transaction reply has been sent. This timer is also called 
              provisional response timer. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A Megaco Timer (see explanation above), defaults to 30000.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sent_pending_limit</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sent pending limit (see the MGOriginatedPendingLimit
              and the MGCOriginatedPendingLimit of the megaco root package).
              This parameter specifies how many pending messages that can
              be sent (for a given received transaction request).
              When the limit is exceeded, the transaction is aborted
              (see <fo:inline font-style="italic">handle_trans_request_abort</fo:inline>) and an error message 
              is sent to the other side. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that this has no effect on the actual sending of
              pending transactions. This is either implicit (e.g. when 
              receiving a re-sent transaction request for a request which
              is being processed) or controlled by the pending_timer,
              see above. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A positive integer or <fo:inline font-family="monospace">infinity</fo:inline>, 
              defaults to <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">recv_pending_limit</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receive pending limit (see the MGOriginatedPendingLimit
              and the MGCOriginatedPendingLimit of the megaco root package).
              This parameter specifies how many pending messages that can
              be received (for a sent transaction request).
              When the limit is exceeded, the transaction is considered
              lost, and an error returned to the user (through the call-back
              function <fo:inline font-weight="bold">handle_trans_reply</fo:inline>). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A positive integer or <fo:inline font-family="monospace">infinity</fo:inline>, 
              defaults to <fo:inline font-family="monospace">infinity</fo:inline>. </fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">send_mod</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Send callback module which exports send_message/2. The
              function SendMod:send_message(SendHandle, Binary) is
              invoked when the bytes needs to be transmitted to the
              remote user. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">atom</fo:inline>, defaults to <fo:inline font-family="monospace">megaco_tcp</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">encoding_mod</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encoding callback module which exports encode_message/2
              and decode_message/2. The function
              EncodingMod:encode_message(EncodingConfig,
              MegacoMessage) is invoked whenever a 'MegacoMessage'
              record needs to be translated into an Erlang binary. The
              function EncodingMod:decode_message(EncodingConfig,
              Binary) is invoked whenever an Erlang binary needs to be
              translated into a 'MegacoMessage' record. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">atom</fo:inline>, defaults to <fo:inline font-family="monospace">megaco_pretty_text_encoder</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">encoding_config</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encoding module config. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">list</fo:inline>, defaults to <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">protocol_version</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Actual protocol version. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">integer</fo:inline>, default is 1.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">strict_version</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Strict version control, i.e. when a message is received,
              verify that the version is that which was negotiated. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">boolean</fo:inline>, default is true.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">reply_data</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default reply data. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any term, defaults to the atom <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">user_mod</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Name of the user callback module. See the the reference
              manual for megaco_user for more info.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">user_args</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">List of extra arguments to the user callback
              functions. See the the reference manual for megaco_user
              for more info.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">threaded</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a received message contains several transaction requests, 
              this option indicates whether the requests should be handled
              sequentially in the same process (<fo:inline font-family="monospace">false</fo:inline>), or if each 
              request should be handled by its own process (<fo:inline font-family="monospace">true</fo:inline>
              i.e. a separate process is spawned for each request). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">boolean</fo:inline>, defaults to <fo:inline font-family="monospace">false</fo:inline>. </fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">resend_indication</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option indicates weather the transport module
              should be told if a message send is a resend or not. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-weight="bold">false</fo:inline>, megaco messages are sent using the
              <fo:inline font-style="italic">send_message</fo:inline> 
              function. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-weight="bold">true</fo:inline>, megaco message <fo:inline font-weight="bold">re-sends</fo:inline> are made using the
              <fo:inline font-style="italic">resend_message</fo:inline> 
              function. The initial message send is still done using the
              <fo:inline font-style="italic">send_message</fo:inline> 
              function. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The special value <fo:inline font-weight="bold">flag</fo:inline> instead indicates that the 
              function 
              <fo:inline font-style="italic">send_message/3</fo:inline> 
              shall be used. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">resend_indication()</fo:inline>, 
              defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">segment_reply_ind</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option specifies if the user shall be notified of received
              segment replies or not. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
              <fo:inline font-style="italic">handle_segment_reply</fo:inline> 
              callback function for more information. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">boolean</fo:inline>, 
              defaults to <fo:inline font-family="monospace">false</fo:inline>. </fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">segment_recv_timer</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This timer is started when the segment indicated by the
              <fo:inline font-family="monospace">segmentation complete token</fo:inline> is received, but all 
              segments has not yet been received.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the timer finally expires, a "megaco segments not
              received" (459) error message is sent to the other side
              and the user is notified with a <fo:inline font-family="monospace">segment timeout</fo:inline> <fo:inline font-family="monospace">UserReply</fo:inline> in either the
              <fo:inline font-style="italic">handle_trans_reply</fo:inline> callback function or 
              the return value of the 
              <fo:inline font-style="italic">call</fo:inline> function. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A Megaco Timer (see explanation above),
              defaults to <fo:inline font-family="monospace">10000</fo:inline>. </fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">segment_send</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shall outgoing messages be segmented or not: </fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">none</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do not segment outgoing reply messages. This is useful when
                  either it is known that messages are never to large or
                  that the transport protocol can handle such things
                  on its own (e.g. TCP or SCTP).</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">integer() &gt; 0</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Outgoing reply messages will be segmented as needed 
                  (see <fo:inline font-family="monospace">max_pdu_size</fo:inline> below). This value, K, indicate 
                  the outstanding window, i.e. how many segments can be 
                  outstanding (not acknowledged) at any given time. </fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">infinity</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Outgoing reply messages will be segmented as needed 
                  (see <fo:inline font-family="monospace">max_pdu_size</fo:inline> below). Segment messages 
                  are sent all at once (i.e. no acknowledgement awaited 
                  before sending the next segment). </fo:block>
              </fo:block></fo:block-container>
            </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-family="monospace">none</fo:inline>. </fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">max_pdu_size</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Max message size. If the encoded message (PDU) exceeds 
              this size, the message should be segmented, and then 
              encoded. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A positive integer or <fo:inline font-family="monospace">infinity</fo:inline>,
              defaults to <fo:inline font-family="monospace">infinity</fo:inline>. </fo:block>
          </fo:block></fo:block-container>
        </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp335760">update_user_info(UserMid, Item, Value) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserMid = megaco_mid() </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item    = user_info_item()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value   = user_info_value()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason  = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Update information about a user</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Requires that the user is started. See megaco:user_info/2
          about which items and values that are valid.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp341456">conn_info(ConnHandle) -&gt; [{Item, Value}]</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp341936">conn_info(ConnHandle, Item) -&gt; Value | exit(Reason)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle = #megaco_conn_handle{}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item       = conn_info_item()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value      = conn_info_value()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason     = {no_such_connection, ConnHandle} | term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lookup information about an active connection</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Requires that the connection is active.</fo:block>
        
        <fo:block space-after="0.25em" space-before="0.25em">

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">control_pid</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process identifier of the controlling process for a
              connection.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">send_handle</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opaque send handle whose contents is internal for the
              send module. May be any term.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">local_mid</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The local mid (of the connection, i.e. the own mid). 
              <fo:inline font-family="monospace">megaco_mid()</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">remote_mid</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The remote mid (of the connection). 
              <fo:inline font-family="monospace">megaco_mid()</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">receive_handle</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Construct a megaco_receive_handle record.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trans_id</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Next transaction id. A positive integer or the atom 
              <fo:inline font-family="monospace">undefined_serial</fo:inline> (only in case of error). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that transaction id's are (currently) maintained 
              on a per user basis so there is no way to be sure that 
              the value returned will actually be used for a transaction 
              sent on this connection (in case a user has several 
              connections, which is not at all unlikely). </fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">max_trans_id</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Last trans id. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A positive integer or <fo:inline font-family="monospace">infinity</fo:inline>, 
              defaults to <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">request_timer</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Wait for reply. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The timer is cancelled when a reply is received. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a pending message is received, the timer is 
              cancelled and the <fo:inline font-family="monospace">long_request_timer</fo:inline> is started instead 
              (see below). No resends will be performed from this point 
              (since we now know that the other side has received the 
              request). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the timer reaches an intermediate expire, the request
              is resent and the timer is restarted. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the timer reaches the final expire, either the function 
              <fo:inline font-family="monospace">megaco:call</fo:inline> will return with <fo:inline font-family="monospace">{error, timeout}</fo:inline>
              or the callback function <fo:inline font-family="monospace">handle_trans_reply</fo:inline> will be 
              called with <fo:inline font-family="monospace">UserReply = {error, timeout}</fo:inline> (if 
              <fo:inline font-family="monospace">megaco:cast</fo:inline> was used).</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A Megaco Timer (see explanation above), 
              defaults to #megaco_incr_timer{}.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">long_request_timer</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Wait for reply after having received a pending message. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the timer reaches an intermediate expire, the timer 
              restarted. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a pending message is received, and the 
              <fo:inline font-family="monospace">long_request_timer</fo:inline> 
              is <fo:inline font-weight="bold">not</fo:inline> "on its final leg", the timer will be 
              restarted, and, if <fo:inline font-family="monospace">long_request_resend = true</fo:inline>, the
              request will be re-sent. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A Megaco Timer (see explanation above), 
              defaults to <fo:inline font-family="monospace">60 seconds</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">request_keep_alive_timeout</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the timeout time for the request-keep-alive timer. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This timer is started when the <fo:inline font-weight="bold">first</fo:inline> reply to an asynchronous
              request (issued using the 
              <fo:inline font-style="italic">megaco:cast/3</fo:inline> function)
              arrives. As long as this timer is running, replies will 
              be delivered via the 
              <fo:inline font-style="italic">handle_trans_reply/4,5</fo:inline> 
              callback function, with their "arrival number" 
              (see <fo:inline font-family="monospace">UserReply</fo:inline> of the 
              <fo:inline font-style="italic">handle_trans_reply/4,5</fo:inline> 
              callback function). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Replies arriving after the timer has expired, will be 
              delivered using the 
              <fo:inline font-style="italic">handle_unexpected_trans/3,4</fo:inline> 
              callback function. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The timeout time can have the values: 
              <fo:inline font-family="monospace">plain | integer() &gt;= 0</fo:inline>. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-family="monospace">plain</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">long_request_resend</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option indicates weather the request should be 
              resent until the reply is received,
              <fo:inline font-weight="bold">even</fo:inline> though a pending message has been received. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally, after a pending message has been received, 
              the request is not resent 
              (since a pending message is an indication that the
              request has been received). But since the reply (to the 
              request) can be
              lost, this behaviour has its values.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is of course pointless to set this value to <fo:inline font-weight="bold">true</fo:inline>
              unless the <fo:inline font-family="monospace">long_request_timer</fo:inline> (see above) is also set
              to an incremental timer (<fo:inline font-family="monospace">#megaco_incr_timer{}</fo:inline>). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">boolean</fo:inline>, 
              defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">reply_timer</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Wait for an ack. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a request is received, some info
              related to the reply is store internally (e.g. the
              binary of the reply). This info will live until either
              an ack is received or this timer expires. For instance,
              if the same request is received again (e.g. a request
              with the same transaction id), the (stored) reply will
              be (re-) sent automatically by megaco.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the timer is of type <fo:inline font-family="monospace">#megaco_incr_timer{}</fo:inline>, 
              then for each intermediate timout, the reply will be resent
              (this is valid until the ack is received or 
              the timer expires). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A Megaco Timer (see explanation above), defaults to 30000.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">call_proxy_gc_timeout</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Timeout time for the call proxy. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a request is sent using the 
              <fo:inline font-style="italic">call/3</fo:inline> function, 
              a proxy process is started to handle
              all replies. When the reply has been received and delivered 
              to the user, the proxy process continue to exist for as long
              as this option specifies. Any received messages, is passed on 
              to the user via the 
              <fo:inline font-style="italic">handle_unexpected_trans</fo:inline> 
              callback function. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The timeout time is in milliseconds. A value of 0 (zero) means
              that the proxy process will exit directly after the reply has 
              been delivered. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An integer &gt;= 0, defaults to 5000 (= 5 seconds).</fo:block>
            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">auto_ack</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Automatic send transaction ack when the transaction
              reply has been received (see <fo:inline font-family="monospace">trans_ack</fo:inline> below). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is used for <fo:inline font-weight="bold">three-way-handshake</fo:inline>. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">boolean</fo:inline>, defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trans_ack</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shall ack's be accumulated or not. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This property is only valid if <fo:inline font-family="monospace">auto_ack</fo:inline> is true. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">auto_ack</fo:inline> is true, then if <fo:inline font-family="monospace">trans_ack</fo:inline> is
              <fo:inline font-family="monospace">false</fo:inline>, ack's will be sent immediately. 
              If <fo:inline font-family="monospace">trans_ack</fo:inline> is
              <fo:inline font-family="monospace">true</fo:inline>, then ack's will instead be sent to the transaction 
              sender process for accumulation and later sending 
              (see <fo:inline font-family="monospace">trans_ack_maxcount</fo:inline>, <fo:inline font-family="monospace">trans_req_maxcount</fo:inline>, 
              <fo:inline font-family="monospace">trans_req_maxsize</fo:inline>, <fo:inline font-family="monospace">trans_ack_maxcount</fo:inline> and 
              <fo:inline font-family="monospace">trans_timer</fo:inline>). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">transaction sender</fo:inline> for more info. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">boolean</fo:inline>, defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trans_ack_maxcount</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum number of accumulated ack's. At most this many ack's
              will be accumulated by the transaction sender (if started and 
              configured to accumulate ack's).</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">transaction sender</fo:inline> for more info.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An integer, defaults to 10.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trans_req</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shall requests be accumulated or not. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">trans_req</fo:inline> is <fo:inline font-family="monospace">false</fo:inline>, then request(s)
              will be sent immediately (in its own message). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">trans_req</fo:inline> is true, then request(s) will 
              instead be sent to the transaction sender process for 
              accumulation and later sending 
              (see <fo:inline font-family="monospace">trans_ack_maxcount</fo:inline>, <fo:inline font-family="monospace">trans_req_maxcount</fo:inline>, 
              <fo:inline font-family="monospace">trans_req_maxsize</fo:inline>, <fo:inline font-family="monospace">trans_ack_maxcount</fo:inline> and 
              <fo:inline font-family="monospace">trans_timer</fo:inline>). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">transaction sender</fo:inline> for more info. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">boolean</fo:inline>, defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trans_req_maxcount</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum number of accumulated requests. At most this many 
              requests will be accumulated by the transaction sender 
              (if started and configured to accumulate requests). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">transaction sender</fo:inline> for more info. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">integer</fo:inline>, defaults to 10.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trans_req_maxsize</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum size of the accumulated requests. At most this much
              requests will be accumulated by the transaction sender 
              (if started and configured to accumulate requests). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">transaction sender</fo:inline> for more info. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">integer</fo:inline>, defaults to 2048.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trans_timer</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Transaction sender timeout time. Has two functions. First, if 
              the value is 0, then transactions will not be accumulated 
              (e.g. the transaction sender process will not be started). 
              Second, if the value is greater then 0 and <fo:inline font-family="monospace">auto_ack</fo:inline> 
              and <fo:inline font-family="monospace">trans_ack</fo:inline> is true or if <fo:inline font-family="monospace">trans_req</fo:inline> is true, 
              then transaction sender will be started and transactions 
              (which is depending on the values of <fo:inline font-family="monospace">auto_ack</fo:inline>, 
              <fo:inline font-family="monospace">trans_ack</fo:inline> and <fo:inline font-family="monospace">trans_req</fo:inline>) will be accumulated,
              for later sending. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">transaction sender</fo:inline> for more info. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">integer</fo:inline>, defaults to 0.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pending_timer</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Automatic send transaction pending if the timer expires
              before a transaction reply has been sent. This timer is
              also called provisional response timer. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A Megaco Timer (see explanation above), defaults to 30000.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sent_pending_limit</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sent pending limit (see the MGOriginatedPendingLimit
              and the MGCOriginatedPendingLimit of the megaco root package).
              This parameter specifies how many pending messages that can
              be sent (for a given received transaction request).
              When the limit is exceeded, the transaction is aborted
              (see <fo:inline font-style="italic">handle_trans_request_abort</fo:inline>) and an error message 
              is sent to the other side. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that this has no effect on the actual sending of
              pending transactions. This is either implicit (e.g. when 
              receiving a re-sent transaction request for a request which
              is being processed) or controlled by the pending_timer,
              see above. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A positive integer or <fo:inline font-family="monospace">infinity</fo:inline>, 
              defaults to <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">recv_pending_limit</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receive pending limit (see the MGOriginatedPendingLimit
              and the MGCOriginatedPendingLimit of the megaco root package).
              This parameter specifies how many pending messages that can
              be received (for a sent transaction request).
              When the limit is exceeded, the transaction is considered
              lost, and an error returned to the user (through the call-back
              function <fo:inline font-weight="bold">handle_trans_reply</fo:inline>). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A positive integer or <fo:inline font-family="monospace">infinity</fo:inline>, 
              defaults to <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">send_mod</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Send callback module which exports send_message/2. The
              function SendMod:send_message(SendHandle, Binary) is
              invoked when the bytes needs to be transmitted to
              the remote user. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">atom</fo:inline>, defaults to <fo:inline font-family="monospace">megaco_tcp</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">encoding_mod</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encoding callback module which exports encode_message/2
              and decode_message/2. The function
              EncodingMod:encode_message(EncodingConfig, MegacoMessage)
              is invoked whenever a 'MegacoMessage' record needs to be
              translated into an Erlang binary. The function
              EncodingMod:decode_message(EncodingConfig, Binary) is
              invoked whenever an Erlang binary needs to be translated
              into a 'MegacoMessage' record. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">atom</fo:inline>, 
              defaults to <fo:inline font-family="monospace">megaco_pretty_text_encoder</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">encoding_config</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encoding module config. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">list</fo:inline>, defaults to [].</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">protocol_version</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Actual protocol version. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An positive integer, Current default is 1.</fo:block>
            
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">strict_version</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Strict version control, i.e. when a message is received,
              verify that the version is that which was negotiated. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">boolean</fo:inline>, default is true.</fo:block>
            
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">reply_data</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default reply data. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any term, defaults to the atom <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">threaded</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a received message contains several transaction requests, 
              this option indicates whether the requests should be handled
              sequentially in the same process (<fo:inline font-family="monospace">false</fo:inline>), or if each 
              request should be handled by its own process (<fo:inline font-family="monospace">true</fo:inline>
              i.e. a separate process is spawned for each request). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">boolean</fo:inline>, defaults to <fo:inline font-family="monospace">false</fo:inline>. </fo:block>
            
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">resend_indication</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option indicates weather the transport module
              should be told if a message send is a resend or not. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-weight="bold">false</fo:inline>, megaco messages are sent using the
              <fo:inline font-style="italic">send_message/2</fo:inline> 
              function. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-weight="bold">true</fo:inline>, megaco message <fo:inline font-weight="bold">re-sends</fo:inline> are made using the
              <fo:inline font-style="italic">resend_message</fo:inline> 
              function. The initial message send is still done using the
              <fo:inline font-style="italic">send_message</fo:inline> 
              function. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The special value <fo:inline font-weight="bold">flag</fo:inline> instead indicates that the 
              function 
              <fo:inline font-style="italic">send_message/3</fo:inline> 
              shall be used. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">resend_indication()</fo:inline>, 
              defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">segment_reply_ind</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option specifies if the user shall be notified of received
              segment replies or not. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See 
              <fo:inline font-style="italic">handle_segment_reply</fo:inline> 
              callback function for more information. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">boolean</fo:inline>, 
              defaults to <fo:inline font-family="monospace">false</fo:inline>. </fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">segment_recv_timer</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This timer is started when the segment indicated by the
              <fo:inline font-family="monospace">segmentation complete token</fo:inline> (e.g. the last of the segment
              which makes up the reply) is received, but all 
              segments has not yet been received.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the timer finally expires, a "megaco segments not
              received" (459) error message is sent to the other side
              and the user is notified with a 
              <fo:inline font-family="monospace">segment timeout</fo:inline> <fo:inline font-family="monospace">UserReply</fo:inline> in either the
              <fo:inline font-style="italic">handle_trans_reply</fo:inline> 
              callback function or 
              the return value of the 
              <fo:inline font-style="italic">call</fo:inline> function. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A Megaco Timer (see explanation above),
              defaults to <fo:inline font-family="monospace">10000</fo:inline>. </fo:block>

            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">segment_send</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shall outgoing messages be segmented or not: </fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">none</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do not segment outgoing reply messages. This is useful when
                  either it is known that messages are never to large or
                  that the transport protocol can handle such things
                  on its own (e.g. TCP or SCTP).</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">integer() &gt; 0</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Outgoing reply messages will be segmented as needed 
                  (see <fo:inline font-family="monospace">max_pdu_size</fo:inline> below). This value, K, indicate 
                  the outstanding window, i.e. how many segments can be 
                  outstanding (not acknowledged) at any given time. </fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">infinity</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Outgoing reply messages will be segmented as needed 
                  (see <fo:inline font-family="monospace">max_pdu_size</fo:inline> below). Segment messages 
                  are sent all at once (i.e. no acknowledgement awaited 
                  before sending the next segment). </fo:block>
              </fo:block></fo:block-container>
            </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-family="monospace">none</fo:inline>. </fo:block>
            
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">max_pdu_size</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Max message size. If the encoded message (PDU) exceeds 
              this size, the message should be segmented, and then 
              encoded. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A positive integer or <fo:inline font-family="monospace">infinity</fo:inline>,
              defaults to <fo:inline font-family="monospace">infinity</fo:inline>. </fo:block>
          </fo:block></fo:block-container>
        </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2626224">update_conn_info(ConnHandle, Item, Value) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle = #megaco_conn_handle{}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item       = conn_info_item()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value      = conn_info_value()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason     = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Update information about an active connection</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Requires that the connection is activated. See
          megaco:conn_info/2 about which items and values that are
          valid.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2631984">system_info() -&gt; [{Item, Value}] | exit(Reason)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2632464">system_info(Item) -&gt; Value | exit(Reason)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item = system_info_item()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lookup system information</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following items are valid:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">text_config</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The text encoding config.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">connections</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lists all active connections. Returns a list of
              megaco_conn_handle records.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">users</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lists all active users. Returns a list of
              megaco_mid()'s.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">n_active_requests</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer representing the number of requests
              that has originated from this Erlang node and still are
              active (and therefore consumes system resources).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">n_active_replies</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer representing the number of replies
              that has originated from this Erlang node and still are
              active (and therefore consumes system resources).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">n_active_connections</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer representing the number of active
              connections.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2646544">info() -&gt; Info</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Info = [{Key, Value}]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function produces a list of information about the megaco 
          application. Such as users and their config, connections 
          and their config, statistics and so on.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This information can be produced by the functions 
          <fo:inline font-style="italic">user_info</fo:inline>, 
          <fo:inline font-style="italic">conn_info</fo:inline>, 
          <fo:inline font-style="italic">system_info</fo:inline> and 
          <fo:inline font-style="italic">get_stats</fo:inline> 
          but this is a simple way to get it all at once.</fo:block>

         
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2654176">connect(ReceiveHandle, RemoteMid, SendHandle, ControlPid) -&gt; {ok, ConnHandle} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2654704">connect(ReceiveHandle, RemoteMid, SendHandle, ControlPid, Extra) -&gt; {ok, ConnHandle} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReceiveHandle = #megaco_receive_handle{}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RemoteMid     = preliminary_mid | megaco_mid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendHandle    = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ControlPid    = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle    = #megaco_conn_handle{}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason        = connect_reason() | handle_connect_reason() | term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">connect_reason() = {no_such_user, LocalMid} | {already_connected, ConnHandle} | term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">handle_connect_error() = {connection_refused, ConnData, ErrorInfo} | term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LocalMid      = megaco_mid()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnData      = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ErrorInfo     = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra         = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Establish a "virtual" connection</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Activates a connection to a remote user. When this is done
          the connection can be used to send messages (with
          SendMod:send_message/2). The ControlPid is the identifier
          of a process that controls the connection. That process will
          be supervised and if it dies, this will be detected and the
          UserMod:handle_disconnect/2 callback function will be
          invoked. See the megaco_user module for more info about the
          callback arguments. The connection may also explicitly be
          deactivated by invoking megaco:disconnect/2.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ControlPid may be the identity of a process residing on
          another Erlang node. This is useful when you want to
          distribute a user over several Erlang nodes. In such a case
          one of the nodes has the physical connection. When a user
          residing on one of the other nodes needs to send a request
          (with megaco:call/3 or megaco:cast/3), the message will
          encoded on the originating Erlang node, and then be
          forwarded to the node with the physical connection. When the
          reply arrives, it will be forwarded back to the originator.
          The distributed connection may explicitly be deactivated by
          a local call to megaco:disconnect/2 or implicitly when
          the physical connection is deactivated (with megaco:disconnect/2,
          killing the controlling process, halting the other node, ...).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The call of this function will trigger the callback
          function UserMod:handle_connect/2 to be invoked. See the
          megaco_user module for more info about the callback
          arguments.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A connection may be established in several ways:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">provisioned MID</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MG may explicitly invoke megaco:connect/4 and use
              a provisioned MID of the MGC as the RemoteMid.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">upgrade preliminary MID</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MG may explicitly invoke megaco:connect/4 with the
              atom 'preliminary_mid' as a temporary MID of the MGC,
              send an intial message, the Service Change Request, to
              the MGC and then wait for an initial message, the
              Service Change Reply. When the reply arrives, the Megaco
              application will pick the MID of the MGC from the
              message header and automatically upgrade the connection
              to be a "normal" connection. By using this method of
              establishing the connection, the callback function
              UserMod:handle_connect/2 to be invoked twice. First with
              a ConnHandle with the remote_mid-field set to
              preliminary_mid, and then when the connection upgrade is
              done with the remote_mid-field set to the actual MID of
              the MGC.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">automatic</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the MGC receives its first message, the Service
              Change Request, the Megaco application will
              automatically establish the connection by using the MG
              MID found in the message header as remote mid.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">distributed</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a user (MG/MGC) is distributed over several nodes,
              it is required that the node hosting the connection
              already has activated the connection and that it is
              in the "normal" state. The RemoteMid must be a real
              Megaco MID and not a preliminary_mid.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An initial megaco_receive_handle record may be obtained
          with megaco:user_info(UserMid, receive_handle)</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The send handle is provided by the preferred transport
          module, e.g. megaco_tcp, megaco_udp. Read the documentation
          about each transport module about the details.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The connect is done in two steps: first an internal 
          <fo:inline font-family="monospace">connection setup</fo:inline> and then by calling the user 
          <fo:inline font-style="italic">handle_connect</fo:inline> 
          callback function. The first step could result in 
          an error with <fo:inline font-family="monospace">Reason = connect_reason()</fo:inline> and the second 
          an error with <fo:inline font-family="monospace">Reason = handle_connect_reason()</fo:inline>: </fo:block>

	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">connect_reason()</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error with this reason is generated by the 
              megaco application itself.</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">handle_connect_reason()</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error with this reason is caused by the user 
              <fo:inline font-style="italic">handle_connect</fo:inline> 
              callback function either returning an error 
              or an invalid value.</fo:block>
	  </fo:block></fo:block-container>

	</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Extra</fo:inline> can be any <fo:inline font-family="monospace">term()</fo:inline> 
          except the atom <fo:inline font-family="monospace">ignore_extra</fo:inline>. 
          It is passed (back) to the user via the callback function 
          <fo:inline font-style="italic">handle_connect/3</fo:inline>. </fo:block>

         
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2685920">disconnect(ConnHandle, DiscoReason) -&gt; ok | {error, ErrReason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle  = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DiscoReason =  term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ErrReason   =  term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tear down a "virtual" connection</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Causes the UserMod:handle_disconnect/2 callback function to
          be invoked. See the megaco_user module for more info about
          the callback arguments.</fo:block>

         
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2691536">call(ConnHandle, Actions, Options) -&gt; {ProtocolVersion, UserReply}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle     = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Actions        = action_reqs() | [action_reqs()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">action_reqs()  = binary() | [action_request()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options        = [send_option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_option()  = {request_timer, megaco_timer()} | {long_request_timer, megaco_timer()} | {send_handle, term()} | {protocol_version, integer()} | {call_proxy_gc_timeout, call_proxy_gc_timeout()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ProtocolVersion = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserReply       = user_reply() | [user_reply()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">user_reply()    = success() | failure()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">success()       = {ok, result()} | {ok, result(), extra()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">result()        = message_result() | segment_result()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">message_result() = action_reps()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">segment_result() = segments_ok()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">failure()        = {error, reason()} | {error, reason(), extra()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reason()         = message_reason() | segment_reason() | user_cancel_reason() | send_reason() | other_reason()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">message_reason() = error_desc()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">segment_reason() = {segment, segments_ok(), segments_err()} | {segment_timeout, missing_segments(), segments_ok(), segments_err()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">segments_ok()   = [segment_ok()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">segment_ok()    = {segment_no(), action_reps()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">segments_err()  = [segment_err()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">segment_err()   = {segment_no(), error_desc()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">missing_segments() = [segment_no()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">user_cancel_reason() = {user_cancel, reason_for_user_cancel()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reason_for_user_cancel() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_reason() = send_cancelled_reason() | send_failed_reason()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_cancelled_reason() = {send_message_cancelled, reason_for_send_cancel()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reason_for_send_cancel() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_failed_reason()    = {send_message_failed, reason_for_send_failure()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reason_for_send_failure() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">other_reason()   = {wrong_mid, WrongMid, RightMid, TR} | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">WrongMid = mid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RightMid = mid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TR = transaction_reply()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">action_reps()    = [action_reply()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">call_proxy_gc_timeout() = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">extra()          = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends one or more transaction request(s) and waits for the 
          reply.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When sending one transaction in a message, <fo:inline font-family="monospace">Actions</fo:inline> should be 
          <fo:inline font-family="monospace">action_reqs()</fo:inline> (<fo:inline font-family="monospace">UserReply</fo:inline> will then be 
          <fo:inline font-family="monospace">user_reply()</fo:inline>). When sending several transactions in a message,
          <fo:inline font-family="monospace">Actions</fo:inline> should be <fo:inline font-family="monospace">[action_reqs()]</fo:inline> (<fo:inline font-family="monospace">UserReply</fo:inline> 
          will then be <fo:inline font-family="monospace">[user_reply()]</fo:inline>). Each element of the list is 
          part of one transaction.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For some of <fo:inline font-weight="bold">our</fo:inline> codecs (not binary), it is also possible 
          to pre-encode the actions, in which case <fo:inline font-family="monospace">Actions</fo:inline> will be 
          either a <fo:inline font-family="monospace">binary()</fo:inline> or <fo:inline font-family="monospace">[binary()]</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns when the reply arrives, when the
          request timer eventually times out or when the outstanding
          requests are explicitly cancelled.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default values of the send options are obtained by
          <fo:inline font-family="monospace">megaco:conn_info(ConnHandle, Item)</fo:inline>. But the send options 
          above, may explicitly be overridden.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ProtocolVersion</fo:inline> version is the version actually encoded
          in the reply message.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At <fo:inline font-family="monospace">success()</fo:inline>, the <fo:inline font-family="monospace">UserReply</fo:inline> contains a list of 
          'ActionReply' records possibly containing error indications.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">message_error()</fo:inline>, indicates that the remote user has
          replied with an explicit transactionError.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">user_cancel_error()</fo:inline>, indicates that the request has been
          canceled by the user. <fo:inline font-family="monospace">reason_for_user_cancel()</fo:inline> is the reason
          given in the call to the <fo:inline font-style="italic">cancel</fo:inline>
          function. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">send_error()</fo:inline>, indicates that the send function of the 
          megaco transport callback module failed to send the request. 
          There are two separate cases: <fo:inline font-family="monospace">send_cancelled_reason()</fo:inline> and 
          <fo:inline font-family="monospace">send_failed_reason()</fo:inline>. 
          The first is the result of the send function returning 
          <fo:inline font-family="monospace">{cancel, Reason}</fo:inline> and the second is some other kind of 
          erroneous return value. See the 
          <fo:inline font-style="italic">send_message</fo:inline>
          function for more info. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">other_error()</fo:inline>, indicates some other error such as 
          timeout.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more info about the <fo:inline font-family="monospace">extra()</fo:inline> part of the 
          result, see the 
          <fo:inline font-style="italic">note</fo:inline>
          in the user callback module documentation. </fo:block>



        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2731440">cast(ConnHandle, Actions, Options) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle     = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Actions        = action_reqs() | [action_reqs()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">action_reqs()  = binary() | [action_request()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options        = [send_option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_option()  = {request_keep_alive_timeout, request_keep_alive_timeout()} | {request_timer, megaco_timer()} | {long_request_timer, megaco_timer()} | {send_handle, term()} | {reply_data, reply_data()} | {protocol_version, integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">request_keep_alive_timeout() = plain | integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason         =  term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends one or more transaction request(s) but does NOT wait for a reply</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When sending one transaction in a message, <fo:inline font-family="monospace">Actions</fo:inline> should be 
          <fo:inline font-family="monospace">action_reqs()</fo:inline>. When sending several transactions in a message,
          <fo:inline font-family="monospace">Actions</fo:inline> should be <fo:inline font-family="monospace">[action_reqs()]</fo:inline>. Each element of the 
          list is part of one transaction.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For some of <fo:inline font-weight="bold">our</fo:inline> codecs (not binary), it is also possible 
          to pre-encode the actions, in which case <fo:inline font-family="monospace">Actions</fo:inline> will be 
          either a <fo:inline font-family="monospace">binary()</fo:inline> or <fo:inline font-family="monospace">[binary()]</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default values of the send options are obtained by
          megaco:conn_info(ConnHandle, Item). But the send options above,
          may explicitly be overridden.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ProtocolVersion version is the version actually encoded
          in the reply message.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The callback function UserMod:handle_trans_reply/4 is invoked
          when the reply arrives, when the request timer eventually
          times out or when the outstanding requests are explicitly
          cancelled. See the megaco_user module for more info about
          the callback arguments.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Given as UserData argument to UserMod:handle_trans_reply/4.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2745408">encode_actions(ConnHandle, Actions, Options) -&gt; {ok, BinOrBins} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle     = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Actions        = action_reqs() | [action_reqs()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">action_reqs()  = [#'ActionRequest'{}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options        = [send_option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_option()  = {request_timer, megaco_timer()} | {long_request_timer, megaco_timer()} | {send_handle, term()} | {protocol_version, integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">BinOrBins      = binary() | [binary()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason         = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes lists of action requests for one or more transaction 
          request(s).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When encoding action requests for one transaction, 
          <fo:inline font-family="monospace">Actions</fo:inline> should be <fo:inline font-family="monospace">action_reqs()</fo:inline>. 
          When encoding action requests for several transactions,
          <fo:inline font-family="monospace">Actions</fo:inline> should be <fo:inline font-family="monospace">[action_reqs()]</fo:inline>. Each element 
          of the list is part of one transaction.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2754592">token_tag2string(Tag) -&gt; Result</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2755056">token_tag2string(Tag, EncoderMod) -&gt; Result</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2755536">token_tag2string(Tag, EncoderMod, Version) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tag = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncoderMod = pretty | compact | encoder_module()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">encoder_module() = megaco_pretty_text_encoder | megaco_compact_text_encoder | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Version = int_version() | atom_version()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int_version() = 1 | 2 | 3</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">atom_version() = v1 | v2 | v3 | prev3c | prev3b</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = string() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Convert a token tag to a string</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no encoder module is given, the default is used 
          (which is pretty).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no or an unknown version is given, 
          the <fo:inline font-weight="bold">best</fo:inline> version is used (which is v3).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no match is found for <fo:inline font-family="monospace">Tag</fo:inline>, <fo:inline font-family="monospace">Result</fo:inline> will be the 
          empty string (<fo:inline font-family="monospace">[]</fo:inline>).</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2765904">cancel(ConnHandle, CancelReason) -&gt; ok | {error, ErrReason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle   = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CancelReason =  term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ErrReason    =  term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Cancel all outstanding messages for this connection</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This causes outstanding megaco:call/3 requests to return.
          The callback functions UserMod:handle_reply/4 and
          UserMod:handle_trans_ack/4 are also invoked where it
          applies.  See the megaco_user module for more info about the
          callback arguments.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2771360">process_received_message(ReceiveHandle, ControlPid, SendHandle, BinMsg) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2771872">process_received_message(ReceiveHandle, ControlPid, SendHandle, BinMsg, Extra) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReceiveHandle = #megaco_receive_handle{}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ControlPid    = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendHandle    = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">BinMsg        = binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra         = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Process a received message</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is intended to be invoked by some
          transport modules when get an incoming message. Which
          transport that actually is used is up to the user to
          choose.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The message is delivered as an Erlang binary and is decoded
          by the encoding module stated in the receive handle together
          with its encoding config (also in the receive
          handle). Depending of the outcome of the decoding various
          callback functions will be invoked. See megaco_user for more
          info about the callback arguments.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The argument <fo:inline font-family="monospace">Extra</fo:inline> is just an opaque data structure passed to the user 
          via the callback functions in the 
          <fo:inline font-style="italic">user callback module</fo:inline>. 
          Note however that if <fo:inline font-family="monospace">Extra</fo:inline> has the value 
          <fo:inline font-family="monospace">extra_undefined</fo:inline> the argument will be ignored (same as if 
          <fo:inline font-family="monospace">process_received_message/4</fo:inline> had been called). 
          See the documentation for the behaviour of the callback module,
          <fo:inline font-style="italic">megaco_user</fo:inline>, for more info. </fo:block> 
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that all processing is done in the context of the calling 
          process. A transport module could call this function via one of the
          <fo:inline font-family="monospace">spawn</fo:inline> functions (e.g. <fo:inline font-family="monospace">spawn_opt</fo:inline>). See also 
          <fo:inline font-family="monospace">receive_message/4,5</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the message cannot be decoded the following callback
          function will be invoked:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">UserMod:handle_syntax_error/3</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the decoded message instead of transactions contains a
          message error, the following callback function will be
          invoked:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">UserMod:handle_message_error/3</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the decoded message happens to be received before the
          connection is established, a new "virtual" connection is
          established. This is typically the case for the Media
          Gateway Controller (MGC) upon the first Service Change.
          When this occurs the following callback function will be
          invoked:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">UserMod:handle_connect/2</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each transaction request in the decoded message the
          following callback function will be invoked:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">UserMod:handle_trans_request/3</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each transaction reply in the decoded message the reply
          is returned to the user. Either the originating function
          megaco:call/3 will return.  Or in case the originating
          function was megaco:case/3 the following callback function
          will be invoked:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">UserMod:handle_trans_reply/4</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a transaction acknowledgement is received it is
          possible that user has decided not to bother about the
          acknowledgement. But in case the return value from
          UserMod:handle_trans_request/3 indicates that the
          acknowledgement is important the following callback function
          will be invoked:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">UserMod:handle_trans_ack/4</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See the megaco_user module for more info about the callback
          arguments.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2799024">receive_message(ReceiveHandle, ControlPid, SendHandle, BinMsg) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2799520">receive_message(ReceiveHandle, ControlPid, SendHandle, BinMsg, Extra) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReceiveHandle = #megaco_receive_handle{}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ControlPid    = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendHandle    = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">BinMsg        = binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra         = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Process a received message</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a callback function intended to be invoked by some
          transport modules when get an incoming message. Which
          transport that actually is used is up to the user to
          choose.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In principle, this function calls the 
          <fo:inline font-family="monospace">process_received_message/4</fo:inline> function via a <fo:inline font-family="monospace">spawn</fo:inline> to
          perform the actual processing.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For further information see the 
          <fo:inline font-style="italic">process_received_message/4</fo:inline> 
          function.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2808448">parse_digit_map(DigitMapBody) -&gt; {ok, ParsedDigitMap} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DigitMapBody       = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ParsedDigitMap     = parsed_digit_map()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">parsed_digit_map() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason             = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parses a digit map body</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parses a digit map body, represented as a list of
          characters, into a list of state transitions suited to
          be evaluated by megaco:eval_digit_map/1,2.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2814192">eval_digit_map(DigitMap) -&gt; {ok, MatchResult} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2814688">eval_digit_map(DigitMap, Timers) -&gt; {ok, MatchResult} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DigitMap           = #'DigitMapValue'{} | parsed_digit_map()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">parsed_digit_map() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ParsedDigitMap     = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timers             = ignore() | reject()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ignore()           = ignore | {ignore, digit_map_value()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reject()           = reject | {reject, digit_map_value()} | digit_map_value()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchResult        = {Kind, Letters} | {Kind, Letters, Extra}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Kind               = kind()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">kind()             = full | unambiguous</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Letters            = [letter()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">letter()           = $0..$9 | $a .. $k</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra              = letter()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason             = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Collect digit map letters according to the digit map.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When evaluating a digit map, a state machine waits for
          timeouts and letters reported by
          megaco:report_digit_event/2. The length of the various
          timeouts are defined in the digit_map_value() record.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a complete sequence of valid events has been received,
          the result is returned as a list of letters.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two options for handling syntax errors (that is
          when an unexpected event is received when the digit map
          evaluator is expecting some other event). The unexpected
          events may either be ignored or rejected. The latter means
          that the evaluation is aborted and an error is returned. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2826192">report_digit_event(DigitMapEvalPid, Events) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DigitMapEvalPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Events          = Event | [Event]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Event           = letter() | pause() | cancel()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">letter()        = $0..$9 | $a .. $k | $A .. $K</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">pause()         = one_second() | ten_seconds()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">one_second()    = $s | $S</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ten_seconds()   = $l | $L</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">cancel()        = $z | $Z | cancel</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason          = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Send one or more events to the event collector process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Send one or more events to a process that is evaluating a
          digit map, that is a process that is executing
          megaco:eval_digit_map/1,2.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the events <fo:inline font-family="monospace">$s | $S</fo:inline>, <fo:inline font-family="monospace">l | $L</fo:inline> and
          <fo:inline font-family="monospace">$z | $Z</fo:inline> has nothing to do with the timers using
          the same characters.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2836176">test_digit_event(DigitMap, Events) -&gt; {ok, Kind, Letters} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DigitMap           = #'DigitMapValue'{} | parsed_digit_map()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">parsed_digit_map() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ParsedDigitMap     = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timers             = ignore() | reject()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ignore()           = ignore | {ignore, digit_map_value()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reject()           = reject | {reject, digit_map_value()} | digit_map_value()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DigitMapEvalPid    = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Events             = Event | [Event]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Event              = letter() | pause() | cancel()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Kind               = kind()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">kind()             = full | unambiguous</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Letters            = [letter()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">letter()           = $0..$9 | $a .. $k | $A .. $K</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">pause()            = one_second() | ten_seconds()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">one_second()       = $s | $S</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ten_seconds()      = $l | $L</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">cancel    ()       = $z | $Z | cancel</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason             = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Feed digit map collector with events and return the result</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function starts the evaluation of a digit map with
          megaco:eval_digit_map/1 and sends a sequence of events to it
          megaco:report_digit_event/2 in order to simplify testing of
          digit maps.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2848768">encode_sdp(SDP) -&gt; {ok, PP} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SDP = sdp_property_parm() | sdp_property_group() | sdp_property_groups() | asn1_NOVALUE</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PP = property_parm() | property_group() | property_groups() | asn1_NOVALUE</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encode (generate) an SDP construct.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a <fo:inline font-family="monospace">property_parm()</fo:inline> is found as part of the input
          (<fo:inline font-family="monospace">SDP</fo:inline>) then it is left unchanged.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function performs the following transformation:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">sdp()                 -&gt; property_parm()</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">sdp_property_group()  -&gt; property_group()</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">sdp_property_groups() -&gt; property_groups()</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2858912">decode_sdp(PP) -&gt; {ok, SDP} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PP = property_parm() | property_group() | property_groups() | asn1_NOVALUE</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SDP = sdp() | decode_sdp_property_group() | decode_sdp_property_groups() | asn1_NOVALUE</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">decode_sdp() = sdp() | {property_parm(), DecodeError}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">decode_sdp_property_group() = [decode_sdp()]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">decode_sdp_property_groups() = [decode_sdp_property_group()]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DecodeError = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decode (parse) a property parameter construct.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When decoding <fo:inline font-family="monospace">property_group()</fo:inline> or 
          <fo:inline font-family="monospace">property_groups()</fo:inline>, 
          those property parameter constructs that cannot be decoded
          (either because of decode error or because they are unknown),
          will be returned as a two-tuple. The first element of which 
          will be the (undecoded) property parameter and the other the 
          actual reason. 
          This means that the caller of this function has to expect not 
          only sdp-records, but also this two-tuple construct.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function performs the following transformation:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">property_parm()   -&gt; sdp()</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">property_group()  -&gt; sdp_property_group()</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">property_groups() -&gt; sdp_property_groups()</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2871360">get_sdp_record_from_PropertGroup(Type, PG) -&gt; [sdp()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = v | c | m | o | a | b | t | r | z | k | s | i | u | e | p</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PG = sdp_property_group()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retreive all the sdp records of type <fo:inline font-family="monospace">Type</fo:inline> from the
          property group <fo:inline font-family="monospace">PG</fo:inline>.</fo:block>

        
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2877584">versions1() -&gt; {ok, VersionInfo} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2878064">versions2() -&gt; {ok, Info} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">VersionInfo = [version_info()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">version_info() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Utility functions used to retrieve some system and
          application info.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The difference between the two functions is in how they get
          the modules to check. <fo:inline font-family="monospace">versions1</fo:inline> uses the 
          app-file and <fo:inline font-family="monospace">versions2</fo:inline> uses the function 
          <fo:inline font-family="monospace">application:get_key</fo:inline>.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2884704">print_version_info() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2885168">print_version_info(VersionInfo) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">VersionInfo = [version_info()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">version_info() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Utility function to produce a formated printout of the versions 
          info generated by the <fo:inline font-family="monospace">versions1</fo:inline> and <fo:inline font-family="monospace">versions2</fo:inline> 
          functions.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function print_version_info/0 uses the result of function
          version1/0 as <fo:inline font-family="monospace">VersionInfo</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example: </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
           {ok, V} = megaco:versions1(), megaco:format_versions(V). 
        </fo:block>
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2892288">enable_trace(Level, Destination) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Level       = max | min | 0 &lt;= integer() &lt;= 100</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Destination = File | Port | HandlerSpec | io</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File        = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port        = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">HandleSpec  = {HandlerFun, Data}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">HandleFun   = fun() (two arguments)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data        = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to start megaco tracing at a given 
          <fo:inline font-family="monospace">Level</fo:inline> and direct result to the given <fo:inline font-family="monospace">Destination</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It starts a tracer server and then sets the proper match spec 
          (according to <fo:inline font-family="monospace">Level</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the case when <fo:inline font-family="monospace">Destination</fo:inline> is <fo:inline font-family="monospace">File</fo:inline>, the printable 
          megaco trace events will be printed to the file <fo:inline font-family="monospace">File</fo:inline> using
          plain <fo:inline font-family="monospace">io:format/2</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the case when <fo:inline font-family="monospace">Destination</fo:inline> is <fo:inline font-family="monospace">io</fo:inline>, the printable 
          megaco trace events will be printed on stdout using plain 
          <fo:inline font-family="monospace">io:format/2</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-family="monospace">dbg</fo:inline> for further information.</fo:block>
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2905808">disable_trace() -&gt; void()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to stop megaco tracing.</fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2908656">set_trace(Level) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Level = max | min | 0 &lt;= integer() &lt;= 100</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to change the megaco trace level.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that tracing has already been enabled (see 
          <fo:inline font-family="monospace">enable_trace</fo:inline> above).</fo:block>

        
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2913952">get_stats() -&gt; {ok, TotalStats} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2914432">get_stats(GlobalCounter) -&gt; {ok, CounterStats} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2914928">get_stats(ConnHandle) -&gt; {ok, ConnHandleStats} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2915424">get_stats(ConnHandle, Counter) -&gt; {ok, integer()} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TotalStats = [total_stats()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">total_stats() = {conn_handle(), [stats()]} | {global_counter(), integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GlobalCounter = global_counter()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GlobalCounterStats = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandleStats = [stats()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">stats() = {counter(), integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Counter = counter()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">counter() = medGwyGatewayNumTimerRecovery |  medGwyGatewayNumErrors</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">global_counter() = medGwyGatewayNumErrors</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retreive the (SNMP) statistic counters maintained by the 
          megaco application. The global
          counters handle events that cannot be attributed to 
          a single connection (e.g. protocol errors that occur 
          before the connection has been properly setup).</fo:block>
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2924000">reset_stats() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2924448">reset_stats(ConnHandle) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reset all related (SNMP) statistics counters.</fo:block>
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2928048">test_request(ConnHandle, Version, EncodingMod, EncodingConfig, Actions) -&gt; {MegaMsg, EncodeRes}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle     = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Version        = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncodingMod    = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncodingConfig = Encoding configuration</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Actions        = A list</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MegaMsg        = #'MegacoMessage'{}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncodeRes      = {ok, Bin} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Bin            = binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason         = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tests if the Actions argument is correctly composed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is only intended for testing purposes. It's
          supposed to have a same kind of interface as the <fo:inline font-style="italic">call</fo:inline> or <fo:inline font-style="italic">cast</fo:inline> functions (with the additions
          of the <fo:inline font-family="monospace">EncodingMod</fo:inline> and <fo:inline font-family="monospace">EncodingConfig</fo:inline>
          arguments). It composes a complete megaco message end
          attempts to encode it. The return value, will be a tuple of
          the composed megaco message and the encode result. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2938672">test_reply(ConnHandle, Version, EncodingMod, EncodingConfig, Reply) -&gt; {MegaMsg, EncodeRes}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle     = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Version        = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncodingMod    = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncodingConfig = A list</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply          = actual_reply()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MegaMsg        = #'MegacoMessage'{}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncodeRes      = {ok, Bin} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Bin            = binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason         = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tests if the Reply argument is correctly composed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is only intended for testing purposes. It's
          supposed to test the <fo:inline font-family="monospace">actual_reply()</fo:inline> return value of
          the callback functions 
          <fo:inline font-style="italic">handle_trans_request</fo:inline>
          and 
          <fo:inline font-style="italic">handle_trans_long_request</fo:inline>
          functions (with the additions of the <fo:inline font-family="monospace">EncodingMod</fo:inline> and
          <fo:inline font-family="monospace">EncodingConfig</fo:inline> arguments). It composes a complete
          megaco message end attempts to encode it. The return value,
          will be a tuple of the composed megaco message and the
          encode result.</fo:block>
      </fo:block>
  

<fo:block page-break-before="always" id="idp2957248" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">megaco_edist_compress</fo:marker>megaco_edist_compress</fo:block>Erlang module</fo:block>
  <fo:block/>
  megaco_edist_compress
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions should be exported from a 
      <fo:inline font-family="monospace">megaco_edist_compress</fo:inline> callback module:</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2960128">Module:encode(R, Version) -&gt; T</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">R = megaco_message() | transaction() | action_reply() | action_request() | command_request()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Version = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">T = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compress a megaco component. The erlang dist encoder makes no 
          assumption on the how or even if the component is compressed. </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2964384">Module:decode(T, Version) -&gt; R</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">T = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Version = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">R = megaco_message() | transaction() | action_reply() | action_request() | command_request()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decompress a megaco component. </fo:block>
      </fo:block>
  

<fo:block page-break-before="always" id="idp2976496" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">megaco_encoder</fo:marker>megaco_encoder</fo:block>Erlang module</fo:block>
  <fo:block/>
  megaco_encoder
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions should be exported from a 
      <fo:inline font-family="monospace">megaco_encoder</fo:inline> callback module:</fo:block>

  

  <fo:block id="idp2979088" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
megaco_message() = #'MegacoMessage{}'
transaction() = {transactionRequest,     transaction_request()}      |
                {transactionPending,     transaction_reply()}        |
                {transactionReply,       transaction_pending()}      |
                {transactionResponseAck, transaction_response_ack()} |
                {segmentReply,           segment_reply()}
transaction_request() = #'TransactionRequest'{}
transaction_pending() = #'TransactionPending'{}
transaction_reply() = #'TransactionReply'{}
transaction_response_ack() = [transaction_ack()]
transaction_ack() = #'TransactionAck'{}
segment_reply() = #'SegmentReply'{}
action_request() = #'ActionRequest'{}
action_reply() = #'ActionReply'{}
    </fo:block>

    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2982256">Module:encode_message(EncodingConfig, Version, Message) -&gt; {ok, Bin} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncodingConfig = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Version = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Message = megaco_message()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Bin = binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encode a megaco message.</fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2987856">Module:decode_message(EncodingConfig, Version, Bin) -&gt; {ok, Message} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncodingConfig = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Version = integer() | dynamic</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Message = megaco_message()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Bin = binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decode a megaco message. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that if the Version argument is <fo:inline font-family="monospace">dynamic</fo:inline>, the
          decoder should try to figure out the actual version from the
          message itself and then use the proper decoder, e.g. version 1.
          <fo:block/>If on the other hand the Version argument is an integer, 
          it means that this is the expected version of the message and 
          the decoder for that version should be used.</fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2994992">Module:decode_mini_message(EncodingConfig, Version, Bin) -&gt; {ok, Message} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncodingConfig = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Version = integer() | dynamic</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Message = megaco_message()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Bin = binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Perform a minimal decode of a megaco message. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The purpose of this function is to do a minimal decode of
          Megaco message. A successfull result is a <fo:inline font-family="monospace">'MegacoMessage'</fo:inline> 
          in which only version and mid has been initiated. This function 
          is used by the megaco_messenger module when the 
          <fo:inline font-family="monospace">decode_message/3</fo:inline> function fails to figure out the mid 
          (the actual sender) of the message.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note again that a successfull decode only returns a
          partially initiated message.</fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3002800">Module:encode_transaction(EncodingConfig, Version, Transaction) -&gt; OK | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncodingConfig = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Version = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Transaction = transaction()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OK = {ok, Bin}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Bin = binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = not_implemented | OtherReason</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OtherReason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encode a megaco transaction. If this, for whatever reason, 
          is not supported, the function should return the error reason 
          <fo:inline font-family="monospace">not_implemented</fo:inline>. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This functionality is used both when the transaction sender is 
          used and for segmentation. So, for either of those to work, this 
          function <fo:inline font-weight="bold">must</fo:inline> be fully supported! </fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3011360">Module:encode_action_requests(EncodingConfig, Version, ARs) -&gt; OK | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncodingConfig = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Version = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ARs = action_requests()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">action_requests() = [action_request()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OK = {ok, Bin}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Bin = binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = not_implemented | OtherReason</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OtherReason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encode megaco action requests. This function is called when 
          the user calls the function 
          <fo:inline font-style="italic">encode_actions/3</fo:inline>.
          If that function is never used or if the codec cannot support this
          (the encoding of individual actions), then return with error reason 
          <fo:inline font-family="monospace">not_implemented</fo:inline>. </fo:block>

	
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3020176">Module:encode_action_reply(EncodingConfig, Version, AR) -&gt; OK | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncodingConfig = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Version = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AR = action_reply()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OK = {ok, Bin}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Bin = binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = not_implemented | OtherReason</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OtherReason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encode a megaco action reply. If this, for whatever reason, 
          is not supported, the function should return the error reason 
          <fo:inline font-family="monospace">not_implemented</fo:inline>. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used when segmentation has been configured. 
          So, for this to work, this function <fo:inline font-weight="bold">must</fo:inline> be fully 
          supported! </fo:block>
      </fo:block>

  

<fo:block page-break-before="always" id="idp3036064" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">megaco_transport</fo:marker>megaco_transport</fo:block>Erlang module</fo:block>
  <fo:block/>
  megaco_transport
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions should be exported from a 
      <fo:inline font-family="monospace">megaco_transport</fo:inline> callback module:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">send_message/2</fo:inline> [<fo:inline font-family="monospace">mandatory</fo:inline>]</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">send_message/3</fo:inline> [<fo:inline font-family="monospace">optional</fo:inline>]</fo:block> 
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">resend_message/2</fo:inline> [<fo:inline font-family="monospace">optional</fo:inline>]</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3046384">Module:send_message(Handle, Msg) -&gt; ok | {cancel, Reason} | Error</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3046880">Module:send_message(Handle, Msg, Resend) -&gt; ok | {cancel, Reason} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Msg = binary() | iolist()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Resend = boolean()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Send a megaco message. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the function returns <fo:inline font-family="monospace">{cancel, Reason}</fo:inline>, 
          this means the transport module decided not to send the message. 
          This is <fo:inline font-weight="bold">not</fo:inline> an error. No error messages will be issued 
          and no error counters incremented. 
          What actions this will result in depends on what kind of
          message was sent. 
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the case of requests, megaco will cancel the message in much 
          the same way as if <fo:inline font-family="monospace">megaco:cancel</fo:inline> had been called 
          (after a successfull send). The information will be propagated
          back to the user differently depending on how the request(s) where
          issued: For requests issued using 
          <fo:inline font-style="italic">megaco:call</fo:inline>, the info
          will be delivered in the return value. For requests issued 
          using <fo:inline font-family="monospace">megaco:cast</fo:inline> the info will be delivered 
          via a call to the callback function 
          <fo:inline font-style="italic">handle_trans_reply</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the case of reply, megaco will cancel the reply and information
          of this will be returned to the user via a call to the 
          callback function 
          <fo:inline font-style="italic">handle_trans_ack</fo:inline>. </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">send_message/3</fo:inline> will only be called if the 
          <fo:inline font-style="italic">resend_indication</fo:inline>
          config option has been set to the value <fo:inline font-family="monospace">flag</fo:inline>. The third 
          argument, <fo:inline font-family="monospace">Resend</fo:inline> then indicates if the message send is 
          a resend or not. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3061248">Module:resend_message(Handle, Msg) -&gt; ok | {cancel, Reason} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Msg = binary() | iolist()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Re-send a megaco message. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that this function will only be called if the user has set the 
          <fo:inline font-style="italic">resend_indication</fo:inline> 
          config option to <fo:inline font-family="monospace">true</fo:inline><fo:inline font-weight="bold">and</fo:inline> it is in fact a message 
          resend. If not <fo:inline font-weight="bold">both</fo:inline> of these condition's are meet, 
          <fo:inline font-family="monospace">send_message</fo:inline> will be called. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the function returns <fo:inline font-family="monospace">{cancel, Reason}</fo:inline>, this means the 
          transport module decided not to send the message. 
          This is <fo:inline font-weight="bold">not</fo:inline> an error. No error messages will be issued 
          and no error counters incremented. 
          What actions this will result in depends on what kind of
          message was sent. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the case of requests, megaco will cancel the message in much 
          the same way as if <fo:inline font-family="monospace">megaco:cancel</fo:inline> had been called 
          (after a successfull send). The information will be propagated
          back to the user differently depending on how the request(s) where
          issued: For requests issued using 
          <fo:inline font-style="italic">megaco:call</fo:inline>, the info
          will be delivered in the return value. For requests issued 
          using <fo:inline font-family="monospace">megaco:cast</fo:inline> the info will be delivered via a call
          to the callback function 
          <fo:inline font-style="italic">handle_trans_reply</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the case of reply, megaco will cancel the reply and information
          of this will be returned to the user via a call to the 
          callback function 
          <fo:inline font-style="italic">handle_trans_ack</fo:inline>. </fo:block>
      </fo:block>
  

<fo:block page-break-before="always" id="idp3082896" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">megaco_tcp</fo:marker>megaco_tcp</fo:block>Erlang module</fo:block>
  <fo:block/>
  megaco_tcp
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module contains the public interface to the TPKT (TCP/IP) version
      transport protocol for Megaco/H.248.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3085408">start_transport() -&gt; {ok, TransportRef}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TransportRef = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used for starting the TCP/IP transport service.
          Use exit(TransportRef, Reason) to stop the transport service.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3088528">listen(TransportRef, ListenPortSpecList) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TransportRef = pid() | regname()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionListPerPort = [Option]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = {port, integer()} |{options, list()} |{receive_handle, term()}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used for starting new TPKT listening socket
          for TCP/IP.  The option list contains the socket
          definitions.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3092640">connect(TransportRef, OptionList) -&gt; {ok, Handle, ControlPid} |  {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TransportRef = pid() | regname()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionList = [Option]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = {host, Ipaddr} | {port, integer()}  |{options, list()} |{receive_handle, term()} |{module, atom()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = socket_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ControlPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to open a TPKT connection.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">module</fo:inline> option makes it possible for the user to provide
          their own callback module. The <fo:inline font-family="monospace">receive_message/4</fo:inline> or
          <fo:inline font-family="monospace">process_received_message/4</fo:inline> functions of this module is called 
          when a new message is received (which one depends on the size of the 
          message; small - receive_message, large - process_received_message). 
          Default value is <fo:inline font-weight="bold">megaco</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3100624">close(Handle) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = socket_handle()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used for closing an active TPKT connection.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3103664">socket(Handle) -&gt; Socket</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = socket_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = inet_socket()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to convert a socket_handle() to
          a inet_socket(). inet_socket() is a plain socket,
          see the inet module for more info.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3107264">send_message(Handle, Message) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = socket_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Message = binary() | iolist()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a message on a connection.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3110752">block(Handle) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = socket_handle()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stop receiving incoming messages on the socket.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3113776">unblock(Handle) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = socket_handle()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starting to receive incoming messages from the socket again.</fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3117376">upgrade_receive_handle(ControlPid) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ControlPid = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Update the receive handle of the control process (e.g. after
          having changed protocol version).</fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3121040">get_stats() -&gt; {ok, TotalStats} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3121520">get_stats(SendHandle) -&gt; {ok, SendHandleStats} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3122016">get_stats(SendHandle, Counter) -&gt; {ok, CounterStats} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TotalStats = [send_handle_stats()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">total_stats() = {send_handle(), [stats()]}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendHandle = send_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendHandleStats = [stats()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Counter = tcp_stats_counter()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CounterStats = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">stats() = {tcp_stats_counter(), integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">tcp_stats_counter() = medGwyGatewayNumInMessages |  medGwyGatewayNumInOctets | medGwyGatewayNumOutMessages | medGwyGatewayNumOutOctets | medGwyGatewayNumErrors</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retreive the TCP related (SNMP) statistics counters.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3128944">reset_stats() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3129392">reset_stats(SendHandle) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendHandle = send_handle()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reset all TCP related (SNMP) statistics counters.</fo:block>
      </fo:block>
  

<fo:block page-break-before="always" id="idp3140384" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">megaco_udp</fo:marker>megaco_udp</fo:block>Erlang module</fo:block>
  <fo:block/>
  megaco_udp
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module contains the public interface to the UDP/IP version
      transport protocol for Megaco/H.248.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3142896">start_transport() -&gt; {ok, TransportRef}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TransportRef = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used for starting the UDP/IP transport service.
          Use exit(TransportRef, Reason) to stop the transport service.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3146016">open(TransportRef, OptionList) -&gt;  {ok, Handle, ControlPid} |  {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TransportRef = pid() | regname()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionList = [option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">option() = {port, integer()} |{options, list()} |{receive_handle, receive_handle()} |{module, atom()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = socket_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">receive_handle() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ControlPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to open an UDP/IP socket.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">module</fo:inline> option makes it possible for the user to provide
          their own callback module. The functions <fo:inline font-family="monospace">receive_message/4</fo:inline> or
          <fo:inline font-family="monospace">process_received_message/4</fo:inline> of this module is called when a new 
          message is received (which one depends on the size of the message; 
          small - receive_message, large - process_received_message). 
          Default value is <fo:inline font-weight="bold">megaco</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3154432">close(Handle, Msg) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = socket_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Msg</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used for closing an active UDP socket.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3157920">socket(Handle) -&gt; Socket</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = socket_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = inet_socket()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to convert a socket_handle() to
          a inet_socket(). inet_socket() is a plain socket,
          see the inet module for more info.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3161520">create_send_handle(Handle, Host, Port) -&gt; send_handle()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = socket_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Host = {A,B,C,D} | string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a send handle from a transport handle.  The send
          handle is intended to be used by megaco_udp:send_message/2.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3165568">send_message(SendHandle, Msg) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendHandle = send_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Message = binary() | iolist()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a message on a socket. The send handle is obtained by
          megaco_udp:create_send_handle/3. Increments the NumOutMessages
          and NumOutOctets counters if message successfully sent. In case
          of a failure to send, the NumErrors counter is <fo:inline font-weight="bold">not</fo:inline>
          incremented. This is done elsewhere in the megaco app.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3169792">block(Handle) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = socket_handle()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stop receiving incoming messages on the socket.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3172816">unblock(Handle) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = socket_handle()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starting to receive incoming messages from the socket again.</fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3176416">upgrade_receive_handle(ControlPid, NewHandle) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ControlPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewHandle = receive_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">receive_handle() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Update the receive handle of the control process (e.g. after
          having changed protocol version).</fo:block>
        
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3181008">get_stats() -&gt; {ok, TotalStats} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3181488">get_stats(SendHandle) -&gt; {ok, SendHandleStats} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3181984">get_stats(SendHandle, Counter) -&gt; {ok, CounterStats} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TotalStats = [total_stats()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">total_stats() = {send_handle(), [stats()]}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendHandle = send_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendHandleStats = [stats()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Counter = udp_stats_counter()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CounterStats = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">stats() = {udp_stats_counter(), integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">tcp_stats_counter() = medGwyGatewayNumInMessages |  medGwyGatewayNumInOctets | medGwyGatewayNumOutMessages | medGwyGatewayNumOutOctets | medGwyGatewayNumErrors</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retreive the UDP related (SNMP) statistics counters.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3188912">reset_stats() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3189360">reset_stats(SendHandle) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SendHandle = send_handle()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reset all TCP related (SNMP) statistics counters.</fo:block>
      </fo:block>
  

<fo:block page-break-before="always" id="idp3200352" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">megaco_user</fo:marker>megaco_user</fo:block>Erlang module</fo:block>
  <fo:block/>
  megaco_user
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module defines the callback behaviour of Megaco users.  A
      megaco_user compliant callback module must export the following
      functions: </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">handle_connect/2,3</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">handle_disconnect/3</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">handle_syntax_error/3,4</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">handle_message_error/3,4</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>



      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">handle_trans_request/3,4</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">handle_trans_long_request/3,4</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">handle_trans_reply/4,5</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">handle_trans_ack/4,5</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">handle_unexpected_trans/3,4</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">handle_trans_request_abort/4,5</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">handle_segment_reply/5,6</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of them and their exact signatures are explained 
      below. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">user_args</fo:inline> configuration parameter which may be used to
      extend the argument list of the callback functions. For example,
      the handle_connect function takes by default two arguments:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        handle_connect(Handle, Version)
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">but if the <fo:inline font-family="monospace">user_args</fo:inline> parameter is set to a longer
      list, such as <fo:inline font-family="monospace">[SomePid,SomeTableRef]</fo:inline>, the callback
      function is expected to have these (in this case two) extra
      arguments last in the argument list:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        handle_connect(Handle, Version, SomePid, SomeTableRef)
    </fo:block>

    
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Must of the functions  below has an optional <fo:inline font-family="monospace">Extra</fo:inline> argument (e.g. 
        <fo:inline font-style="italic">handle_unexpected_trans/4</fo:inline>). 
        The functions which takes this argument will be called if and only if one 
        of the functions 
        <fo:inline font-style="italic">receive_message/5</fo:inline> or 
        <fo:inline font-style="italic">process_received_message/5</fo:inline> 
        was called with the <fo:inline font-family="monospace">Extra</fo:inline> argument different than 
        <fo:inline font-family="monospace">ignore_extra</fo:inline>. </fo:block>
    </fo:block>

  

  <fo:block id="idp3227856" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
action_request() = #'ActionRequest'{}
action_reply() = #'ActionReply'{}
error_desc() = #'ErrorDescriptor'{}
segment_no() = integer()
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
conn_handle() = #megaco_conn_handle{}    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The record initially returned by <fo:inline font-family="monospace">megaco:connect/4,5</fo:inline>. 
      It identifies a "virtual" connection and may be reused after a 
      reconnect (disconnect + connect).</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
protocol_version() = integer()    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Is the actual protocol version. In most cases the protocol
      version is retrieved from the processed message, but there
      are exceptions:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">handle_connect/2,3</fo:inline> is triggered by an 
          explicit call to <fo:inline font-family="monospace">megaco:connect/4,5</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">handle_disconnect/3</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">handle_syntax_error/3</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In these cases, the ProtocolVersion default
      version is obtained from the static connection
      configuration:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">megaco:conn_info(ConnHandle, protocol_version)</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3240880">handle_connect(ConnHandle, ProtocolVersion) -&gt; ok | error | {error,ErrorDescr}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3241392">handle_connect(ConnHandle, ProtocolVersion, Extra]) -&gt; ok | error | {error,ErrorDescr}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle      = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ProtocolVersion = protocol_version()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ErrorDescr      = error_desc()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra           = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Invoked when a new connection is established</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Connections may either be established by an explicit call to
          megaco:connect/4 or implicitly at the first invocation of
          megaco:receive_message/3.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally a Media Gateway (MG) connects explicitly while a Media
          Gateway Controller (MGC) connects implicitly.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At the Media Gateway Controller (MGC) side it is possible to reject
          a connection request (and send a message error reply to the gateway)
          by returning <fo:inline font-family="monospace">{error, ErrorDescr}</fo:inline> or simply <fo:inline font-family="monospace">error</fo:inline> which
          generates an error descriptor with code 402 (unauthorized) and 
          reason "Connection refused by user" (this is also the case for all 
          unknown results, such as exit signals or throw).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">note</fo:inline> 
          above about the <fo:inline font-family="monospace">Extra</fo:inline> argument in 
          <fo:inline font-family="monospace">handle_message_error/4</fo:inline>. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">handle_connect/3</fo:inline> (with <fo:inline font-family="monospace">Extra</fo:inline>) 
          can also be called as a result of a call to the 
          <fo:inline font-style="italic">megaco:connect/5</fo:inline> function
          (if that function is called with the 
          <fo:inline font-family="monospace">Extra</fo:inline> argument different than <fo:inline font-family="monospace">ignore_extra</fo:inline>. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3254496">handle_disconnect(ConnHandle, ProtocolVersion, Reason) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle      = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ProtocolVersion = protocol_version()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Invoked when a connection is teared down</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The disconnect may either be made explicitly by a call to
          megaco:disconnect/2 or implicitly when the control process
          of the connection dies.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3259824">handle_syntax_error(ReceiveHandle, ProtocolVersion, DefaultED) -&gt; reply | {reply, ED} | no_reply | {no_reply, ED} </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3260368">handle_syntax_error(ReceiveHandle, ProtocolVersion, DefaultED, Extra) -&gt; reply | {reply, ED} | no_reply | {no_reply, ED} </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReceiveHandle    = receive_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ProtocolVersion  = protocol_version()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DefaultED        = error_desc()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ED               = error_desc()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra            = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Invoked when a received message had syntax errors</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Incoming messages is delivered by megaco:receive_message/4
          and normally decoded successfully. But if the decoding
          failed this function is called in order to decide if the
          originator should get a reply message (reply) or if the reply
          silently should be discarded (no_reply).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Syntax errors are detected locally on this side of the
          protocol and may have many causes, e.g. a malfunctioning
          transport layer, wrong encoder/decoder selected, bad
          configuration of the selected encoder/decoder etc.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The error descriptor defaults to <fo:inline font-family="monospace">DefaultED</fo:inline>,
          but can be overridden with an alternate one by
          returning <fo:inline font-family="monospace">{reply,ED}</fo:inline> or <fo:inline font-family="monospace">{no_reply,ED}</fo:inline>
          instead of <fo:inline font-family="monospace">reply</fo:inline> and <fo:inline font-family="monospace">no_reply</fo:inline> respectively.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any other return values (including exit signals or throw) and the
          <fo:inline font-family="monospace">DefaultED</fo:inline> will be used. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">note</fo:inline> 
          above about the <fo:inline font-family="monospace">Extra</fo:inline> argument in 
          <fo:inline font-family="monospace">handle_syntax_error/4</fo:inline>. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3273376">handle_message_error(ConnHandle, ProtocolVersion, ErrorDescr) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3273872">handle_message_error(ConnHandle, ProtocolVersion, ErrorDescr, Extra) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle      = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ProtocolVersion = protocol_version()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ErrorDescr      = error_desc()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra           = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Invoked when a received message just contains an error
          instead of a list of transactions.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Incoming messages is delivered by megaco:receive_message/4
          and successfully decoded. Normally a message contains a list
          of transactions, but it may instead contain an
          ErrorDescriptor on top level of the message.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Message errors are detected remotely on the other side of
          the protocol. And you probably don't want to reply to it,
          but it may indicate that you have outstanding transactions
          that not will get any response (request -&gt; reply; reply -&gt;
          ack).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">note</fo:inline> 
          above about the <fo:inline font-family="monospace">Extra</fo:inline> argument in 
          <fo:inline font-family="monospace">handle_message_error/4</fo:inline>. </fo:block>


        
      </fo:block>



    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3284288">handle_trans_request(ConnHandle, ProtocolVersion, ActionRequests) -&gt; pending() | reply() | ignore_trans_request</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3284832">handle_trans_request(ConnHandle, ProtocolVersion, ActionRequests, Extra) -&gt; pending() | reply() | ignore_trans_request</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle      = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ProtocolVersion = protocol_version()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ActionRequests  = [action_request()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra           = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">pending()       = {pending, req_data()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">req_data()      = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reply()         = {ack_action(), actual_reply()} | {ack_action(), actual_reply(), send_options()} </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ack_action()    = discard_ack | {handle_ack, ack_data()} | {handle_pending_ack, ack_data()} | {handle_sloppy_ack, ack_data()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">actual_reply()  = [action_reply()] | error_desc()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ack_data()      = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_options()  = [send_option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_option()   = {reply_timer, megaco_timer()} | {send_handle, term()} | {protocol_version, integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra           = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Invoked for each transaction request</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Incoming messages is delivered by megaco:receive_message/4
          and successfully decoded. Normally a message contains a list
          of transactions and this function is invoked for each
          TransactionRequest in the message.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function takes a list of 'ActionRequest' records and
          has three main options:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Return ignore_trans_request</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decide that these action requests shall be ignored
              completely.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Return pending()</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decide that the processing of these action requests
              will take a long time and that the originator should get
              an immediate 'TransactionPending' reply as interim
              response. The actual processing of these action requests
              instead should be delegated to the the
              handle_trans_long_request/3 callback function with the
              req_data() as one of its arguments. </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Return reply()</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Process the action requests and either return an
              error_descr() indicating some fatal error or a list of
              action replies (wildcarded or not). </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If for some reason megaco is unable to deliver the reply,
              the reason for this will be passed to the user via a call
              to the callback function 
              <fo:inline font-style="italic">handle_trans_ack</fo:inline>,
              unless <fo:inline font-family="monospace">ack_action() = discard_ack</fo:inline>. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ack_action() is  either:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">discard_ack</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Meaning that you don't care if the reply is
                  acknowledged or not.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{handle_ack, ack_data()} | {handle_ack, ack_data(), send_options()}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Meaning that you want an immediate acknowledgement
                  when the other part receives this transaction
                  reply. When the acknowledgement eventually is
                  received, the handle_trans_ack/4 callback function
                  will be invoked with the ack_data() as one of its
                  arguments. ack_data() may be any Erlang term.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{handle_pending_ack, ack_data()} | {handle_pending_ack, ack_data(), send_options()}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This has the same effect as the above, 
                  <fo:inline font-weight="bold">if and only if</fo:inline> megaco has sent at least one 
                  pending message for this request (during the processing
                  of the request). If no pending message has been sent, then 
                  immediate acknowledgement will <fo:inline font-weight="bold">not</fo:inline> be 
                  requested. </fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that this only works as specified if the 
                  <fo:inline font-family="monospace">sent_pending_limit</fo:inline> config option has been set to 
                  an integer value. </fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{handle_sloppy_ack, ack_data()}| {handle_sloppy_ack, ack_data(), send_options()}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Meaning that you want an acknowledgement <fo:inline font-weight="bold">sometime</fo:inline>.
                  When the acknowledgement eventually is received, the 
                  handle_trans_ack/4 callback function will be invoked with 
                  the ack_data() as one of its arguments. ack_data() may be 
                  any Erlang term.</fo:block>
              </fo:block></fo:block-container>
            </fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any other return values (including exit signals or throw) will 
          result in an error descriptor with code 500 (internal gateway error) 
          and the module name (of the callback module) as reason. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">note</fo:inline> 
          above about the <fo:inline font-family="monospace">Extra</fo:inline> argument in 
          <fo:inline font-family="monospace">handle_trans_request/4</fo:inline>. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3316048">handle_trans_long_request(ConnHandle, ProtocolVersion, ReqData) -&gt; reply()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3316560">handle_trans_long_request(ConnHandle, ProtocolVersion, ReqData, Extra) -&gt; reply()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle      = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ProtocolVersion = protocol_version()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReqData         = req_data()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra           = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">req_data()      = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reply()         = {ack_action(), actual_reply()} | {ack_action(), actual_reply(), send_options()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ack_action()    = discard_ack | {handle_ack, ack_data()} | {handle_sloppy_ack, ack_data()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">actual_reply()  = [action_reply()] | error_desc()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ack_data()      = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_options()  = [send_option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_option()   = {reply_timer, megaco_timer()} | {send_handle, term()} | {protocol_version, integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra           = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optionally invoked for a time consuming transaction request</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If this function gets invoked or not is controlled by the
          reply from the preceding call to handle_trans_request/3.
          The handle_trans_request/3 function may decide to process
          the action requests itself or to delegate the processing to
          this function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The req_data() argument to this function is the Erlang term
          returned by handle_trans_request/3.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any other return values (including exit signals or throw) will 
          result in an error descriptor with code 500 (internal gateway error)
          and the module name (of the callback module) as reason. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">note</fo:inline> 
          above about the <fo:inline font-family="monospace">Extra</fo:inline> argument in 
          <fo:inline font-family="monospace">handle_trans_long_request/4</fo:inline>. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3330048">handle_trans_reply(ConnHandle, ProtocolVersion, UserReply, ReplyData) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3330560">handle_trans_reply(ConnHandle, ProtocolVersion, UserReply, ReplyData, Extra) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle      = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ProtocolVersion = protocol_version()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserReply       = success() | failure()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">success()       = {ok, result()} </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">result()        = transaction_result() | segment_result()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">transaction_result() = action_reps()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">segment_result() = {segment_no(), last_segment(), action_reps()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">action_reps()   = [action_reply()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">failure()       = {error, reason()} | {error, ReplyNo, reason()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reason()  = transaction_reason() | segment_reason() | user_cancel_reason() | send_reason() | other_reason()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">transaction_reason() = error_desc()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">segment_reason() = {segment_no(), last_segment(), error_desc()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">other_reason()   =  timeout | {segment_timeout, missing_segments()} | exceeded_recv_pending_limit | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">last_segment()  = bool()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">missing_segments() = [segment_no()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">user_cancel_reason() = {user_cancel, reason_for_user_cancel()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reason_for_user_cancel() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_reason() = send_cancelled_reason() | send_failed_reason()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_cancelled_reason() = {send_message_cancelled, reason_for_send_cancel()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reason_for_send_cancel() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_failed_reason() = {send_message_failed, reason_for_send_failure()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reason_for_send_failure() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReplyData       = reply_data()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReplyNo         = integer() &gt; 0</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reply_data()    = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra           = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optionally invoked for a transaction reply</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The sender of a transaction request has the option of
          deciding, whether the originating Erlang process should
          synchronously wait (<fo:inline font-family="monospace">megaco:call/3</fo:inline>) for a reply or if the
          message should be sent asynchronously (<fo:inline font-family="monospace">megaco:cast/3</fo:inline>) and
          the processing of the reply should be delegated this
          callback function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that if the reply is segmented (split into several smaller 
          messages; segments), then some extra info, segment number and 
          an indication if all segments of a reply has been received or
          not, is also included in the <fo:inline font-family="monospace">UserReply</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ReplyData</fo:inline> defaults to 
          <fo:inline font-family="monospace">megaco:lookup(ConnHandle, reply_data)</fo:inline>, 
          but may be explicitly overridden by a
          <fo:inline font-family="monospace">megaco:cast/3</fo:inline> option in order to forward info about the
          calling context of the originating process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At <fo:inline font-family="monospace">success()</fo:inline>, the <fo:inline font-family="monospace">UserReply</fo:inline> either contains:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of 'ActionReply' records possibly containing 
              error indications.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A tuple of size three containing: 
              the segment number, 
              the <fo:inline font-family="monospace">last segment indicator</fo:inline> and finally 
              a list of 'ActionReply' records possibly containing error 
              indications. This is of course only possible if the 
              reply was segmented. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">failure()</fo:inline> indicates an local or external error and
          can be one of the following: </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">transaction_reason()</fo:inline>, indicates that the remote 
              user has replied with an explicit transactionError.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">segment_reason()</fo:inline>, indicates that the remote user 
              has replied with an explicit transactionError for this 
              segment. This is of course only possible if the reply was 
              segmented. </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">user_cancel_reason()</fo:inline>, indicates that the request 
              has been canceled by the user. <fo:inline font-family="monospace">reason_for_user_cancel()</fo:inline> 
              is the reason given in the call to the 
              <fo:inline font-style="italic">cancel</fo:inline>
              function.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">send_reason()</fo:inline>, indicates that the transport module
              <fo:inline font-style="italic">send_message</fo:inline>
              function did not send the message. The reason for this can be: </fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">send_cancelled_reason()</fo:inline> - the message sending was 
                  deliberately cancelled. <fo:inline font-family="monospace">reason_for_send_cancel()</fo:inline> 
                  is the reason given in the <fo:inline font-family="monospace">cancel</fo:inline> return
                  from the 
                  <fo:inline font-style="italic">send_message</fo:inline> 
                  function. </fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">send_failed_reason()</fo:inline> - an error occurred while attempting to 
                  send the message. </fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">other_reason()</fo:inline>, indicates some other error such 
              as: </fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">timeout</fo:inline> - the reply failed to arrive before the 
                  request timer expired.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{segment_timeout, missing_segments()}</fo:inline> - 
                  one or more segments
                  was not delivered before the expire of the segment 
                  timer.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">exceeded_recv_pending_limit</fo:inline> - the pending
                  limit was exceeded for this request.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">note</fo:inline> 
          above about the <fo:inline font-family="monospace">Extra</fo:inline> argument in 
          <fo:inline font-family="monospace">handle_trans_reply/5</fo:inline>. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3378016">handle_trans_ack(ConnHandle, ProtocolVersion, AckStatus, AckData) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3378512">handle_trans_ack(ConnHandle, ProtocolVersion, AckStatus, AckData, Extra) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle      = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ProtocolVersion = protocol_version()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AckStatus       = ok | {error, reason()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reason() = user_cancel_reason() | send_reason() | other_reason()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">user_cancel_reason() = {user_cancel, reason_for_user_cancel()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_reason()   = send_cancelled_reason() | send_failed_reason()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_cancelled_reason() = {send_message_cancelled, reason_for_send_cancel()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reason_for_send_cancel() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">send_failed_reason() = {send_message_failed, reason_for_send_failure()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">reason_for_send_failure() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">other_reason()   = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AckData          = ack_data()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ack_data()       = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra            = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optionally invoked for a transaction acknowledgement</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If this function gets invoked or not, is controlled by the
          reply from the preceding call to handle_trans_request/3.
          The handle_trans_request/3 function may decide to return
          {handle_ack, ack_data()} or {handle_sloppy_ack, ack_data()} 
          meaning that you need an immediate acknowledgement of the 
          reply and that this function should be invoked to handle the 
          acknowledgement.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ack_data() argument to this function is the Erlang term
          returned by handle_trans_request/3.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the AckStatus is ok, it is indicating that this is a
          true acknowledgement of the transaction reply.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the AckStatus is {error, Reason}, it is an indication that the
          acknowledgement or even the reply (for which this is an 
          acknowledgement) was not delivered, but there is no point in
          waiting any longer for it to arrive. This happens when: </fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">reply_timer</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">reply_timer</fo:inline> eventually times out.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">reply send failure</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When megaco fails to send the reply (see
              <fo:inline font-style="italic">handle_trans_reply</fo:inline>), 
              for whatever reason. </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">cancel</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The user has explicitly cancelled the wait 
              (megaco:cancel/2).</fo:block>
          </fo:block></fo:block-container>
        </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">note</fo:inline> 
          above about the <fo:inline font-family="monospace">Extra</fo:inline> argument in 
          <fo:inline font-family="monospace">handle_trans_ack/5</fo:inline>. </fo:block>

        
        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3400064">handle_unexpected_trans(ConnHandle, ProtocolVersion, Trans) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3400560">handle_unexpected_trans(ConnHandle, ProtocolVersion, Trans, Extra) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle      = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ProtocolVersion = protocol_version()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Trans           = #'TransactionPending'{} | #'TransactionReply'{} | #'TransactionResponseAck'{}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra           = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Invoked when a unexpected message is received</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a reply to a request is not received in time, the
          megaco stack removes all info about the request from
          its tables. If a reply should arrive after this has been
          done the app has no way of knowing where to send this message.
          The message is delivered to the "user" by calling this
          function on the local node (the node which has the link).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">note</fo:inline> 
          above about the <fo:inline font-family="monospace">Extra</fo:inline> argument in 
          <fo:inline font-family="monospace">handle_unexpected_trans/4</fo:inline>. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3408784">handle_trans_request_abort(ConnHandle, ProtocolVersion, TransNo, Pid) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3409296">handle_trans_request_abort(ConnHandle, ProtocolVersion, TransNo, Pid, Extra) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle      = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ProtocolVersion = protocol_version()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TransNo         = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid             = undefined | pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra           = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Invoked when a transaction request has been aborted</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is invoked if the originating pending limit
          has been exceeded. This usually means that a request has taken 
          abnormally long time to complete.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">note</fo:inline> 
          above about the <fo:inline font-family="monospace">Extra</fo:inline> argument in 
          <fo:inline font-family="monospace">handle_trans_request_abort/5</fo:inline>. </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3417712">handle_segment_reply(ConnHandle, ProtocolVersion, TransNo, SegNo, SegCompl) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3418224">handle_segment_reply(ConnHandle, ProtocolVersion, TransNo, SegNo, SegCompl, Extra) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnHandle      = conn_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ProtocolVersion = protocol_version()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TransNo         = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SegNo           = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SegCompl        = asn1_NOVALUE | 'NULL'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra           = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called when a segment reply has been received
          if the 
          <fo:inline font-style="italic">segment_reply_ind</fo:inline> 
          config option has been set to true.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is in effect a progress report.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">note</fo:inline> 
          above about the <fo:inline font-family="monospace">Extra</fo:inline> argument in 
          <fo:inline font-family="monospace">handle_segment_reply/6</fo:inline>. </fo:block>

      </fo:block>
  

<fo:block page-break-before="always" id="idp3435136" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">megaco_flex_scanner</fo:marker>megaco_flex_scanner</fo:block>Erlang module</fo:block>
  <fo:block/>
  megaco_flex_scanner
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module contains the public interface to the flex scanner 
      linked in driver. The flex scanner performs the scanning phase
      of text message decoding.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The flex scanner is written using a tool called <fo:inline font-weight="bold">flex</fo:inline>. 
      In order to be able to compile the flex scanner driver, this
      tool has to be available. </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default the flex scanner reports line-number of an error.
      But it can be built without line-number reporting. Instead
      token number is used. This will speed up the scanning some
      5-10%. Use <fo:inline font-family="monospace">--disable-megaco-flex-scanner-lineno</fo:inline> when
      configuring the application.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The scanner will, by default, be built as a reentrant scanner <fo:inline font-weight="bold">if</fo:inline> the 
      flex utility supports this (it depends on the version of flex). 
      It is possible to explicitly disable this even when flex support this.
      Use <fo:inline font-family="monospace">--disable-megaco-reentrant-flex-scanner</fo:inline> when
      configuring the application.</fo:block>

  

  <fo:block id="idp3441120" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

megaco_ports() = term()
megaco_version() = integer() &gt;= 1
 
    </fo:block>

    
  


  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3443632">start() -&gt; {ok, PortOrPorts} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PortOrPorts = megaco_ports()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to start the flex scanner. 
          It locates the library and loads the linked in driver.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On a single core system or if it's a non-reentrant scanner,
          a single port is created. On a multi-core system with a reentrant 
          scanner, several ports will be created (one for each scheduler). </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the process that calls this function <fo:inline font-weight="bold">must</fo:inline> 
          be permanent. If it dies, the port(s) will exit and the driver unload.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3449392">stop(PortOrPorts) -&gt; stopped</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PortOrPorts = megaco_ports()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to stop the flex scanner. It also
          unloads the driver.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3453024">is_reentrant_enabled() -&gt; Boolean</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Boolean = boolean()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Is the flex scanner reentrant or not.</fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3456592">is_scanner_port(Port, PortOrPorts) -&gt; Boolean</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = port()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PortOrPorts = megaco_ports()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Boolean = boolean()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks if a port is a flex scanner port or not (useful when
          if a port exits). </fo:block>

        
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3461152">scan(Binary, PortOrPorts) -&gt; {ok, Tokens, Version, LatestLine} | {error, Reason, LatestLine} </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Binary = binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PortOrPorts = megaco_ports()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tokens = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Version = megaco_version()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LatestLine = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Scans a megaco message and generates a token list to be passed on the parser. </fo:block>
      </fo:block>

  

<fo:block page-break-before="always" id="idp3474496" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">megaco_codec_meas</fo:marker>megaco_codec_meas</fo:block>Erlang module</fo:block>
  <fo:block/>
  megaco_codec_meas
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module implements a simple megaco codec measurement tool.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Results are written to file (excel compatible text files) and on stdout.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Note</fo:inline> that this module is <fo:inline font-weight="bold">not</fo:inline> included in the runtime part of 
      the application.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3478704">start() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3479152">start(MessagePackage) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MessagePackageRaw = message_package()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">message_package() = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function runs the measurement on all the <fo:inline font-weight="bold">official</fo:inline> codecs;
          pretty, compact, ber, per and erlang.</fo:block>
      </fo:block>

  

<fo:block page-break-before="always" id="idp3491136" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">megaco_codec_mstone1</fo:marker>megaco_codec_mstone1</fo:block>Erlang module</fo:block>
  <fo:block/>
  megaco_codec_mstone1
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module implements the <fo:inline font-weight="bold">mstone1</fo:inline> tool, 
      a simple megaco codec-based performance tool.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The results, the mstone value(s), are written to stdout.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Note</fo:inline> that this module is <fo:inline font-weight="bold">not</fo:inline> included in the runtime part of 
      the application.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3495792">start() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3496240">start(MessagePackage) -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3496704">start(MessagePackage, Factor) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MessagePackage = message_package()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">message_package() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Factor() = integer() &gt; 0</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function starts the <fo:inline font-weight="bold">mstone1</fo:inline> performance test with all codec configs. 
          <fo:inline font-family="monospace">Factor</fo:inline> (defaults to <fo:inline font-family="monospace">1</fo:inline>) processes are started for every supported 
          codec config. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each process encodes and decodes their messages. 
          The number of messages processed in total (for all processes) is the mstone value.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3502656">start_flex() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3503104">start_flex(MessagePackage) -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3503568">start_flex(MessagePackage, Factor) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MessagePackage = message_package()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">message_package() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Factor() = integer() &gt; 0</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function starts the <fo:inline font-weight="bold">mstone1</fo:inline> performance test with only the
          flex codec configs (i.e. <fo:inline font-family="monospace">pretty</fo:inline> and <fo:inline font-family="monospace">compact</fo:inline> with <fo:inline font-family="monospace">flex</fo:inline>). 
          The same number of processes are started as when running the standard
          test (using the <fo:inline font-family="monospace">start/0,1</fo:inline> function).
          Each process encodes and decodes their messages. 
          The number of messages processed in total (for all processes) is the mstone value.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3510064">start_only_drv() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3510528">start_only_drv(MessagePackage) -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3511008">start_only_drv(MessagePackage, Factor) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MessagePackage = message_package()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">message_package() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Factor() = integer() &gt; 0</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function starts the <fo:inline font-weight="bold">mstone1</fo:inline> performance test with only the
          driver using codec configs (i.e. <fo:inline font-family="monospace">pretty</fo:inline> and <fo:inline font-family="monospace">compact</fo:inline> 
          with <fo:inline font-family="monospace">flex</fo:inline>, and <fo:inline font-family="monospace">ber</fo:inline> and <fo:inline font-family="monospace">per</fo:inline> with <fo:inline font-family="monospace">driver</fo:inline> 
          and <fo:inline font-family="monospace">erlang</fo:inline> with <fo:inline font-family="monospace">compressed</fo:inline>). 
          The same number of processes are started as when running the standard
          test (using the <fo:inline font-family="monospace">start/0,1</fo:inline> function).
          Each process encodes and decodes their messages. 
          The number of messages processed in total (for all processes) is the mstone value.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3519760">start_no_drv() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3520224">start_no_drv(MessagePackage) -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3520688">start_no_drv(MessagePackage, Factor) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MessagePackage = message_package()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">message_package() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Factor() = integer() &gt; 0</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function starts the <fo:inline font-weight="bold">mstone1</fo:inline> performance test with codec configs
          not using any drivers (i.e. <fo:inline font-family="monospace">pretty</fo:inline> and <fo:inline font-family="monospace">compact</fo:inline> without 
          <fo:inline font-family="monospace">flex</fo:inline>, <fo:inline font-family="monospace">ber</fo:inline> and <fo:inline font-family="monospace">per</fo:inline> without <fo:inline font-family="monospace">driver</fo:inline> and 
          <fo:inline font-family="monospace">erlang</fo:inline> without <fo:inline font-family="monospace">compressed</fo:inline>). 
          The same number of processes are started as when running the standard
          test (using the <fo:inline font-family="monospace">start/0,1</fo:inline> function).
          Each process encodes and decodes their messages. 
          The number of messages processed in total (for all processes) is the mstone value.</fo:block>
      </fo:block>

  

<fo:block page-break-before="always" id="idp3537424" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">megaco_codec_mstone2</fo:marker>megaco_codec_mstone2</fo:block>Erlang module</fo:block>
  <fo:block/>
  megaco_codec_mstone2
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module implements the <fo:inline font-weight="bold">mstone2</fo:inline> tool, 
      a simple megaco codec-based performance tool.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The results, the mstone value(s), are written to stdout.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Note</fo:inline> that this module is <fo:inline font-weight="bold">not</fo:inline> included in the runtime part of 
      the application.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3542080">start() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3542528">start(MessagePackage) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MessagePackage = message_package()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">message_package() = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function starts the <fo:inline font-weight="bold">mstone2</fo:inline> performance test with all codec configs. 
          Processes are created dynamically. Each process make <fo:inline font-weight="bold">one</fo:inline> run
          through their messages (decoding and encoding messages) and then exits. 
          When one process exits, a new is created with the same codec config and set 
          of messages. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of messages processed in total (for all processes) is the mstone value.</fo:block>
      </fo:block>

  

<fo:block page-break-before="always" id="idp3555520" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">megaco_codec_transform</fo:marker>megaco_codec_transform</fo:block>Erlang module</fo:block>
  <fo:block/>
  megaco_codec_transform
  <fo:block/>

  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module implements a simple megaco message transformation utility.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Note</fo:inline> that this module is <fo:inline font-weight="bold">not</fo:inline> included in the
       runtime part of the application.</fo:block>

    
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3559744">export_messages() -&gt; void()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3560208">export_messages(MessagePackage) -&gt; void()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MessagePackage = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Export the messages in the <fo:inline font-family="monospace">MessagePackage</fo:inline> (default 
          is <fo:inline font-family="monospace">time_test</fo:inline>). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The output produced by this function is a directory structure 
          with the following structure: </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;message package&gt;/pretty/&lt;message-files&gt;
                  compact/&lt;message-files&gt;
                  per/&lt;message-files&gt;
                  ber/&lt;message-files&gt;
                  erlang/&lt;message-files&gt;
        </fo:block>
      </fo:block>

  

</fo:flow>
  </fo:page-sequence>
</fo:root>
