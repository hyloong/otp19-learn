<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>ASN.1</fo:bookmark-title>
      <fo:bookmark internal-destination="idp827552" starting-state="hide">
        <fo:bookmark-title>Asn1 User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp820048" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp811712" starting-state="hide">
            <fo:bookmark-title>Scope</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp953936" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp952960" starting-state="hide">
          <fo:bookmark-title>ASN.1</fo:bookmark-title>
          <fo:bookmark internal-destination="idp949072" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp943648" starting-state="hide">
          <fo:bookmark-title>Getting Started</fo:bookmark-title>
          <fo:bookmark internal-destination="idp939856" starting-state="hide">
            <fo:bookmark-title>Example</fo:bookmark-title>
            <fo:bookmark internal-destination="idp919392" starting-state="hide">
              <fo:bookmark-title>Module Dependencies</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp916384" starting-state="hide">
            <fo:bookmark-title>ASN.1 Application User Interface</fo:bookmark-title>
            <fo:bookmark internal-destination="idp909536" starting-state="hide">
              <fo:bookmark-title>Compile-Time Functions</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1011600" starting-state="hide">
              <fo:bookmark-title>Runtime Functions</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp979136" starting-state="hide">
              <fo:bookmark-title>Errors</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1000000" starting-state="hide">
            <fo:bookmark-title>Multi-File Compilation</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp993760" starting-state="hide">
            <fo:bookmark-title>Remark about Tags</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp800032" starting-state="hide">
            <fo:bookmark-title>ASN.1 Types</fo:bookmark-title>
            <fo:bookmark internal-destination="idp553568" starting-state="hide">
              <fo:bookmark-title>BOOLEAN</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp969312" starting-state="hide">
              <fo:bookmark-title>INTEGER</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1079584" starting-state="hide">
              <fo:bookmark-title>REAL</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp709840" starting-state="hide">
              <fo:bookmark-title>NULL</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp704816" starting-state="hide">
              <fo:bookmark-title>ENUMERATED</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp231072" starting-state="hide">
              <fo:bookmark-title>BIT STRING</fo:bookmark-title>
              <fo:bookmark internal-destination="idp964784" starting-state="hide">
                <fo:bookmark-title>Deprecated Representations for BIT STRING</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp736624" starting-state="hide">
              <fo:bookmark-title>OCTET STRING</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp236192" starting-state="hide">
              <fo:bookmark-title>Character Strings</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp989264" starting-state="hide">
              <fo:bookmark-title>OBJECT IDENTIFIER</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp693264" starting-state="hide">
              <fo:bookmark-title>Object Descriptor</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp646960" starting-state="hide">
              <fo:bookmark-title>TIME Types</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp550800" starting-state="hide">
              <fo:bookmark-title>SEQUENCE</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1088032" starting-state="hide">
              <fo:bookmark-title>SET</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1091136" starting-state="hide">
              <fo:bookmark-title>Extensibility for SEQUENCE and SET</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp181792" starting-state="hide">
              <fo:bookmark-title>Map representation for SEQUENCE and SET</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp192192" starting-state="hide">
              <fo:bookmark-title>CHOICE</fo:bookmark-title>
              <fo:bookmark internal-destination="idp1018128" starting-state="hide">
                <fo:bookmark-title>Extensible CHOICE</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1022688" starting-state="hide">
              <fo:bookmark-title>SET OF and SEQUENCE OF</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1031184" starting-state="hide">
              <fo:bookmark-title>ANY and ANY DEFINED BY</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1594880" starting-state="hide">
              <fo:bookmark-title>EXTERNAL, EMBEDDED PDV, and CHARACTER STRING</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1599360" starting-state="hide">
              <fo:bookmark-title>Embedded Named Types</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1605648" starting-state="hide">
            <fo:bookmark-title>Naming of Records in .hrl Files</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1611136" starting-state="hide">
              <fo:bookmark-title>Embedded Structured Types</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1628080" starting-state="hide">
              <fo:bookmark-title>Recursive Types</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1631296" starting-state="hide">
            <fo:bookmark-title>ASN.1 Values</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1641216" starting-state="hide">
            <fo:bookmark-title>Macros</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1643424" starting-state="hide">
            <fo:bookmark-title>ASN.1 Information Objects (X.681)</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1667008" starting-state="hide">
            <fo:bookmark-title>Parameterization (X.683)</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1678688" starting-state="hide">
          <fo:bookmark-title>Specialized Decodes</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1687680" starting-state="hide">
            <fo:bookmark-title>Exclusive Decode</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1689792" starting-state="hide">
              <fo:bookmark-title>Procedure</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1697248" starting-state="hide">
              <fo:bookmark-title>User Interface</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1706496" starting-state="hide">
              <fo:bookmark-title>Writing an Exclusive Decode Instruction</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1721072" starting-state="hide">
              <fo:bookmark-title>Example</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp657376" starting-state="hide">
            <fo:bookmark-title>Selective Decode</fo:bookmark-title>
            <fo:bookmark internal-destination="idp730848" starting-state="hide">
              <fo:bookmark-title>Procedure</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1728224" starting-state="hide">
              <fo:bookmark-title>User Interface</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1731328" starting-state="hide">
              <fo:bookmark-title>Writing a Selective Decode Instruction</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1743248" starting-state="hide">
              <fo:bookmark-title>Another Example</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1768320" starting-state="hide">
            <fo:bookmark-title>Performance</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1769760" starting-state="hide">
              <fo:bookmark-title>ASN.1 Specifications, Messages, and Configuration</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1781824" starting-state="hide">
              <fo:bookmark-title>Results</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1883088" starting-state="hide">
              <fo:bookmark-title>Final Remarks</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp251936" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp1117968" starting-state="hide">
          <fo:bookmark-title>asn1ct</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1517152" starting-state="hide">
            <fo:bookmark-title>compile/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1516704" starting-state="hide">
            <fo:bookmark-title>compile/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp209792" starting-state="hide">
            <fo:bookmark-title>value/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp534080" starting-state="hide">
            <fo:bookmark-title>test/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp533664" starting-state="hide">
            <fo:bookmark-title>test/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp533216" starting-state="hide">
            <fo:bookmark-title>test/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">ASN.1</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">ASN.1 5.0</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            ASN.1</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            ASN.1 | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp827552" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      Asn1 User's Guide</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ASN.1</fo:inline> application
      contains modules with compile-time and runtime support for
      Abstract Syntax Notation One (ASN.1).
      </fo:block>
  <fo:block id="idp820048" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  Introduction</fo:marker>1.1  Introduction</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ASN.1 application provides the following:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>An ASN.1 compiler for Erlang, which generates encode and
    decode functions to be used by Erlang programs sending and
    receiving ASN.1 specified data.</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Runtime functions used by the generated code.</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Support for the following encoding rules:
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Basic Encoding Rules (BER)</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Distinguished Encoding Rules (DER), a specialized form of
    BER that is used in security-conscious applications</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Packed Encoding Rules (PER), both the aligned and
    unaligned variant</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    </fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block id="idp811712" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Scope</fo:block>
    
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This application covers all features of ASN.1 up to the 1997
      edition of the specification. In the 2002 edition,
      new features were introduced. The following features
      of the 2002 edition are fully or partly supported:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decimal notation (for example, <fo:inline font-family="monospace">"1.5e3</fo:inline>) for REAL values.
	  The NR1, NR2, and NR3 formats as explained in ISO 6093 are
	  supported.</fo:block>
	</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">RELATIVE-OID</fo:inline> type for relative object identifiers is
	  fully supported.</fo:block>
	</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The subtype constraint (<fo:inline font-family="monospace">CONTAINING</fo:inline>/<fo:inline font-family="monospace">ENCODED BY</fo:inline>) to
	  constrain the content of an octet string or a bit string is
	  parsed when compiling, but no further action is taken. This
	  constraint is not a PER-visible constraint.</fo:block>
	</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The subtype constraint by regular expressions (<fo:inline font-family="monospace">PATTERN</fo:inline>)
	  for character string types is parsed when compiling, but no
	  further action is taken. This constraint is not a
	  PER-visible constraint.</fo:block>
	</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Multiple-line comments as in C, <fo:inline font-family="monospace">/* ... */</fo:inline>, are
	  supported.</fo:block>
	</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
  <fo:block id="idp953936" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Prerequisites</fo:block>
    
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that the reader is familiar with the Erlang
      programming language, concepts of OTP, and is familiar with the
      ASN.1 notation. The ASN.1 notation is documented in the standard
      definition X.680, which is the primary text. It can also be
      helpful, but not necessary, to read the standard definitions
      X.681, X.682, X.683, X.690, and X.691.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A good book explaining those reference texts is
      Dubuisson: ASN.1 - Communication Between Heterogeneous Systems,
      is free to download at
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://www.oss.com/asn1/dubuisson.html</fo:basic-link></fo:inline>.</fo:block>
  <fo:block id="idp952960" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  ASN.1</fo:marker>1.2  ASN.1</fo:block><fo:block id="idp949072" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      Introduction</fo:block>
  

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ASN.1 is a formal language for
      describing data structures to be exchanged between distributed
      computer systems. The purpose of ASN.1 is to have a platform
      and programming language independent notation to express types
      using a standardized set of rules for the transformation of
      values of a defined type into a stream of bytes. This stream of
      bytes can then be sent on any type of communication
      channel. This way, two applications written in different
      programming languages running on different computers, and with
      different internal representation of data, can exchange instances
      of structured data types.</fo:block>

<fo:block id="idp943648" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.3  Getting Started</fo:marker>1.3  Getting Started</fo:block><fo:block id="idp939856" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.1 
      Example</fo:block>
    
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example demonstrates the basic functionality used to
      run the Erlang ASN.1 compiler.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create a file named <fo:inline font-family="monospace">People.asn</fo:inline> containing the following:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
People DEFINITIONS AUTOMATIC TAGS ::=
BEGIN
  Person ::= SEQUENCE {
    name PrintableString,
    location INTEGER {home(0),field(1),roving(2)},
    age INTEGER OPTIONAL
  }
END      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This file must be compiled before it can be used.
        The ASN.1 compiler checks that the syntax is correct and that the
        text represents proper ASN.1 code before generating an abstract
        syntax tree. The code-generator then uses the abstract syntax
        tree to generate code.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The generated Erlang files are placed in the current directory or
        in the directory specified with option <fo:inline font-family="monospace">{outdir,Dir}</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following shows how the compiler
        can be called from the  Erlang shell:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt;<fo:inline font-weight="bold"> asn1ct:compile("People", [ber]).</fo:inline>
ok
2&gt;      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">verbose</fo:inline> can be added to get information
      about the generated files:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt;<fo:inline font-weight="bold"> asn1ct:compile("People", [ber,verbose]).</fo:inline>
Erlang ASN.1 compiling "People.asn" 
--{generated,"People.asn1db"}--
--{generated,"People.hrl"}--
--{generated,"People.erl"}--
ok
3&gt;      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ASN.1 module <fo:inline font-family="monospace">People</fo:inline> is now accepted and the
      abstract syntax tree is saved in file <fo:inline font-family="monospace">People.asn1db</fo:inline>.
      The generated Erlang code is compiled using the Erlang compiler
      and loaded into the Erlang runtime system. There is now an API
      for <fo:inline font-family="monospace">encode/2</fo:inline> and <fo:inline font-family="monospace">decode/2</fo:inline> in module
      <fo:inline font-family="monospace">People</fo:inline>, which is called like:<fo:block/>
      <fo:inline font-family="monospace">'People':encode(&lt;Type name&gt;, &lt;Value&gt;)</fo:inline>
      <fo:block/>
        or<fo:block/>
<fo:inline font-family="monospace">'People':decode(&lt;Type name&gt;, &lt;Value&gt;)</fo:inline></fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assume that there is a network
        application that receives instances of the ASN.1 defined
        type <fo:inline font-family="monospace">Person</fo:inline>, modifies, and sends them back again:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
receive
   {Port,{data,Bytes}} -&gt;
       case 'People':decode('Person',Bytes) of
           {ok,P} -&gt;
               {ok,Answer} = 'People':encode('Person',mk_answer(P)),
               Port ! {self(),{command,Answer}};
           {error,Reason} -&gt;
               exit({error,Reason})
       end
    end,      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example, a series of bytes is received from an
        external source and the bytes are then decoded into a valid
        Erlang term. This was achieved with the call
        <fo:inline font-family="monospace">'People':decode('Person',Bytes)</fo:inline>, which returned
        an Erlang value of the ASN.1 type <fo:inline font-family="monospace">Person</fo:inline>. Then an answer was
        constructed  and encoded using
        <fo:inline font-family="monospace">'People':encode('Person',Answer)</fo:inline>, which takes an
        instance of a defined ASN.1 type and transforms it to a
        binary according to the BER or PER encoding rules.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The encoder and decoder can also be run from the shell:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">Rockstar = {'Person',"Some Name",roving,50}.</fo:inline>
{'Person',"Some Name",roving,50}
3&gt; <fo:inline font-weight="bold">{ok,Bin} = 'People':encode('Person',Rockstar).</fo:inline>
{ok,&lt;&lt;243,17,19,9,83,111,109,101,32,78,97,109,101,2,1,2,
      2,1,50&gt;&gt;}
4&gt; <fo:inline font-weight="bold">{ok,Person} = 'People':decode('Person',Bin).</fo:inline>
{ok,{'Person',"Some Name",roving,50}}
5&gt;      </fo:block>

    <fo:block id="idp919392" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Module Dependencies</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is common that ASN.1 modules import defined types, values, and
        other entities from another ASN.1 module.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Earlier versions of the ASN.1 compiler required that modules
        that were imported from had to be compiled before the module
        that imported. This caused problems when ASN.1 modules had circular
        dependencies.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Referenced modules are now parsed when the compiler finds an
        entity that is imported. No code is generated for
        the referenced module. However, the compiled modules rely on
        that the referenced modules are also compiled.</fo:block>
    
  <fo:block id="idp916384" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.2 
      ASN.1 Application User Interface</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ASN.1</fo:inline> application provides the following two
    separate user interfaces:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">asn1ct</fo:inline>, which provides the compile-time functions
          (including the compiler)</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">asn1rt_nif</fo:inline>, which provides the runtime functions
         for the ASN.1 decoder for the BER back end</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reason for this division of the interfaces into compile-time
      and runtime
      is that only runtime modules (<fo:inline font-family="monospace">asn1rt*</fo:inline>) need to be loaded in
      an embedded system. 
      </fo:block>

    <fo:block id="idp909536" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Compile-Time Functions</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ASN.1 compiler can be started directly from the command line
        by the <fo:inline font-family="monospace">erlc</fo:inline> program. This is convenient when compiling
        many ASN.1 files from the command line or when using Makefiles.
        Some examples of how the <fo:inline font-family="monospace">erlc</fo:inline> command can be used to start
        the ASN.1 compiler:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erlc Person.asn
erlc -bper Person.asn
erlc -bber ../Example.asn
erlc -o ../asnfiles -I ../asnfiles -I /usr/local/standards/asn1 Person.asn</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Useful options for the ASN.1 compiler:</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-b[ber | per | uper]</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Choice of encoding rules. If omitted, <fo:inline font-family="monospace">ber</fo:inline> is the
          default.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-o OutDirectory</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Where to put the generated files. Default is the current
            directory.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-I IncludeDir</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Where to search for <fo:inline font-family="monospace">.asn1db</fo:inline> files and ASN.1
            source specs to resolve references to other
            modules. This option can be repeated many times if there
            are several places to search in. The compiler
            searches the current directory first.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+der</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">DER encoding rule. Only when using option <fo:inline font-family="monospace">-ber</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+maps</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use maps instead of records to represent the <fo:inline font-family="monospace">SEQUENCE</fo:inline> and
	  <fo:inline font-family="monospace">SET</fo:inline> types. No <fo:inline font-family="monospace">.hrl</fo:inline> files will be generated.
	  See the Section <fo:inline font-style="italic">
	  Map representation for SEQUENCE and SET</fo:inline>
	  for more information.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+asn1config</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This functionality works together with option
            <fo:inline font-family="monospace">ber</fo:inline>. It enables the specialized decodes, see Section
            <fo:inline font-style="italic">Specialized Decode</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+undec_rest</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A buffer that holds a message being decoded can also have
          trailing bytes. If those trailing bytes are important, they
          can be returned along with the decoded value by compiling
          the ASN.1 specification with option <fo:inline font-family="monospace">+undec_rest</fo:inline>.
          The return value from the decoder is
          <fo:inline font-family="monospace">{ok,Value,Rest}</fo:inline> where <fo:inline font-family="monospace">Rest</fo:inline> is a binary
          containing the trailing bytes.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+'Any Erlc Option'</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any option can be added to the Erlang compiler when
            compiling the generated Erlang files. Any option
            unrecognized by the ASN.1 compiler is passed to the
            Erlang compiler.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a complete description of <fo:inline font-family="monospace">erlc</fo:inline>, see
        ERTS Reference Manual.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler and other compile-time functions can also be started
        from the Erlang shell. Here follows a brief
        description of the primary functions. For a
        complete description of each function, see module <fo:inline font-family="monospace">asn1ct</fo:inline> in
        the <fo:inline font-style="italic">ASN.1 Reference Manual</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler is started by <fo:inline font-family="monospace">asn1ct:compile/1</fo:inline> with
        default options, or <fo:inline font-family="monospace">asn1ct:compile/2</fo:inline> if explicit options
        are given.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
asn1ct:compile("H323-MESSAGES.asn1").      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This equals:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
asn1ct:compile("H323-MESSAGES.asn1",[ber]).      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If PER encoding is wanted:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
asn1ct:compile("H323-MESSAGES.asn1",[per]).      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The generic encode and decode functions can be called
      as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
'H323-MESSAGES':encode('SomeChoiceType',{call,&lt;&lt;"octetstring"&gt;&gt;}).
'H323-MESSAGES':decode('SomeChoiceType',Bytes).      </fo:block>
    

    <fo:block id="idp1011600" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Runtime Functions</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When an ASN.1 specification is compiled with option <fo:inline font-family="monospace">ber</fo:inline>,
      the <fo:inline font-family="monospace">asn1rt_nif</fo:inline> module and the NIF library in
      <fo:inline font-family="monospace">asn1/priv_dir</fo:inline> are needed at runtime.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By calling function <fo:inline font-family="monospace">info/0</fo:inline> in a generated module, you
      get information about which compiler options were used.</fo:block>
    

    <fo:block id="idp979136" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Errors</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Errors detected at
        compile-time are displayed on the screen together with line
        numbers indicating where in the source file the respective error
        was detected. If no errors are found, an Erlang ASN.1 module is
        created.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime encoders and decoders execute within a catch and
      return <fo:inline font-family="monospace">{ok, Data}</fo:inline> or
        <fo:inline font-family="monospace">{error, {asn1, Description}}</fo:inline> where
        <fo:inline font-family="monospace">Description</fo:inline> is
        an Erlang term describing the error.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Currently, <fo:inline font-family="monospace">Description</fo:inline> looks like this:
	<fo:inline font-family="monospace">{ErrorDescription, StackTrace}</fo:inline>. Applications should
	not depend on the exact contents of <fo:inline font-family="monospace">Description</fo:inline> as it
	could change in the future.</fo:block>
    
  <fo:block id="idp1000000" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.3 
      Multi-File Compilation</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are various reasons for using multi-file compilation:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>To choose the name for the generated module, for
      example, because you need to compile the same specs for
      different encoding rules.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>You want only one resulting module.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specify which ASN.1 specs to compile in a module with extension
      <fo:inline font-family="monospace">.set.asn</fo:inline>. Choose a module name and provide the
      names of the ASN.1 specs. For example, if you have the specs
      <fo:inline font-family="monospace">File1.asn</fo:inline>, <fo:inline font-family="monospace">File2.asn</fo:inline>, and <fo:inline font-family="monospace">File3.asn</fo:inline>, your
      module <fo:inline font-family="monospace">MyModule.set.asn</fo:inline> looks as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
File1.asn
File2.asn
File3.asn    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you compile with the following, the result is one merged
    module <fo:inline font-family="monospace">MyModule.erl</fo:inline> with the generated code from the three
    ASN.1 specs:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
~&gt; erlc MyModule.set.asn    </fo:block>
  <fo:block id="idp993760" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.4 
      Remark about Tags</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tags used to be important for all users of ASN.1, because it
    was necessary to add tags manually to certain constructs in order
    for the ASN.1 specification to be valid. Example of
    an old-style specification:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Tags DEFINITIONS ::=
BEGIN
  Afters ::= CHOICE { cheese [0] IA5String,
                      dessert [1] IA5String }
END </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Without the tags (the numbers in square brackets) the ASN.1
    compiler refused to compile the file.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In 1994 the global tagging mode <fo:inline font-family="monospace">AUTOMATIC TAGS</fo:inline> was introduced.
    By putting <fo:inline font-family="monospace">AUTOMATIC TAGS</fo:inline> in the module header, the ASN.1
    compiler automatically adds tags when needed. The following is the
    same specification in <fo:inline font-family="monospace">AUTOMATIC TAGS</fo:inline> mode:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Tags DEFINITIONS AUTOMATIC TAGS ::=
BEGIN
  Afters ::= CHOICE { cheese IA5String,
                      dessert IA5String }
END </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tags are not mentioned any more in this User's Guide.</fo:block>
  <fo:block id="idp800032" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.5 
      ASN.1 Types</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the ASN.1 types including their
      functionality, purpose, and how values are assigned in Erlang.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ASN.1 has both primitive and constructed types:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Primitive Types</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Constructed Types</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">BOOLEAN</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">SEQUENCE</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">INTEGER</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">SET</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">REAL</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">CHOICE</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">NULL</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">SET OF and SEQUENCE OF</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">ENUMERATED</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">ANY</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">BIT STRING</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">ANY DEFINED BY</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">OCTET STRING</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">EXTERNAL</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">Character Strings</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">EMBEDDED PDV</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">OBJECT IDENTIFIER</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">CHARACTER STRING</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">Object Descriptor</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"/></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">TIME Types</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"/></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        3.1:
         
        Supported ASN.1 Types</fo:block>
    
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The values of each ASN.1 type have their own representation in Erlang, as
        described in the following sections. Users must provide
        these values for encoding according to the representation, as shown in the
        following example:</fo:block>
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Operational ::= BOOLEAN --ASN.1 definition    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In Erlang code it can look as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Val = true,
{ok,Bytes} = MyModule:encode('Operational', Val),    </fo:block>

    <fo:block id="idp553568" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">BOOLEAN</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Booleans in ASN.1 express values that can be either
        <fo:inline font-family="monospace">TRUE</fo:inline> or <fo:inline font-family="monospace">FALSE</fo:inline>.
        The meanings assigned to <fo:inline font-family="monospace">TRUE</fo:inline> and <fo:inline font-family="monospace">FALSE</fo:inline> are outside the scope
        of this text.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In ASN.1 it is possible to have:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Operational ::= BOOLEAN</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assigning a value to type <fo:inline font-family="monospace">Operational</fo:inline> in Erlang is possible by
        using the following Erlang code:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Myvar1 = true,</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, in Erlang the atoms <fo:inline font-family="monospace">true</fo:inline> and <fo:inline font-family="monospace">false</fo:inline> are used
        to encode a boolean value.</fo:block>
    

    <fo:block id="idp969312" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">INTEGER</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ASN.1 itself specifies indefinitely large integers. Erlang
        systems with version 4.3 and higher support very large
        integers, in practice indefinitely large integers.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The concept of subtyping can be applied to integers and
        to other ASN.1 types. The details of subtyping are not
        explained here; for more information, see X.680. Various
        syntaxes are allowed when defining a type as an integer:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
T1 ::= INTEGER
T2 ::= INTEGER (-2..7)
T3 ::= INTEGER (0..MAX)
T4 ::= INTEGER (0&lt;..MAX)
T5 ::= INTEGER (MIN&lt;..-99)
T6 ::= INTEGER {red(0),blue(1),white(2)}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang representation of an ASN.1 <fo:inline font-family="monospace">INTEGER</fo:inline> is an integer or
        an atom if a <fo:inline font-family="monospace">Named Number List</fo:inline> (see <fo:inline font-family="monospace">T6</fo:inline> in the previous
        list) is specified.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is an example of Erlang code that assigns values for the
        types in the previous list:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
T1value = 0,
T2value = 6,
T6value1 = blue,
T6value2 = 0,
T6value3 = white</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These Erlang variables are now bound to valid instances of
        ASN.1 defined types. This style of value can be passed directly
        to the encoder for transformation into a series of bytes.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The decoder returns an atom if the value corresponds to a
        symbol in the <fo:inline font-family="monospace">Named Number List</fo:inline>.</fo:block>
    

    <fo:block id="idp1079584" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">REAL</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following ASN.1 type is used for real numbers:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
R1 ::= REAL</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assigned a value in Erlang as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
R1value1 = "2.14",
R1value2 = {256,10,-2},</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the last line, notice that the tuple {256,10,-2} is the real number
        2.56 in a special notation, which encodes faster than simply
        stating the number as <fo:inline font-family="monospace">"2.56"</fo:inline>. The arity three tuple is
        <fo:inline font-family="monospace">{Mantissa,Base,Exponent}</fo:inline>, that is, Mantissa * Base^Exponent.</fo:block>
    

    <fo:block id="idp709840" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">NULL</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type <fo:inline font-family="monospace">NULL</fo:inline> is suitable where supply and recognition of a value
        is important but the actual value is not.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Notype ::= NULL</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This type is assigned in Erlang as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
N1 = 'NULL',</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The actual value is the quoted atom <fo:inline font-family="monospace">'NULL'</fo:inline>.</fo:block>
    

    <fo:block id="idp704816" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">ENUMERATED</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type <fo:inline font-family="monospace">ENUMERATED</fo:inline> can be used when the value you want to
        describe can only take one of a set of predefined values. Example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
DaysOfTheWeek ::= ENUMERATED { 
    sunday(1),monday(2),tuesday(3),
    wednesday(4),thursday(5),friday(6),saturday(7) }</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, to assign a weekday value in Erlang, use the same atom
        as in the <fo:inline font-family="monospace">Enumerations</fo:inline> of the type definition:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Day1 = saturday,</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The enumerated type is similar to an integer type, when
        defined with a set of predefined values. The difference is that
        an enumerated type can only have specified
        values, whereas an integer can have any value.</fo:block>
    

    <fo:block id="idp231072" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">BIT STRING</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type <fo:inline font-family="monospace">BIT STRING</fo:inline> can be used to model information that
        is made up of arbitrary length series of bits. It is intended
        to be used for selection of flags, not for binary files.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In ASN.1, <fo:inline font-family="monospace">BIT STRING</fo:inline> definitions can look as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Bits1 ::= BIT STRING
Bits2 ::= BIT STRING {foo(0),bar(1),gnu(2),gnome(3),punk(14)}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following two notations are available for representation of <fo:inline font-family="monospace">BIT
        STRING</fo:inline> values in Erlang and as input to the encode functions:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A bitstring. By default, a <fo:inline font-family="monospace">BIT STRING</fo:inline> with no
         symbolic names is decoded to an Erlang bitstring.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A list of atoms corresponding to atoms in the <fo:inline font-family="monospace">NamedBitList</fo:inline>
         in the <fo:inline font-family="monospace">BIT STRING</fo:inline> definition. A <fo:inline font-family="monospace">BIT STRING</fo:inline> with symbolic
         names is always decoded to the format shown in the following
         example:</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Bits1Val1 = &lt;&lt;0:1,1:1,0:1,1:1,1:1&gt;&gt;,
Bits2Val1 = [gnu,punk],
Bits2Val2 = &lt;&lt;2#1110:4&gt;&gt;,
Bits2Val3 = [bar,gnu,gnome],</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Bits2Val2</fo:inline> and <fo:inline font-family="monospace">Bits2Val3</fo:inline> denote the same value.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Bits2Val1</fo:inline> is assigned symbolic values. The assignment means
        that the bits corresponding to <fo:inline font-family="monospace">gnu</fo:inline> and <fo:inline font-family="monospace">punk</fo:inline>, that is, bits
        2 and 14 are set to 1, and the rest are set to 0. The symbolic values
        are shown as a list of values. If a named value, which is not
        specified in the type definition, is shown, a runtime error occurs.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">BIT STRING</fo:inline>s can also be subtyped with, for example, a <fo:inline font-family="monospace">SIZE</fo:inline>
        specification:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Bits3 ::= BIT STRING (SIZE(0..31))      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This means that no bit higher than 31 can be set.</fo:block>

      <fo:block id="idp964784" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Deprecated Representations for BIT STRING</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In addition to the representations described earlier, the
	following deprecated representations are available if the
	specification has been compiled with option
	<fo:inline font-family="monospace">legacy_erlang_types</fo:inline>:</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Aa a list of binary digits (0 or 1). This format is
	  accepted as input to the encode functions, and a <fo:inline font-family="monospace">BIT STRING</fo:inline>
	  is decoded to this format if option
	  <fo:inline font-weight="bold">legacy_bit_string</fo:inline> is given.
	  </fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>As <fo:inline font-family="monospace">{Unused,Binary}</fo:inline> where <fo:inline font-family="monospace">Unused</fo:inline> denotes
	  how many trailing zero-bits 0-7 that are unused in the
	  least significant byte in <fo:inline font-family="monospace">Binary</fo:inline>. This format is
	  accepted as input to the encode functions, and a <fo:inline font-family="monospace">BIT
	  STRING</fo:inline> is decoded to this format if
	  <fo:inline font-family="monospace">compact_bit_string</fo:inline> has been given.
	  </fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>As a hexadecimal number (or an integer). Avoid this
	  as it is easy to misinterpret a <fo:inline font-family="monospace">BIT
	  STRING</fo:inline> value in this format.
	  </fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
      
    

    <fo:block id="idp736624" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">OCTET STRING</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OCTET STRING</fo:inline> is the simplest of all ASN.1 types. <fo:inline font-family="monospace">OCTET
      STRING</fo:inline> only moves or transfers, for example, binary files or other
      unstructured information complying with two rules: the
      bytes consist of octets and encoding is not required.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to have the following ASN.1 type definitions:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
O1 ::= OCTET STRING
O2 ::= OCTET STRING (SIZE(28))      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With the following example assignments in Erlang:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
O1Val = &lt;&lt;17,13,19,20,0,0,255,254&gt;&gt;,
O2Val = &lt;&lt;"must be exactly 28 chars...."&gt;&gt;,</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, an <fo:inline font-family="monospace">OCTET STRING</fo:inline> is always represented as
       an Erlang binary. If the specification has been compiled with
       option <fo:inline font-family="monospace">legacy_erlang_types</fo:inline>, the encode functions
       accept both lists and binaries, and the decode functions
       decode an <fo:inline font-family="monospace">OCTET STRING</fo:inline> to a list.</fo:block>
    

    <fo:block id="idp236192" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Character Strings</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ASN.1 supports a wide variety of character sets. The main difference
        between an <fo:inline font-family="monospace">OCTET STRING</fo:inline> and a character string is that the
        <fo:inline font-family="monospace">OCTET STRING</fo:inline> has no imposed semantics on the bytes delivered.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, when using, for example, IA5String (which closely
        resembles ASCII), byte 65 (in decimal
        notation) <fo:inline font-weight="bold">means</fo:inline> character 'A'.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, if a defined type is to be a VideotexString and
        an octet is received with the unsigned integer value <fo:inline font-family="monospace">X</fo:inline>,
        the octet is to be interpreted as specified in standard
        ITU-T T.100, T.101. 
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The  ASN.1 to Erlang compiler
        does not determine the correct interpretation of each BER
        string octet value with different character strings. The
        application is responsible for interpretation
        of octets. Therefore, from the BER
        string point of view, octets are very similar to
        character strings and are compiled in the same way.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When PER is
        used, there is a significant difference in the encoding scheme
        between <fo:inline font-family="monospace">OCTET STRING</fo:inline>s and other strings. The constraints
        specified for a type are especially important for PER, where
        they affect the encoding.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Digs ::= NumericString (SIZE(1..3))
TextFile ::= IA5String (SIZE(0..64000))      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The corresponding Erlang assignments:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
DigsVal1 = "456",
DigsVal2 = "123",
TextFileVal1 = "abc...xyz...",
TextFileVal2 = [88,76,55,44,99,121 .......... a lot of characters here ....]</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang representation for "BMPString" and
        "UniversalString" is either a list of ASCII values or a list
        of quadruples. The quadruple representation associates to the
        Unicode standard representation of characters. The ASCII
        characters are all represented by quadruples beginning with
        three zeros like {0,0,0,65} for character 'A'. When
        decoding a value for these strings, the result is a list of
        quadruples, or integers when the value is an ASCII character.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows how it works. Assume the following
        specification is in file <fo:inline font-family="monospace">PrimStrings.asn1</fo:inline>:</fo:block>
       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
PrimStrings DEFINITIONS AUTOMATIC TAGS ::=
BEGIN
   BMP ::= BMPString
END    </fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encoding and decoding some strings:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">asn1ct:compile('PrimStrings', [ber]).</fo:inline>
ok
2&gt; <fo:inline font-weight="bold">{ok,Bytes1} = 'PrimStrings':encode('BMP', [{0,0,53,53},{0,0,45,56}]).</fo:inline>
{ok,&lt;&lt;30,4,53,54,45,56&gt;&gt;}
3&gt; <fo:inline font-weight="bold">'PrimStrings':decode('BMP', Bytes1).</fo:inline>
{ok,[{0,0,53,53},{0,0,45,56}]}
4&gt; <fo:inline font-weight="bold">{ok,Bytes2} = 'PrimStrings':encode('BMP', [{0,0,53,53},{0,0,0,65}]).</fo:inline>
{ok,&lt;&lt;30,4,53,53,0,65&gt;&gt;}
5&gt; <fo:inline font-weight="bold">'PrimStrings':decode('BMP', Bytes2).</fo:inline>
{ok,[{0,0,53,53},65]}
6&gt; <fo:inline font-weight="bold">{ok,Bytes3} = 'PrimStrings':encode('BMP', "BMP string").</fo:inline>
{ok,&lt;&lt;30,20,0,66,0,77,0,80,0,32,0,115,0,116,0,114,0,105,0,110,0,103&gt;&gt;}
7&gt; <fo:inline font-weight="bold">'PrimStrings':decode('BMP', Bytes3).</fo:inline>
{ok,"BMP string"}      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Type UTF8String is represented as a UTF-8 encoded binary in
      Erlang. Such binaries can be created directly using the binary syntax
      or by converting from a list of Unicode code points using function
      <fo:inline font-family="monospace">unicode:characters_to_binary/1</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following shows examples of how UTF-8 encoded binaries can
      be created and manipulated:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">Gs = "Мой маленький Гном".</fo:inline>
[1052,1086,1081,32,1084,1072,1083,1077,1085,1100,1082,1080,
 1081,32,1043,1085,1086,1084]
2&gt; <fo:inline font-weight="bold">Gbin = unicode:characters_to_binary(Gs).</fo:inline>
&lt;&lt;208,156,208,190,208,185,32,208,188,208,176,208,187,208,
  181,208,189,209,140,208,186,208,184,208,185,32,208,147,
  208,...&gt;&gt;
3&gt; <fo:inline font-weight="bold">Gbin = &lt;&lt;"Мой маленький Гном"/utf8&gt;&gt;.</fo:inline>
&lt;&lt;208,156,208,190,208,185,32,208,188,208,176,208,187,208,
  181,208,189,209,140,208,186,208,184,208,185,32,208,147,
  208,...&gt;&gt;
4&gt; <fo:inline font-weight="bold">Gs = unicode:characters_to_list(Gbin).</fo:inline>
[1052,1086,1081,32,1084,1072,1083,1077,1085,1100,1082,1080,
 1081,32,1043,1085,1086,1084]</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see the <fo:inline font-style="italic">unicode</fo:inline>
      module in STDLIB.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following example, this ASN.1 specification is used:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
UTF DEFINITIONS AUTOMATIC TAGS ::=
BEGIN
   UTF ::= UTF8String
END   </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encoding and decoding a string with Unicode characters:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
5&gt; <fo:inline font-weight="bold">asn1ct:compile('UTF', [ber]).</fo:inline>
ok
6&gt; <fo:inline font-weight="bold">{ok,Bytes1} = 'UTF':encode('UTF', &lt;&lt;"Гном"/utf8&gt;&gt;).</fo:inline>
{ok,&lt;&lt;12,8,208,147,208,189,208,190,208,188&gt;&gt;}
7&gt; <fo:inline font-weight="bold">{ok,Bin1} = 'UTF':decode('UTF', Bytes1).</fo:inline>
{ok,&lt;&lt;208,147,208,189,208,190,208,188&gt;&gt;}
8&gt; <fo:inline font-weight="bold">io:format("~ts\n", [Bin1]).</fo:inline>
Гном
ok
9&gt; <fo:inline font-weight="bold">unicode:characters_to_list(Bin1).</fo:inline>
[1043,1085,1086,1084]   </fo:block>
    

    <fo:block id="idp989264" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">OBJECT IDENTIFIER</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type <fo:inline font-family="monospace">OBJECT IDENTIFIER</fo:inline> is used whenever a unique identity is
        required. An ASN.1 module, a transfer syntax, and so on, is identified
        with an <fo:inline font-family="monospace">OBJECT IDENTIFIER</fo:inline>. Assume the following example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Oid ::= OBJECT IDENTIFIER</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Therefore, the following example is a valid Erlang instance of
        type 'Oid':</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
OidVal1 = {1,2,55},</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">OBJECT IDENTIFIER</fo:inline> value is simply a tuple with the
        consecutive values, which must be integers.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first value is limited to the values 0, 1, or 2. The
        second value must be in the range 0..39 when the first value
        is 0 or 1.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">OBJECT IDENTIFIER</fo:inline> is an important type and it is
        widely used within different standards to identify various
        objects uniquely. Dubuisson: ASN.1 - Communication Between
        Heterogeneous Systems includes an
        easy-to-understand description of the use of
        <fo:inline font-family="monospace">OBJECT IDENTIFIER</fo:inline>.</fo:block>
    

    <fo:block id="idp693264" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Object Descriptor</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Values of this type can be assigned a value as an ordinary string
      as follows:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      "This is the value of an Object descriptor"</fo:block>
    

    <fo:block id="idp646960" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">TIME Types</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two time types are defined within ASN.1: Generalized
        Time and Universal Time Coordinated (UTC). Both are assigned a
        value as an ordinary string within double quotes, for example,
        "19820102070533.8".</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For DER encoding, the compiler does not check the validity
        of the time values. The DER requirements upon those strings are
        regarded as a matter for the application to fulfill.</fo:block>
    

    <fo:block id="idp550800" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">SEQUENCE</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The structured types of ASN.1 are constructed from other types
        in a manner similar to the concepts of array and struct in  C.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">SEQUENCE</fo:inline> in ASN.1 is
        comparable with a struct in C and a record in Erlang.
        A <fo:inline font-family="monospace">SEQUENCE</fo:inline> can be defined as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Pdu ::= SEQUENCE {
   a INTEGER,
   b REAL,
   c OBJECT IDENTIFIER,
   d NULL }      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a 4-component structure called <fo:inline font-family="monospace">Pdu</fo:inline>. By default,
        a <fo:inline font-family="monospace">SEQUENCE</fo:inline> is represented by a record in Erlang.
	It can also be represented as a map; see
	<fo:inline font-style="italic">
	Map representation for SEQUENCE and SET</fo:inline>.
        For each <fo:inline font-family="monospace">SEQUENCE</fo:inline> and <fo:inline font-family="monospace">SET</fo:inline> in an ASN.1 module an Erlang
        record declaration is generated. For <fo:inline font-family="monospace">Pdu</fo:inline>, a record
        like the following is defined:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record('Pdu',{a, b, c, d}).      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The record declarations for a module <fo:inline font-family="monospace">M</fo:inline> are placed in a
        separate <fo:inline font-family="monospace">M.hrl</fo:inline> file.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Values can be assigned in Erlang as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
MyPdu = #'Pdu'{a=22,b=77.99,c={0,1,2,3,4},d='NULL'}.      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The decode functions return a record as result when decoding
      a <fo:inline font-family="monospace">SEQUENCE</fo:inline> or a <fo:inline font-family="monospace">SET</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">SEQUENCE</fo:inline> and a <fo:inline font-family="monospace">SET</fo:inline> can contain a component
      with a <fo:inline font-family="monospace">DEFAULT</fo:inline> keyword followed by the actual value, which
      is the default value. The <fo:inline font-family="monospace">DEFAULT</fo:inline> keyword means that the
      application doing the encoding can omit encoding of the value, which
      results in fewer bytes to send to the receiving application.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application can use the atom <fo:inline font-family="monospace">asn1_DEFAULT</fo:inline> to indicate
      that the encoding is to be omitted for that position in
      the <fo:inline font-family="monospace">SEQUENCE</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Depending on the encoding rules, the encoder can also compare
      the given value to the default value and automatically omit the
      encoding if the values are equal. How much effort the encoder makes
      to compare the values depends on the encoding rules. The DER
      encoding rules forbid encoding a value equal to the default value,
      so it has a more thorough and time-consuming comparison than the
      encoders for the other encoding rules.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following example, this ASN.1 specification is used:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
File DEFINITIONS AUTOMATIC TAGS ::=
BEGIN
Seq1 ::= SEQUENCE {
    a INTEGER DEFAULT 1,
    b Seq2 DEFAULT {aa TRUE, bb 15}
}

Seq2 ::= SEQUENCE {
    aa BOOLEAN,
    bb INTEGER
}

Seq3 ::= SEQUENCE {
    bs BIT STRING {a(0), b(1), c(2)} DEFAULT {a, c}
}
END </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example where the BER encoder is able to omit encoding
      of the default values:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">asn1ct:compile('File', [ber]).</fo:inline>
ok
2&gt; <fo:inline font-weight="bold">'File':encode('Seq1', {'Seq1',asn1_DEFAULT,asn1_DEFAULT}).</fo:inline>
{ok,&lt;&lt;48,0&gt;&gt;}
3&gt; <fo:inline font-weight="bold">'File':encode('Seq1', {'Seq1',1,{'Seq2',true,15}}).</fo:inline>
{ok,&lt;&lt;48,0&gt;&gt;}   </fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example with a named <fo:inline font-family="monospace">BIT STRING</fo:inline> where the BER
     encoder does not omit the encoding:</fo:block>
     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
4&gt; <fo:inline font-weight="bold">'File':encode('Seq3', {'Seq3',asn1_DEFAULT).</fo:inline>
{ok,&lt;&lt;48,0&gt;&gt;}
5&gt; <fo:inline font-weight="bold">'File':encode('Seq3', {'Seq3',&lt;&lt;16#101:3&gt;&gt;).</fo:inline>
{ok,&lt;&lt;48,4,128,2,5,160&gt;&gt;}     </fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The DER encoder omits the encoding for the same <fo:inline font-family="monospace">BIT STRING</fo:inline>:</fo:block>
     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
6&gt; <fo:inline font-weight="bold">asn1ct:compile('File', [ber,der]).</fo:inline>
ok
7&gt; <fo:inline font-weight="bold">'File':encode('Seq3', {'Seq3',asn1_DEFAULT).</fo:inline>
{ok,&lt;&lt;48,0&gt;&gt;}
8&gt; <fo:inline font-weight="bold">'File':encode('Seq3', {'Seq3',&lt;&lt;16#101:3&gt;&gt;).</fo:inline>
{ok,&lt;&lt;48,0&gt;&gt;}     </fo:block>
    

    <fo:block id="idp1088032" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">SET</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In Erlang, the <fo:inline font-family="monospace">SET</fo:inline> type is used exactly as <fo:inline font-family="monospace">SEQUENCE</fo:inline>.
      Notice that if BER or DER encoding rules are used, decoding a
      <fo:inline font-family="monospace">SET</fo:inline> is slower than decoding a <fo:inline font-family="monospace">SEQUENCE</fo:inline> because the
      components must be sorted.</fo:block>
    

    <fo:block id="idp1091136" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Extensibility for SEQUENCE and SET</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a <fo:inline font-family="monospace">SEQUENCE</fo:inline> or <fo:inline font-family="monospace">SET</fo:inline> contains an extension marker
        and extension components as the following, the type can get more
        components in newer versions of the ASN.1 spec:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
SExt ::= SEQUENCE {
           a INTEGER,
           ...,
           b BOOLEAN }</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case it has got a new
        component <fo:inline font-family="monospace">b</fo:inline>. Thus, incoming messages that are decoded
        can have more or fever components than this one.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The component <fo:inline font-family="monospace">b</fo:inline> is treated as
        an original component when encoding a message. In this case, as
        it is not an optional element, it must be encoded.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">During decoding, the <fo:inline font-family="monospace">b</fo:inline> field of the record gets the decoded
        value of the <fo:inline font-family="monospace">b</fo:inline>
        component, if present, otherwise the value <fo:inline font-family="monospace">asn1_NOVALUE</fo:inline>.</fo:block>
    

    <fo:block id="idp181792" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Map representation for SEQUENCE and SET</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the ASN.1 module has been compiled with option <fo:inline font-family="monospace">maps</fo:inline>,
      the types <fo:inline font-family="monospace">SEQUENCE</fo:inline> and <fo:inline font-family="monospace">SET</fo:inline> are represented as maps.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following example, this ASN.1 specification is used:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
File DEFINITIONS AUTOMATIC TAGS ::=
BEGIN
Seq1 ::= SEQUENCE {
    a INTEGER DEFAULT 42,
    b BOOLEAN OPTIONAL,
    c IA5String
}
END   </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional fields are to be omitted from the map if they have
      no value:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">asn1ct:compile('File', [per,maps]).</fo:inline>
ok
2&gt; <fo:inline font-weight="bold">{ok,E} = 'File':encode('Seq1', #{a=&gt;0,c=&gt;"string"}).</fo:inline>
{ok,&lt;&lt;128,1,0,6,115,116,114,105,110,103&gt;&gt;} </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When decoding, optional fields will be omitted from the map:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; <fo:inline font-weight="bold">'File':decode('Seq1', E).</fo:inline>
{ok,#{a =&gt; 0,c =&gt; "string"}}   </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default values can be omitted from the map:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
4&gt; <fo:inline font-weight="bold">{ok,E2} = 'File':encode('Seq1', #{c=&gt;"string"}).</fo:inline>
{ok,&lt;&lt;0,6,115,116,114,105,110,103&gt;&gt;}
5&gt; <fo:inline font-weight="bold">'File':decode('Seq1', E2).</fo:inline>
{ok,#{a =&gt; 42,c =&gt; "string"}}   </fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is not allowed to use the atoms <fo:inline font-family="monospace">asn1_VALUE</fo:inline> and
    <fo:inline font-family="monospace">asn1_DEFAULT</fo:inline> with maps.</fo:block></fo:block>
    

    <fo:block id="idp192192" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">CHOICE</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type <fo:inline font-family="monospace">CHOICE</fo:inline> is a space saver and is similar to the
      concept of a 'union' in C.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assume the following:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
SomeModuleName DEFINITIONS AUTOMATIC TAGS ::=
BEGIN
T ::= CHOICE {
        x REAL,
        y INTEGER,
        z OBJECT IDENTIFIER }
END </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is then possible to assign values as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
TVal1 = {y,17},
TVal2 = {z,{0,1,2}},</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">CHOICE</fo:inline> value is always represented as the tuple
        <fo:inline font-family="monospace">{ChoiceAlternative, Val}</fo:inline> where <fo:inline font-family="monospace">ChoiceAlternative</fo:inline>
        is an atom denoting the selected choice alternative.
      </fo:block>

      <fo:block id="idp1018128" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Extensible CHOICE</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a <fo:inline font-family="monospace">CHOICE</fo:inline> contains an extension marker and the
         decoder detects an unknown alternative of the <fo:inline font-family="monospace">CHOICE</fo:inline>,
         the value is represented as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{asn1_ExtAlt, BytesForOpenType}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here <fo:inline font-family="monospace">BytesForOpenType</fo:inline> is a list of bytes constituting the
          encoding of the "unknown" <fo:inline font-family="monospace">CHOICE</fo:inline> alternative.</fo:block>
      
    

    <fo:block id="idp1022688" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">SET OF and SEQUENCE OF</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The types <fo:inline font-family="monospace">SET OF</fo:inline> and <fo:inline font-family="monospace">SEQUENCE OF</fo:inline> correspond
        to the concept of an array
        in several programming languages. The Erlang syntax for
        both types is straightforward, for example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Arr1 ::= SET SIZE (5) OF INTEGER (4..9) 
Arr2 ::= SEQUENCE OF OCTET STRING      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In Erlang the following can apply:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Arr1Val = [4,5,6,7,8],
Arr2Val = ["abc",[14,34,54],"Octets"],      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the definition of type <fo:inline font-family="monospace">SET OF</fo:inline> implies that
        the order of the components is undefined, but in practice there is 
        no difference between <fo:inline font-family="monospace">SET OF</fo:inline> and <fo:inline font-family="monospace">SEQUENCE OF</fo:inline>.
        The ASN.1 compiler for Erlang does not randomize the order of the
        <fo:inline font-family="monospace">SET OF</fo:inline> components before encoding.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, for a value of type <fo:inline font-family="monospace">SET OF</fo:inline>, the DER
        encoding format requires the elements to be sent in ascending
        order of their encoding, which implies an expensive sorting
        procedure in runtime. Therefore it is recommended to
        use <fo:inline font-family="monospace">SEQUENCE OF</fo:inline> instead of <fo:inline font-family="monospace">SET OF</fo:inline> if possible.</fo:block>
    

    <fo:block id="idp1031184" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">ANY and ANY DEFINED BY</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The types <fo:inline font-family="monospace">ANY</fo:inline> and <fo:inline font-family="monospace">ANY DEFINED BY</fo:inline> have been removed
        from the standard since 1994. It is recommended not to use
        these types any more. They can, however, exist in some old ASN.1
        modules. The idea with this type was to leave a "hole" in a 
        definition where it was possible to
        put unspecified data of any kind, even non-ASN.1 data.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A value of this type is encoded as an <fo:inline font-family="monospace">open type</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Instead of <fo:inline font-family="monospace">ANY</fo:inline> and <fo:inline font-family="monospace">ANY DEFINED BY</fo:inline>, it is
        recommended to use
        <fo:inline font-family="monospace">information object class</fo:inline>, <fo:inline font-family="monospace">table constraints</fo:inline>, and
        <fo:inline font-family="monospace">parameterization</fo:inline>. In particular the construct
        <fo:inline font-family="monospace">TYPE-IDENTIFIER.@Type</fo:inline> accomplish the same as the
        deprecated <fo:inline font-family="monospace">ANY</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
      <fo:inline font-style="italic">Information object</fo:inline>.</fo:block>
    

    <fo:block id="idp1594880" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">EXTERNAL, EMBEDDED PDV, and CHARACTER STRING</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The types <fo:inline font-family="monospace">EXTERNAL</fo:inline>, <fo:inline font-family="monospace">EMBEDDED PDV</fo:inline>, and
      <fo:inline font-family="monospace">CHARACTER STRING</fo:inline> are used in presentation layer negotiation.
        They are encoded according to their associated type, see X.680.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type <fo:inline font-family="monospace">EXTERNAL</fo:inline> had a slightly different associated type
        before 1994. X.691 states that encoding must follow
        the older associated type. So, generated encode/decode
        functions convert values of the newer format to the older format
        before encoding. This implies that it is allowed to use
        <fo:inline font-family="monospace">EXTERNAL</fo:inline> type values of either format for encoding. Decoded
        values are always returned in the newer format.</fo:block>
    

    <fo:block id="idp1599360" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Embedded Named Types</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The structured types previously described can have other named
        types as their components. The general syntax to assign a value
        to component <fo:inline font-family="monospace">C</fo:inline> of a named ASN.1 type <fo:inline font-family="monospace">T</fo:inline> in Erlang
        is the record syntax <fo:inline font-family="monospace">#'T'{'C'=Value}</fo:inline>.
        Here <fo:inline font-family="monospace">Value</fo:inline> can be a value of yet another type <fo:inline font-family="monospace">T2</fo:inline>,
        for example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
EmbeddedExample DEFINITIONS AUTOMATIC TAGS ::=
BEGIN
B ::= SEQUENCE {
        a Arr1,
        b T }

Arr1 ::= SET SIZE (5) OF INTEGER (4..9) 

T ::= CHOICE {
        x REAL,
        y INTEGER,
        z OBJECT IDENTIFIER }
        END      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SEQUENCE</fo:inline> <fo:inline font-family="monospace">b</fo:inline> can be encoded as follows in Erlang:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; 'EmbeddedExample':encode('B', {'B',[4,5,6,7,8],{x,"7.77"}}).
{ok,&lt;&lt;5,56,0,8,3,55,55,55,46,69,45,50&gt;&gt;} </fo:block>
    
  <fo:block id="idp1605648" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.6 
      Naming of Records in .hrl Files</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the option <fo:inline font-family="monospace">maps</fo:inline> is given, no <fo:inline font-family="monospace">.hrl</fo:inline> files
    will be generated. The rest of this section describes the behavior
    of the compiler when <fo:inline font-family="monospace">maps</fo:inline> is not used.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When an ASN.1 specification is compiled, all defined types of type
    <fo:inline font-family="monospace">SET</fo:inline> or <fo:inline font-family="monospace">SEQUENCE</fo:inline> result in a corresponding record in the
    generated <fo:inline font-family="monospace">.hrl</fo:inline> file. This is because the values for
    <fo:inline font-family="monospace">SET</fo:inline> and <fo:inline font-family="monospace">SEQUENCE</fo:inline> are represented as records
    by default.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some special cases of this functionality are presented in the
      next section.</fo:block>

    <fo:block id="idp1611136" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Embedded Structured Types</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In ASN.1 it is also possible to have components that are themselves
        structured types.
        For example, it is possible to have the following:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Emb ::= SEQUENCE {
    a SEQUENCE OF OCTET STRING,
    b SET {
       a INTEGER,
       b INTEGER DEFAULT 66},
    c CHOICE {
       a INTEGER,
       b FooType } }

FooType ::= [3] VisibleString      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following records are generated because of type <fo:inline font-family="monospace">Emb</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record('Emb,{a, b, c}).
-record('Emb_b',{a, b = asn1_DEFAULT}). % the embedded SET type </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Values of type <fo:inline font-family="monospace">Emb</fo:inline> can be assigned as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
V = #'Emb'{a=["qqqq",[1,2,255]], 
           b = #'Emb_b'{a=99}, 
           c ={b,"Can you see this"}}.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For an embedded type of type <fo:inline font-family="monospace">SEQUENCE</fo:inline>/<fo:inline font-family="monospace">SET</fo:inline> in a
        <fo:inline font-family="monospace">SEQUENCE</fo:inline>/<fo:inline font-family="monospace">SET</fo:inline>, the record name is extended with an
        underscore and the component name. If the embedded structure is
        deeper with the <fo:inline font-family="monospace">SEQUENCE</fo:inline>, <fo:inline font-family="monospace">SET</fo:inline>, or <fo:inline font-family="monospace">CHOICE</fo:inline>
        types in the line, each component name/alternative name is
        added to the record name.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Seq ::= SEQUENCE{
    a CHOICE{
        b SEQUENCE {
           c  INTEGER
        }
    }
}      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This results in the following record:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record('Seq_a_b',{c}).      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the structured type has a component with an embedded
        <fo:inline font-family="monospace">SEQUENCE OF</fo:inline>/<fo:inline font-family="monospace">SET OF</fo:inline> which embedded type in turn
        is a <fo:inline font-family="monospace">SEQUENCE</fo:inline>/<fo:inline font-family="monospace">SET</fo:inline>, it gives a record with the
        <fo:inline font-family="monospace">SEQUENCE OF</fo:inline>/<fo:inline font-family="monospace">SET OF</fo:inline>
        addition as in the following example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Seq ::= SEQUENCE {
    a SEQUENCE OF SEQUENCE {
           b
               }
    c SET OF SEQUENCE {
           d
               }
}      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This results in the following records:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record('Seq_a_SEQOF'{b}).
-record('Seq_c_SETOF'{d}).      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A parameterized type is to be considered as an embedded
        type. Each time such a type is referenced, an instance of it is
        defined. Thus, in the following example a record with name
        <fo:inline font-family="monospace">'Seq_b'</fo:inline> is generated in the <fo:inline font-family="monospace">.hrl</fo:inline> file and is used
        to hold values:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Seq ::= SEQUENCE {
    b PType{INTEGER}
}

PType{T} ::= SEQUENCE{
    id T
}      </fo:block>
    

    <fo:block id="idp1628080" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Recursive Types</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Types that refer to themselves are called recursive types.
      Example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Rec ::= CHOICE {
     nothing NULL,
     something SEQUENCE {
          a INTEGER,
          b OCTET STRING,
          c Rec }}      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is allowed in ASN.1 and the ASN.1-to-Erlang compiler
      supports this recursive type.
      A value for this type is assigned in Erlang as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
V = {something,#'Rec_something'{a = 77, 
                                b = "some octets here", 
                                c = {nothing,'NULL'}}}.      </fo:block>
    
  <fo:block id="idp1631296" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.7 
      ASN.1 Values</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Values can be assigned to an ASN.1 type within the ASN.1 code
      itself, as opposed to the actions in the previous section where
      a value was assigned to an ASN.1 type in Erlang. The full value
      syntax of ASN.1 is supported and X.680 describes in detail how
      to assign values in ASN.1. A short example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
TT ::= SEQUENCE {
   a INTEGER,
   b SET OF OCTET STRING }

tt TT ::= {a 77,b {"kalle","kula"}}    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value defined here can be used in several ways. It can, for
      example, be used as the value in some <fo:inline font-family="monospace">DEFAULT</fo:inline> component:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
SS ::= SET {
    s OBJECT IDENTIFIER,
    val TT DEFAULT tt }    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It can also be used from inside an Erlang program. If this ASN.1
      code is defined in ASN.1 module <fo:inline font-family="monospace">Values</fo:inline>, the ASN.1 value
      <fo:inline font-family="monospace">tt</fo:inline> can be reached from Erlang as a function call to
      <fo:inline font-family="monospace">'Values':tt()</fo:inline> as in the following example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">Val = 'Values':tt().</fo:inline>
{'TT',77,["kalle","kula"]}
2&gt; <fo:inline font-weight="bold">{ok,Bytes} = 'Values':encode('TT',Val).</fo:inline>
{ok,&lt;&lt;48,18,128,1,77,161,13,4,5,107,97,108,108,101,4,4,
      107,117,108,97&gt;&gt;}
4&gt; <fo:inline font-weight="bold">'Values':decode('TT',Bytes).</fo:inline>
{ok,{'TT',77,["kalle","kula"]}}
5&gt;  </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This example shows that a function is generated by the compiler
      that returns a valid Erlang representation of the value, although
      the value is of a complex type.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Furthermore, if the option <fo:inline font-family="monospace">maps</fo:inline> is not used,
    a macro is generated for each value in the <fo:inline font-family="monospace">.hrl</fo:inline>
    file. So, the defined value <fo:inline font-family="monospace">tt</fo:inline> can also be extracted by
    <fo:inline font-family="monospace">?tt</fo:inline> in application code.</fo:block>
  <fo:block id="idp1641216" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.8 
      Macros</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type <fo:inline font-family="monospace">MACRO</fo:inline> is not supported. It is no longer part of
    the ASN.1 standard.</fo:block>
  <fo:block id="idp1643424" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.9 
      ASN.1 Information Objects (X.681)</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Information Object Classes, Information Objects, and Information
      Object Sets (in the following called classes, objects, and
      object sets, respectively) are defined in the standard
      definition X.681. Only a brief explanation is given here.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These constructs makes it possible to define open types, that
      is, values of that type can be of any ASN.1 type. Also,
      relationships can be defined between different types and
      values, as classes can hold types, values, objects, object
      sets, and other classes in their fields. A class can be
      defined in ASN.1 as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
GENERAL-PROCEDURE ::= CLASS {
      &amp;Message,
      &amp;Reply               OPTIONAL,
      &amp;Error               OPTIONAL,
      &amp;id          PrintableString UNIQUE
}
WITH SYNTAX {
      NEW MESSAGE     &amp;Message
      [REPLY           &amp;Reply]
      [ERROR           &amp;Error]
      ADDRESS          &amp;id
}    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An object is an instance of a class. An object set is a set
      containing objects of a specified class. A definition can look
      as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
object1 GENERAL-PROCEDURE ::= {
    NEW MESSAGE      PrintableString
    ADDRESS          "home"
}

object2 GENERAL-PROCEDURE ::= {
    NEW MESSAGE INTEGER
    ERROR INTEGER
    ADDRESS "remote"
}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The object <fo:inline font-family="monospace">object1</fo:inline> is an instance of the class
      <fo:inline font-family="monospace">GENERAL-PROCEDURE</fo:inline> and has one type field and one
      fixed type value field. The object <fo:inline font-family="monospace">object2</fo:inline> has also an
      optional field <fo:inline font-family="monospace">ERROR</fo:inline>, which is a type field. The field
      <fo:inline font-family="monospace">ADDRESS</fo:inline> is a <fo:inline font-family="monospace">UNIQUE</fo:inline> field. Objects in an object set
      must have unique values in their <fo:inline font-family="monospace">UNIQUE</fo:inline> field, as in
      <fo:inline font-family="monospace">GENERAL-PROCEDURES</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
GENERAL-PROCEDURES GENERAL-PROCEDURE ::= {
    object1 | object2}    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You cannot encode a class, object, or object set, only refer to
      it when defining other ASN.1 entities. Typically you refer to a
      class as well as to object sets by table constraints and component
      relation constraints (X.682) in ASN.1 types, as in the following:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
StartMessage  ::= SEQUENCE {
    msgId  GENERAL-PROCEDURE.&amp;id  ({GENERAL-PROCEDURES}),
    content GENERAL-PROCEDURE.&amp;Message ({GENERAL-PROCEDURES}{@msgId}),
    }    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In type <fo:inline font-family="monospace">StartMessage</fo:inline>, the constraint following field
      <fo:inline font-family="monospace">content</fo:inline> tells that in a value of type
      <fo:inline font-family="monospace">StartMessage</fo:inline> the value in field <fo:inline font-family="monospace">content</fo:inline> must
      come from the same object that is chosen by field <fo:inline font-family="monospace">msgId</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">So, the value
      <fo:inline font-family="monospace">#'StartMessage'{msgId="home",content="Any Printable String"}</fo:inline>
      is legal to encode as a <fo:inline font-family="monospace">StartMessage</fo:inline> value. However, the value
      <fo:inline font-family="monospace">#'StartMessage'{msgId="remote", content="Some String"}</fo:inline>
      is illegal as the constraint in <fo:inline font-family="monospace">StartMessage</fo:inline> tells that
      when you have chosen a value from a specific object in object
      set <fo:inline font-family="monospace">GENERAL-PROCEDURES</fo:inline> in field 
      <fo:inline font-family="monospace">msgId</fo:inline>, you must choose a value from that same object in
      the content field too. In this second case, it is to be
      any <fo:inline font-family="monospace">INTEGER</fo:inline> value.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">StartMessage</fo:inline> can in field <fo:inline font-family="monospace">content</fo:inline> be
      encoded with a value of any type that an object in object set
      <fo:inline font-family="monospace">GENERAL-PROCEDURES</fo:inline> has in its <fo:inline font-family="monospace">NEW MESSAGE</fo:inline> field.
      This field refers to a type field
      <fo:inline font-family="monospace">&amp;Message</fo:inline> in the class. Field <fo:inline font-family="monospace">msgId</fo:inline> is always
      encoded as a <fo:inline font-family="monospace">PrintableString</fo:inline>, as the field refers to a
      fixed type in the class.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In practice, object sets are usually declared to be extensible so
      that more objects can be added to the set later. Extensibility is
      indicated as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
GENERAL-PROCEDURES GENERAL-PROCEDURE ::= {
    object1 | object2, ...}    </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When decoding a type that uses an extensible set constraint,
     it is always possible that the value in field <fo:inline font-family="monospace">UNIQUE</fo:inline>
     is unknown (that is, the type has been encoded with a later
     version of the ASN.1 specification). The unencoded data is then
     returned wrapped in a tuple as follows:</fo:block>

     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{asn1_OPENTYPE,Binary}</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here <fo:inline font-family="monospace">Binary</fo:inline> is an Erlang binary that contains the encoded
     data. (If option <fo:inline font-family="monospace">legacy_erlang_types</fo:inline> has been given,
     only the binary is returned.)</fo:block>
  <fo:block id="idp1667008" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.10 
      Parameterization (X.683)</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameterization, which is defined in X.683, can be used when
      defining types, values, value sets, classes, objects, or object sets.
      A part of a definition can be supplied as a parameter. For
      example, if a <fo:inline font-family="monospace">Type</fo:inline> is used in a definition with a certain
      purpose, you want the type name to express the intention. This
      can be done with parameterization.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When many types (or another ASN.1 entity) only differ in some
      minor cases, but the structure of the types is similar, only
      one general type can be defined and the differences can be supplied
      through parameters.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example of use of parameterization:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
General{Type} ::= SEQUENCE
{
     number     INTEGER,
     string     Type
}
      
T1 ::= General{PrintableString}

T2 ::= General{BIT STRING}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An example of a value that can be encoded as type <fo:inline font-family="monospace">T1</fo:inline> is
      <fo:inline font-family="monospace">{12,"hello"}</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the compiler does not generate encode/decode functions
      for parameterized types, only for the instances of the parameterized
      types. Therefore, if a file contains the types <fo:inline font-family="monospace">General{}</fo:inline>,
      <fo:inline font-family="monospace">T1</fo:inline>, and <fo:inline font-family="monospace">T2</fo:inline> as in the previous example, encode/decode
      functions are only generated for <fo:inline font-family="monospace">T1</fo:inline> and <fo:inline font-family="monospace">T2</fo:inline>.
      </fo:block>
  <fo:block id="idp1678688" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.4  Specialized Decodes</fo:marker>1.4  Specialized Decodes</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When performance is of highest priority and you are interested in
    a limited part of the ASN.1 encoded message before deciding what
    to do with the rest of it, an option is to decode only this small
    part. The situation can be a server that has to decide the
    addressee of a message. The addressee can be interested in
    the entire message, but the server can be a bottleneck that you want
    to spare any unnecessary load.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Instead of making two <fo:inline font-weight="bold">complete decodes</fo:inline> (the normal case of
    decode), one in the server and one in the addressee, it is only
    necessary to make one <fo:inline font-weight="bold">specialized decode</fo:inline>(in the server)
    and another complete decode(in the addressee). This section
    describes the following two specialized decodes, which support
    to solve this and similar problems:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Exclusive decode</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Selected decode</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This functionality is only provided when using <fo:inline font-family="monospace">BER</fo:inline>
  (option <fo:inline font-family="monospace">ber</fo:inline>).</fo:block><fo:block id="idp1687680" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.1 
      Exclusive Decode</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The basic idea with exclusive
      decode is to specify which parts of the message you want to
      exclude from being decoded. These parts remain encoded and are
      returned in the value structure as binaries. They can be decoded
      in turn by passing them to a certain <fo:inline font-family="monospace">decode_part/2</fo:inline>
      function. The performance gain is high for large messages.
      You can do an exclusive decode and later one or more
      decodes of the parts, or a second complete decode instead of two or
      more complete decodes.
      </fo:block>

    <fo:block id="idp1689792" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Procedure</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To perform an exclusive decode:
        </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 1:</fo:inline> Decide the name of the function for the
	 exclusive decode.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2:</fo:inline> Include the following instructions in
	 a configuration file:</fo:block>
	 <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	   <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The name of the exclusive decode function</fo:block></fo:list-item-body></fo:list-item>
	   <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The name of the ASN.1 specification</fo:block></fo:list-item-body></fo:list-item>
	   <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A notation that tells which parts of the message
	   structure to be excluded from decode</fo:block></fo:list-item-body></fo:list-item>
	   </fo:list-block></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 3</fo:inline> Compile with the additional option
         <fo:inline font-family="monospace">asn1config</fo:inline>. The compiler searches for a configuration
         file with the same name as the ASN.1 specification but with
         extension <fo:inline font-family="monospace">.asn1config</fo:inline>. This configuration file is not
	 the same as used for compilation of a set of files. See Section
	 <fo:inline font-style="italic">Writing an Exclusive Decode
	 Instruction.</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp1697248" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">User Interface</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime user interface for exclusive decode consists of
        the following two functions:</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A function for an exclusive decode, whose name the user
	  decides in the configuration file</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The compiler generates a <fo:inline font-family="monospace">decode_part/2</fo:inline>
          function when exclusive decode is chosen. This function decodes
          the parts that were left undecoded during the exclusive
          decode.</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Both functions are described in the following.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the exclusive decode function has, for example, the name
        <fo:inline font-family="monospace">decode_exclusive</fo:inline> and an ASN.1 encoded message
        <fo:inline font-family="monospace">Bin</fo:inline> is to be exclusive decoded, the call is as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{ok,Excl_Message} = 'MyModule':decode_exclusive(Bin)      </fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result <fo:inline font-family="monospace">Excl_Message</fo:inline> has the same structure as a
        complete decode would have, except for the parts of the top type
        that were not decoded. The undecoded parts are on their places
        in the structure on format <fo:inline font-family="monospace">{Type_Key,Undecoded_Value}</fo:inline>.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each undecoded part that is to be decoded must be fed into
        function <fo:inline font-family="monospace">decode_part/2</fo:inline> as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{ok,Part_Message} = 'MyModule':decode_part(Type_Key,Undecoded_Value)</fo:block>
    

    <fo:block id="idp1706496" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Writing an Exclusive Decode Instruction</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This instruction is written in the configuration file
        in the following format:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Exclusive_Decode_Instruction = {exclusive_decode,{Module_Name,Decode_Instructions}}.

Module_Name = atom()

Decode_Instructions = [Decode_Instruction]+

Decode_Instruction = {Exclusive_Decode_Function_Name,Type_List}

Exclusive_Decode_Function_Name = atom()

Type_List = [Top_Type,Element_List]

Element_List = [Element]+

Element = {Name,parts} |
          {Name,undecoded} |
          {Name,Element_List}

Top_Type = atom()

Name = atom()</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The instruction must be a valid Erlang term ended by a dot.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In <fo:inline font-family="monospace">Type_List</fo:inline> the "path" from the top type to each
        undecoded subcomponents is described. The top type of the path is
        an atom, the name of it. The action on each component/type that
        follows is described by one of
        <fo:inline font-family="monospace">{Name,parts}, {Name,undecoded}, {Name,Element_List}</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The use and effect of the actions are as follows:
        </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{Name,undecoded}</fo:inline> - Tells that the element is left
         undecoded during the exclusive decode. The type of <fo:inline font-family="monospace">Name</fo:inline>
         can be any ASN.1 type. The value of element <fo:inline font-family="monospace">Name</fo:inline> is
         returned as a tuple (as mentioned in the previous section) in
         the value structure of the top type.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{Name,parts}</fo:inline> - The type of <fo:inline font-family="monospace">Name</fo:inline> can be one of
         <fo:inline font-family="monospace">SEQUENCE OF</fo:inline> or <fo:inline font-family="monospace">SET OF</fo:inline>. The action implies that
         the different components of <fo:inline font-family="monospace">Name</fo:inline> are left undecoded. The
         value of <fo:inline font-family="monospace">Name</fo:inline> is returned as a tuple (as mentioned in
         the previous section) where the second element is a list of
         binaries. This is because the representation of a <fo:inline font-family="monospace">SEQUENCE OF</fo:inline>
         or a <fo:inline font-family="monospace">SET OF</fo:inline> in Erlang is a list of its internal type. Any
         of the elements in this list or the entire list can be decoded by
         function <fo:inline font-family="monospace">decode_part</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{Name,Element_List}</fo:inline> - This action is used when one or
         more of the subtypes of <fo:inline font-family="monospace">Name</fo:inline> is exclusive decoded.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Name</fo:inline> in these actions can be a component name of a
        <fo:inline font-family="monospace">SEQUENCE OF</fo:inline> or a <fo:inline font-family="monospace">SET OF</fo:inline>, or a name of an alternative
         in a <fo:inline font-family="monospace">CHOICE</fo:inline>.
        </fo:block>
    

    <fo:block id="idp1721072" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Example</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this examples, the definitions from the following ASN.1
        specification are used:</fo:block>
      
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

GUI DEFINITIONS AUTOMATIC TAGS ::=

BEGIN

Action ::= SEQUENCE 
 { 
   number  INTEGER DEFAULT 15,
   handle  [0] Handle DEFAULT {number  12, on  TRUE}
 }

Key ::= [11] EXPLICIT Button
Handle ::= [12] Key
Button ::= SEQUENCE 
 {
   number  INTEGER,
   on  BOOLEAN
 }

Window ::= CHOICE 
 {
   vsn INTEGER,
   status E
 }

Status ::= SEQUENCE 
 {
   state INTEGER,
   buttonList SEQUENCE OF Button,
   enabled BOOLEAN OPTIONAL,
   actions CHOICE {
     possibleActions SEQUENCE OF Action,
     noOfActions INTEGER
   }
 }


END
</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Button</fo:inline> is a top type and it is needed to exclude
        component <fo:inline font-family="monospace">number</fo:inline> from decode, <fo:inline font-family="monospace">Type_List</fo:inline> in the
        instruction in the configuration file is
        <fo:inline font-family="monospace">['Button',[{number,undecoded}]]</fo:inline>. If you call the decode
        function <fo:inline font-family="monospace">decode_Button_exclusive</fo:inline>, <fo:inline font-family="monospace">Decode_Instruction</fo:inline> is
        <fo:inline font-family="monospace">{decode_Button_exclusive,['Button',[{number,undecoded}]]}</fo:inline>.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another top type is <fo:inline font-family="monospace">Window</fo:inline> whose subcomponent
        actions in type <fo:inline font-family="monospace">Status</fo:inline> and the parts of component
        <fo:inline font-family="monospace">buttonList</fo:inline> are to be left undecoded. For this type, the
        function is named <fo:inline font-family="monospace">decode__Window_exclusive</fo:inline>. The complete
        <fo:inline font-family="monospace">Exclusive_Decode_Instruction</fo:inline> configuration is as follows:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

{exclusive_decode,{'GUI',
	[{decode_Window_exclusive,['Window',[{status,[{buttonList,parts},{actions,undecoded}]}]]},
	 {decode_Button_exclusive,['Button',[{number,undecoded}]]}]}}.
</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following figure shows the bytes of a <fo:inline font-family="monospace">Window:status</fo:inline>
        message. The components <fo:inline font-family="monospace">buttonList</fo:inline> and <fo:inline font-family="monospace">actions</fo:inline> are
	excluded from decode. Only <fo:inline font-family="monospace">state</fo:inline> and <fo:inline font-family="monospace">enabled</fo:inline> are decoded
	when <fo:inline font-family="monospace">decode__Window_exclusive</fo:inline> is called.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="exclusive_Win_But.gif"/>
        <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        4.1:
         
        Bytes of a Window:status Message</fo:block>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compiling <fo:inline font-family="monospace">GUI.asn</fo:inline> including the configuration file is done
        as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
unix&gt; erlc -bber +asn1config GUI.asn

erlang&gt; asn1ct:compile('GUI', [ber,asn1config]).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module can be used as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; Button_Msg = {'Button',123,true}.
{'Button',123,true}
2&gt; {ok,Button_Bytes} = 'GUI':encode('Button',Button_Msg).
{ok,[&lt;&lt;48&gt;&gt;,
     [6],
     [&lt;&lt;128&gt;&gt;,
      [1],
      123],
     [&lt;&lt;129&gt;&gt;,
      [1],
      255]]}
3&gt; {ok,Exclusive_Msg_Button} = 'GUI':decode_Button_exclusive(list_to_binary(Button_Bytes)).
{ok,{'Button',{'Button_number',&lt;&lt;28,1,123&gt;&gt;},
         true}}
4&gt; 'GUI':decode_part('Button_number',&lt;&lt;128,1,123&gt;&gt;).
{ok,123}
5&gt; Window_Msg = 
{'Window',{status,{'Status',35,
              [{'Button',3,true},
               {'Button',4,false},
               {'Button',5,true},
               {'Button',6,true},
               {'Button',7,false},
               {'Button',8,true},
               {'Button',9,true},
               {'Button',10,false},
               {'Button',11,true},
               {'Button',12,true},
               {'Button',13,false},
               {'Button',14,true}],
              false,
              {possibleActions,[{'Action',16,{'Button',17,true}}]}}}}. 
{'Window',{status,{'Status',35,
              [{'Button',3,true},
               {'Button',4,false},
               {'Button',5,true},
               {'Button',6,true},
               {'Button',7,false},
               {'Button',8,true},
               {'Button',9,true},
               {'Button',10,false},
               {'Button',11,true},
               {'Button',12,true},
               {'Button',13,false},
               {'Button',14,true}],
              false,
              {possibleActions,[{'Action',16,{'Button',17,true}}]}}}}
6&gt; {ok,Window_Bytes}='GUI':encode('Window',Window_Msg).
{ok,[&lt;&lt;161&gt;&gt;,
     [127],
     [&lt;&lt;128&gt;&gt;, ...


8&gt; {ok,{status,{'Status',Int,{Type_Key_SeqOf,Val_SEQOF},
BoolOpt,{Type_Key_Choice,Val_Choice}}}}=
'GUI':decode_Window_status_exclusive(list_to_binary(Window_Bytes)).
{ok,{status,{'Status',35,
        {'Status_buttonList',[&lt;&lt;48,6,128,1,3,129,1,255&gt;&gt;,
                              &lt;&lt;48,6,128,1,4,129,1,0&gt;&gt;,
                              &lt;&lt;48,6,128,1,5,129,1,255&gt;&gt;,
                              &lt;&lt;48,6,128,1,6,129,1,255&gt;&gt;,
                              &lt;&lt;48,6,128,1,7,129,1,0&gt;&gt;,
                              &lt;&lt;48,6,128,1,8,129,1,255&gt;&gt;,
                              &lt;&lt;48,6,128,1,9,129,1,255&gt;&gt;,
                              &lt;&lt;48,6,128,1,10,129,1,0&gt;&gt;,
                              &lt;&lt;48,6,128,1,11,129,1,255&gt;&gt;,
                              &lt;&lt;48,6,128,1,12,129,1,255&gt;&gt;,
                              &lt;&lt;48,6,128,1,13,129,1,0&gt;&gt;,
                              &lt;&lt;48,6,128,1,14,129,1,255&gt;&gt;]},
        false,
        {'Status_actions',
&lt;&lt;163,21,160,19,48,17,2,1,16,160,12,172,10,171,8,48,6,128,1,...&gt;&gt;}}}}
10&gt; 'GUI':decode_part(Type_Key_SeqOf,Val_SEQOF).
{ok,[{'Button',3,true},
     {'Button',4,false},
     {'Button',5,true},
     {'Button',6,true},
     {'Button',7,false},
     {'Button',8,true},
     {'Button',9,true},
     {'Button',10,false},
     {'Button',11,true},
     {'Button',12,true},
     {'Button',13,false},
     {'Button',14,true}]}
11&gt; 'GUI':decode_part(Type_Key_SeqOf,hd(Val_SEQOF)).
{ok,{'Button',3,true}}
12&gt; 'GUI':decode_part(Type_Key_Choice,Val_Choice).  
{ok,{possibleActions,[{'Action',16,{'Button',17,true}}]}}</fo:block>
    
  <fo:block id="idp657376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.2 
      Selective Decode</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This specialized decode decodes a subtype of a
      constructed value and is the fastest method to extract a
      subvalue. This decode is typically used when you want to
      inspect, for example, a version number, to be able to decide what
      to do with the entire value. The result is returned as
      <fo:inline font-family="monospace">{ok,Value}</fo:inline> or <fo:inline font-family="monospace">{error,Reason}</fo:inline>.
      </fo:block>

    <fo:block id="idp730848" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Procedure</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To perform a selective decode:
        </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1:</fo:inline> Include the following instructions in
	 the configuration file:</fo:block>
         <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
           <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The name of the user function</fo:block></fo:list-item-body></fo:list-item>
           <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The name of the ASN.1 specification</fo:block></fo:list-item-body></fo:list-item>
           <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A notation that tells which part of the type to be
           decoded</fo:block></fo:list-item-body></fo:list-item>
	 </fo:list-block></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 2:</fo:inline> Compile with the additional option
         <fo:inline font-family="monospace">asn1config</fo:inline>. The compiler searches for a configuration file
         with the same name as the ASN.1 specification, but with extension
         <fo:inline font-family="monospace">.asn1config</fo:inline>. In the same file you can also provide
	 configuration specifications for exclusive decode.
         The generated Erlang module has the
         usual functionality for encode/decode preserved and the
         specialized decode functionality added. </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp1728224" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">User Interface</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The only new user interface function is the one provided by the
        user in the configuration file. The function is started by
        the <fo:inline font-family="monospace">ModuleName:FunctionName</fo:inline> notation.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, if the configuration file includes the specification
        <fo:inline font-family="monospace">{selective_decode,{'ModuleName',[{selected_decode_Window,TypeList}]}}</fo:inline>
        do the selective decode by
        <fo:inline font-family="monospace">{ok,Result}='ModuleName':selected_decode_Window(EncodedBinary).</fo:inline></fo:block>
    

    <fo:block id="idp1731328" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Writing a Selective Decode Instruction</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One or more selective decode functions can be described in a
        configuration file. Use the following notation:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Selective_Decode_Instruction = {selective_decode,{Module_Name,Decode_Instructions}}.

Module_Name = atom()

Decode_Instructions = [Decode_Instruction]+

Decode_Instruction = {Selective_Decode_Function_Name,Type_List}

Selective_Decode_Function_Name = atom()

Type_List = [Top_Type|Element_List]

Element_List = Name|List_Selector

Name = atom()

List_Selector = [integer()]</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The instruction must be a valid Erlang term ended by a dot.
        </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Module_Name</fo:inline> is the same as the name of the ASN.1
        specification, but without the extension.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Decode_Instruction</fo:inline> is a tuple with your chosen
        function name and the components from the top type that leads
        to the single type you want to decode. Ensure to choose a name
        of your function that is not the same as any of the generated
        functions.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block> The first element of <fo:inline font-family="monospace">Type_List</fo:inline> is the top type of the
        encoded message. In <fo:inline font-family="monospace">Element_List</fo:inline>, it is followed by
        each of the component names that leads to selected type.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Each name in <fo:inline font-family="monospace">Element_List</fo:inline> must be a constructed type
        except the last name, which can be any type.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">List_Selector</fo:inline> makes it possible to choose one of the
        encoded components in a a <fo:inline font-family="monospace">SEQUENCE OF</fo:inline> or a <fo:inline font-family="monospace">SET OF</fo:inline>.
        It is also possible to go further in that component and pick a
        subtype of that to decode. So, in the <fo:inline font-family="monospace">Type_List</fo:inline>:
        <fo:inline font-family="monospace">['Window',status,buttonList,[1],number]</fo:inline>, component
        <fo:inline font-family="monospace">buttonList</fo:inline> must be of type <fo:inline font-family="monospace">SEQUENCE OF</fo:inline> or
        <fo:inline font-family="monospace">SET OF</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the example, component <fo:inline font-family="monospace">number</fo:inline> of the first of the encoded
        elements in the <fo:inline font-family="monospace">SEQUENCE OF</fo:inline> <fo:inline font-family="monospace">buttonList</fo:inline> is selected.
        This applies on the ASN.1 specification in Section
        <fo:inline font-style="italic">Writing an Exclusive Decode
        Instruction</fo:inline>.
        </fo:block>
    

    <fo:block id="idp1743248" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Another Example</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example, the same ASN.1 specification as in Section
        <fo:inline font-style="italic">Writing an Exclusive Decode Instruction</fo:inline>
         is used. The following is a valid selective decode instruction:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{selective_decode,
    {'GUI',
        [{selected_decode_Window1,
            ['Window',status,buttonList, 
             [1],
             number]},
 {selected_decode_Action,
     ['Action',handle,number]},
 {selected_decode_Window2,
     ['Window',
      status,
      actions,
      possibleActions,
      [1],
      handle,number]}]}}.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first instruction,
        <fo:inline font-family="monospace">{selected_decode_Window1,['Window',status,buttonList,[1],number]}</fo:inline>
        is described in the previous section.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> The second instruction,
        <fo:inline font-family="monospace">{selected_decode_Action,['Action',handle,number]}</fo:inline>, takes
        component <fo:inline font-family="monospace">number</fo:inline> in the <fo:inline font-family="monospace">handle</fo:inline> component of type
        <fo:inline font-family="monospace">Action</fo:inline>. If the value is
        <fo:inline font-family="monospace">ValAction = {'Action',17,{'Button',4711,false}}</fo:inline>, the internal
        value 4711 is to be picked by <fo:inline font-family="monospace">selected_decode_Action</fo:inline>. In an
        Erlang terminal it looks as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ValAction = {'Action',17,{'Button',4711,false}}.
{'Action',17,{'Button',4711,false}}
7&gt; {ok,Bytes}='GUI':encode('Action',ValAction).
...
8&gt; BinBytes = list_to_binary(Bytes).
&lt;&lt;48,18,2,1,17,160,13,172,11,171,9,48,7,128,2,18,103,129,1,0&gt;&gt;
9&gt; 'GUI':selected_decode_Action(BinBytes).
{ok,4711}
10&gt;</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The third instruction,
        <fo:inline font-family="monospace">['Window',status,actions,possibleActions,[1],handle,number]</fo:inline>,
        works as follows:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 1:</fo:inline> Starts with type <fo:inline font-family="monospace">Window</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 2:</fo:inline> Takes component <fo:inline font-family="monospace">status</fo:inline> of <fo:inline font-family="monospace">Window</fo:inline>
         that is of type <fo:inline font-family="monospace">Status</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 3:</fo:inline> Takes <fo:inline font-weight="bold">actions</fo:inline> of type
        <fo:inline font-family="monospace">Status</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 4:</fo:inline> Takes <fo:inline font-family="monospace">possibleActions</fo:inline> of the internally
         defined <fo:inline font-family="monospace">CHOICE</fo:inline> type.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 5:</fo:inline> Goes into the first component of
         <fo:inline font-family="monospace">SEQUENCE OF</fo:inline> by <fo:inline font-family="monospace">[1]</fo:inline>. That component is of type
         <fo:inline font-family="monospace">Action</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 6:</fo:inline> Takes component <fo:inline font-family="monospace">handle</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 7:</fo:inline> Takes component <fo:inline font-family="monospace">number</fo:inline> of type
        <fo:inline font-family="monospace">Button</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following figure shows which components are in <fo:inline font-family="monospace">TypeList</fo:inline>
        <fo:inline font-family="monospace">['Window',status,actions,possibleActions,[1],handle,number]</fo:inline>:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="selective_TypeList.gif"/>
        <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        4.2:
         
        Elements Specified in Configuration File for Selective Decode of a Subvalue in a Window Message</fo:block>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following figure, only the marked element is decoded by
        <fo:inline font-family="monospace">selected_decode_Window2</fo:inline>:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="selective_Window2.gif"/>
        <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        4.3:
         
        Bytes of a Window:status Message</fo:block>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With the following example, you can examine that both
        <fo:inline font-family="monospace">selected_decode_Window2</fo:inline> and
        <fo:inline font-family="monospace">selected_decode_Window1</fo:inline> decodes the intended subvalue
        of value <fo:inline font-family="monospace">Val</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; Val = {'Window',{status,{'Status',12,
                    [{'Button',13,true},
                     {'Button',14,false},
                     {'Button',15,true},
                     {'Button',16,false}],
                    true,
                    {possibleActions,[{'Action',17,{'Button',18,false}},
                                      {'Action',19,{'Button',20,true}},
                                      {'Action',21,{'Button',22,false}}]}}}}
2&gt; {ok,Bytes}='GUI':encode('Window',Val).
...
3&gt; Bin = list_to_binary(Bytes).
&lt;&lt;161,101,128,1,12,161,32,48,6,128,1,13,129,1,255,48,6,128,1,14,129,1,0,48,6,128,1,15,129,...&gt;&gt;
4&gt; 'GUI':selected_decode_Window1(Bin).
{ok,13}
5&gt; 'GUI':selected_decode_Window2(Bin).
{ok,18}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the value fed into the selective decode
        functions must be a binary.
        </fo:block>
    
  <fo:block id="idp1768320" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.3 
      Performance</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To give an indication on the possible performance gain using
      the specialized decodes, some measures have been performed. The
      relative figures in the outcome between selective, exclusive, and
      complete decode (the normal case) depend on the structure of
      the type, the size of the message, and on what level the
      selective and exclusive decodes are specified.
      </fo:block>

    <fo:block id="idp1769760" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">ASN.1 Specifications, Messages, and Configuration</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The specifications <fo:inline font-style="italic">GUI</fo:inline> and
        <fo:inline font-weight="bold"><fo:basic-link external-destination="href">MEDIA-GATEWAY-CONTROL</fo:basic-link></fo:inline>
        were used in the test.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the <fo:inline font-family="monospace">GUI</fo:inline> specification the configuration was as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{selective_decode,
  {'GUI',
    [{selected_decode_Window1,
         ['Window',
          status,buttonList,
          [1],
          number]},
     {selected_decode_Window2,
         ['Window',
          status,
          actions,
          possibleActions,
          [1],
          handle,number]}]}}.
     {exclusive_decode,
         {'GUI',
            [{decode_Window_status_exclusive,
                ['Window',
                 [{status,
                     [{buttonList,parts},
                      {actions,undecoded}]}]]}]}}.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">MEDIA-GATEWAY-CONTROL</fo:inline> configuration was as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{exclusive_decode,
  {'MEDIA-GATEWAY-CONTROL',
    [{decode_MegacoMessage_exclusive,
        ['MegacoMessage',
         [{authHeader,undecoded},
          {mess,
             [{mId,undecoded},
              {messageBody,undecoded}]}]]}]}}.
{selective_decode,
  {'MEDIA-GATEWAY-CONTROL',
    [{decode_MegacoMessage_selective,
         ['MegacoMessage',mess,version]}]}}.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The corresponding values were as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{'Window',{status,{'Status',12,
              [{'Button',13,true},
               {'Button',14,false},
               {'Button',15,true},
               {'Button',16,false},
               {'Button',13,true},
               {'Button',14,false},
               {'Button',15,true},
               {'Button',16,false},
               {'Button',13,true},
               {'Button',14,false},
               {'Button',15,true},
               {'Button',16,false}],
              true,
              {possibleActions,
                 [{'Action',17,{'Button',18,false}},
                  {'Action',19,{'Button',20,true}},
                  {'Action',21,{'Button',22,false}},
                  {'Action',17,{'Button',18,false}},
                  {'Action',19,{'Button',20,true}},
                  {'Action',21,{'Button',22,false}},
                  {'Action',17,{'Button',18,false}},
                  {'Action',19,{'Button',20,true}},
                  {'Action',21,{'Button',22,false}},
                  {'Action',17,{'Button',18,false}},
                  {'Action',19,{'Button',20,true}},
                  {'Action',21,{'Button',22,false}},
                  {'Action',17,{'Button',18,false}},
                  {'Action',19,{'Button',20,true}},
                  {'Action',21,{'Button',22,false}},
                  {'Action',17,{'Button',18,false}},
                  {'Action',19,{'Button',20,true}},
                  {'Action',21,{'Button',22,false}}]}}}}


{'MegacoMessage',asn1_NOVALUE,
  {'Message',1,
    {ip4Address,
      {'IP4Address',[125,125,125,111],55555}},
  {transactions,
    [{transactionReply,
      {'TransactionReply',50007,asn1_NOVALUE,
       {actionReplies,
        [{'ActionReply',0,asn1_NOVALUE,asn1_NOVALUE,
          [{auditValueReply,{auditResult,{'AuditResult',
            {'TerminationID',[],[255,255,255]},
             [{mediaDescriptor,
               {'MediaDescriptor',asn1_NOVALUE,
                {multiStream,
                 [{'StreamDescriptor',1,
                   {'StreamParms',
                    {'LocalControlDescriptor',
                     sendRecv,
                     asn1_NOVALUE,
                     asn1_NOVALUE,
                     [{'PropertyParm',
                       [0,11,0,7],
                       [[52,48]],
                       asn1_NOVALUE}]},
                    {'LocalRemoteDescriptor',
                     [[{'PropertyParm',
                        [0,0,176,1],
                        [[48]],
                        asn1_NOVALUE},
                       {'PropertyParm',
                         [0,0,176,8],
                         [[73,78,32,73,80,52,32,49,50,53,46,49,
                           50,53,46,49,50,53,46,49,49,49]],
                         asn1_NOVALUE},
                       {'PropertyParm',
                         [0,0,176,15],
                         [[97,117,100,105,111,32,49,49,49,49,32,
                           82,84,80,47,65,86,80,32,32,52]],
                         asn1_NOVALUE},
                       {'PropertyParm',
                         [0,0,176,12],
                         [[112,116,105,109,101,58,51,48]],
                         asn1_NOVALUE}]]},
                    {'LocalRemoteDescriptor',
                     [[{'PropertyParm',
                         [0,0,176,1],
                         [[48]],
                         asn1_NOVALUE},
                       {'PropertyParm',
                         [0,0,176,8],
                         [[73,78,32,73,80,52,32,49,50,52,46,49,50,
                           52,46,49,50,52,46,50,50,50]],
                         asn1_NOVALUE},
                       {'PropertyParm',
                         [0,0,176,15],
                         [[97,117,100,105,111,32,50,50,50,50,32,82,
                           84,80,47,65,86,80,32,32,52]],
                         asn1_NOVALUE},
                       {'PropertyParm',
                         [0,0,176,12],
                         [[112,116,105,109,101,58,51,48]],
                         asn1_NOVALUE}]]}}}]}}},
              {packagesDescriptor,
               [{'PackagesItem',[0,11],1},
                {'PackagesItem',[0,11],1}]},
              {statisticsDescriptor,
               [{'StatisticsParameter',[0,12,0,4],[[49,50,48,48]]},
                {'StatisticsParameter',[0,11,0,2],[[54,50,51,48,48]]},
                {'StatisticsParameter',[0,12,0,5],[[55,48,48]]},
                {'StatisticsParameter',[0,11,0,3],[[52,53,49,48,48]]},
                {'StatisticsParameter',[0,12,0,6],[[48,46,50]]},
                {'StatisticsParameter',[0,12,0,7],[[50,48]]},
                {'StatisticsParameter',[0,12,0,8],[[52,48]]}]}]}}}]}]}}}]}}}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The size of the encoded values was 458 bytes for <fo:inline font-family="monospace">GUI</fo:inline> and 464
        bytes for <fo:inline font-family="monospace">MEDIA-GATEWAY-CONTROL</fo:inline>.
        </fo:block>
    

    <fo:block id="idp1781824" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Results</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ASN.1 specifications in the test were compiled with options
        <fo:inline font-family="monospace">ber_bin, optimize, driver</fo:inline> and <fo:inline font-family="monospace">asn1config</fo:inline>. Omitting
        option <fo:inline font-family="monospace">driver</fo:inline> gives
        higher values for <fo:inline font-family="monospace">decode</fo:inline> and <fo:inline font-family="monospace">decode_part</fo:inline>. These tests have
	not been rerun using NIFs, but are expected to perform about 5% better
	than the linked-in driver.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The test program runs 10000 decodes on the value, resulting
        in an output with the elapsed time in microseconds for the
        total number of decodes.
        </fo:block>
      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="before" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Function</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="before" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Time</fo:inline> (microseconds)</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="before" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Decode Type</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="before" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">ASN.1 Specification</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="before" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">% of Time versus Complete Decode</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">decode_MegacoMessage_selective/1</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">374045</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">Selective</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">MEDIA-GATEWAY-CONTROL</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">8.3</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">decode_MegacoMessage_exclusive/1</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">621107</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">Exclusive</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">MEDIA-GATEWAY-CONTROL</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">13.8</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">decode/2</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">4507457</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">Complete</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">MEDIA-GATEWAY-CONTROL</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">100</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">selected_decode_Window1/1</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">449585</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">Selective</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">GUI</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">7.6</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">selected_decode_Window2/1</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">890666</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">Selective</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">GUI</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">15.1</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">decode_Window_status_exclusive/1</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">1251878</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">Exclusive</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">GUI</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">21.3</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">decode/2</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">5889197</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">Complete</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">GUI</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">100</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        4.1:
         
        Results of Complete, Exclusive, and Selective Decode</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also of interest to know the relation is between
        a complete decode, an exclusive decode followed by
        <fo:inline font-family="monospace">decode_part</fo:inline> of the excluded parts, and a selective decode
        followed by a complete decode. Some situations can be compared to
        this simulation, for example, inspect a subvalue and later inspect
        the entire value. The following table shows figures from this
        test. The number of loops and the time unit are the same as in the
        previous test.
        </fo:block>
      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="before" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Actions</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="before" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Function</fo:inline>    </fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="before" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Time</fo:inline> (microseconds)</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="before" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">ASN.1 Specification</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="before" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">% of Time vs. Complete Decode</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">Complete</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">decode/2</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">4507457</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">MEDIA-GATEWAY-CONTROL</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">100</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">Selective and Complete</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">decode_­MegacoMessage_­selective/1</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">4881502</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">MEDIA-GATEWAY-CONTROL</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">108.3</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">Exclusive and decode_part</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">decode_­MegacoMessage_­exclusive/1</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">5481034</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">MEDIA-GATEWAY-CONTROL</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">112.3</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">Complete</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">decode/2</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">5889197</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">GUI</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">100</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">Selective and Complete</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">selected_­decode_­Window1/1</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">6337636</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">GUI</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">107.6</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">Selective and Complete</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">selected_­decode_­Window2/1</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">6795319</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">GUI</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">115.4</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">Exclusive and decode_part</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">decode_­Window_­status_­exclusive/1</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">6249200</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">GUI</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">106.1</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        4.2:
         
        Results of Complete, Exclusive + decode_part, and Selective + complete decodes</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other ASN.1 types and values can differ much from these
        figures. It is therefore important that you, in every case where
        you intend to use either of these decodes, perform some tests
        that show if you will benefit your purpose.
        </fo:block>
    

    <fo:block id="idp1883088" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Final Remarks</fo:block>
      
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The gain of using selective and exclusive decode instead of a
        complete decode is greater the bigger the value and the
        less deep in the structure you have to decode.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Use selective decode instead of exclusive decode if you are
        interested in only a single subvalue.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Exclusive decode followed by
        <fo:inline font-family="monospace">decode_part</fo:inline> decodes is attractive if the parts are sent
        to different servers for decoding, or if you in some cases are not
        interested in all parts.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The fastest selective decode is when the decoded type is a
        primitive type and not so deep in the structure of the top
        type. <fo:inline font-family="monospace">selected_decode_Window2</fo:inline> decodes a high constructed
        value, which explains why this operation is relatively slow.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>It can vary from case to case which combination of
        selective/complete decode or exclusive/part decode is the fastest.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    
  <fo:block id="idp251936" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ASN.1</fo:inline> application
      contains modules with compile-time and runtime support for ASN.1.</fo:block>
  <fo:block page-break-before="always" id="idp1117968" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">asn1ct</fo:marker>asn1ct</fo:block>Erlang module</fo:block>
  <fo:block/>
  asn1ct
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ASN.1 compiler takes an ASN.1 module as input and generates a 
      corresponding Erlang module, which can encode and decode the specified
      data types. Alternatively, the compiler takes a specification module
      specifying all input modules, and generates a module with 
      encode/decode functions. In addition, some generic functions
      can be used during development of applications that handles ASN.1
      data (encoded as <fo:inline font-family="monospace">BER</fo:inline> or <fo:inline font-family="monospace">PER</fo:inline>).</fo:block>

      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default in OTP 17, the representation of the <fo:inline font-family="monospace">BIT STRING</fo:inline>
	and <fo:inline font-family="monospace">OCTET STRING</fo:inline> types as Erlang terms were changed. <fo:inline font-family="monospace">BIT
	STRING</fo:inline> values are now Erlang bit strings and <fo:inline font-family="monospace">OCTET STRING</fo:inline>
	values are binaries. Also, an undecoded open type is now wrapped in
	an <fo:inline font-family="monospace">asn1_OPENTYPE</fo:inline> tuple. For details, see <fo:inline font-style="italic">BIT STRING</fo:inline>, <fo:inline font-style="italic">OCTET STRING</fo:inline>, and
	<fo:inline font-style="italic">ASN.1 Information Objects</fo:inline> in the User's Guide.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To revert to the old representation of the types, use option
	<fo:inline font-family="monospace">legacy_erlang_types</fo:inline>.</fo:block>
      </fo:block>

      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In OTP R16, the options were simplified. The back end is chosen
	using one of the options <fo:inline font-family="monospace">ber</fo:inline>, <fo:inline font-family="monospace">per</fo:inline>, or <fo:inline font-family="monospace">uper</fo:inline>.
	Options <fo:inline font-family="monospace">optimize</fo:inline>, <fo:inline font-family="monospace">nif</fo:inline>, and <fo:inline font-family="monospace">driver</fo:inline> options
	are no longer necessary (and the ASN.1 compiler generates a
	warning if they are used). Options <fo:inline font-family="monospace">ber_bin</fo:inline>, <fo:inline font-family="monospace">per_bin</fo:inline>,
	and <fo:inline font-family="monospace">uper_bin</fo:inline> options still work, but generates a warning.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another change in OTP R16 is that the generated function
	<fo:inline font-family="monospace">encode/2</fo:inline> always returns a binary. Function <fo:inline font-family="monospace">encode/2</fo:inline>
	for the <fo:inline font-family="monospace">BER</fo:inline> back end used to return an iolist.</fo:block>
      </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1517152">compile(Asn1module) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1516704">compile(Asn1module, Options) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Asn1module = atom() | string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option| OldOption]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = ber | per | uper | der | compact_bit_string |
	legacy_bit_string | legacy_erlang_types |
	noobj | {n2n, EnumTypeName} |{outdir, Dir} | {i, IncludeDir} |
	asn1config | undec_rest | no_ok_wrapper |
	{macro_name_prefix, Prefix} | {record_name_prefix, Prefix} | verbose | warnings_as_errors</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OldOption = ber | per</fo:block></fo:list-item-body></fo:list-item> 
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Prefix = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compiles the <fo:inline font-family="monospace">ASN.1</fo:inline> module <fo:inline font-family="monospace">Asn1module</fo:inline> and generates 
          an Erlang module <fo:inline font-family="monospace">Asn1module.erl</fo:inline> with encode and decode 
          functions for the types defined in <fo:inline font-family="monospace">Asn1module</fo:inline>. For each 
          ASN.1 value defined in the module, an Erlang function that 
          returns the value in Erlang representation is generated.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Asn1module</fo:inline> is a filename without extension, first
          <fo:inline font-family="monospace">".asn1"</fo:inline> is assumed, then <fo:inline font-family="monospace">".asn"</fo:inline>, and finally
          <fo:inline font-family="monospace">".py"</fo:inline> (to be compatible with the old ASN.1 compiler).
          <fo:inline font-family="monospace">Asn1module</fo:inline> can be a full pathname (relative or
          absolute) including filename with (or without) extension.
                    
</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If it is needed to compile a set of <fo:inline font-family="monospace">ASN.1</fo:inline> modules into an
          Erlang file with encode/decode functions, ensure to list all
          involved files in a configuration file. This configuration
          file must have a double extension <fo:inline font-family="monospace">".set.asn"</fo:inline>
          (<fo:inline font-family="monospace">".asn"</fo:inline> can alternatively be <fo:inline font-family="monospace">".asn1"</fo:inline> or <fo:inline font-family="monospace">".py"</fo:inline>).
          List the input file names
          within quotation marks (""), one at each row
          in the file. If the input files are <fo:inline font-family="monospace">File1.asn</fo:inline>,
          <fo:inline font-family="monospace">File2.asn</fo:inline>, and <fo:inline font-family="monospace">File3.asn</fo:inline>, the configuration file
          must look as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
File1.asn
File2.asn
File3.asn</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The output files in this case get their names from the
          configuration file. If the configuration file is named
          <fo:inline font-family="monospace">SetOfFiles.set.asn</fo:inline>, the names of the output files are
          <fo:inline font-family="monospace">SetOfFiles.hrl, SetOfFiles.erl, and SetOfFiles.asn1db</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sometimes in a system of <fo:inline font-family="monospace">ASN.1</fo:inline> modules, different
          default tag modes, for example, <fo:inline font-family="monospace">AUTOMATIC</fo:inline>, <fo:inline font-family="monospace">IMPLICIT</fo:inline>,
          or <fo:inline font-family="monospace">EXPLICIT</fo:inline>. The
          multi-file compilation resolves the default tagging as if
          the modules were compiled separately.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Name collisions is another unwanted effect that can occur in
          multi file-compilation. The compiler solves this problem in one
          of two ways:</fo:block>
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If the definitions are identical, the output module
            keeps only one definition with the original name.</fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If the definitions have the same name and differs in the
            definition, they are renamed. The new names are the definition
            name and the original module name concatenated.</fo:block></fo:list-item-body></fo:list-item>
	  </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a name collision occurs, the compiler reports a 
          <fo:inline font-family="monospace">"NOTICE: ..."</fo:inline> message that tells if a definition was renamed,
          and the new name that must be used to encode/decode data.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Options</fo:inline> is a list with options specific for the <fo:inline font-family="monospace">ASN.1</fo:inline>
	  compiler and options that are applied to the Erlang compiler.
	  The latter are not recognized as <fo:inline font-family="monospace">ASN.1</fo:inline> specific. The
	  available options are as follows:
	</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ber | per | uper</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	      The encoding rule to be used. The supported encoding rules
	      are Basic Encoding Rules (BER),
	      Packed Encoding Rules (PER) aligned, and PER unaligned.
	      If the encoding rule option is omitted, <fo:inline font-family="monospace">ber</fo:inline> 
	      is the default.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	      The generated Erlang module always gets the same name
	      as the <fo:inline font-family="monospace">ASN.1</fo:inline> module. Therefore, only one
	      encoding rule per <fo:inline font-family="monospace">ASN.1</fo:inline> module can be used at runtime.
	    </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">der</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	      With this option the Distinguished Encoding Rules (DER) is chosen.
	      DER is regarded as a specialized variant of the BER encoding 
              rule. Therefore, this option only makes sense together
	      with option <fo:inline font-family="monospace">ber</fo:inline>.
	      This option
              sometimes adds sorting and value checks when encoding, which
              implies a slower encoding. The decoding routines are the same
              as for <fo:inline font-family="monospace">ber</fo:inline>.
	    </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">maps</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option changes the representation of the types
	    <fo:inline font-family="monospace">SEQUENCE</fo:inline> and <fo:inline font-family="monospace">SET</fo:inline> to use maps (instead of
	    records).  This option also suppresses the generation of
	    <fo:inline font-family="monospace">.hrl</fo:inline> files.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see Section
	      <fo:inline font-style="italic">
		Map representation for SEQUENCE and SET</fo:inline>
		in the User's Guide.
	    </fo:block>
	  </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">compact_bit_string</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	      The <fo:inline font-family="monospace">BIT STRING</fo:inline> type is decoded to "compact notation".
	      <fo:inline font-weight="bold">This option is not recommended for new code.</fo:inline>
	      This option cannot be combined with the option <fo:inline font-family="monospace">maps</fo:inline>.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see Section
	      <fo:inline font-style="italic">
		BIT STRING</fo:inline> in the User's Guide.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option implies option <fo:inline font-family="monospace">legacy_erlang_types</fo:inline>.</fo:block>
	  </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">legacy_bit_string</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	      The <fo:inline font-family="monospace">BIT STRING</fo:inline> type is decoded to the legacy
	      format, that is, a list of zeroes and ones.
	      <fo:inline font-weight="bold">This option is not recommended for new code.</fo:inline>
	      This option cannot be combined with the option <fo:inline font-family="monospace">maps</fo:inline>.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see Section
	      <fo:inline font-style="italic">BIT STRING</fo:inline>
	      in the User's Guide</fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option implies option <fo:inline font-family="monospace">legacy_erlang_types</fo:inline>.</fo:block>
	  </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">legacy_erlang_types</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use the same Erlang types to represent <fo:inline font-family="monospace">BIT STRING</fo:inline> and
            <fo:inline font-family="monospace">OCTET STRING</fo:inline> as in OTP R16.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see Section <fo:inline font-style="italic">BIT STRING</fo:inline> and Section
            <fo:inline font-style="italic">OCTET
            STRING</fo:inline> in the User's Guide.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">This option is not recommended for new code.</fo:inline>
	    This option cannot be combined with the option <fo:inline font-family="monospace">maps</fo:inline>.</fo:block>
	  </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{n2n, EnumTypeName}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	      Tells the compiler to generate functions for conversion
	      between names (as atoms) and numbers and conversely for
	      the specified <fo:inline font-family="monospace">EnumTypeName</fo:inline>. There can be multiple
	      occurrences of this option to specify several type names.
	      The type names must be declared as <fo:inline font-family="monospace">ENUMERATIONS</fo:inline> in
	      the ASN.1 specification.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	      If <fo:inline font-family="monospace">EnumTypeName</fo:inline> does not exist in the ASN.1 specification, 
	      the compilation stops with an error code.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	      The generated conversion functions are named
	      <fo:inline font-family="monospace">name2num_EnumTypeName/1</fo:inline> and 
	      <fo:inline font-family="monospace">num2name_EnumTypeName/1</fo:inline>.
	    </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">noobj</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do not compile (that is, do not produce object code) the
	      generated <fo:inline font-family="monospace">.erl</fo:inline> file. If this option is omitted, the
	      generated Erlang module is compiled.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{i, IncludeDir}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds <fo:inline font-family="monospace">IncludeDir</fo:inline> to the search-path for
              <fo:inline font-family="monospace">.asn1db</fo:inline> and <fo:inline font-family="monospace">ASN.1</fo:inline> source files. The compiler
              tries to open an <fo:inline font-family="monospace">.asn1db</fo:inline> file when a module imports
              definitions from another <fo:inline font-family="monospace">ASN.1</fo:inline> module. If no
              <fo:inline font-family="monospace">.asn1db</fo:inline> file is found, the <fo:inline font-family="monospace">ASN.1</fo:inline> source file is
              parsed. Several <fo:inline font-family="monospace">{i, IncludeDir}</fo:inline> can be given.
              </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{outdir, Dir}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies directory <fo:inline font-family="monospace">Dir</fo:inline> where all generated files 
              are to be placed. If this option is omitted, the files are
	      placed in the current directory.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">asn1config</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When using one of the specialized decodes, exclusive or
              selective decode, instructions must be given in
              a configuration file. Option <fo:inline font-family="monospace">asn1config</fo:inline> enables
              specialized decodes and takes the configuration file in
	      concern. The configuration file has
              the same name as the ASN.1 specification, but with extension
              <fo:inline font-family="monospace">.asn1config</fo:inline>.
              </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For instructions for exclusive decode, see Section
              <fo:inline font-style="italic">Exclusive
	      Decode</fo:inline> in the User's Guide.
              </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For instructions for selective decode, see Section
              <fo:inline font-style="italic">Selective
	      Decode</fo:inline> in the User's Guide.
              </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">undec_rest</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A buffer that holds a message, being decoded it can also
              have some following bytes. Those following bytes can now
              be returned together with the decoded value. If an
              ASN.1 specification is compiled with this option, a tuple
              <fo:inline font-family="monospace">{ok, Value, Rest}</fo:inline> is returned. <fo:inline font-family="monospace">Rest</fo:inline> can be a
              list or a binary. Earlier versions of the compiler ignored
              those following bytes.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">no_ok_wrapper</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With this option, the generated <fo:inline font-family="monospace">encode/2</fo:inline>
	    and <fo:inline font-family="monospace">decode/2</fo:inline> functions do not wrap a successful
	    return value in an <fo:inline font-family="monospace">{ok,...}</fo:inline> tuple. If any error
	    occurs, an exception will be raised.</fo:block>
	  </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{macro_name_prefix, Prefix}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All macro names generated by the compiler are prefixed with
              <fo:inline font-family="monospace">Prefix</fo:inline>. This is useful when multiple protocols that contain
              macros with identical names are included in a single module.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{record_name_prefix, Prefix}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All record names generated by the compiler are prefixed with
              <fo:inline font-family="monospace">Prefix</fo:inline>. This is useful when multiple protocols that contain
              records with identical names are included in a single module.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">verbose</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Causes more verbose information from the compiler
              describing what it is doing.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">warnings_as_errors</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Causes warnings to be treated as errors.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any more option that is applied is passed to
          the final step when the generated <fo:inline font-family="monospace">.erl</fo:inline> file is compiled.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler generates the following files:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Asn1module.hrl</fo:inline> (if any <fo:inline font-family="monospace">SET</fo:inline> or <fo:inline font-family="monospace">SEQUENCE</fo:inline>
	    is defined)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Asn1module.erl</fo:inline> - Erlang module with encode, decode,
	    and value functions
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Asn1module.asn1db</fo:inline> - Intermediate format used by the
	    compiler when modules <fo:inline font-family="monospace">IMPORT</fo:inline> definitions from each other.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp209792">value(Module, Type) -&gt; {ok, Value} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = Type = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang term that is an example of a valid Erlang 
          representation of a value of the <fo:inline font-family="monospace">ASN.1</fo:inline> type <fo:inline font-family="monospace">Type</fo:inline>. The value
          is a random value and subsequent calls to this function will for most
          types return different values.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Currently, the <fo:inline font-family="monospace">value</fo:inline> function has many limitations.
	  Essentially, it will mostly work for old specifications based
	  on the 1997 standard for ASN.1, but not for most modern-style
	  applications. Another limitation is that the <fo:inline font-family="monospace">value</fo:inline> function
	  may not work if options that change code generations strategies
	  such as the options <fo:inline font-family="monospace">macro_name_prefix</fo:inline> and
	  <fo:inline font-family="monospace">record_name_prefix</fo:inline> have been used.</fo:block>
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp534080">test(Module) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp533664">test(Module, Type | Options) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp533216">test(Module, Type, Value | Options) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = Type = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [{i, IncludeDir}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs a test of encode and decode of types in <fo:inline font-family="monospace">Module</fo:inline>.
          The generated functions are called by this function.
          This function is useful during test to secure that the generated
          encode and decode functions as well as the general runtime support
          work as expected.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Currently, the <fo:inline font-family="monospace">test</fo:inline> functions have many limitations.
	  Essentially, they will mostly work for old specifications based
	  on the 1997 standard for ASN.1, but not for most modern-style
	  applications. Another limitation is that the <fo:inline font-family="monospace">test</fo:inline> functions
	  may not work if options that change code generations strategies
	  such as the options <fo:inline font-family="monospace">macro_name_prefix</fo:inline> and
	  <fo:inline font-family="monospace">record_name_prefix</fo:inline> have been used.</fo:block>
	</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">test/1</fo:inline> iterates over all types in <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">test/2</fo:inline> tests type <fo:inline font-family="monospace">Type</fo:inline> with a random value.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">test/3</fo:inline> tests type <fo:inline font-family="monospace">Type</fo:inline> with <fo:inline font-family="monospace">Value</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Schematically, the following occurs for each type in the module:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{ok, Value} = asn1ct:value(Module, Type),
{ok, Bytes} = Module:encode(Type, Value),
{ok, Value} = Module:decode(Type, Bytes).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">test</fo:inline> functions use the <fo:inline font-family="monospace">*.asn1db</fo:inline> files
          for all included modules. If they are located in a different
          directory than the current working directory, use the <fo:inline font-family="monospace">include</fo:inline>
          option to add paths. This is only needed when automatically
          generating values. For static values using <fo:inline font-family="monospace">Value</fo:inline> no
          options are needed.</fo:block>

      </fo:block>
  
  
</fo:flow>
  </fo:page-sequence>
</fo:root>
