<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>Erlang Run-Time System Application (ERTS)</fo:bookmark-title>
      <fo:bookmark internal-destination="idp2908192" starting-state="hide">
        <fo:bookmark-title>ERTS User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp2901744" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3058896" starting-state="hide">
            <fo:bookmark-title>Scope</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2893680" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3060528" starting-state="hide">
          <fo:bookmark-title>Communication in Erlang</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3056688" starting-state="hide">
            <fo:bookmark-title>Passing of Signals</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3052208" starting-state="hide">
            <fo:bookmark-title>Synchronous Communication</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3048736" starting-state="hide">
            <fo:bookmark-title>Implementation</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3042624" starting-state="hide">
          <fo:bookmark-title>Time and Time Correction in Erlang</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3039056" starting-state="hide">
            <fo:bookmark-title>New Extended Time Functionality</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3032896" starting-state="hide">
            <fo:bookmark-title>Terminology</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3030208" starting-state="hide">
              <fo:bookmark-title>Monotonically Increasing</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3029568" starting-state="hide">
              <fo:bookmark-title>Strictly Monotonically Increasing</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3026112" starting-state="hide">
              <fo:bookmark-title>UT1</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3024048" starting-state="hide">
              <fo:bookmark-title>UTC</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3021712" starting-state="hide">
              <fo:bookmark-title>POSIX Time</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3006800" starting-state="hide">
              <fo:bookmark-title>Time Resolution</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3016208" starting-state="hide">
              <fo:bookmark-title>Time Precision</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3013744" starting-state="hide">
              <fo:bookmark-title>Time Accuracy</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3009760" starting-state="hide">
              <fo:bookmark-title>Time Warp</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3008016" starting-state="hide">
              <fo:bookmark-title>OS System Time</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3002064" starting-state="hide">
              <fo:bookmark-title>OS Monotonic Time</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2998048" starting-state="hide">
              <fo:bookmark-title>Erlang System Time</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2993168" starting-state="hide">
              <fo:bookmark-title>Erlang Monotonic Time</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2981776" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2973248" starting-state="hide">
            <fo:bookmark-title>Time Correction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3091760" starting-state="hide">
            <fo:bookmark-title>Time Warp Safe Code</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3084128" starting-state="hide">
            <fo:bookmark-title>Time Warp Modes</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3078480" starting-state="hide">
              <fo:bookmark-title>No Time Warp Mode</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3074816" starting-state="hide">
              <fo:bookmark-title>Single Time Warp Mode</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3158992" starting-state="hide">
              <fo:bookmark-title>Multi-Time Warp Mode</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3154528" starting-state="hide">
            <fo:bookmark-title>New Time API</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3118768" starting-state="hide">
              <fo:bookmark-title>New Erlang Monotonic Time</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3114336" starting-state="hide">
              <fo:bookmark-title>Unique Values</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2820592" starting-state="hide">
              <fo:bookmark-title>How to Work with the New API</fo:bookmark-title>
              <fo:bookmark internal-destination="idp2818944" starting-state="hide">
                <fo:bookmark-title>Retrieve Erlang System Time</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp2811392" starting-state="hide">
                <fo:bookmark-title>Measure Elapsed Time</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp2944080" starting-state="hide">
                <fo:bookmark-title>Determine Order of Events</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp2791088" starting-state="hide">
                <fo:bookmark-title>Determine Order of Events with Time of the Event</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp1092688" starting-state="hide">
                <fo:bookmark-title>Create a Unique Name</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp984880" starting-state="hide">
                <fo:bookmark-title>Seed Random Number Generation with a Unique Value</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp977344" starting-state="hide">
            <fo:bookmark-title>Support of Both New and Old OTP Releases</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2826608" starting-state="hide">
          <fo:bookmark-title>Match Specifications in Erlang</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3141056" starting-state="hide">
            <fo:bookmark-title>Grammar</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1055712" starting-state="hide">
            <fo:bookmark-title>Function Descriptions</fo:bookmark-title>
            <fo:bookmark internal-destination="idp679552" starting-state="hide">
              <fo:bookmark-title>Functions Allowed in All Types of Match Specifications</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1983216" starting-state="hide">
              <fo:bookmark-title>Functions Allowed Only for Tracing</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4005120" starting-state="hide">
            <fo:bookmark-title>Match target</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4025376" starting-state="hide">
            <fo:bookmark-title>Variables and Literals</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4072704" starting-state="hide">
            <fo:bookmark-title>Execution of the Match</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1448032" starting-state="hide">
            <fo:bookmark-title>Differences between Match Specifications in ETS and Tracing</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp377360" starting-state="hide">
            <fo:bookmark-title>Tracing Examples</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4087392" starting-state="hide">
            <fo:bookmark-title>ETS Examples</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4098112" starting-state="hide">
          <fo:bookmark-title>How to Interpret the Erlang Crash Dumps</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4108560" starting-state="hide">
            <fo:bookmark-title>General Information</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4112400" starting-state="hide">
              <fo:bookmark-title>Reasons for Crash Dumps (Slogan)</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4140288" starting-state="hide">
              <fo:bookmark-title>Number of Atoms</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4143888" starting-state="hide">
            <fo:bookmark-title>Scheduler Information</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4166480" starting-state="hide">
            <fo:bookmark-title>Memory Information</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4169936" starting-state="hide">
            <fo:bookmark-title>Internal Table Information</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4172864" starting-state="hide">
            <fo:bookmark-title>Allocated Areas</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4176336" starting-state="hide">
            <fo:bookmark-title>Allocator</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4180736" starting-state="hide">
            <fo:bookmark-title>Process Information</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4227680" starting-state="hide">
            <fo:bookmark-title>Port Information</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4229696" starting-state="hide">
            <fo:bookmark-title>ETS Tables</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4259088" starting-state="hide">
            <fo:bookmark-title>Timers</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4267040" starting-state="hide">
            <fo:bookmark-title>Distribution Information</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4287360" starting-state="hide">
            <fo:bookmark-title>Loaded Module Information</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4305552" starting-state="hide">
            <fo:bookmark-title>Fun Information</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4316880" starting-state="hide">
            <fo:bookmark-title>Process Data</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4328000" starting-state="hide">
            <fo:bookmark-title>Atoms</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4330000" starting-state="hide">
            <fo:bookmark-title>Disclaimer</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4335600" starting-state="hide">
          <fo:bookmark-title>How to Implement an Alternative Carrier for the Erlang Distribution
    </fo:bookmark-title>
          <fo:bookmark internal-destination="idp4345232" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4346496" starting-state="hide">
              <fo:bookmark-title>Writing an Erlang Driver</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4351920" starting-state="hide">
              <fo:bookmark-title>Writing an Erlang Interface for the Driver</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4355616" starting-state="hide">
              <fo:bookmark-title>Writing a Distribution Module</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4362336" starting-state="hide">
              <fo:bookmark-title>Creating Boot Scripts</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4366288" starting-state="hide">
            <fo:bookmark-title>The Driver</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4367584" starting-state="hide">
              <fo:bookmark-title>Drivers in General</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4392576" starting-state="hide">
              <fo:bookmark-title>The Data Structures of the Distribution Driver</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4482912" starting-state="hide">
              <fo:bookmark-title>Selected Parts of the Distribution Driver Implementation</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4579840" starting-state="hide">
            <fo:bookmark-title>Putting It All Together</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4603344" starting-state="hide">
          <fo:bookmark-title>The Abstract Format</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4623008" starting-state="hide">
            <fo:bookmark-title>Module Declarations and Forms</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4653056" starting-state="hide">
              <fo:bookmark-title>Record Fields</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4664400" starting-state="hide">
              <fo:bookmark-title>Representation of Parse Errors and End-of-File</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4672176" starting-state="hide">
            <fo:bookmark-title>Atomic Literals</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4682720" starting-state="hide">
            <fo:bookmark-title>Patterns</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4719376" starting-state="hide">
            <fo:bookmark-title>Expressions</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4814192" starting-state="hide">
              <fo:bookmark-title>Qualifiers</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4824064" starting-state="hide">
              <fo:bookmark-title>Bitstring Element Type Specifiers</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4832176" starting-state="hide">
              <fo:bookmark-title>Associations</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4838080" starting-state="hide">
            <fo:bookmark-title>Clauses</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4868112" starting-state="hide">
            <fo:bookmark-title>Guards</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4914400" starting-state="hide">
            <fo:bookmark-title>Types</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4959808" starting-state="hide">
              <fo:bookmark-title>Function Types</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4967056" starting-state="hide">
              <fo:bookmark-title>Function Constraints</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4972432" starting-state="hide">
              <fo:bookmark-title>Association Types</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4979552" starting-state="hide">
              <fo:bookmark-title>Record Field Types</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4983184" starting-state="hide">
            <fo:bookmark-title>The Abstract Format after Preprocessing</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4992816" starting-state="hide">
          <fo:bookmark-title>tty - A Command-Line Interface</fo:bookmark-title>
          <fo:bookmark internal-destination="idp5002192" starting-state="hide">
            <fo:bookmark-title>Normal Mode</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5066544" starting-state="hide">
            <fo:bookmark-title>Shell Break Mode</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp5073920" starting-state="hide">
          <fo:bookmark-title>How to Implement a Driver</fo:bookmark-title>
          <fo:bookmark internal-destination="idp5079760" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5083776" starting-state="hide">
            <fo:bookmark-title>Sample Driver</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5132592" starting-state="hide">
            <fo:bookmark-title>Compiling and Linking the Sample Driver</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5137008" starting-state="hide">
            <fo:bookmark-title>Calling a Driver as a Port in Erlang</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5153200" starting-state="hide">
            <fo:bookmark-title>Sample Asynchronous Driver</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5185936" starting-state="hide">
            <fo:bookmark-title>An Asynchronous Driver Using driver_async</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp5214960" starting-state="hide">
          <fo:bookmark-title>Inet Configuration</fo:bookmark-title>
          <fo:bookmark internal-destination="idp5217936" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5233312" starting-state="hide">
            <fo:bookmark-title>Configuration Data</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5325920" starting-state="hide">
            <fo:bookmark-title>User Configuration Example</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp5334944" starting-state="hide">
          <fo:bookmark-title>External Term Format</fo:bookmark-title>
          <fo:bookmark internal-destination="idp5337920" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5379104" starting-state="hide">
            <fo:bookmark-title>Distribution Header</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5452464" starting-state="hide">
            <fo:bookmark-title>ATOM_CACHE_REF</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5461680" starting-state="hide">
            <fo:bookmark-title>SMALL_INTEGER_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5469728" starting-state="hide">
            <fo:bookmark-title>INTEGER_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5477792" starting-state="hide">
            <fo:bookmark-title>FLOAT_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5487424" starting-state="hide">
            <fo:bookmark-title>REFERENCE_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5507472" starting-state="hide">
            <fo:bookmark-title>PORT_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5522608" starting-state="hide">
            <fo:bookmark-title>PID_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5540592" starting-state="hide">
            <fo:bookmark-title>SMALL_TUPLE_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5551728" starting-state="hide">
            <fo:bookmark-title>LARGE_TUPLE_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5563216" starting-state="hide">
            <fo:bookmark-title>MAP_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5576528" starting-state="hide">
            <fo:bookmark-title>NIL_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5582960" starting-state="hide">
            <fo:bookmark-title>STRING_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5595120" starting-state="hide">
            <fo:bookmark-title>LIST_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5610144" starting-state="hide">
            <fo:bookmark-title>BINARY_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5622912" starting-state="hide">
            <fo:bookmark-title>SMALL_BIG_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5637792" starting-state="hide">
            <fo:bookmark-title>LARGE_BIG_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5651552" starting-state="hide">
            <fo:bookmark-title>NEW_REFERENCE_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5674608" starting-state="hide">
            <fo:bookmark-title>FUN_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5708848" starting-state="hide">
            <fo:bookmark-title>NEW_FUN_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5761376" starting-state="hide">
            <fo:bookmark-title>EXPORT_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5779936" starting-state="hide">
            <fo:bookmark-title>BIT_BINARY_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5793376" starting-state="hide">
            <fo:bookmark-title>NEW_FLOAT_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5801952" starting-state="hide">
            <fo:bookmark-title>ATOM_UTF8_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5814320" starting-state="hide">
            <fo:bookmark-title>SMALL_ATOM_UTF8_EXT</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5827568" starting-state="hide">
            <fo:bookmark-title>ATOM_EXT (deprecated)</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5839200" starting-state="hide">
            <fo:bookmark-title>SMALL_ATOM_EXT (deprecated)</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp5857072" starting-state="hide">
          <fo:bookmark-title>Distribution Protocol</fo:bookmark-title>
          <fo:bookmark internal-destination="idp5871536" starting-state="hide">
            <fo:bookmark-title>EPMD Protocol</fo:bookmark-title>
            <fo:bookmark internal-destination="idp5881232" starting-state="hide">
              <fo:bookmark-title>Register a Node in EPMD</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp5933008" starting-state="hide">
              <fo:bookmark-title>Unregister a Node from EPMD</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp5934480" starting-state="hide">
              <fo:bookmark-title>Get the Distribution Port of Another Node</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp5977760" starting-state="hide">
              <fo:bookmark-title>Get All Registered Names from EPMD</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp5994400" starting-state="hide">
              <fo:bookmark-title>Dump All Data from EPMD</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp6011248" starting-state="hide">
              <fo:bookmark-title>Kill EPMD</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp6022784" starting-state="hide">
              <fo:bookmark-title>STOP_REQ  (Not Used)</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6046016" starting-state="hide">
            <fo:bookmark-title>Distribution Handshake</fo:bookmark-title>
            <fo:bookmark internal-destination="idp6047984" starting-state="hide">
              <fo:bookmark-title>General</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp6051248" starting-state="hide">
              <fo:bookmark-title>Definitions</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp6069968" starting-state="hide">
              <fo:bookmark-title>The Handshake in Detail</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp6122704" starting-state="hide">
              <fo:bookmark-title>Semigraphic View</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp6126272" starting-state="hide">
              <fo:bookmark-title>Distribution Flags</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6152384" starting-state="hide">
            <fo:bookmark-title>Protocol between Connected Nodes</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6209008" starting-state="hide">
            <fo:bookmark-title>New Ctrlmessages for distrvsn = 1 (Erlang/OTP R4)</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6220192" starting-state="hide">
            <fo:bookmark-title>New Ctrlmessages for distrvsn = 2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6221840" starting-state="hide">
            <fo:bookmark-title>New Ctrlmessages for distrvsn = 3 (Erlang/OTP R5C)</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6223248" starting-state="hide">
            <fo:bookmark-title>New Ctrlmessages for distrvsn = 4 (Erlang/OTP R6)</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp464656" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp7402320" starting-state="hide">
          <fo:bookmark-title>erl_prim_loader</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7396576" starting-state="hide">
            <fo:bookmark-title>get_file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7389232" starting-state="hide">
            <fo:bookmark-title>get_path/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7386096" starting-state="hide">
            <fo:bookmark-title>list_dir/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7379136" starting-state="hide">
            <fo:bookmark-title>read_file_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1354144" starting-state="hide">
            <fo:bookmark-title>read_link_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1348272" starting-state="hide">
            <fo:bookmark-title>set_path/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp12443792" starting-state="hide">
          <fo:bookmark-title>erlang</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3859120" starting-state="hide">
            <fo:bookmark-title>abs/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3858992" starting-state="hide">
            <fo:bookmark-title>abs/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1747632" starting-state="hide">
            <fo:bookmark-title>adler32/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1745024" starting-state="hide">
            <fo:bookmark-title>adler32/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1739088" starting-state="hide">
            <fo:bookmark-title>adler32_combine/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7736240" starting-state="hide">
            <fo:bookmark-title>append_element/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7731120" starting-state="hide">
            <fo:bookmark-title>apply/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12419872" starting-state="hide">
            <fo:bookmark-title>apply/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1376000" starting-state="hide">
            <fo:bookmark-title>atom_to_binary/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7368032" starting-state="hide">
            <fo:bookmark-title>atom_to_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1397984" starting-state="hide">
            <fo:bookmark-title>binary_part/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7460128" starting-state="hide">
            <fo:bookmark-title>binary_part/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7445696" starting-state="hide">
            <fo:bookmark-title>binary_to_atom/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp476000" starting-state="hide">
            <fo:bookmark-title>binary_to_existing_atom/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6459792" starting-state="hide">
            <fo:bookmark-title>binary_to_float/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6707264" starting-state="hide">
            <fo:bookmark-title>binary_to_integer/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp325184" starting-state="hide">
            <fo:bookmark-title>binary_to_integer/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1933984" starting-state="hide">
            <fo:bookmark-title>binary_to_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp995488" starting-state="hide">
            <fo:bookmark-title>binary_to_list/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp787248" starting-state="hide">
            <fo:bookmark-title>binary_to_term/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3852032" starting-state="hide">
            <fo:bookmark-title>binary_to_term/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp374384" starting-state="hide">
            <fo:bookmark-title>bit_size/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12310240" starting-state="hide">
            <fo:bookmark-title>bitstring_to_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12313296" starting-state="hide">
            <fo:bookmark-title>bump_reductions/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3762416" starting-state="hide">
            <fo:bookmark-title>byte_size/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3768048" starting-state="hide">
            <fo:bookmark-title>cancel_timer/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7413872" starting-state="hide">
            <fo:bookmark-title>cancel_timer/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7757792" starting-state="hide">
            <fo:bookmark-title>ceil/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1593200" starting-state="hide">
            <fo:bookmark-title>check_old_code/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1598352" starting-state="hide">
            <fo:bookmark-title>check_process_code/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1602672" starting-state="hide">
            <fo:bookmark-title>check_process_code/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1147680" starting-state="hide">
            <fo:bookmark-title>convert_time_unit/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1153664" starting-state="hide">
            <fo:bookmark-title>crc32/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1156576" starting-state="hide">
            <fo:bookmark-title>crc32/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1162496" starting-state="hide">
            <fo:bookmark-title>crc32_combine/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1167472" starting-state="hide">
            <fo:bookmark-title>date/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1171600" starting-state="hide">
            <fo:bookmark-title>decode_packet/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1216528" starting-state="hide">
            <fo:bookmark-title>delete_element/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1222048" starting-state="hide">
            <fo:bookmark-title>delete_module/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1228896" starting-state="hide">
            <fo:bookmark-title>demonitor/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1244032" starting-state="hide">
            <fo:bookmark-title>demonitor/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1270656" starting-state="hide">
            <fo:bookmark-title>disconnect_node/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1275456" starting-state="hide">
            <fo:bookmark-title>display/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1279344" starting-state="hide">
            <fo:bookmark-title>element/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1285280" starting-state="hide">
            <fo:bookmark-title>erase/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1289424" starting-state="hide">
            <fo:bookmark-title>erase/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1295696" starting-state="hide">
            <fo:bookmark-title>error/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1301808" starting-state="hide">
            <fo:bookmark-title>error/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1307776" starting-state="hide">
            <fo:bookmark-title>exit/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1312800" starting-state="hide">
            <fo:bookmark-title>exit/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp11933344" starting-state="hide">
            <fo:bookmark-title>external_size/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp11940112" starting-state="hide">
            <fo:bookmark-title>external_size/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp11948464" starting-state="hide">
            <fo:bookmark-title>float/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp11955872" starting-state="hide">
            <fo:bookmark-title>float_to_binary/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp11959184" starting-state="hide">
            <fo:bookmark-title>float_to_binary/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp11964880" starting-state="hide">
            <fo:bookmark-title>float_to_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp11968192" starting-state="hide">
            <fo:bookmark-title>float_to_list/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp11981936" starting-state="hide">
            <fo:bookmark-title>floor/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp11986192" starting-state="hide">
            <fo:bookmark-title>fun_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12023552" starting-state="hide">
            <fo:bookmark-title>fun_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12037072" starting-state="hide">
            <fo:bookmark-title>fun_to_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12040112" starting-state="hide">
            <fo:bookmark-title>function_exported/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12046688" starting-state="hide">
            <fo:bookmark-title>garbage_collect/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12050480" starting-state="hide">
            <fo:bookmark-title>garbage_collect/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12054576" starting-state="hide">
            <fo:bookmark-title>garbage_collect/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12079328" starting-state="hide">
            <fo:bookmark-title>get/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12085504" starting-state="hide">
            <fo:bookmark-title>get/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12092544" starting-state="hide">
            <fo:bookmark-title>get_cookie/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12095712" starting-state="hide">
            <fo:bookmark-title>get_keys/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12100592" starting-state="hide">
            <fo:bookmark-title>get_keys/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12107376" starting-state="hide">
            <fo:bookmark-title>get_stacktrace/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12127248" starting-state="hide">
            <fo:bookmark-title>group_leader/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12131392" starting-state="hide">
            <fo:bookmark-title>group_leader/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12137072" starting-state="hide">
            <fo:bookmark-title>halt/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12141520" starting-state="hide">
            <fo:bookmark-title>halt/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12146960" starting-state="hide">
            <fo:bookmark-title>halt/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12161888" starting-state="hide">
            <fo:bookmark-title>hd/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12168336" starting-state="hide">
            <fo:bookmark-title>hibernate/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12179216" starting-state="hide">
            <fo:bookmark-title>insert_element/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12186816" starting-state="hide">
            <fo:bookmark-title>integer_to_binary/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12190976" starting-state="hide">
            <fo:bookmark-title>integer_to_binary/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12195728" starting-state="hide">
            <fo:bookmark-title>integer_to_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12199888" starting-state="hide">
            <fo:bookmark-title>integer_to_list/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12204640" starting-state="hide">
            <fo:bookmark-title>iolist_size/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12209168" starting-state="hide">
            <fo:bookmark-title>iolist_to_binary/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12214576" starting-state="hide">
            <fo:bookmark-title>is_alive/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12218208" starting-state="hide">
            <fo:bookmark-title>is_atom/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12222784" starting-state="hide">
            <fo:bookmark-title>is_binary/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12227776" starting-state="hide">
            <fo:bookmark-title>is_bitstring/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12232384" starting-state="hide">
            <fo:bookmark-title>is_boolean/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12237808" starting-state="hide">
            <fo:bookmark-title>is_builtin/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12243232" starting-state="hide">
            <fo:bookmark-title>is_float/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12247760" starting-state="hide">
            <fo:bookmark-title>is_function/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12252336" starting-state="hide">
            <fo:bookmark-title>is_function/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12257440" starting-state="hide">
            <fo:bookmark-title>is_integer/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12262016" starting-state="hide">
            <fo:bookmark-title>is_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12266624" starting-state="hide">
            <fo:bookmark-title>is_map/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12271200" starting-state="hide">
            <fo:bookmark-title>is_number/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12275808" starting-state="hide">
            <fo:bookmark-title>is_pid/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12280288" starting-state="hide">
            <fo:bookmark-title>is_port/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12284816" starting-state="hide">
            <fo:bookmark-title>is_process_alive/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12289280" starting-state="hide">
            <fo:bookmark-title>is_record/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp12298496" starting-state="hide">
            <fo:bookmark-title>is_record/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13599184" starting-state="hide">
            <fo:bookmark-title>is_reference/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13603760" starting-state="hide">
            <fo:bookmark-title>is_tuple/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13608336" starting-state="hide">
            <fo:bookmark-title>length/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13612896" starting-state="hide">
            <fo:bookmark-title>link/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13624624" starting-state="hide">
            <fo:bookmark-title>list_to_atom/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13631232" starting-state="hide">
            <fo:bookmark-title>list_to_binary/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13636640" starting-state="hide">
            <fo:bookmark-title>list_to_bitstring/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13643168" starting-state="hide">
            <fo:bookmark-title>list_to_existing_atom/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13647792" starting-state="hide">
            <fo:bookmark-title>list_to_float/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13653360" starting-state="hide">
            <fo:bookmark-title>list_to_integer/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13658912" starting-state="hide">
            <fo:bookmark-title>list_to_integer/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13665072" starting-state="hide">
            <fo:bookmark-title>list_to_pid/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13671680" starting-state="hide">
            <fo:bookmark-title>list_to_port/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13678304" starting-state="hide">
            <fo:bookmark-title>list_to_ref/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3772272" starting-state="hide">
            <fo:bookmark-title>list_to_tuple/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3834528" starting-state="hide">
            <fo:bookmark-title>load_module/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13687536" starting-state="hide">
            <fo:bookmark-title>load_nif/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13703776" starting-state="hide">
            <fo:bookmark-title>loaded/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13707440" starting-state="hide">
            <fo:bookmark-title>localtime/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13712016" starting-state="hide">
            <fo:bookmark-title>localtime_to_universaltime/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13717920" starting-state="hide">
            <fo:bookmark-title>localtime_to_universaltime/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13729392" starting-state="hide">
            <fo:bookmark-title>make_ref/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13733952" starting-state="hide">
            <fo:bookmark-title>make_tuple/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13738704" starting-state="hide">
            <fo:bookmark-title>make_tuple/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13744944" starting-state="hide">
            <fo:bookmark-title>map_size/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13749584" starting-state="hide">
            <fo:bookmark-title>match_spec_test/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13767056" starting-state="hide">
            <fo:bookmark-title>max/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13771440" starting-state="hide">
            <fo:bookmark-title>md5/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13778032" starting-state="hide">
            <fo:bookmark-title>md5_final/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13781776" starting-state="hide">
            <fo:bookmark-title>md5_init/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13784896" starting-state="hide">
            <fo:bookmark-title>md5_update/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13789312" starting-state="hide">
            <fo:bookmark-title>memory/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13836800" starting-state="hide">
            <fo:bookmark-title>memory/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13837904" starting-state="hide">
            <fo:bookmark-title>memory/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13854016" starting-state="hide">
            <fo:bookmark-title>min/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13858416" starting-state="hide">
            <fo:bookmark-title>module_loaded/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13864400" starting-state="hide">
            <fo:bookmark-title>monitor/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13865504" starting-state="hide">
            <fo:bookmark-title>monitor/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13866608" starting-state="hide">
            <fo:bookmark-title>monitor/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13938384" starting-state="hide">
            <fo:bookmark-title>monitor_node/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13950928" starting-state="hide">
            <fo:bookmark-title>monitor_node/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13959072" starting-state="hide">
            <fo:bookmark-title>monotonic_time/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13969712" starting-state="hide">
            <fo:bookmark-title>monotonic_time/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13977680" starting-state="hide">
            <fo:bookmark-title>nif_error/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13981408" starting-state="hide">
            <fo:bookmark-title>nif_error/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13985152" starting-state="hide">
            <fo:bookmark-title>node/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13988736" starting-state="hide">
            <fo:bookmark-title>node/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13993536" starting-state="hide">
            <fo:bookmark-title>nodes/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp13996704" starting-state="hide">
            <fo:bookmark-title>nodes/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14011600" starting-state="hide">
            <fo:bookmark-title>now/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14020304" starting-state="hide">
            <fo:bookmark-title>open_port/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14155840" starting-state="hide">
            <fo:bookmark-title>phash/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14161344" starting-state="hide">
            <fo:bookmark-title>phash2/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14162176" starting-state="hide">
            <fo:bookmark-title>phash2/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14172752" starting-state="hide">
            <fo:bookmark-title>pid_to_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14176016" starting-state="hide">
            <fo:bookmark-title>port_call/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14192048" starting-state="hide">
            <fo:bookmark-title>port_close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14209072" starting-state="hide">
            <fo:bookmark-title>port_command/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14229056" starting-state="hide">
            <fo:bookmark-title>port_command/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14249712" starting-state="hide">
            <fo:bookmark-title>port_connect/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14277856" starting-state="hide">
            <fo:bookmark-title>port_control/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14290000" starting-state="hide">
            <fo:bookmark-title>port_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14303936" starting-state="hide">
            <fo:bookmark-title>port_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14311424" starting-state="hide">
            <fo:bookmark-title>port_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14318912" starting-state="hide">
            <fo:bookmark-title>port_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14326368" starting-state="hide">
            <fo:bookmark-title>port_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14333856" starting-state="hide">
            <fo:bookmark-title>port_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14344816" starting-state="hide">
            <fo:bookmark-title>port_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14352976" starting-state="hide">
            <fo:bookmark-title>port_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14360432" starting-state="hide">
            <fo:bookmark-title>port_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14367504" starting-state="hide">
            <fo:bookmark-title>port_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14375776" starting-state="hide">
            <fo:bookmark-title>port_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14384672" starting-state="hide">
            <fo:bookmark-title>port_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14394608" starting-state="hide">
            <fo:bookmark-title>port_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14399744" starting-state="hide">
            <fo:bookmark-title>port_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14407264" starting-state="hide">
            <fo:bookmark-title>port_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14415200" starting-state="hide">
            <fo:bookmark-title>port_to_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14418512" starting-state="hide">
            <fo:bookmark-title>ports/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14421712" starting-state="hide">
            <fo:bookmark-title>pre_loaded/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14425008" starting-state="hide">
            <fo:bookmark-title>process_display/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14429568" starting-state="hide">
            <fo:bookmark-title>process_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14437232" starting-state="hide">
            <fo:bookmark-title>process_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14440912" starting-state="hide">
            <fo:bookmark-title>process_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14444928" starting-state="hide">
            <fo:bookmark-title>process_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14448400" starting-state="hide">
            <fo:bookmark-title>process_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14480384" starting-state="hide">
            <fo:bookmark-title>process_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14494224" starting-state="hide">
            <fo:bookmark-title>process_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14524240" starting-state="hide">
            <fo:bookmark-title>process_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14535840" starting-state="hide">
            <fo:bookmark-title>process_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14546464" starting-state="hide">
            <fo:bookmark-title>process_flag/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14553632" starting-state="hide">
            <fo:bookmark-title>process_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14581792" starting-state="hide">
            <fo:bookmark-title>process_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14582896" starting-state="hide">
            <fo:bookmark-title>process_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14747760" starting-state="hide">
            <fo:bookmark-title>processes/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14753824" starting-state="hide">
            <fo:bookmark-title>purge_module/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14762592" starting-state="hide">
            <fo:bookmark-title>put/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14772304" starting-state="hide">
            <fo:bookmark-title>raise/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14791312" starting-state="hide">
            <fo:bookmark-title>read_timer/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14794880" starting-state="hide">
            <fo:bookmark-title>read_timer/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14819280" starting-state="hide">
            <fo:bookmark-title>ref_to_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14823520" starting-state="hide">
            <fo:bookmark-title>register/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14836400" starting-state="hide">
            <fo:bookmark-title>registered/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14840864" starting-state="hide">
            <fo:bookmark-title>resume_process/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14856272" starting-state="hide">
            <fo:bookmark-title>round/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14860864" starting-state="hide">
            <fo:bookmark-title>self/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14864912" starting-state="hide">
            <fo:bookmark-title>send/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14872080" starting-state="hide">
            <fo:bookmark-title>send/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14883168" starting-state="hide">
            <fo:bookmark-title>send_after/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14888176" starting-state="hide">
            <fo:bookmark-title>send_after/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14893120" starting-state="hide">
            <fo:bookmark-title>send_nosuspend/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14910256" starting-state="hide">
            <fo:bookmark-title>send_nosuspend/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14921904" starting-state="hide">
            <fo:bookmark-title>set_cookie/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14928704" starting-state="hide">
            <fo:bookmark-title>setelement/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14935168" starting-state="hide">
            <fo:bookmark-title>size/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14943776" starting-state="hide">
            <fo:bookmark-title>spawn/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14948416" starting-state="hide">
            <fo:bookmark-title>spawn/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14954288" starting-state="hide">
            <fo:bookmark-title>spawn/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14966720" starting-state="hide">
            <fo:bookmark-title>spawn/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14973168" starting-state="hide">
            <fo:bookmark-title>spawn_link/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14977920" starting-state="hide">
            <fo:bookmark-title>spawn_link/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14984560" starting-state="hide">
            <fo:bookmark-title>spawn_link/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14989872" starting-state="hide">
            <fo:bookmark-title>spawn_link/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14997104" starting-state="hide">
            <fo:bookmark-title>spawn_monitor/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15001840" starting-state="hide">
            <fo:bookmark-title>spawn_monitor/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15007152" starting-state="hide">
            <fo:bookmark-title>spawn_opt/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15015040" starting-state="hide">
            <fo:bookmark-title>spawn_opt/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15023152" starting-state="hide">
            <fo:bookmark-title>spawn_opt/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15071760" starting-state="hide">
            <fo:bookmark-title>spawn_opt/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15082256" starting-state="hide">
            <fo:bookmark-title>split_binary/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15089696" starting-state="hide">
            <fo:bookmark-title>start_timer/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15094704" starting-state="hide">
            <fo:bookmark-title>start_timer/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15122400" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15127120" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15139040" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15142016" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15147552" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15151920" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15156080" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15205248" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15211616" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15216400" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15220960" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15234528" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15239392" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15275584" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15285136" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15289936" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15294736" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15299536" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15304336" starting-state="hide">
            <fo:bookmark-title>statistics/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15308256" starting-state="hide">
            <fo:bookmark-title>suspend_process/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15313888" starting-state="hide">
            <fo:bookmark-title>suspend_process/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15351856" starting-state="hide">
            <fo:bookmark-title>system_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15356992" starting-state="hide">
            <fo:bookmark-title>system_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15376368" starting-state="hide">
            <fo:bookmark-title>system_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15386144" starting-state="hide">
            <fo:bookmark-title>system_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15392720" starting-state="hide">
            <fo:bookmark-title>system_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15397648" starting-state="hide">
            <fo:bookmark-title>system_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15404256" starting-state="hide">
            <fo:bookmark-title>system_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15410912" starting-state="hide">
            <fo:bookmark-title>system_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15418400" starting-state="hide">
            <fo:bookmark-title>system_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15438208" starting-state="hide">
            <fo:bookmark-title>system_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15489520" starting-state="hide">
            <fo:bookmark-title>system_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15494400" starting-state="hide">
            <fo:bookmark-title>system_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15503456" starting-state="hide">
            <fo:bookmark-title>system_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15508448" starting-state="hide">
            <fo:bookmark-title>system_flag/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15520304" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15521408" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15522512" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15523616" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15524720" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15577920" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15579024" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15622432" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15623536" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15624640" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15625744" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15626848" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15627952" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15661120" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15662224" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15663328" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15664432" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15665536" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15666640" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15667744" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15668848" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15669952" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15671056" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15672160" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15673264" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15674368" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15675472" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15676576" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15677680" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15678784" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15679888" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15680992" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15682096" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15683200" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15684304" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15685408" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15686512" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15687616" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15688720" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15689824" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15690928" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15692032" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15693136" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15694240" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15695344" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15696448" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15697552" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15698656" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15699760" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15700864" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15701968" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15703072" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15704176" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15705280" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15706384" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15707488" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15708592" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15709696" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15710800" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15711904" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15713008" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15714112" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15715216" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15716320" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15717424" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15718528" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15719632" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15720736" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15721840" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15722944" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15724048" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16058960" starting-state="hide">
            <fo:bookmark-title>system_monitor/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16065104" starting-state="hide">
            <fo:bookmark-title>system_monitor/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16074080" starting-state="hide">
            <fo:bookmark-title>system_monitor/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16130208" starting-state="hide">
            <fo:bookmark-title>system_profile/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16136352" starting-state="hide">
            <fo:bookmark-title>system_profile/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16162192" starting-state="hide">
            <fo:bookmark-title>system_time/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16172032" starting-state="hide">
            <fo:bookmark-title>system_time/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16182336" starting-state="hide">
            <fo:bookmark-title>term_to_binary/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16189728" starting-state="hide">
            <fo:bookmark-title>term_to_binary/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16212688" starting-state="hide">
            <fo:bookmark-title>throw/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16218656" starting-state="hide">
            <fo:bookmark-title>time/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16223168" starting-state="hide">
            <fo:bookmark-title>time_offset/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16233232" starting-state="hide">
            <fo:bookmark-title>time_offset/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16241952" starting-state="hide">
            <fo:bookmark-title>timestamp/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16254800" starting-state="hide">
            <fo:bookmark-title>tl/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16261344" starting-state="hide">
            <fo:bookmark-title>trace/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16535424" starting-state="hide">
            <fo:bookmark-title>trace_delivered/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16564752" starting-state="hide">
            <fo:bookmark-title>trace_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16625392" starting-state="hide">
            <fo:bookmark-title>trace_pattern/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16631856" starting-state="hide">
            <fo:bookmark-title>trace_pattern/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16661248" starting-state="hide">
            <fo:bookmark-title>trace_pattern/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16693808" starting-state="hide">
            <fo:bookmark-title>trace_pattern/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16767312" starting-state="hide">
            <fo:bookmark-title>trunc/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16771920" starting-state="hide">
            <fo:bookmark-title>tuple_size/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16776544" starting-state="hide">
            <fo:bookmark-title>tuple_to_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16781328" starting-state="hide">
            <fo:bookmark-title>unique_integer/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16785840" starting-state="hide">
            <fo:bookmark-title>unique_integer/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16811744" starting-state="hide">
            <fo:bookmark-title>universaltime/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16816880" starting-state="hide">
            <fo:bookmark-title>universaltime_to_localtime/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16823152" starting-state="hide">
            <fo:bookmark-title>unlink/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16838976" starting-state="hide">
            <fo:bookmark-title>unregister/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16845040" starting-state="hide">
            <fo:bookmark-title>whereis/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16849600" starting-state="hide">
            <fo:bookmark-title>yield/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp16860752" starting-state="hide">
          <fo:bookmark-title>init</fo:bookmark-title>
          <fo:bookmark internal-destination="idp16868080" starting-state="hide">
            <fo:bookmark-title>boot/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16876544" starting-state="hide">
            <fo:bookmark-title>get_argument/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16892464" starting-state="hide">
            <fo:bookmark-title>get_arguments/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16896016" starting-state="hide">
            <fo:bookmark-title>get_plain_arguments/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16898752" starting-state="hide">
            <fo:bookmark-title>get_status/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16906240" starting-state="hide">
            <fo:bookmark-title>reboot/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16912288" starting-state="hide">
            <fo:bookmark-title>restart/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16917552" starting-state="hide">
            <fo:bookmark-title>script_id/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16922816" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp16926304" starting-state="hide">
            <fo:bookmark-title>stop/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp16990384" starting-state="hide">
          <fo:bookmark-title>zlib</fo:bookmark-title>
          <fo:bookmark internal-destination="idp17015440" starting-state="hide">
            <fo:bookmark-title>adler32/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17018672" starting-state="hide">
            <fo:bookmark-title>adler32/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17023616" starting-state="hide">
            <fo:bookmark-title>adler32_combine/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17032624" starting-state="hide">
            <fo:bookmark-title>close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17035840" starting-state="hide">
            <fo:bookmark-title>compress/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17038528" starting-state="hide">
            <fo:bookmark-title>crc32/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17041184" starting-state="hide">
            <fo:bookmark-title>crc32/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17044400" starting-state="hide">
            <fo:bookmark-title>crc32/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17049312" starting-state="hide">
            <fo:bookmark-title>crc32_combine/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17058288" starting-state="hide">
            <fo:bookmark-title>deflate/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17062256" starting-state="hide">
            <fo:bookmark-title>deflate/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17076480" starting-state="hide">
            <fo:bookmark-title>deflateEnd/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17081424" starting-state="hide">
            <fo:bookmark-title>deflateInit/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17084960" starting-state="hide">
            <fo:bookmark-title>deflateInit/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17091952" starting-state="hide">
            <fo:bookmark-title>deflateInit/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17121328" starting-state="hide">
            <fo:bookmark-title>deflateParams/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17128752" starting-state="hide">
            <fo:bookmark-title>deflateReset/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17133280" starting-state="hide">
            <fo:bookmark-title>deflateSetDictionary/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17140672" starting-state="hide">
            <fo:bookmark-title>getBufSize/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17143328" starting-state="hide">
            <fo:bookmark-title>gunzip/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17146000" starting-state="hide">
            <fo:bookmark-title>gzip/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17148672" starting-state="hide">
            <fo:bookmark-title>inflate/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17154336" starting-state="hide">
            <fo:bookmark-title>inflateChunk/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17158816" starting-state="hide">
            <fo:bookmark-title>inflateChunk/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17169536" starting-state="hide">
            <fo:bookmark-title>inflateEnd/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17172784" starting-state="hide">
            <fo:bookmark-title>inflateInit/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17175456" starting-state="hide">
            <fo:bookmark-title>inflateInit/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17182976" starting-state="hide">
            <fo:bookmark-title>inflateReset/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17187936" starting-state="hide">
            <fo:bookmark-title>inflateSetDictionary/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17194896" starting-state="hide">
            <fo:bookmark-title>inflateGetDictionary/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17199824" starting-state="hide">
            <fo:bookmark-title>open/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17202480" starting-state="hide">
            <fo:bookmark-title>setBufSize/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17205120" starting-state="hide">
            <fo:bookmark-title>uncompress/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17207808" starting-state="hide">
            <fo:bookmark-title>unzip/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp17210496" starting-state="hide">
            <fo:bookmark-title>zip/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp17220960" starting-state="hide">
          <fo:bookmark-title>epmd</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp17329120" starting-state="hide">
          <fo:bookmark-title>erl</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp17955536" starting-state="hide">
          <fo:bookmark-title>erlc</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp18075936" starting-state="hide">
          <fo:bookmark-title>werl</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp18106736" starting-state="hide">
          <fo:bookmark-title>escript</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp18231328" starting-state="hide">
          <fo:bookmark-title>erlsrv</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp18380912" starting-state="hide">
          <fo:bookmark-title>start_erl</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp18429904" starting-state="hide">
          <fo:bookmark-title>run_erl</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp18493216" starting-state="hide">
          <fo:bookmark-title>start</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp18513744" starting-state="hide">
          <fo:bookmark-title>erl_driver</fo:bookmark-title>
          <fo:bookmark internal-destination="idp18828864" starting-state="hide">
            <fo:bookmark-title>add_driver_entry()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18837408" starting-state="hide">
            <fo:bookmark-title>driver_alloc()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18844144" starting-state="hide">
            <fo:bookmark-title>driver_alloc_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18852080" starting-state="hide">
            <fo:bookmark-title>driver_async()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18876208" starting-state="hide">
            <fo:bookmark-title>driver_async_port_key()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18881808" starting-state="hide">
            <fo:bookmark-title>driver_binary_dec_refc()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18890816" starting-state="hide">
            <fo:bookmark-title>driver_binary_get_refc()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18895184" starting-state="hide">
            <fo:bookmark-title>driver_binary_inc_refc()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18899440" starting-state="hide">
            <fo:bookmark-title>driver_caller()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18920784" starting-state="hide">
            <fo:bookmark-title>driver_cancel_timer()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18925952" starting-state="hide">
            <fo:bookmark-title>driver_compare_monitors()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18934288" starting-state="hide">
            <fo:bookmark-title>driver_connected()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18938544" starting-state="hide">
            <fo:bookmark-title>driver_create_port()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18954080" starting-state="hide">
            <fo:bookmark-title>driver_demonitor_process()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18958384" starting-state="hide">
            <fo:bookmark-title>driver_deq()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18964896" starting-state="hide">
            <fo:bookmark-title>driver_enq()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18973632" starting-state="hide">
            <fo:bookmark-title>driver_enq_bin()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18982080" starting-state="hide">
            <fo:bookmark-title>driver_enqv()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18989840" starting-state="hide">
            <fo:bookmark-title>driver_failure()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18990736" starting-state="hide">
            <fo:bookmark-title>driver_failure_atom()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp18991648" starting-state="hide">
            <fo:bookmark-title>driver_failure_posix()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19000448" starting-state="hide">
            <fo:bookmark-title>driver_failure_eof()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19006160" starting-state="hide">
            <fo:bookmark-title>driver_free()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19011072" starting-state="hide">
            <fo:bookmark-title>driver_free_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19016480" starting-state="hide">
            <fo:bookmark-title>driver_get_monitored_process()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19022032" starting-state="hide">
            <fo:bookmark-title>driver_get_now()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19031744" starting-state="hide">
            <fo:bookmark-title>driver_lock_driver()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19035632" starting-state="hide">
            <fo:bookmark-title>driver_mk_atom()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19040464" starting-state="hide">
            <fo:bookmark-title>driver_mk_port()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19046752" starting-state="hide">
            <fo:bookmark-title>driver_monitor_process()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19056368" starting-state="hide">
            <fo:bookmark-title>driver_output()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19063264" starting-state="hide">
            <fo:bookmark-title>driver_output_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19077024" starting-state="hide">
            <fo:bookmark-title>driver_output_term()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19085424" starting-state="hide">
            <fo:bookmark-title>driver_output2()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19092976" starting-state="hide">
            <fo:bookmark-title>driver_outputv()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19108624" starting-state="hide">
            <fo:bookmark-title>driver_pdl_create()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19115712" starting-state="hide">
            <fo:bookmark-title>driver_pdl_dec_refc()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19120464" starting-state="hide">
            <fo:bookmark-title>driver_pdl_get_refc()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19124688" starting-state="hide">
            <fo:bookmark-title>driver_pdl_inc_refc()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19129424" starting-state="hide">
            <fo:bookmark-title>driver_pdl_lock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19133760" starting-state="hide">
            <fo:bookmark-title>driver_pdl_unlock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19137936" starting-state="hide">
            <fo:bookmark-title>driver_peekq()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19146272" starting-state="hide">
            <fo:bookmark-title>driver_peekqv()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19155872" starting-state="hide">
            <fo:bookmark-title>driver_pushq()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19162784" starting-state="hide">
            <fo:bookmark-title>driver_pushq_bin()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19171200" starting-state="hide">
            <fo:bookmark-title>driver_pushqv()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19178976" starting-state="hide">
            <fo:bookmark-title>driver_read_timer()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19183872" starting-state="hide">
            <fo:bookmark-title>driver_realloc()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19188912" starting-state="hide">
            <fo:bookmark-title>driver_realloc_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19193616" starting-state="hide">
            <fo:bookmark-title>driver_select()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19218640" starting-state="hide">
            <fo:bookmark-title>driver_send_term()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19227696" starting-state="hide">
            <fo:bookmark-title>driver_set_timer()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19236464" starting-state="hide">
            <fo:bookmark-title>driver_sizeq()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19241488" starting-state="hide">
            <fo:bookmark-title>driver_system_info()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19248432" starting-state="hide">
            <fo:bookmark-title>driver_vec_to_buf()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19257456" starting-state="hide">
            <fo:bookmark-title>erl_drv_busy_msgq_limits()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19272704" starting-state="hide">
            <fo:bookmark-title>erl_drv_cond_broadcast()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19277776" starting-state="hide">
            <fo:bookmark-title>erl_drv_cond_create()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19283440" starting-state="hide">
            <fo:bookmark-title>erl_drv_cond_destroy()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19288992" starting-state="hide">
            <fo:bookmark-title>erl_drv_cond_name()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19293984" starting-state="hide">
            <fo:bookmark-title>erl_drv_cond_signal()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19299040" starting-state="hide">
            <fo:bookmark-title>erl_drv_cond_wait()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19307776" starting-state="hide">
            <fo:bookmark-title>erl_drv_consume_timeslice()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19318704" starting-state="hide">
            <fo:bookmark-title>erl_drv_convert_time_unit()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19330864" starting-state="hide">
            <fo:bookmark-title>erl_drv_equal_tids()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19338592" starting-state="hide">
            <fo:bookmark-title>erl_drv_getenv()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19355024" starting-state="hide">
            <fo:bookmark-title>erl_drv_init_ack()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19365728" starting-state="hide">
            <fo:bookmark-title>erl_drv_monotonic_time()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19374016" starting-state="hide">
            <fo:bookmark-title>erl_drv_mutex_create()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19379600" starting-state="hide">
            <fo:bookmark-title>erl_drv_mutex_destroy()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19385168" starting-state="hide">
            <fo:bookmark-title>erl_drv_mutex_lock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19391696" starting-state="hide">
            <fo:bookmark-title>erl_drv_mutex_name()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19396656" starting-state="hide">
            <fo:bookmark-title>erl_drv_mutex_trylock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19404480" starting-state="hide">
            <fo:bookmark-title>erl_drv_mutex_unlock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19409008" starting-state="hide">
            <fo:bookmark-title>erl_drv_output_term()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19459680" starting-state="hide">
            <fo:bookmark-title>erl_drv_putenv()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19470688" starting-state="hide">
            <fo:bookmark-title>erl_drv_rwlock_create()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19476288" starting-state="hide">
            <fo:bookmark-title>erl_drv_rwlock_destroy()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19481856" starting-state="hide">
            <fo:bookmark-title>erl_drv_rwlock_name()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19486832" starting-state="hide">
            <fo:bookmark-title>erl_drv_rwlock_rlock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19493424" starting-state="hide">
            <fo:bookmark-title>erl_drv_rwlock_runlock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19497984" starting-state="hide">
            <fo:bookmark-title>erl_drv_rwlock_rwlock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19504592" starting-state="hide">
            <fo:bookmark-title>erl_drv_rwlock_rwunlock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19509184" starting-state="hide">
            <fo:bookmark-title>erl_drv_rwlock_tryrlock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19517040" starting-state="hide">
            <fo:bookmark-title>erl_drv_rwlock_tryrwlock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19524944" starting-state="hide">
            <fo:bookmark-title>erl_drv_send_term()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19535488" starting-state="hide">
            <fo:bookmark-title>erl_drv_set_os_pid()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19541488" starting-state="hide">
            <fo:bookmark-title>erl_drv_thread_create()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19567456" starting-state="hide">
            <fo:bookmark-title>erl_drv_thread_exit()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19575200" starting-state="hide">
            <fo:bookmark-title>erl_drv_thread_join()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19584240" starting-state="hide">
            <fo:bookmark-title>erl_drv_thread_name()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19589376" starting-state="hide">
            <fo:bookmark-title>erl_drv_thread_opts_create()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19599728" starting-state="hide">
            <fo:bookmark-title>erl_drv_thread_opts_destroy()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19605632" starting-state="hide">
            <fo:bookmark-title>erl_drv_thread_self()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19609392" starting-state="hide">
            <fo:bookmark-title>erl_drv_time_offset()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19618880" starting-state="hide">
            <fo:bookmark-title>erl_drv_tsd_get()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19625264" starting-state="hide">
            <fo:bookmark-title>erl_drv_tsd_key_create()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19632144" starting-state="hide">
            <fo:bookmark-title>erl_drv_tsd_key_destroy()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19640832" starting-state="hide">
            <fo:bookmark-title>erl_drv_tsd_set()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19648960" starting-state="hide">
            <fo:bookmark-title>erl_errno_id()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19653696" starting-state="hide">
            <fo:bookmark-title>remove_driver_entry()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19659376" starting-state="hide">
            <fo:bookmark-title>set_busy_port()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp19670448" starting-state="hide">
            <fo:bookmark-title>set_port_control_flags()
               </fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp19690720" starting-state="hide">
          <fo:bookmark-title>driver_entry</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp19888928" starting-state="hide">
          <fo:bookmark-title>erts_alloc</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp20179504" starting-state="hide">
          <fo:bookmark-title>erl_nif</fo:bookmark-title>
          <fo:bookmark internal-destination="idp20444736" starting-state="hide">
            <fo:bookmark-title>enif_alloc()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20448928" starting-state="hide">
            <fo:bookmark-title>enif_alloc_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20456576" starting-state="hide">
            <fo:bookmark-title>enif_alloc_env()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20461808" starting-state="hide">
            <fo:bookmark-title>enif_alloc_resource()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20465472" starting-state="hide">
            <fo:bookmark-title>enif_binary_to_term()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20477504" starting-state="hide">
            <fo:bookmark-title>enif_clear_env()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20481472" starting-state="hide">
            <fo:bookmark-title>enif_compare()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20492416" starting-state="hide">
            <fo:bookmark-title>enif_compare_monitors()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20501312" starting-state="hide">
            <fo:bookmark-title>enif_cond_broadcast()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20505008" starting-state="hide">
            <fo:bookmark-title>enif_cond_create()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20508704" starting-state="hide">
            <fo:bookmark-title>enif_cond_destroy()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20512400" starting-state="hide">
            <fo:bookmark-title>enif_cond_signal()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20516096" starting-state="hide">
            <fo:bookmark-title>enif_cond_wait()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20519968" starting-state="hide">
            <fo:bookmark-title>enif_consume_timeslice()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20530400" starting-state="hide">
            <fo:bookmark-title>enif_convert_time_unit()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20542384" starting-state="hide">
            <fo:bookmark-title>enif_cpu_time()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20547568" starting-state="hide">
            <fo:bookmark-title>enif_demonitor_process()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20557168" starting-state="hide">
            <fo:bookmark-title>enif_equal_tids()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20560880" starting-state="hide">
            <fo:bookmark-title>enif_free()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20564560" starting-state="hide">
            <fo:bookmark-title>enif_free_env()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20568192" starting-state="hide">
            <fo:bookmark-title>enif_get_atom()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20576080" starting-state="hide">
            <fo:bookmark-title>enif_get_atom_length()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20583120" starting-state="hide">
            <fo:bookmark-title>enif_get_double()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20588560" starting-state="hide">
            <fo:bookmark-title>enif_get_int()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20594464" starting-state="hide">
            <fo:bookmark-title>enif_get_int64()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20599968" starting-state="hide">
            <fo:bookmark-title>enif_get_local_pid()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20604624" starting-state="hide">
            <fo:bookmark-title>enif_get_local_port()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20609264" starting-state="hide">
            <fo:bookmark-title>enif_get_list_cell()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20614896" starting-state="hide">
            <fo:bookmark-title>enif_get_list_length()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20620768" starting-state="hide">
            <fo:bookmark-title>enif_get_long()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20626688" starting-state="hide">
            <fo:bookmark-title>enif_get_map_size()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20632160" starting-state="hide">
            <fo:bookmark-title>enif_get_map_value()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20639136" starting-state="hide">
            <fo:bookmark-title>enif_get_resource()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20645280" starting-state="hide">
            <fo:bookmark-title>enif_get_string()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20657952" starting-state="hide">
            <fo:bookmark-title>enif_get_tuple()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20664992" starting-state="hide">
            <fo:bookmark-title>enif_get_uint()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20670944" starting-state="hide">
            <fo:bookmark-title>enif_get_uint64()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20676464" starting-state="hide">
            <fo:bookmark-title>enif_get_ulong()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20682432" starting-state="hide">
            <fo:bookmark-title>enif_getenv()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20686192" starting-state="hide">
            <fo:bookmark-title>enif_has_pending_exception()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20697888" starting-state="hide">
            <fo:bookmark-title>enif_hash()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20703024" starting-state="hide">
            <fo:bookmark-title>enif_inspect_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20708528" starting-state="hide">
            <fo:bookmark-title>enif_inspect_iolist_as_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20715184" starting-state="hide">
            <fo:bookmark-title>enif_is_atom()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20719104" starting-state="hide">
            <fo:bookmark-title>enif_is_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20723024" starting-state="hide">
            <fo:bookmark-title>enif_is_current_process_alive()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20727440" starting-state="hide">
            <fo:bookmark-title>enif_is_empty_list()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20731056" starting-state="hide">
            <fo:bookmark-title>enif_is_exception()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20734624" starting-state="hide">
            <fo:bookmark-title>enif_is_fun()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20738224" starting-state="hide">
            <fo:bookmark-title>enif_is_identical()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20742496" starting-state="hide">
            <fo:bookmark-title>enif_is_list()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20746256" starting-state="hide">
            <fo:bookmark-title>enif_is_map()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20750320" starting-state="hide">
            <fo:bookmark-title>enif_is_number()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20754112" starting-state="hide">
            <fo:bookmark-title>enif_is_pid()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20758032" starting-state="hide">
            <fo:bookmark-title>enif_is_port()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20761792" starting-state="hide">
            <fo:bookmark-title>enif_is_port_alive()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20766000" starting-state="hide">
            <fo:bookmark-title>enif_is_process_alive()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20770368" starting-state="hide">
            <fo:bookmark-title>enif_is_ref()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20774288" starting-state="hide">
            <fo:bookmark-title>enif_is_tuple()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20778208" starting-state="hide">
            <fo:bookmark-title>enif_keep_resource()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20784240" starting-state="hide">
            <fo:bookmark-title>enif_make_atom()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20790016" starting-state="hide">
            <fo:bookmark-title>enif_make_atom_len()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20796272" starting-state="hide">
            <fo:bookmark-title>enif_make_badarg()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20807648" starting-state="hide">
            <fo:bookmark-title>enif_make_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20811568" starting-state="hide">
            <fo:bookmark-title>enif_make_copy()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20815408" starting-state="hide">
            <fo:bookmark-title>enif_make_double()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20820512" starting-state="hide">
            <fo:bookmark-title>enif_make_existing_atom()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20827808" starting-state="hide">
            <fo:bookmark-title>enif_make_existing_atom_len()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20835616" starting-state="hide">
            <fo:bookmark-title>enif_make_int()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20838464" starting-state="hide">
            <fo:bookmark-title>enif_make_int64()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20841504" starting-state="hide">
            <fo:bookmark-title>enif_make_list()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20847280" starting-state="hide">
            <fo:bookmark-title>enif_make_list1()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20848336" starting-state="hide">
            <fo:bookmark-title>enif_make_list2()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20849264" starting-state="hide">
            <fo:bookmark-title>enif_make_list3()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20850208" starting-state="hide">
            <fo:bookmark-title>enif_make_list4()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20851136" starting-state="hide">
            <fo:bookmark-title>enif_make_list5()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20852064" starting-state="hide">
            <fo:bookmark-title>enif_make_list6()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20852992" starting-state="hide">
            <fo:bookmark-title>enif_make_list7()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20853920" starting-state="hide">
            <fo:bookmark-title>enif_make_list8()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20854848" starting-state="hide">
            <fo:bookmark-title>enif_make_list9()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20858208" starting-state="hide">
            <fo:bookmark-title>enif_make_list_cell()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20861536" starting-state="hide">
            <fo:bookmark-title>enif_make_list_from_array()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20866304" starting-state="hide">
            <fo:bookmark-title>enif_make_long()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20869472" starting-state="hide">
            <fo:bookmark-title>enif_make_map_put()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20878624" starting-state="hide">
            <fo:bookmark-title>enif_make_map_remove()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20888800" starting-state="hide">
            <fo:bookmark-title>enif_make_map_update()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20897088" starting-state="hide">
            <fo:bookmark-title>enif_make_new_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20902512" starting-state="hide">
            <fo:bookmark-title>enif_make_new_map()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20905360" starting-state="hide">
            <fo:bookmark-title>enif_make_pid()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20908816" starting-state="hide">
            <fo:bookmark-title>enif_make_ref()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20912672" starting-state="hide">
            <fo:bookmark-title>enif_make_resource()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20920880" starting-state="hide">
            <fo:bookmark-title>enif_make_resource_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20929712" starting-state="hide">
            <fo:bookmark-title>enif_make_reverse_list()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20936688" starting-state="hide">
            <fo:bookmark-title>enif_make_string()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20941104" starting-state="hide">
            <fo:bookmark-title>enif_make_string_len()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20946000" starting-state="hide">
            <fo:bookmark-title>enif_make_sub_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20951536" starting-state="hide">
            <fo:bookmark-title>enif_make_tuple()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20956096" starting-state="hide">
            <fo:bookmark-title>enif_make_tuple1()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20957008" starting-state="hide">
            <fo:bookmark-title>enif_make_tuple2()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20957936" starting-state="hide">
            <fo:bookmark-title>enif_make_tuple3()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20958880" starting-state="hide">
            <fo:bookmark-title>enif_make_tuple4()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20959808" starting-state="hide">
            <fo:bookmark-title>enif_make_tuple5()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20960736" starting-state="hide">
            <fo:bookmark-title>enif_make_tuple6()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20961664" starting-state="hide">
            <fo:bookmark-title>enif_make_tuple7()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20962592" starting-state="hide">
            <fo:bookmark-title>enif_make_tuple8()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20963520" starting-state="hide">
            <fo:bookmark-title>enif_make_tuple9()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20967024" starting-state="hide">
            <fo:bookmark-title>enif_make_tuple_from_array()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20970864" starting-state="hide">
            <fo:bookmark-title>enif_make_uint()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20974352" starting-state="hide">
            <fo:bookmark-title>enif_make_uint64()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20977424" starting-state="hide">
            <fo:bookmark-title>enif_make_ulong()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20980768" starting-state="hide">
            <fo:bookmark-title>enif_make_unique_integer()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20987984" starting-state="hide">
            <fo:bookmark-title>enif_map_iterator_create()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp20999120" starting-state="hide">
            <fo:bookmark-title>enif_map_iterator_destroy()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21002912" starting-state="hide">
            <fo:bookmark-title>enif_map_iterator_get_pair()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21008080" starting-state="hide">
            <fo:bookmark-title>enif_map_iterator_is_head()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21011760" starting-state="hide">
            <fo:bookmark-title>enif_map_iterator_is_tail()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21015440" starting-state="hide">
            <fo:bookmark-title>enif_map_iterator_next()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21019696" starting-state="hide">
            <fo:bookmark-title>enif_map_iterator_prev()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21023952" starting-state="hide">
            <fo:bookmark-title>enif_monitor_process()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21036528" starting-state="hide">
            <fo:bookmark-title>enif_monotonic_time()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21044848" starting-state="hide">
            <fo:bookmark-title>enif_mutex_create()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21048544" starting-state="hide">
            <fo:bookmark-title>enif_mutex_destroy()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21052240" starting-state="hide">
            <fo:bookmark-title>enif_mutex_lock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21055936" starting-state="hide">
            <fo:bookmark-title>enif_mutex_trylock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21059632" starting-state="hide">
            <fo:bookmark-title>enif_mutex_unlock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21063328" starting-state="hide">
            <fo:bookmark-title>enif_now_time()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21067600" starting-state="hide">
            <fo:bookmark-title>enif_open_resource_type()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21086512" starting-state="hide">
            <fo:bookmark-title>enif_open_resource_type_x()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21093968" starting-state="hide">
            <fo:bookmark-title>enif_port_command()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21115600" starting-state="hide">
            <fo:bookmark-title>enif_priv_data()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21120032" starting-state="hide">
            <fo:bookmark-title>enif_raise_exception()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21129104" starting-state="hide">
            <fo:bookmark-title>enif_realloc_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21134528" starting-state="hide">
            <fo:bookmark-title>enif_release_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21138400" starting-state="hide">
            <fo:bookmark-title>enif_release_resource()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21145840" starting-state="hide">
            <fo:bookmark-title>enif_rwlock_create()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21149536" starting-state="hide">
            <fo:bookmark-title>enif_rwlock_destroy()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21153248" starting-state="hide">
            <fo:bookmark-title>enif_rwlock_rlock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21156944" starting-state="hide">
            <fo:bookmark-title>enif_rwlock_runlock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21160656" starting-state="hide">
            <fo:bookmark-title>enif_rwlock_rwlock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21164352" starting-state="hide">
            <fo:bookmark-title>enif_rwlock_rwunlock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21168064" starting-state="hide">
            <fo:bookmark-title>enif_rwlock_tryrlock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21171776" starting-state="hide">
            <fo:bookmark-title>enif_rwlock_tryrwlock()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21175344" starting-state="hide">
            <fo:bookmark-title>enif_schedule_nif()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21190864" starting-state="hide">
            <fo:bookmark-title>enif_select()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21230960" starting-state="hide">
            <fo:bookmark-title>enif_self()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21235216" starting-state="hide">
            <fo:bookmark-title>enif_send()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21255760" starting-state="hide">
            <fo:bookmark-title>enif_sizeof_resource()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21259920" starting-state="hide">
            <fo:bookmark-title>enif_snprintf()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21263584" starting-state="hide">
            <fo:bookmark-title>enif_system_info()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21267344" starting-state="hide">
            <fo:bookmark-title>enif_term_to_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21275600" starting-state="hide">
            <fo:bookmark-title>enif_thread_create()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21279376" starting-state="hide">
            <fo:bookmark-title>enif_thread_exit()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21283072" starting-state="hide">
            <fo:bookmark-title>enif_thread_join()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21286784" starting-state="hide">
            <fo:bookmark-title>enif_thread_opts_create()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21290496" starting-state="hide">
            <fo:bookmark-title>enif_thread_opts_destroy()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21294384" starting-state="hide">
            <fo:bookmark-title>enif_thread_self()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21298064" starting-state="hide">
            <fo:bookmark-title>enif_thread_type()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21306336" starting-state="hide">
            <fo:bookmark-title>enif_time_offset()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21315696" starting-state="hide">
            <fo:bookmark-title>enif_tsd_get()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21319392" starting-state="hide">
            <fo:bookmark-title>enif_tsd_key_create()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21323264" starting-state="hide">
            <fo:bookmark-title>enif_tsd_key_destroy()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21326960" starting-state="hide">
            <fo:bookmark-title>enif_tsd_set()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21330672" starting-state="hide">
            <fo:bookmark-title>enif_whereis_pid()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21344160" starting-state="hide">
            <fo:bookmark-title>enif_whereis_port()
               </fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp21364896" starting-state="hide">
          <fo:bookmark-title>erl_tracer</fo:bookmark-title>
          <fo:bookmark internal-destination="idp21428336" starting-state="hide">
            <fo:bookmark-title>Module:enabled/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21438400" starting-state="hide">
            <fo:bookmark-title>Module:enabled_call/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21446816" starting-state="hide">
            <fo:bookmark-title>Module:enabled_garbage_collection/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21455264" starting-state="hide">
            <fo:bookmark-title>Module:enabled_ports/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21463680" starting-state="hide">
            <fo:bookmark-title>Module:enabled_procs/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21472096" starting-state="hide">
            <fo:bookmark-title>Module:enabled_receive/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21480512" starting-state="hide">
            <fo:bookmark-title>Module:enabled_running_ports/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21488960" starting-state="hide">
            <fo:bookmark-title>Module:enabled_running_procs/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21497568" starting-state="hide">
            <fo:bookmark-title>Module:enabled_send/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21505984" starting-state="hide">
            <fo:bookmark-title>Module:trace/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21518960" starting-state="hide">
            <fo:bookmark-title>trace/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21529952" starting-state="hide">
            <fo:bookmark-title>Module:trace_call/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21540432" starting-state="hide">
            <fo:bookmark-title>Module:trace_garbage_collection/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21550976" starting-state="hide">
            <fo:bookmark-title>Module:trace_ports/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21561440" starting-state="hide">
            <fo:bookmark-title>Module:trace_procs/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21571904" starting-state="hide">
            <fo:bookmark-title>Module:trace_receive/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21582416" starting-state="hide">
            <fo:bookmark-title>Module:trace_running_ports/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21592960" starting-state="hide">
            <fo:bookmark-title>Module:trace_running_procs/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp21603504" starting-state="hide">
            <fo:bookmark-title>Module:trace_send/5</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">Erlang Run-Time System Application (ERTS)</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">Erlang Run-Time System Application (ERTS) 9.0</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            Erlang Run-Time System Application (ERTS)</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            Erlang Run-Time System Application (ERTS) | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp2908192" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      ERTS User's Guide</fo:block>
  <fo:block id="idp2901744" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  Introduction</fo:marker>1.1  Introduction</fo:block><fo:block id="idp3058896" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Scope</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang Runtime System Application, ERTS, contains
      functionality necessary to run the Erlang system.</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, <fo:inline font-family="monospace">ERTS</fo:inline> is only guaranteed to be
        compatible with other Erlang/OTP components from the same release as
        <fo:inline font-family="monospace">ERTS</fo:inline> itself.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information on how to communicate with Erlang/OTP components
        from earlier releases, see the documentation of system flag
        <fo:inline font-style="italic"><fo:inline font-family="monospace">+R</fo:inline></fo:inline> in <fo:inline font-family="monospace">erl(1)</fo:inline>.
      </fo:block>
    </fo:block>
  <fo:block id="idp2893680" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Prerequisites</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that the reader is familiar with the Erlang programming
      language.</fo:block> 
  <fo:block id="idp3060528" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  Communication in Erlang</fo:marker>1.2  Communication in Erlang</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Communication in Erlang is conceptually performed using
     asynchronous signaling. All different executing entities,
     such as processes and ports, communicate through asynchronous
     signals. The most commonly used signal is a message. Other
     common signals are exit, link, unlink, monitor, and demonitor
     signals.</fo:block><fo:block id="idp3056688" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      Passing of Signals</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The amount of time that passes between a signal is sent
    and the arrival of the signal at the destination is unspecified
    but positive. If the receiver has terminated, the signal does
    not arrive, but it can trigger another signal.
    For example, a link signal sent to a non-existing process
    triggers an exit signal, which is sent back to where the link
    signal originated from. When communicating over the distribution,
    signals can be lost if the distribution channel goes down.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The only signal ordering guarantee given is the following: if
    an entity sends multiple signals to the same destination entity,
    the order is preserved; that is, if <fo:inline font-family="monospace">A</fo:inline> sends
    a signal <fo:inline font-family="monospace">S1</fo:inline> to <fo:inline font-family="monospace">B</fo:inline>, and later sends
    signal <fo:inline font-family="monospace">S2</fo:inline> to <fo:inline font-family="monospace">B</fo:inline>, <fo:inline font-family="monospace">S1</fo:inline> is guaranteed not to
    arrive after <fo:inline font-family="monospace">S2</fo:inline>.</fo:block>
  <fo:block id="idp3052208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.2 
      Synchronous Communication</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some communication is synchronous. If broken down into pieces,
    a synchronous communication operation consists of two asynchronous
    signals; one request signal and one reply signal. An example of
    such a synchronous communication is a call to
    <fo:inline font-style="italic">
    <fo:inline font-family="monospace">erlang:process_info/2</fo:inline></fo:inline>
    when the first argument is not <fo:inline font-family="monospace">self()</fo:inline>. The caller sends
    an asynchronous signal requesting information, and then
    waits for the reply signal containing the requested information. When
    the request signal reaches its destination, the destination process
    replies with the requested information.</fo:block>
  <fo:block id="idp3048736" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.3 
      Implementation</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The implementation of different asynchronous signals in the virtual
    machine can vary over time, but the behavior always respects this
    concept of asynchronous signals being passed between entities
    as described above.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By inspecting the implementation, you might notice that some
    specific signal gives a stricter guarantee than described
    above. It is of vital importance that such knowledge about the
    implementation is <fo:inline font-weight="bold">not</fo:inline> used by Erlang code, as the
    implementation can change at any time without prior notice.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples of major implementation changes:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>As from ERTS 5.5.2 exit signals to processes are truly
      asynchronously delivered.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>As from ERTS 5.10 all signals from processes to ports
      are truly asynchronously delivered.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp3042624" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.3  Time and Time Correction in Erlang</fo:marker>1.3  Time and Time Correction in Erlang</fo:block><fo:block id="idp3039056" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.1 
      New Extended Time Functionality</fo:block>
    
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from Erlang/OTP 18 (ERTS 7.0) the time functionality
    has been extended. This includes a
    <fo:inline font-style="italic">new API</fo:inline>
    for time and
    <fo:inline font-style="italic">time warp
    modes</fo:inline> that change the system behavior when
    system time changes.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic">default
    time warp mode</fo:inline> has the same behavior as before, and the
    old API still works. Thus, you are not required to change
    anything unless you want to. However, <fo:inline font-weight="bold">you are strongly
    encouraged to use the new API</fo:inline> instead of the old API based
    on <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:now/0</fo:inline></fo:inline>.
    <fo:inline font-family="monospace">erlang:now/0</fo:inline> is deprecated, as it is and
    will be a scalability bottleneck.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By using the new API, you
    automatically get scalability and performance improvements. This
    also enables you to use the
    <fo:inline font-style="italic">multi-time warp mode</fo:inline>
    that improves accuracy and precision of time measurements.</fo:block>
    </fo:block>
  <fo:block id="idp3032896" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.2 
      Terminology</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To make it easier to understand this section, some terms
    are defined. This is a mix of our own terminology
    (Erlang/OS system time, Erlang/OS monotonic time, time warp)
    and globally accepted terminology.</fo:block>

    
    <fo:block id="idp3030208" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Monotonically Increasing</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a monotonically increasing sequence of values, all values
      that have a predecessor are either larger than or equal to its
      predecessor.</fo:block>
    

    
    <fo:block id="idp3029568" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Strictly Monotonically Increasing</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a strictly monotonically increasing sequence of values,
      all values that have a predecessor are larger than its
      predecessor.</fo:block>
    

    
    <fo:block id="idp3026112" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">UT1</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Universal Time. UT1 is based on the rotation of the earth
      and conceptually means solar time at 0° longitude.</fo:block>
    

    
    <fo:block id="idp3024048" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">UTC</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Coordinated Universal Time. UTC almost aligns with
      <fo:inline font-style="italic">UT1</fo:inline>. However, UTC uses the
      SI definition of a second, which has not exactly the same length
      as the second used by UT1. This means that UTC slowly drifts from
      UT1. To keep UTC relatively in sync with UT1, leap seconds
      are inserted, and potentially also deleted. That is, an UTC day can
      be 86400, 86401, or 86399 seconds long.</fo:block>
    

    
    <fo:block id="idp3021712" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">POSIX Time</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Time since
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">
      Epoch</fo:basic-link></fo:inline>.
      Epoch is defined to be 00:00:00 <fo:inline font-style="italic">UTC</fo:inline>,
      1970-01-01.
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">
      A day in POSIX time</fo:basic-link></fo:inline>
      is defined to be exactly 86400 seconds long. Strangely enough,
      Epoch is defined to be a time in UTC, and UTC has another
      definition of how long a day is. Quoting the Open Group
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">
      "POSIX time is therefore not necessarily UTC, despite its
      appearance"</fo:basic-link></fo:inline>.
      The effect of this is that when an UTC leap second is
      inserted, POSIX time either stops for a second, or repeats the
      last second. If an UTC leap second would be deleted (which has not
      happened yet), POSIX time would make a one second leap forward.</fo:block>
    

    
    <fo:block id="idp3006800" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Time Resolution</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The shortest time interval that can be distinguished when
      reading time values.</fo:block>
    

    
    <fo:block id="idp3016208" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Time Precision</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The shortest time interval that can be distinguished
      repeatedly and reliably when reading time values. Precision
      is limited by the
      <fo:inline font-style="italic">resolution</fo:inline>, but
      resolution and precision can differ significantly.</fo:block>
    

    
    <fo:block id="idp3013744" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Time Accuracy</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The correctness of time values.</fo:block>
    

    
    <fo:block id="idp3009760" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Time Warp</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A time warp is a leap forwards or backwards in time. That
      is, the difference of time values taken before and after the
      time warp does not correspond to the actual elapsed time.</fo:block>
    

    
    <fo:block id="idp3008016" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">OS System Time</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The operating systems view of
      <fo:inline font-style="italic">POSIX time</fo:inline>. To
      retrieve it, call
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">os:system_time()</fo:inline></fo:inline>.
      This may or may not be an accurate view of POSIX time. This time
      may typically be adjusted both backwards and forwards without
      limitation. That is, <fo:inline font-style="italic">time warps</fo:inline>
      may be observed.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To get information about the Erlang runtime
      system's source of OS system time, call
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erlang:system_info(os_system_time_source)</fo:inline></fo:inline>.</fo:block>
    

    
    <fo:block id="idp3002064" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">OS Monotonic Time</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A monotonically increasing time provided by the OS.
      This time does not leap and has a relatively steady
      frequency although not completely correct. However, it is not
      uncommon that OS monotonic time stops if the system is
      suspended. This time typically increases since some
      unspecified point in time that is not connected to
      <fo:inline font-style="italic">OS system time</fo:inline>.
      This type of time is not necessarily provided by all OSs.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To get information about the Erlang
      runtime system's source of OS monotonic time, call
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erlang:system_info(os_monotonic_time_source)</fo:inline></fo:inline>.</fo:block>
    

    
    <fo:block id="idp2998048" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Erlang System Time</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang runtime systems view of
      <fo:inline font-style="italic">POSIX time</fo:inline>. To
      retrieve it, call
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erlang:system_time()</fo:inline></fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This time may or may not be an accurate view of POSIX time,
      and may
      or may not align with <fo:inline font-style="italic">OS system
      time</fo:inline>. The runtime system works towards aligning the two
      system times. Depending on the
      <fo:inline font-style="italic">time warp mode</fo:inline> used,
      this can be achieved by letting Erlang
      system time perform a <fo:inline font-style="italic">time
      warp</fo:inline>.</fo:block>
    

    
    <fo:block id="idp2993168" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Erlang Monotonic Time</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A monotonically increasing time provided by the
      Erlang runtime system. Erlang monotonic time increases since
      some unspecified point in time. To retrieve it, call
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erlang:monotonic_time()</fo:inline></fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic">accuracy</fo:inline> and
      <fo:inline font-style="italic">precision</fo:inline> of Erlang
      monotonic time heavily depends on the following:</fo:block>

      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Accuracy and precision of
          <fo:inline font-style="italic">OS monotonic time</fo:inline>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Accuracy and precision of
          <fo:inline font-style="italic">OS system time</fo:inline>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
          time warp mode</fo:inline> used
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On a system without OS monotonic time, Erlang monotonic
      time guarantees monotonicity, but cannot give
      other guarantees. The frequency adjustments made to
      Erlang monotonic time depend on the time warp mode used.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Internally in the runtime system, Erlang monotonic
      time is the "time engine" that is used for more or less
      everything that has anything to do with time. All timers,
      regardless of it is a <fo:inline font-family="monospace">receive ... after</fo:inline> timer, BIF timer,
      or a timer in the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">timer(3)</fo:inline></fo:inline>
      module, are triggered relative Erlang monotonic time. Even
      <fo:inline font-style="italic">Erlang system
      time</fo:inline> is based on Erlang monotonic time.
      By adding current Erlang monotonic time with current time
      offset, you get current Erlang system time.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To retrieve the current time offset, call
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erlang:time_offset/0</fo:inline></fo:inline>.</fo:block>
    

  <fo:block id="idp2981776" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.3 
      Introduction</fo:block>
    
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Time is vital to an Erlang program and, more importantly, <fo:inline font-weight="bold">correct</fo:inline>
  time is vital to an Erlang program. As Erlang is a language with
  soft real-time properties and we can express
  time in our programs, the Virtual Machine and the language must be
  careful about what is considered a correct time and in
  how time functions behave.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When Erlang was designed, it was assumed that the wall
  clock time in the system showed a monotonic time moving forward at
  exactly the same pace as the definition of time. This more or less meant
  that an atomic clock (or better time source) was expected to be attached
  to your hardware and that the hardware was then expected to be
  locked away from any human tinkering forever. While this can be a
  compelling thought, it is simply never the case.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A "normal" modern computer cannot keep time, not on itself and
  not unless you have a chip-level atomic clock wired to it. Time,
  as perceived by your computer, must normally be corrected. Hence
  the Network Time Protocol (NTP) protocol, together with the <fo:inline font-family="monospace">ntpd</fo:inline>
  process, does its best to keep your computer time in sync with
  the correct time. Between NTP corrections, usually a
  less potent time-keeper than an atomic clock is used.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, NTP is not fail-safe. The NTP server can be unavailable,
  <fo:inline font-family="monospace">ntp.conf</fo:inline> can be wrongly configured, or your computer can
  sometimes be disconnected from Internet. Furthermore, you can have a
  user (or even system administrator) who thinks the correct
  way to handle Daylight Saving Time is to adjust the clock one
  hour two times a year (which is the incorrect way to do it).
  To complicate things further, this user fetched your
  software from Internet and has not considered what
  the correct time is as perceived by a computer. The user does
  not care about keeping the wall clock in sync with the correct
  time. The user expects your program to have unlimited knowledge
  about the time.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Most programmers also expect time to be reliable, at least until
  they realize that the wall clock time on their workstation is off by
  a minute. Then they set it to the correct time, but most probably
  not in a smooth way.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of problems that arise when you always expect the wall clock
  time on the system to be correct can be immense. Erlang therefore
  introduced the "corrected estimate of time", or the "time
  correction", many years ago. The time correction relies on the fact
  that most operating systems have some kind of monotonic clock,
  either a real-time extension or some built-in "tick counter" that is
  independent of the wall clock settings. This counter can have
  microsecond resolution or much less, but it has a drift that cannot
  be ignored.</fo:block>
  <fo:block id="idp2973248" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.4 
      Time Correction</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If time correction is enabled, the Erlang runtime system
    makes use of both
    <fo:inline font-style="italic">OS system time</fo:inline>
    and <fo:inline font-style="italic">OS monotonic time</fo:inline>,
    to adjust the frequency of the Erlang
    monotonic clock. Time correction ensures that
    <fo:inline font-style="italic">Erlang monotonic time</fo:inline>
    does not warp and that the frequency is relatively accurate.
    The type of frequency adjustments depends on the time warp mode used.
    Section <fo:inline font-style="italic">Time Warp Modes</fo:inline>
    provides more details.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default time correction is enabled if support for
    it exists on the specific platform. Support for it includes
    both OS monotonic time, provided by the OS, and an
    implementation in the Erlang runtime system using
    OS monotonic time. To check if your system has support
    for OS monotonic time, call
    <fo:inline font-style="italic">
    <fo:inline font-family="monospace">erlang:system_info(os_monotonic_time_source)</fo:inline></fo:inline>.
    To check if time correction is enabled on your system, call
    <fo:inline font-style="italic">
    <fo:inline font-family="monospace">erlang:system_info(time_correction)</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To enable or disable time correction, pass command-line argument
    <fo:inline font-style="italic"><fo:inline font-family="monospace">+c [true|false]</fo:inline></fo:inline> to
    <fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If time correction is disabled, Erlang monotonic time
    can warp forwards or stop, or even freeze for extended
    periods of time. There are then no guarantees that the frequency
    of the Erlang monotonic clock is accurate or stable.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">You typically never want to disable time correction</fo:inline>.
    Previously a performance penalty was associated with time
    correction, but nowadays it is usually the other way around.
    If time correction is disabled, you probably get bad scalability,
    bad performance, and bad time measurements.</fo:block>
  <fo:block id="idp3091760" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.5 
      Time Warp Safe Code</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Time warp safe code can handle
    a <fo:inline font-style="italic">time warp</fo:inline> of
    <fo:inline font-style="italic">Erlang system time</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:now/0</fo:inline></fo:inline>
    behaves bad when Erlang system time warps. When Erlang
    system time does a time warp backwards, the values returned
    from <fo:inline font-family="monospace">erlang:now/0</fo:inline> freeze (if you disregard the
    microsecond increments made because of the actual call) until
    OS system time reaches the point of the last value returned by
    <fo:inline font-family="monospace">erlang:now/0</fo:inline>. This freeze can continue for a long time. It
    can take years, decades, and even longer until the freeze stops.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All uses of <fo:inline font-family="monospace">erlang:now/0</fo:inline> are not necessarily
    time warp unsafe. If you do not use it to get time, it
    is time warp safe. However, <fo:inline font-weight="bold">all uses of
    <fo:inline font-family="monospace">erlang:now/0</fo:inline> are suboptimal</fo:inline> from a performance
    and scalability perspective. So you really want to replace
    the use of it with other functionality. For examples
    of how to replace the use of <fo:inline font-family="monospace">erlang:now/0</fo:inline>, see section
    <fo:inline font-style="italic">How to Work with the New
    API</fo:inline>.</fo:block>
  <fo:block id="idp3084128" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.6 
      Time Warp Modes</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Current <fo:inline font-style="italic">Erlang system
    time</fo:inline> is determined by adding the current
    <fo:inline font-style="italic">Erlang monotonic time</fo:inline>
    with current
    <fo:inline font-style="italic">time offset</fo:inline>. The
    time offset is managed differently depending on which time
    warp mode you use.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To set the time warp mode, pass command-line argument
    <fo:inline font-style="italic"><fo:inline font-family="monospace">+C
    [no_time_warp|single_time_warp|multi_time_warp]</fo:inline></fo:inline> to
    <fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>.</fo:block>

    
    <fo:block id="idp3078480" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">No Time Warp Mode</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time offset is determined at runtime system start
      and does not change later. This is the default behavior, but
      not because it is the best mode (which it is not). It is
      default <fo:inline font-weight="bold">only</fo:inline> because this is how the runtime system
      behaved until ERTS 7.0.
      Ensure that your Erlang code that can execute during a time
      warp is <fo:inline font-style="italic">time warp
      safe</fo:inline> before enabling other modes.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As the time offset is not allowed to change, time
      correction must adjust the frequency of the Erlang
      monotonic clock to align Erlang system time with OS
      system time smoothly. A significant downside of this approach
      is that we on purpose will use a faulty frequency on the
      Erlang monotonic clock if adjustments are needed. This
      error can be as large as 1%. This error will show up in all
      time measurements in the runtime system.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If time correction is not enabled, Erlang monotonic
      time freezes when OS system time leaps backwards.
      The freeze of monotonic time continues until
      OS system time catches up. The freeze can continue for
      a long time. When OS system time leaps forwards,
      Erlang monotonic time also leaps forward.</fo:block>
    

    
    <fo:block id="idp3074816" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Single Time Warp Mode</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This mode is more or less a backward compatibility mode
      as from its introduction.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On an embedded system it is not uncommon that the system
      has no power supply, not even a battery, when it is
      shut off. The system clock on such a system is typically
      way off when the system boots. If
      <fo:inline font-style="italic">no time warp mode</fo:inline>
      is used, and the Erlang runtime system is started before
      OS system time has been corrected, Erlang system time
      can be wrong for a long time, centuries or even longer.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you need to use Erlang code that is not
      <fo:inline font-style="italic">time warp safe</fo:inline>,
      and you need to start the Erlang runtime system before OS
      system time has been corrected, you may want to use the single
      time warp mode.</fo:block>

      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are limitations to when you can
      execute time warp unsafe code using this mode. If it is possible
      to use time warp safe code only, it is <fo:inline font-weight="bold">much</fo:inline> better
      to use the <fo:inline font-style="italic">multi-time
      warp mode</fo:inline> instead.</fo:block></fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using the single time warp mode, the time offset is
      handled in two phases:</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always">Preliminary Phase</fo:block>
	<fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This phase starts when the runtime
	  system starts. A preliminary time offset based on
	  current OS system time is determined. This offset is from
	  now on to be fixed during the whole preliminary phase.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If time correction is enabled, adjustments to the
	  Erlang monotonic clock are made to keep its
	  frequency as correct as possible. However, <fo:inline font-weight="bold">no</fo:inline>
	  adjustments are made trying to align Erlang system
	  time and OS system time. That is, during the preliminary phase
	  Erlang system time and OS system time can diverge
	  from each other, and no attempt is made to prevent this.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If time correction is disabled, changes in OS system
	  time affects the monotonic clock the same way as
	  when the <fo:inline font-style="italic">no time warp
	  mode</fo:inline> is used.</fo:block>
	</fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always">Final Phase</fo:block>
	<fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This phase begins when the user finalizes the time
	  offset by calling
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erlang:system_flag(time_offset, finalize)</fo:inline></fo:inline>.
	  The finalization can only be performed once.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">During finalization, the time offset is adjusted and
	  fixed so that current Erlang system time aligns with the
	  current OS system time. As the time offset can
	  change during the finalization, Erlang system time
	  can do a time warp at this point. The time offset is
	  from now on fixed until the runtime system terminates.
	  If time correction has been enabled, the time
	  correction from now on also makes adjustments
	  to align Erlang system time with OS system
	  time. When the system is in the final phase, it behaves
	  exactly as in <fo:inline font-style="italic">no
	  time warp mode</fo:inline>.</fo:block>
	</fo:block></fo:block-container>
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order for this to work properly, the user must ensure
      that the following two requirements are satisfied:</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always">Forward Time Warp</fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time warp made when finalizing the time offset
	can only be done forwards without encountering problems.
	This implies that the user must ensure that OS
	system time is set to a time earlier or equal to actual
	POSIX time before starting the Erlang runtime system.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you are not sure that OS system time is correct,
	set it to a time that is guaranteed to be earlier than
	actual POSIX time before starting the Erlang runtime
	system, just to be safe.</fo:block>
        </fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always">Finalize Correct OS System Time</fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OS system time must be correct when
	the user finalizes the time offset.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If these requirements are not fulfilled, the system
      may behave very bad.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assuming that these requirements are fulfilled,
      time correction is enabled, and OS system time
      is adjusted using a time adjustment protocol such as NTP,
      only small adjustments of Erlang monotonic
      time are needed to keep system times
      aligned after finalization. As long as the system is not
      suspended, the largest adjustments needed are for
      inserted (or deleted) leap seconds.</fo:block>

      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To use this mode, ensure that
      all Erlang code that will execute in both phases is
      <fo:inline font-style="italic">time warp
      safe</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Code executing only in the final phase does not have
      to be able to cope with the time warp.</fo:block></fo:block>
    

    
    <fo:block id="idp3158992" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Multi-Time Warp Mode</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Multi-time warp mode in combination with time
      correction is the preferred configuration</fo:inline>. This as
      the Erlang runtime system have better performance, scale
      better, and behave better on almost all platforms.
      Also, the accuracy and precision of time measurements
      are better. Only Erlang runtime systems executing on
      ancient platforms benefit from another configuration.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time offset can change at any time without limitations.
      That is, Erlang system time can perform time warps both
      forwards and backwards at <fo:inline font-weight="bold">any</fo:inline> time. As we align
      Erlang system time with OS system time by changing
      the time offset, we can enable a time correction that tries
      to adjust the frequency of the Erlang monotonic clock to be as
      correct as possible. This makes time measurements using
      Erlang monotonic time more accurate and precise.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If time correction is disabled, Erlang monotonic time
      leaps forward if OS system time leaps forward. If
      OS system time leaps backwards, Erlang monotonic time
      stops briefly, but it does not freeze for extended periods
      of time. This as the time offset is changed to
      align Erlang system time with OS system time.</fo:block>

      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To use this mode, ensure that all
      Erlang code that will execute on the runtime system is
      <fo:inline font-style="italic">time warp
      safe</fo:inline>.</fo:block></fo:block>
    
  <fo:block id="idp3154528" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.7 
      New Time API</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The old time API is based on
    <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:now/0</fo:inline></fo:inline>.
    <fo:inline font-family="monospace">erlang:now/0</fo:inline> was intended to be used for many unrelated
    things. This tied these unrelated operations together and
    caused issues with performance, scalability, accuracy, and
    precision for operations that did not need to have
    such issues. To improve this, the new API spreads different
    functionality over multiple functions.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To be backward compatible, <fo:inline font-family="monospace">erlang:now/0</fo:inline>
    remains "as is", but <fo:inline font-weight="bold">you are strongly discouraged from using
    it</fo:inline>. Many use cases of <fo:inline font-family="monospace">erlang:now/0</fo:inline>
    prevents you from using the new
    <fo:inline font-style="italic">multi-time warp
    mode</fo:inline>, which is an important part of this
    new time functionality improvement.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some of the new BIFs on some systems, perhaps surprisingly,
    return negative integer values on a newly started runtime
    system. This is not a bug, but a memory use optimization.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The new API consists of the following new BIFs:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:convert_time_unit/3</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:monotonic_time/0</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:monotonic_time/1</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:system_time/0</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:system_time/1</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:time_offset/0</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:time_offset/1</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:timestamp/0</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:unique_integer/0</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:unique_integer/1</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">os:system_time/0</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">os:system_time/1</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The new API also consists of extensions of the following existing BIFs:
    </fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:monitor(time_offset, clock_service)</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:system_flag(time_offset, finalize)</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:system_info(os_monotonic_time_source)</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:system_info(os_system_time_source)</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:system_info(time_offset)</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:system_info(time_warp_mode)</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:system_info(time_correction)</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:system_info(start_time)</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:system_info(end_time)</fo:inline></fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    
    <fo:block id="idp3118768" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">New Erlang Monotonic Time</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang monotonic time as such is new as from ERTS 7.0.
      It is introduced to detach time measurements, such as elapsed
      time from calendar time. In many use cases there is a need to
      measure elapsed time or specify a time relative to another point
      in time without the need to know the involved times in UTC or
      any other globally defined time scale. By introducing a time
      scale with a local definition of where it starts, time that do
      not concern calendar time can be managed on that time
      scale. Erlang monotonic time uses such a time scale with a
      locally defined start.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The introduction of Erlang monotonic time allows
      us to adjust the two Erlang times (Erlang
      monotonic time and Erlang system time) separately. By
      doing this, the accuracy of elapsed time does not have to
      suffer just because the system time happened to be
      wrong at some point in time. Separate adjustments
      of the two times are only performed in the time warp
      modes, and only fully separated in the
      <fo:inline font-style="italic">multi-time
      warp mode</fo:inline>. All other modes than the
      multi-time warp mode are for backward
      compatibility reasons. When using these modes, the
      accuracy of Erlang monotonic time suffer, as
      the adjustments of Erlang monotonic time in these
      modes are more or less tied to Erlang system time.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The adjustment of system time could have been made
      smother than using a time warp approach, but we think
      that would be a bad choice. As we can
      express and measure time that is not connected to
      calendar time by the use of Erlang monotonic time, it
      is better to expose the change in Erlang system time
      immediately. This as the Erlang applications
      executing on the system can react on the change in
      system time as soon as possible. This is also more or
      less exactly how most operating systems handle this
      (OS monotonic time and OS system time). By adjusting
      system time smoothly, we would just hide the fact that
      system time changed and make it harder for the Erlang
      applications to react to the change in a sensible way.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To be able to react to a change in Erlang
      system time, you must be able to detect that it
      happened. The change in Erlang system time occurs when the
      current time offset is changed. We have therefore
      introduced the possibility to monitor the time offset using
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erlang:monitor(time_offset, clock_service)</fo:inline></fo:inline>.
      A process monitoring the time
      offset is sent a message on the following format
      when the time offset is changed:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{'CHANGE', MonitorReference, time_offset, clock_service, NewTimeOffset}</fo:block>
    

    
    <fo:block id="idp3114336" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Unique Values</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Besides reporting time, <fo:inline font-family="monospace">erlang:now/0</fo:inline> also
      produces unique and strictly monotonically increasing
      values. To detach this functionality from
      time measurements, we have introduced
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erlang:unique_integer()</fo:inline></fo:inline>.</fo:block>
    

    
    <fo:block id="idp2820592" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">How to Work with the New API</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Previously <fo:inline font-family="monospace">erlang:now/0</fo:inline> was the only option for doing
      many things. This section deals with some things that
      <fo:inline font-family="monospace">erlang:now/0</fo:inline> can be used for, and how you use the new API.</fo:block>

      
      <fo:block id="idp2818944" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Retrieve Erlang System Time</fo:block>
	
	<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Don't:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Use <fo:inline font-family="monospace">erlang:now/0</fo:inline> to retrieve the current Erlang system time.
	  </fo:block>
	</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Do:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Use
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:system_time/1</fo:inline></fo:inline>
	    to retrieve the current Erlang system time on the
	    <fo:inline font-style="italic">time unit</fo:inline>
	    of your choice.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you want the same format as returned by <fo:inline font-family="monospace">erlang:now/0</fo:inline>,
            use <fo:inline font-style="italic">
	    <fo:inline font-family="monospace">erlang:timestamp/0</fo:inline></fo:inline>.
	  </fo:block>
	</fo:block>
      

      
      <fo:block id="idp2811392" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Measure Elapsed Time</fo:block>
	
	<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Don't:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Take time stamps with <fo:inline font-family="monospace">erlang:now/0</fo:inline> and calculate
	    the difference in time with
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">timer:now_diff/2</fo:inline></fo:inline>.
	  </fo:block>
	</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Do:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Take time stamps with
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:monotonic_time/0</fo:inline></fo:inline>
	    and calculate the time difference using ordinary subtraction.
	    The result is in <fo:inline font-family="monospace">native</fo:inline>
	    <fo:inline font-style="italic">time unit</fo:inline>.
	    If you want to convert the
	    result to another time unit, you can use
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:convert_time_unit/3</fo:inline></fo:inline>.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An easier way to do this is to use
	    <fo:inline font-style="italic">
	    <fo:inline font-family="monospace">erlang:monotonic_time/1</fo:inline></fo:inline>
	    with the desired time unit. However, you can then lose accuracy
	    and precision.
	  </fo:block>
	</fo:block>
      

      
      <fo:block id="idp2944080" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Determine Order of Events</fo:block>
	
	<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Don't:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Determine the order of events by saving a time stamp
	    with <fo:inline font-family="monospace">erlang:now/0</fo:inline> when the event occurs.
	  </fo:block>
	</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Do:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Determine the order of events by saving the integer
	    returned by
	    <fo:inline font-style="italic">
	    <fo:inline font-family="monospace">erlang:unique_integer([monotonic])</fo:inline></fo:inline>
	    when the event occurs. These integers are strictly
	    monotonically ordered on current runtime system instance
	    corresponding to creation time.
	  </fo:block>
	</fo:block>
      

      
      <fo:block id="idp2791088" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Determine Order of Events with Time of the Event</fo:block>
	
	<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Don't:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Determine the order of events by saving a time stamp
	    with <fo:inline font-family="monospace">erlang:now/0</fo:inline> when the event occurs.
	  </fo:block>
	</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Do:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Determine the order of events by saving a tuple containing
	    <fo:inline font-style="italic">monotonic time</fo:inline>
	    and a <fo:inline font-style="italic">strictly
	    monotonically increasing integer</fo:inline> as follows:</fo:block>

	    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Time = erlang:monotonic_time(),
UMI = erlang:unique_integer([monotonic]),
EventTag = {Time, UMI}</fo:block>

	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These tuples are strictly monotonically ordered
	    on the current runtime system instance according to
	    creation time. It is important that the
	    monotonic time is in the first element (the most
	    significant element when comparing two-tuples). Using
	    the monotonic time in the tuples, you can calculate time
	    between events.</fo:block>

	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you are interested in Erlang system time at the
	    time when the event occurred, you can also save the time
	    offset before or after saving the events using
	    <fo:inline font-style="italic">
	    <fo:inline font-family="monospace">erlang:time_offset/0</fo:inline></fo:inline>.
	    Erlang monotonic time added with the time
	    offset corresponds to Erlang system time.</fo:block>

	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you are executing in a mode where time offset
	    can change, and you want to get the actual
	    Erlang system time when the event occurred, you can
	    save the time offset as a third element in the tuple
	    (the least significant element when comparing three-tuples).</fo:block>
	</fo:block>
      

      
      <fo:block id="idp1092688" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Create a Unique Name</fo:block>
	
	<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Don't:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Use the values returned from <fo:inline font-family="monospace">erlang:now/0</fo:inline>
	    to create a name unique on the current runtime system instance.
	  </fo:block>
	</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Do:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Use the value returned from
	    <fo:inline font-style="italic">
	    <fo:inline font-family="monospace">erlang:unique_integer/0</fo:inline></fo:inline>
	    to create a name unique on the current runtime system
	    instance. If you only want positive integers, you can use
	    <fo:inline font-style="italic">
	    <fo:inline font-family="monospace">erlang:unique_integer([positive])</fo:inline></fo:inline>.
	  </fo:block>
	</fo:block>
      

      
      <fo:block id="idp984880" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Seed Random Number Generation with a Unique Value</fo:block>
	
	<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Don't:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Seed random number generation using <fo:inline font-family="monospace">erlang:now()</fo:inline>.
	  </fo:block>
	</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Do:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Seed random number generation using a combination of
	    <fo:inline font-style="italic">
	    <fo:inline font-family="monospace">erlang:monotonic_time()</fo:inline></fo:inline>,
	    <fo:inline font-style="italic">
	    <fo:inline font-family="monospace">erlang:time_offset()</fo:inline></fo:inline>,
	    <fo:inline font-style="italic">
	    <fo:inline font-family="monospace">erlang:unique_integer()</fo:inline></fo:inline>,
            and other functionality.
	  </fo:block>
	</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To sum up this section: <fo:inline font-weight="bold">Do not use <fo:inline font-family="monospace">erlang:now/0</fo:inline>.</fo:inline></fo:block>
    
  <fo:block id="idp977344" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.8 
      Support of Both New and Old OTP Releases</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It can be required that your code must run on a variety
    of OTP installations of different OTP releases. If so, you
    cannot use the new API out of the box, as it will
    not be available on releases before OTP 18. The solution
    is <fo:inline font-weight="bold">not</fo:inline> to avoid using the new API, as your
    code would then not benefit from the scalability
    and accuracy improvements made. Instead, use the
    new API when available, and fall back on <fo:inline font-family="monospace">erlang:now/0</fo:inline>
    when the new API is unavailable.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Fortunately most of the new API can easily be
    implemented using existing primitives, except for:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">
	<fo:inline font-family="monospace">erlang:system_info(start_time)</fo:inline></fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">
	<fo:inline font-family="monospace">erlang:system_info(end_time)</fo:inline></fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">
	<fo:inline font-family="monospace">erlang:system_info(os_monotonic_time_source)</fo:inline></fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">
	<fo:inline font-family="monospace">erlang:system_info(os_system_time_source)</fo:inline></fo:inline>)
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By wrapping the API with functions that fall back on
    <fo:inline font-family="monospace">erlang:now/0</fo:inline> when the new API is unavailable,
    and using these wrappers instead of using the API directly,
    the problem is solved. These wrappers can, for example,
    be implemented as in
    <fo:inline font-weight="bold"><fo:basic-link external-destination="href">$ERL_TOP/erts/example/time_compat.erl</fo:basic-link></fo:inline>.</fo:block>
  <fo:block id="idp2826608" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.4  Match Specifications in Erlang</fo:marker>1.4  Match Specifications in Erlang</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A "match specification" (<fo:inline font-family="monospace">match_spec</fo:inline>) is an Erlang term describing a
    small "program" that tries to match something. It can be used
    to either control tracing with
    <fo:inline font-style="italic">erlang:trace_pattern/3</fo:inline>
    or to search for objects in an ETS table with for example
    <fo:inline font-style="italic">ets:select/2</fo:inline>.
    The match specification in many ways works like a small function in Erlang,
    but is interpreted/compiled by the Erlang runtime system to something much more
    efficient than calling an Erlang function. The match specification is also
    very limited compared to the expressiveness of real Erlang functions.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The most notable difference between a match specification and an Erlang
    fun is the syntax. Match specifications are Erlang terms, not Erlang code.
    Also, a match specification has a strange concept of exceptions:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An exception (such as <fo:inline font-family="monospace">badarg</fo:inline>) in the
        <fo:inline font-family="monospace">MatchCondition</fo:inline> part, which resembles an Erlang guard,
        generates immediate failure.</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An exception in the <fo:inline font-family="monospace">MatchBody</fo:inline> part, which resembles
        the body of an Erlang function, is implicitly caught and results in the
        single atom <fo:inline font-family="monospace">'EXIT'</fo:inline>.</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block id="idp3141056" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.1 
      Grammar</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A match specification used in tracing can be described in the following
      <fo:inline font-weight="bold">informal</fo:inline> grammar:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchExpression ::= [ MatchFunction, ... ]
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchFunction ::= { MatchHead, MatchConditions, MatchBody }
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchHead ::=  MatchVariable | <fo:inline font-family="monospace">'_'</fo:inline> |
        [ MatchHeadPart, ... ]
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchHeadPart ::= term() | MatchVariable | <fo:inline font-family="monospace">'_'</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchVariable ::= '$&lt;number&gt;'
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchConditions ::= [ MatchCondition, ...] | <fo:inline font-family="monospace">[]</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchCondition ::= { GuardFunction } | { GuardFunction,
        ConditionExpression, ... }
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>BoolFunction ::= <fo:inline font-family="monospace">is_atom</fo:inline> |
        <fo:inline font-family="monospace">is_float</fo:inline> | <fo:inline font-family="monospace">is_integer</fo:inline> |
        <fo:inline font-family="monospace">is_list</fo:inline> | <fo:inline font-family="monospace">is_number</fo:inline> |
        <fo:inline font-family="monospace">is_pid</fo:inline> | <fo:inline font-family="monospace">is_port</fo:inline> |
        <fo:inline font-family="monospace">is_reference</fo:inline> | <fo:inline font-family="monospace">is_tuple</fo:inline> |
        <fo:inline font-family="monospace">is_map</fo:inline> | <fo:inline font-family="monospace">is_binary</fo:inline> |
        <fo:inline font-family="monospace">is_function</fo:inline> | <fo:inline font-family="monospace">is_record</fo:inline> |
        <fo:inline font-family="monospace">is_seq_trace</fo:inline> | <fo:inline font-family="monospace">'and'</fo:inline> |
        <fo:inline font-family="monospace">'or'</fo:inline> | <fo:inline font-family="monospace">'not'</fo:inline> |
        <fo:inline font-family="monospace">'xor'</fo:inline> | <fo:inline font-family="monospace">'andalso'</fo:inline> |
        <fo:inline font-family="monospace">'orelse'</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ConditionExpression ::= ExprMatchVariable | { GuardFunction } |
        { GuardFunction, ConditionExpression, ... } | TermConstruct
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ExprMatchVariable ::= MatchVariable (bound in the MatchHead) |
        <fo:inline font-family="monospace">'$_'</fo:inline> | <fo:inline font-family="monospace">'$$'</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>TermConstruct = {{}} | {{ ConditionExpression, ... }} |
        <fo:inline font-family="monospace">[]</fo:inline> | [ConditionExpression, ...] |
        <fo:inline font-family="monospace">#{}</fo:inline> | #{term() =&gt; ConditionExpression, ...} |
        NonCompositeTerm | Constant
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>NonCompositeTerm ::= term() (not list or tuple or map)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Constant ::= {<fo:inline font-family="monospace">const</fo:inline>, term()}
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>GuardFunction ::= BoolFunction | <fo:inline font-family="monospace">abs</fo:inline> |
        <fo:inline font-family="monospace">element</fo:inline> | <fo:inline font-family="monospace">hd</fo:inline> |
        <fo:inline font-family="monospace">length</fo:inline> | <fo:inline font-family="monospace">node</fo:inline> |
        <fo:inline font-family="monospace">round</fo:inline> | <fo:inline font-family="monospace">size</fo:inline> |
        <fo:inline font-family="monospace">tl</fo:inline> | <fo:inline font-family="monospace">trunc</fo:inline> |
        <fo:inline font-family="monospace">'+'</fo:inline> | <fo:inline font-family="monospace">'-'</fo:inline> |
        <fo:inline font-family="monospace">'*'</fo:inline> | <fo:inline font-family="monospace">'div'</fo:inline> |
        <fo:inline font-family="monospace">'rem'</fo:inline> | <fo:inline font-family="monospace">'band'</fo:inline> |
        <fo:inline font-family="monospace">'bor'</fo:inline> | <fo:inline font-family="monospace">'bxor'</fo:inline> |
        <fo:inline font-family="monospace">'bnot'</fo:inline> | <fo:inline font-family="monospace">'bsl'</fo:inline> |
        <fo:inline font-family="monospace">'bsr'</fo:inline> | <fo:inline font-family="monospace">'&gt;'</fo:inline> |
        <fo:inline font-family="monospace">'&gt;='</fo:inline> | <fo:inline font-family="monospace">'&lt;'</fo:inline> |
        <fo:inline font-family="monospace">'=&lt;'</fo:inline> | <fo:inline font-family="monospace">'=:='</fo:inline> |
        <fo:inline font-family="monospace">'=='</fo:inline> | <fo:inline font-family="monospace">'=/='</fo:inline> |
        <fo:inline font-family="monospace">'/='</fo:inline> | <fo:inline font-family="monospace">self</fo:inline> |
        <fo:inline font-family="monospace">get_tcw</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchBody ::= [ ActionTerm ]
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ActionTerm ::= ConditionExpression | ActionCall
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ActionCall ::= {ActionFunction} | {ActionFunction, ActionTerm, ...}
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ActionFunction ::= <fo:inline font-family="monospace">set_seq_token</fo:inline> |
        <fo:inline font-family="monospace">get_seq_token</fo:inline> | <fo:inline font-family="monospace">message</fo:inline> |
        <fo:inline font-family="monospace">return_trace</fo:inline> | <fo:inline font-family="monospace">exception_trace</fo:inline> |
        <fo:inline font-family="monospace">process_dump</fo:inline> | <fo:inline font-family="monospace">enable_trace</fo:inline> |
        <fo:inline font-family="monospace">disable_trace</fo:inline> | <fo:inline font-family="monospace">trace</fo:inline> |
        <fo:inline font-family="monospace">display</fo:inline> | <fo:inline font-family="monospace">caller</fo:inline> |
        <fo:inline font-family="monospace">set_tcw</fo:inline> | <fo:inline font-family="monospace">silent</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A match specification  used in
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ets(3)</fo:inline></fo:inline>
      can be described in the following <fo:inline font-weight="bold">informal</fo:inline> grammar:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchExpression ::= [ MatchFunction, ... ]
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchFunction ::= { MatchHead, MatchConditions, MatchBody }
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchHead ::=  MatchVariable | <fo:inline font-family="monospace">'_'</fo:inline> |
        { MatchHeadPart, ... }
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchHeadPart ::= term() | MatchVariable | <fo:inline font-family="monospace">'_'</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchVariable ::= '$&lt;number&gt;'
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchConditions ::= [ MatchCondition, ...] | <fo:inline font-family="monospace">[]</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchCondition ::= { GuardFunction } |
        { GuardFunction, ConditionExpression, ... }
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>BoolFunction ::= <fo:inline font-family="monospace">is_atom</fo:inline> |
        <fo:inline font-family="monospace">is_float</fo:inline> | <fo:inline font-family="monospace">is_integer</fo:inline> |
        <fo:inline font-family="monospace">is_list</fo:inline> | <fo:inline font-family="monospace">is_number</fo:inline> |
        <fo:inline font-family="monospace">is_pid</fo:inline> | <fo:inline font-family="monospace">is_port</fo:inline> |
        <fo:inline font-family="monospace">is_reference</fo:inline> | <fo:inline font-family="monospace">is_tuple</fo:inline> |
        <fo:inline font-family="monospace">is_map</fo:inline> | <fo:inline font-family="monospace">is_binary</fo:inline> |
        <fo:inline font-family="monospace">is_function</fo:inline> | <fo:inline font-family="monospace">is_record</fo:inline> |
        <fo:inline font-family="monospace">is_seq_trace</fo:inline> | <fo:inline font-family="monospace">'and'</fo:inline> |
        <fo:inline font-family="monospace">'or'</fo:inline> | <fo:inline font-family="monospace">'not'</fo:inline> |
        <fo:inline font-family="monospace">'xor'</fo:inline> | <fo:inline font-family="monospace">'andalso'</fo:inline> |
        <fo:inline font-family="monospace">'orelse'</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ConditionExpression ::= ExprMatchVariable | { GuardFunction } |
        { GuardFunction, ConditionExpression, ... } | TermConstruct
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ExprMatchVariable ::= MatchVariable (bound in the MatchHead) |
        <fo:inline font-family="monospace">'$_'</fo:inline> | <fo:inline font-family="monospace">'$$'</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>TermConstruct = {{}} | {{ ConditionExpression, ... }} |
        <fo:inline font-family="monospace">[]</fo:inline> | [ConditionExpression, ...] | #{} |
        #{term() =&gt; ConditionExpression, ...} | NonCompositeTerm | Constant
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>NonCompositeTerm ::= term() (not list or tuple or map)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Constant ::= {<fo:inline font-family="monospace">const</fo:inline>, term()}
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>GuardFunction ::= BoolFunction | <fo:inline font-family="monospace">abs</fo:inline> |
        <fo:inline font-family="monospace">element</fo:inline> | <fo:inline font-family="monospace">hd</fo:inline> |
        <fo:inline font-family="monospace">length</fo:inline> | <fo:inline font-family="monospace">node</fo:inline> |
        <fo:inline font-family="monospace">round</fo:inline> | <fo:inline font-family="monospace">size</fo:inline> |
        <fo:inline font-family="monospace">tl</fo:inline> | <fo:inline font-family="monospace">trunc</fo:inline> |
        <fo:inline font-family="monospace">'+'</fo:inline> | <fo:inline font-family="monospace">'-'</fo:inline> |
        <fo:inline font-family="monospace">'*'</fo:inline> | <fo:inline font-family="monospace">'div'</fo:inline> |
        <fo:inline font-family="monospace">'rem'</fo:inline> | <fo:inline font-family="monospace">'band'</fo:inline> |
        <fo:inline font-family="monospace">'bor'</fo:inline> | <fo:inline font-family="monospace">'bxor'</fo:inline> |
        <fo:inline font-family="monospace">'bnot'</fo:inline> | <fo:inline font-family="monospace">'bsl'</fo:inline> |
        <fo:inline font-family="monospace">'bsr'</fo:inline> | <fo:inline font-family="monospace">'&gt;'</fo:inline> |
        <fo:inline font-family="monospace">'&gt;='</fo:inline> | <fo:inline font-family="monospace">'&lt;'</fo:inline> |
        <fo:inline font-family="monospace">'=&lt;'</fo:inline> | <fo:inline font-family="monospace">'=:='</fo:inline> |
        <fo:inline font-family="monospace">'=='</fo:inline> | <fo:inline font-family="monospace">'=/='</fo:inline> |
        <fo:inline font-family="monospace">'/='</fo:inline> | <fo:inline font-family="monospace">self</fo:inline> |
        <fo:inline font-family="monospace">get_tcw</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>MatchBody ::= [ ConditionExpression, ... ]
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1055712" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.2 
      Function Descriptions</fo:block>
    
    <fo:block id="idp679552" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Functions Allowed in All Types of Match Specifications</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions allowed in <fo:inline font-family="monospace">match_spec</fo:inline> work as
        follows:</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">is_atom</fo:inline>, <fo:inline font-family="monospace">is_float</fo:inline>, <fo:inline font-family="monospace">is_integer</fo:inline>, <fo:inline font-family="monospace">is_list</fo:inline>,
          <fo:inline font-family="monospace">is_number</fo:inline>, <fo:inline font-family="monospace">is_pid</fo:inline>, <fo:inline font-family="monospace">is_port</fo:inline>, <fo:inline font-family="monospace">is_reference</fo:inline>,
          <fo:inline font-family="monospace">is_tuple</fo:inline>, <fo:inline font-family="monospace">is_map</fo:inline>, <fo:inline font-family="monospace">is_binary</fo:inline>, <fo:inline font-family="monospace">is_function</fo:inline>
        </fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as the corresponding guard tests in Erlang, return
            <fo:inline font-family="monospace">true</fo:inline> or <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">is_record</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Takes an additional parameter, which <fo:inline font-weight="bold">must</fo:inline> be the result
            of <fo:inline font-family="monospace">record_info(size, &lt;record_type&gt;)</fo:inline>, like in
            <fo:inline font-family="monospace">{is_record, '$1', rectype, record_info(size,
            rectype)}</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'not'</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Negates its single argument (anything other
            than <fo:inline font-family="monospace">false</fo:inline> gives <fo:inline font-family="monospace">false</fo:inline>).</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'and'</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if all its arguments (variable
            length argument list) evaluate to <fo:inline font-family="monospace">true</fo:inline>, otherwise
            <fo:inline font-family="monospace">false</fo:inline>. Evaluation order is undefined.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'or'</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if any of its arguments
            evaluates to <fo:inline font-family="monospace">true</fo:inline>. Variable length argument
            list. Evaluation order is undefined.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'andalso'</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works as <fo:inline font-family="monospace">'and'</fo:inline>, but quits evaluating its
            arguments when one argument evaluates to something else
            than <fo:inline font-family="monospace">true</fo:inline>. Arguments are evaluated left to right.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'orelse'</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works as <fo:inline font-family="monospace">'or'</fo:inline>, but quits evaluating as soon
            as one of its arguments evaluates to <fo:inline font-family="monospace">true</fo:inline>.
            Arguments are evaluated left to right.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'xor'</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only two arguments, of which one must be <fo:inline font-family="monospace">true</fo:inline> and the
            other <fo:inline font-family="monospace">false</fo:inline> to return <fo:inline font-family="monospace">true</fo:inline>; otherwise
            <fo:inline font-family="monospace">'xor'</fo:inline> returns false.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">abs</fo:inline>, <fo:inline font-family="monospace">element</fo:inline>, <fo:inline font-family="monospace">hd</fo:inline>, <fo:inline font-family="monospace">length</fo:inline>, <fo:inline font-family="monospace">node</fo:inline>,
          <fo:inline font-family="monospace">round</fo:inline>, <fo:inline font-family="monospace">size</fo:inline>, <fo:inline font-family="monospace">tl</fo:inline>, <fo:inline font-family="monospace">trunc</fo:inline>, <fo:inline font-family="monospace">'+'</fo:inline>,
          <fo:inline font-family="monospace">'-'</fo:inline>, <fo:inline font-family="monospace">'*'</fo:inline>, <fo:inline font-family="monospace">'div'</fo:inline>, <fo:inline font-family="monospace">'rem'</fo:inline>, <fo:inline font-family="monospace">'band'</fo:inline>,
          <fo:inline font-family="monospace">'bor'</fo:inline>, <fo:inline font-family="monospace">'bxor'</fo:inline>, <fo:inline font-family="monospace">'bnot'</fo:inline>, <fo:inline font-family="monospace">'bsl'</fo:inline>,
          <fo:inline font-family="monospace">'bsr'</fo:inline>, <fo:inline font-family="monospace">'&gt;'</fo:inline>, <fo:inline font-family="monospace">'&gt;='</fo:inline>, <fo:inline font-family="monospace">'&lt;'</fo:inline>, <fo:inline font-family="monospace">'=&lt;'</fo:inline>,
          <fo:inline font-family="monospace">'=:='</fo:inline>, <fo:inline font-family="monospace">'=='</fo:inline>, <fo:inline font-family="monospace">'=/='</fo:inline>, <fo:inline font-family="monospace">'/='</fo:inline>,
          <fo:inline font-family="monospace">self</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as the corresponding Erlang BIFs (or operators). In case of
            bad arguments, the result depends on the context. In the
            <fo:inline font-family="monospace">MatchConditions</fo:inline> part of the expression, the test
            fails immediately (like in an Erlang guard). In the
            <fo:inline font-family="monospace">MatchBody</fo:inline> part, exceptions are implicitly caught
            and the call results in the atom <fo:inline font-family="monospace">'EXIT'</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp1983216" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Functions Allowed Only for Tracing</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions allowed only for tracing work as follows:</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">is_seq_trace</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if a sequential trace token is set
            for the current process, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">set_seq_token</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works as <fo:inline font-family="monospace">seq_trace:set_token/2</fo:inline>, but returns
            <fo:inline font-family="monospace">true</fo:inline> on success, and <fo:inline font-family="monospace">'EXIT'</fo:inline>
            on error or bad argument. Only allowed in the
            <fo:inline font-family="monospace">MatchBody</fo:inline> part and only allowed when tracing.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">get_seq_token</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">seq_trace:get_token/0</fo:inline> and only
            allowed in the <fo:inline font-family="monospace">MatchBody</fo:inline> part when tracing.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">message</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets an additional message appended to the
            trace message sent. One can only set one additional message in
            the body. Later calls replace the appended message.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As a special case, <fo:inline font-family="monospace">{message, false}</fo:inline> disables
            sending of trace messages ('call' and 'return_to') for this function
            call, just like if the match specification had not matched.
            This can be useful if only the side effects of 
            the <fo:inline font-family="monospace">MatchBody</fo:inline> part are desired.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another special case is <fo:inline font-family="monospace">{message, true}</fo:inline>, which
            sets the default behavior, as if the function had no match
            specification; trace message is sent with no extra information
            (if no other calls to <fo:inline font-family="monospace">message</fo:inline> are placed before
            <fo:inline font-family="monospace">{message, true}</fo:inline>, it is in fact a "noop").</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Takes one argument: the message. Returns <fo:inline font-family="monospace">true</fo:inline>
            and can only be used in the <fo:inline font-family="monospace">MatchBody</fo:inline> part and
            when tracing.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">return_trace</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Causes a <fo:inline font-family="monospace">return_from</fo:inline> trace message to be sent
            upon return from the current function. Takes no arguments, returns
            <fo:inline font-family="monospace">true</fo:inline> and can only be used in the
            <fo:inline font-family="monospace">MatchBody</fo:inline> part when tracing.
            If the process trace flag <fo:inline font-family="monospace">silent</fo:inline> is active, the
            <fo:inline font-family="monospace">return_from</fo:inline> trace message is inhibited.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Warning:</fo:inline> If the traced function is tail-recursive, this
            match specification function destroys that property. Hence, if a
            match specification executing this function is used on a
            perpetual server process, it can only be active for a limited
            period of time, or the emulator will eventually use all memory in
            the host machine and crash. If this match specification function is
            inhibited using process trace flag <fo:inline font-family="monospace">silent</fo:inline>,
            tail-recursiveness still remains.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">exception_trace</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works as <fo:inline font-family="monospace">return_trace</fo:inline> plus; if the traced function exits
            because of an exception,
            an <fo:inline font-family="monospace">exception_from</fo:inline> trace message is generated,
            regardless of the exception is caught or not.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">process_dump</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns some textual information about
            the current process as a binary. Takes no arguments and is only
            allowed in the <fo:inline font-family="monospace">MatchBody</fo:inline> part when tracing.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enable_trace</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With one parameter this function turns on tracing like the Erlang
            call <fo:inline font-family="monospace">erlang:trace(self(), true, [P2])</fo:inline>, where
            <fo:inline font-family="monospace">P2</fo:inline> is the parameter to
            <fo:inline font-family="monospace">enable_trace</fo:inline>.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With two parameters, the first parameter is to be either a process
            identifier or the registered name of a process. In this case tracing
            is turned on for the designated process in the same way as in the
            Erlang call <fo:inline font-family="monospace">erlang:trace(P1, true, [P2])</fo:inline>, where
            <fo:inline font-family="monospace">P1</fo:inline> is the first and <fo:inline font-family="monospace">P2</fo:inline> is the second argument. The
            process <fo:inline font-family="monospace">P1</fo:inline> gets its trace messages sent to the
            same tracer as the process executing the statement uses.
            <fo:inline font-family="monospace">P1</fo:inline> <fo:inline font-weight="bold">cannot</fo:inline> be one of the atoms
            <fo:inline font-family="monospace">all</fo:inline>, <fo:inline font-family="monospace">new</fo:inline> or 
            <fo:inline font-family="monospace">existing</fo:inline> (unless they are registered names).
            <fo:inline font-family="monospace">P2</fo:inline> <fo:inline font-weight="bold">cannot</fo:inline> be
            <fo:inline font-family="monospace">cpu_timestamp</fo:inline> or <fo:inline font-family="monospace">tracer</fo:inline>.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> and can only be used in
            the <fo:inline font-family="monospace">MatchBody</fo:inline> part when tracing.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">disable_trace</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With one parameter this function disables tracing like the Erlang
            call <fo:inline font-family="monospace">erlang:trace(self(), false, [P2])</fo:inline>, where
            <fo:inline font-family="monospace">P2</fo:inline> is the parameter to
            <fo:inline font-family="monospace">disable_trace</fo:inline>.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With two parameters this function works as the Erlang call
            <fo:inline font-family="monospace">erlang:trace(P1, false, [P2])</fo:inline>, where <fo:inline font-family="monospace">P1</fo:inline>
            can be either a process identifier or a registered name and is
            specified as the first argument to the match specification function.
            <fo:inline font-family="monospace">P2</fo:inline> <fo:inline font-weight="bold">cannot</fo:inline> be
            <fo:inline font-family="monospace">cpu_timestamp</fo:inline> or <fo:inline font-family="monospace">tracer</fo:inline>.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> and can only be used in the
            <fo:inline font-family="monospace">MatchBody</fo:inline> part when tracing.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trace</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With two parameters this function takes a list
            of trace flags to disable as first parameter and a list
            of trace flags to enable as second parameter. Logically, the
            disable list is applied first, but effectively all changes
            are applied atomically. The trace flags
            are the same as for <fo:inline font-family="monospace">erlang:trace/3</fo:inline>,
            not including <fo:inline font-family="monospace">cpu_timestamp</fo:inline>, but including
            <fo:inline font-family="monospace">tracer</fo:inline>.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a tracer is specified in both lists, the tracer in the
            enable list takes precedence. If no tracer is specified, the same
            tracer as the process executing the match specification is used.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When using a <fo:inline font-style="italic">tracer module</fo:inline>,
            the module must be loaded before the match specification is
            executed. If it is not loaded, the match fails.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With three parameters to this function, the first is
            either a process identifier or the registered name of a
            process to set trace flags on, the second is the disable
            list, and the third is the enable list.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if any trace property was changed
            for the trace target process, otherwise <fo:inline font-family="monospace">false</fo:inline>.
            Can only be used in the <fo:inline font-family="monospace">MatchBody</fo:inline> part when
            tracing.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">caller</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the calling function as a tuple <fo:inline font-family="monospace">{Module, Function,
             Arity}</fo:inline> or the atom <fo:inline font-family="monospace">undefined</fo:inline> if the calling
             function cannot be determined. Can only be used in the
             <fo:inline font-family="monospace">MatchBody</fo:inline> part when tracing.</fo:block>
           <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that if a "technically built in function" (that is, a
             function not written in Erlang) is traced, the
             <fo:inline font-family="monospace">caller</fo:inline> function sometimes returns the atom
             <fo:inline font-family="monospace">undefined</fo:inline>. The calling
             Erlang function is not available during such calls.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">display</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For debugging purposes only. Displays the single argument as an
              Erlang term on <fo:inline font-family="monospace">stdout</fo:inline>, which is seldom what is wanted.
              Returns <fo:inline font-family="monospace">true</fo:inline> and can only be used in the
              <fo:inline font-family="monospace">MatchBody</fo:inline> part when tracing.</fo:block>
          </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">get_tcw</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Takes no argument and returns the value of the node's trace
            control word. The same is done by
            <fo:inline font-family="monospace">erlang:system_info(trace_control_word)</fo:inline>.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The trace control word is a 32-bit unsigned integer intended for
            generic trace control. The trace control word can be tested and
            set both from within trace match specifications and with BIFs.
            This call is only allowed when tracing.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">set_tcw</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Takes one unsigned integer argument, sets the value of
            the node's trace control word to the value of the argument,
            and returns the previous value. The same is done by
            <fo:inline font-family="monospace">erlang:system_flag(trace_control_word, Value)</fo:inline>.
            It is only allowed to use <fo:inline font-family="monospace">set_tcw</fo:inline> in the
            <fo:inline font-family="monospace">MatchBody</fo:inline> part when tracing.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">silent</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Takes one argument. If the argument is <fo:inline font-family="monospace">true</fo:inline>,
            the call trace message mode for the current process is set to
            silent for this call and all later calls, that is, call trace
            messages are inhibited even if
            <fo:inline font-family="monospace">{message, true}</fo:inline> is called in the
            <fo:inline font-family="monospace">MatchBody</fo:inline> part for a traced function.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This mode can also be activated with flag
            <fo:inline font-family="monospace">silent</fo:inline> to
            <fo:inline font-family="monospace">erlang:trace/3</fo:inline>.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the argument is <fo:inline font-family="monospace">false</fo:inline>, the call trace
            message mode for the current process is set to normal
            (non-silent) for this call and all later calls.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the argument is not <fo:inline font-family="monospace">true</fo:inline> or
            <fo:inline font-family="monospace">false</fo:inline>, the call trace message mode is
            unaffected.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All "function calls" must be tuples, even if they take no arguments.
        The value of <fo:inline font-family="monospace">self</fo:inline> is the atom()
        <fo:inline font-family="monospace">self</fo:inline>, but the value of <fo:inline font-family="monospace">{self}</fo:inline> is
        the pid() of the current process.</fo:block>
    </fo:block>
  <fo:block id="idp4005120" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.3 
      Match target</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each execution of a match specification is done against
      a match target term. The format and content of the target term
      depends on the context in which the match is done. The match
      target for ETS is always a full table tuple. The match target
      for call trace is always a list of all function arguments. The
      match target for event trace depends on the event type, see
      table below.</fo:block>
      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Context</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Type</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Match target</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Description</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">ETS</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"/></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">{Key, Value1, Value2, ...}</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">A table object</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Trace</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">call</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">[Arg1, Arg2, ...]</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Function arguments</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Trace</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">send</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">[Receiver, Message]</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Receiving process/port and message term</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Trace</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">'receive'</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">[Node, Sender, Message]</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Sending node, process/port and message term</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        4.1:
         
        Match target depending on context</fo:block>
  <fo:block id="idp4025376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.4 
      Variables and Literals</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Variables take the form <fo:inline font-family="monospace">'$&lt;number&gt;'</fo:inline>, where
      <fo:inline font-family="monospace">&lt;number&gt;</fo:inline> is an integer between 0 and
      100,000,000 (1e+8). The behavior if the number is outside these limits
      is <fo:inline font-weight="bold">undefined</fo:inline>. In the <fo:inline font-family="monospace">MatchHead</fo:inline> part, the
      special variable <fo:inline font-family="monospace">'_'</fo:inline> matches anything, and never gets
      bound (like <fo:inline font-family="monospace">_</fo:inline> in Erlang).</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the <fo:inline font-family="monospace">MatchCondition/MatchBody</fo:inline> parts,
          no unbound variables are allowed, so <fo:inline font-family="monospace">'_'</fo:inline> is
          interpreted as itself (an atom). Variables can only be bound in the
          <fo:inline font-family="monospace">MatchHead</fo:inline> part.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the <fo:inline font-family="monospace">MatchBody</fo:inline> and
          <fo:inline font-family="monospace">MatchCondition</fo:inline> parts, only variables bound
          previously can be used.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As a special case, the following apply in the
          <fo:inline font-family="monospace">MatchCondition/MatchBody</fo:inline> parts:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The variable <fo:inline font-family="monospace">'$_'</fo:inline> expands to the whole
            <fo:inline font-style="italic">match target</fo:inline> term.
            </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The variable <fo:inline font-family="monospace">'$$'</fo:inline> expands to a list of the
              values of all bound variables in order (that is,
              <fo:inline font-family="monospace">['$1','$2', ...]</fo:inline>).</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the <fo:inline font-family="monospace">MatchHead</fo:inline> part, all literals (except the
      variables above) are interpreted "as is".</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the <fo:inline font-family="monospace">MatchCondition/MatchBody</fo:inline> parts, the
      interpretation is in some ways different. Literals in these parts
      can either be written "as is", which works for all literals except
      tuples, or by using the special form <fo:inline font-family="monospace">{const, T}</fo:inline>,
      where <fo:inline font-family="monospace">T</fo:inline> is any Erlang term.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For tuple literals in the match specification, double tuple parentheses
      can also be used, that is, construct them as a tuple of
      arity one containing a single tuple, which is the one to be
      constructed. The "double tuple parenthesis" syntax is useful to
      construct tuples from already bound variables, like in
      <fo:inline font-family="monospace">{{'$1', [a,b,'$2']}}</fo:inline>. Examples:</fo:block>

    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Expression</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Variable Bindings</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Result</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">{{'$1','$2'}}</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">'$1' = a, '$2' = b</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">{a,b}</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">{const, {'$1', '$2'}}</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Irrelevant</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">{'$1', '$2'}</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">a</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Irrelevant</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">a</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">'$1'</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">'$1' = []</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">[]</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">['$1']</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">'$1' = []</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">[[]]</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">[{{a}}]</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Irrelevant</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">[{a}]</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">42</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Irrelevant</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">42</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">"hello"</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Irrelevant</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">"hello"</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">$1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Irrelevant</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">49 (the ASCII value for
          character '1')</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        4.2:
         
        Literals in MatchCondition/MatchBody Parts of a Match
        Specification</fo:block>
  <fo:block id="idp4072704" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.5 
      Execution of the Match</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The execution of the match expression, when the runtime system
      decides whether a trace message is to be sent, is as follows:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each tuple in the <fo:inline font-family="monospace">MatchExpression</fo:inline> list and while
      no match has succeeded:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Match the <fo:inline font-family="monospace">MatchHead</fo:inline> part against the match target
          term, binding the <fo:inline font-family="monospace">'$&lt;number&gt;'</fo:inline> variables
          (much like in <fo:inline font-family="monospace">ets:match/2</fo:inline>). If the
          <fo:inline font-family="monospace">MatchHead</fo:inline> part cannot match the arguments, the
          match fails.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluate each <fo:inline font-family="monospace">MatchCondition</fo:inline> (where only
          <fo:inline font-family="monospace">'$&lt;number&gt;'</fo:inline> variables previously bound in the
          <fo:inline font-family="monospace">MatchHead</fo:inline> part can occur) and expect it to return
          the atom <fo:inline font-family="monospace">true</fo:inline>. When a condition does not evaluate
          to <fo:inline font-family="monospace">true</fo:inline>, the match fails. If any BIF call
          generates an exception, the match also fails.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two cases can occur:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the match specification is executing when tracing:</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluate each <fo:inline font-family="monospace">ActionTerm</fo:inline> in the same way as
              the <fo:inline font-family="monospace">MatchConditions</fo:inline>, but ignore the return
              values. Regardless of what happens in this part, the match has
              succeeded.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the match specification is executed when selecting objects
              from an ETS table:</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluate the expressions in order and return the value of
              the last expression (typically there is only one expression
              in this context).</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1448032" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.6 
      Differences between Match Specifications in ETS and Tracing</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ETS match specifications produce a return value.
        Usually the <fo:inline font-family="monospace">MatchBody</fo:inline> contains one single
        <fo:inline font-family="monospace">ConditionExpression</fo:inline> that defines the return value
        without any side effects. Calls with side effects are not allowed in
        the ETS context.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When tracing there is no return value to produce, the
      match specification either matches or does not. The effect when the
      expression matches is a trace message rather than a returned
      term. The <fo:inline font-family="monospace">ActionTerm</fo:inline>s are executed as in an imperative
      language, that is, for their side effects. Functions with side effects
      are also allowed when tracing.</fo:block>
  <fo:block id="idp377360" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.7 
      Tracing Examples</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Match an argument list of three, where the first and third arguments
      are equal:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{['$1', '_', '$1'],
  [],
  []}]
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Match an argument list of three, where the second argument is
      a number &gt; 3:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{['_', '$1', '_'],
  [{ '&gt;', '$1', 3}],
  []}]
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Match an argument list of three, where the third argument is
      either a tuple containing argument one and two, <fo:inline font-weight="bold">or</fo:inline> a list
      beginning with argument one and two (that is,
      <fo:inline font-family="monospace">[a,b,[a,b,c]]</fo:inline> or <fo:inline font-family="monospace">[a,b,{a,b}]</fo:inline>):</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{['$1', '$2', '$3'],
  [{'orelse', 
      {'=:=', '$3', {{'$1','$2'}}},
      {'and', 
        {'=:=', '$1', {hd, '$3'}},
        {'=:=', '$2', {hd, {tl, '$3'}}}}}],
  []}]
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The above problem can also be solved as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{['$1', '$2', {'$1', '$2}], [], []},
 {['$1', '$2', ['$1', '$2' | '_']], [], []}]
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Match two arguments, where the first is a tuple beginning with
      a list that in turn begins with the second argument times
      two (that is, <fo:inline font-family="monospace">[{[4,x],y},2]</fo:inline> or <fo:inline font-family="monospace">[{[8], y, z},4])</fo:inline>:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{['$1', '$2'],[{'=:=', {'*', 2, '$2'}, {hd, {element, 1, '$1'}}}],
  []}]
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Match three arguments. When all three are equal and are
      numbers, append the process dump to the trace message, otherwise
      let the trace message be "as is", but set the sequential trace
      token label to 4711:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{['$1', '$1', '$1'],
  [{is_number, '$1'}],
  [{message, {process_dump}}]},
 {'_', [], [{set_seq_token, label, 4711}]}]
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As can be noted above, the parameter list can be matched against a
      single <fo:inline font-family="monospace">MatchVariable</fo:inline> or an <fo:inline font-family="monospace">'_'</fo:inline>.
      To replace the whole parameter list with a single variable is a special
      case. In all other cases the <fo:inline font-family="monospace">MatchHead</fo:inline> must be a
      <fo:inline font-weight="bold">proper</fo:inline> list.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generate a trace message only if the trace control word is set to 1:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{'_',
  [{'==',{get_tcw},{const, 1}}],
  []}]
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generate a trace message only if there is a <fo:inline font-family="monospace">seq_trace</fo:inline> token:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{'_',
  [{'==',{is_seq_trace},{const, 1}}],
  []}]
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Remove the <fo:inline font-family="monospace">'silent'</fo:inline> trace flag when the first argument is
      <fo:inline font-family="monospace">'verbose'</fo:inline>, and add it when it is <fo:inline font-family="monospace">'silent':</fo:inline></fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{'$1',
  [{'==',{hd, '$1'},verbose}],
  [{trace, [silent],[]}]},
 {'$1',
  [{'==',{hd, '$1'},silent}],
  [{trace, [],[silent]}]}]
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Add a <fo:inline font-family="monospace">return_trace</fo:inline> message if the function is of arity 3:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{'$1',
  [{'==',{length, '$1'},3}],
  [{return_trace}]},
 {'_',[],[]}]
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generate a trace message only if the function is of arity 3 and the
      first argument is <fo:inline font-family="monospace">'trace'</fo:inline>:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{['trace','$2','$3'],
  [],
  []},
 {'_',[],[]}]
    </fo:block>
  <fo:block id="idp4087392" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.8 
      ETS Examples</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Match all objects in an ETS table, where the first element is
      the atom <fo:inline font-family="monospace">'strider'</fo:inline> and the tuple arity is 3, and return the whole
      object:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{{strider,'_','_'},
  [],
  ['$_']}]
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Match all objects in an ETS table with arity &gt; 1 and the first
      element is 'gandalf', and return element 2:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{'$1',
  [{'==', gandalf, {element, 1, '$1'}},{'&gt;=',{size, '$1'},2}],
  [{element,2,'$1'}]}]
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example, if the first element had been the key, it is
      much more efficient to match that key in the <fo:inline font-family="monospace">MatchHead</fo:inline>
      part than in the <fo:inline font-family="monospace">MatchConditions</fo:inline> part.
      The search space of the tables is restricted with regards to the
      <fo:inline font-family="monospace">MatchHead</fo:inline> so
      that only objects with the matching key are searched.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Match tuples of three elements, where the second element is either
      <fo:inline font-family="monospace">'merry'</fo:inline> or <fo:inline font-family="monospace">'pippin'</fo:inline>, and return the whole objects:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{{'_',merry,'_'},
  [],
  ['$_']},
 {{'_',pippin,'_'},
  [],
  ['$_']}]
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Function <fo:inline font-style="italic"><fo:inline font-family="monospace">ets:test_ms/2&gt;</fo:inline></fo:inline>
      can be useful for testing complicated ETS matches.</fo:block>
  <fo:block id="idp4098112" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.5  How to Interpret the Erlang Crash Dumps</fo:marker>1.5  How to Interpret the Erlang Crash Dumps</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the <fo:inline font-family="monospace">erl_crash.dump</fo:inline> file
    generated upon abnormal exit of the Erlang runtime system.</fo:block><fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang crash dump had a major facelift in Erlang/OTP R9C. The
      information in this section is therefore not directly applicable for
      older dumps. However, if you use <fo:inline font-style="italic">
      <fo:inline font-family="monospace">crashdump_viewer(3)</fo:inline></fo:inline> on older dumps,
      the crash dumps are translated into a format similar to this.</fo:block>
  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The system writes the crash dump in the current directory of
    the emulator or in the file pointed out by the environment variable
    (whatever that means on the current operating system)
    <fo:inline font-family="monospace">ERL_CRASH_DUMP</fo:inline>. For a crash dump to be written, a
    writable file system must be mounted.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Crash dumps are written mainly for one of two reasons: either the
    built-in function <fo:inline font-family="monospace">erlang:halt/1</fo:inline> is called explicitly
    with a string argument from running Erlang code, or the runtime
    system has detected an error that cannot be handled. The most
    usual reason that the system cannot handle the error is that the
    cause is external limitations, such as running out of memory. A
    crash dump caused by an internal error can be caused by the system
    reaching limits in the emulator itself (like the number of atoms
    in the system, or too many simultaneous ETS tables). Usually the
    emulator or the operating system can be reconfigured to avoid the
    crash, which is why interpreting the crash dump correctly is
    important.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On systems that support OS signals, it is also possible to stop
    the runtime system and generate a crash dump by sending the <fo:inline font-family="monospace">SIGUSR1</fo:inline>
    signal.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang crash dump is a readable text file, but it can be difficult
    to read. Using the Crashdump Viewer tool in the
    <fo:inline font-family="monospace">Observer</fo:inline> application simplifies the task. This is a
    wx-widget-based tool for browsing Erlang crash dumps.</fo:block><fo:block id="idp4108560" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.1 
      General Information</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first part of the crash dump shows the following:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The creation time for the dump</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A slogan indicating the reason for the dump</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The system version of the node from which the dump originates</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The compile time of the emulator running the originating node</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The number of atoms in the atom table</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The runtime system thread that caused the crash dump</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block id="idp4112400" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Reasons for Crash Dumps (Slogan)</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reason for the dump is shown in the beginning of the file as:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Slogan: &lt;reason&gt;</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the system is halted by the BIF
        <fo:inline font-family="monospace">erlang:halt/1</fo:inline>, the slogan is the string parameter
        passed to the BIF, otherwise it is a description generated by
        the emulator or the (Erlang) kernel. Normally the message
        is enough to understand the problem, but
        some messages are described here. Notice that the
        suggested reasons for the crash are <fo:inline font-weight="bold">only suggestions</fo:inline>.
        The exact reasons for the errors can vary
        depending on the local applications and the underlying
        operating system.</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">&lt;A&gt;: Cannot allocate &lt;N&gt; bytes of memory (of type
           "&lt;T&gt;")</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The system has run out of memory. &lt;A&gt; is the allocator that
            failed to allocate memory, &lt;N&gt; is the number of bytes that
            &lt;A&gt; tried to allocate, and &lt;T&gt; is the memory block
            type that the memory was needed for. The most common case is
            that a process stores huge amounts of data. In this case
            &lt;T&gt; is most often <fo:inline font-family="monospace">heap</fo:inline>,
            <fo:inline font-family="monospace">old_heap</fo:inline>, <fo:inline font-family="monospace">heap_frag</fo:inline>, or
            <fo:inline font-family="monospace">binary</fo:inline>. For more information on allocators, see
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erts_alloc(3)</fo:inline></fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">&lt;A&gt;: Cannot reallocate &lt;N&gt; bytes of memory (of
          type "&lt;T&gt;")</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as above except that memory was reallocated
            instead of allocated when the system ran out of memory.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Unexpected op code &lt;N&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Error in compiled code, <fo:inline font-family="monospace">beam</fo:inline> file damaged, or
            error in the compiler.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Module &lt;Name&gt; undefined <fo:inline font-family="monospace">|</fo:inline> Function
          &lt;Name&gt; undefined <fo:inline font-family="monospace">|</fo:inline> No function
          &lt;Name&gt;:&lt;Name&gt;/1 <fo:inline font-family="monospace">|</fo:inline> No function
          &lt;Name&gt;:start/2</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Kernel/STDLIB applications are
            damaged or the start script is damaged.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Driver_select called with too large file descriptor
          <fo:inline font-family="monospace">N</fo:inline></fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of file descriptors for sockets
            exceeds 1024 (Unix only). The limit on file descriptors in
            some Unix flavors can be set to over 1024, but only 1024
            sockets/pipes can be used simultaneously by Erlang (because of
            limitations in the Unix <fo:inline font-family="monospace">select</fo:inline> call). The number
            of open regular files is not affected by this.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Received SIGUSR1</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sending the <fo:inline font-family="monospace">SIGUSR1</fo:inline> signal to an Erlang machine (Unix only)
            forces a crash dump. This slogan reflects that the Erlang machine
            crash-dumped because of receiving that signal.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Kernel pid terminated (&lt;Who&gt;) (&lt;Exit
          reason&gt;)</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The kernel supervisor has detected a failure, usually that the
            <fo:inline font-family="monospace">application_controller</fo:inline> has shut down
            (<fo:inline font-family="monospace">Who</fo:inline> = <fo:inline font-family="monospace">application_controller</fo:inline>,
            <fo:inline font-family="monospace">Why</fo:inline> = <fo:inline font-family="monospace">shutdown</fo:inline>).
            The application controller
            can have shut down for many reasons, the most usual
            is that the node name of the distributed Erlang node is
            already in use. A complete supervisor tree "crash" (that is,
            the top supervisors have exited) gives about the same
            result. This message comes from the Erlang code and not from
            the virtual machine itself. It is always because of some
            failure in an application, either within OTP or a
            "user-written" one. Looking at the error log for your
            application is probably the first step to take.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Init terminating in do_boot ()</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The primitive Erlang boot sequence was terminated, most probably
            because the boot script has errors or cannot be read. This is
            usually a configuration error; the system can have been started
            with a faulty <fo:inline font-family="monospace">-boot</fo:inline> parameter or with a boot
            script from the wrong OTP version.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Could not start kernel pid (&lt;Who&gt;) ()</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One of the kernel processes could not start. This is probably
            because of faulty arguments (like errors in a
            <fo:inline font-family="monospace">-config</fo:inline> argument)
            or faulty configuration files. Check that all files are in
            their correct location and that the configuration files (if
            any) are not damaged. Usually messages are also
            written to the controlling terminal and/or the error log
            explaining what is wrong.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other errors than these can occur, as the
        <fo:inline font-family="monospace">erlang:halt/1</fo:inline> BIF can generate any message. If the
        message is not generated by the BIF and does not occur in the
        list above, it can be because of an error in the emulator. There
        can however be unusual messages, not mentioned here, which
        are still connected to an application failure. There is much
        more information available, so a thorough reading of the
        crash dump can reveal the crash reason. The size of processes,
        the number of ETS tables, and the Erlang data on each process
        stack can be useful to find the problem.</fo:block>
    

    <fo:block id="idp4140288" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Number of Atoms</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of atoms in the system at the time of the crash is
        shown as <fo:inline font-weight="bold">Atoms: &lt;number&gt;</fo:inline>. Some ten thousands atoms is
        perfectly normal, but more can indicate that the BIF
        <fo:inline font-family="monospace">erlang:list_to_atom/1</fo:inline> is used to generate many
        <fo:inline font-weight="bold">different</fo:inline> atoms dynamically, which is never a good idea.</fo:block>
    
  <fo:block id="idp4143888" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.2 
      Scheduler Information</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Under the tag <fo:inline font-weight="bold">=scheduler</fo:inline> is shown information about the current
      state and statistics of the schedulers in the runtime system. On
      operating systems that allow suspension of other threads, the
      data within this section reflects what the runtime system looks like
      when a crash occurs.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following fields can exist for a process:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">=scheduler:id</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Heading. States the scheduler identifier.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Scheduler Sleep Info Flags</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If empty, the scheduler was doing some work.
          If not empty, the scheduler is either in some state of sleep,
          or suspended. This entry is only present in an SMP-enabled
          emulator.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Scheduler Sleep Info Aux Work</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If not empty, a scheduler internal auxiliary work is scheduled
          to be done.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Current Port</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The port identifier of the port that is currently
          executed by the scheduler.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Current Process</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process identifier of the process that is currently
          executed by the scheduler. If there is such a process, this entry is
          followed by the <fo:inline font-weight="bold">State</fo:inline>, <fo:inline font-weight="bold">Internal State</fo:inline>,
          <fo:inline font-weight="bold">Program Counter</fo:inline>, and <fo:inline font-weight="bold">CP</fo:inline> of that same process.
          The entries are described in section
          <fo:inline font-style="italic">Process Information</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this is a snapshot of what the entries are exactly when
          the crash dump is starting to be generated. Therefore they are most
          likely different (and more telling) than the entries for the same
          processes found in the <fo:inline font-weight="bold">=proc</fo:inline> section. If there is no
          currently running process, only the <fo:inline font-weight="bold">Current Process</fo:inline> entry is
          shown.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Current Process Limited Stack Trace</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This entry is shown only if there is a current process. It is
          similar to <fo:inline font-style="italic">
          <fo:inline font-weight="bold">=proc_stack</fo:inline></fo:inline>, except that only the function frames
          are shown (that is, the stack variables are omitted).
          Also, only the top and bottom part of the stack are shown. If the
          stack is small (&lt; 512 slots), the entire stack is shown. Otherwise
          the entry <fo:inline font-weight="bold">skipping ## slots</fo:inline> is shown, where <fo:inline font-family="monospace">##</fo:inline>
          is replaced by the number of slots that has been skipped.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Run Queue</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shows statistics about how many processes and ports
          of different priorities are scheduled on this scheduler.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">** crashed **</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This entry is normally not shown. It signifies that getting the rest
          of the information about this scheduler failed for some reason.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp4166480" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.3 
      Memory Information</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Under the tag <fo:inline font-weight="bold">=memory</fo:inline> is shown information similar
      to what can be obtainted on a living node with
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erlang:memory()</fo:inline></fo:inline>.</fo:block>
  <fo:block id="idp4169936" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.4 
      Internal Table Information</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Under the tags <fo:inline font-weight="bold">=hash_table:&lt;table_name&gt;</fo:inline> and
      <fo:inline font-weight="bold">=index_table:&lt;table_name&gt;</fo:inline> is shown internal
      tables. These are mostly of interest for runtime system developers.</fo:block>
  <fo:block id="idp4172864" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.5 
      Allocated Areas</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Under the tag <fo:inline font-weight="bold">=allocated_areas</fo:inline> is shown information
      similar to what can be obtained on a living node with
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erlang:system_info(allocated_areas)</fo:inline></fo:inline>.</fo:block>
  <fo:block id="idp4176336" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.6 
      Allocator</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Under the tag <fo:inline font-weight="bold">=allocator:&lt;A&gt;</fo:inline> is shown
      various information about allocator &lt;A&gt;. The information
      is similar to what can be obtained on a living node with
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erlang:system_info({allocator, &lt;A&gt;})</fo:inline></fo:inline>.
      For more information, see also
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erts_alloc(3)</fo:inline></fo:inline>.</fo:block>
  <fo:block id="idp4180736" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.7 
      Process Information</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang crashdump contains a listing of each living Erlang
      process in the system. The following fields can exist for a process:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">=proc:&lt;pid&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Heading. States the process identifier.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">State</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The state of the process. This can be one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Scheduled</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The process was scheduled to run
            but is currently not running ("in the run queue").</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Waiting</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The process was waiting for
            something (in <fo:inline font-family="monospace">receive</fo:inline>).</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Running</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The process was currently running.
            If the BIF <fo:inline font-family="monospace">erlang:halt/1</fo:inline> was called, this was
            the process calling it.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Exiting</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The process was on its way to exit.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Garbing</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">This is bad luck, the process was
            garbage collecting when the crash dump was written. The rest
            of the information for this process is limited.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Suspended</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The process is suspended, either
            by the BIF <fo:inline font-family="monospace">erlang:suspend_process/1</fo:inline> or because
            it tries to write to a busy port.</fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Registered name</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The registered name of the process, if any.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Spawned as</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The entry point of the process, that is, what function was
          referenced in the <fo:inline font-family="monospace">spawn</fo:inline> or
          <fo:inline font-family="monospace">spawn_link</fo:inline> call that
          started the process.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Last scheduled in for | Current call</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current function of the process. These fields do not
          always exist.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Spawned by</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The parent of the process, that is, the process that executed
          <fo:inline font-family="monospace">spawn</fo:inline> or <fo:inline font-family="monospace">spawn_link</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Started</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The date and time when the process was started.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Message queue length</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of messages in the process' message queue.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Number of heap fragments</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of allocated heap fragments.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Heap fragment data</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Size of fragmented heap data. This is data either created by
          messages sent to the process or by the Erlang BIFs. This
          amount depends on so many things that this field is utterly
          uninteresting.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Link list</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Process IDs of processes linked to this one. Can also contain
          ports. If process monitoring is used, this field also tells in
          which direction the monitoring is in effect. That is, a link
          "to" a process tells you that the "current" process was
          monitoring the other, and a link "from" a process tells you
         that the other process was monitoring the current one.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Reductions</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of reductions consumed by the process.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Stack+heap</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The size of the stack and heap (they share memory segment).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">OldHeap</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The size of the "old heap". The Erlang virtual machine uses
          generational garbage collection with two generations. There is
          one heap for new data items and one for the data that has
          survived two garbage collections. The assumption (which is
          almost always correct) is that data surviving two garbage
          collections can be "tenured" to a heap more seldom garbage
          collected, as they will live for a long period. This is a
          usual technique in virtual machines. The sum of the
          heaps and stack together constitute most of the
          allocated memory of the process.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Heap unused, OldHeap unused</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The amount of unused memory on each heap. This information is
          usually useless.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Memory</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The total memory used by this process. This includes call stack,
          heap, and internal structures. Same as
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:process_info(Pid,memory)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Program counter</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current instruction pointer. This is only of interest for
          runtime system developers. The function into which the program
          counter points is the current function of the process.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">CP</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The continuation pointer, that is, the return address for the
          current call. Usually useless for other than runtime system
          developers. This can be followed by the function into which
          the CP points, which is the function calling the current
          function.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Arity</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of live argument registers. The argument registers
          if any are live will follow. These can contain the arguments
          of the function if they are not yet moved to the stack.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Internal State</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A more detailed internal representation of the state of
          this process.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also section <fo:inline font-style="italic">Process Data</fo:inline>.</fo:block>
  <fo:block id="idp4227680" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.8 
      Port Information</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section lists the open ports, their owners, any linked
      processes, and the name of their driver or external process.</fo:block>
  <fo:block id="idp4229696" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.9 
      ETS Tables</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section contains information about all the ETS tables in
      the system. The following fields are of interest for each table:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">=ets:&lt;owner&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Heading. States the table owner (a process identifier).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Table</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The identifier for the table. If the table is a
          <fo:inline font-family="monospace">named_table</fo:inline>, this is the name.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Name</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The table name, regardless of if it is a
          <fo:inline font-family="monospace">named_table</fo:inline> or not.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Hash table, Buckets</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the table is a hash table, that is, if it is not an
          <fo:inline font-family="monospace">ordered_set</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Hash table, Chain Length</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the table is a hash table. Contains statistics about the
          table, such as the maximum, minimum, and average chain length.
          Having a maximum much larger than the average, and a standard
          deviation much larger than the expected standard deviation is
          a sign that the hashing of the terms
          behaves badly for some reason.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Ordered set (AVL tree), Elements</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the table is an <fo:inline font-family="monospace">ordered_set</fo:inline>. (The
          number of elements is the same as the number of objects in the
          table.)</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Fixed</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the table is fixed using
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">ets:safe_fixtable/2</fo:inline></fo:inline> or some internal mechanism.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Objects</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of objects in the table.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Words</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of words (usually 4 bytes/word) allocated to data
          in the table.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Type</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The table type, that is, <fo:inline font-family="monospace">set</fo:inline>, <fo:inline font-family="monospace">bag</fo:inline>,
          <fo:inline font-family="monospace">dublicate_bag</fo:inline>, or <fo:inline font-family="monospace">ordered_set</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Compressed</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the table was compressed.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Protection</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The protection of the table.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Write Concurrency</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">write_concurrency</fo:inline> was enabled for the table.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Read Concurrency</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">read_concurrency</fo:inline> was enabled for the table.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp4259088" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.10 
      Timers</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section contains information about all the timers started
      with the BIFs <fo:inline font-family="monospace">erlang:start_timer/3</fo:inline> and
      <fo:inline font-family="monospace">erlang:send_after/3</fo:inline>. The following fields exist
      for each timer:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">=timer:&lt;owner&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Heading. States the timer owner (a process identifier),
          that is, the process to receive the message when the timer
          expires.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Message</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The message to be sent.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Time left</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Number of milliseconds left until the message would have been
          sent.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp4267040" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.11 
      Distribution Information</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the Erlang node was alive, that is, set up for communicating
      with other nodes, this section lists the connections that were
      active. The following fields can exist:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">=node:&lt;node_name&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node name.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">no_distribution</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the node was not distributed.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">=visible_node:&lt;channel&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Heading for a visible node, that is, an alive node with a
          connection to the node that crashed. States the channel number
          for the node.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">=hidden_node:&lt;channel&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Heading for a hidden node. A hidden node is the same as a
          visible node, except that it is started with the <fo:inline font-family="monospace">"-hidden"</fo:inline>
          flag. States the channel number for the node.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">=not_connected:&lt;channel&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Heading for a node that was connected to the crashed
          node earlier. References (that is, process or port identifiers)
          to the not connected node existed at the time of the crash.
          States the channel number for the node.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Name</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name of the remote node.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Controller</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The port controlling communication with the remote node.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Creation</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An integer (1-3) that together with the node name identifies
          a specific instance of the node.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Remote monitoring: &lt;local_proc&gt;  &lt;remote_proc&gt;</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The local process was monitoring the remote process at the
          time of the crash.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Remotely monitored by: &lt;local_proc&gt;
        &lt;remote_proc&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The remote process was monitoring the local process at the
          time of the crash.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Remote link: &lt;local_proc&gt; &lt;remote_proc&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A link existed between the local process and the remote
          process at the time of the crash.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp4287360" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.12 
      Loaded Module Information</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section contains information about all loaded modules.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First, the memory use by the loaded code is summarized:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Current code</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Code that is the current latest version of the modules.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Old code</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Code where there exists a newer version in the
          system, but the old version is not yet purged.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The memory use is in bytes.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then, all loaded modules are listed. The following fields exist:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">=mod:&lt;module_name&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Heading. States the module name.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Current size</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Memory use for the loaded code, in bytes.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Old size</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Memory use for the old code, if any.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Current attributes</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Module attributes for the current code. This field is decoded
          when looked at by the Crashdump Viewer tool.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Old attributes</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Module attributes for the old code, if any. This field is
          decoded when looked at by the Crashdump Viewer tool.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Current compilation info</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compilation information (options) for the current code. This
          field is decoded when looked at by the Crashdump Viewer tool.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Old compilation info</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compilation information (options) for the old code, if
          any. This field is decoded when looked at by the Crashdump
          Viewer tool.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp4305552" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.13 
      Fun Information</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section lists all funs. The following fields exist for each fun:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">=fun</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Heading.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Module</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name of the module where the fun was defined.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Uniq, Index</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Identifiers.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Address</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The address of the fun's code.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Native_address</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The address of the fun's code when HiPE is enabled.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Refc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of references to the fun.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp4316880" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.14 
      Process Data</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each process there is at least one <fo:inline font-weight="bold">=proc_stack</fo:inline>
      and one <fo:inline font-weight="bold">=proc_heap</fo:inline> tag, followed by the raw memory
      information for the stack and heap of the process.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each process there is also a <fo:inline font-weight="bold">=proc_messages</fo:inline>
      tag if the process message queue is non-empty, and a
      <fo:inline font-weight="bold">=proc_dictionary</fo:inline> tag if the process dictionary (the
      <fo:inline font-family="monospace">put/2</fo:inline> and <fo:inline font-family="monospace">get/1</fo:inline> thing) is
      non-empty.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The raw memory information can be decoded by the Crashdump
      Viewer tool. You can then see the stack dump, the
      message queue (if any), and the dictionary (if any).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The stack dump is a dump of the Erlang process stack. Most of
      the live data (that is, variables currently in use) are placed on
      the stack; thus this can be interesting. One has to
      "guess" what is what, but as the information is symbolic,
      thorough reading of this information can be useful. As an
      example, we can find the state variable of the Erlang primitive
      loader online <fo:inline font-family="monospace">(5)</fo:inline> and <fo:inline font-family="monospace">(6)</fo:inline>
      in the following example:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(1)  3cac44   Return addr 0x13BF58 (&lt;terminate process normally&gt;)
(2)  y(0)     ["/view/siri_r10_dev/clearcase/otp/erts/lib/kernel/ebin",
(3)            "/view/siri_r10_dev/clearcase/otp/erts/lib/stdlib/ebin"]
(4)  y(1)     &lt;0.1.0&gt;
(5)  y(2)     {state,[],none,#Fun&lt;erl_prim_loader.6.7085890&gt;,undefined,#Fun&lt;erl_prim_loader.7.9000327&gt;,
(6)            #Fun&lt;erl_prim_loader.8.116480692&gt;,#Port&lt;0.2&gt;,infinity,#Fun&lt;erl_prim_loader.9.10708760&gt;}
(7)  y(3)     infinity    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When interpreting the data for a process, it is helpful to know
      that anonymous function objects (funs) are given the following:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A name constructed from the name of the function in which they are
        created
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A number (starting with 0) indicating the number of that fun within
        that function
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp4328000" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.15 
      Atoms</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section presents all the atoms in the system. This is only
      of interest if one suspects that dynamic generation of atoms can
      be a problem, otherwise this section can be ignored.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the last created atom is shown first.</fo:block>
  <fo:block id="idp4330000" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.16 
      Disclaimer</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The format of the crash dump evolves between OTP releases.
      Some information described here may not apply to your
      version. A description like this will never be complete; it is meant as
      an explanation of the crash dump in general and as a help
      when trying to find application errors, not as a complete
      specification.</fo:block>
  <fo:block id="idp4335600" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.6  How to Implement an Alternative Carrier for the Erlang Distribution
    </fo:marker>1.6  How to Implement an Alternative Carrier for the Erlang Distribution
    </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes how to implement an alternative carrier
    protocol for the Erlang distribution. The distribution is normally
    carried by TCP/IP. Here is explained a method for replacing TCP/IP
    with another protocol.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The section is a step-by-step explanation of the
    <fo:inline font-family="monospace">uds_dist</fo:inline> example application (in the
    Kernel application <fo:inline font-family="monospace">examples</fo:inline> directory). The
    <fo:inline font-family="monospace">uds_dist</fo:inline> application implements distribution over Unix
    domain sockets and is written for the Sun Solaris 2 operating environment.
    The mechanisms are however general and apply to any operating system Erlang
    runs on. The reason the C code is not made portable, is simply
    readability.</fo:block><fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section was written a long time ago. Most of it is still
      valid, but some things have changed since then.
      Most notably is the driver interface. Some updates have been made
      to the documentation of the driver presented here,
      but more can be done and is planned for the future.
      The reader is encouraged to read the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_driver</fo:inline></fo:inline> and
      <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_entry</fo:inline></fo:inline>
      documentation also.</fo:block>
  </fo:block><fo:block id="idp4345232" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To implement a new carrier for the Erlang distribution, the main
      steps are as follows.</fo:block>

    <fo:block id="idp4346496" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Writing an Erlang Driver</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First, the protocol must be available to the Erlang machine, which
        involves writing an Erlang driver. A port program cannot be used,
        an Erlang driver is required. Erlang drivers can be:</fo:block>

      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Statically linked to the emulator, which can be an alternative
            when using the open source distribution of Erlang, or</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dynamically loaded into the Erlang machines address space,
            which is the only alternative if a precompiled version of 
            Erlang is to be used</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writing an Erlang driver is not easy. The driver is written
        as some callback functions called by the Erlang emulator when
        data is sent to the driver, or the driver has any data available on
        a file descriptor. As the driver callback routines execute in the main
        thread of the Erlang machine, the callback functions can perform
        no blocking activity whatsoever. The callbacks are only to set up
        file descriptors for waiting and/or read/write available data. All
        I/O must be non-blocking. Driver callbacks are however executed
        in sequence, why a global state can safely be updated within the
        routines.</fo:block>
    

    <fo:block id="idp4351920" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Writing an Erlang Interface for the Driver</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the driver is implemented, one would preferably write an
        Erlang interface for the driver to be able to test the
        functionality of the driver separately. This interface can then
        be used by the distribution module, which will cover the details of
        the protocol from the <fo:inline font-family="monospace">net_kernel</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The easiest path
        is to mimic the <fo:inline font-family="monospace">inet</fo:inline> and <fo:inline font-family="monospace">inet_tcp</fo:inline>
        interfaces, but not much
        functionality in those modules needs to be implemented. In the
        example application, only a few of the usual interfaces are
        implemented, and they are much simplified.</fo:block>
    

    <fo:block id="idp4355616" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Writing a Distribution Module</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the protocol is available to Erlang through a driver and an
        Erlang interface module, a distribution module can be written.
        The distribution module is a module with well-defined callbacks,
        much like a <fo:inline font-family="monospace">gen_server</fo:inline> (there is no compiler support
        for checking the callbacks, though). This module implements:</fo:block>

      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The details of finding other nodes (that is, talking to
          <fo:inline font-family="monospace">epmd</fo:inline> or something similar)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Creating a listen port (or similar)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Connecting to other nodes</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Performing the handshakes/cookie verification</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is however a utility module, <fo:inline font-family="monospace">dist_util</fo:inline>, which
        does most of the hard work of handling handshakes, cookies, timers,
        and ticking. Using <fo:inline font-family="monospace">dist_util</fo:inline> makes implementing a
        distribution module much easier and that is done in
        the example application.</fo:block>
    

    <fo:block id="idp4362336" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Creating Boot Scripts</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The last step is to create boot scripts to make the protocol
        implementation available at boot time. The implementation can be
        debugged by starting the distribution when all the system is
        running, but in a real system the distribution is to start very
        early, why a boot script and some command-line parameters are
        necessary.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This step also implies that the Erlang code in the
        interface and distribution modules is written in such a way that
        it can be run in the startup phase. In particular, there can be no
        calls to the <fo:inline font-family="monospace">application</fo:inline> module or to any modules
        not loaded at boot time. That is, only <fo:inline font-family="monospace">Kernel</fo:inline>,
        <fo:inline font-family="monospace">STDLIB</fo:inline>, and the application itself can be used.</fo:block>
    
  <fo:block id="idp4366288" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.2 
      The Driver</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Although Erlang drivers in general can be beyond the scope of this
      section, a brief introduction seems to be in place.</fo:block>

    <fo:block id="idp4367584" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Drivers in General</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang driver is a native code module written in C (or
        assembler), which serves as an interface for some special operating
        system service. This is a general mechanism that is used
        throughout the Erlang emulator for all kinds of I/O. An Erlang
        driver can be dynamically linked (or loaded) to the Erlang
        emulator at runtime by using the <fo:inline font-family="monospace">erl_ddll</fo:inline> Erlang
        module. Some of the drivers in OTP are however statically linked
        to the runtime system, but that is more an optimization than a
        necessity.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver data types and the functions available to the driver
        writer are defined in header file <fo:inline font-family="monospace">erl_driver.h</fo:inline>
        seated in Erlang's include directory. See the
        <fo:inline font-style="italic">erl_driver</fo:inline> documentation
        for details of which functions are available.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When writing a driver to make a communications protocol available
        to Erlang, one should know just about everything worth knowing
        about that particular protocol. All operation must be
        non-blocking and all possible situations are to be accounted for in
        the driver. A non-stable driver will affect and/or crash the
        whole Erlang runtime system.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The emulator calls the driver in the following situations:</fo:block>

      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the driver is loaded. This callback must have a special
            name and inform the emulator of what callbacks are to be used 
            by returning a pointer to a <fo:inline font-family="monospace">ErlDrvEntry</fo:inline> struct,
            which is to be properly filled in (see below).</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a port to the driver is opened (by a
            <fo:inline font-family="monospace">open_port</fo:inline> call from Erlang). This routine is to
            set up internal data structures and return an opaque data entity of
            the type <fo:inline font-family="monospace">ErlDrvData</fo:inline>, which is a data type large
            enough to hold a pointer.
            The pointer returned by this function is the first
            argument to all other callbacks concerning this particular
            port. It is usually called the port handle. The emulator only
            stores the handle and does never try to interpret it, why it can
            be virtually anything (anything not larger than a pointer
            that is) and can point to anything if it is a pointer. Usually
            this pointer refers to a structure holding information about
            the particular port, as it does in the example.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When an Erlang process sends data to the port. The data
            arrives as a buffer of bytes, the interpretation is not defined,
            but is up to the implementor. This callback returns nothing to the
            caller, answers are sent to the caller as messages (using a
            routine called <fo:inline font-family="monospace">driver_output</fo:inline> available to all
            drivers). There is also a way to talk in a synchronous way to
            drivers, described below. There can be an additional callback
            function for handling data that is fragmented (sent in a deep
            io-list). That interface gets the data in a form suitable for
            Unix <fo:inline font-family="monospace">writev</fo:inline> rather than in a single buffer.
            There is no need for a distribution driver to implement such a
            callback, so we will not.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a file descriptor is signaled for input. This callback
            is called when the emulator detects input on a file descriptor
            that the driver has marked for monitoring by using the interface
            <fo:inline font-family="monospace">driver_select</fo:inline>. The mechanism of driver select
            makes it possible to read non-blocking from file descriptors by
            calling <fo:inline font-family="monospace">driver_select</fo:inline> when reading is needed, and
            then do the reading in this callback (when reading is possible).
            The typical scenario is that <fo:inline font-family="monospace">driver_select</fo:inline> is
            called when an Erlang process orders a read operation, and that
            this routine sends the answer when data is available on the file
            descriptor.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a file descriptor is signaled for output. This callback
            is called in a similar way as the previous, but when writing to a
            file descriptor is possible. The usual scenario is that Erlang
            orders writing on a file descriptor and that the driver calls
            <fo:inline font-family="monospace">driver_select</fo:inline>. When the descriptor is ready for
            output, this callback is called and the driver can try to send the
            output. Queuing can be involved in such operations, and there are
            convenient queue routines available to the driver writer to use.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a port is closed, either by an Erlang process or by the
            driver calling one of the <fo:inline font-family="monospace">driver_failure_XXX</fo:inline>
            routines. This routine is to clean up everything connected to one
            particular port. When other callbacks call a
            <fo:inline font-family="monospace">driver_failure_XXX</fo:inline> routine, this routine is
            immediately called. The callback routine issuing the error can
            make no more use of the data structures for the port, as this
            routine surely has freed all associated data and closed all file
            descriptors. If the queue utility available to driver writer is
            used, this routine is however <fo:inline font-weight="bold">not</fo:inline> called until the
            queue is empty.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When an Erlang process calls
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:port_control/3</fo:inline></fo:inline>,
            which is a synchronous interface to drivers. The control interface
            is used to set driver options, change states of ports, and so on.
            This interface is used a lot in the example.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a timer expires. The driver can set timers with the function
            <fo:inline font-family="monospace">driver_set_timer</fo:inline>. When such timers expire, a
            specific callback function is called. No timers are used in
            the example.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the whole driver is unloaded. Every resource allocated
            by the driver is to be freed.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp4392576" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">The Data Structures of the Distribution Driver</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver used for Erlang distribution is to implement a
        reliable, order maintaining, variable length packet-oriented
        protocol. All error correction, resending and such need to be
        implemented in the driver or by the underlying communications
        protocol. If the protocol is stream-oriented (as is the case with
        both TCP/IP and our streamed Unix domain sockets), some mechanism
        for packaging is needed. We will use the simple method of having a
        header of four bytes containing the length of the package in a
        big-endian 32-bit integer. As Unix domain sockets only can be used
        between processes on the same machine, we do not need to
        code the integer in some special endianess, but we will do it anyway
        because in most situation you need to do it. Unix domain
        sockets are reliable and order maintaining, so we do not need to
        implement resends and such in the driver.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We start writing the example Unix domain sockets driver by
        declaring prototypes and filling in a static <fo:inline font-family="monospace">ErlDrvEntry</fo:inline>
        structure:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
( 1) #include &lt;stdio.h&gt;
( 2) #include &lt;stdlib.h&gt;
( 3) #include &lt;string.h&gt;
( 4) #include &lt;unistd.h&gt;
( 5) #include &lt;errno.h&gt;
( 6) #include &lt;sys/types.h&gt;
( 7) #include &lt;sys/stat.h&gt;
( 8) #include &lt;sys/socket.h&gt;
( 9) #include &lt;sys/un.h&gt;
(10) #include &lt;fcntl.h&gt;

(11) #define HAVE_UIO_H
(12) #include "erl_driver.h"

(13) /*
(14) ** Interface routines
(15) */
(16) static ErlDrvData uds_start(ErlDrvPort port, char *buff);
(17) static void uds_stop(ErlDrvData handle);
(18) static void uds_command(ErlDrvData handle, char *buff, int bufflen);
(19) static void uds_input(ErlDrvData handle, ErlDrvEvent event);
(20) static void uds_output(ErlDrvData handle, ErlDrvEvent event);
(21) static void uds_finish(void);
(22) static int uds_control(ErlDrvData handle, unsigned int command, 
(23)                        char* buf, int count, char** res, int res_size);

(24) /* The driver entry */
(25) static ErlDrvEntry uds_driver_entry = {
(26)     NULL,                            /* init, N/A */
(27)     uds_start,                       /* start, called when port is opened */
(28)     uds_stop,                        /* stop, called when port is closed */
(29)     uds_command,                     /* output, called when erlang has sent */
(30)     uds_input,                       /* ready_input, called when input
(31)                                         descriptor ready */
(32)     uds_output,                      /* ready_output, called when output 
(33)                                         descriptor ready */
(34)     "uds_drv",                       /* char *driver_name, the argument 
(35)                                         to open_port */
(36)     uds_finish,                      /* finish, called when unloaded */
(37)     NULL,                            /* void * that is not used (BC) */
(38)     uds_control,                     /* control, port_control callback */
(39)     NULL,                            /* timeout, called on timeouts */
(40)     NULL,                            /* outputv, vector output interface */
(41)     NULL,                            /* ready_async callback */
(42)     NULL,                            /* flush callback */
(43)     NULL,                            /* call callback */
(44)     NULL,                            /* event callback */
(45)     ERL_DRV_EXTENDED_MARKER,         /* Extended driver interface marker */
(46)     ERL_DRV_EXTENDED_MAJOR_VERSION,  /* Major version number */
(47)     ERL_DRV_EXTENDED_MINOR_VERSION,  /* Minor version number */
(48)     ERL_DRV_FLAG_SOFT_BUSY,          /* Driver flags. Soft busy flag is
(49)                                         required for distribution drivers */
(50)     NULL,                            /* Reserved for internal use */
(51)     NULL,                            /* process_exit callback */
(52)     NULL                             /* stop_select callback */
(53) };</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On line 1-10 the OS headers needed for the driver are included.
        As this driver is written for Solaris, we know that the
        header <fo:inline font-family="monospace">uio.h</fo:inline> exists. So the preprocessor variable
        <fo:inline font-family="monospace">HAVE_UIO_H</fo:inline> can be defined before
        <fo:inline font-family="monospace">erl_driver.h</fo:inline> is included on line 12.
        The definition of <fo:inline font-family="monospace">HAVE_UIO_H</fo:inline> will make the
        I/O vectors used in Erlang's driver queues to correspond to the
        operating systems ditto, which is very convenient.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On line 16-23 the different callback functions are declared ("forward
        declarations").</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver structure is similar for statically linked-in
        drivers and dynamically loaded. However, some of the fields
        are to be left empty (that is, initialized to NULL) in the
        different types of drivers. The first field (the <fo:inline font-family="monospace">init</fo:inline>
        function pointer) is always left blank in a dynamically loaded
        driver, see line 26. <fo:inline font-family="monospace">NULL</fo:inline> on line 37
        is always to be there, the field is no longer used and is
        retained for backward compatibility. No timers are used in this
        driver, why no callback for timers is needed. The <fo:inline font-family="monospace">outputv</fo:inline> field
        (line 40) can be used to implement an interface similar to
        Unix <fo:inline font-family="monospace">writev</fo:inline> for output. The Erlang runtime
        system could previously not use <fo:inline font-family="monospace">outputv</fo:inline> for the
        distribution, but it can as from ERTS 5.7.2.
        As this driver was written before ERTS 5.7.2 it does
        not use the <fo:inline font-family="monospace">outputv</fo:inline> callback. Using the <fo:inline font-family="monospace">outputv</fo:inline>
        callback is preferred, as it reduces copying of data. (We
        will however use scatter/gather I/O internally in the driver.)</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from ERTS 5.5.3 the driver interface was extended with
        version control and the possibility to pass capability information.
        Capability flags are present on line 48. As from ERTS 5.7.4 flag
        <fo:inline font-style="italic">
        <fo:inline font-family="monospace">ERL_DRV_FLAG_SOFT_BUSY</fo:inline></fo:inline> is required for drivers that
        are to be used by the distribution. The soft busy flag implies that the
        driver can handle calls to the <fo:inline font-family="monospace">output</fo:inline> and <fo:inline font-family="monospace">outputv</fo:inline>
        callbacks although it has marked itself as busy. This has always been a
        requirement on drivers used by the distribution, but no capability
        information has been available about this previously. For more
        information. see <fo:inline font-style="italic">
        <fo:inline font-family="monospace">erl_driver:set_busy_port()</fo:inline></fo:inline>).</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This driver was written before the runtime system had SMP support.
        The driver will still function in the runtime system with SMP support,
        but performance will suffer from lock contention on the driver lock
        used for the driver. This can be alleviated by reviewing and perhaps
        rewriting the code so that each instance of the driver safely can
        execute in parallel. When instances safely can execute in parallel, it
        is safe to enable instance-specific locking on the driver. This is done
        by passing <fo:inline font-style="italic">
        <fo:inline font-family="monospace">ERL_DRV_FLAG_USE_PORT_LOCKING</fo:inline></fo:inline> as a driver flag. This
        is left as an exercise for the reader.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, the defined callbacks are as follows:</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">uds_start</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Must initiate data for a port. We do not create any sockets
            here, only initialize data structures.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">uds_stop</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called when a port is closed.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">uds_command</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handles messages from Erlang. The
            messages can either be plain data to be sent or more subtle
            instructions to the driver. This function is here mostly for
            data pumping.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">uds_input</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called when there is something to read from a socket.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">uds_output</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called when it is possible to write to a socket.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">uds_finish</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called when the driver is unloaded. A distribution driver will
            never be unloaded, but we include this for completeness. To be
            able to clean up after oneself is always a good thing.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">uds_control</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:port_control/3</fo:inline></fo:inline> callback, which is
            used a lot in this implementation.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ports implemented by this driver operate in two major modes,
        named <fo:inline font-family="monospace">command</fo:inline> and <fo:inline font-family="monospace">data</fo:inline>. In <fo:inline font-family="monospace">command</fo:inline> mode,
        only passive reading and writing (like
        <fo:inline font-family="monospace">gen_tcp:recv</fo:inline>/<fo:inline font-family="monospace">gen_tcp:send</fo:inline>) can be done. The port is in
        this mode during the distribution handshake. When the connection is up,
        the port is switched to <fo:inline font-family="monospace">data</fo:inline> mode and all data is immediately
        read and passed further to the Erlang emulator. In <fo:inline font-family="monospace">data</fo:inline>
        mode, no data arriving to <fo:inline font-family="monospace">uds_command</fo:inline> is interpreted, only
        packaged and sent out on the socket. The <fo:inline font-family="monospace">uds_control</fo:inline> callback
        does the switching between those two modes.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">While <fo:inline font-family="monospace">net_kernel</fo:inline> informs different subsystems
        that the connection is coming up, the port is to accept data to send.
        However, the port should not receive any data, to avoid that data
        arrives from another node before every kernel subsystem is prepared
        to handle it. A third mode, named <fo:inline font-family="monospace">intermediate</fo:inline>, is used for this
        intermediate stage.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An enum is defined for the different types of ports:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
( 1) typedef enum { 
( 2)     portTypeUnknown,      /* An uninitialized port */
( 3)     portTypeListener,     /* A listening port/socket */
( 4)     portTypeAcceptor,     /* An intermediate stage when accepting
( 5)                              on a listen port */
( 6)     portTypeConnector,    /* An intermediate stage when connecting */
( 7)     portTypeCommand,      /* A connected open port in command mode */
( 8)     portTypeIntermediate, /* A connected open port in special
( 9)                              half active mode */
(10)     portTypeData          /* A connected open port in data mode */ 
(11) } PortType;      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The different types are as follows:</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">portTypeUnknown</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type a port has when it is opened, but
            not bound to any file descriptor.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">portTypeListener</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A port that is connected to a listen socket. This port does not
            do much, no data pumping is done on this socket, but read data is
            available when one is trying to do an accept on the port.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">portTypeAcceptor</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This port is to represent the result of an accept operation. It is
            created when one wants to accept from a listen socket, and it is
            converted to a <fo:inline font-family="monospace">portTypeCommand</fo:inline> when the accept succeeds.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">portTypeConnector</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Very similar to <fo:inline font-family="monospace">portTypeAcceptor</fo:inline>, an
            intermediate stage between the request for a connect operation and
            that the socket is connected to an accepting ditto in the
            other end. When the sockets are connected, the port
            switches type to <fo:inline font-family="monospace">portTypeCommand</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">portTypeCommand</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A connected socket (or accepted socket) in <fo:inline font-family="monospace">command</fo:inline> mode
            mentioned earlier.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">portTypeIntermediate</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The intermediate stage for a connected socket.
            There is to be no processing of input for this socket.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">portTypeData</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The mode where data is pumped through the port and the
            <fo:inline font-family="monospace">uds_command</fo:inline> routine regards every call as a call where
            sending is wanted. In this mode, all input available is read and
            sent to Erlang when it arrives on the socket, much like in the
            active mode of a <fo:inline font-family="monospace">gen_tcp</fo:inline> socket.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We study the state that is needed for the ports. Notice
        that not all fields are used for all types of ports. Some space
        could be saved by using unions, but that would clutter the
        code with multiple indirections, so here is used one struct for
        all types of ports, for readability:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
( 1) typedef unsigned char Byte;
( 2) typedef unsigned int Word;

( 3) typedef struct uds_data {
( 4)     int fd;                   /* File descriptor */
( 5)     ErlDrvPort port;          /* The port identifier */
( 6)     int lockfd;               /* The file descriptor for a lock file in 
( 7)                                  case of listen sockets */
( 8)     Byte creation;            /* The creation serial derived from the 
( 9)                                  lock file */
(10)     PortType type;            /* Type of port */
(11)     char *name;               /* Short name of socket for unlink */
(12)     Word sent;                /* Bytes sent */
(13)     Word received;            /* Bytes received */
(14)     struct uds_data *partner; /* The partner in an accept/listen pair */
(15)     struct uds_data *next;    /* Next structure in list */
(16)     /* The input buffer and its data */
(17)     int buffer_size;          /* The allocated size of the input buffer */
(18)     int buffer_pos;           /* Current position in input buffer */
(19)     int header_pos;           /* Where the current header is in the 
(20)                                  input buffer */
(21)     Byte *buffer;             /* The actual input buffer */
(22) } UdsData;      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This structure is used for all types of ports although some
        fields are useless for some types. The least memory consuming
        solution would be to arrange this structure as a union of
        structures. However, the multiple indirections in the code to
        access a field in such a structure would clutter the code too
        much for an example.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The fields in the structure are as follows:</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">fd</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file descriptor of the socket associated with the port.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">port</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The port identifier for the port that this structure
            corresponds to. It is needed for most <fo:inline font-family="monospace">driver_XXX</fo:inline>
            calls from the driver back to the emulator.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">lockfd</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the socket is a listen socket, we use a separate
            (regular) file for two purposes:</fo:block>
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We want a locking mechanism that gives no race
                conditions, to be sure if another Erlang
                node uses the listen socket name we require or if the
                file is only left there from a previous (crashed) session.</fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We store the <fo:inline font-family="monospace">creation</fo:inline> serial number in the
                file. The <fo:inline font-family="monospace">creation</fo:inline> is a number that is to
                change between different instances of different Erlang
                emulators with the same name, so that process
                identifiers from one emulator do not become valid when sent
                to a new emulator with the same distribution name. The
                creation can be from 0 through 3 (two bits) and is stored
                in every process identifier sent to another node.</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a system with TCP-based distribution, this data is
                kept in the <fo:inline font-weight="bold">Erlang port mapper daemon</fo:inline>
                (<fo:inline font-family="monospace">epmd</fo:inline>), which is contacted when a distributed
                node starts. The lock file and a convention for the UDS
                listen socket's name remove the need for
                <fo:inline font-family="monospace">epmd</fo:inline> when using this distribution module. UDS
                is always restricted to one host, why avoiding a port
                mapper is easy.</fo:block>
            </fo:block></fo:list-item-body></fo:list-item>
          </fo:list-block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">creation</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The creation number for a listen socket, which is
            calculated as (the value found in the lock-file + 1) rem 4.
            This creation value is also written back into the
            lock file, so that the next invocation of the emulator
            finds our value in the file.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">type</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current type/state of the port, which can be one
            of the values declared above.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">name</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name of the socket file (the path prefix removed),
            which allows for deletion (<fo:inline font-family="monospace">unlink</fo:inline>) when the
            socket is closed.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sent</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">How many bytes that have been sent over the
            socket. This can wrap, but that is no problem for the
            distribution, as the Erlang distribution is only interested in
            if this value has changed. (The Erlang
            <fo:inline font-family="monospace">net_kernel</fo:inline> <fo:inline font-family="monospace">ticker</fo:inline> uses this value by calling the
            driver to fetch it, which is done through the
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:port_control/3</fo:inline></fo:inline> routine.)</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">received</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">How many bytes that are read (received) from the
            socket, used in similar ways as <fo:inline font-family="monospace">sent</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">partner</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A pointer to another port structure, which is
            either the listen port from which this port is accepting a
            connection or conversely. The "partner relation"
            is always bidirectional.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">next</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Pointer to next structure in a linked list of all
            port structures. This list is used when accepting
            connections and when the driver is unloaded.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">buffer_size</fo:inline>, <fo:inline font-family="monospace">buffer_pos</fo:inline>, <fo:inline font-family="monospace">header_pos</fo:inline>,
          <fo:inline font-family="monospace">buffer</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Data for input buffering. For details about the input buffering,
            see the source code in directory <fo:inline font-family="monospace">kernel/examples</fo:inline>. That
            certainly goes beyond the scope of this section.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp4482912" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Selected Parts of the Distribution Driver Implementation</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The implemenation of the distribution driver is not completely
        covered here, details about buffering and other things
        unrelated to driver writing are not explained. Likewise are
        some peculiarities of the UDS protocol not explained in
        detail. The chosen protocol is not important.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prototypes for the driver callback routines can be found in
        the <fo:inline font-family="monospace">erl_driver.h</fo:inline> header file.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver initialization routine is (usually) declared with a
        macro to make the driver easier to port between different
        operating systems (and flavors of systems). This is the only
        routine that must have a well-defined name. All other
        callbacks are reached through the driver structure. The macro
        to use is named <fo:inline font-family="monospace">DRIVER_INIT</fo:inline> and takes the driver name
        as parameter:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(1) /* Beginning of linked list of ports */
(2) static UdsData *first_data;

(3) DRIVER_INIT(uds_drv)
(4) {
(5)     first_data = NULL;
(6)     return &amp;uds_driver_entry;
(7) }      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The routine initializes the single global data structure and
        returns a pointer to the driver entry. The routine is called
        when <fo:inline font-family="monospace">erl_ddll:load_driver</fo:inline> is called from Erlang.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">uds_start</fo:inline> routine is called when a port is
        opened from Erlang. In this case, we only allocate a structure and
        initialize it. Creating the actual socket is left to the
        <fo:inline font-family="monospace">uds_command</fo:inline> routine.</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
( 1) static ErlDrvData uds_start(ErlDrvPort port, char *buff)
( 2) {
( 3)     UdsData *ud;
( 4)     
( 5)     ud = ALLOC(sizeof(UdsData));
( 6)     ud-&gt;fd = -1;
( 7)     ud-&gt;lockfd = -1;
( 8)     ud-&gt;creation = 0;
( 9)     ud-&gt;port = port;
(10)     ud-&gt;type = portTypeUnknown;
(11)     ud-&gt;name = NULL;
(12)     ud-&gt;buffer_size = 0;
(13)     ud-&gt;buffer_pos = 0;
(14)     ud-&gt;header_pos = 0;
(15)     ud-&gt;buffer = NULL;
(16)     ud-&gt;sent = 0;
(17)     ud-&gt;received = 0;
(18)     ud-&gt;partner = NULL;
(19)     ud-&gt;next = first_data;
(20)     first_data = ud;
(21)     
(22)     return((ErlDrvData) ud);
(23) }      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Every data item is initialized, so that no problems arise
        when a newly created port is closed (without there being any
        corresponding socket). This routine is called when
        <fo:inline font-family="monospace">open_port({spawn, "uds_drv"},[])</fo:inline> is called from
        Erlang.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">uds_command</fo:inline> routine is the routine called when
        an Erlang process sends data to the port. This routine handles all
        asynchronous commands when the port is in <fo:inline font-family="monospace">command</fo:inline> mode and
        the sending of all data when the port is in <fo:inline font-family="monospace">data</fo:inline> mode:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
( 1) static void uds_command(ErlDrvData handle, char *buff, int bufflen)
( 2) {
( 3)     UdsData *ud = (UdsData *) handle;

( 4)     if (ud-&gt;type == portTypeData || ud-&gt;type == portTypeIntermediate) {
( 5)         DEBUGF(("Passive do_send %d",bufflen));
( 6)         do_send(ud, buff + 1, bufflen - 1); /* XXX */
( 7)         return;
( 8)     } 
( 9)     if (bufflen == 0) {
(10)         return;
(11)     }
(12)     switch (*buff) {
(13)     case 'L':
(14)         if (ud-&gt;type != portTypeUnknown) {
(15)             driver_failure_posix(ud-&gt;port, ENOTSUP);
(16)             return;
(17)         }
(18)         uds_command_listen(ud,buff,bufflen);
(19)         return;
(20)     case 'A':
(21)         if (ud-&gt;type != portTypeUnknown) {
(22)             driver_failure_posix(ud-&gt;port, ENOTSUP);
(23)             return;
(24)         }
(25)         uds_command_accept(ud,buff,bufflen);
(26)         return;
(27)     case 'C':
(28)         if (ud-&gt;type != portTypeUnknown) {
(29)             driver_failure_posix(ud-&gt;port, ENOTSUP);
(30)             return;
(31)         }
(32)         uds_command_connect(ud,buff,bufflen);
(33)         return;
(34)     case 'S':
(35)         if (ud-&gt;type != portTypeCommand) {
(36)             driver_failure_posix(ud-&gt;port, ENOTSUP);
(37)             return;
(38)         }
(39)         do_send(ud, buff + 1, bufflen - 1);
(40)         return;
(41)     case 'R':
(42)         if (ud-&gt;type != portTypeCommand) {
(43)             driver_failure_posix(ud-&gt;port, ENOTSUP);
(44)             return;
(45)         }
(46)         do_recv(ud);
(47)         return;
(48)     default:
(49)         return;
(50)     }
(51) }      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The command routine takes three parameters; the handle returned for
        the port by <fo:inline font-family="monospace">uds_start</fo:inline>, which is a pointer
        to the internal port structure, the data buffer, and the length
        of the data buffer. The buffer is the data sent from Erlang
        (a list of bytes) converted to an C array (of bytes).</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Erlang sends, for example, the list <fo:inline font-family="monospace">[$a,$b,$c]</fo:inline>
        to the port, the <fo:inline font-family="monospace">bufflen</fo:inline> variable is
        <fo:inline font-family="monospace">3</fo:inline> and the <fo:inline font-family="monospace">buff</fo:inline> variable contains
        <fo:inline font-family="monospace">{'a','b','c'}</fo:inline> (no
        <fo:inline font-family="monospace">NULL</fo:inline> termination). Usually the first byte is used as an
        opcode, which is the case in this driver too (at least when the
        port is in <fo:inline font-family="monospace">command</fo:inline> mode). The opcodes are defined as follows:</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'L'&lt;socket name&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates and listens on socket with the specified name.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'A'&lt;listen number as 32-bit big-endian&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Accepts from the listen socket identified by the specified
            identification number. The identification number is retrieved with
            the <fo:inline font-family="monospace">uds_control</fo:inline> routine.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'C'&lt;socket name&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Connects to the socket named &lt;socket name&gt;.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'S'&lt;data&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends the data &lt;data&gt; on the
            connected/accepted socket (in <fo:inline font-family="monospace">command</fo:inline> mode). The sending is
            acknowledged when the data has left this process.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'R'</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receives one packet of data.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"One packet of data" in command <fo:inline font-family="monospace">'R'</fo:inline> can be explained
        as follows. This driver always sends data packaged with a 4
        byte header containing a big-endian 32-bit integer that
        represents the length of the data in the packet. There is no
        need for different packet sizes or some kind of streamed
        mode, as this driver is for the distribution only.
        Why is the header word coded explicitly in big-endian when a UDS
        socket is local to the host? It is good practice when writing a
        distribution driver, as distribution in practice usually crosses
        the host boundaries.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On line 4-8 is handled the case where the port is in <fo:inline font-family="monospace">data</fo:inline> mode
        or <fo:inline font-family="monospace">intermediate</fo:inline> mode and the remaining routine handles the
        different commands. The routine uses the
        <fo:inline font-family="monospace">driver_failure_posix()</fo:inline> routine to report errors
        (see, for example, line 15). Notice that the failure routines make
        a call to the <fo:inline font-family="monospace">uds_stop</fo:inline> routine, which will
        remove the internal port data. The handle (and the casted handle
        <fo:inline font-family="monospace">ud</fo:inline>) is therefore <fo:inline font-weight="bold">invalid pointers</fo:inline> after a
        <fo:inline font-family="monospace">driver_failure</fo:inline> call and we should <fo:inline font-weight="bold">return
        immediately</fo:inline>. The runtime system will send exit signals to all
        linked processes.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">uds_input</fo:inline> routine is called when data is available on a
        file descriptor previously passed to the
        <fo:inline font-family="monospace">driver_select</fo:inline> routine. This occurs typically when
        a read command is issued and no data is available. The
        <fo:inline font-family="monospace">do_recv</fo:inline> routine is as follows:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
( 1) static void do_recv(UdsData *ud)
( 2) {
( 3)     int res;
( 4)     char *ibuf;
( 5)     for(;;) {
( 6)         if ((res = buffered_read_package(ud,&amp;ibuf)) &lt; 0) {
( 7)             if (res == NORMAL_READ_FAILURE) {
( 8)                 driver_select(ud-&gt;port, (ErlDrvEvent) ud-&gt;fd, DO_READ, 1);
( 9)             } else {
(10)                 driver_failure_eof(ud-&gt;port);
(11)             }
(12)             return;
(13)         }
(14)         /* Got a package */
(15)         if (ud-&gt;type == portTypeCommand) {
(16)             ibuf[-1] = 'R'; /* There is always room for a single byte 
(17)                                opcode before the actual buffer 
(18)                                (where the packet header was) */
(19)             driver_output(ud-&gt;port,ibuf - 1, res + 1);
(20)             driver_select(ud-&gt;port, (ErlDrvEvent) ud-&gt;fd, DO_READ,0);
(21)             return;
(22)         } else {
(23)             ibuf[-1] = DIST_MAGIC_RECV_TAG; /* XXX */
(24)             driver_output(ud-&gt;port,ibuf - 1, res + 1);
(25)             driver_select(ud-&gt;port, (ErlDrvEvent) ud-&gt;fd, DO_READ,1);
(26)         }
(27)     }
(28) }      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The routine tries to read data until a packet is read or the
        <fo:inline font-family="monospace">buffered_read_package</fo:inline> routine returns a
        <fo:inline font-family="monospace">NORMAL_READ_FAILURE</fo:inline> (an internally defined constant
        for the module, which means that the read operation resulted in an
        <fo:inline font-family="monospace">EWOULDBLOCK</fo:inline>). If the port is in <fo:inline font-family="monospace">command</fo:inline> mode,
        the reading stops when one package is read. If the port is in
        <fo:inline font-family="monospace">data</fo:inline> mode, the reading continues until the socket buffer is empty
        (read failure). If no more data can be read and more is wanted (which
        is always the case when the socket is in <fo:inline font-family="monospace">data</fo:inline> mode),
        <fo:inline font-family="monospace">driver_select</fo:inline> is called to make the <fo:inline font-family="monospace">uds_input</fo:inline>
        callback be called when more data is available for reading.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the port is in <fo:inline font-family="monospace">data</fo:inline> mode, all data is sent to Erlang in a
        format that suits the distribution. In fact, the raw data will
        never reach any Erlang process, but will be
        translated/interpreted by the emulator itself and then
        delivered in the correct format to the correct processes. In
        the current emulator version, received data is to be tagged
        with a single byte of 100. That is what the macro
        <fo:inline font-family="monospace">DIST_MAGIC_RECV_TAG</fo:inline> is defined to. The tagging of
        data in the distribution can be changed in the future.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">uds_input</fo:inline> routine handles other input events
        (like non-blocking <fo:inline font-family="monospace">accept</fo:inline>), but most importantly
        handle
        data arriving at the socket by calling <fo:inline font-family="monospace">do_recv</fo:inline>:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
( 1) static void uds_input(ErlDrvData handle, ErlDrvEvent event)
( 2) {
( 3)     UdsData *ud = (UdsData *) handle;

( 4)     if (ud-&gt;type == portTypeListener) {
( 5)         UdsData *ad = ud-&gt;partner;
( 6)         struct sockaddr_un peer;
( 7)         int pl = sizeof(struct sockaddr_un);
( 8)         int fd;

( 9)         if ((fd = accept(ud-&gt;fd, (struct sockaddr *) &amp;peer, &amp;pl)) &lt; 0) {
(10)             if (errno != EWOULDBLOCK) {
(11)                 driver_failure_posix(ud-&gt;port, errno);
(12)                 return;
(13)             }
(14)             return;
(15)         }
(16)         SET_NONBLOCKING(fd);
(17)         ad-&gt;fd = fd;
(18)         ad-&gt;partner = NULL;
(19)         ad-&gt;type = portTypeCommand;
(20)         ud-&gt;partner = NULL;
(21)         driver_select(ud-&gt;port, (ErlDrvEvent) ud-&gt;fd, DO_READ, 0);
(22)         driver_output(ad-&gt;port, "Aok",3);
(23)         return;
(24)     }
(25)     do_recv(ud);
(26) }      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The important line is the last line in the function: the
        <fo:inline font-family="monospace">do_read</fo:inline> routine is called to handle new input.
        The remaining function handles input on a listen socket, which means
        that it is to be possible to do an accept on the
        socket, which is also recognized as a read event.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The output mechanisms are similar to the input.
        The <fo:inline font-family="monospace">do_send</fo:inline> routine is as follows:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
( 1) static void do_send(UdsData *ud, char *buff, int bufflen) 
( 2) {
( 3)     char header[4];
( 4)     int written;
( 5)     SysIOVec iov[2];
( 6)     ErlIOVec eio;
( 7)     ErlDrvBinary *binv[] = {NULL,NULL};

( 8)     put_packet_length(header, bufflen);
( 9)     iov[0].iov_base = (char *) header;
(10)     iov[0].iov_len = 4;
(11)     iov[1].iov_base = buff;
(12)     iov[1].iov_len = bufflen;
(13)     eio.iov = iov;
(14)     eio.binv = binv;
(15)     eio.vsize = 2;
(16)     eio.size = bufflen + 4;
(17)     written = 0;
(18)     if (driver_sizeq(ud-&gt;port) == 0) {
(19)         if ((written = writev(ud-&gt;fd, iov, 2)) == eio.size) {
(20)             ud-&gt;sent += written;
(21)             if (ud-&gt;type == portTypeCommand) {
(22)                 driver_output(ud-&gt;port, "Sok", 3);
(23)             }
(24)             return;
(25)         } else if (written &lt; 0) {
(26)             if (errno != EWOULDBLOCK) {
(27)                 driver_failure_eof(ud-&gt;port);
(28)                 return;
(29)             } else {
(30)                 written = 0;
(31)             }
(32)         } else {
(33)             ud-&gt;sent += written;
(34)         }
(35)         /* Enqueue remaining */
(36)     }
(37)     driver_enqv(ud-&gt;port, &amp;eio, written);
(38)     send_out_queue(ud);
(39) }      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This driver uses the <fo:inline font-family="monospace">writev</fo:inline> system call to send data
        onto the socket. A combination of <fo:inline font-family="monospace">writev</fo:inline> and the driver output
        queues is very convenient. An <fo:inline font-family="monospace">ErlIOVec</fo:inline> structure
        contains a <fo:inline font-family="monospace">SysIOVec</fo:inline> (which is equivalent to the
        <fo:inline font-family="monospace">struct iovec</fo:inline> structure defined in
        <fo:inline font-family="monospace">uio.h</fo:inline>. The
        <fo:inline font-family="monospace">ErlIOVec</fo:inline> also contains an array of <fo:inline font-family="monospace">ErlDrvBinary</fo:inline>
        pointers, of the same length as the number of buffers in the
        I/O vector itself. One can use this to allocate the binaries
        for the queue "manually" in the driver, but here
        the binary array is filled with <fo:inline font-family="monospace">NULL</fo:inline> values (line 7).
        The runtime system then allocates its own buffers when
        <fo:inline font-family="monospace">driver_enqv</fo:inline> is called (line 37).</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The routine builds an I/O vector containing the header bytes
        and the buffer (the opcode has been removed and the buffer
        length decreased by the output routine). If the queue is
        empty, we write the data directly to the socket (or at
        least try to). If any data is left, it is stored in the queue
        and then we try to send the queue (line 38). An acknowledgement
        is sent when the message is delivered completely (line 22). The
        <fo:inline font-family="monospace">send_out_queue</fo:inline> sends acknowledgements if the sending
        is completed there. If the port is in <fo:inline font-family="monospace">command</fo:inline> mode, the Erlang
        code serializes the send operations so that only one packet
        can be waiting for delivery at a time. Therefore the acknowledgement
        can be sent whenever the queue is empty.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">send_out_queue</fo:inline> routine is as follows:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
( 1) static int send_out_queue(UdsData *ud)
( 2) {
( 3)     for(;;) {
( 4)         int vlen;
( 5)         SysIOVec *tmp = driver_peekq(ud-&gt;port, &amp;vlen);
( 6)         int wrote;
( 7)         if (tmp == NULL) {
( 8)             driver_select(ud-&gt;port, (ErlDrvEvent) ud-&gt;fd, DO_WRITE, 0);
( 9)             if (ud-&gt;type == portTypeCommand) {
(10)                 driver_output(ud-&gt;port, "Sok", 3);
(11)             }
(12)             return 0;
(13)         }
(14)         if (vlen &gt; IO_VECTOR_MAX) {
(15)             vlen = IO_VECTOR_MAX;
(16)         } 
(17)         if ((wrote = writev(ud-&gt;fd, tmp, vlen)) &lt; 0) {
(18)             if (errno == EWOULDBLOCK) {
(19)                 driver_select(ud-&gt;port, (ErlDrvEvent) ud-&gt;fd, 
(20)                               DO_WRITE, 1);
(21)                 return 0;
(22)             } else {
(23)                 driver_failure_eof(ud-&gt;port);
(24)                 return -1;
(25)             }
(26)         }
(27)         driver_deq(ud-&gt;port, wrote);
(28)         ud-&gt;sent += wrote;
(29)     }
(30) }      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We simply pick out an I/O vector from the queue
        (which is the whole queue as a <fo:inline font-family="monospace">SysIOVec</fo:inline>). If the I/O
        vector is too long (<fo:inline font-family="monospace">IO_VECTOR_MAX</fo:inline> is defined to 16), the vector
        length is decreased (line 15), otherwise the <fo:inline font-family="monospace">writev</fo:inline>
        call (line 17) fails. Writing is tried and anything written is dequeued
        (line 27).
        If the write fails with <fo:inline font-family="monospace">EWOULDBLOCK</fo:inline> (notice that all
        sockets are in non-blocking mode), <fo:inline font-family="monospace">driver_select</fo:inline> is
        called to make the <fo:inline font-family="monospace">uds_output</fo:inline> routine be called when
        there is space to write again.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We continue trying to write until the queue is empty or
        the writing blocks.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The routine above is called from the <fo:inline font-family="monospace">uds_output</fo:inline>
        routine:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
( 1) static void uds_output(ErlDrvData handle, ErlDrvEvent event)
( 2) {
( 3)    UdsData *ud = (UdsData *) handle;
( 4)    if (ud-&gt;type == portTypeConnector) {
( 5)        ud-&gt;type = portTypeCommand;
( 6)        driver_select(ud-&gt;port, (ErlDrvEvent) ud-&gt;fd, DO_WRITE, 0);
( 7)        driver_output(ud-&gt;port, "Cok",3);
( 8)        return;
( 9)    }
(10)    send_out_queue(ud);
(11) }      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The routine is simple: it first handles the fact that the
        output select will concern a socket in the business of
        connecting (and the connecting blocked). If the socket is in
        a connected state, it simply sends the output queue. This
        routine is called when it is possible to write to a socket
        where we have an output queue, so there is no question what to
        do.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver implements a control interface, which is a
        synchronous interface called when Erlang calls
        <fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:port_control/3</fo:inline></fo:inline>. Only this interface
        can control the driver when it is in <fo:inline font-family="monospace">data</fo:inline> mode. It can
        be called with the following opcodes:</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'C'</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets port in <fo:inline font-family="monospace">command</fo:inline> mode.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'I'</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets port in <fo:inline font-family="monospace">intermediate</fo:inline> mode.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'D'</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets port in <fo:inline font-family="monospace">data</fo:inline> mode.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'N'</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets identification number for listen port. This
            identification number is used in an accept command to the
            driver. It is returned as a big-endian 32-bit integer, which
            is the file identifier for the listen socket.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'S'</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets statistics, which is the number of bytes received,
            the number of bytes sent, and the number of bytes pending in
            the output queue. This data is used when the distribution
            checks that a connection is alive (ticking). The statistics
            is returned as three 32-bit big-endian integers.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'T'</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a tick message, which is a packet of length 0.
            Ticking is done when the port is in <fo:inline font-family="monospace">data</fo:inline> mode, so the
            command for sending data cannot be used (besides it ignores
            zero length packages in <fo:inline font-family="monospace">command</fo:inline> mode). This is used by the
            ticker to send dummy data when no other traffic is present.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Note:</fo:inline> It is important that the interface for
            sending ticks is not blocking. This implementation uses
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:port_control/3</fo:inline></fo:inline>, which does not block the
            caller. If <fo:inline font-family="monospace">erlang:port_command</fo:inline> is used, use
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:port_command/3</fo:inline></fo:inline> and pass <fo:inline font-family="monospace">[force]</fo:inline> as
            option list; otherwise the caller can be blocked indefinitely
            on a busy port and prevent the system from taking down a
            connection that is not functioning.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'R'</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets creation number of a listen socket, which is used to
            dig out the number stored in the lock file to differentiate
            between invocations of Erlang nodes with the same name.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The control interface gets a buffer to return its value in,
        but is free to allocate its own buffer if the provided one is
        too small. The <fo:inline font-family="monospace">uds_control</fo:inline> code is as follows:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
( 1) static int uds_control(ErlDrvData handle, unsigned int command, 
( 2)                        char* buf, int count, char** res, int res_size)
( 3) {
( 4) /* Local macro to ensure large enough buffer. */
( 5) #define ENSURE(N)                               \
( 6)    do {                                         \
( 7)        if (res_size &lt; N) {                      \
( 8)            *res = ALLOC(N);                     \
( 9)        }                                        \
(10)    } while(0)

(11)    UdsData *ud = (UdsData *) handle;

(12)    switch (command) {
(13)    case 'S':
(14)        {
(15)            ENSURE(13);
(16)            **res = 0;
(17)            put_packet_length((*res) + 1, ud-&gt;received);
(18)            put_packet_length((*res) + 5, ud-&gt;sent);
(19)            put_packet_length((*res) + 9, driver_sizeq(ud-&gt;port));
(20)            return 13;
(21)        }
(22)    case 'C':
(23)        if (ud-&gt;type &lt; portTypeCommand) {
(24)            return report_control_error(res, res_size, "einval");
(25)        }
(26)        ud-&gt;type = portTypeCommand;
(27)        driver_select(ud-&gt;port, (ErlDrvEvent) ud-&gt;fd, DO_READ, 0);
(28)        ENSURE(1);
(29)        **res = 0;
(30)        return 1;
(31)    case 'I':
(32)        if (ud-&gt;type &lt; portTypeCommand) {
(33)            return report_control_error(res, res_size, "einval");
(34)        }
(35)        ud-&gt;type = portTypeIntermediate;
(36)        driver_select(ud-&gt;port, (ErlDrvEvent) ud-&gt;fd, DO_READ, 0);
(37)        ENSURE(1);
(38)        **res = 0;
(39)        return 1;
(40)    case 'D':
(41)        if (ud-&gt;type &lt; portTypeCommand) {
(42)            return report_control_error(res, res_size, "einval");
(43)        }
(44)        ud-&gt;type = portTypeData;
(45)        do_recv(ud);
(46)        ENSURE(1);
(47)        **res = 0;
(48)        return 1;
(49)    case 'N':
(50)        if (ud-&gt;type != portTypeListener) {
(51)            return report_control_error(res, res_size, "einval");
(52)        }
(53)        ENSURE(5);
(54)        (*res)[0] = 0;
(55)        put_packet_length((*res) + 1, ud-&gt;fd);
(56)        return 5;
(57)    case 'T': /* tick */
(58)        if (ud-&gt;type != portTypeData) {
(59)            return report_control_error(res, res_size, "einval");
(60)        }
(61)        do_send(ud,"",0);
(62)        ENSURE(1);
(63)        **res = 0;
(64)        return 1;
(65)    case 'R':
(66)        if (ud-&gt;type != portTypeListener) {
(67)            return report_control_error(res, res_size, "einval");
(68)        }
(69)        ENSURE(2);
(70)        (*res)[0] = 0;
(71)        (*res)[1] = ud-&gt;creation;
(72)        return 2;
(73)    default:
(74)        return report_control_error(res, res_size, "einval");
(75)    }
(76) #undef ENSURE
(77) }      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The macro <fo:inline font-family="monospace">ENSURE</fo:inline> (line 5-10) is used to ensure that
        the buffer is large enough for the answer. We switch on the command and
        take actions. We always have read select active on a port in <fo:inline font-family="monospace">data</fo:inline>
        mode (achieved by calling <fo:inline font-family="monospace">do_recv</fo:inline> on line 45), but
        we turn off read selection in <fo:inline font-family="monospace">intermediate</fo:inline> and <fo:inline font-family="monospace">command</fo:inline>
        modes (line 27 and 36).</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The rest of the driver is more or less UDS-specific and not of
        general interest.</fo:block>
    
  <fo:block id="idp4579840" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.3 
      Putting It All Together</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To test the distribution, the <fo:inline font-family="monospace">net_kernel:start/1</fo:inline>
      function can be used. It is useful, as it starts the distribution on a
      running system, where tracing/debugging can be performed.
      The <fo:inline font-family="monospace">net_kernel:start/1</fo:inline> routine takes a
      list as its single argument. The list first element in the list is to be
      the node name (without the "@hostname") as an atom. The second (and
      last) element is to be one of the atoms <fo:inline font-family="monospace">shortnames</fo:inline> or 
      <fo:inline font-family="monospace">longnames</fo:inline>. In the example case,
      <fo:inline font-family="monospace">shortnames</fo:inline> is preferred.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">net_kernel</fo:inline> to find out which distribution module to use,
      command-line argument <fo:inline font-family="monospace">-proto_dist</fo:inline> is used. It
      is followed by one or more distribution module names, with suffix
      "_dist" removed, that is, <fo:inline font-family="monospace">uds_dist</fo:inline> as a distribution module
      is specified as <fo:inline font-family="monospace">-proto_dist uds</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no <fo:inline font-family="monospace">epmd</fo:inline> (TCP port mapper daemon) is used, also command-line
      option <fo:inline font-family="monospace">-no_epmd</fo:inline> is to be specified, which makes
      Erlang skip the <fo:inline font-family="monospace">epmd</fo:inline> startup, both as an OS process and as an
      Erlang ditto.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The path to the directory where the distribution modules reside
      must be known at boot. This can be achieved either by
      specifying <fo:inline font-family="monospace">-pa &lt;path&gt;</fo:inline> on the command line or by
      building a boot script containing the applications used for your
      distribution protocol. (In the <fo:inline font-family="monospace">uds_dist</fo:inline> protocol, only the
      <fo:inline font-family="monospace">uds_dist</fo:inline> application needs to be added to the script.)</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The distribution starts at boot if all the above is
      specified and an <fo:inline font-family="monospace">-sname &lt;name&gt;</fo:inline> flag is present at the
      command line.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 1:</fo:inline></fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ <fo:inline font-weight="bold">erl -pa $ERL_TOP/lib/kernel/examples/uds_dist/ebin -proto_dist uds -no_epmd</fo:inline>
Erlang (BEAM) emulator version 5.0 
 
Eshell V5.0  (abort with ^G)
1&gt; <fo:inline font-weight="bold">net_kernel:start([bing,shortnames]).</fo:inline>
{ok,&lt;0.30.0&gt;}
(bing@hador)2&gt;</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 2:</fo:inline></fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ <fo:inline font-weight="bold">erl -pa $ERL_TOP/lib/kernel/examples/uds_dist/ebin -proto_dist uds \ </fo:inline>
<fo:inline font-weight="bold">      -no_epmd -sname bong</fo:inline>
Erlang (BEAM) emulator version 5.0 
 
Eshell V5.0  (abort with ^G)
(bong@hador)1&gt;</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ERL_FLAGS</fo:inline> environment variable can be used to store the
      complicated parameters in:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ <fo:inline font-weight="bold">ERL_FLAGS=-pa $ERL_TOP/lib/kernel/examples/uds_dist/ebin \ </fo:inline>
<fo:inline font-weight="bold">      -proto_dist uds -no_epmd</fo:inline>
$ <fo:inline font-weight="bold">export ERL_FLAGS</fo:inline>
$ <fo:inline font-weight="bold">erl -sname bang</fo:inline>
Erlang (BEAM) emulator version 5.0 
 
Eshell V5.0  (abort with ^G)
(bang@hador)1&gt;</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_FLAGS</fo:inline> should not include the node name.</fo:block>
  <fo:block id="idp4603344" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.7  The Abstract Format</fo:marker>1.7  The Abstract Format</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the standard representation of parse trees for Erlang
    programs as Erlang terms. This representation is known as the <fo:inline font-weight="bold">abstract
    format</fo:inline>. Functions dealing with such parse trees are
    <fo:inline font-style="italic">
    <fo:inline font-family="monospace">compile:forms/1,2</fo:inline></fo:inline> and functions in the following
    modules:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
      <fo:inline font-family="monospace">epp(3)</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
      <fo:inline font-family="monospace">erl_eval(3)</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
      <fo:inline font-family="monospace">erl_lint(3)</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
      <fo:inline font-family="monospace">erl_parse(3)</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
      <fo:inline font-family="monospace">erl_pp(3)</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
      <fo:inline font-family="monospace">io(3)</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions are also used as input and output for parse transforms, see
    the <fo:inline font-style="italic"><fo:inline font-family="monospace">compile(3)</fo:inline></fo:inline>
    module.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We use the function <fo:inline font-family="monospace">Rep</fo:inline> to denote the mapping from an Erlang source
    construct <fo:inline font-family="monospace">C</fo:inline> to its abstract format representation <fo:inline font-family="monospace">R</fo:inline>, and write
    <fo:inline font-family="monospace">R = Rep(C)</fo:inline>.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The word <fo:inline font-family="monospace">LINE</fo:inline> in this section represents an integer, and denotes the
    number of the line in the source file where the construction occurred.
    Several instances of <fo:inline font-family="monospace">LINE</fo:inline> in the same construction can denote
    different lines.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As operators are not terms in their own right, when operators are
    mentioned below, the representation of an operator is to be taken to
    be the atom with a printname consisting of the same characters as the
    operator.</fo:block><fo:block id="idp4623008" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.1 
      Module Declarations and Forms</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A module declaration consists of a sequence of forms, which are either
      function declarations or attributes.</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If D is a module declaration consisting of the forms
          <fo:inline font-family="monospace">F_1</fo:inline>, ..., <fo:inline font-family="monospace">F_k</fo:inline>, then
          Rep(D) = <fo:inline font-family="monospace">[Rep(F_1), ..., Rep(F_k)]</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If F is an attribute <fo:inline font-family="monospace">-export([Fun_1/A_1, ..., Fun_k/A_k])</fo:inline>,
          then Rep(F) =
          <fo:inline font-family="monospace">{attribute,LINE,export,[{Fun_1,A_1}, ..., {Fun_k,A_k}]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If F is an attribute <fo:inline font-family="monospace">-import(Mod,[Fun_1/A_1, ..., Fun_k/A_k])</fo:inline>,
          then Rep(F) =
          <fo:inline font-family="monospace">{attribute,LINE,import,{Mod,[{Fun_1,A_1}, ...,
          {Fun_k,A_k}]}}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If F is an attribute <fo:inline font-family="monospace">-module(Mod)</fo:inline>, then
          Rep(F) = <fo:inline font-family="monospace">{attribute,LINE,module,Mod}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If F is an attribute <fo:inline font-family="monospace">-file(File,Line)</fo:inline>, then
          Rep(F) = <fo:inline font-family="monospace">{attribute,LINE,file,{File,Line}}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If F is a function declaration <fo:inline font-family="monospace">Name Fc_1 ; ... ; Name Fc_k</fo:inline>,
          where each <fo:inline font-family="monospace">Fc_i</fo:inline> is a function clause with a pattern sequence of
          the same length <fo:inline font-family="monospace">Arity</fo:inline>, then Rep(F) =
          <fo:inline font-family="monospace">{function,LINE,Name,Arity,[Rep(Fc_1), ...,Rep(Fc_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If F is a function specification <fo:inline font-family="monospace">-Spec Name Ft_1; ...; Ft_k</fo:inline>,
          where <fo:inline font-family="monospace">Spec</fo:inline> is either the atom <fo:inline font-family="monospace">spec</fo:inline> or the atom
          <fo:inline font-family="monospace">callback</fo:inline>, and each <fo:inline font-family="monospace">Ft_i</fo:inline> is a possibly constrained
          function type with an argument sequence of the same length
          <fo:inline font-family="monospace">Arity</fo:inline>, then Rep(F) =
          <fo:inline font-family="monospace">{attribute,Line,Spec,{{Name,Arity},[Rep(Ft_1), ...,
          Rep(Ft_k)]}}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If F is a function specification
          <fo:inline font-family="monospace">-spec Mod:Name Ft_1; ...; Ft_k</fo:inline>, where each <fo:inline font-family="monospace">Ft_i</fo:inline> is a
          possibly constrained function type with an argument sequence of the
          same length <fo:inline font-family="monospace">Arity</fo:inline>, then Rep(F) =
          <fo:inline font-family="monospace">{attribute,Line,spec,{{Mod,Name,Arity},[Rep(Ft_1), ...,
          Rep(Ft_k)]}}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If F is a record declaration <fo:inline font-family="monospace">-record(Name,{V_1, ..., V_k})</fo:inline>,
          where each <fo:inline font-family="monospace">V_i</fo:inline> is a record field, then Rep(F) =
          <fo:inline font-family="monospace">{attribute,LINE,record,{Name,[Rep(V_1), ..., Rep(V_k)]}}</fo:inline>.
          For Rep(V), see below.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If F is a type declaration <fo:inline font-family="monospace">-Type Name(V_1, ..., V_k) :: T</fo:inline>,
          where <fo:inline font-family="monospace">Type</fo:inline> is either the atom <fo:inline font-family="monospace">type</fo:inline> or the atom
          <fo:inline font-family="monospace">opaque</fo:inline>, each <fo:inline font-family="monospace">V_i</fo:inline> is a variable, and <fo:inline font-family="monospace">T</fo:inline> is a type,
          then Rep(F) =
          <fo:inline font-family="monospace">{attribute,LINE,Type,{Name,Rep(T),[Rep(V_1), ...,
          Rep(V_k)]}}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If F is a wild attribute <fo:inline font-family="monospace">-A(T)</fo:inline>, then
          Rep(F) = <fo:inline font-family="monospace">{attribute,LINE,A,T}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block id="idp4653056" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Record Fields</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each field in a record declaration can have an optional,
        explicit, default initializer expression, and an
        optional type.</fo:block>

      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If V is <fo:inline font-family="monospace">A</fo:inline>, then
            Rep(V) = <fo:inline font-family="monospace">{record_field,LINE,Rep(A)}</fo:inline>.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If V is <fo:inline font-family="monospace">A = E</fo:inline>, where <fo:inline font-family="monospace">E</fo:inline> is an expression, then
            Rep(V) = <fo:inline font-family="monospace">{record_field,LINE,Rep(A),Rep(E)}</fo:inline>.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If V is <fo:inline font-family="monospace">A :: T</fo:inline>, where <fo:inline font-family="monospace">T</fo:inline> is a type, then Rep(V) =
            <fo:inline font-family="monospace">{typed_record_field,{record_field,LINE,Rep(A)},Rep(T)}</fo:inline>.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If V is <fo:inline font-family="monospace">A = E :: T</fo:inline>, where
            <fo:inline font-family="monospace">E</fo:inline> is an expression and <fo:inline font-family="monospace">T</fo:inline> is a type, then Rep(V) =
            <fo:inline font-family="monospace">{typed_record_field,{record_field,LINE,Rep(A),Rep(E)},Rep(T)}</fo:inline>.
          </fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp4664400" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Representation of Parse Errors and End-of-File</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In addition to the representations of forms, the list that represents
        a module declaration (as returned by functions in
        <fo:inline font-style="italic"><fo:inline font-family="monospace">epp(3)</fo:inline></fo:inline> and
        <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_parse(3)</fo:inline></fo:inline>)
        can contain the following:</fo:block>

      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tuples <fo:inline font-family="monospace">{error,E}</fo:inline> and <fo:inline font-family="monospace">{warning,W}</fo:inline>, denoting
            syntactically incorrect forms and warnings.
          </fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{eof,LOCATION}</fo:inline>, denoting an end-of-stream
            encountered before a complete form had been parsed.
            The word <fo:inline font-family="monospace">LOCATION</fo:inline> represents an integer, and denotes the
            number of the last line in the source file.
          </fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    
  <fo:block id="idp4672176" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.2 
      Atomic Literals</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are five kinds of atomic literals, which are represented in the
      same way in patterns, expressions, and guards:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If L is an atom literal, then Rep(L) = <fo:inline font-family="monospace">{atom,LINE,L}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If L is a character literal, then Rep(L) = <fo:inline font-family="monospace">{char,LINE,L}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If L is a float literal, then Rep(L) = <fo:inline font-family="monospace">{float,LINE,L}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If L is an integer literal, then
          Rep(L) = <fo:inline font-family="monospace">{integer,LINE,L}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If L is a string literal consisting of the characters
          <fo:inline font-family="monospace">C_1</fo:inline>, ..., <fo:inline font-family="monospace">C_k</fo:inline>, then
          Rep(L) = <fo:inline font-family="monospace">{string,LINE,[C_1, ..., C_k]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that negative integer and float literals do not occur as such;
      they are parsed as an application of the unary negation operator.</fo:block>
  <fo:block id="idp4682720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.3 
      Patterns</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Ps is a sequence of patterns <fo:inline font-family="monospace">P_1, ..., P_k</fo:inline>, then
      Rep(Ps) = <fo:inline font-family="monospace">[Rep(P_1), ..., Rep(P_k)]</fo:inline>. Such sequences occur as the
      list of arguments to a function or fun.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Individual patterns are represented as follows:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If P is an atomic literal <fo:inline font-family="monospace">L</fo:inline>, then Rep(P) = Rep(L).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If P is a bitstring pattern
          <fo:inline font-family="monospace">&lt;&lt;P_1:Size_1/TSL_1, ..., P_k:Size_k/TSL_k&gt;&gt;</fo:inline>, where each
          <fo:inline font-family="monospace">Size_i</fo:inline> is an expression that can be evaluated to an integer,
          and each <fo:inline font-family="monospace">TSL_i</fo:inline> is a type specificer list, then Rep(P) =
          <fo:inline font-family="monospace">{bin,LINE,[{bin_element,LINE,Rep(P_1),Rep(Size_1),Rep(TSL_1)},
          ..., {bin_element,LINE,Rep(P_k),Rep(Size_k),Rep(TSL_k)}]}</fo:inline>.
          For Rep(TSL), see below.
          An omitted <fo:inline font-family="monospace">Size_i</fo:inline> is represented by <fo:inline font-family="monospace">default</fo:inline>.
          An omitted <fo:inline font-family="monospace">TSL_i</fo:inline> is represented by <fo:inline font-family="monospace">default</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If P is a compound pattern <fo:inline font-family="monospace">P_1 = P_2</fo:inline>, then Rep(P) =
          <fo:inline font-family="monospace">{match,LINE,Rep(P_1),Rep(P_2)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If P is a cons pattern <fo:inline font-family="monospace">[P_h | P_t]</fo:inline>, then Rep(P) =
          <fo:inline font-family="monospace">{cons,LINE,Rep(P_h),Rep(P_t)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If P is a map pattern <fo:inline font-family="monospace">#{A_1, ..., A_k}</fo:inline>, where each
          <fo:inline font-family="monospace">A_i</fo:inline> is an association <fo:inline font-family="monospace">P_i_1 := P_i_2</fo:inline>, then Rep(P) =
          <fo:inline font-family="monospace">{map,LINE,[Rep(A_1), ..., Rep(A_k)]}</fo:inline>.
          For Rep(A), see below.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If P is a nil pattern <fo:inline font-family="monospace">[]</fo:inline>, then Rep(P) =
          <fo:inline font-family="monospace">{nil,LINE}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If P is an operator pattern <fo:inline font-family="monospace">P_1 Op P_2</fo:inline>, where <fo:inline font-family="monospace">Op</fo:inline> is a
          binary operator (this is either an occurrence of <fo:inline font-family="monospace">++</fo:inline> applied to
          a literal string or character list, or an occurrence of an expression
          that can be evaluated to a number at compile time), then Rep(P) =
          <fo:inline font-family="monospace">{op,LINE,Op,Rep(P_1),Rep(P_2)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If P is an operator pattern <fo:inline font-family="monospace">Op P_0</fo:inline>, where <fo:inline font-family="monospace">Op</fo:inline> is a
          unary operator (this is an occurrence of an expression that can be
          evaluated to a number at compile time), then Rep(P) =
          <fo:inline font-family="monospace">{op,LINE,Op,Rep(P_0)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If P is a parenthesized pattern <fo:inline font-family="monospace">( P_0 )</fo:inline>, then Rep(P) =
          <fo:inline font-family="monospace">Rep(P_0)</fo:inline>, that is, parenthesized patterns cannot be
          distinguished from their bodies.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If P is a record field index pattern <fo:inline font-family="monospace">#Name.Field</fo:inline>,
          where <fo:inline font-family="monospace">Field</fo:inline> is an atom, then Rep(P) =
          <fo:inline font-family="monospace">{record_index,LINE,Name,Rep(Field)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If P is a record pattern <fo:inline font-family="monospace">#Name{Field_1=P_1, ..., Field_k=P_k}</fo:inline>,
          where each <fo:inline font-family="monospace">Field_i</fo:inline> is an atom or <fo:inline font-family="monospace">_</fo:inline>, then Rep(P) =
          <fo:inline font-family="monospace">{record,LINE,Name,[{record_field,LINE,Rep(Field_1),Rep(P_1)}, ...,
          {record_field,LINE,Rep(Field_k),Rep(P_k)}]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If P is a tuple pattern <fo:inline font-family="monospace">{P_1, ..., P_k}</fo:inline>, then Rep(P) =
          <fo:inline font-family="monospace">{tuple,LINE,[Rep(P_1), ..., Rep(P_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If P is a universal pattern <fo:inline font-family="monospace">_</fo:inline>, then Rep(P) =
          <fo:inline font-family="monospace">{var,LINE,'_'}</fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If P is a variable pattern <fo:inline font-family="monospace">V</fo:inline>, then Rep(P) =
          <fo:inline font-family="monospace">{var,LINE,A}</fo:inline>, where A is an atom with a printname consisting
          of the same characters as <fo:inline font-family="monospace">V</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that every pattern has the same source form as some expression,
      and is represented in the same way as the corresponding expression.</fo:block>
  <fo:block id="idp4719376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.4 
      Expressions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A body B is a non-empty sequence of expressions <fo:inline font-family="monospace">E_1, ..., E_k</fo:inline>,
      and Rep(B) = <fo:inline font-family="monospace">[Rep(E_1), ..., Rep(E_k)]</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An expression E is one of the following:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is an atomic literal <fo:inline font-family="monospace">L</fo:inline>, then Rep(E) = Rep(L).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a bitstring comprehension
          <fo:inline font-family="monospace">&lt;&lt;E_0 || Q_1, ..., Q_k&gt;&gt;</fo:inline>,
          where each <fo:inline font-family="monospace">Q_i</fo:inline> is a qualifier, then Rep(E) =
          <fo:inline font-family="monospace">{bc,LINE,Rep(E_0),[Rep(Q_1), ..., Rep(Q_k)]}</fo:inline>.
          For Rep(Q), see below.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a bitstring constructor
          <fo:inline font-family="monospace">&lt;&lt;E_1:Size_1/TSL_1, ..., E_k:Size_k/TSL_k&gt;&gt;</fo:inline>,
          where each <fo:inline font-family="monospace">Size_i</fo:inline> is an expression and each
          <fo:inline font-family="monospace">TSL_i</fo:inline> is a type specificer list, then Rep(E) =
          <fo:inline font-family="monospace">{bin,LINE,[{bin_element,LINE,Rep(E_1),Rep(Size_1),Rep(TSL_1)},
          ..., {bin_element,LINE,Rep(E_k),Rep(Size_k),Rep(TSL_k)}]}</fo:inline>.
          For Rep(TSL), see below.
          An omitted <fo:inline font-family="monospace">Size_i</fo:inline> is represented by <fo:inline font-family="monospace">default</fo:inline>.
          An omitted <fo:inline font-family="monospace">TSL_i</fo:inline> is represented by <fo:inline font-family="monospace">default</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a block expression <fo:inline font-family="monospace">begin B end</fo:inline>,
          where <fo:inline font-family="monospace">B</fo:inline> is a body, then Rep(E) =
          <fo:inline font-family="monospace">{block,LINE,Rep(B)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a case expression <fo:inline font-family="monospace">case E_0 of Cc_1 ; ... ; Cc_k end</fo:inline>,
          where <fo:inline font-family="monospace">E_0</fo:inline> is an expression and each <fo:inline font-family="monospace">Cc_i</fo:inline> is a
          case clause, then Rep(E) =
          <fo:inline font-family="monospace">{'case',LINE,Rep(E_0),[Rep(Cc_1), ..., Rep(Cc_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a catch expression <fo:inline font-family="monospace">catch E_0</fo:inline>, then Rep(E) =
          <fo:inline font-family="monospace">{'catch',LINE,Rep(E_0)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a cons skeleton <fo:inline font-family="monospace">[E_h | E_t]</fo:inline>, then Rep(E) =
          <fo:inline font-family="monospace">{cons,LINE,Rep(E_h),Rep(E_t)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a fun expression <fo:inline font-family="monospace">fun Name/Arity</fo:inline>, then Rep(E) =
          <fo:inline font-family="monospace">{'fun',LINE,{function,Name,Arity}}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a fun expression <fo:inline font-family="monospace">fun Module:Name/Arity</fo:inline>, then Rep(E) =
          <fo:inline font-family="monospace">{'fun',LINE,{function,Rep(Module),Rep(Name),Rep(Arity)}}</fo:inline>.
          (Before Erlang/OTP R15: Rep(E) =
          <fo:inline font-family="monospace">{'fun',LINE,{function,Module,Name,Arity}}</fo:inline>.)</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a fun expression <fo:inline font-family="monospace">fun Fc_1 ; ... ; Fc_k end</fo:inline>,
          where each <fo:inline font-family="monospace">Fc_i</fo:inline> is a function clause, then Rep(E) =
          <fo:inline font-family="monospace">{'fun',LINE,{clauses,[Rep(Fc_1), ..., Rep(Fc_k)]}}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a fun expression <fo:inline font-family="monospace">fun Name Fc_1 ; ... ; Name Fc_k end</fo:inline>,
          where <fo:inline font-family="monospace">Name</fo:inline> is a variable and each
          <fo:inline font-family="monospace">Fc_i</fo:inline> is a function clause, then Rep(E) =
          <fo:inline font-family="monospace">{named_fun,LINE,Name,[Rep(Fc_1), ..., Rep(Fc_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a function call <fo:inline font-family="monospace">E_0(E_1, ..., E_k)</fo:inline>, then Rep(E) =
          <fo:inline font-family="monospace">{call,LINE,Rep(E_0),[Rep(E_1), ..., Rep(E_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a function call <fo:inline font-family="monospace">E_m:E_0(E_1, ..., E_k)</fo:inline>, then Rep(E) =
          <fo:inline font-family="monospace">{call,LINE,{remote,LINE,Rep(E_m),Rep(E_0)},[Rep(E_1), ...,
          Rep(E_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is an if expression <fo:inline font-family="monospace">if Ic_1 ; ... ; Ic_k  end</fo:inline>,
          where each <fo:inline font-family="monospace">Ic_i</fo:inline> is an if clause, then Rep(E) =
          <fo:inline font-family="monospace">{'if',LINE,[Rep(Ic_1), ..., Rep(Ic_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a list comprehension <fo:inline font-family="monospace">[E_0 || Q_1, ..., Q_k]</fo:inline>,
          where each <fo:inline font-family="monospace">Q_i</fo:inline> is a qualifier, then Rep(E) =
          <fo:inline font-family="monospace">{lc,LINE,Rep(E_0),[Rep(Q_1), ..., Rep(Q_k)]}</fo:inline>.
          For Rep(Q), see below.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a map creation <fo:inline font-family="monospace">#{A_1, ..., A_k}</fo:inline>,
          where each <fo:inline font-family="monospace">A_i</fo:inline> is an association <fo:inline font-family="monospace">E_i_1 =&gt; E_i_2</fo:inline>
          or <fo:inline font-family="monospace">E_i_1 := E_i_2</fo:inline>, then Rep(E) =
          <fo:inline font-family="monospace">{map,LINE,[Rep(A_1), ..., Rep(A_k)]}</fo:inline>.
          For Rep(A), see below.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a map update <fo:inline font-family="monospace">E_0#{A_1, ..., A_k}</fo:inline>,
          where each <fo:inline font-family="monospace">A_i</fo:inline> is an association <fo:inline font-family="monospace">E_i_1 =&gt; E_i_2</fo:inline>
          or <fo:inline font-family="monospace">E_i_1 := E_i_2</fo:inline>, then Rep(E) =
          <fo:inline font-family="monospace">{map,LINE,Rep(E_0),[Rep(A_1), ..., Rep(A_k)]}</fo:inline>.
          For Rep(A), see below.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a match operator expression <fo:inline font-family="monospace">P = E_0</fo:inline>,
          where <fo:inline font-family="monospace">P</fo:inline> is a pattern, then Rep(E) =
          <fo:inline font-family="monospace">{match,LINE,Rep(P),Rep(E_0)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is nil, <fo:inline font-family="monospace">[]</fo:inline>, then Rep(E) = <fo:inline font-family="monospace">{nil,LINE}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is an operator expression <fo:inline font-family="monospace">E_1 Op E_2</fo:inline>,
          where <fo:inline font-family="monospace">Op</fo:inline> is a binary operator other than match operator
          <fo:inline font-family="monospace">=</fo:inline>, then Rep(E) =
          <fo:inline font-family="monospace">{op,LINE,Op,Rep(E_1),Rep(E_2)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is an operator expression <fo:inline font-family="monospace">Op E_0</fo:inline>,
          where <fo:inline font-family="monospace">Op</fo:inline> is a unary operator, then Rep(E) =
          <fo:inline font-family="monospace">{op,LINE,Op,Rep(E_0)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a parenthesized expression <fo:inline font-family="monospace">( E_0 )</fo:inline>, then Rep(E) =
          <fo:inline font-family="monospace">Rep(E_0)</fo:inline>, that is, parenthesized expressions cannot be
          distinguished from their bodies.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a receive expression <fo:inline font-family="monospace">receive Cc_1 ; ... ; Cc_k end</fo:inline>,
          where each <fo:inline font-family="monospace">Cc_i</fo:inline> is a case clause, then Rep(E) =
          <fo:inline font-family="monospace">{'receive',LINE,[Rep(Cc_1), ..., Rep(Cc_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a receive expression
          <fo:inline font-family="monospace">receive Cc_1 ; ... ; Cc_k after E_0 -&gt; B_t end</fo:inline>,
          where each <fo:inline font-family="monospace">Cc_i</fo:inline> is a case clause, <fo:inline font-family="monospace">E_0</fo:inline> is an expression,
          and <fo:inline font-family="monospace">B_t</fo:inline> is a body, then Rep(E) =
          <fo:inline font-family="monospace">{'receive',LINE,[Rep(Cc_1), ...,
          Rep(Cc_k)],Rep(E_0),Rep(B_t)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a record creation
          <fo:inline font-family="monospace">#Name{Field_1=E_1, ..., Field_k=E_k}</fo:inline>,
          where each <fo:inline font-family="monospace">Field_i</fo:inline> is an atom or <fo:inline font-family="monospace">_</fo:inline>, then Rep(E) =
          <fo:inline font-family="monospace">{record,LINE,Name,[{record_field,LINE,Rep(Field_1),Rep(E_1)},
          ..., {record_field,LINE,Rep(Field_k),Rep(E_k)}]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a record field access <fo:inline font-family="monospace">E_0#Name.Field</fo:inline>,
          where <fo:inline font-family="monospace">Field</fo:inline> is an atom, then Rep(E) =
          <fo:inline font-family="monospace">{record_field,LINE,Rep(E_0),Name,Rep(Field)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a record field index <fo:inline font-family="monospace">#Name.Field</fo:inline>,
          where <fo:inline font-family="monospace">Field</fo:inline> is an atom, then Rep(E) =
          <fo:inline font-family="monospace">{record_index,LINE,Name,Rep(Field)}</fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a record update
          <fo:inline font-family="monospace">E_0#Name{Field_1=E_1, ..., Field_k=E_k}</fo:inline>,
          where each <fo:inline font-family="monospace">Field_i</fo:inline> is an atom, then Rep(E) =
          <fo:inline font-family="monospace">{record,LINE,Rep(E_0),Name,[{record_field,LINE,Rep(Field_1),Rep(E_1)},
      ..., {record_field,LINE,Rep(Field_k),Rep(E_k)}]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a tuple skeleton <fo:inline font-family="monospace">{E_1, ..., E_k}</fo:inline>, then Rep(E) =
          <fo:inline font-family="monospace">{tuple,LINE,[Rep(E_1), ..., Rep(E_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a try expression <fo:inline font-family="monospace">try B catch Tc_1 ; ... ; Tc_k end</fo:inline>,
          where <fo:inline font-family="monospace">B</fo:inline> is a body and each <fo:inline font-family="monospace">Tc_i</fo:inline> is a catch clause,
          then Rep(E) =
          <fo:inline font-family="monospace">{'try',LINE,Rep(B),[],[Rep(Tc_1), ..., Rep(Tc_k)],[]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a try expression
          <fo:inline font-family="monospace">try B of Cc_1 ; ... ; Cc_k catch Tc_1 ; ... ; Tc_n end</fo:inline>,
          where <fo:inline font-family="monospace">B</fo:inline> is a body, each <fo:inline font-family="monospace">Cc_i</fo:inline> is a case clause, and
          each <fo:inline font-family="monospace">Tc_j</fo:inline> is a catch clause, then Rep(E) =
          <fo:inline font-family="monospace">{'try',LINE,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[Rep(Tc_1), ...,
          Rep(Tc_n)],[]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a try expression <fo:inline font-family="monospace">try B after A end</fo:inline>,
          where <fo:inline font-family="monospace">B</fo:inline> and <fo:inline font-family="monospace">A</fo:inline> are bodies, then Rep(E) =
          <fo:inline font-family="monospace">{'try',LINE,Rep(B),[],[],Rep(A)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a try expression
          <fo:inline font-family="monospace">try B of Cc_1 ; ... ; Cc_k after A end</fo:inline>,
          where <fo:inline font-family="monospace">B</fo:inline> and <fo:inline font-family="monospace">A</fo:inline> are a bodies,
          and each <fo:inline font-family="monospace">Cc_i</fo:inline> is a case clause, then Rep(E) =
          <fo:inline font-family="monospace">{'try',LINE,Rep(B),[Rep(Cc_1), ...,
          Rep(Cc_k)],[],Rep(A)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a try expression
          <fo:inline font-family="monospace">try B catch Tc_1 ; ... ; Tc_k after A end</fo:inline>,
          where <fo:inline font-family="monospace">B</fo:inline> and <fo:inline font-family="monospace">A</fo:inline> are bodies,
          and each <fo:inline font-family="monospace">Tc_i</fo:inline> is a catch clause, then Rep(E) =
          <fo:inline font-family="monospace">{'try',LINE,Rep(B),[],[Rep(Tc_1), ...,
          Rep(Tc_k)],Rep(A)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a try expression
          <fo:inline font-family="monospace">try B of Cc_1 ; ... ; Cc_k  catch Tc_1 ; ... ; Tc_n after A
          end</fo:inline>, where <fo:inline font-family="monospace">B</fo:inline> and <fo:inline font-family="monospace">A</fo:inline> are a bodies,
          each <fo:inline font-family="monospace">Cc_i</fo:inline> is a case clause,
          and each <fo:inline font-family="monospace">Tc_j</fo:inline> is a catch clause, then Rep(E) =
          <fo:inline font-family="monospace">{'try',LINE,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[Rep(Tc_1), ...,
          Rep(Tc_n)],Rep(A)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If E is a variable <fo:inline font-family="monospace">V</fo:inline>, then Rep(E) = <fo:inline font-family="monospace">{var,LINE,A}</fo:inline>,
          where <fo:inline font-family="monospace">A</fo:inline> is an atom with a printname consisting of the same
          characters as <fo:inline font-family="monospace">V</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block id="idp4814192" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Qualifiers</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A qualifier Q is one of the following:</fo:block>

      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Q is a filter <fo:inline font-family="monospace">E</fo:inline>, where <fo:inline font-family="monospace">E</fo:inline> is an expression, then
            Rep(Q) = <fo:inline font-family="monospace">Rep(E)</fo:inline>.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Q is a generator <fo:inline font-family="monospace">P &lt;- E</fo:inline>, where <fo:inline font-family="monospace">P</fo:inline> is
            a pattern and <fo:inline font-family="monospace">E</fo:inline> is an expression, then Rep(Q) =
            <fo:inline font-family="monospace">{generate,LINE,Rep(P),Rep(E)}</fo:inline>.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Q is a bitstring generator <fo:inline font-family="monospace">P &lt;= E</fo:inline>, where <fo:inline font-family="monospace">P</fo:inline> is
            a pattern and <fo:inline font-family="monospace">E</fo:inline> is an expression, then Rep(Q) =
            <fo:inline font-family="monospace">{b_generate,LINE,Rep(P),Rep(E)}</fo:inline>.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp4824064" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Bitstring Element Type Specifiers</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A type specifier list TSL for a bitstring element is a sequence
        of type specifiers <fo:inline font-family="monospace">TS_1 - ... - TS_k</fo:inline>, and
        Rep(TSL) = <fo:inline font-family="monospace">[Rep(TS_1), ..., Rep(TS_k)]</fo:inline>.</fo:block>

      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If TS is a type specifier <fo:inline font-family="monospace">A</fo:inline>, where <fo:inline font-family="monospace">A</fo:inline> is an atom,
            then Rep(TS) = <fo:inline font-family="monospace">A</fo:inline>.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If TS is a type specifier <fo:inline font-family="monospace">A:Value</fo:inline>,
            where <fo:inline font-family="monospace">A</fo:inline> is an atom and <fo:inline font-family="monospace">Value</fo:inline> is an integer,
            then Rep(TS) = <fo:inline font-family="monospace">{A,Value}</fo:inline>.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp4832176" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Associations</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An association A is one of the following:</fo:block>

      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
         <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
           <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If A is an association <fo:inline font-family="monospace">K =&gt; V</fo:inline>,
             then Rep(A) = <fo:inline font-family="monospace">{map_field_assoc,LINE,Rep(K),Rep(V)}</fo:inline>.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If A is an association <fo:inline font-family="monospace">K := V</fo:inline>,
            then Rep(A) = <fo:inline font-family="monospace">{map_field_exact,LINE,Rep(K),Rep(V)}</fo:inline>.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    
  <fo:block id="idp4838080" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.5 
      Clauses</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are function clauses, if clauses, case clauses,
      and catch clauses.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A clause C is one of the following:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If C is a case clause <fo:inline font-family="monospace">P -&gt; B</fo:inline>,
          where <fo:inline font-family="monospace">P</fo:inline> is a pattern and <fo:inline font-family="monospace">B</fo:inline> is a body, then
          Rep(C) = <fo:inline font-family="monospace">{clause,LINE,[Rep(P)],[],Rep(B)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If C is a case clause <fo:inline font-family="monospace">P when Gs -&gt; B</fo:inline>,
          where <fo:inline font-family="monospace">P</fo:inline> is a pattern,
          <fo:inline font-family="monospace">Gs</fo:inline> is a guard sequence, and <fo:inline font-family="monospace">B</fo:inline> is a body, then
          Rep(C) = <fo:inline font-family="monospace">{clause,LINE,[Rep(P)],Rep(Gs),Rep(B)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If C is a catch clause <fo:inline font-family="monospace">P -&gt; B</fo:inline>,
          where <fo:inline font-family="monospace">P</fo:inline> is a pattern and <fo:inline font-family="monospace">B</fo:inline> is a body, then
          Rep(C) = <fo:inline font-family="monospace">{clause,LINE,[Rep({throw,P,_})],[],Rep(B)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If C is a catch clause <fo:inline font-family="monospace">X : P -&gt; B</fo:inline>,
          where <fo:inline font-family="monospace">X</fo:inline> is an atomic literal or a variable pattern,
          <fo:inline font-family="monospace">P</fo:inline> is a pattern, and <fo:inline font-family="monospace">B</fo:inline> is a body, then
          Rep(C) = <fo:inline font-family="monospace">{clause,LINE,[Rep({X,P,_})],[],Rep(B)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If C is a catch clause <fo:inline font-family="monospace">P when Gs -&gt; B</fo:inline>,
          where <fo:inline font-family="monospace">P</fo:inline> is a pattern, <fo:inline font-family="monospace">Gs</fo:inline> is a guard sequence,
          and <fo:inline font-family="monospace">B</fo:inline> is a body, then
          Rep(C) = <fo:inline font-family="monospace">{clause,LINE,[Rep({throw,P,_})],Rep(Gs),Rep(B)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If C is a catch clause <fo:inline font-family="monospace">X : P when Gs -&gt; B</fo:inline>,
          where <fo:inline font-family="monospace">X</fo:inline> is an atomic literal or a variable pattern,
          <fo:inline font-family="monospace">P</fo:inline> is a pattern, <fo:inline font-family="monospace">Gs</fo:inline> is a guard sequence,
          and <fo:inline font-family="monospace">B</fo:inline> is a body, then
          Rep(C) = <fo:inline font-family="monospace">{clause,LINE,[Rep({X,P,_})],Rep(Gs),Rep(B)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If C is a function clause <fo:inline font-family="monospace">( Ps ) -&gt; B</fo:inline>,
          where <fo:inline font-family="monospace">Ps</fo:inline> is a pattern sequence and <fo:inline font-family="monospace">B</fo:inline> is a body, then
          Rep(C) = <fo:inline font-family="monospace">{clause,LINE,Rep(Ps),[],Rep(B)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If C is a function clause <fo:inline font-family="monospace">( Ps ) when Gs -&gt; B</fo:inline>,
          where <fo:inline font-family="monospace">Ps</fo:inline> is a pattern sequence,
          <fo:inline font-family="monospace">Gs</fo:inline> is a guard sequence and <fo:inline font-family="monospace">B</fo:inline> is a body, then
          Rep(C) = <fo:inline font-family="monospace">{clause,LINE,Rep(Ps),Rep(Gs),Rep(B)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If C is an if clause <fo:inline font-family="monospace">Gs -&gt; B</fo:inline>,
          where <fo:inline font-family="monospace">Gs</fo:inline> is a guard sequence and <fo:inline font-family="monospace">B</fo:inline> is a body, then
          Rep(C) = <fo:inline font-family="monospace">{clause,LINE,[],Rep(Gs),Rep(B)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp4868112" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.6 
      Guards</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A guard sequence Gs is a sequence of guards <fo:inline font-family="monospace">G_1; ...; G_k</fo:inline>, and
      Rep(Gs) = <fo:inline font-family="monospace">[Rep(G_1), ..., Rep(G_k)]</fo:inline>. If the guard sequence is
      empty, then Rep(Gs) = <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A guard G is a non-empty sequence of guard tests
      <fo:inline font-family="monospace">Gt_1, ..., Gt_k</fo:inline>, and Rep(G) =
      <fo:inline font-family="monospace">[Rep(Gt_1), ..., Rep(Gt_k)]</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A guard test Gt is one of the following:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is an atomic literal <fo:inline font-family="monospace">L</fo:inline>, then Rep(Gt) = Rep(L).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is a bitstring constructor
          <fo:inline font-family="monospace">&lt;&lt;Gt_1:Size_1/TSL_1, ..., Gt_k:Size_k/TSL_k&gt;&gt;</fo:inline>,
          where each <fo:inline font-family="monospace">Size_i</fo:inline> is a guard test and each
          <fo:inline font-family="monospace">TSL_i</fo:inline> is a type specificer list, then Rep(Gt) =
          <fo:inline font-family="monospace">{bin,LINE,[{bin_element,LINE,Rep(Gt_1),Rep(Size_1),Rep(TSL_1)},
          ..., {bin_element,LINE,Rep(Gt_k),Rep(Size_k),Rep(TSL_k)}]}</fo:inline>.
          For Rep(TSL), see above.
          An omitted <fo:inline font-family="monospace">Size_i</fo:inline> is represented by <fo:inline font-family="monospace">default</fo:inline>.
          An omitted <fo:inline font-family="monospace">TSL_i</fo:inline> is represented by <fo:inline font-family="monospace">default</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is a cons skeleton <fo:inline font-family="monospace">[Gt_h | Gt_t]</fo:inline>, then Rep(Gt) =
          <fo:inline font-family="monospace">{cons,LINE,Rep(Gt_h),Rep(Gt_t)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is a function call <fo:inline font-family="monospace">A(Gt_1, ..., Gt_k)</fo:inline>,
          where <fo:inline font-family="monospace">A</fo:inline> is an atom, then Rep(Gt) =
          <fo:inline font-family="monospace">{call,LINE,Rep(A),[Rep(Gt_1), ..., Rep(Gt_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is a function call <fo:inline font-family="monospace">A_m:A(Gt_1, ..., Gt_k)</fo:inline>,
          where <fo:inline font-family="monospace">A_m</fo:inline> is the atom <fo:inline font-family="monospace">erlang</fo:inline> and <fo:inline font-family="monospace">A</fo:inline> is
          an atom or an operator, then Rep(Gt) =
          <fo:inline font-family="monospace">{call,LINE,{remote,LINE,Rep(A_m),Rep(A)},[Rep(Gt_1), ...,
          Rep(Gt_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is a map creation <fo:inline font-family="monospace">#{A_1, ..., A_k}</fo:inline>,
          where each <fo:inline font-family="monospace">A_i</fo:inline> is an association <fo:inline font-family="monospace">Gt_i_1 =&gt; Gt_i_2</fo:inline>
          or <fo:inline font-family="monospace">Gt_i_1 := Gt_i_2</fo:inline>, then Rep(Gt) =
          <fo:inline font-family="monospace">{map,LINE,[Rep(A_1), ..., Rep(A_k)]}</fo:inline>.
          For Rep(A), see above.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is a map update <fo:inline font-family="monospace">Gt_0#{A_1, ..., A_k}</fo:inline>,
          where each <fo:inline font-family="monospace">A_i</fo:inline> is an association <fo:inline font-family="monospace">Gt_i_1 =&gt; Gt_i_2</fo:inline>
          or <fo:inline font-family="monospace">Gt_i_1 := Gt_i_2</fo:inline>, then Rep(Gt) =
          <fo:inline font-family="monospace">{map,LINE,Rep(Gt_0),[Rep(A_1), ..., Rep(A_k)]}</fo:inline>.
          For Rep(A), see above.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is nil, <fo:inline font-family="monospace">[]</fo:inline>, then Rep(Gt) = <fo:inline font-family="monospace">{nil,LINE}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is an operator guard test <fo:inline font-family="monospace">Gt_1 Op Gt_2</fo:inline>,
          where <fo:inline font-family="monospace">Op</fo:inline> is a binary operator other than match
          operator <fo:inline font-family="monospace">=</fo:inline>, then Rep(Gt) =
          <fo:inline font-family="monospace">{op,LINE,Op,Rep(Gt_1),Rep(Gt_2)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is an operator guard test <fo:inline font-family="monospace">Op Gt_0</fo:inline>,
          where <fo:inline font-family="monospace">Op</fo:inline> is a unary operator, then Rep(Gt) =
          <fo:inline font-family="monospace">{op,LINE,Op,Rep(Gt_0)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is a parenthesized guard test <fo:inline font-family="monospace">( Gt_0 )</fo:inline>, then Rep(Gt) =
          <fo:inline font-family="monospace">Rep(Gt_0)</fo:inline>, that is, parenthesized
          guard tests cannot be distinguished from their bodies.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is a record creation
          <fo:inline font-family="monospace">#Name{Field_1=Gt_1, ..., Field_k=Gt_k}</fo:inline>,
           where each <fo:inline font-family="monospace">Field_i</fo:inline> is an atom or <fo:inline font-family="monospace">_</fo:inline>, then Rep(Gt) =
           <fo:inline font-family="monospace">{record,LINE,Name,[{record_field,LINE,Rep(Field_1),Rep(Gt_1)},
           ..., {record_field,LINE,Rep(Field_k),Rep(Gt_k)}]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is  a record field access <fo:inline font-family="monospace">Gt_0#Name.Field</fo:inline>,
          where <fo:inline font-family="monospace">Field</fo:inline> is an atom, then Rep(Gt) =
          <fo:inline font-family="monospace">{record_field,LINE,Rep(Gt_0),Name,Rep(Field)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is a record field index <fo:inline font-family="monospace">#Name.Field</fo:inline>,
          where <fo:inline font-family="monospace">Field</fo:inline> is an atom, then Rep(Gt) =
          <fo:inline font-family="monospace">{record_index,LINE,Name,Rep(Field)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is a tuple skeleton <fo:inline font-family="monospace">{Gt_1, ..., Gt_k}</fo:inline>, then Rep(Gt) =
          <fo:inline font-family="monospace">{tuple,LINE,[Rep(Gt_1), ..., Rep(Gt_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Gt is a variable pattern <fo:inline font-family="monospace">V</fo:inline>, then Rep(Gt) =
          <fo:inline font-family="monospace">{var,LINE,A}</fo:inline>, where A is an atom with
          a printname consisting of the same characters as <fo:inline font-family="monospace">V</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that every guard test has the same source form as some expression,
      and is represented in the same way as the corresponding expression.</fo:block>
  <fo:block id="idp4914400" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.7 
      Types</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is an annotated type <fo:inline font-family="monospace">A :: T_0</fo:inline>,
          where <fo:inline font-family="monospace">A</fo:inline> is a variable, then Rep(T) =
          <fo:inline font-family="monospace">{ann_type,LINE,[Rep(A),Rep(T_0)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is an atom or integer literal L, then Rep(T) = Rep(L).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is a bitstring type <fo:inline font-family="monospace">&lt;&lt;_:M,_:_*N&gt;&gt;</fo:inline>,
          where <fo:inline font-family="monospace">M</fo:inline> and <fo:inline font-family="monospace">N</fo:inline> are singleton integer types, then Rep(T) =
          <fo:inline font-family="monospace">{type,LINE,binary,[Rep(M),Rep(N)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is the empty list type <fo:inline font-family="monospace">[]</fo:inline>, then Rep(T) =
          <fo:inline font-family="monospace">{type,Line,nil,[]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is a fun type <fo:inline font-family="monospace">fun()</fo:inline>, then Rep(T) =
          <fo:inline font-family="monospace">{type,LINE,'fun',[]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is a fun type <fo:inline font-family="monospace">fun((...) -&gt; T_0)</fo:inline>, then Rep(T) =
          <fo:inline font-family="monospace">{type,LINE,'fun',[{type,LINE,any},Rep(T_0)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is a fun type <fo:inline font-family="monospace">fun(Ft)</fo:inline>, where
          <fo:inline font-family="monospace">Ft</fo:inline> is a function type, then Rep(T) = <fo:inline font-family="monospace">Rep(Ft)</fo:inline>.
          For Rep(Ft), see below.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is an integer range type <fo:inline font-family="monospace">L .. H</fo:inline>,
          where <fo:inline font-family="monospace">L</fo:inline> and <fo:inline font-family="monospace">H</fo:inline> are singleton integer types, then Rep(T) =
          <fo:inline font-family="monospace">{type,LINE,range,[Rep(L),Rep(H)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is a map type <fo:inline font-family="monospace">map()</fo:inline>, then Rep(T) =
          <fo:inline font-family="monospace">{type,LINE,map,any}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is a map type <fo:inline font-family="monospace">#{A_1, ..., A_k}</fo:inline>, where each
          <fo:inline font-family="monospace">A_i</fo:inline> is an association type, then Rep(T) =
          <fo:inline font-family="monospace">{type,LINE,map,[Rep(A_1), ..., Rep(A_k)]}</fo:inline>.
          For Rep(A), see below.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is an operator type <fo:inline font-family="monospace">T_1 Op T_2</fo:inline>,
          where <fo:inline font-family="monospace">Op</fo:inline> is a binary operator (this is an occurrence of
          an expression that can be evaluated to an integer at compile
          time), then Rep(T) =
          <fo:inline font-family="monospace">{op,LINE,Op,Rep(T_1),Rep(T_2)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is an operator type <fo:inline font-family="monospace">Op T_0</fo:inline>, where <fo:inline font-family="monospace">Op</fo:inline> is a
          unary operator (this is an occurrence of an expression that can
          be evaluated to an integer at compile time), then Rep(T) =
          <fo:inline font-family="monospace">{op,LINE,Op,Rep(T_0)}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is <fo:inline font-family="monospace">( T_0 )</fo:inline>, then Rep(T) = <fo:inline font-family="monospace">Rep(T_0)</fo:inline>, that is,
          parenthesized types cannot be distinguished from their bodies.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is a predefined (or built-in) type <fo:inline font-family="monospace">N(T_1, ..., T_k)</fo:inline>,
          then Rep(T) = <fo:inline font-family="monospace">{type,LINE,N,[Rep(T_1), ..., Rep(T_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is a record type <fo:inline font-family="monospace">#Name{F_1, ..., F_k}</fo:inline>,
          where each <fo:inline font-family="monospace">F_i</fo:inline> is a record field type, then Rep(T) =
          <fo:inline font-family="monospace">{type,LINE,record,[Rep(Name),Rep(F_1), ..., Rep(F_k)]}</fo:inline>.
          For Rep(F), see below.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is a remote type <fo:inline font-family="monospace">M:N(T_1, ..., T_k)</fo:inline>, then Rep(T) =
          <fo:inline font-family="monospace">{remote_type,LINE,[Rep(M),Rep(N),[Rep(T_1), ...,
          Rep(T_k)]]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is a tuple type <fo:inline font-family="monospace">tuple()</fo:inline>, then Rep(T) =
          <fo:inline font-family="monospace">{type,LINE,tuple,any}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is a tuple type <fo:inline font-family="monospace">{T_1, ..., T_k}</fo:inline>, then Rep(T) =
          <fo:inline font-family="monospace">{type,LINE,tuple,[Rep(T_1), ..., Rep(T_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is a type union <fo:inline font-family="monospace">T_1 | ... | T_k</fo:inline>, then Rep(T) =
          <fo:inline font-family="monospace">{type,LINE,union,[Rep(T_1), ..., Rep(T_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is a type variable <fo:inline font-family="monospace">V</fo:inline>, then Rep(T) =
          <fo:inline font-family="monospace">{var,LINE,A}</fo:inline>, where <fo:inline font-family="monospace">A</fo:inline> is an atom with a printname
          consisting of the same characters as <fo:inline font-family="monospace">V</fo:inline>. A type variable
          is any variable except underscore (<fo:inline font-family="monospace">_</fo:inline>).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If T is a user-defined type <fo:inline font-family="monospace">N(T_1, ..., T_k)</fo:inline>, then Rep(T) =
          <fo:inline font-family="monospace">{user_type,LINE,N,[Rep(T_1), ..., Rep(T_k)]}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block id="idp4959808" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Function Types</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A function type Ft is one of the following:</fo:block>

      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Ft is a constrained function type <fo:inline font-family="monospace">Ft_1 when Fc</fo:inline>,
            where <fo:inline font-family="monospace">Ft_1</fo:inline> is a function type and
            <fo:inline font-family="monospace">Fc</fo:inline> is a function constraint, then Rep(T) =
            <fo:inline font-family="monospace">{type,LINE,bounded_fun,[Rep(Ft_1),Rep(Fc)]}</fo:inline>.
            For Rep(Fc), see below.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Ft is a function type <fo:inline font-family="monospace">(T_1, ..., T_n) -&gt; T_0</fo:inline>,
            where each <fo:inline font-family="monospace">T_i</fo:inline> is a type, then Rep(Ft) =
            <fo:inline font-family="monospace">{type,LINE,'fun',[{type,LINE,product,[Rep(T_1), ...,
            Rep(T_n)]},Rep(T_0)]}</fo:inline>.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp4967056" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Function Constraints</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A function constraint Fc is a non-empty sequence of constraints
        <fo:inline font-family="monospace">C_1, ..., C_k</fo:inline>, and
        Rep(Fc) = <fo:inline font-family="monospace">[Rep(C_1), ..., Rep(C_k)]</fo:inline>.</fo:block>

      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If C is a constraint <fo:inline font-family="monospace">V :: T</fo:inline>,
          where <fo:inline font-family="monospace">V</fo:inline> is a type variable
          and <fo:inline font-family="monospace">T</fo:inline> is a type, then Rep(C) =
          <fo:inline font-family="monospace">{type,LINE,constraint,[{atom,LINE,is_subtype},[Rep(V),Rep(T)]]}</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp4972432" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Association Types</fo:block>
      
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If A is an association type <fo:inline font-family="monospace">K =&gt; V</fo:inline>,
            where <fo:inline font-family="monospace">K</fo:inline> and <fo:inline font-family="monospace">V</fo:inline> are types, then Rep(A) =
            <fo:inline font-family="monospace">{type,LINE,map_field_assoc,[Rep(K),Rep(V)]}</fo:inline>.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If A is an association type <fo:inline font-family="monospace">K := V</fo:inline>,
            where <fo:inline font-family="monospace">K</fo:inline> and <fo:inline font-family="monospace">V</fo:inline> are types, then Rep(A) =
            <fo:inline font-family="monospace">{type,LINE,map_field_exact,[Rep(K),Rep(V)]}</fo:inline>.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp4979552" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Record Field Types</fo:block>
      
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If F is a record field type <fo:inline font-family="monospace">Name :: Type</fo:inline>,
          where <fo:inline font-family="monospace">Type</fo:inline> is a type, then Rep(F) =
          <fo:inline font-family="monospace">{type,LINE,field_type,[Rep(Name),Rep(Type)]}</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    
  <fo:block id="idp4983184" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.8 
      The Abstract Format after Preprocessing</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compilation option <fo:inline font-family="monospace">debug_info</fo:inline> can be specified to the
      compiler to have the abstract code stored in
      the <fo:inline font-family="monospace">abstract_code</fo:inline> chunk in the Beam file
      (for debugging purposes).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from Erlang/OTP R9C, the <fo:inline font-family="monospace">abstract_code</fo:inline> chunk contains
      <fo:inline font-family="monospace">{raw_abstract_v1,AbstractCode}</fo:inline>, where <fo:inline font-family="monospace">AbstractCode</fo:inline> is the
      abstract code as described in this section.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In OTP releases before R9C, the abstract code after some more
      processing was stored in the Beam file. The first element of the
      tuple would be either <fo:inline font-family="monospace">abstract_v1</fo:inline> (in OTP R7B) or
      <fo:inline font-family="monospace">abstract_v2</fo:inline> (in OTP R8B).</fo:block>
  <fo:block id="idp4992816" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.8  tty - A Command-Line Interface</fo:marker>1.8  tty - A Command-Line Interface</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">tty</fo:inline> is a simple command-line interface program where
    keystrokes are collected and interpreted. Completed lines are sent to the
    shell for interpretation. A simple history mechanism saves previous lines,
    which can be edited before sending them to the shell. <fo:inline font-family="monospace">tty</fo:inline>
    is started when Erlang is started with the following command:</fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">tty</fo:inline> operates in one of two modes:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normal mode, in which text lines can be edited and sent to the
      shell.</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shell break mode, which allows the user to kill the current shell,
        start multiple shells, and so on.</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block id="idp5002192" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.1 
      Normal Mode</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In normal mode keystrokes from the user are collected and interpreted by
      <fo:inline font-family="monospace">tty</fo:inline>. Most of the <fo:inline font-weight="bold">Emacs</fo:inline> line-editing commands
      are supported. The following is a complete list of the supported
      line-editing commands.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typographic conventions:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">C-a</fo:inline> means pressing the <fo:inline font-weight="bold">Ctrl</fo:inline> key and the letter
        <fo:inline font-family="monospace">a</fo:inline> simultaneously.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">M-f</fo:inline> means pressing the <fo:inline font-weight="bold">Esc</fo:inline> key and the letter
        <fo:inline font-family="monospace">f</fo:inline> in sequence.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Home</fo:inline> and <fo:inline font-family="monospace">End</fo:inline> represent the keys with the same
        name on the keyboard.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Left</fo:inline> and <fo:inline font-family="monospace">Right</fo:inline> represent the corresponding arrow
        keys.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Key Sequence</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Function</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Home</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Beginning of line</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-a</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Beginning of line</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-b</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Backward character</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-Left</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Backward word</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">M-b</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Backward word</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-d</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Delete character</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">M-d</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Delete word</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">End</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">End of line</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-e</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">End of line</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-f</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Forward character</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-Right</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Forward word</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">M-f</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Forward word</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-g</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Enter shell break mode</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-k</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Kill line</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-u</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Backward kill line</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-l</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Redraw line</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-n</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Fetch next line from the history
          buffer</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-p</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Fetch previous line from the history
          buffer</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-t</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Transpose characters</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-w</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Backward kill word</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">C-y</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Insert previously killed text</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        8.1:
         
        tty Text Editing</fo:block>
  <fo:block id="idp5066544" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.2 
      Shell Break Mode</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this mode the following can be done:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Kill or suspend the current shell</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Connect to a suspended shell</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Start a new shell</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp5073920" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.9  How to Implement a Driver</fo:marker>1.9  How to Implement a Driver</fo:block><fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section was written a long time ago. Most of it is still
      valid, as it explains important concepts, but this was
      written for an older driver interface so the examples do not
      work anymore. The reader is encouraged to read the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_driver</fo:inline></fo:inline> and
      <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_entry</fo:inline></fo:inline>
      documentation also.</fo:block>
  </fo:block><fo:block id="idp5079760" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes how to build your own driver for Erlang.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A driver in Erlang is a library written in C, which is linked to
      the Erlang emulator and called from Erlang. Drivers can be used
      when C is more suitable than Erlang, to speed up things, or to
      provide access to OS resources not directly accessible from Erlang.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A driver can be dynamically loaded, as a shared library (known as
      a DLL on Windows), or statically loaded, linked with the emulator
      when it is compiled and linked. Only dynamically loaded drivers
      are described here, statically linked drivers are beyond the scope
      of this section.</fo:block>

    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a driver is loaded it is executed in the context of the
        emulator, shares the same memory and the same thread. This means
        that all operations in the driver must be non-blocking, and that
        any crash in the driver brings the whole emulator down. In short,
        be careful.</fo:block>
    </fo:block>
  <fo:block id="idp5083776" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.2 
      Sample Driver</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes a simple driver for accessing a postgres
      database using the libpq C client library. Postgres
      is used because it is free and open source. For information on postgres,
      see <fo:inline font-weight="bold"><fo:basic-link external-destination="href">www.postgres.org</fo:basic-link></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver is synchronous, it uses the synchronous calls of
      the client library. This is only for simplicity, but not good, as it
      halts the emulator while waiting for the database.
      This is improved below with an asynchronous sample driver.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code is straightforward: all
      communication between Erlang and the driver
      is done with <fo:inline font-family="monospace">port_control/3</fo:inline>, and the
      driver returns data back using the <fo:inline font-family="monospace">rbuf</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang driver only exports one function: the driver
      entry function. This is defined with a macro,
      <fo:inline font-family="monospace">DRIVER_INIT</fo:inline>, which returns a pointer to a
      C <fo:inline font-family="monospace">struct</fo:inline> containing the entry points that are
      called from the emulator. The <fo:inline font-family="monospace">struct</fo:inline> defines the
      entries that the emulator calls to call the driver, with
      a <fo:inline font-family="monospace">NULL</fo:inline> pointer for entries that are not defined
      and used by the driver.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">start</fo:inline> entry is called when the driver
      is opened as a port with <fo:inline font-family="monospace">open_port/2</fo:inline>. Here
      we allocate memory for a user data structure.
      This user data is passed every time the emulator
      calls us. First we store the driver handle, as it
      is needed in later calls. We allocate memory for
      the connection handle that is used by LibPQ. We also
      set the port to return allocated driver binaries, by
      setting flag <fo:inline font-family="monospace">PORT_CONTROL_FLAG_BINARY</fo:inline>, calling
      <fo:inline font-family="monospace">set_port_control_flags</fo:inline>. (This is because
      we do not know if our data will fit in the
      result buffer of <fo:inline font-family="monospace">control</fo:inline>, which has a default size,
      64 bytes, set up by the emulator.)</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An entry <fo:inline font-family="monospace">init</fo:inline> is called when
      the driver is loaded. However, we do not use this, as
      it is executed only once, and we want to have the
      possibility of several instances of the driver.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">stop</fo:inline> entry is called when the port
      is closed.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">control</fo:inline> entry is called from the emulator
      when the Erlang code calls <fo:inline font-family="monospace">port_control/3</fo:inline>,
      to do the actual work. We have defined a simple set of
      commands: <fo:inline font-family="monospace">connect</fo:inline> to log in to the database,
      <fo:inline font-family="monospace">disconnect</fo:inline> to log out, and <fo:inline font-family="monospace">select</fo:inline>
      to send a SQL-query and get the result.
      All results are returned through <fo:inline font-family="monospace">rbuf</fo:inline>.
      The library <fo:inline font-family="monospace">ei</fo:inline> in <fo:inline font-family="monospace">erl_interface</fo:inline> is
      used to encode data in binary term format. The result is returned
      to the emulator as binary terms, so <fo:inline font-family="monospace">binary_to_term</fo:inline>
      is called in Erlang to convert the result to term form.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code is available in <fo:inline font-family="monospace">pg_sync.c</fo:inline> in the
      <fo:inline font-family="monospace">sample</fo:inline> directory of <fo:inline font-family="monospace">erts</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver entry contains the functions that
      will be called by the emulator. In this example,
      only <fo:inline font-family="monospace">start</fo:inline>, <fo:inline font-family="monospace">stop</fo:inline>,
      and <fo:inline font-family="monospace">control</fo:inline> are provided:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
/* Driver interface declarations */
static ErlDrvData start(ErlDrvPort port, char *command);
static void stop(ErlDrvData drv_data);
static int control(ErlDrvData drv_data, unsigned int command, char *buf, 
                   int len, char **rbuf, int rlen); 

static ErlDrvEntry pq_driver_entry = {
    NULL,                        /* init */
    start,
    stop,
    NULL,                        /* output */
    NULL,                        /* ready_input */
    NULL,                        /* ready_output */
    "pg_sync",                   /* the name of the driver */
    NULL,                        /* finish */
    NULL,                        /* handle */
    control,
    NULL,                        /* timeout */
    NULL,                        /* outputv */
    NULL,                        /* ready_async */
    NULL,                        /* flush */
    NULL,                        /* call */
    NULL                         /* event */
};
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We have a structure to store state needed by the driver,
      in this case we only need to keep the database connection:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef struct our_data_s {
    PGconn* conn;
} our_data_t;
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The control codes that we have defined are as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
/* Keep the following definitions in alignment with the
 * defines in erl_pq_sync.erl
 */

#define DRV_CONNECT             'C'
#define DRV_DISCONNECT          'D'
#define DRV_SELECT              'S'
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This returns the driver structure. The macro
      <fo:inline font-family="monospace">DRIVER_INIT</fo:inline> defines the only exported function.
      All the other functions are static, and will not be exported
      from the library.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
/* INITIALIZATION AFTER LOADING */

/* 
 * This is the init function called after this driver has been loaded.
 * It must *not* be declared static. Must return the address to 
 * the driver entry.
 */

DRIVER_INIT(pq_drv)
{
    return &amp;pq_driver_entry;
}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here some initialization is done, <fo:inline font-family="monospace">start</fo:inline> is called from
      <fo:inline font-family="monospace">open_port</fo:inline>. The data will be passed to
      <fo:inline font-family="monospace">control</fo:inline> and <fo:inline font-family="monospace">stop</fo:inline>.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
/* DRIVER INTERFACE */
static ErlDrvData start(ErlDrvPort port, char *command)
{ 
    our_data_t* data;

    data = (our_data_t*)driver_alloc(sizeof(our_data_t));
    data-&gt;conn = NULL;
    set_port_control_flags(port, PORT_CONTROL_FLAG_BINARY);
    return (ErlDrvData)data;
}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We call disconnect to log out from the database.
      (This should have been done from Erlang, but just in case.)</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
static int do_disconnect(our_data_t* data, ei_x_buff* x);

static void stop(ErlDrvData drv_data)
{
    our_data_t* data = (our_data_t*)drv_data;

    do_disconnect(data, NULL);
    driver_free(data);
}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We use the binary format only to return data to the emulator;
      input data is a string parameter for <fo:inline font-family="monospace">connect</fo:inline> and
      <fo:inline font-family="monospace">select</fo:inline>. The returned data consists of Erlang terms.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions <fo:inline font-family="monospace">get_s</fo:inline> and
      <fo:inline font-family="monospace">ei_x_to_new_binary</fo:inline> are utilities that are used to
      make the code shorter. <fo:inline font-family="monospace">get_s</fo:inline>
      duplicates the string and zero-terminates it, as the
      postgres client library wants that. <fo:inline font-family="monospace">ei_x_to_new_binary</fo:inline>
      takes an <fo:inline font-family="monospace">ei_x_buff</fo:inline> buffer, allocates a binary, and
      copies the data there. This binary is returned in
      <fo:inline font-family="monospace">*rbuf</fo:inline>.
      (Notice that this binary is freed by the emulator, not by us.)</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
static char* get_s(const char* buf, int len);
static int do_connect(const char *s, our_data_t* data, ei_x_buff* x);
static int do_select(const char* s, our_data_t* data, ei_x_buff* x);

/* As we are operating in binary mode, the return value from control
 * is irrelevant, as long as it is not negative.
 */
static int control(ErlDrvData drv_data, unsigned int command, char *buf, 
                   int len, char **rbuf, int rlen)
{
    int r;
    ei_x_buff x;
    our_data_t* data = (our_data_t*)drv_data;
    char* s = get_s(buf, len);
    ei_x_new_with_version(&amp;x);
    switch (command) {
        case DRV_CONNECT:    r = do_connect(s, data, &amp;x);  break;
        case DRV_DISCONNECT: r = do_disconnect(data, &amp;x);  break;
        case DRV_SELECT:     r = do_select(s, data, &amp;x);   break;
        default:             r = -1;        break;
    }
    *rbuf = (char*)ei_x_to_new_binary(&amp;x);
    ei_x_free(&amp;x);
    driver_free(s);
    return r;
}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">do_connect</fo:inline> is where we log in to the database. If the
      connection was successful, we store the connection handle in the driver
      data, and return <fo:inline font-family="monospace">'ok'</fo:inline>. Otherwise, we return the error message
      from postgres and store <fo:inline font-family="monospace">NULL</fo:inline> in the driver data.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
static int do_connect(const char *s, our_data_t* data, ei_x_buff* x)
{
    PGconn* conn = PQconnectdb(s);
    if (PQstatus(conn) != CONNECTION_OK) {
        encode_error(x, conn);
        PQfinish(conn);
        conn = NULL;
    } else {
        encode_ok(x);
    }
    data-&gt;conn = conn;
    return 0;
}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If we are connected (and if the connection handle is not
      <fo:inline font-family="monospace">NULL</fo:inline>),
      we log out from the database. We need to check if we should
      encode an <fo:inline font-family="monospace">'ok'</fo:inline>, as we can get here from function
      <fo:inline font-family="monospace">stop</fo:inline>, which does not return data to the emulator:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
static int do_disconnect(our_data_t* data, ei_x_buff* x)
{
    if (data-&gt;conn == NULL)
        return 0;
    PQfinish(data-&gt;conn);
    data-&gt;conn = NULL;
    if (x != NULL)
        encode_ok(x);
    return 0;
}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We execute a query and encode the result. Encoding is done in
      another C module, <fo:inline font-family="monospace">pg_encode.c</fo:inline>, which is also provided
      as sample code.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
static int do_select(const char* s, our_data_t* data, ei_x_buff* x)
{
   PGresult* res = PQexec(data-&gt;conn, s);
    encode_result(x, res, data-&gt;conn);
    PQclear(res);
    return 0;
}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here we check the result from postgres.
      If it is data, we encode it as lists of lists with
      column data. Everything from postgres is C strings,
      so we use <fo:inline font-family="monospace">ei_x_encode_string</fo:inline> to send
      the result as strings to Erlang. (The head of the list
      contains the column names.)</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
void encode_result(ei_x_buff* x, PGresult* res, PGconn* conn)
{
    int row, n_rows, col, n_cols;
    switch (PQresultStatus(res)) {
    case PGRES_TUPLES_OK: 
        n_rows = PQntuples(res); 
        n_cols = PQnfields(res); 
        ei_x_encode_tuple_header(x, 2);
        encode_ok(x);
        ei_x_encode_list_header(x, n_rows+1);
        ei_x_encode_list_header(x, n_cols);
        for (col = 0; col &lt; n_cols; ++col) {
            ei_x_encode_string(x, PQfname(res, col));
        }
        ei_x_encode_empty_list(x); 
        for (row = 0; row &lt; n_rows; ++row) {
            ei_x_encode_list_header(x, n_cols);
            for (col = 0; col &lt; n_cols; ++col) {
                ei_x_encode_string(x, PQgetvalue(res, row, col));
            }
            ei_x_encode_empty_list(x);
        }
        ei_x_encode_empty_list(x); 
        break; 
    case PGRES_COMMAND_OK:
        ei_x_encode_tuple_header(x, 2);
        encode_ok(x);
        ei_x_encode_string(x, PQcmdTuples(res));
        break;
    default:
        encode_error(x, conn);
        break;
    }
}
    </fo:block>
  <fo:block id="idp5132592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.3 
      Compiling and Linking the Sample Driver</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver is to be compiled and linked to a shared
      library (DLL on Windows). With gcc, this is done with
      link flags <fo:inline font-family="monospace">-shared</fo:inline> and <fo:inline font-family="monospace">-fpic</fo:inline>.
      As we use the <fo:inline font-family="monospace">ei</fo:inline> library, we should include
      it too. There are several versions of <fo:inline font-family="monospace">ei</fo:inline>, compiled
      for debug or non-debug and multi-threaded or single-threaded.
      In the makefile for the samples, the <fo:inline font-family="monospace">obj</fo:inline> directory
      is used for the <fo:inline font-family="monospace">ei</fo:inline> library, meaning that we use
      the non-debug, single-threaded version.</fo:block>
  <fo:block id="idp5137008" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.4 
      Calling a Driver as a Port in Erlang</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before a driver can be called from Erlang, it must be
      loaded and opened. Loading is done using the <fo:inline font-family="monospace">erl_ddll</fo:inline>
      module (the <fo:inline font-family="monospace">erl_ddll</fo:inline> driver that loads dynamic
      driver is actually a driver itself). If loading is successfull,
      the port can be opened with <fo:inline font-family="monospace">open_port/2</fo:inline>. The port
      name must match the name of the shared library and
      the name in the driver entry structure.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the port has been opened, the driver can be called. In
      the <fo:inline font-family="monospace">pg_sync</fo:inline> example, we do not have any data from
      the port, only the return value from the
      <fo:inline font-family="monospace">port_control</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following code is the Erlang part of the synchronous
      postgres driver, <fo:inline font-family="monospace">pg_sync.erl</fo:inline>:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(pg_sync).

-define(DRV_CONNECT, 1).
-define(DRV_DISCONNECT, 2).
-define(DRV_SELECT, 3).

-export([connect/1, disconnect/1, select/2]).

connect(ConnectStr) -&gt;
    case erl_ddll:load_driver(".", "pg_sync") of
        ok -&gt; ok;
        {error, already_loaded} -&gt; ok;
        E -&gt; exit({error, E})
    end,
    Port = open_port({spawn, ?MODULE}, []),
    case binary_to_term(port_control(Port, ?DRV_CONNECT, ConnectStr)) of
        ok -&gt; {ok, Port};
        Error -&gt; Error
    end.

disconnect(Port) -&gt;
    R = binary_to_term(port_control(Port, ?DRV_DISCONNECT, "")),
    port_close(Port),
    R.

select(Port, Query) -&gt;
    binary_to_term(port_control(Port, ?DRV_SELECT, Query)).
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The API is simple:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">connect/1</fo:inline> loads the driver, opens it,
          and logs on to the database, returning the Erlang port
          if successful.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">select/2</fo:inline> sends a query to the driver
          and returns the result.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">disconnect/1</fo:inline> closes the database
          connection and the driver. (However, it does not unload it.)</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The connection string is to be a connection string for postgres.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver is loaded with <fo:inline font-family="monospace">erl_ddll:load_driver/2</fo:inline>.
      If this is successful, or if it is already loaded,
      it is opened. This will call the <fo:inline font-family="monospace">start</fo:inline> function
      in the driver.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We use the <fo:inline font-family="monospace">port_control/3</fo:inline> function for all
      calls into the driver. The result from the driver is
      returned immediately and converted to terms by calling
      <fo:inline font-family="monospace">binary_to_term/1</fo:inline>. (We trust that the terms returned
      from the driver are well-formed, otherwise the
      <fo:inline font-family="monospace">binary_to_term</fo:inline> calls could be contained in a
      <fo:inline font-family="monospace">catch</fo:inline>.)</fo:block>
  <fo:block id="idp5153200" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.5 
      Sample Asynchronous Driver</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sometimes database queries can take a long time to
      complete, in our <fo:inline font-family="monospace">pg_sync</fo:inline> driver, the emulator
      halts while the driver is doing its job. This is
      often not acceptable, as no other Erlang process
      gets a chance to do anything. To improve on our
      postgres driver, we re-implement it using the asynchronous
      calls in LibPQ.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The asynchronous version of the driver is in the sample files
      <fo:inline font-family="monospace">pg_async.c</fo:inline> and <fo:inline font-family="monospace">pg_asyng.erl</fo:inline>.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
/* Driver interface declarations */
static ErlDrvData start(ErlDrvPort port, char *command);
static void stop(ErlDrvData drv_data);
static int control(ErlDrvData drv_data, unsigned int command, char *buf, 
                   int len, char **rbuf, int rlen); 
static void ready_io(ErlDrvData drv_data, ErlDrvEvent event);

static ErlDrvEntry pq_driver_entry = {
    NULL,                     /* init */
    start, 
    stop, 
    NULL,                     /* output */
    ready_io,                 /* ready_input */
    ready_io,                 /* ready_output */ 
    "pg_async",               /* the name of the driver */
    NULL,                     /* finish */
    NULL,                     /* handle */
    control, 
    NULL,                     /* timeout */
    NULL,                     /* outputv */
    NULL,                     /* ready_async */
    NULL,                     /* flush */
    NULL,                     /* call */
    NULL                      /* event */
};

typedef struct our_data_t {
    PGconn* conn;
    ErlDrvPort port;
    int socket;
    int connecting;
} our_data_t;
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some things have changed from <fo:inline font-family="monospace">pg_sync.c</fo:inline>: we use
      the entry <fo:inline font-family="monospace">ready_io</fo:inline> for <fo:inline font-family="monospace">ready_input</fo:inline>
      and <fo:inline font-family="monospace">ready_output</fo:inline>, which is called from the emulator
      only when there is input to be read from the socket. (Actually, the
      socket is used in a <fo:inline font-family="monospace">select</fo:inline> function inside
      the emulator, and when the socket is signaled,
      indicating there is data to read, the <fo:inline font-family="monospace">ready_input</fo:inline>
      entry is called. More about this below.)</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Our driver data is also extended, we keep track of the
      socket used for communication with postgres, and also
      the port, which is needed when we send data to the port with
      <fo:inline font-family="monospace">driver_output</fo:inline>. We have a flag
      <fo:inline font-family="monospace">connecting</fo:inline> to tell
      whether the driver is waiting for a connection or waiting
      for the result of a query. (This is needed, as the entry
      <fo:inline font-family="monospace">ready_io</fo:inline> is called both when connecting and
      when there is a query result.)</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
static int do_connect(const char *s, our_data_t* data)
{
    PGconn* conn = PQconnectStart(s);
    if (PQstatus(conn) == CONNECTION_BAD) {
        ei_x_buff x;
        ei_x_new_with_version(&amp;x);
        encode_error(&amp;x, conn);
        PQfinish(conn);
        conn = NULL;
        driver_output(data-&gt;port, x.buff, x.index);
        ei_x_free(&amp;x);
    }
    PQconnectPoll(conn);
    int socket = PQsocket(conn);
    data-&gt;socket = socket;
    driver_select(data-&gt;port, (ErlDrvEvent)socket, DO_READ, 1);
    driver_select(data-&gt;port, (ErlDrvEvent)socket, DO_WRITE, 1);
    data-&gt;conn = conn;
    data-&gt;connecting = 1;
    return 0;
}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">connect</fo:inline> function looks a bit different too. We
      connect using the asynchronous <fo:inline font-family="monospace">PQconnectStart</fo:inline> function.
      After the connection is started, we retrieve the socket for the connection
      with <fo:inline font-family="monospace">PQsocket</fo:inline>. This socket is used with the
      <fo:inline font-family="monospace">driver_select</fo:inline> function to wait for connection. When
      the socket is ready for input or for output, the
      <fo:inline font-family="monospace">ready_io</fo:inline> function is called.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that we only return data (with <fo:inline font-family="monospace">driver_output</fo:inline>)
      if there
      is an error here, otherwise we wait for the connection to be completed,
      in which case our <fo:inline font-family="monospace">ready_io</fo:inline> function is called.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
static int do_select(const char* s, our_data_t* data)
{
    data-&gt;connecting = 0;
    PGconn* conn = data-&gt;conn;
    /* if there's an error return it now */
    if (PQsendQuery(conn, s) == 0) {
        ei_x_buff x;
        ei_x_new_with_version(&amp;x);
        encode_error(&amp;x, conn);
        driver_output(data-&gt;port, x.buff, x.index);
        ei_x_free(&amp;x);
    }
    /* else wait for ready_output to get results */
    return 0;
}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">do_select</fo:inline> function initiates a select, and returns
      if there is no immediate error. The result is returned
      when <fo:inline font-family="monospace">ready_io</fo:inline> is called.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
static void ready_io(ErlDrvData drv_data, ErlDrvEvent event)
{
    PGresult* res = NULL;
    our_data_t* data = (our_data_t*)drv_data;
    PGconn* conn = data-&gt;conn;
    ei_x_buff x;
    ei_x_new_with_version(&amp;x);
    if (data-&gt;connecting) {
        ConnStatusType status;
        PQconnectPoll(conn);
        status = PQstatus(conn);
        if (status == CONNECTION_OK)
            encode_ok(&amp;x);
        else if (status == CONNECTION_BAD)
            encode_error(&amp;x, conn);
    } else {
        PQconsumeInput(conn);
        if (PQisBusy(conn))
            return;
        res = PQgetResult(conn);
        encode_result(&amp;x, res, conn);
        PQclear(res);
        for (;;) {
            res = PQgetResult(conn);
            if (res == NULL)
                break;
            PQclear(res);
        }
    }
    if (x.index &gt; 1) {
        driver_output(data-&gt;port, x.buff, x.index);
        if (data-&gt;connecting) 
            driver_select(data-&gt;port, (ErlDrvEvent)data-&gt;socket, DO_WRITE, 0);
    }
    ei_x_free(&amp;x);
}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ready_io</fo:inline> function is called when the socket
      we got from postgres is ready for input or output. Here
      we first check if we are connecting to the database. In that
      case, we check connection status and return OK if the 
      connection is successful, or error if it is not. If the
      connection is not yet established, we simply return;
      <fo:inline font-family="monospace">ready_io</fo:inline> is called again.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If we have a result from a connect, indicated by having data in
      the <fo:inline font-family="monospace">x</fo:inline> buffer, we no longer need to select on
      output (<fo:inline font-family="monospace">ready_output</fo:inline>), so we remove this by calling
      <fo:inline font-family="monospace">driver_select</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If we are not connecting, we wait for results from a
      <fo:inline font-family="monospace">PQsendQuery</fo:inline>, so we get the result and return it. The
      encoding is done with the same functions as in the earlier
      example.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Error handling is to be added here, for example, checking
      that the socket is still open, but this is only a simple example.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang part of the asynchronous driver consists of the
      sample file <fo:inline font-family="monospace">pg_async.erl</fo:inline>.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(pg_async).

-define(DRV_CONNECT, $C).
-define(DRV_DISCONNECT, $D).
-define(DRV_SELECT, $S).

-export([connect/1, disconnect/1, select/2]).

connect(ConnectStr) -&gt;
    case erl_ddll:load_driver(".", "pg_async") of
        ok -&gt; ok;
        {error, already_loaded} -&gt; ok;
        _ -&gt; exit({error, could_not_load_driver})
    end,
    Port = open_port({spawn, ?MODULE}, [binary]),
    port_control(Port, ?DRV_CONNECT, ConnectStr),
    case return_port_data(Port) of
        ok -&gt; 
            {ok, Port};
        Error -&gt;
            Error
    end.    

disconnect(Port) -&gt;
    port_control(Port, ?DRV_DISCONNECT, ""),
    R = return_port_data(Port),
    port_close(Port),
    R.

select(Port, Query) -&gt;
    port_control(Port, ?DRV_SELECT, Query),
    return_port_data(Port).

return_port_data(Port) -&gt;
    receive
        {Port, {data, Data}} -&gt;
            binary_to_term(Data)
    end.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang code is slightly different, as we do not
      return the result synchronously from <fo:inline font-family="monospace">port_control</fo:inline>,
      instead we get it from <fo:inline font-family="monospace">driver_output</fo:inline> as data in the
      message queue. The function <fo:inline font-family="monospace">return_port_data</fo:inline> above
      receives data from the port. As the data is in
      binary format, we use <fo:inline font-family="monospace">binary_to_term/1</fo:inline> to convert
      it to an Erlang term. Notice that the driver is opened in
      binary mode (<fo:inline font-family="monospace">open_port/2</fo:inline> is called with option
      <fo:inline font-family="monospace">[binary]</fo:inline>). This means that data sent from the driver
      to the emulator is sent as binaries. Without option
      <fo:inline font-family="monospace">binary</fo:inline>, they would have been lists of integers.</fo:block>
  <fo:block id="idp5185936" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.6 
      An Asynchronous Driver Using driver_async</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As a final example we demonstrate the use of
      <fo:inline font-family="monospace">driver_async</fo:inline>.
      We also use the driver term interface. The driver is written
      in C++. This enables us to use an algorithm from STL. We use
      the <fo:inline font-family="monospace">next_permutation</fo:inline> algorithm to get the next
      permutation of a list of integers. For large lists (&gt; 100,000
      elements), this takes some time, so we perform this
      as an asynchronous task.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The asynchronous API for drivers is complicated. First,
      the work must be prepared. In the example, this is done in
      <fo:inline font-family="monospace">output</fo:inline>. We could have used <fo:inline font-family="monospace">control</fo:inline>,
      but we want some variation in the examples. In our driver, we allocate
      a structure that contains anything that is needed for the asynchronous
      task to do the work. This is done in the main emulator thread.
      Then the asynchronous function is called from a driver thread,
      separate from the main emulator thread. Notice that the driver functions
      are not re-entrant, so they are not to be used.
      Finally, after the function is completed, the driver callback
      <fo:inline font-family="monospace">ready_async</fo:inline> is called from the main emulator thread,
      this is where we return the result to Erlang. (We cannot
      return the result from within the asynchronous function, as
      we cannot call the driver functions.)</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following code is from the sample file
      <fo:inline font-family="monospace">next_perm.cc</fo:inline>. The driver entry looks like before,
      but also contains the callback <fo:inline font-family="monospace">ready_async</fo:inline>.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
static ErlDrvEntry next_perm_driver_entry = {
    NULL,                        /* init */
    start,
    NULL,                        /* stop */
    output,
    NULL,                        /* ready_input */
    NULL,                        /* ready_output */ 
    "next_perm",                 /* the name of the driver */
    NULL,                        /* finish */
    NULL,                        /* handle */
    NULL,                        /* control */
    NULL,                        /* timeout */
    NULL,                        /* outputv */
    ready_async,
    NULL,                        /* flush */
    NULL,                        /* call */
    NULL                         /* event */
};
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">output</fo:inline> function allocates the work area of the
      asynchronous function. As we use C++, we use a struct,
      and stuff the data in it. We must copy the original data,
      it is not valid after we have returned from the <fo:inline font-family="monospace">output</fo:inline>
      function, and the <fo:inline font-family="monospace">do_perm</fo:inline> function is called
      later, and from another thread. We return no data here, instead it
      is sent later from the <fo:inline font-family="monospace">ready_async</fo:inline> callback.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">async_data</fo:inline> is passed to the
      <fo:inline font-family="monospace">do_perm</fo:inline> function. We do not use a
      <fo:inline font-family="monospace">async_free</fo:inline> function (the last argument to
      <fo:inline font-family="monospace">driver_async</fo:inline>), it is only used if the task is cancelled
      programmatically.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
struct our_async_data {
    bool prev;
    vector&lt;int&gt; data;
    our_async_data(ErlDrvPort p, int command, const char* buf, int len);
};

our_async_data::our_async_data(ErlDrvPort p, int command,
                               const char* buf, int len)
    : prev(command == 2),
      data((int*)buf, (int*)buf + len / sizeof(int))
{
}

static void do_perm(void* async_data);

static void output(ErlDrvData drv_data, char *buf, int len)
{
    if (*buf &lt; 1 || *buf &gt; 2) return;
    ErlDrvPort port = reinterpret_cast&lt;ErlDrvPort&gt;(drv_data);
    void* async_data = new our_async_data(port, *buf, buf+1, len);
    driver_async(port, NULL, do_perm, async_data, do_free);
}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the <fo:inline font-family="monospace">do_perm</fo:inline> we do the work, operating
      on the structure that was allocated in <fo:inline font-family="monospace">output</fo:inline>.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
static void do_perm(void* async_data)
{
    our_async_data* d = reinterpret_cast&lt;our_async_data*&gt;(async_data);
    if (d-&gt;prev)
        prev_permutation(d-&gt;data.begin(), d-&gt;data.end());
    else
        next_permutation(d-&gt;data.begin(), d-&gt;data.end());
}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the <fo:inline font-family="monospace">ready_async</fo:inline> function the output is sent back
      to the
      emulator. We use the driver term format instead of <fo:inline font-family="monospace">ei</fo:inline>.
      This is the only way to send Erlang terms directly to a driver, without
      having the Erlang code to call <fo:inline font-family="monospace">binary_to_term/1</fo:inline>. In
      the simple example this works well, and we do not need to use
      <fo:inline font-family="monospace">ei</fo:inline> to handle the binary term format.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the data is returned, we deallocate our data.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
static void ready_async(ErlDrvData drv_data, ErlDrvThreadData async_data)
{
    ErlDrvPort port = reinterpret_cast&lt;ErlDrvPort&gt;(drv_data);
    our_async_data* d = reinterpret_cast&lt;our_async_data*&gt;(async_data);
    int n = d-&gt;data.size(), result_n = n*2 + 3;
    ErlDrvTermData *result = new ErlDrvTermData[result_n], *rp = result;
    for (vector&lt;int&gt;::iterator i = d-&gt;data.begin();
         i != d-&gt;data.end(); ++i) {
        *rp++ = ERL_DRV_INT;
        *rp++ = *i;
    }
    *rp++ = ERL_DRV_NIL;
    *rp++ = ERL_DRV_LIST;
    *rp++ = n+1;
    driver_output_term(port, result, result_n);    
    delete[] result;
    delete d;
}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This driver is called like the others from Erlang. However, as
      we use <fo:inline font-family="monospace">driver_output_term</fo:inline>, there is no need to call
      <fo:inline font-family="monospace">binary_to_term</fo:inline>. The Erlang code is in the sample file
      <fo:inline font-family="monospace">next_perm.erl</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The input is changed into a list of integers and sent to
      the driver.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(next_perm).

-export([next_perm/1, prev_perm/1, load/0, all_perm/1]).

load() -&gt;
    case whereis(next_perm) of
        undefined -&gt;
            case erl_ddll:load_driver(".", "next_perm") of
                ok -&gt; ok;
                {error, already_loaded} -&gt; ok;
                E -&gt; exit(E)
            end,
            Port = open_port({spawn, "next_perm"}, []),
            register(next_perm, Port);
        _ -&gt;
            ok
    end.

list_to_integer_binaries(L) -&gt;
    [&lt;&lt;I:32/integer-native&gt;&gt; || I &lt;- L].

next_perm(L) -&gt;
    next_perm(L, 1).

prev_perm(L) -&gt;
    next_perm(L, 2).

next_perm(L, Nxt) -&gt;
    load(),
    B = list_to_integer_binaries(L),
    port_control(next_perm, Nxt, B),
    receive
        Result -&gt;
            Result
    end.

all_perm(L) -&gt;
    New = prev_perm(L),
    all_perm(New, L, [New]).

all_perm(L, L, Acc) -&gt;
    Acc;
all_perm(L, Orig, Acc) -&gt;
    New = prev_perm(L),
    all_perm(New, Orig, [New | Acc]).
    </fo:block>
  <fo:block id="idp5214960" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.10  Inet Configuration</fo:marker>1.10  Inet Configuration</fo:block><fo:block id="idp5217936" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes how the Erlang runtime system is configured
      for IP communication. It also explains how you can configure it
      for your needs by a configuration file.
      The information is primarily intended for users with special
      configuration needs or problems. There is normally no need
      for specific settings for Erlang to function properly on a correctly
      IP-configured platform.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When Erlang starts up it reads the Kernel variable
      <fo:inline font-family="monospace">inetrc</fo:inline>, which, if defined, is to specify the location
      and name of a user configuration file. Example:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% erl -kernel inetrc '"./cfg_files/erl_inetrc"'</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the use of an <fo:inline font-family="monospace">.inetrc</fo:inline> file, which was
      supported in earlier Erlang/OTP versions, is now obsolete.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A second way to specify the configuration file is to set
      environment variable <fo:inline font-family="monospace">ERL_INETRC</fo:inline> to the full name of
      the file. Example (bash):</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% export ERL_INETRC=./cfg_files/erl_inetrc</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the Kernel variable <fo:inline font-family="monospace">inetrc</fo:inline>
      overrides this environment variable.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no user configuration file is specified and Erlang is started
      in non-distributed or short name distributed mode, Erlang uses
      default configuration settings and a native lookup method that
      works correctly under most circumstances. Erlang reads no
      information from system <fo:inline font-family="monospace">inet</fo:inline> configuration files (such as 
      <fo:inline font-family="monospace">/etc/host.conf</fo:inline> and <fo:inline font-family="monospace">/etc/nsswitch.conf</fo:inline>) in these modes,
      except for <fo:inline font-family="monospace">/etc/resolv.conf</fo:inline> and <fo:inline font-family="monospace">/etc/hosts</fo:inline> that is read and
      monitored for changes on Unix platforms for the internal DNS client
      <fo:inline font-style="italic"><fo:inline font-family="monospace">inet_res(3)</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Erlang is started in long name distributed mode, it needs to
      get the domain name from somewhere and reads system <fo:inline font-family="monospace">inet</fo:inline>
      configuration files for this information. Any hosts and resolver
      information found is also recorded, but not
      used as long as Erlang is configured for native lookups. The
      information becomes useful if the lookup method is changed to 
      <fo:inline font-family="monospace">'file'</fo:inline> or <fo:inline font-family="monospace">'dns'</fo:inline>, see below.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Native lookup (system calls) is always the default resolver method.
      This is true for all platforms, except VxWorks and OSE Delta where
      <fo:inline font-family="monospace">'file'</fo:inline> or <fo:inline font-family="monospace">'dns'</fo:inline> is used (in that
      priority order).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On Windows platforms, Erlang searches the system registry rather than
      looks for configuration files when started in long name distributed
      mode.</fo:block>
  <fo:block id="idp5233312" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.2 
      Configuration Data</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang records the following data in a local database if found in system 
      <fo:inline font-family="monospace">inet</fo:inline> configuration files (or system registry):</fo:block>

   <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Hostnames and host addresses</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Domain name</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Nameservers</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Search domains</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Lookup method</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This data can also be specified explicitly in the user
      configuration file. This file is to contain lines
      of configuration parameters (each terminated with a full stop).
      Some parameters add data to the configuration (such as host
      and nameserver), others overwrite any previous settings
      (such as domain and lookup). The user configuration file is always
      examined last in the configuration process, making it possible
      for the user to override any default values or previously made
      settings. Call <fo:inline font-family="monospace">inet:get_rc()</fo:inline> to view the state of the
      <fo:inline font-family="monospace">inet</fo:inline> configuration database.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The valid configuration parameters are as follows:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{file, Format, File}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Format = atom()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">File = string()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specify a system file that Erlang is to read configuration data from.
          <fo:inline font-family="monospace">Format</fo:inline> tells the parser how the file is to be
          interpreted:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">resolv</fo:inline> (Unix resolv.conf)</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">host_conf_freebsd</fo:inline> (FreeBSD host.conf)</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">host_conf_bsdos</fo:inline> (BSDOS host.conf)</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">host_conf_linux</fo:inline> (Linux host.conf)</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">nsswitch_conf</fo:inline> (Unix nsswitch.conf)</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">hosts</fo:inline> (Unix hosts)</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">File</fo:inline> is to specify the filename with full
          path.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{resolv_conf, File}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">File = string()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specify a system file that Erlang is to read resolver
          configuration from for the internal DNS client
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet_res(3)</fo:inline></fo:inline>,
          and monitor for changes, even if it does not exist.
          The path must be absolute.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This can override the configuration parameters
          <fo:inline font-family="monospace">nameserver</fo:inline> and
          <fo:inline font-family="monospace">search</fo:inline> depending on the contents
          of the specified file. They can also change any time in the future
          reflecting the file contents.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the file is specified as an empty string <fo:inline font-family="monospace">""</fo:inline>,
          no file is read or monitored in the future. This emulates
          the old behavior of not configuring the DNS client when
          the node is started in short name distributed mode.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If this parameter is not specified, it defaults to
          <fo:inline font-family="monospace">/etc/resolv.conf</fo:inline> unless environment variable
          <fo:inline font-family="monospace">ERL_INET_ETC_DIR</fo:inline> is set, which defines
          the directory for this file to some maybe other than
          <fo:inline font-family="monospace">/etc</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{hosts_file, File}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">File = string()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specify a system file that Erlang is to read resolver
          configuration from for the internal hosts file resolver,
          and monitor for changes, even if it does not exist.
          The path must be absolute.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These host entries are searched after all added with
          <fo:inline font-family="monospace">{file, hosts, File}</fo:inline> above or
          <fo:inline font-family="monospace">{host, IP, Aliases}</fo:inline> below when lookup option
          <fo:inline font-family="monospace">file</fo:inline> is used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the file is specified as an empty string <fo:inline font-family="monospace">""</fo:inline>,
          no file is read or monitored in the future. This emulates
          the old behavior of not configuring the DNS client when
          the node is started in short name distributed mode.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If this parameter is not specified, it defaults to
          <fo:inline font-family="monospace">/etc/hosts</fo:inline> unless environment variable
          <fo:inline font-family="monospace">ERL_INET_ETC_DIR</fo:inline> is set, which defines
          the directory for this file to some maybe other than
          <fo:inline font-family="monospace">/etc</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{registry, Type}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Type = atom()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specify a system registry that Erlang is to read configuration
          data from. <fo:inline font-family="monospace">win32</fo:inline> is the only valid option.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{host, IP, Aliases}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">IP = tuple()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Aliases = [string()]</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Add host entry to the hosts table.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{domain, Domain}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Domain = string()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set domain name.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{nameserver, IP [,Port]}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">IP = tuple()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Port = integer()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Add address (and port, if other than default) of the primary
          nameserver to use for
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet_res(3)</fo:inline></fo:inline>.
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{alt_nameserver, IP [,Port]}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">IP = tuple()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Port = integer()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Add address (and port, if other than default) of the secondary
          nameserver for
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet_res(3)</fo:inline></fo:inline>.
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{search, Domains}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Domains = [string()]</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Add search domains for
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet_res(3)</fo:inline></fo:inline>.
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{lookup, Methods}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Methods = [atom()]</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specify lookup methods and in which order to try them.
          The valid methods are as follows:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">native</fo:inline> (use system calls)</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">file</fo:inline> (use host data retrieved from system
            configuration files and/or the user configuration file)</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">dns</fo:inline> (use the Erlang DNS client
            <fo:inline font-style="italic"><fo:inline font-family="monospace">inet_res(3)</fo:inline></fo:inline>
            for nameserver queries)</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The lookup method <fo:inline font-family="monospace">string</fo:inline> tries to
	  parse the hostname as an IPv4 or IPv6 string and return
	  the resulting IP address. It is automatically tried
	  first when <fo:inline font-family="monospace">native</fo:inline> is <fo:inline font-weight="bold">not</fo:inline>
	  in the <fo:inline font-family="monospace">Methods</fo:inline> list. To skip it in this case,
	  the pseudo lookup method <fo:inline font-family="monospace">nostring</fo:inline> can be
	  inserted anywhere in the <fo:inline font-family="monospace">Methods</fo:inline> list.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cache_size, Size}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Size = integer()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set the resolver cache size. Defaults to 100 DNS records.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cache_refresh, Time}.</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Time = integer()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set how often (in milliseconds) the resolver cache for
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet_res(3)</fo:inline></fo:inline>
          is refreshed (that is, expired DNS records are deleted).
          Defaults to 1 hour.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{timeout, Time}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Time = integer()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set the time to wait until retry (in milliseconds) for DNS queries
          made by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet_res(3)</fo:inline></fo:inline>.
          Defaults to 2 seconds.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{retry, N}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">N = integer()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set the number of DNS queries
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet_res(3)</fo:inline></fo:inline>
          will try before giving up. Defaults to 3.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{inet6, Bool}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Bool = true | false</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tells the DNS client
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet_res(3)</fo:inline></fo:inline>
          to look up IPv6 addresses. Defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{usevc, Bool}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Bool = true | false</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tells the DNS client
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet_res(3)</fo:inline></fo:inline>
          to use TCP (Virtual Circuit) instead of UDP. Defaults to
          <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{edns, Version}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Version = false | 0</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the EDNS version that
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet_res(3)</fo:inline></fo:inline>
          will use. The only allowed version is zero. Defaults to <fo:inline font-family="monospace">false</fo:inline>,
          which means not to use EDNS.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{udp_payload_size, Size}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">N = integer()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the allowed UDP payload size
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet_res(3)</fo:inline></fo:inline>
          will advertise in EDNS queries. Also sets the limit
          when the DNS query will be deemed too large for UDP
          forcing a TCP query instead; this  is not entirely
          correct, as the advertised UDP payload size of the
          individual nameserver is what is to be used,
          but this simple strategy will do until a more intelligent
          (probing, caching) algorithm needs to be implemented.
          Default to 1280, which stems from the standard Ethernet MTU size.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{udp, Module}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Module = atom()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tell Erlang to use another primitive UDP module than
          <fo:inline font-family="monospace">inet_udp</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{tcp, Module}.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Module = atom()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tell Erlang to use another primitive TCP module than
          <fo:inline font-family="monospace">inet_tcp</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">clear_hosts.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clear the hosts table.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">clear_ns.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clear the list of recorded nameservers (primary and secondary).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">clear_search.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clear the list of search domains.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp5325920" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.3 
      User Configuration Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assume that a user does not want Erlang to use the native lookup method,
      but wants Erlang to read all information necessary from start and use
      that for resolving names and addresses. If lookup fails, Erlang
      is to request the data from a nameserver (using the Erlang
      DNS client, set to use EDNS allowing larger responses).
      The resolver configuration is updated when
      its configuration file changes. Also, DNS records
      are never to be cached. The user configuration file
      (in this example named <fo:inline font-family="monospace">erl_inetrc</fo:inline>, stored
      in directory <fo:inline font-family="monospace">./cfg_files</fo:inline>) can then look as follows
      (Unix):</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% -- ERLANG INET CONFIGURATION FILE --
%% read the hosts file
{file, hosts, "/etc/hosts"}.
%% add a particular host
{host, {134,138,177,105}, ["finwe"]}.
%% do not monitor the hosts file
{hosts_file, ""}.
%% read and monitor nameserver config from here
{resolv_conf, "/usr/local/etc/resolv.conf"}.
%% enable EDNS
{edns,0}.
%% disable caching
{cache_size, 0}.
%% specify lookup method
{lookup, [file, dns]}.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And Erlang can, for example, be started as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% erl -sname my_node -kernel inetrc '"./cfg_files/erl_inetrc"'</fo:block>
  <fo:block id="idp5334944" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.11  External Term Format</fo:marker>1.11  External Term Format</fo:block><fo:block id="idp5337920" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The external term format is mainly used in the distribution
      mechanism of Erlang.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      As Erlang has a fixed number of types, there is no need for a
      programmer to define a specification for the external format used
      within some application.
      All Erlang terms have an external representation and the interpretation
      of the different terms is application-specific.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      In Erlang the BIF <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erlang:term_to_binary/1,2</fo:inline></fo:inline> is used to convert a
      term into the external format.
      To convert binary data encoding to a term, the BIF
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erlang:binary_to_term/1</fo:inline></fo:inline> is used.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The distribution does this implicitly when sending messages across
      node boundaries.
    </fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The overall format of the term format is as follows:
    </fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">131</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Tag</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Data</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.1:
         
        Term Format</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
        When messages are
        <fo:inline font-style="italic">passed between
        connected nodes</fo:inline> and a
        <fo:inline font-style="italic">distribution
        header</fo:inline> is used, the first byte containing the version
        number (131) is omitted from the terms that follow the distribution
        header. This is because the version number is implied by the version
        number in the distribution header.
      </fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The compressed term format is as follows:
    </fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">131</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">80</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">UncompressedSize</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Zlib-compressedData</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.2:
         
        Compressed Term Format</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Uncompressed size (unsigned 32-bit integer in big-endian byte order)
      is the size of the data before it was compressed.
      The compressed data has the following format when it has been expanded:
    </fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">Uncompressed Size</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Tag</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Data</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.3:
         
        Compressed Data Format when Expanded</fo:block>
    
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from ERTS 9.0 (OTP 20), atoms may contain any Unicode
        characters and are always encoded using the UTF-8 external formats
	<fo:inline font-style="italic"><fo:inline font-family="monospace">ATOM_UTF8_EXT</fo:inline></fo:inline>
        or <fo:inline font-style="italic"><fo:inline font-family="monospace">SMALL_ATOM_UTF8_EXT</fo:inline></fo:inline>.
	The old Latin-1 formats <fo:inline font-style="italic"><fo:inline font-family="monospace">ATOM_EXT</fo:inline></fo:inline>
        and <fo:inline font-style="italic"><fo:inline font-family="monospace">SMALL_ATOM_EXT</fo:inline></fo:inline>
	are deprecated and are only kept for backward
	compatibility when decoding terms encoded by older nodes.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Support for UTF-8 encoded atoms in the external format has been
        available since ERTS 5.10 (OTP R16). This abillity allows such old nodes
	to decode, store and encode any Unicode atoms received from a new OTP 20
        node.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The maximum number of allowed characters in an atom is 255. In the
        UTF-8 case, each character can need 4 bytes to be encoded.</fo:block>
    </fo:block>
  <fo:block id="idp5379104" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.2 
      Distribution Header</fo:block>  
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      
      As from ERTS 5.7.2 the old atom cache protocol was
      dropped and a new one was introduced. This protocol
      introduced the distribution header. Nodes with an ERTS version
      earlier than 5.7.2 can still communicate with new nodes,
      but no distribution header and no atom cache are used.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The distribution header only contains an atom cache
      reference section, but can in the future contain more
      information. The distribution header precedes one or more Erlang
      terms on the external format. For more information, see the
      documentation of the
      <fo:inline font-style="italic">protocol between
      connected nodes</fo:inline> in the
      <fo:inline font-style="italic">distribution protocol</fo:inline>
      documentation.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      <fo:inline font-style="italic">ATOM_CACHE_REF</fo:inline>
      entries with corresponding <fo:inline font-family="monospace">AtomCacheReferenceIndex</fo:inline> in terms
      encoded on the external format following a distribution header refer
      to the atom cache references made in the distribution header. The range
      is 0 &lt;= <fo:inline font-family="monospace">AtomCacheReferenceIndex</fo:inline> &lt; 255, that is, at most 255
      different atom cache references from the following terms can be made.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The distribution header format is as follows:
    </fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">NumberOfAtomCacheRefs/2+1 | 0</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N | 0</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">131</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">68</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">NumberOfAtomCacheRefs</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Flags</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">AtomCacheRefs</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.4:
         
        Distribution Header Format</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      <fo:inline font-family="monospace">Flags</fo:inline> consist of <fo:inline font-family="monospace">NumberOfAtomCacheRefs/2+1</fo:inline> bytes,
      unless <fo:inline font-family="monospace">NumberOfAtomCacheRefs</fo:inline> is <fo:inline font-family="monospace">0</fo:inline>. If
      <fo:inline font-family="monospace">NumberOfAtomCacheRefs</fo:inline> is <fo:inline font-family="monospace">0</fo:inline>, <fo:inline font-family="monospace">Flags</fo:inline> and
      <fo:inline font-family="monospace">AtomCacheRefs</fo:inline> are omitted. Each atom cache reference has
      a half byte flag field. Flags corresponding to a specific
      <fo:inline font-family="monospace">AtomCacheReferenceIndex</fo:inline> are located in flag byte number
      <fo:inline font-family="monospace">AtomCacheReferenceIndex/2</fo:inline>. Flag byte 0 is the first byte
      after the <fo:inline font-family="monospace">NumberOfAtomCacheRefs</fo:inline> byte. Flags for an even
      <fo:inline font-family="monospace">AtomCacheReferenceIndex</fo:inline> are located in the least significant
      half byte and flags for an odd <fo:inline font-family="monospace">AtomCacheReferenceIndex</fo:inline> are
      located in the most significant half byte.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The flag field of an atom cache reference has the following
      format:
    </fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1 bit</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">3 bits</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">NewCacheEntryFlag</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">SegmentIndex</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.5:
         
        </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The most significant bit is the <fo:inline font-family="monospace">NewCacheEntryFlag</fo:inline>. If set,
      the corresponding cache reference is new. The three least
      significant bits are the <fo:inline font-family="monospace">SegmentIndex</fo:inline> of the corresponding
      atom cache entry. An atom cache consists of 8 segments, each of size
      256, that is, an atom cache can contain 2048 entries.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      After flag fields for atom cache references, another half byte flag
      field is located with the following format:
    </fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">3 bits</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1 bit</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">CurrentlyUnused</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">LongAtoms</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.6:
         
        </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The least significant bit in that half byte is flag <fo:inline font-family="monospace">LongAtoms</fo:inline>.
      If it is set, 2 bytes are used for atom lengths instead of
      1 byte in the distribution header.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      After the <fo:inline font-family="monospace">Flags</fo:inline> field follow the <fo:inline font-family="monospace">AtomCacheRefs</fo:inline>. The
      first <fo:inline font-family="monospace">AtomCacheRef</fo:inline> is the one corresponding to
      <fo:inline font-family="monospace">AtomCacheReferenceIndex</fo:inline> 0. Higher indices follow
      in sequence up to index <fo:inline font-family="monospace">NumberOfAtomCacheRefs - 1</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If the <fo:inline font-family="monospace">NewCacheEntryFlag</fo:inline> for the next <fo:inline font-family="monospace">AtomCacheRef</fo:inline> has
      been set, a <fo:inline font-family="monospace">NewAtomCacheRef</fo:inline> on the following format follows:
    </fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1 | 2</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">Length</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">InternalSegmentIndex</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Length</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">AtomText</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.7:
         
        </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      <fo:inline font-family="monospace">InternalSegmentIndex</fo:inline> together with the <fo:inline font-family="monospace">SegmentIndex</fo:inline>
      completely identify the location of an atom cache entry in the
      atom cache. <fo:inline font-family="monospace">Length</fo:inline> is the number of bytes that <fo:inline font-family="monospace">AtomText</fo:inline>
      consists of. Length is a 2 byte big-endian integer
      if flag <fo:inline font-family="monospace">LongAtoms</fo:inline> has been set, otherwise a 1 byte
      integer. When distribution flag
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">DFLAG_UTF8_ATOMS</fo:inline></fo:inline>
      has been exchanged between both nodes in the
      <fo:inline font-style="italic">
      distribution handshake</fo:inline>,
      characters in <fo:inline font-family="monospace">AtomText</fo:inline> are encoded in UTF-8, otherwise
      in Latin-1. The following <fo:inline font-family="monospace">CachedAtomRef</fo:inline>s with the same
      <fo:inline font-family="monospace">SegmentIndex</fo:inline> and <fo:inline font-family="monospace">InternalSegmentIndex</fo:inline> as this
      <fo:inline font-family="monospace">NewAtomCacheRef</fo:inline> refer to this atom until a new
      <fo:inline font-family="monospace">NewAtomCacheRef</fo:inline> with the same <fo:inline font-family="monospace">SegmentIndex</fo:inline>
      and <fo:inline font-family="monospace">InternalSegmentIndex</fo:inline> appear.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      For more information on encoding of atoms, see the
      <fo:inline font-style="italic">note on UTF-8 encoded atoms</fo:inline>
      in the beginning of this section.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If the <fo:inline font-family="monospace">NewCacheEntryFlag</fo:inline> for the next <fo:inline font-family="monospace">AtomCacheRef</fo:inline>
      has not been set, a <fo:inline font-family="monospace">CachedAtomRef</fo:inline> on the following format
      follows:
    </fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">InternalSegmentIndex</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.8:
         
        </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      <fo:inline font-family="monospace">InternalSegmentIndex</fo:inline> together with the <fo:inline font-family="monospace">SegmentIndex</fo:inline>
      identify the location of the atom cache entry in the atom cache.
      The atom corresponding to this <fo:inline font-family="monospace">CachedAtomRef</fo:inline> is the
      latest <fo:inline font-family="monospace">NewAtomCacheRef</fo:inline> preceding this <fo:inline font-family="monospace">CachedAtomRef</fo:inline>
      in another previously passed distribution header.
    </fo:block>
  <fo:block id="idp5452464" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.3 
      ATOM_CACHE_REF</fo:block>
    
    
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">82</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">AtomCacheReferenceIndex</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.9:
         
        ATOM_CACHE_REF</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
        Refers to the atom with <fo:inline font-family="monospace">AtomCacheReferenceIndex</fo:inline> in the
        <fo:inline font-style="italic">distribution header</fo:inline>.
     </fo:block>
  <fo:block id="idp5461680" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.4 
      SMALL_INTEGER_EXT</fo:block>
    
    
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">97</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Int</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.10:
         
        SMALL_INTEGER_EXT</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Unsigned 8-bit integer.
    </fo:block>
  <fo:block id="idp5469728" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.5 
      INTEGER_EXT</fo:block>
    
    
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">98</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Int</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.11:
         
        INTEGER_EXT</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Signed 32-bit integer in big-endian format.
    </fo:block>
  <fo:block id="idp5477792" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.6 
      FLOAT_EXT</fo:block>
    
    
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">31</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">99</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Float string</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.12:
         
        FLOAT_EXT</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      A float is stored in string format. The format used in sprintf to
      format the float is "%.20e"
      (there are more bytes allocated than necessary).
      To unpack the float, use sscanf with format "%lf".
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      This term is used in minor version 0 of the external format;
      it has been superseded by
      <fo:inline font-style="italic"><fo:inline font-family="monospace">NEW_FLOAT_EXT</fo:inline></fo:inline>.
    </fo:block>
  <fo:block id="idp5487424" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.7 
      REFERENCE_EXT</fo:block>
      
      
      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">101</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Node</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">ID</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Creation</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.13:
         
        REFERENCE_EXT</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
        Encodes a reference object (an object generated with
        <fo:inline font-style="italic">erlang:make_ref/0</fo:inline>).
        The <fo:inline font-family="monospace">Node</fo:inline> term is an encoded atom, that is,
        <fo:inline font-style="italic"><fo:inline font-family="monospace">ATOM_UTF8_EXT</fo:inline></fo:inline>, 
        <fo:inline font-style="italic"><fo:inline font-family="monospace">SMALL_ATOM_UTF8_EXT</fo:inline></fo:inline>, or
        <fo:inline font-style="italic"><fo:inline font-family="monospace">ATOM_CACHE_REF</fo:inline></fo:inline>. 
        The <fo:inline font-family="monospace">ID</fo:inline> field contains a big-endian unsigned integer,
        but <fo:inline font-weight="bold">is to be regarded as uninterpreted data</fo:inline>,
        as this field is node-specific.
        <fo:inline font-family="monospace">Creation</fo:inline> is a byte containing a node serial number, which
        makes it possible to separate old (crashed) nodes from a new one.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
        In <fo:inline font-family="monospace">ID</fo:inline>, only 18 bits are significant; the rest are to be 0.
        In <fo:inline font-family="monospace">Creation</fo:inline>, only two bits are significant; the rest are to be 0.
        See <fo:inline font-style="italic">
        <fo:inline font-family="monospace">NEW_REFERENCE_EXT</fo:inline></fo:inline>.
      </fo:block>
    <fo:block id="idp5507472" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.8 
      PORT_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">102</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Node</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">ID</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Creation</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.14:
         
        PORT_EXT</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  Encodes a port object (obtained from
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:open_port/2</fo:inline></fo:inline>).
	  The <fo:inline font-family="monospace">ID</fo:inline> is a node-specific identifier for a local port.
	  Port operations are not allowed across node boundaries.
	  The <fo:inline font-family="monospace">Creation</fo:inline> works just like in
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">REFERENCE_EXT</fo:inline></fo:inline>.
	</fo:block>
    <fo:block id="idp5522608" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.9 
      PID_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">103</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Node</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">ID</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Serial</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Creation</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.15:
         
        PID_EXT</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  Encodes a process identifier object (obtained from
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:spawn/3</fo:inline></fo:inline> or
	  friends). The <fo:inline font-family="monospace">ID</fo:inline> and <fo:inline font-family="monospace">Creation</fo:inline> fields works just like in
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">REFERENCE_EXT</fo:inline></fo:inline>, while
	  the <fo:inline font-family="monospace">Serial</fo:inline> field is used to improve safety.	  
	  In <fo:inline font-family="monospace">ID</fo:inline>, only 15 bits are significant; the rest are to be 0.
	</fo:block>
    <fo:block id="idp5540592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.10 
      SMALL_TUPLE_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">104</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Arity</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Elements</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.16:
         
        SMALL_TUPLE_EXT</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  Encodes a tuple. The <fo:inline font-family="monospace">Arity</fo:inline>
	  field is an unsigned byte that determines how many elements
	  that follows in section <fo:inline font-family="monospace">Elements</fo:inline>.
	</fo:block>
    <fo:block id="idp5551728" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.11 
      LARGE_TUPLE_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">105</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Arity</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Elements</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.17:
         
        LARGE_TUPLE_EXT</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  Same as
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">SMALL_TUPLE_EXT</fo:inline></fo:inline>
	  except that <fo:inline font-family="monospace">Arity</fo:inline> is an
          unsigned 4 byte integer in big-endian format.
	</fo:block>
    <fo:block id="idp5563216" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.12 
      MAP_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">116</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Arity</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Pairs</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.18:
         
        MAP_EXT</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  Encodes a map. The <fo:inline font-family="monospace">Arity</fo:inline> field is an unsigned
	  4 byte integer in big-endian format that determines the number of
	  key-value pairs in the map. Key and value pairs (<fo:inline font-family="monospace">Ki =&gt; Vi</fo:inline>)
	  are encoded in section <fo:inline font-family="monospace">Pairs</fo:inline> in the following order:
	  <fo:inline font-family="monospace">K1, V1, K2, V2,..., Kn, Vn</fo:inline>.
	  Duplicate keys are <fo:inline font-weight="bold">not allowed</fo:inline> within the same map.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">As from </fo:inline>Erlang/OTP 17.0</fo:block>
    <fo:block id="idp5576528" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.13 
      NIL_EXT</fo:block>
      
      
      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	  <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	</fo:table-row><fo:table-row>
	  <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">106</fo:inline></fo:block></fo:table-cell>
	</fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.19:
         
        NIL_EXT</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	The representation for an empty list, that is, the Erlang syntax
        <fo:inline font-family="monospace">[]</fo:inline>.
      </fo:block>
    <fo:block id="idp5582960" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.14 
      STRING_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">Len</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">107</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Length</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Characters</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.20:
         
        STRING_EXT</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  String does <fo:inline font-weight="bold">not</fo:inline> have a corresponding Erlang representation,
	  but is an optimization for sending lists of bytes (integer in
	  the range 0-255) more efficiently over the distribution.
	  As field <fo:inline font-family="monospace">Length</fo:inline> is an unsigned 2 byte integer
	  (big-endian), implementations must ensure that lists longer than
	  65535 elements are encoded as
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">LIST_EXT</fo:inline></fo:inline>.
	</fo:block>
    <fo:block id="idp5595120" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.15 
      LIST_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"> </fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"> </fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">108</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Length</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Elements</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Tail</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.21:
         
        LIST_EXT</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  <fo:inline font-family="monospace">Length</fo:inline> is the number of elements that follows in section
	  <fo:inline font-family="monospace">Elements</fo:inline>. <fo:inline font-family="monospace">Tail</fo:inline> is the final tail of the list; it is
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">NIL_EXT</fo:inline></fo:inline>
	  for a proper list, but can be any type if the list is
	  improper (for example, <fo:inline font-family="monospace">[a|b]</fo:inline>).
	</fo:block>
    <fo:block id="idp5610144" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.16 
      BINARY_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">Len</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">109</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Len</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Data</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.22:
         
        BINARY_EXT</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  Binaries are generated with bit syntax expression or with
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erlang:list_to_binary/1</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erlang:term_to_binary/1</fo:inline></fo:inline>,
	  or as input from binary ports.
	  The <fo:inline font-family="monospace">Len</fo:inline> length field is an unsigned 4 byte integer
	  (big-endian).
	</fo:block>
    <fo:block id="idp5622912" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.17 
      SMALL_BIG_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">n</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">110</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">n</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Sign</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">d(0)</fo:inline> ... <fo:inline font-family="monospace">d(n-1)</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.23:
         
        SMALL_BIG_EXT</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  Bignums are stored in unary form with a <fo:inline font-family="monospace">Sign</fo:inline> byte,
	  that is, 0 if the binum is positive and 1 if it is negative. The
	  digits are stored with the least significant byte stored first. To
	  calculate the integer, the following formula can be used:
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">B</fo:inline> = 256<fo:block/>
	  <fo:inline font-family="monospace">(d0*B^0 + d1*B^1 + d2*B^2 + ... d(N-1)*B^(n-1))</fo:inline>
	</fo:block>
    <fo:block id="idp5637792" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.18 
      LARGE_BIG_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">n</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">111</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">n</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Sign</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">d(0)</fo:inline> ... <fo:inline font-family="monospace">d(n-1)</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.24:
         
        LARGE_BIG_EXT</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  Same as <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">SMALL_BIG_EXT</fo:inline></fo:inline> 
	  except that the length field is an unsigned 4 byte integer.
	</fo:block>
    <fo:block id="idp5651552" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.19 
      NEW_REFERENCE_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N'</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">114</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Len</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Node</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Creation</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">ID ...</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.25:
         
        NEW_REFERENCE_EXT</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  <fo:inline font-family="monospace">Node</fo:inline> and <fo:inline font-family="monospace">Creation</fo:inline> are as in
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">REFERENCE_EXT</fo:inline></fo:inline>.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  <fo:inline font-family="monospace">ID</fo:inline> contains a sequence of big-endian unsigned integers
	  (4 bytes each, so <fo:inline font-family="monospace">N'</fo:inline> is a multiple of 4),
	  but is to be regarded as uninterpreted data.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  <fo:inline font-family="monospace">N'</fo:inline> = 4 * <fo:inline font-family="monospace">Len</fo:inline>.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  In the first word (4 bytes) of <fo:inline font-family="monospace">ID</fo:inline>, only 18 bits are
	  significant, the rest are to be 0.
	  In <fo:inline font-family="monospace">Creation</fo:inline>, only two bits are significant,
	  the rest are to be 0.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  <fo:inline font-family="monospace">NEW_REFERENCE_EXT</fo:inline> was introduced with distribution version 4.
	  In version 4, <fo:inline font-family="monospace">N'</fo:inline> is to be at most 12.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  See <fo:inline font-style="italic"><fo:inline font-family="monospace">REFERENCE_EXT</fo:inline></fo:inline>.
	</fo:block>
    <fo:block id="idp5674608" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.20 
      FUN_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N2</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N3</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N4</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N5</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">117</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">NumFree</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Pid</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Module</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Index</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Uniq</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Free vars ...</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.26:
         
        FUN_EXT</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Pid</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process identifier as in
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">PID_EXT</fo:inline></fo:inline>.
	      Represents the process in which the fun was created.
	    </fo:block>
	  </fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Module</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encoded as an atom, using
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">ATOM_UTF8_EXT</fo:inline></fo:inline>,
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">SMALL_ATOM_UTF8_EXT</fo:inline></fo:inline>,
	    or <fo:inline font-style="italic">
	    <fo:inline font-family="monospace">ATOM_CACHE_REF</fo:inline></fo:inline>.
	    This is the module that the fun is implemented in.
	  </fo:block>
	</fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Index</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An integer encoded using
	    <fo:inline font-style="italic">
	    <fo:inline font-family="monospace">SMALL_INTEGER_EXT</fo:inline></fo:inline> 
	    or <fo:inline font-style="italic"><fo:inline font-family="monospace">INTEGER_EXT</fo:inline></fo:inline>.
	    It is typically a small index into the module's fun table.
	  </fo:block>
	</fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Uniq</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An integer encoded using
	    <fo:inline font-style="italic">
	    <fo:inline font-family="monospace">SMALL_INTEGER_EXT</fo:inline></fo:inline> or 
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">INTEGER_EXT</fo:inline></fo:inline>.
	    <fo:inline font-family="monospace">Uniq</fo:inline> is the hash value of the parse for the fun.
	  </fo:block>
	</fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Free vars</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NumFree</fo:inline> number of terms, each one encoded according
	    to its type.
	  </fo:block>
	</fo:block></fo:block-container>
	</fo:block>
    <fo:block id="idp5708848" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.21 
      NEW_FUN_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">16</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N2</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N3</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N4</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N5</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">112</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Size</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Arity</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Uniq</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Index</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">NumFree</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Module</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">OldIndex</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">OldUniq</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Pid</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Free Vars</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.27:
         
        NEW_FUN_EXT</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  This is the new encoding of internal funs: <fo:inline font-family="monospace">fun F/A</fo:inline> and
	  <fo:inline font-family="monospace">fun(Arg1,..) -&gt; ... end</fo:inline>.
	</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Size</fo:inline></fo:block> 
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The total number of bytes, including field <fo:inline font-family="monospace">Size</fo:inline>.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Arity</fo:inline></fo:block> 
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The arity of the function implementing the fun.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Uniq</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The 16 bytes MD5 of the significant parts of the Beam file.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Index</fo:inline></fo:block> 
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An index number. Each fun within a module has an unique
	      index. <fo:inline font-family="monospace">Index</fo:inline> is stored in big-endian byte order.
	    </fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">NumFree</fo:inline></fo:block> 
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of free variables.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Module</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encoded as an atom, using
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">ATOM_UTF8_EXT</fo:inline></fo:inline>, 
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">SMALL_ATOM_UTF8_EXT</fo:inline></fo:inline>,
	      or <fo:inline font-style="italic">
	      <fo:inline font-family="monospace">ATOM_CACHE_REF</fo:inline></fo:inline>. 
	      Is the module that the fun is implemented in.
	    </fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">OldIndex</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An integer encoded using
	      <fo:inline font-style="italic">
	      <fo:inline font-family="monospace">SMALL_INTEGER_EXT</fo:inline></fo:inline> or
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">INTEGER_EXT</fo:inline></fo:inline>.
	      Is typically a small index into the module's fun table.
	    </fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">OldUniq</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An integer encoded using
	      <fo:inline font-style="italic">
	      <fo:inline font-family="monospace">SMALL_INTEGER_EXT</fo:inline></fo:inline> or 
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">INTEGER_EXT</fo:inline></fo:inline>.
	      <fo:inline font-family="monospace">Uniq</fo:inline> is the hash value of the parse tree for the fun.
	    </fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Pid</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process identifier as in
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">PID_EXT</fo:inline></fo:inline>.
	      Represents the process in which the fun was created.
	    </fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Free vars</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NumFree</fo:inline> number of terms, each one encoded according
	      to its type.
	    </fo:block>
	  </fo:block></fo:block-container>
	</fo:block>
    <fo:block id="idp5761376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.22 
      EXPORT_EXT</fo:block>
      
      	
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N2</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N3</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">113</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Module</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Function</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Arity</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.28:
         
        EXPORT_EXT</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  This term is the encoding for external funs: <fo:inline font-family="monospace">fun M:F/A</fo:inline>.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  <fo:inline font-family="monospace">Module</fo:inline> and <fo:inline font-family="monospace">Function</fo:inline> are atoms
	  (encoded using <fo:inline font-style="italic"><fo:inline font-family="monospace">ATOM_UTF8_EXT</fo:inline></fo:inline>, 
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">SMALL_ATOM_UTF8_EXT</fo:inline></fo:inline>, or
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ATOM_CACHE_REF</fo:inline></fo:inline>).
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  <fo:inline font-family="monospace">Arity</fo:inline> is an integer encoded using
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">SMALL_INTEGER_EXT</fo:inline></fo:inline>.
	</fo:block>
    <fo:block id="idp5779936" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.23 
      BIT_BINARY_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">Len</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">77</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Len</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Bits</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Data</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.29:
         
        BIT_BINARY_EXT</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  This term represents a bitstring whose length in bits does
	  not have to be a multiple of 8.
	  The <fo:inline font-family="monospace">Len</fo:inline> field is an unsigned 4 byte integer (big-endian).
	  The <fo:inline font-family="monospace">Bits</fo:inline> field is the number of bits (1-8) that are used
	  in the last byte in the data field,
	  counting from the most significant bit to the least significant.
	</fo:block>
    <fo:block id="idp5793376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.24 
      NEW_FLOAT_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">8</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">70</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">IEEE float</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.30:
         
        NEW_FLOAT_EXT</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  A float is stored as 8 bytes in big-endian IEEE format.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  This term is used in minor version 1 of the external format.
	</fo:block>
    <fo:block id="idp5801952" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.25 
      ATOM_UTF8_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">Len</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">118</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Len</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">AtomName</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.31:
         
        ATOM_UTF8_EXT</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	An atom is stored with a 2 byte unsigned length in big-endian order,
	followed by <fo:inline font-family="monospace">Len</fo:inline> bytes containing the <fo:inline font-family="monospace">AtomName</fo:inline> encoded
	in UTF-8.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	For more information on encoding of atoms, see the
	<fo:inline font-style="italic">note on UTF-8 encoded atoms</fo:inline>
	in the beginning of this section.
      </fo:block>
    <fo:block id="idp5814320" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.26 
      SMALL_ATOM_UTF8_EXT</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">Len</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">119</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Len</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">AtomName</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.32:
         
        SMALL_ATOM_UTF8_EXT</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	An atom is stored with a 1 byte unsigned length,
	followed by <fo:inline font-family="monospace">Len</fo:inline> bytes containing the <fo:inline font-family="monospace">AtomName</fo:inline> encoded
	in UTF-8. Longer atoms encoded in UTF-8 can be represented using
	<fo:inline font-style="italic"><fo:inline font-family="monospace">ATOM_UTF8_EXT</fo:inline></fo:inline>.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	For more information on encoding of atoms, see the
	<fo:inline font-style="italic">note on UTF-8 encoded atoms</fo:inline>
	in the beginning of this section.
      </fo:block>
    <fo:block id="idp5827568" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.27 
      ATOM_EXT (deprecated)</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">Len</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">100</fo:inline></fo:block></fo:table-cell>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Len</fo:inline></fo:block></fo:table-cell>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">AtomName</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.33:
         
        ATOM_EXT</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
        An atom is stored with a 2 byte unsigned length in big-endian order,
        followed by <fo:inline font-family="monospace">Len</fo:inline> numbers of 8-bit Latin-1 characters that forms
        the <fo:inline font-family="monospace">AtomName</fo:inline>. The maximum allowed value for <fo:inline font-family="monospace">Len</fo:inline> is 255.
      </fo:block>
    <fo:block id="idp5839200" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.28 
      SMALL_ATOM_EXT (deprecated)</fo:block>
      
      
	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">Len</fo:block></fo:table-cell>
	  </fo:table-row><fo:table-row>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">115</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Len</fo:inline></fo:block></fo:table-cell>
	    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">AtomName</fo:inline></fo:block></fo:table-cell>
	  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.34:
         
        SMALL_ATOM_EXT</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	An atom is stored with a 1 byte unsigned length,
	followed by <fo:inline font-family="monospace">Len</fo:inline> numbers of 8-bit Latin-1 characters that
	forms the <fo:inline font-family="monospace">AtomName</fo:inline>.
      </fo:block>
      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  <fo:inline font-family="monospace">SMALL_ATOM_EXT</fo:inline> was introduced in ERTS 5.7.2 and
	  require an exchange of distribution flag
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">DFLAG_SMALL_ATOM_TAGS</fo:inline></fo:inline> in the
	  <fo:inline font-style="italic">
	  distribution handshake</fo:inline>.
	</fo:block>
      </fo:block>
    <fo:block id="idp5857072" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.12  Distribution Protocol</fo:marker>1.12  Distribution Protocol</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This description is far from complete. It will be updated if the
    protocol is updated. However, the protocols, both from Erlang
    nodes to the Erlang Port Mapper Daemon (EPMD) and between Erlang nodes
    are stable since many years.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The distribution protocol can be divided into four parts:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Low-level socket connection (1)</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handshake, interchange node name, and authenticate (2)</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Authentication (done by <fo:inline font-style="italic">
        <fo:inline font-family="monospace">net_kernel(3)</fo:inline></fo:inline>) (3)</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Connected (4)</fo:block> 
    </fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A node fetches the port number of another node through the EPMD (at the
    other host) to initiate a connection request.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each host, where a distributed Erlang node is running, also an EPMD
    is to be running. The EPMD can be started explicitly or automatically
    as a result of the Erlang node startup.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default the EPMD listens on port 4369.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(3) and (4) above are performed at the same level but the <fo:inline font-family="monospace">net_kernel</fo:inline>
    disconnects the other node if it communicates using an invalid cookie (after
    1 second).</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The integers in all multibyte fields are in big-endian order.</fo:block><fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The Erlang Distribution protocol is not by itself secure and does not
      aim to be so. In order to get secure distribution the distributed nodes
      should be configured to use distribution over tls.
      See the <fo:inline font-style="italic">
      Using SSL for Erlang Distribution</fo:inline> User's Guide
      for details on how to setup a secure distributed node.
    </fo:block>
  </fo:block><fo:block id="idp5871536" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.12.1 
      EPMD Protocol</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The requests served by the EPMD are summarized in the following
      figure.</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="erl_ext_fig.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        12.1:
         
        Summary of EPMD Requests</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each request <fo:inline font-family="monospace">*_REQ</fo:inline> is preceded by a 2 byte length field.
      Thus, the overall request format is as follows:</fo:block>

    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">n</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Length</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Request</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.1:
         
        Request Format</fo:block>

    <fo:block id="idp5881232" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Register a Node in EPMD</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a distributed node is started it registers itself in the EPMD.
        The message <fo:inline font-family="monospace">ALIVE2_REQ</fo:inline> described below is sent from the node to
        the EPMD. The response from the EPMD is <fo:inline font-family="monospace">ALIVE2_RESP</fo:inline>.</fo:block>

      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">Nlen</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">Elen</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">120</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">PortNo</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">NodeType</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Protocol</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">HighestVersion</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">LowestVersion</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Nlen</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">NodeName</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Elen</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Extra</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.2:
         
        ALIVE2_REQ (120)</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">PortNo</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The port number on which the node accept connection requests.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">NodeType</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">77 = normal Erlang node, 72 = hidden node (C-node), ...</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Protocol</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">0 = TCP/IPv4, ...</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">HighestVersion</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The highest distribution version that this node can handle.
            The value in Erlang/OTP R6B and later is 5.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">LowestVersion</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The lowest distribution version that this node can handle.
            The value in Erlang/OTP R6B and later is 5.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Nlen</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The length (in bytes) of field <fo:inline font-family="monospace">NodeName</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">NodeName</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node name as an UTF-8 encoded string of <fo:inline font-family="monospace">Nlen</fo:inline> bytes.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Elen</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The length of field <fo:inline font-family="monospace">Extra</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Extra</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Extra field of <fo:inline font-family="monospace">Elen</fo:inline> bytes.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The connection created to the EPMD must be kept as long as the
        node is a distributed node. When the connection is closed,
        the node is automatically unregistered from the EPMD.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The response message <fo:inline font-family="monospace">ALIVE2_RESP</fo:inline> is as follows:</fo:block>

      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">121</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Result</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Creation</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.3:
         
        ALIVE2_RESP (121)</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Result = 0 -&gt; ok, result &gt; 0 -&gt; error.</fo:block>
    

    <fo:block id="idp5933008" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Unregister a Node from EPMD</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A node unregisters itself from the EPMD by closing the TCP
        connection to EPMD established when the node was registered.</fo:block>
    

    <fo:block id="idp5934480" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Get the Distribution Port of Another Node</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When one node wants to connect to another node it starts with
        a <fo:inline font-family="monospace">PORT_PLEASE2_REQ</fo:inline> request to the EPMD on the host where the
        node resides to get the distribution port that the node listens to.</fo:block>

      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">N</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">122</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">NodeName</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.4:
         
        PORT_PLEASE2_REQ (122)</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where N = <fo:inline font-family="monospace">Length</fo:inline> - 1.</fo:block>

      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">119</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Result</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.5:
         
        PORT2_RESP (119) Response Indicating Error, Result &gt; 0
        </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or</fo:block>

      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">Nlen</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">Elen</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">119</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Result</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">PortNo</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">NodeType</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Protocol</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">HighestVersion</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">LowestVersion</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Nlen</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">NodeName</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Elen</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">&gt;<fo:inline font-family="monospace">Extra</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.6:
         
        PORT2_RESP, Result = 0</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Result</fo:inline> &gt; 0, the packet only consists of
        <fo:inline font-family="monospace">[119, Result]</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The EPMD closes the socket when it has sent the information.</fo:block>
    

    <fo:block id="idp5977760" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Get All Registered Names from EPMD</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This request is used through the Erlang function
        <fo:inline font-style="italic">
        <fo:inline font-family="monospace">net_adm:names/1,2</fo:inline></fo:inline>. A TCP connection is opened
        to the  EPMD and this request is sent.</fo:block>

      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">110</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.7:
         
        NAMES_REQ (110)</fo:block>	

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The response for a <fo:inline font-family="monospace">NAMES_REQ</fo:inline> is as follows:</fo:block>

      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"> </fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">EPMDPortNo</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">NodeInfo*</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.8:
         
        NAMES_RESP</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NodeInfo</fo:inline> is a string written for each active node.
        When all <fo:inline font-family="monospace">NodeInfo</fo:inline> has been written the connection is
        closed by the EPMD.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NodeInfo</fo:inline> is, as expressed in Erlang:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
io:format("name ~ts at port ~p~n", [NodeName, Port]).</fo:block>
    

    <fo:block id="idp5994400" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Dump All Data from EPMD</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This request is not really used, it is to be regarded as a debug
        feature.</fo:block>

      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">100</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.9:
         
        DUMP_REQ</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The response for a <fo:inline font-family="monospace">DUMP_REQ</fo:inline> is as follows:</fo:block>

      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"> </fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">EPMDPortNo</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">NodeInfo*</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.10:
         
        DUMP_RESP</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NodeInfo</fo:inline> is a string written for each node kept in the EPMD.
        When all <fo:inline font-family="monospace">NodeInfo</fo:inline> has been written the connection is
        closed by the EPMD.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NodeInfo</fo:inline> is, as expressed in Erlang:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
io:format("active name     ~ts at port ~p, fd = ~p~n",
          [NodeName, Port, Fd]).</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
io:format("old/unused name ~ts at port ~p, fd = ~p ~n",
          [NodeName, Port, Fd]).</fo:block>
    

    <fo:block id="idp6011248" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Kill EPMD</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This request kills the running EPMD. It is almost never used.</fo:block>

      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">107</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.11:
         
        KILL_REQ</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The response for a <fo:inline font-family="monospace">KILL_REQ</fo:inline> is as follows:</fo:block>

      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">2</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">OKString</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.12:
         
        KILL_RESP</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">OKString</fo:inline> is "OK".</fo:block>
    

    <fo:block id="idp6022784" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">STOP_REQ  (Not Used)</fo:block>
      
      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">n</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">115</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">NodeName</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.13:
         
        STOP_REQ</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where n = <fo:inline font-family="monospace">Length</fo:inline> - 1.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current implementation of Erlang does not care if the connection
        to the EPMD is broken.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The response for a <fo:inline font-family="monospace">STOP_REQ</fo:inline> is as follows:</fo:block>

      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">7</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">OKString</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.14:
         
        STOP_RESP</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">OKString</fo:inline> is "STOPPED".</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A negative response can look as follows:</fo:block>

      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">7</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">NOKString</fo:inline></fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.15:
         
        STOP_NOTOK_RESP</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">NOKString</fo:inline> is "NOEXIST".</fo:block>
    

  <fo:block id="idp6046016" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.12.2 
      Distribution Handshake</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the distribution handshake protocol introduced
      in Erlang/OTP R6. This description was previously located in
      <fo:inline font-family="monospace">$ERL_TOP/lib/kernel/internal_doc/distribution_handshake.txt</fo:inline> and
      has more or less been copied and "formatted" here. It has been almost
      unchanged since 1999, but the handshake has not changed much since then
      either.</fo:block>

    <fo:block id="idp6047984" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">General</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The TCP/IP distribution uses a handshake that expects a
        connection-based protocol, that is, the protocol does not include any
        authentication after the handshake procedure.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is not entirely safe, as it is vulnerable against takeover
        attacks, but it is a tradeoff between fair safety and performance.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The cookies are never sent in cleartext and the handshake procedure
        expects the client (called <fo:inline font-family="monospace">A</fo:inline>) to be the first one to prove that
        it can generate a sufficient digest. The digest is generated with the
        MD5 message digest algorithm and the challenges are expected to be
        random numbers.</fo:block>
    

    <fo:block id="idp6051248" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Definitions</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A challenge is a 32-bit integer in big-endian order. Below the function
        <fo:inline font-family="monospace">gen_challenge()</fo:inline> returns a random 32-bit integer used as a
        challenge.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A digest is a (16 bytes) MD5 hash of the challenge (as text)
        concatenated with the cookie (as text). Below, the function
        <fo:inline font-family="monospace">gen_digest(Challenge, Cookie)</fo:inline> generates a digest as described
        above.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">out_cookie</fo:inline> is the cookie used in outgoing communication to a
        certain node, so that <fo:inline font-family="monospace">A</fo:inline>'s <fo:inline font-family="monospace">out_cookie</fo:inline> for <fo:inline font-family="monospace">B</fo:inline> is to
        correspond with <fo:inline font-family="monospace">B</fo:inline>'s <fo:inline font-family="monospace">in_cookie</fo:inline> for <fo:inline font-family="monospace">A</fo:inline> and conversely.
        <fo:inline font-family="monospace">A</fo:inline>'s <fo:inline font-family="monospace">out_cookie</fo:inline> for <fo:inline font-family="monospace">B</fo:inline> and <fo:inline font-family="monospace">A</fo:inline>'s
        <fo:inline font-family="monospace">in_cookie</fo:inline> for <fo:inline font-family="monospace">B</fo:inline> need <fo:inline font-weight="bold">not</fo:inline> be the same. Below the
        function <fo:inline font-family="monospace">out_cookie(Node)</fo:inline> returns the current node's
        <fo:inline font-family="monospace">out_cookie</fo:inline> for <fo:inline font-family="monospace">Node</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">in_cookie</fo:inline> is the cookie expected to be used by another node
        when communicating with us, so that <fo:inline font-family="monospace">A</fo:inline>'s <fo:inline font-family="monospace">in_cookie</fo:inline> for
        <fo:inline font-family="monospace">B</fo:inline> corresponds with <fo:inline font-family="monospace">B</fo:inline>'s <fo:inline font-family="monospace">out_cookie</fo:inline> for <fo:inline font-family="monospace">A</fo:inline>.
        Below the function <fo:inline font-family="monospace">in_cookie(Node)</fo:inline> returns the current node's
        <fo:inline font-family="monospace">in_cookie</fo:inline> for <fo:inline font-family="monospace">Node</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The cookies are text strings that can be viewed as passwords.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Every message in the handshake starts with a 16-bit big-endian integer,
        which contains the message length (not counting the two initial bytes).
        In Erlang this corresponds to option <fo:inline font-family="monospace">{packet, 2}</fo:inline> in
        <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp(3)</fo:inline></fo:inline>.
        Notice that after the handshake, the distribution switches to 4 byte
        packet headers.</fo:block>
    

    <fo:block id="idp6069968" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">The Handshake in Detail</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Imagine two nodes, <fo:inline font-family="monospace">A</fo:inline> that initiates the handshake and <fo:inline font-family="monospace">B</fo:inline>
        that accepts the connection.</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">1) connect/accept</fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">A</fo:inline> connects to <fo:inline font-family="monospace">B</fo:inline> through TCP/IP and <fo:inline font-family="monospace">B</fo:inline> accepts
            the connection.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always">2) <fo:inline font-family="monospace">send_name</fo:inline>/<fo:inline font-family="monospace">receive_name</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">A</fo:inline> sends an initial identification to <fo:inline font-family="monospace">B</fo:inline>, which
            receives the message. The message looks as follows (every "square"
            is one byte and the packet header is removed):</fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
+---+--------+--------+-----+-----+-----+-----+-----+-----+-...-+-----+
|'n'|Version0|Version1|Flag0|Flag1|Flag2|Flag3|Name0|Name1| ... |NameN|
+---+--------+--------+-----+-----+-----+-----+-----+-----+-... +-----+</fo:block>
           <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">'n' is the message tag. 'Version0' and 'Version1' is the
             distribution version selected by <fo:inline font-family="monospace">A</fo:inline>, based on information
             from the EPMD. (16-bit big-endian) 'Flag0' ... 'Flag3' are
             capability flags, the capabilities are defined in
             <fo:inline font-family="monospace">$ERL_TOP/lib/kernel/include/dist.hrl</fo:inline>. (32-bit big-endian)
             'Name0' ... 'NameN' is the full node name of <fo:inline font-family="monospace">A</fo:inline>, as a string
             of bytes (the packet length denotes how long it is).</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always">3) <fo:inline font-family="monospace">recv_status</fo:inline>/<fo:inline font-family="monospace">send_status</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">B</fo:inline> sends a status message to <fo:inline font-family="monospace">A</fo:inline>, which indicates if the
            connection is allowed. The following status codes are defined:</fo:block>
          <fo:block space-after="0.25em" space-before="0.25em">
            <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ok</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The handshake will continue.</fo:block>
            </fo:block></fo:block-container>
            <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ok_simultaneous</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The handshake will continue, but <fo:inline font-family="monospace">A</fo:inline> is informed that
                <fo:inline font-family="monospace">B</fo:inline> has another ongoing connection attempt that will be
                shut down (simultaneous connect where <fo:inline font-family="monospace">A</fo:inline>'s name is
                greater than <fo:inline font-family="monospace">B</fo:inline>'s name, compared literally).</fo:block>
            </fo:block></fo:block-container>
            <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nok</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The handshake will not continue, as <fo:inline font-family="monospace">B</fo:inline> already has an
                ongoing handshake, which it itself has initiated (simultaneous
                connect where <fo:inline font-family="monospace">B</fo:inline>'s name is greater than <fo:inline font-family="monospace">A</fo:inline>'s).</fo:block>
            </fo:block></fo:block-container>
            <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">not_allowed</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The connection is disallowed for some (unspecified) security
                reason.</fo:block>
            </fo:block></fo:block-container>
            <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">alive</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A connection to the node is already active, which either means
                that node <fo:inline font-family="monospace">A</fo:inline> is confused or that the TCP connection
                breakdown of a previous node with this name has not yet reached
                node <fo:inline font-family="monospace">B</fo:inline>. See step 3B below.</fo:block>
            </fo:block></fo:block-container>
          </fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The format of the status message is as follows:</fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
+---+-------+-------+-...-+-------+
|'s'|Status0|Status1| ... |StatusN|
+---+-------+-------+-...-+-------+</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">'s' is the message tag. 'Status0' ... 'StatusN' is the status as a
            string (not terminated).</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always">3B) <fo:inline font-family="monospace">send_status</fo:inline>/<fo:inline font-family="monospace">recv_status</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If status was <fo:inline font-family="monospace">alive</fo:inline>, node <fo:inline font-family="monospace">A</fo:inline> answers with another
            status message containing either <fo:inline font-family="monospace">true</fo:inline>, which means that the
            connection is to continue (the old connection from this node is
            broken), or <fo:inline font-family="monospace">false</fo:inline>, which means that the connection is to be
            closed (the connection attempt was a mistake.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always">4) <fo:inline font-family="monospace">recv_challenge</fo:inline>/<fo:inline font-family="monospace">send_challenge</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the status was <fo:inline font-family="monospace">ok</fo:inline> or <fo:inline font-family="monospace">ok_simultaneous</fo:inline>, the
            handshake continues with <fo:inline font-family="monospace">B</fo:inline> sending <fo:inline font-family="monospace">A</fo:inline> another message,
            the challenge. The challenge contains the same type of information
            as the "name" message initially sent from <fo:inline font-family="monospace">A</fo:inline> to <fo:inline font-family="monospace">B</fo:inline>, plus
            a 32-bit challenge:</fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
+---+--------+--------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-...-+-----+
|'n'|Version0|Version1|Flag0|Flag1|Flag2|Flag3|Chal0|Chal1|Chal2|Chal3|Name0|Name1| ... |NameN|
+---+--------+--------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-... +-----+</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">'Chal0' ... 'Chal3' is the challenge as a 32-bit big-endian integer
            and the other fields are <fo:inline font-family="monospace">B</fo:inline>'s version, flags, and full node
            name.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always">5) <fo:inline font-family="monospace">send_challenge_reply</fo:inline>/<fo:inline font-family="monospace">recv_challenge_reply</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now <fo:inline font-family="monospace">A</fo:inline> has generated a digest and its own challenge. Those
            are sent together in a package to <fo:inline font-family="monospace">B</fo:inline>:</fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
+---+-----+-----+-----+-----+-----+-----+-----+-----+-...-+------+
|'r'|Chal0|Chal1|Chal2|Chal3|Dige0|Dige1|Dige2|Dige3| ... |Dige15|
+---+-----+-----+-----+-----+-----+-----+-----+-----+-...-+------+</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">'r' is the tag. 'Chal0' ... 'Chal3' is <fo:inline font-family="monospace">A</fo:inline>'s challenge for
            <fo:inline font-family="monospace">B</fo:inline> to handle. 'Dige0' ... 'Dige15' is the digest that <fo:inline font-family="monospace">A</fo:inline>
            constructed from the challenge <fo:inline font-family="monospace">B</fo:inline> sent in the previous
            step.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always">6) <fo:inline font-family="monospace">recv_challenge_ack</fo:inline>/<fo:inline font-family="monospace">send_challenge_ack</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">B</fo:inline> checks that the digest received from <fo:inline font-family="monospace">A</fo:inline> is correct
            and generates a digest from the challenge received from <fo:inline font-family="monospace">A</fo:inline>.
            The digest is then sent to <fo:inline font-family="monospace">A</fo:inline>. The message is as follows:</fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
+---+-----+-----+-----+-----+-...-+------+
|'a'|Dige0|Dige1|Dige2|Dige3| ... |Dige15|
+---+-----+-----+-----+-----+-...-+------+</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">'a' is the tag. 'Dige0' ... 'Dige15' is the digest calculated by
            <fo:inline font-family="monospace">B</fo:inline> for <fo:inline font-family="monospace">A</fo:inline>'s challenge.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always">7) check</fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">A</fo:inline> checks the digest from <fo:inline font-family="monospace">B</fo:inline> and the connection is
            up.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp6122704" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Semigraphic View</fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
A (initiator)                                      B (acceptor)

TCP connect ------------------------------------&gt;
                                                   TCP accept

send_name --------------------------------------&gt;
                                                   recv_name

  &lt;---------------------------------------------- send_status
recv_status
(if status was 'alive'
 send_status - - - - - - - - - - - - - - - - - -&gt;
                                                   recv_status)
                                                   ChB = gen_challenge()
                          (ChB)
  &lt;---------------------------------------------- send_challenge
recv_challenge
ChA = gen_challenge(),
OCA = out_cookie(B),
DiA = gen_digest(ChB, OCA)
                          (ChA, DiA)
send_challenge_reply ---------------------------&gt;
                                                   recv_challenge_reply
                                                   ICB = in_cookie(A),
                                                   check:
                                                   DiA == gen_digest (ChB, ICB)?
                                                   - if OK:
                                                    OCB = out_cookie(A),
                                                    DiB = gen_digest (ChA, OCB)
                          (DiB)
  &lt;----------------------------------------------- send_challenge_ack
recv_challenge_ack                                  DONE
ICA = in_cookie(B),                                - else:
check:                                              CLOSE
DiB == gen_digest(ChA, ICA)?
- if OK:
 DONE
- else:
 CLOSE</fo:block>
    

    <fo:block id="idp6126272" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Distribution Flags</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following capability flags are defined:</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_PUBLISHED,16#1).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node is to be published and part of the global namespace.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_ATOM_CACHE,16#2).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node implements an atom cache (obsolete).</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_EXTENDED_REFERENCES,16#4).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node implements extended (3 × 32 bits) references. This
            is required today. If not present, the  connection is refused.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_DIST_MONITOR,16#8).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node implements distributed process monitoring.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_FUN_TAGS,16#10).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node uses separate tag for funs (lambdas) in the distribution
            protocol.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_DIST_MONITOR_NAME,16#20).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node implements distributed named process monitoring.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_HIDDEN_ATOM_CACHE,16#40).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The (hidden) node implements atom cache (obsolete).</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_NEW_FUN_TAGS,16#80).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node understand new fun tags.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_EXTENDED_PIDS_PORTS,16#100).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node can handle extended pids and ports. This is required
            today. If not present, the connection is refused.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_EXPORT_PTR_TAG,16#200).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_BIT_BINARIES,16#400).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_NEW_FLOATS,16#800).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node understands new float format.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_UNICODE_IO,16#1000).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_DIST_HDR_ATOM_CACHE,16#2000).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node implements atom cache in distribution header.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_SMALL_ATOM_TAGS, 16#4000).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node understand the <fo:inline font-family="monospace">SMALL_ATOM_EXT</fo:inline> tag.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-define(DFLAG_UTF8_ATOMS, 16#10000).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node understand UTF-8 encoded atoms.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    
  <fo:block id="idp6152384" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.12.3 
      Protocol between Connected Nodes</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from ERTS 5.7.2 the runtime system passes a distribution flag
      in the handshake stage that enables the use of a
      <fo:inline font-style="italic">distribution header
      </fo:inline> on all messages passed. Messages passed between nodes have in
      this case the following format:</fo:block>

    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">d</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">n</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">m</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Length</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">DistributionHeader</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">ControlMessage</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Message</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.16:
         
        Format of Messages Passed between Nodes (as from ERTS 5.7.2)
      </fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Length</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equal to d + n + m.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ControlMessage</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A tuple passed using the external format of Erlang.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Message</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The message sent to another node using the '!' (in external format).
          Notice that <fo:inline font-family="monospace">Message</fo:inline> is only passed in combination with a
          <fo:inline font-family="monospace">ControlMessage</fo:inline> encoding a send ('!').</fo:block>
      </fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-style="italic">the version
      number is omitted from the terms that follow a distribution header
      </fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Nodes with an ERTS version earlier than 5.7.2 does not pass the
      distribution flag that enables the distribution header. Messages passed
      between nodes have in this case the following format:</fo:block>

    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">4</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">1</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">n</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">m</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Length</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Type</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">ControlMessage</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center"><fo:inline font-family="monospace">Message</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.17:
         
        Format of Messages Passed between Nodes (before ERTS 5.7.2)
      </fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Length</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equal to 1 + n + m.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Type</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equal to <fo:inline font-family="monospace">112</fo:inline> (pass through).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ControlMessage</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A tuple passed using the external format of Erlang.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Message</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The message sent to another node using the '!' (in external format).
          Notice that <fo:inline font-family="monospace">Message</fo:inline> is only passed in combination with a
          <fo:inline font-family="monospace">ControlMessage</fo:inline> encoding a send ('!').</fo:block>
      </fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ControlMessage</fo:inline> is a tuple, where the first element indicates
      which distributed operation it encodes:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">LINK</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{1, FromPid, ToPid}</fo:inline></fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">SEND</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{2, Unused, ToPid}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Followed by <fo:inline font-family="monospace">Message</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Unused</fo:inline> is kept for backward compatibility.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EXIT</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{3, FromPid, ToPid, Reason}</fo:inline></fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">UNLINK</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{4, FromPid, ToPid}</fo:inline></fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">NODE_LINK</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{5}</fo:inline></fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">REG_SEND</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{6, FromPid, Unused, ToName}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Followed by <fo:inline font-family="monospace">Message</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Unused</fo:inline> is kept for backward compatibility.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">GROUP_LEADER</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{7, FromPid, ToPid}</fo:inline></fo:block>
      </fo:block></fo:block-container>	
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EXIT2</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{8, FromPid, ToPid, Reason}</fo:inline></fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp6209008" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.12.4 
      New Ctrlmessages for distrvsn = 1 (Erlang/OTP R4)</fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">SEND_TT</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{12, Unused, ToPid, TraceToken}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Followed by <fo:inline font-family="monospace">Message</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Unused</fo:inline> is kept for backward compatibility.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EXIT_TT</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{13, FromPid, ToPid, TraceToken, Reason}</fo:inline></fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">REG_SEND_TT</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{16, FromPid, Unused, ToName, TraceToken}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Followed by <fo:inline font-family="monospace">Message</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Unused</fo:inline> is kept for backward compatibility.</fo:block>
      </fo:block></fo:block-container>      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EXIT2_TT</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{18, FromPid, ToPid, TraceToken, Reason}</fo:inline></fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp6220192" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.12.5 
      New Ctrlmessages for distrvsn = 2</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">distrvsn</fo:inline> 2 was never used.</fo:block>
  <fo:block id="idp6221840" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.12.6 
      New Ctrlmessages for distrvsn = 3 (Erlang/OTP R5C)</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">None, but the version number was increased anyway.</fo:block>
  <fo:block id="idp6223248" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.12.7 
      New Ctrlmessages for distrvsn = 4 (Erlang/OTP R6)</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These are only recognized by Erlang nodes, not by hidden nodes.</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">MONITOR_P</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{19, FromPid, ToProc, Ref}</fo:inline>, where
          <fo:inline font-family="monospace">FromPid</fo:inline> = monitoring process and
          <fo:inline font-family="monospace">ToProc</fo:inline> = monitored process pid or name (atom)</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">DEMONITOR_P</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{20, FromPid, ToProc, Ref}</fo:inline>, where
          <fo:inline font-family="monospace">FromPid</fo:inline> = monitoring process and
          <fo:inline font-family="monospace">ToProc</fo:inline> = monitored process pid or name (atom)</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We include <fo:inline font-family="monospace">FromPid</fo:inline> just in case we want to trace this.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">MONITOR_P_EXIT</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{21, FromProc, ToPid, Ref, Reason}</fo:inline>, where
          <fo:inline font-family="monospace">FromProc</fo:inline> = monitored process pid or name (atom),
          <fo:inline font-family="monospace">ToPid</fo:inline> = monitoring process, and
          <fo:inline font-family="monospace">Reason</fo:inline> = exit reason for the monitored process</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp464656" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
  <fo:block page-break-before="always" id="idp7402320" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_prim_loader</fo:marker>erl_prim_loader</fo:block>Erlang module</fo:block>
  <fo:block/>
  erl_prim_loader
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module is used to load all Erlang modules into
      the system. The start script is also fetched with this low-level
      loader.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_prim_loader</fo:inline> knows about the environment and how to
      fetch modules.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Command-line flag <fo:inline font-family="monospace">-loader Loader</fo:inline> can be used to
      choose the method used by <fo:inline font-family="monospace">erl_prim_loader</fo:inline>. Two
      <fo:inline font-family="monospace">Loader</fo:inline> methods are supported by the Erlang runtime system:
      <fo:inline font-family="monospace">efile</fo:inline> and <fo:inline font-family="monospace">inet</fo:inline>.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7396576"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_file(Filename) -&gt; {ok, Bin, FullName} | error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = atom() | string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bin = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FullName = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Fetches a file using the low-level loader.
          <fo:inline font-family="monospace">Filename</fo:inline> is either an absolute filename or only
          the name of the file, for example, <fo:inline font-family="monospace">"lists.beam"</fo:inline>. If an internal
          path is set to the loader, this path is used to find the file.
          <fo:inline font-family="monospace">FullName</fo:inline> is the complete name of the fetched file.
          <fo:inline font-family="monospace">Bin</fo:inline> is the contents of the file as a binary.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Filename</fo:inline> can also be a file in an archive,
          for example,
          <fo:inline font-family="monospace">$OTPROOT/lib/</fo:inline><fo:inline font-family="monospace">mnesia-4.4.7.ez/mnesia-4.4.7/ebin/</fo:inline><fo:inline font-family="monospace">mnesia.beam</fo:inline>.
          For information about archive files, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp7389232"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_path() -&gt; {ok, Path}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Path = [Dir :: string()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the path set in the loader. The path is
          set by the <fo:inline font-style="italic"><fo:inline font-family="monospace">init(3)</fo:inline></fo:inline>
          process according to information found in the start script.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp7386096"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">list_dir(Dir) -&gt; {ok, Filenames} | error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dir = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filenames = [Filename :: string()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lists all the files in a directory. Returns
          <fo:inline font-family="monospace">{ok, Filenames}</fo:inline> if successful, otherwise
          <fo:inline font-family="monospace">error</fo:inline>. <fo:inline font-family="monospace">Filenames</fo:inline> is a list of
          the names of all the files in the directory. The names are
          not sorted.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> can also be a directory in an archive,
          for example,
          <fo:inline font-family="monospace">$OTPROOT/lib/</fo:inline><fo:inline font-family="monospace">mnesia-4.4.7.ez/mnesia-4.4.7/ebin</fo:inline>.
          For information about archive files, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp7379136"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">read_file_info(Filename) -&gt; {ok, FileInfo} | error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FileInfo = <fo:inline font-style="italic">file:file_info()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieves information about a file. Returns
          <fo:inline font-family="monospace">{ok, FileInfo}</fo:inline> if successful, otherwise
          <fo:inline font-family="monospace">error</fo:inline>. <fo:inline font-family="monospace">FileInfo</fo:inline> is a record
          <fo:inline font-family="monospace">file_info</fo:inline>, defined in the Kernel include file
          <fo:inline font-family="monospace">file.hrl</fo:inline>. Include the following directive in the module
          from which the function is called:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-include_lib("kernel/include/file.hrl").</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information about the record <fo:inline font-family="monospace">file_info</fo:inline>, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">file(3)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Filename</fo:inline> can also be a file in an archive,
          for example,
          <fo:inline font-family="monospace">$OTPROOT/lib/</fo:inline><fo:inline font-family="monospace">mnesia-4.4.7.ez/mnesia-4.4.7/ebin/</fo:inline><fo:inline font-family="monospace">mnesia</fo:inline>.
          For information about archive files, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1354144"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">read_link_info(Filename) -&gt; {ok, FileInfo} | error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FileInfo = <fo:inline font-style="italic">file:file_info()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works like
          <fo:inline font-style="italic"><fo:inline font-family="monospace">read_file_info/1</fo:inline></fo:inline>
          except that if <fo:inline font-family="monospace">Filename</fo:inline> is a symbolic link,
          information about the link is returned in the <fo:inline font-family="monospace">file_info</fo:inline>
          record and the <fo:inline font-family="monospace">type</fo:inline> field of the record is set to
          <fo:inline font-family="monospace">symlink</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Filename</fo:inline> is not a symbolic link, this function
          returns exactly the same result as <fo:inline font-family="monospace">read_file_info/1</fo:inline>.
          On platforms that do not support symbolic links, this function
          is always equivalent to <fo:inline font-family="monospace">read_file_info/1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1348272"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_path(Path) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Path = [Dir :: string()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the path of the loader if
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init(3)</fo:inline></fo:inline>
          interprets a <fo:inline font-family="monospace">path</fo:inline> command in the start script.</fo:block>
      </fo:block>
  

  <fo:block id="idp1345296" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Command-Line Flags</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">erl_prim_loader</fo:inline> module interprets the following
      command-line flags:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-loader Loader</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the name of the loader used by
          <fo:inline font-family="monospace">erl_prim_loader</fo:inline>. <fo:inline font-family="monospace">Loader</fo:inline> can be <fo:inline font-family="monospace">efile</fo:inline>
          (use the local file system) or <fo:inline font-family="monospace">inet</fo:inline> (load using
          the <fo:inline font-family="monospace">boot_server</fo:inline> on another Erlang node).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If flag <fo:inline font-family="monospace">-loader</fo:inline> is omitted, it defaults to
          <fo:inline font-family="monospace">efile</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-loader_debug</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the <fo:inline font-family="monospace">efile</fo:inline> loader write some debug information,
            such as the reason for failures, while it handles files.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-hosts Hosts</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies which other Erlang nodes the <fo:inline font-family="monospace">inet</fo:inline> loader
          can use. This flag is mandatory if flag <fo:inline font-family="monospace">-loader inet</fo:inline>
          is present. On each host, there must be on Erlang node
          with the <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_boot_server(3)</fo:inline></fo:inline>,
          which handles the load requests.
          <fo:inline font-family="monospace">Hosts</fo:inline> is a list of IP addresses (hostnames
          are not acceptable).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-setcookie Cookie</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the cookie of the Erlang runtime system. This flag
          is mandatory if flag <fo:inline font-family="monospace">-loader inet</fo:inline> is present.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp1329296" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">init(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erl_boot_server(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp12443792" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erlang</fo:marker>erlang</fo:block>Erlang module</fo:block>
  <fo:block/>
  erlang
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By convention, most Built-In Functions (BIFs) are included
      in this module. Some of the BIFs are viewed more
      or less as part of the Erlang programming language and are
      <fo:inline font-weight="bold">auto-imported</fo:inline>. Thus, it is not necessary to specify the
      module name. For example, the calls <fo:inline font-family="monospace">atom_to_list(Erlang)</fo:inline>
      and <fo:inline font-family="monospace">erlang:atom_to_list(Erlang)</fo:inline> are identical.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Auto-imported BIFs are listed without module prefix.
      BIFs listed with module prefix are not auto-imported.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">BIFs can fail for various reasons. All BIFs fail with
      reason <fo:inline font-family="monospace">badarg</fo:inline> if they are called with arguments of an
      incorrect type. The other reasons are described in the
      description of each individual BIF.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some BIFs can be used in guard tests and are marked with
      "Allowed in guard tests".</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:inline font-weight="bold" space-after="0.25em">ext_binary()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A binary data object, structured according to
          the Erlang external term format.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">message_queue_data() = off_heap | on_heap</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">
          <fo:inline font-family="monospace">process_flag(message_queue_data, MQD)</fo:inline></fo:inline>.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">timestamp() = <fo:block/>    {MegaSecs :: integer() &gt;= 0,<fo:block/>     Secs :: integer() &gt;= 0,<fo:block/>     MicroSecs :: integer() &gt;= 0}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:timestamp/0</fo:inline></fo:inline>.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">time_unit() = <fo:block/>    integer() &gt;= 1 |<fo:block/>    second |<fo:block/>    millisecond |<fo:block/>    microsecond |<fo:block/>    nanosecond |<fo:block/>    native |<fo:block/>    perf_counter |<fo:block/>    <fo:inline font-style="italic">deprecated_time_unit()</fo:inline></fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Supported time unit representations:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">PartsPerSecond :: integer() &gt;= 1</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Time unit expressed in parts per second. That is,
              the time unit equals <fo:inline font-family="monospace">1/PartsPerSecond</fo:inline> second.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">second</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Symbolic representation of the time unit
              represented by the integer <fo:inline font-family="monospace">1</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">millisecond</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Symbolic representation of the time unit
              represented by the integer <fo:inline font-family="monospace">1000</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">microsecond</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Symbolic representation of the time unit
              represented by the integer <fo:inline font-family="monospace">1000000</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nanosecond</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Symbolic representation of the time unit
              represented by the integer <fo:inline font-family="monospace">1000000000</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">native</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Symbolic representation of the native time unit
              used by the Erlang runtime system.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">native</fo:inline> time unit is determined at
              runtime system start, and remains the same until
              the runtime system terminates. If a runtime system
              is stopped and then started again (even on the same
              machine), the <fo:inline font-family="monospace">native</fo:inline> time unit of the new
              runtime system instance can differ from the
              <fo:inline font-family="monospace">native</fo:inline> time unit of the old runtime system
              instance.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One can get an approximation of the <fo:inline font-family="monospace">native</fo:inline>
              time unit by calling
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:convert_time_unit(1, second, native)</fo:inline></fo:inline>.
              The result equals the number
              of whole <fo:inline font-family="monospace">native</fo:inline> time units per second. If
              the number of <fo:inline font-family="monospace">native</fo:inline> time units per second does not
              add up to a whole number, the result is rounded downwards.</fo:block>
            <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of the <fo:inline font-family="monospace">native</fo:inline> time unit gives
                you more or less no information about the
                quality of time values. It sets a limit for the
                <fo:inline font-style="italic">
                resolution</fo:inline> and for the
                <fo:inline font-style="italic">
                precision</fo:inline> of time values,
                but it gives no information about the
                <fo:inline font-style="italic">
                accuracy</fo:inline> of time values. The resolution of
                the <fo:inline font-family="monospace">native</fo:inline> time unit and the resolution of time
                values can differ significantly.</fo:block>
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">perf_counter</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Symbolic representation of the performance counter
              time unit used by the Erlang runtime system.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">perf_counter</fo:inline> time unit behaves much in the same way
              as the <fo:inline font-family="monospace">native</fo:inline> time unit. That is, it can differ between
              runtime restarts. To get values of this type, call
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">os:perf_counter/0</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic"><fo:inline font-family="monospace">deprecated_time_unit()</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Deprecated symbolic representations kept for backwards-compatibility.
	  </fo:block></fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">time_unit/0</fo:inline> type can be extended.
          To convert time values between time units, use
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:convert_time_unit/3</fo:inline></fo:inline>.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">deprecated_time_unit() = <fo:block/>    seconds | milli_seconds | micro_seconds | nano_seconds</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic"><fo:inline font-family="monospace">time_unit()</fo:inline></fo:inline>
	type also consist of the following <fo:inline font-weight="bold">deprecated</fo:inline> symbolic
	time units:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">seconds</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic"><fo:inline font-family="monospace">second</fo:inline></fo:inline>.</fo:block></fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">milli_seconds</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic"><fo:inline font-family="monospace">millisecond</fo:inline></fo:inline>.</fo:block></fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">micro_seconds</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic"><fo:inline font-family="monospace">microsecond</fo:inline></fo:inline>.</fo:block></fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nano_seconds</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic"><fo:inline font-family="monospace">nanosecond</fo:inline></fo:inline>.</fo:block></fo:block></fo:block-container>
	</fo:block>
      
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp3859120"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">abs(Float) -&gt; float()</fo:block></fo:block><fo:block id="idp3858992"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">abs(Int) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Int = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Float = float()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Int = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer or float that is the arithmetical
          absolute value of <fo:inline font-family="monospace">Float</fo:inline> or
          <fo:inline font-family="monospace">Int</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">abs(-3.33).</fo:inline>
3.33
&gt; <fo:inline font-weight="bold">abs(-3).</fo:inline>
3</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1747632"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:adler32(Data) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Computes and returns the adler32 checksum for
          <fo:inline font-family="monospace">Data</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1745024"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:adler32(OldAdler, Data) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OldAdler = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Continues computing the adler32 checksum by combining 
          the previous checksum, <fo:inline font-family="monospace">OldAdler</fo:inline>, with
          the checksum of <fo:inline font-family="monospace">Data</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following code:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
X = erlang:adler32(Data1),
Y = erlang:adler32(X,Data2).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">assigns the same value to <fo:inline font-family="monospace">Y</fo:inline> as this:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Y = erlang:adler32([Data1,Data2]).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1739088"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:adler32_combine(FirstAdler, SecondAdler, SecondSize) -&gt;<fo:block/>                          integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FirstAdler = SecondAdler = SecondSize = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Combines two previously computed adler32 checksums.
          This computation requires the size of the data object for
          the second checksum to be known.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following code:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Y = erlang:adler32(Data1),
Z = erlang:adler32(Y,Data2).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">assigns the same value to <fo:inline font-family="monospace">Z</fo:inline> as this:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
X = erlang:adler32(Data1),
Y = erlang:adler32(Data2),
Z = erlang:adler32_combine(X,Y,iolist_size(Data2)).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp7736240"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:append_element(Tuple1, Term) -&gt; Tuple2</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Tuple1 = Tuple2 = tuple()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a new tuple that has one element more than
          <fo:inline font-family="monospace">Tuple1</fo:inline>, and contains the elements in
          <fo:inline font-family="monospace">Tuple1</fo:inline>
          followed by <fo:inline font-family="monospace">Term</fo:inline> as the last element.
          Semantically equivalent to
          <fo:inline font-family="monospace">list_to_tuple(tuple_to_list(Tuple1) ++
          [Term])</fo:inline>, but much faster. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:append_element({one, two}, three).</fo:inline>
{one,two,three}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp7731120"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">apply(Fun, Args) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Fun = function()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls a fun, passing the elements in <fo:inline font-family="monospace">Args</fo:inline>
          as arguments.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the number of elements in the arguments are known at
          compile time, the call is better written as
          <fo:inline font-family="monospace">Fun(Arg1, Arg2, ... ArgN)</fo:inline>.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Earlier, <fo:inline font-family="monospace">Fun</fo:inline> could also be specified as
            <fo:inline font-family="monospace">{Module, Function}</fo:inline>, equivalent to
            <fo:inline font-family="monospace">apply(Module, Function, Args)</fo:inline>. <fo:inline font-weight="bold">This use is
            deprecated and will stop working in a future release.</fo:inline></fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12419872"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">apply(Module, Function, Args) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the result of applying <fo:inline font-family="monospace">Function</fo:inline> in
          <fo:inline font-family="monospace">Module</fo:inline> to <fo:inline font-family="monospace">Args</fo:inline>.
          The applied function must
          be exported from <fo:inline font-family="monospace">Module</fo:inline>. The arity of the function is
          the length of <fo:inline font-family="monospace">Args</fo:inline>. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">apply(lists, reverse, [[a, b, c]]).</fo:inline>
[c,b,a]
&gt; <fo:inline font-weight="bold">apply(erlang, atom_to_list, ['Erlang']).</fo:inline>
"Erlang"</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the number of arguments are known at compile time,
          the call is better written as
          <fo:inline font-family="monospace">Module:Function(Arg1, Arg2, ...,
          ArgN)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-style="italic">
          <fo:inline font-family="monospace">error_handler:undefined_function/3</fo:inline></fo:inline> is called
          if the applied function is not exported. The error handler
          can be redefined (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">process_flag/2</fo:inline></fo:inline>).
          If <fo:inline font-family="monospace">error_handler</fo:inline> is undefined, or if the user has
          redefined the default <fo:inline font-family="monospace">error_handler</fo:inline> so the replacement
          module is undefined, an error with reason <fo:inline font-family="monospace">undef</fo:inline>
          is generated.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1376000"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">atom_to_binary(Atom, Encoding) -&gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Atom = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Encoding = latin1 | unicode | utf8</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a binary corresponding to the text
          representation of <fo:inline font-family="monospace">Atom</fo:inline>.
          If <fo:inline font-family="monospace">Encoding</fo:inline>
          is <fo:inline font-family="monospace">latin1</fo:inline>, one byte exists for each character
          in the text representation. If <fo:inline font-family="monospace">Encoding</fo:inline> is
          <fo:inline font-family="monospace">utf8</fo:inline> or
          <fo:inline font-family="monospace">unicode</fo:inline>, the characters are encoded using UTF-8 where
          characters may require multiple bytes.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from Erlang/OTP 20, atoms can contain any Unicode character
            and <fo:inline font-family="monospace">atom_to_binary(Atom, latin1)</fo:inline> may fail if the
            text representation for <fo:inline font-family="monospace">Atom</fo:inline> contains a Unicode
            character &gt; 255.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">atom_to_binary('Erlang', latin1).</fo:inline>
&lt;&lt;"Erlang"&gt;&gt;</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp7368032"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">atom_to_list(Atom) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Atom = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a string corresponding to the text
          representation of <fo:inline font-family="monospace">Atom</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">atom_to_list('Erlang').</fo:inline>
"Erlang"</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1397984"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">binary_part(Subject, PosLen) -&gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Subject = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">PosLen = {Start :: integer() &gt;= 0, Length :: integer()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Extracts the part of the binary described by
        <fo:inline font-family="monospace">PosLen</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Negative length can be used to extract bytes at the end
        of a binary, for example:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; Bin = &lt;&lt;1,2,3,4,5,6,7,8,9,10&gt;&gt;.
2&gt; binary_part(Bin,{byte_size(Bin), -5}).
&lt;&lt;6,7,8,9,10&gt;&gt;</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">PosLen</fo:inline> in any way
        references outside the binary.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Start</fo:inline> is zero-based, that is:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; Bin = &lt;&lt;1,2,3&gt;&gt;
2&gt; binary_part(Bin,{0,2}).
&lt;&lt;1,2&gt;&gt;</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about the <fo:inline font-family="monospace">PosLen</fo:inline> semantics, see
        <fo:inline font-style="italic"><fo:inline font-family="monospace">binary(3)</fo:inline></fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp7460128"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">binary_part(Subject, Start, Length) -&gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Subject = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Start = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Length = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as <fo:inline font-family="monospace">binary_part(Subject,
        {Start, Length})</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp7445696"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">binary_to_atom(Binary, Encoding) -&gt; atom()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Binary = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Encoding = latin1 | unicode | utf8</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the atom whose text representation is
          <fo:inline font-family="monospace">Binary</fo:inline>.
          If <fo:inline font-family="monospace">Encoding</fo:inline> is <fo:inline font-family="monospace">latin1</fo:inline>, no
          translation of bytes in the binary is done.
          If <fo:inline font-family="monospace">Encoding</fo:inline>
          is <fo:inline font-family="monospace">utf8</fo:inline> or <fo:inline font-family="monospace">unicode</fo:inline>, the binary must contain
          valid UTF-8 sequences.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from Erlang/OTP 20, <fo:inline font-family="monospace">binary_to_atom(Binary, utf8)</fo:inline>
            is capable of encoding any Unicode character. Earlier versions would
            fail if the binary contained Unicode characters &gt; 255.
            For more information about Unicode support in atoms, see the
            <fo:inline font-style="italic">note on UTF-8
            encoded atoms</fo:inline>
            in section "External Term Format" in the User's Guide.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">binary_to_atom(&lt;&lt;"Erlang"&gt;&gt;, latin1).</fo:inline>
'Erlang'
&gt; <fo:inline font-weight="bold">binary_to_atom(&lt;&lt;1024/utf8&gt;&gt;, utf8).</fo:inline>
'Ѐ'</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp476000"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">binary_to_existing_atom(Binary, Encoding) -&gt; atom()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Binary = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Encoding = latin1 | unicode | utf8</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As
          <fo:inline font-style="italic"><fo:inline font-family="monospace">binary_to_atom/2</fo:inline></fo:inline>,
          but the atom must exist.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if the atom does not exist.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6459792"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">binary_to_float(Binary) -&gt; float()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Binary = binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the float whose text representation is
          <fo:inline font-family="monospace">Binary</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">binary_to_float(&lt;&lt;"2.2017764e+0"&gt;&gt;).</fo:inline>
2.2017764</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Binary</fo:inline> contains a bad
          representation of a float.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6707264"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">binary_to_integer(Binary) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Binary = binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer whose text representation is
          <fo:inline font-family="monospace">Binary</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">binary_to_integer(&lt;&lt;"123"&gt;&gt;).</fo:inline>
123</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Binary</fo:inline> contains a bad
          representation of an integer.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp325184"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">binary_to_integer(Binary, Base) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Binary = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Base = 2..36</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer whose text representation in base
          <fo:inline font-family="monospace">Base</fo:inline> is <fo:inline font-family="monospace">Binary</fo:inline>, for
          example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">binary_to_integer(&lt;&lt;"3FF"&gt;&gt;, 16).</fo:inline>
1023</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Binary</fo:inline> contains a bad
          representation of an integer.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1933984"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">binary_to_list(Binary) -&gt; [byte()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Binary = binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of integers corresponding to the bytes of
          <fo:inline font-family="monospace">Binary</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp995488"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">binary_to_list(Binary, Start, Stop) -&gt; [byte()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Binary = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Start = Stop = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>1..byte_size(<fo:inline font-family="monospace">Binary</fo:inline>)
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As <fo:inline font-family="monospace">binary_to_list/1</fo:inline>, but returns a list of integers
          corresponding to the bytes from position <fo:inline font-family="monospace">Start</fo:inline> to
          position <fo:inline font-family="monospace">Stop</fo:inline> in <fo:inline font-family="monospace">Binary</fo:inline>.
          The positions in the
          binary are numbered starting from 1.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">The one-based indexing for binaries used by
            this function is deprecated.</fo:inline> New code is to use
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">binary:bin_to_list/3</fo:inline></fo:inline>
            in STDLIB instead. All functions in module
            <fo:inline font-family="monospace">binary</fo:inline> consistently use zero-based indexing.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp787248"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">binary_to_term(Binary) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Binary = <fo:inline font-style="italic">ext_binary()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang term that is the result of decoding
          binary object <fo:inline font-family="monospace">Binary</fo:inline>, which must be encoded
          according to the <fo:inline font-style="italic">
          Erlang external term format</fo:inline>.</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">Bin = term_to_binary(hello).</fo:inline>
&lt;&lt;131,100,0,5,104,101,108,108,111&gt;&gt;
&gt; <fo:inline font-weight="bold">hello = binary_to_term(Bin).</fo:inline>
hello
</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When decoding binaries from untrusted sources,
            consider using <fo:inline font-family="monospace">binary_to_term/2</fo:inline> to prevent Denial
            of Service attacks.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">term_to_binary/1</fo:inline></fo:inline>
          and <fo:inline font-style="italic">
          <fo:inline font-family="monospace">binary_to_term/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp3852032"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">binary_to_term(Binary, Opts) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Binary = <fo:inline font-style="italic">ext_binary()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opts = [safe]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As <fo:inline font-family="monospace">binary_to_term/1</fo:inline>, but takes options that affect decoding
          of the binary.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">safe</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use this option when receiving binaries from an untrusted
              source.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When enabled, it prevents decoding data that can be used to
              attack the Erlang system. In the event of receiving unsafe
              data, decoding fails with a <fo:inline font-family="monospace">badarg</fo:inline> error.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This prevents creation of new atoms directly,
              creation of new atoms indirectly (as they are embedded in
              certain structures, such as process identifiers,
              refs, and funs), and
              creation of new external function references.
              None of those resources are garbage collected, so unchecked
              creation of them can exhaust available memory.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">safe</fo:inline> is specified and unsafe
          data is decoded.</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">binary_to_term(&lt;&lt;131,100,0,5,104,101,108,108,111&gt;&gt;, [safe]).</fo:inline>
** exception error: bad argument
&gt; <fo:inline font-weight="bold">hello.</fo:inline>
hello
&gt; <fo:inline font-weight="bold">binary_to_term(&lt;&lt;131,100,0,5,104,101,108,108,111&gt;&gt;, [safe]).</fo:inline>
hello
</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">term_to_binary/1</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">binary_to_term/1</fo:inline></fo:inline>, and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">list_to_existing_atom/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp374384"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">bit_size(Bitstring) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bitstring = bitstring()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer that is the size in bits of
          <fo:inline font-family="monospace">Bitstring</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">bit_size(&lt;&lt;433:16,3:3&gt;&gt;).</fo:inline>
19
&gt; <fo:inline font-weight="bold">bit_size(&lt;&lt;1,2,3&gt;&gt;).</fo:inline>
24</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12310240"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">bitstring_to_list(Bitstring) -&gt; [byte() | bitstring()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bitstring = bitstring()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of integers corresponding to the bytes of
          <fo:inline font-family="monospace">Bitstring</fo:inline>. If the number of bits in the binary
          is not divisible by 8, the last element of the list is a bitstring
          containing the remaining 1-7 bits.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12313296"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:bump_reductions(Reductions) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reductions = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This implementation-dependent function increments
          the reduction counter for the calling process. In the Beam
          emulator, the reduction counter is normally incremented by
          one for each function and BIF call. A context switch is
          forced when the counter reaches the maximum number of
          reductions for a process (2000 reductions in Erlang/OTP R12B).</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF can be removed in a future version of the Beam
            machine without prior warning. It is unlikely to be
            implemented in other Erlang implementations.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp3762416"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">byte_size(Bitstring) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bitstring = bitstring()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer that is the number of bytes needed to
          contain <fo:inline font-family="monospace">Bitstring</fo:inline>. That is, if the number of bits
          in <fo:inline font-family="monospace">Bitstring</fo:inline> is not divisible by 8, the resulting
          number of bytes is rounded <fo:inline font-weight="bold">up</fo:inline>. Examples:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">byte_size(&lt;&lt;433:16,3:3&gt;&gt;).</fo:inline>
3
&gt; <fo:inline font-weight="bold">byte_size(&lt;&lt;1,2,3&gt;&gt;).</fo:inline>
3</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp3768048"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:cancel_timer(TimerRef) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TimerRef = reference()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Time = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = Time | false</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Cancels a timer. The same as calling
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:cancel_timer(TimerRef, [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp7413872"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:cancel_timer(TimerRef, Options) -&gt; Result | ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TimerRef = reference()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Async = Info = boolean()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = {async, Async} | {info, Info}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [Option]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Time = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = Time | false</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Cancels a timer that has been created by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:start_timer</fo:inline></fo:inline> or
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:send_after</fo:inline></fo:inline>.
          <fo:inline font-family="monospace">TimerRef</fo:inline> identifies the timer, and
          was returned by the BIF that created the timer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Option</fo:inline>s:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{async, Async}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asynchronous request for cancellation. <fo:inline font-family="monospace">Async</fo:inline>
              defaults to <fo:inline font-family="monospace">false</fo:inline>, which causes the
              cancellation to be performed synchronously. When
              <fo:inline font-family="monospace">Async</fo:inline> is set to <fo:inline font-family="monospace">true</fo:inline>, the cancel
              operation is performed asynchronously. That is,
              <fo:inline font-family="monospace">cancel_timer()</fo:inline> sends an asynchronous
              request for cancellation to the timer service that
              manages the timer, and then returns <fo:inline font-family="monospace">ok</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{info, Info}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Requests information about the <fo:inline font-family="monospace">Result</fo:inline>
              of the cancellation. <fo:inline font-family="monospace">Info</fo:inline> defaults to <fo:inline font-family="monospace">true</fo:inline>,
              which means the <fo:inline font-family="monospace">Result</fo:inline> is
              given. When <fo:inline font-family="monospace">Info</fo:inline> is set to <fo:inline font-family="monospace">false</fo:inline>, no
              information about the result of the cancellation
              is given.</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Async</fo:inline> is <fo:inline font-family="monospace">false</fo:inline>:
                  if <fo:inline font-family="monospace">Info</fo:inline> is <fo:inline font-family="monospace">true</fo:inline>, the <fo:inline font-family="monospace">Result</fo:inline> is
                  returned by <fo:inline font-family="monospace">erlang:cancel_timer()</fo:inline>. otherwise
                  <fo:inline font-family="monospace">ok</fo:inline> is returned.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Async</fo:inline> is <fo:inline font-family="monospace">true</fo:inline>:
                  if <fo:inline font-family="monospace">Info</fo:inline> is <fo:inline font-family="monospace">true</fo:inline>, a message on the form
                  <fo:inline font-family="monospace">{cancel_timer, TimerRef,
                  Result}</fo:inline> is sent to the
                  caller of <fo:inline font-family="monospace">erlang:cancel_timer()</fo:inline> when the
                  cancellation operation has been performed, otherwise
                  no message is sent.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
           </fo:block></fo:block-container>
         </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">More <fo:inline font-family="monospace">Option</fo:inline>s may be added in the future.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Result</fo:inline> is an integer, it represents
          the time in milliseconds left until the canceled timer would
          have expired.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Result</fo:inline> is <fo:inline font-family="monospace">false</fo:inline>, a
          timer corresponding to <fo:inline font-family="monospace">TimerRef</fo:inline> could not
          be found. This can be either because the timer had expired,
          already had been canceled, or because <fo:inline font-family="monospace">TimerRef</fo:inline>
          never corresponded to a timer. Even if the timer had expired,
          it does not tell you if the time-out message has
          arrived at its destination yet.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The timer service that manages the timer can be co-located
            with another scheduler than the scheduler that the calling
            process is executing on. If so, communication
            with the timer service takes much longer time than if it
            is located locally. If the calling process is in critical
            path, and can do other things while waiting for the result
            of this operation, or is not interested in the result of
            the operation, you want to use option <fo:inline font-family="monospace">{async, true}</fo:inline>.
            If using option <fo:inline font-family="monospace">{async, false}</fo:inline>, the calling
            process blocks until the operation has been performed.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:send_after/4</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:start_timer/4</fo:inline></fo:inline>, and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:read_timer/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp7757792"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ceil(Number) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Number = number()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the smallest integer not less than
	<fo:inline font-family="monospace">Number</fo:inline>.
        For example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">ceil(5.5).</fo:inline>
6</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp1593200"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">check_old_code(Module) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Module</fo:inline> has old code,
          otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1598352"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">check_process_code(Pid, Module) -&gt; CheckResult</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">CheckResult = boolean()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">check_process_code(Pid, Module, [])</fo:inline>
          </fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1602672"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">check_process_code(Pid, Module, OptionList) -&gt; CheckResult | async</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">RequestId = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = {async, RequestId} | {allow_gc, boolean()}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OptionList = [Option]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">CheckResult = boolean() | aborted</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks if the node local process identified by
          <fo:inline font-family="monospace">Pid</fo:inline>
          executes old code for <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Option</fo:inline>s:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{allow_gc, boolean()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Determines if garbage collection is allowed when performing
            the operation. If <fo:inline font-family="monospace">{allow_gc, false}</fo:inline> is passed, and
            a garbage collection is needed to determine the
            result of the operation, the operation is aborted (see
            information on <fo:inline font-family="monospace">CheckResult</fo:inline> below).
            The default is to allow garbage collection, that is,
            <fo:inline font-family="monospace">{allow_gc, true}</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{async, RequestId}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">check_process_code/3</fo:inline> returns
            the value <fo:inline font-family="monospace">async</fo:inline> immediately after the request
            has been sent. When the request has been processed, the
            process that called this function is passed a
            message on the form <fo:inline font-family="monospace">{check_process_code, RequestId,
            CheckResult}</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Pid</fo:inline> equals <fo:inline font-family="monospace">self()</fo:inline>, and
          no <fo:inline font-family="monospace">async</fo:inline> option has been passed, the operation
          is performed at once. Otherwise a request for
          the operation is sent to the process identified by
          <fo:inline font-family="monospace">Pid</fo:inline>, and is handled when
          appropriate. If no <fo:inline font-family="monospace">async</fo:inline> option has been passed,
          the caller blocks until <fo:inline font-family="monospace">CheckResult</fo:inline>
          is available and can be returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CheckResult</fo:inline> informs about the result of
          the request as follows:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">true</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process identified by <fo:inline font-family="monospace">Pid</fo:inline>
            executes old code for <fo:inline font-family="monospace">Module</fo:inline>.
            That is, the current call of the process executes old
            code for this module, or the process has references
            to old code for this module, or the process contains
            funs that references old code for this module.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">false</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process identified by <fo:inline font-family="monospace">Pid</fo:inline> does
            not execute old code for <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">aborted</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The operation was aborted, as the process needed to
            be garbage collected to determine the operation result,
            and the operation was requested
            by passing option <fo:inline font-family="monospace">{allow_gc, false}</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  Up until ERTS version 8.*, the check process code operation
	  checks for all types of references to the old code. That is,
	  direct references (e.g. return addresses on the process
	  stack), indirect references (<fo:inline font-family="monospace">fun</fo:inline>s in process
	  context), and references to literals in the code.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  As of ERTS version 9.0, the check process code operation
	  only checks for direct references to the code. Indirect
	  references via <fo:inline font-family="monospace">fun</fo:inline>s will be ignored. If such
	  <fo:inline font-family="monospace">fun</fo:inline>s exist and are used after a purge of the old
	  code, an exception will be raised upon usage (same as
	  the case when the <fo:inline font-family="monospace">fun</fo:inline> is received by the process
	  after the purge). Literals will be taken care of (copied)
	  at a  later stage. This behavior can as of ERTS version
	  8.1 be enabled when
	  <fo:inline font-style="italic">building OTP</fo:inline>,
	  and will automatically be enabled if dirty scheduler
	  support is enabled.
	</fo:block>
	</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If <fo:inline font-family="monospace">Pid</fo:inline> is not a node local process
            identifier.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If <fo:inline font-family="monospace">Module</fo:inline> is not an atom.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If <fo:inline font-family="monospace">OptionList</fo:inline> is an invalid list of options.
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1147680"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:convert_time_unit(Time, FromUnit, ToUnit) -&gt; ConvertedTime</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Time = ConvertedTime = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FromUnit = ToUnit = <fo:inline font-style="italic">time_unit()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts the <fo:inline font-family="monospace">Time</fo:inline> value of time unit
          <fo:inline font-family="monospace">FromUnit</fo:inline> to the corresponding
          <fo:inline font-family="monospace">ConvertedTime</fo:inline> value of time unit
          <fo:inline font-family="monospace">ToUnit</fo:inline>. The result is rounded
          using the floor function.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can lose accuracy and precision when converting
            between time units. To minimize such loss, collect all
            data at <fo:inline font-family="monospace">native</fo:inline> time unit and do the conversion on the end
            result.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1153664"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:crc32(Data) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Computes and returns the crc32 (IEEE 802.3 style) checksum
          for <fo:inline font-family="monospace">Data</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1156576"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:crc32(OldCrc, Data) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OldCrc = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Continues computing the crc32 checksum by combining
          the previous checksum, <fo:inline font-family="monospace">OldCrc</fo:inline>, with the checksum
          of <fo:inline font-family="monospace">Data</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following code:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
X = erlang:crc32(Data1),
Y = erlang:crc32(X,Data2).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">assigns the same value to <fo:inline font-family="monospace">Y</fo:inline> as this:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Y = erlang:crc32([Data1,Data2]).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1162496"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:crc32_combine(FirstCrc, SecondCrc, SecondSize) -&gt;<fo:block/>                        integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FirstCrc = SecondCrc = SecondSize = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Combines two previously computed crc32 checksums.
          This computation requires the size of the data object for
          the second checksum to be known.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following code:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Y = erlang:crc32(Data1),
Z = erlang:crc32(Y,Data2).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">assigns the same value to <fo:inline font-family="monospace">Z</fo:inline> as this:</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
X = erlang:crc32(Data1),
Y = erlang:crc32(Data2),
Z = erlang:crc32_combine(X,Y,iolist_size(Data2)).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1167472"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">date() -&gt; Date</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Date = <fo:inline font-style="italic">calendar:date()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current date as <fo:inline font-family="monospace">{Year, Month, Day}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time zone and Daylight Saving Time correction depend on
          the underlying OS. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">date().</fo:inline>
{1995,2,19}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1171600"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:decode_packet(Type, Bin, Options) -&gt;<fo:block/>                        {ok, Packet, Rest} |<fo:block/>                        {more, Length} |<fo:block/>                        {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = <fo:block/>    raw |<fo:block/>    0 |<fo:block/>    1 |<fo:block/>    2 |<fo:block/>    4 |<fo:block/>    asn1 |<fo:block/>    cdr |<fo:block/>    sunrm |<fo:block/>    fcgi |<fo:block/>    tpkt |<fo:block/>    line |<fo:block/>    http |<fo:block/>    http_bin |<fo:block/>    httph |<fo:block/>    httph_bin</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bin = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [Opt]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opt = <fo:block/>    {packet_size, integer() &gt;= 0} |<fo:block/>    {line_length, integer() &gt;= 0}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Packet = binary() | HttpPacket</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Rest = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Length = integer() &gt;= 0 | undefined</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">HttpPacket = <fo:block/>    HttpRequest | HttpResponse | HttpHeader | http_eoh | HttpError</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">HttpRequest = {http_request, HttpMethod, HttpUri, HttpVersion}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">HttpResponse = <fo:block/>    {http_response, HttpVersion, integer(), HttpString}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">HttpHeader = <fo:block/>    {http_header,<fo:block/>     integer(),<fo:block/>     HttpField,<fo:block/>     Reserved :: term(),<fo:block/>     Value :: HttpString}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">HttpError = {http_error, HttpString}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">HttpMethod = <fo:block/>    'OPTIONS' |<fo:block/>    'GET' |<fo:block/>    'HEAD' |<fo:block/>    'POST' |<fo:block/>    'PUT' |<fo:block/>    'DELETE' |<fo:block/>    'TRACE' |<fo:block/>    HttpString</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">HttpUri = <fo:block/>    '*' |<fo:block/>    {absoluteURI,<fo:block/>     http | https,<fo:block/>     Host :: HttpString,<fo:block/>     Port :: <fo:inline font-style="italic">inet:port_number()</fo:inline> | undefined,<fo:block/>     Path :: HttpString} |<fo:block/>    {scheme, Scheme :: HttpString, HttpString} |<fo:block/>    {abs_path, HttpString} |<fo:block/>    HttpString</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">HttpVersion = <fo:block/>    {Major :: integer() &gt;= 0, Minor :: integer() &gt;= 0}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">HttpField = <fo:block/>    'Cache-Control' |<fo:block/>    'Connection' |<fo:block/>    'Date' |<fo:block/>    'Pragma' |<fo:block/>    'Transfer-Encoding' |<fo:block/>    'Upgrade' |<fo:block/>    'Via' |<fo:block/>    'Accept' |<fo:block/>    'Accept-Charset' |<fo:block/>    'Accept-Encoding' |<fo:block/>    'Accept-Language' |<fo:block/>    'Authorization' |<fo:block/>    'From' |<fo:block/>    'Host' |<fo:block/>    'If-Modified-Since' |<fo:block/>    'If-Match' |<fo:block/>    'If-None-Match' |<fo:block/>    'If-Range' |<fo:block/>    'If-Unmodified-Since' |<fo:block/>    'Max-Forwards' |<fo:block/>    'Proxy-Authorization' |<fo:block/>    'Range' |<fo:block/>    'Referer' |<fo:block/>    'User-Agent' |<fo:block/>    'Age' |<fo:block/>    'Location' |<fo:block/>    'Proxy-Authenticate' |<fo:block/>    'Public' |<fo:block/>    'Retry-After' |<fo:block/>    'Server' |<fo:block/>    'Vary' |<fo:block/>    'Warning' |<fo:block/>    'Www-Authenticate' |<fo:block/>    'Allow' |<fo:block/>    'Content-Base' |<fo:block/>    'Content-Encoding' |<fo:block/>    'Content-Language' |<fo:block/>    'Content-Length' |<fo:block/>    'Content-Location' |<fo:block/>    'Content-Md5' |<fo:block/>    'Content-Range' |<fo:block/>    'Content-Type' |<fo:block/>    'Etag' |<fo:block/>    'Expires' |<fo:block/>    'Last-Modified' |<fo:block/>    'Accept-Ranges' |<fo:block/>    'Set-Cookie' |<fo:block/>    'Set-Cookie2' |<fo:block/>    'X-Forwarded-For' |<fo:block/>    'Cookie' |<fo:block/>    'Keep-Alive' |<fo:block/>    'Proxy-Connection' |<fo:block/>    HttpString</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">HttpString = string() | binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes the binary <fo:inline font-family="monospace">Bin</fo:inline> according to the packet
          protocol specified by <fo:inline font-family="monospace">Type</fo:inline>. Similar to the packet
          handling done by sockets with option
          <fo:inline font-family="monospace">{packet,Type}.</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an entire packet is contained in <fo:inline font-family="monospace">Bin</fo:inline>, it is
          returned together with the remainder of the binary as
          <fo:inline font-family="monospace">{ok,Packet,Rest}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Bin</fo:inline> does not contain the entire packet,
          <fo:inline font-family="monospace">{more,Length}</fo:inline> is returned.
          <fo:inline font-family="monospace">Length</fo:inline> is either the
          expected <fo:inline font-weight="bold">total size</fo:inline> of the packet, or <fo:inline font-family="monospace">undefined</fo:inline>
          if the expected packet size is unknown. <fo:inline font-family="monospace">decode_packet</fo:inline>
          can then be called again with more data added.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the packet does not conform to the protocol format,
          <fo:inline font-family="monospace">{error,Reason}</fo:inline> is returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Type</fo:inline>s:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">raw | 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No packet handling is done. The entire binary is
              returned unless it is empty.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">1 | 2 | 4</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Packets consist of a header specifying the number of
              bytes in the packet, followed by that number of bytes.
              The length of the header can be one, two, or four bytes;
              the order of the bytes is big-endian. The header
              is stripped off when the packet is returned.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">line</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A packet is a line-terminated by a delimiter byte,
              default is the latin-1 newline character. The delimiter
              byte is included in the returned packet unless the line
              was truncated according to option <fo:inline font-family="monospace">line_length</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">asn1 | cdr | sunrm | fcgi | tpkt</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The header is <fo:inline font-weight="bold">not</fo:inline> stripped off.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The meanings of the packet types are as follows:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">     
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">asn1</fo:inline> - ASN.1 BER</fo:block><fo:block-container><fo:block start-indent="2em"/></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sunrm</fo:inline> - Sun's RPC encoding</fo:block><fo:block-container><fo:block start-indent="2em"/></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cdr</fo:inline> - CORBA (GIOP 1.1)</fo:block><fo:block-container><fo:block start-indent="2em"/></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">fcgi</fo:inline> - Fast CGI</fo:block><fo:block-container><fo:block start-indent="2em"/></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">tpkt</fo:inline> - TPKT format [RFC1006]</fo:block><fo:block-container><fo:block start-indent="2em"/></fo:block-container>
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">http | httph | http_bin | httph_bin</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Hypertext Transfer Protocol. The packets
              are returned with the format according to
              <fo:inline font-family="monospace">HttpPacket</fo:inline> described earlier.
              A packet is either a
              request, a response, a header, or an end of header
              mark. Invalid lines are returned as
              <fo:inline font-family="monospace">HttpError</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Recognized request methods and header fields are returned
              as atoms. Others are returned as strings. Strings of
              unrecognized header fields are formatted with only
              capital letters first and after hyphen characters, for
              example, <fo:inline font-family="monospace">"Sec-Websocket-Key"</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The protocol type <fo:inline font-family="monospace">http</fo:inline> is only to be used for
              the first line when an <fo:inline font-family="monospace">HttpRequest</fo:inline> or an
              <fo:inline font-family="monospace">HttpResponse</fo:inline> is expected.
              The following calls are to use <fo:inline font-family="monospace">httph</fo:inline> to get
              <fo:inline font-family="monospace">HttpHeader</fo:inline>s until
              <fo:inline font-family="monospace">http_eoh</fo:inline> is returned, which marks the end of the
              headers and the beginning of any following message body.</fo:block> 
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The variants <fo:inline font-family="monospace">http_bin</fo:inline> and <fo:inline font-family="monospace">httph_bin</fo:inline> return
              strings (<fo:inline font-family="monospace">HttpString</fo:inline>) as binaries instead of lists.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{packet_size, integer() &gt;= 0}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the maximum allowed size of the packet body.
            If the packet header indicates that the length of the
            packet is longer than the maximum allowed length, the
            packet is considered invalid. Defaults to 0, which means
            no size limit.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{line_length, integer() &gt;= 0}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For packet type <fo:inline font-family="monospace">line</fo:inline>, lines longer than
              the indicated length are truncated.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">line_length</fo:inline> also applies to <fo:inline font-family="monospace">http*</fo:inline>
              packet types as an alias for option <fo:inline font-family="monospace">packet_size</fo:inline>
              if <fo:inline font-family="monospace">packet_size</fo:inline> itself is not set. This use is
              only intended for backward compatibility.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{line_delimiter, 0 =&lt; byte() =&lt; 255}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For packet type <fo:inline font-family="monospace">line</fo:inline>, sets the delimiting byte.
            Default is the latin-1 character <fo:inline font-family="monospace">$\n</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:decode_packet(1,&lt;&lt;3,"abcd"&gt;&gt;,[]).</fo:inline>
{ok,&lt;&lt;"abc"&gt;&gt;,&lt;&lt;"d"&gt;&gt;}
&gt; <fo:inline font-weight="bold">erlang:decode_packet(1,&lt;&lt;5,"abcd"&gt;&gt;,[]).</fo:inline>
{more,6}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1216528"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:delete_element(Index, Tuple1) -&gt; Tuple2</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Index = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>1..tuple_size(Tuple1)</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Tuple1 = Tuple2 = tuple()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a new tuple with element at <fo:inline font-family="monospace">Index</fo:inline>
          removed from tuple <fo:inline font-family="monospace">Tuple1</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:delete_element(2, {one, two, three}).</fo:inline>
{one,three}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1222048"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">delete_module(Module) -&gt; true | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the current code for <fo:inline font-family="monospace">Module</fo:inline> become old
          code and deletes all references for this module from the export table.
          Returns <fo:inline font-family="monospace">undefined</fo:inline> if the module does not exist,
          otherwise <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is intended for the code server (see
            <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>)
            and is not to be used elsewhere.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if there already is an old version of
          <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1228896"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">demonitor(MonitorRef) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MonitorRef = reference()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">MonitorRef</fo:inline> is a reference that the
          calling process obtained by calling
          <fo:inline font-style="italic"><fo:inline font-family="monospace">monitor/2</fo:inline></fo:inline>,
          this monitoring is turned off. If the monitoring is already
          turned off, nothing happens.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Once <fo:inline font-family="monospace">demonitor(MonitorRef)</fo:inline> has returned, it is
          guaranteed that no <fo:inline font-family="monospace">{'DOWN',
          MonitorRef, _, _, _}</fo:inline> message,
          because of the monitor, will be placed in the caller message queue
          in the future. However, a <fo:inline font-family="monospace">{'DOWN',
          MonitorRef, _, _, _}</fo:inline> message
          can have been placed in the caller message queue before
          the call. It is therefore usually advisable
          to remove such a <fo:inline font-family="monospace">'DOWN'</fo:inline> message from the message queue
          after monitoring has been stopped.
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">demonitor(MonitorRef, [flush])</fo:inline></fo:inline>
          can be used instead of <fo:inline font-family="monospace">demonitor(MonitorRef)</fo:inline>
          if this cleanup is wanted.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before Erlang/OTP R11B (ERTS 5.5) <fo:inline font-family="monospace">demonitor/1</fo:inline>
            behaved completely asynchronously, that is, the monitor was active
            until the "demonitor signal" reached the monitored entity. This
            had one undesirable effect. You could never know when
            you were guaranteed <fo:inline font-weight="bold">not</fo:inline> to receive a <fo:inline font-family="monospace">DOWN</fo:inline> message
            because of the monitor.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current behavior can be viewed as two combined operations:
            asynchronously send a "demonitor signal" to the monitored entity
            and ignore any future results of the monitor.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: It is an error if <fo:inline font-family="monospace">MonitorRef</fo:inline> refers to a
          monitoring started by another process. Not all such cases are
          cheap to check. If checking is cheap, the call fails with
          <fo:inline font-family="monospace">badarg</fo:inline>, for example if <fo:inline font-family="monospace">MonitorRef</fo:inline> is a
          remote reference.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1244032"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">demonitor(MonitorRef, OptionList) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MonitorRef = reference()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OptionList = [Option]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = flush | info</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The returned value is <fo:inline font-family="monospace">true</fo:inline> unless <fo:inline font-family="monospace">info</fo:inline> is part
          of <fo:inline font-family="monospace">OptionList</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">demonitor(MonitorRef, [])</fo:inline> is equivalent to
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">demonitor(MonitorRef)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Option</fo:inline>s:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">flush</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes (one) <fo:inline font-family="monospace">{_,
              MonitorRef, _, _, _}</fo:inline> message,
              if there is one, from the caller message queue after
              monitoring has been stopped.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling <fo:inline font-family="monospace">demonitor(MonitorRef, [flush])</fo:inline>
              is equivalent to the following, but more efficient:</fo:block>
            <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
demonitor(MonitorRef),
receive
    {_, MonitorRef, _, _, _} -&gt;
        true
after 0 -&gt;
        true
end</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">info</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The returned value is one of the following:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">true</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The monitor was found and removed. In this case,
                no <fo:inline font-family="monospace">'DOWN'</fo:inline> message corresponding to this
                monitor has been delivered and will not be delivered.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">false</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The monitor was not found and could not be removed.
                This probably because someone already has placed a
                <fo:inline font-family="monospace">'DOWN'</fo:inline> message corresponding to this monitor
                in the caller message queue.</fo:block>
              </fo:block></fo:block-container>
            </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If option <fo:inline font-family="monospace">info</fo:inline> is combined with option <fo:inline font-family="monospace">flush</fo:inline>,
              <fo:inline font-family="monospace">false</fo:inline> is returned if a flush was needed,
              otherwise <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">More options can be added in a future release.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If <fo:inline font-family="monospace">OptionList</fo:inline> is not a list.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If <fo:inline font-family="monospace">Option</fo:inline> is an invalid option.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The same failure as for
            <fo:inline font-style="italic"><fo:inline font-family="monospace">demonitor/1</fo:inline></fo:inline>.
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1270656"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">disconnect_node(Node) -&gt; boolean() | ignored</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Forces the disconnection of a node. This appears to
          the node <fo:inline font-family="monospace">Node</fo:inline> as if the local node has crashed.
          This BIF is mainly used in the Erlang network authentication
          protocols.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if disconnection succeeds,
          otherwise <fo:inline font-family="monospace">false</fo:inline>. If the local node is not alive,
          <fo:inline font-family="monospace">ignored</fo:inline> is returned.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1275456"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:display(Term) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints a text representation of <fo:inline font-family="monospace">Term</fo:inline> on the
          standard output.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is intended for debugging only.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1279344"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">element(N, Tuple) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">N = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>1..tuple_size(Tuple)</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Tuple = tuple()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the <fo:inline font-family="monospace">N</fo:inline>th element (numbering from 1) of
          <fo:inline font-family="monospace">Tuple</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">element(2, {a, b, c}).</fo:inline>
b</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1285280"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erase() -&gt; [{Key, Val}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Key = Val = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process dictionary and deletes it, for
          example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">put(key1, {1, 2, 3}),</fo:inline>
<fo:inline font-weight="bold">put(key2, [a, b, c]),</fo:inline>
<fo:inline font-weight="bold">erase().</fo:inline>
[{key1,{1,2,3}},{key2,[a,b,c]}]</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1289424"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erase(Key) -&gt; Val | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Key = Val = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value <fo:inline font-family="monospace">Val</fo:inline> associated with
          <fo:inline font-family="monospace">Key</fo:inline> and deletes it from the process dictionary.
          Returns <fo:inline font-family="monospace">undefined</fo:inline> if no value is associated with
          <fo:inline font-family="monospace">Key</fo:inline>. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">put(key1, {merry, lambs, are, playing}),</fo:inline>
<fo:inline font-weight="bold">X = erase(key1),</fo:inline>
<fo:inline font-weight="bold">{X, erase(key1)}.</fo:inline>
{{merry,lambs,are,playing},undefined}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1295696"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">error(Reason) -&gt; no_return()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the execution of the calling process with the reason
          <fo:inline font-family="monospace">Reason</fo:inline>, where <fo:inline font-family="monospace">Reason</fo:inline>
          is any term. The exit reason is
          <fo:inline font-family="monospace">{Reason, Where}</fo:inline>, where <fo:inline font-family="monospace">Where</fo:inline>
          is a list of the functions most recently called (the current
          function first). As evaluating this function causes
          the process to terminate, it has no return value. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">catch error(foobar).</fo:inline>
{'EXIT',{foobar,[{erl_eval,do_apply,5},
                 {erl_eval,expr,5},
                 {shell,exprs,6},
                 {shell,eval_exprs,6},
                 {shell,eval_loop,3}]}}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1301808"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">error(Reason, Args) -&gt; no_return()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the execution of the calling process with the reason
          <fo:inline font-family="monospace">Reason</fo:inline>, where <fo:inline font-family="monospace">Reason</fo:inline>
          is any term. The exit reason is
          <fo:inline font-family="monospace">{Reason, Where}</fo:inline>, where <fo:inline font-family="monospace">Where</fo:inline>
          is a list of the functions most recently called (the current
          function first). <fo:inline font-family="monospace">Args</fo:inline> is expected to be the
          list of arguments for the current function; in Beam it is used
          to provide the arguments for the current function in
          the term <fo:inline font-family="monospace">Where</fo:inline>. As evaluating this function causes
          the process to terminate, it has no return value.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1307776"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">exit(Reason) -&gt; no_return()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the execution of the calling process with exit reason
          <fo:inline font-family="monospace">Reason</fo:inline>, where <fo:inline font-family="monospace">Reason</fo:inline>
          is any term. As
          evaluating this function causes the process to terminate, it
          has no return value. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">exit(foobar).</fo:inline>
** exception exit: foobar
&gt; <fo:inline font-weight="bold">catch exit(foobar).</fo:inline>
{'EXIT',foobar}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp1312800"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">exit(Pid, Reason) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid() | port()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends an exit signal with exit reason <fo:inline font-family="monospace">Reason</fo:inline> to
          the process or port identified by <fo:inline font-family="monospace">Pid</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following behavior applies if <fo:inline font-family="monospace">Reason</fo:inline>
          is any term, except <fo:inline font-family="monospace">normal</fo:inline> or <fo:inline font-family="monospace">kill</fo:inline>:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Pid</fo:inline> is not trapping exits,
            <fo:inline font-family="monospace">Pid</fo:inline>
            itself exits with exit reason <fo:inline font-family="monospace">Reason</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Pid</fo:inline> is trapping exits, the exit
            signal is transformed into a message
            <fo:inline font-family="monospace">{'EXIT', From, Reason}</fo:inline>
            and delivered to the message queue of <fo:inline font-family="monospace">Pid</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">From</fo:inline> is the process identifier of the process
            that sent the exit signal. See also
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">process_flag/2</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Reason</fo:inline> is the atom <fo:inline font-family="monospace">normal</fo:inline>,
          <fo:inline font-family="monospace">Pid</fo:inline>
          does not exit. If it is trapping exits, the exit signal is
          transformed into a message <fo:inline font-family="monospace">{'EXIT', From, normal}</fo:inline>
          and delivered to its message queue.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Reason</fo:inline> is the atom <fo:inline font-family="monospace">kill</fo:inline>,
          that is, if <fo:inline font-family="monospace">exit(Pid, kill)</fo:inline> is called,
          an untrappable exit signal is sent to <fo:inline font-family="monospace">Pid</fo:inline>,
          which unconditionally exits with exit reason <fo:inline font-family="monospace">killed</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp11933344"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:external_size(Term) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calculates, without doing the encoding, the maximum byte size for
          a term encoded in the Erlang external term format. The following
          condition applies always:</fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">Size1 = byte_size(term_to_binary()),</fo:inline>
&gt; <fo:inline font-weight="bold">Size2 = erlang:external_size(),</fo:inline>
&gt; <fo:inline font-weight="bold">true = Size1 =&lt; Size2.</fo:inline>
true</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is equivalent to a call to:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erlang:external_size(, [])</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp11940112"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:external_size(Term, Options) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [{minor_version, Version :: integer() &gt;= 0}]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calculates, without doing the encoding, the maximum byte size for
          a term encoded in the Erlang external term format. The following
          condition applies always:</fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">Size1 = byte_size(term_to_binary(, )),</fo:inline>
&gt; <fo:inline font-weight="bold">Size2 = erlang:external_size(, ),</fo:inline>
&gt; <fo:inline font-weight="bold">true = Size1 =&lt; Size2.</fo:inline>
true</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">{minor_version, Version}</fo:inline> specifies how
          floats are encoded. For a detailed description, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">term_to_binary/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp11948464"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">float(Number) -&gt; float()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Number = number()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a float by converting <fo:inline font-family="monospace">Number</fo:inline> to a float,
          for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">float(55).</fo:inline>
55.0</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If used on the top level in a guard, it tests whether the
            argument is a floating point number; for clarity, use
            <fo:inline font-style="italic"><fo:inline font-family="monospace">is_float/1</fo:inline></fo:inline>
            instead.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">float/1</fo:inline> is used in an expression in a guard,
            such as '<fo:inline font-family="monospace">float(A) == 4.0</fo:inline>', it converts a number as
            described earlier.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp11955872"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">float_to_binary(Float) -&gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Float = float()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as
          <fo:inline font-family="monospace">float_to_binary(Float,[{scientific,20}])</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp11959184"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">float_to_binary(Float, Options) -&gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Float = float()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [Option]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = <fo:block/>    {decimals, Decimals :: 0..253} |<fo:block/>    {scientific, Decimals :: 0..249} |<fo:block/>    compact</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a binary corresponding to the text
          representation of <fo:inline font-family="monospace">Float</fo:inline> using fixed decimal 
          point formatting. <fo:inline font-family="monospace">Options</fo:inline> behaves in the same
          way as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">float_to_list/2</fo:inline></fo:inline>. Examples:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">float_to_binary(7.12, [{decimals, 4}]).</fo:inline>
&lt;&lt;"7.1200"&gt;&gt;
&gt; <fo:inline font-weight="bold">float_to_binary(7.12, [{decimals, 4}, compact]).</fo:inline>
&lt;&lt;"7.12"&gt;&gt;</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp11964880"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">float_to_list(Float) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Float = float()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as
          <fo:inline font-family="monospace">float_to_list(Float,[{scientific,20}])</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp11968192"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">float_to_list(Float, Options) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Float = float()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [Option]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = <fo:block/>    {decimals, Decimals :: 0..253} |<fo:block/>    {scientific, Decimals :: 0..249} |<fo:block/>    compact</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a string corresponding to the text representation
          of <fo:inline font-family="monospace">Float</fo:inline> using fixed decimal point formatting.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Available options:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If option <fo:inline font-family="monospace">decimals</fo:inline> is specified, the returned value
            contains at most <fo:inline font-family="monospace">Decimals</fo:inline> number of digits past the
            decimal point. If the number does not fit in the internal
            static buffer of 256 bytes, the function throws <fo:inline font-family="monospace">badarg</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If option <fo:inline font-family="monospace">compact</fo:inline> is specified, the trailing zeros
            at the end of the list are truncated. This option is only
            meaningful together with option <fo:inline font-family="monospace">decimals</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If option <fo:inline font-family="monospace">scientific</fo:inline> is specified, the float is
            formatted using scientific notation with <fo:inline font-family="monospace">Decimals</fo:inline>
            digits of precision.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Options</fo:inline> is <fo:inline font-family="monospace">[]</fo:inline>, the function behaves as
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">float_to_list/1</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">float_to_list(7.12, [{decimals, 4}]).</fo:inline>
"7.1200"
&gt; <fo:inline font-weight="bold">float_to_list(7.12, [{decimals, 4}, compact]).</fo:inline>
"7.12"</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp11981936"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">floor(Number) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Number = number()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the largest integer not greater than
	<fo:inline font-family="monospace">Number</fo:inline>.
        For example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">floor(-10.5).</fo:inline>
-11</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp11986192"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:fun_info(Fun) -&gt; [{Item, Info}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Fun = function()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Item = <fo:block/>    arity |<fo:block/>    env |<fo:block/>    index |<fo:block/>    name |<fo:block/>    module |<fo:block/>    new_index |<fo:block/>    new_uniq |<fo:block/>    pid |<fo:block/>    type |<fo:block/>    uniq</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Info = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list with information about the fun
          <fo:inline font-family="monospace">Fun</fo:inline>. Each list element is a tuple. The order
          of the tuples is undefined, and more tuples can be added in a
          future release.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is mainly intended for debugging, but it can
            sometimes be useful in library functions that need
            to verify, for example, the arity of a fun.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two types of funs have slightly different semantics:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A fun created by <fo:inline font-family="monospace">fun M:F/A</fo:inline> is called an
            <fo:inline font-weight="bold">external</fo:inline> fun. Calling it will always call the
            function <fo:inline font-family="monospace">F</fo:inline> with arity <fo:inline font-family="monospace">A</fo:inline> in the latest code for
            module <fo:inline font-family="monospace">M</fo:inline>. Notice that module <fo:inline font-family="monospace">M</fo:inline> does not even
            need to be loaded when the fun <fo:inline font-family="monospace">fun M:F/A</fo:inline> is created.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All other funs are called <fo:inline font-weight="bold">local</fo:inline>. When a local fun
            is called, the same version of the code that created the fun
            is called (even if a newer version of the module has been
            loaded).</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following elements are always present in the list
          for both local and external funs:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{type, Type}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Type</fo:inline> is <fo:inline font-family="monospace">local</fo:inline> or <fo:inline font-family="monospace">external</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{module, Module}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Module</fo:inline> (an atom) is the module name.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Fun</fo:inline> is a local fun, <fo:inline font-family="monospace">Module</fo:inline> is the module
              in which the fun is defined.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Fun</fo:inline> is an external fun, <fo:inline font-family="monospace">Module</fo:inline> is the
              module that the fun refers to.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{name, Name}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Name</fo:inline> (an atom) is a function name.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Fun</fo:inline> is a local fun, <fo:inline font-family="monospace">Name</fo:inline> is the name
              of the local function that implements the fun.
              (This name was generated by the compiler, and is
              only of informational use. As it is a local function, it
              cannot be called directly.)
              If no code is currently loaded for the fun, <fo:inline font-family="monospace">[]</fo:inline>
              is returned instead of an atom.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Fun</fo:inline> is an external fun, <fo:inline font-family="monospace">Name</fo:inline> is the name
              of the exported function that the fun refers to.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{arity, Arity}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Arity</fo:inline> is the number of arguments that the fun
              is to be called with.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{env, Env}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Env</fo:inline> (a list) is the environment or free variables
              for the fun. For external funs, the returned list is
              always empty.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following elements are only present in the list if
          <fo:inline font-family="monospace">Fun</fo:inline> is local:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{pid, Pid}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Pid</fo:inline> is the process identifier of the process
              that originally created the fun.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{index, Index}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Index</fo:inline> (an integer) is an index into the module
              fun table.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{new_index, Index}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Index</fo:inline> (an integer) is an index into the module
              fun table.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{new_uniq, Uniq}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Uniq</fo:inline> (a binary) is a unique value for this fun. It
              is calculated from the compiled code for the entire module.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{uniq, Uniq}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Uniq</fo:inline> (an integer) is a unique value for this fun.
              As from Erlang/OTP R15, this integer is calculated from the
              compiled code for the entire module. Before Erlang/OTP R15, this
              integer was based on only the body of the fun.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12023552"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:fun_info(Fun, Item) -&gt; {Item, Info}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Fun = function()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Item = <fo:inline font-style="italic">fun_info_item()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Info = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">fun_info_item() = <fo:block/>    arity |<fo:block/>    env |<fo:block/>    index |<fo:block/>    name |<fo:block/>    module |<fo:block/>    new_index |<fo:block/>    new_uniq |<fo:block/>    pid |<fo:block/>    type |<fo:block/>    uniq</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns information about <fo:inline font-family="monospace">Fun</fo:inline> as specified by
          <fo:inline font-family="monospace">Item</fo:inline>, in the form
          <fo:inline font-family="monospace">{Item,Info}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For any fun, <fo:inline font-family="monospace">Item</fo:inline> can be any of the atoms
          <fo:inline font-family="monospace">module</fo:inline>, <fo:inline font-family="monospace">name</fo:inline>, <fo:inline font-family="monospace">arity</fo:inline>, <fo:inline font-family="monospace">env</fo:inline>, or
          <fo:inline font-family="monospace">type</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a local fun, <fo:inline font-family="monospace">Item</fo:inline> can also be any of the
          atoms <fo:inline font-family="monospace">index</fo:inline>, <fo:inline font-family="monospace">new_index</fo:inline>, <fo:inline font-family="monospace">new_uniq</fo:inline>,
          <fo:inline font-family="monospace">uniq</fo:inline>, and <fo:inline font-family="monospace">pid</fo:inline>. For an external fun, the value
          of any of these items is always the atom <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:fun_info/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12037072"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:fun_to_list(Fun) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Fun = function()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a string corresponding to the text
          representation of <fo:inline font-family="monospace">Fun</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12040112"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:function_exported(Module, Function, Arity) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Arity = arity()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if the module <fo:inline font-family="monospace">Module</fo:inline> is
          loaded and contains an exported function
          <fo:inline font-family="monospace">Function/Arity</fo:inline>,
          or if there is a BIF (a built-in function implemented in C)
          with the specified name, otherwise returns <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function used to return <fo:inline font-family="monospace">false</fo:inline> for BIFs
            before Erlang/OTP 18.0.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12046688"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">garbage_collect() -&gt; true</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Forces an immediate garbage collection of the
          executing process. The function is not to be used unless
          it has been noticed (or there are good reasons to suspect)
          that the spontaneous garbage collection will occur too late
          or not at all.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Improper use can seriously degrade system performance.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12050480"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">garbage_collect(Pid) -&gt; GCResult</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">GCResult = boolean()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">garbage_collect(Pid, [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12054576"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">garbage_collect(Pid, OptionList) -&gt; GCResult | async</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">RequestId = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = {async, RequestId} | {type, major | minor}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OptionList = [Option]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">GCResult = boolean()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Garbage collects the node local process identified by
          <fo:inline font-family="monospace">Pid</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Option</fo:inline>:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{async, RequestId}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The function <fo:inline font-family="monospace">garbage_collect/2</fo:inline> returns
            the value <fo:inline font-family="monospace">async</fo:inline> immediately after the request
            has been sent. When the request has been processed, the
            process that called this function is passed a message on
            the form <fo:inline font-family="monospace">{garbage_collect,
            RequestId, GCResult}</fo:inline>.
          </fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{type, 'major' | 'minor'}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Triggers garbage collection of requested type. Default value is
            <fo:inline font-family="monospace">'major'</fo:inline>, which would trigger a fullsweep GC.
            The option <fo:inline font-family="monospace">'minor'</fo:inline> is considered a hint and may lead to
            either minor or major GC run.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Pid</fo:inline> equals <fo:inline font-family="monospace">self()</fo:inline>, and
          no <fo:inline font-family="monospace">async</fo:inline> option has been passed, the garbage
          collection is performed at once, that is, the same as calling
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">garbage_collect/0</fo:inline></fo:inline>.
          Otherwise a request for garbage collection
          is sent to the process identified by <fo:inline font-family="monospace">Pid</fo:inline>,
          and will be handled when appropriate. If no <fo:inline font-family="monospace">async</fo:inline>
          option has been passed, the caller blocks until
          <fo:inline font-family="monospace">GCResult</fo:inline> is available and can be returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GCResult</fo:inline> informs about the result of
          the garbage collection request as follows:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">true</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            The process identified by <fo:inline font-family="monospace">Pid</fo:inline> has
            been garbage collected.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">false</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            No garbage collection was performed, as
            the process identified by <fo:inline font-family="monospace">Pid</fo:inline>
            terminated before the request could be satisfied.
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the same caveats apply as for
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">garbage_collect/0</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If <fo:inline font-family="monospace">Pid</fo:inline> is not a node local process identifier.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If <fo:inline font-family="monospace">OptionList</fo:inline> is an invalid list of options.
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12079328"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get() -&gt; [{Key, Val}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Key = Val = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process dictionary as a list of
          <fo:inline font-family="monospace">{Key, Val}</fo:inline> tuples, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">put(key1, merry),</fo:inline>
<fo:inline font-weight="bold">put(key2, lambs),</fo:inline>
<fo:inline font-weight="bold">put(key3, {are, playing}),</fo:inline>
<fo:inline font-weight="bold">get().</fo:inline>
[{key1,merry},{key2,lambs},{key3,{are,playing}}]</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12085504"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get(Key) -&gt; Val | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Key = Val = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value <fo:inline font-family="monospace">Val</fo:inline> associated with
          <fo:inline font-family="monospace">Key</fo:inline> in the process dictionary, or <fo:inline font-family="monospace">undefined</fo:inline>
          if <fo:inline font-family="monospace">Key</fo:inline> does not exist. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">put(key1, merry),</fo:inline>
<fo:inline font-weight="bold">put(key2, lambs),</fo:inline>
<fo:inline font-weight="bold">put({any, [valid, term]}, {are, playing}),</fo:inline>
<fo:inline font-weight="bold">get({any, [valid, term]}).</fo:inline>
{are,playing}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12092544"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:get_cookie() -&gt; Cookie | nocookie</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Cookie = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the magic cookie of the local node if the node is
          alive, otherwise the atom <fo:inline font-family="monospace">nocookie</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12095712"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_keys() -&gt; [Key]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Key = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all keys present in the process dictionary,
          for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">put(dog, {animal,1}),</fo:inline>
<fo:inline font-weight="bold">put(cow, {animal,2}),</fo:inline>
<fo:inline font-weight="bold">put(lamb, {animal,3}),</fo:inline>
<fo:inline font-weight="bold">get_keys().</fo:inline>
[dog,cow,lamb]</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12100592"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_keys(Val) -&gt; [Key]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Val = Key = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of keys that are associated with the value
          <fo:inline font-family="monospace">Val</fo:inline> in the process dictionary, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">put(mary, {1, 2}),</fo:inline>
<fo:inline font-weight="bold">put(had, {1, 2}),</fo:inline>
<fo:inline font-weight="bold">put(a, {1, 2}),</fo:inline>
<fo:inline font-weight="bold">put(little, {1, 2}),</fo:inline>
<fo:inline font-weight="bold">put(dog, {1, 3}),</fo:inline>
<fo:inline font-weight="bold">put(lamb, {1, 2}),</fo:inline>
<fo:inline font-weight="bold">get_keys({1, 2}).</fo:inline>
[mary,had,a,little,lamb]</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12107376"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:get_stacktrace() -&gt; [<fo:inline font-style="italic">stack_item()</fo:inline>]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stack_item() = <fo:block/>    {Module :: module(),<fo:block/>     Function :: atom(),<fo:block/>     Arity :: arity() | (Args :: [term()]),<fo:block/>     Location ::<fo:block/>         [{file, Filename :: string()} |<fo:block/>          {line, Line :: integer() &gt;= 1}]}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the call stack back-trace (<fo:inline font-weight="bold">stacktrace</fo:inline>) for an
          exception that has just been caught
	  in the calling process as a list of
          <fo:inline font-family="monospace">{Module,Function,Arity,Location}</fo:inline>
          tuples. Field <fo:inline font-family="monospace">Arity</fo:inline> in the first tuple can be the
          argument list of that function call instead of an arity integer,
          depending on the exception.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If there has not been any exceptions in a process, the
          stacktrace is <fo:inline font-family="monospace">[]</fo:inline>. After a code change for the process,
          the stacktrace can also be reset to <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erlang:get_stacktrace/0</fo:inline> is only guaranteed to return
	a stacktrace if called (directly or indirectly) from within the
	scope of a <fo:inline font-family="monospace">try</fo:inline> expression. That is, the following call works:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
try Expr
catch
  C:R -&gt;
   {C,R,erlang:get_stacktrace()}
end</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As does this call:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
try Expr
catch
  C:R -&gt;
   {C,R,helper()}
end

helper() -&gt;
  erlang:get_stacktrace().</fo:block>

        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a future release,
        <fo:inline font-family="monospace">erlang:get_stacktrace/0</fo:inline> will return <fo:inline font-family="monospace">[]</fo:inline> if called
        from outside a <fo:inline font-family="monospace">try</fo:inline> expression.</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The stacktrace is the same data as operator <fo:inline font-family="monospace">catch</fo:inline>
          returns, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{'EXIT',{badarg,Stacktrace}} = catch abs(x)</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Location</fo:inline> is a (possibly empty) list
          of two-tuples that
          can indicate the location in the source code of the function.
          The first element is an atom describing the type of
          information in the second element. The following
          items can occur:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">file</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The second element of the tuple is a string (list of
            characters) representing the filename of the source file
            of the function.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">line</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The second element of the tuple is the line number
            (an integer &gt; 0) in the source file
            where the exception occurred or the function was called.
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">error/1</fo:inline></fo:inline> and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">error/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12127248"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">group_leader() -&gt; pid()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier of the group leader for the
          process evaluating the function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Every process is a member of some process group and all
          groups have a <fo:inline font-weight="bold">group leader</fo:inline>. All I/O from the group
          is channeled to the group leader. When a new process is
          spawned, it gets the same group leader as the spawning
          process. Initially, at system startup, <fo:inline font-family="monospace">init</fo:inline> is both
          its own group leader and the group leader of all processes.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12131392"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">group_leader(GroupLeader, Pid) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">GroupLeader = Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the group leader of <fo:inline font-family="monospace">Pid</fo:inline>
          to <fo:inline font-family="monospace">GroupLeader</fo:inline>.
          Typically, this is used when a process started from a
          certain shell is to have another group leader than
          <fo:inline font-family="monospace">init</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">group_leader/0</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12137072"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">halt() -&gt; no_return()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">halt(0, [])</fo:inline></fo:inline>. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">halt().</fo:inline>
os_prompt%</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12141520"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">halt(Status) -&gt; no_return()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Status = integer() &gt;= 0 | abort | string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">halt(Status, [])</fo:inline></fo:inline>. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">halt(17).</fo:inline>
os_prompt% <fo:inline font-weight="bold">echo $?</fo:inline>
17
os_prompt%</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12146960"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">halt(Status, Options) -&gt; no_return()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Status = integer() &gt;= 0 | abort | string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [Option]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = {flush, boolean()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Status</fo:inline> must be a non-negative integer, a string,
          or the atom <fo:inline font-family="monospace">abort</fo:inline>.
          Halts the Erlang runtime system. Has no return value.
          Depending on <fo:inline font-family="monospace">Status</fo:inline>, the following occurs:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always">integer()</fo:block>
          <fo:block-container><fo:block start-indent="2em">The runtime system exits with integer value
            <fo:inline font-family="monospace">Status</fo:inline>
            as status code to the calling environment (OS).
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">string()</fo:block>
          <fo:block-container><fo:block start-indent="2em">An Erlang crash dump is produced with <fo:inline font-family="monospace">Status</fo:inline>
            as slogan. Then the runtime system exits with status code <fo:inline font-family="monospace">1</fo:inline>.
            Note that only code points in the range 0-255 may be used
	    and the string will be truncated if longer than 200 characters.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">abort</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The runtime system aborts producing a core dump, if that is
            enabled in the OS.
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On many platforms, the OS supports only status
            codes 0-255. A too large status code is truncated by clearing
            the high bits.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For integer <fo:inline font-family="monospace">Status</fo:inline>, the Erlang runtime system
          closes all ports and allows async threads to finish their
          operations before exiting. To exit without such flushing, use
          <fo:inline font-family="monospace">Option</fo:inline> as <fo:inline font-family="monospace">{flush,false}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For statuses <fo:inline font-family="monospace">string()</fo:inline> and <fo:inline font-family="monospace">abort</fo:inline>, option
          <fo:inline font-family="monospace">flush</fo:inline> is ignored and flushing is <fo:inline font-weight="bold">not</fo:inline> done.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12161888"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">hd(List) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">List = [term(), ...]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the head of <fo:inline font-family="monospace">List</fo:inline>, that is,
          the first element, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">hd([1,2,3,4,5]).</fo:inline>
1</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">List</fo:inline> is the empty
          list <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12168336"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:hibernate(Module, Function, Args) -&gt; no_return()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Puts the calling process into a wait state where its memory
          allocation has been reduced as much as possible. This is
          useful if the process does not expect to receive any messages
          soon.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process is awaken when a message is sent to it, and control
          resumes in <fo:inline font-family="monospace">Module:Function</fo:inline> with
          the arguments specified by <fo:inline font-family="monospace">Args</fo:inline> with the call
          stack emptied, meaning that the process terminates when that
          function returns. Thus <fo:inline font-family="monospace">erlang:hibernate/3</fo:inline> never
          returns to its caller.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the process has any message in its message queue,
          the process is awakened immediately in the same way as
          described earlier.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In more technical terms, <fo:inline font-family="monospace">erlang:hibernate/3</fo:inline>
          discards the call stack for the process,
          and then garbage collects the process. After this,
          all live data is in one continuous heap. The heap
          is then shrunken to the exact same size as the live data
          that it holds (even if that size is less than the minimum
          heap size for the process).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the size of the live data in the process is less than
          the minimum heap size, the first garbage collection occurring
          after the process is awakened ensures that the heap
          size is changed to a size not smaller than the minimum heap
          size.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that emptying the call stack means that any surrounding
          <fo:inline font-family="monospace">catch</fo:inline> is removed and must be re-inserted after
          hibernation. One effect of this is that processes started
          using <fo:inline font-family="monospace">proc_lib</fo:inline> (also indirectly, such as
          <fo:inline font-family="monospace">gen_server</fo:inline> processes), are to use
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">proc_lib:hibernate/3</fo:inline></fo:inline>
          instead, to ensure that the exception handler continues to work
          when the process wakes up.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12179216"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:insert_element(Index, Tuple1, Term) -&gt; Tuple2</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Index = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>1..tuple_size(Tuple1)
        + 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Tuple1 = Tuple2 = tuple()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a new tuple with element <fo:inline font-family="monospace">Term</fo:inline>
          inserted at position
          <fo:inline font-family="monospace">Index</fo:inline> in tuple <fo:inline font-family="monospace">Tuple1</fo:inline>.
          All elements from position <fo:inline font-family="monospace">Index</fo:inline> and upwards are
          pushed one step higher in the new tuple <fo:inline font-family="monospace">Tuple2</fo:inline>.
          Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:insert_element(2, {one, two, three}, new).</fo:inline>
{one,new,two,three}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12186816"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">integer_to_binary(Integer) -&gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Integer = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a binary corresponding to the text
          representation of <fo:inline font-family="monospace">Integer</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">integer_to_binary(77).</fo:inline>
&lt;&lt;"77"&gt;&gt;</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12190976"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">integer_to_binary(Integer, Base) -&gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Integer = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Base = 2..36</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a binary corresponding to the text
          representation of <fo:inline font-family="monospace">Integer</fo:inline> in base
          <fo:inline font-family="monospace">Base</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">integer_to_binary(1023, 16).</fo:inline>
&lt;&lt;"3FF"&gt;&gt;</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12195728"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">integer_to_list(Integer) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Integer = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a string corresponding to the text
          representation of <fo:inline font-family="monospace">Integer</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">integer_to_list(77).</fo:inline>
"77"</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12199888"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">integer_to_list(Integer, Base) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Integer = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Base = 2..36</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a string corresponding to the text
          representation of <fo:inline font-family="monospace">Integer</fo:inline> in base
          <fo:inline font-family="monospace">Base</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">integer_to_list(1023, 16).</fo:inline>
"3FF"</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12204640"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">iolist_size(Item) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Item = iolist() | binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer, that is the size in bytes,
          of the binary that would be the result of
          <fo:inline font-family="monospace">iolist_to_binary(Item)</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">iolist_size([1,2|&lt;&lt;3,4&gt;&gt;]).</fo:inline>
4</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12209168"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">iolist_to_binary(IoListOrBinary) -&gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoListOrBinary = iolist() | binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a binary that is made from the integers and
          binaries in <fo:inline font-family="monospace">IoListOrBinary</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">Bin1 = &lt;&lt;1,2,3&gt;&gt;.</fo:inline>
&lt;&lt;1,2,3&gt;&gt;
&gt; <fo:inline font-weight="bold">Bin2 = &lt;&lt;4,5&gt;&gt;.</fo:inline>
&lt;&lt;4,5&gt;&gt;
&gt; <fo:inline font-weight="bold">Bin3 = &lt;&lt;6&gt;&gt;.</fo:inline>
&lt;&lt;6&gt;&gt;
&gt; <fo:inline font-weight="bold">iolist_to_binary([Bin1,1,[2,3,Bin2],4|Bin3]).</fo:inline>
&lt;&lt;1,2,3,1,2,3,4,5,4,6&gt;&gt;</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12214576"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_alive() -&gt; boolean()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if the local node is alive (that is, if
          the node can be part of a distributed system), otherwise
          <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12218208"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_atom(Term) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is an atom,
          otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12222784"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_binary(Term) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is a binary,
          otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A binary always contains a complete number of bytes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12227776"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_bitstring(Term) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is a
          bitstring (including a binary), otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12232384"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_boolean(Term) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is the
          atom <fo:inline font-family="monospace">true</fo:inline> or the atom <fo:inline font-family="monospace">false</fo:inline> (that is, a boolean).
          Otherwise returns <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12237808"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:is_builtin(Module, Function, Arity) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Arity = arity()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is useful for builders of cross-reference tools.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if
          <fo:inline font-family="monospace">Module:Function/Arity</fo:inline>
          is a BIF implemented in C, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12243232"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_float(Term) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is a floating point
          number, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12247760"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_function(Term) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is a fun, otherwise
          <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12252336"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_function(Term, Arity) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Arity = arity()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is a fun that can be
          applied with <fo:inline font-family="monospace">Arity</fo:inline> number of arguments, otherwise
          <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12257440"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_integer(Term) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is an integer,
          otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12262016"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_list(Term) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is a list with
          zero or more elements, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12266624"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_map(Term) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is a map,
          otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12271200"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_number(Term) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is an integer or a
          floating point number. Otherwise returns <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12275808"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_pid(Term) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is a process
          identifier, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12280288"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_port(Term) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is a port identifier,
          otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12284816"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_process_alive(Pid) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Pid</fo:inline> must refer to a process at the local
          node.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if the process exists and is alive, that
          is, is not exiting and has not exited. Otherwise returns
          <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12289280"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_record(Term, RecordTag) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">RecordTag = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is a tuple and its
          first element is <fo:inline font-family="monospace">RecordTag</fo:inline>.
          Otherwise returns <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally the compiler treats calls to <fo:inline font-family="monospace">is_record/2</fo:inline>
            especially. It emits code to verify that <fo:inline font-family="monospace">Term</fo:inline>
            is a tuple, that its first element is
            <fo:inline font-family="monospace">RecordTag</fo:inline>, and that the
            size is correct. However, if <fo:inline font-family="monospace">RecordTag</fo:inline> is
            not a literal atom, the BIF <fo:inline font-family="monospace">is_record/2</fo:inline> is called
            instead and the size of the tuple is not verified.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests, if <fo:inline font-family="monospace">RecordTag</fo:inline> is
          a literal atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp12298496"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_record(Term, RecordTag, Size) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">RecordTag = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Size = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RecordTag</fo:inline> must be an atom.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if
          <fo:inline font-family="monospace">Term</fo:inline> is a tuple,
          its first element is <fo:inline font-family="monospace">RecordTag</fo:inline>,
          and its size is <fo:inline font-family="monospace">Size</fo:inline>.
          Otherwise returns <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests if <fo:inline font-family="monospace">RecordTag</fo:inline> is
          a literal atom and <fo:inline font-family="monospace">Size</fo:inline> is a literal integer.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is documented for completeness. Usually
            <fo:inline font-family="monospace">is_record/2</fo:inline> is to be used.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13599184"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_reference(Term) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is a reference,
          otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13603760"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_tuple(Term) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is a tuple,
          otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13608336"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">length(List) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">List = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the length of <fo:inline font-family="monospace">List</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">length([1,2,3,4,5,6,7,8,9]).</fo:inline>
9</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13612896"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">link(PidOrPort) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">PidOrPort = pid() | port()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a link between the calling process and another
          process (or port) <fo:inline font-family="monospace">PidOrPort</fo:inline>, if there is
          not such a link
          already. If a process attempts to create a link to itself,
          nothing is done. Returns <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">PidOrPort</fo:inline> does not exist, the behavior
          of the BIF
          depends on if the calling process is trapping exits or not (see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">process_flag/2</fo:inline></fo:inline>):</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the calling process is not trapping exits, and
            checking <fo:inline font-family="monospace">PidOrPort</fo:inline> is cheap
            (that is, if <fo:inline font-family="monospace">PidOrPort</fo:inline>
            is local), <fo:inline font-family="monospace">link/1</fo:inline> fails with reason <fo:inline font-family="monospace">noproc</fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Otherwise, if the calling process is trapping exits,
            and/or <fo:inline font-family="monospace">PidOrPort</fo:inline> is remote, <fo:inline font-family="monospace">link/1</fo:inline>
            returns <fo:inline font-family="monospace">true</fo:inline>, but an exit signal with reason <fo:inline font-family="monospace">noproc</fo:inline>
            is sent to the calling process.</fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13624624"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">list_to_atom(String) -&gt; atom()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">String = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the atom whose text representation is
          <fo:inline font-family="monospace">String</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from Erlang/OTP 20, <fo:inline font-family="monospace">String</fo:inline> may contain
          any Unicode character. Earlier versions allowed only ISO-latin-1
          characters as the implementation did not allow Unicode characters
          above 255. For more information on Unicode support in atoms, see
          <fo:inline font-style="italic">note on UTF-8
          encoded atoms</fo:inline>
          in section "External Term Format" in the User's Guide.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">list_to_atom("Erlang").</fo:inline>
'Erlang'</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13631232"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">list_to_binary(IoList) -&gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoList = iolist()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a binary that is made from the integers and
          binaries in <fo:inline font-family="monospace">IoList</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">Bin1 = &lt;&lt;1,2,3&gt;&gt;.</fo:inline>
&lt;&lt;1,2,3&gt;&gt;
&gt; <fo:inline font-weight="bold">Bin2 = &lt;&lt;4,5&gt;&gt;.</fo:inline>
&lt;&lt;4,5&gt;&gt;
&gt; <fo:inline font-weight="bold">Bin3 = &lt;&lt;6&gt;&gt;.</fo:inline>
&lt;&lt;6&gt;&gt;
&gt; <fo:inline font-weight="bold">list_to_binary([Bin1,1,[2,3,Bin2],4|Bin3]).</fo:inline>
&lt;&lt;1,2,3,1,2,3,4,5,4,6&gt;&gt;</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13636640"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">list_to_bitstring(BitstringList) -&gt; bitstring()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">BitstringList = <fo:inline font-style="italic">bitstring_list()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">bitstring_list() = <fo:block/>    maybe_improper_list(byte() | bitstring() | <fo:inline font-style="italic">bitstring_list()</fo:inline>,<fo:block/>                        bitstring() | [])</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a bitstring that is made from the integers and
          bitstrings in <fo:inline font-family="monospace">BitstringList</fo:inline>. (The last tail in
          <fo:inline font-family="monospace">BitstringList</fo:inline> is allowed to be a bitstring.)
          Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">Bin1 = &lt;&lt;1,2,3&gt;&gt;.</fo:inline>
&lt;&lt;1,2,3&gt;&gt;
&gt; <fo:inline font-weight="bold">Bin2 = &lt;&lt;4,5&gt;&gt;.</fo:inline>
&lt;&lt;4,5&gt;&gt;
&gt; <fo:inline font-weight="bold">Bin3 = &lt;&lt;6,7:4&gt;&gt;.</fo:inline>
&lt;&lt;6,7:4&gt;&gt;
&gt; <fo:inline font-weight="bold">list_to_bitstring([Bin1,1,[2,3,Bin2],4|Bin3]).</fo:inline>
&lt;&lt;1,2,3,1,2,3,4,5,4,6,7:4&gt;&gt;</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13643168"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">list_to_existing_atom(String) -&gt; atom()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">String = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the atom whose text representation is
          <fo:inline font-family="monospace">String</fo:inline>,
          but only if there already exists such atom.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if there does not already exist an atom
          whose text representation is <fo:inline font-family="monospace">String</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13647792"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">list_to_float(String) -&gt; float()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">String = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the float whose text representation is
          <fo:inline font-family="monospace">String</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">list_to_float("2.2017764e+0").</fo:inline>
2.2017764</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">String</fo:inline> contains a bad
          representation of a float.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13653360"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">list_to_integer(String) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">String = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer whose text representation is
          <fo:inline font-family="monospace">String</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">list_to_integer("123").</fo:inline>
123</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">String</fo:inline> contains a bad
          representation of an integer.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13658912"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">list_to_integer(String, Base) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">String = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Base = 2..36</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer whose text representation in base
          <fo:inline font-family="monospace">Base</fo:inline> is <fo:inline font-family="monospace">String</fo:inline>,
          for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">list_to_integer("3FF", 16).</fo:inline>
1023</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">String</fo:inline> contains a bad
          representation of an integer.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13665072"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">list_to_pid(String) -&gt; pid()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">String = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a process identifier whose text representation is a 
          <fo:inline font-family="monospace">String</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">list_to_pid("&lt;0.4.1&gt;").</fo:inline>
&lt;0.4.1&gt;</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">String</fo:inline> contains a bad
          representation of a process identifier.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is intended for debugging and is not to be used
            in application programs.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13671680"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">list_to_port(String) -&gt; port()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">String = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a port identifier whose text representation is a
          <fo:inline font-family="monospace">String</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">list_to_port("#Port&lt;0.4&gt;").</fo:inline>
#Port&lt;0.4&gt;</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">String</fo:inline> contains a bad
          representation of a port identifier.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is intended for debugging and is not to be used
            in application programs.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13678304"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">list_to_ref(String) -&gt; reference()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">String = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a reference whose text representation is a
          <fo:inline font-family="monospace">String</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">list_to_ref("#Ref&lt;0.4192537678.4073193475.71181&gt;").</fo:inline>
#Ref&lt;0.4192537678.4073193475.71181&gt;</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">String</fo:inline> contains a bad
          representation of a reference.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is intended for debugging and is not to be used
            in application programs.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp3772272"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">list_to_tuple(List) -&gt; tuple()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">List = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a tuple corresponding to <fo:inline font-family="monospace">List</fo:inline>,
          for example</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">list_to_tuple([share, ['Ericsson_B', 163]]).</fo:inline>
{share, ['Ericsson_B', 163]}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">List</fo:inline> can contain any Erlang terms.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp3834528"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">load_module(Module, Binary) -&gt; {module, Module} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Binary = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = badfile | not_purged | on_load</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Binary</fo:inline> contains the object code for module
          <fo:inline font-family="monospace">Module</fo:inline>, this BIF loads that object code. If
          the code for module <fo:inline font-family="monospace">Module</fo:inline> already exists, all
          export references are replaced so they point to the newly
          loaded code. The previously loaded code is kept in the system
          as old code, as there can still be processes executing
          that code.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns either <fo:inline font-family="monospace">{module, Module}</fo:inline>, or
          <fo:inline font-family="monospace">{error, Reason}</fo:inline> if loading fails.
          <fo:inline font-family="monospace">Reason</fo:inline> is one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badfile</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The object code in <fo:inline font-family="monospace">Binary</fo:inline> has an
            incorrect format <fo:inline font-weight="bold">or</fo:inline> the object code contains code
            for another module than <fo:inline font-family="monospace">Module</fo:inline>.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">not_purged</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:inline font-family="monospace">Binary</fo:inline> contains a module that cannot be
            loaded because old code for this module already exists.
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is intended for the code server (see
            <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>)
            and is not to be used elsewhere.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13687536"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:load_nif(Path, LoadInfo) -&gt; ok | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Path = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">LoadInfo = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Error = {error, {Reason, Text :: string()}}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    load_failed | bad_lib | load | reload | upgrade | old_code</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Loads and links a dynamic library containing native
          implemented functions (NIFs) for a module. <fo:inline font-family="monospace">Path</fo:inline>
          is a file path to the shareable object/dynamic library file minus
          the OS-dependent file extension (<fo:inline font-family="monospace">.so</fo:inline> for Unix and
          <fo:inline font-family="monospace">.dll</fo:inline> for Windows). Notice that on most OSs the library has
          to have a different name on disc when an upgrade of the nif is
          done. If the name is the same, but the contents differ, the
          old library may be loaded instead. For information on how to
          implement a NIF library, see
        <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_nif(3)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">LoadInfo</fo:inline> can be any term. It is passed on to
          the library as part of the initialization. A good practice is
          to include a module version number to support future code
          upgrade scenarios.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The call to <fo:inline font-family="monospace">load_nif/2</fo:inline> must be made
          <fo:inline font-weight="bold">directly</fo:inline> from the Erlang code of the module that the
          NIF library belongs to. It returns either <fo:inline font-family="monospace">ok</fo:inline>, or
          <fo:inline font-family="monospace">{error,{Reason,Text}}</fo:inline> if loading fails.
          <fo:inline font-family="monospace">Reason</fo:inline> is one of the following atoms
          while <fo:inline font-family="monospace">Text</fo:inline> is a human readable string that
          can give more information about the failure:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">load_failed</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The OS failed to load the NIF library.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">bad_lib</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The library did not fulfill the requirements as a NIF
            library of the calling module.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">load | upgrade</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The corresponding library callback was unsuccessful.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">reload</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">A NIF library is already loaded for this module instance.
	    The previously deprecated <fo:inline font-family="monospace">reload</fo:inline> feature was removed in OTP 20.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">old_code</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The call to <fo:inline font-family="monospace">load_nif/2</fo:inline> was made from the old
            code of a module that has been upgraded; this is not
            allowed.
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">notsup</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Lack of support. Such as loading NIF library for a
	    HiPE compiled module.
	  </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13703776"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:loaded() -&gt; [Module]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all loaded Erlang modules (current and
          old code), including preloaded modules.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13707440"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:localtime() -&gt; DateTime</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">DateTime = <fo:inline font-style="italic">calendar:datetime()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current local date and time,
          <fo:inline font-family="monospace">{{Year, Month, Day}, {Hour, Minute, Second}}</fo:inline>,
          for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:localtime().</fo:inline>
{{1996,11,6},{14,45,17}}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time zone and Daylight Saving Time correction depend
          on the underlying OS.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13712016"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:localtime_to_universaltime(Localtime) -&gt; Universaltime</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Localtime = Universaltime = <fo:inline font-style="italic">calendar:datetime()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts local date and time to Universal Time Coordinated
          (UTC), if supported by the underlying OS. Otherwise
          no conversion is done and <fo:inline font-family="monospace">Localtime</fo:inline>
          is returned. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:localtime_to_universaltime({{1996,11,6},{14,45,17}}).</fo:inline>
{{1996,11,6},{13,45,17}}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Localtime</fo:inline> denotes an
          invalid date and time.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13717920"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:localtime_to_universaltime(Localtime, IsDst) -&gt;<fo:block/>                                     Universaltime</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Localtime = Universaltime = <fo:inline font-style="italic">calendar:datetime()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IsDst = true | false | undefined</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts local date and time to Universal Time Coordinated
          (UTC) as <fo:inline font-family="monospace">erlang:localtime_to_universaltime/1</fo:inline>,
          but the caller decides if Daylight Saving Time is active.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">IsDst == true</fo:inline>, <fo:inline font-family="monospace">Localtime</fo:inline>
          is during Daylight Saving Time, if <fo:inline font-family="monospace">IsDst == false</fo:inline>
          it is not. If <fo:inline font-family="monospace">IsDst == undefined</fo:inline>, the underlying
          OS can guess, which is the same as calling
          <fo:inline font-family="monospace">erlang:localtime_to_universaltime(Localtime)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:localtime_to_universaltime({{1996,11,6},{14,45,17}}, true).</fo:inline>
{{1996,11,6},{12,45,17}}
&gt; <fo:inline font-weight="bold">erlang:localtime_to_universaltime({{1996,11,6},{14,45,17}}, false).</fo:inline>
{{1996,11,6},{13,45,17}}
&gt; <fo:inline font-weight="bold">erlang:localtime_to_universaltime({{1996,11,6},{14,45,17}}, undefined).</fo:inline>
{{1996,11,6},{13,45,17}}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Localtime</fo:inline> denotes an
          invalid date and time.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13729392"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">make_ref() -&gt; reference()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a
          <fo:inline font-style="italic">
          unique reference</fo:inline>. The reference is unique among
          connected nodes.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Known issue: When a node is restarted multiple
            times with the same node name, references created
            on a newer node can be mistaken for a reference
            created on an older node with the same node name.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13733952"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:make_tuple(Arity, InitialValue) -&gt; tuple()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Arity = arity()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">InitialValue = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a new tuple of the specified <fo:inline font-family="monospace">Arity</fo:inline>, where
          all elements are <fo:inline font-family="monospace">InitialValue</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:make_tuple(4, []).</fo:inline>
{[],[],[],[]}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13738704"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:make_tuple(Arity, DefaultValue, InitList) -&gt; tuple()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Arity = arity()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">DefaultValue = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">InitList = [{Position :: integer() &gt;= 1, term()}]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a tuple of size <fo:inline font-family="monospace">Arity</fo:inline>, where each element
          has value <fo:inline font-family="monospace">DefaultValue</fo:inline>, and then fills in
          values from <fo:inline font-family="monospace">InitList</fo:inline>.
          Each list element in <fo:inline font-family="monospace">InitList</fo:inline>
          must be a two-tuple, where the first element is a position in the
          newly created tuple and the second element is any term. If a
          position occurs more than once in the list, the term corresponding
          to the last occurrence is used. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:make_tuple(5, [], [{2,ignored},{5,zz},{2,aa}]).</fo:inline>
{[],aa,[],[],zz}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13744944"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">map_size(Map) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Map = #{}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer, which is the number of key-value pairs
          in <fo:inline font-family="monospace">Map</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">map_size(#{a=&gt;1, b=&gt;2, c=&gt;3}).</fo:inline>
3</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13749584"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:match_spec_test(MatchAgainst, MatchSpec, Type) -&gt;<fo:block/>                          TestResult</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MatchAgainst = [term()] | tuple()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MatchSpec = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = table | trace</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TestResult = <fo:block/>    {ok, term(), [return_trace], [{error | warning, string()}]} |<fo:block/>    {error, [{error | warning, string()}]}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tests a match specification used in calls to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ets:select/2</fo:inline></fo:inline>
          and <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:trace_pattern/3</fo:inline></fo:inline>.
          The function tests both a match specification for "syntactic"
          correctness and runs the match specification against the object. If
          the match specification contains errors, the tuple <fo:inline font-family="monospace">{error,
          Errors}</fo:inline> is returned, where <fo:inline font-family="monospace">Errors</fo:inline> is a list of natural
          language descriptions of what was wrong with the match
          specification.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Type</fo:inline> is <fo:inline font-family="monospace">table</fo:inline>, the object to match
          against is to be a tuple. The function then returns
          <fo:inline font-family="monospace">{ok,Result,[],Warnings}</fo:inline>, where <fo:inline font-family="monospace">Result</fo:inline> is what would
          have been the result in a real <fo:inline font-family="monospace">ets:select/2</fo:inline> call, or
          <fo:inline font-family="monospace">false</fo:inline> if the match specification does not match the object
          tuple.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Type</fo:inline> is <fo:inline font-family="monospace">trace</fo:inline>, the object to match
          against is to be a list. The function returns
          <fo:inline font-family="monospace">{ok, Result, Flags, Warnings}</fo:inline>, where <fo:inline font-family="monospace">Result</fo:inline> is one of
          the following:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">true</fo:inline> if a trace message is to be emitted</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">false</fo:inline> if a trace message is not to be emitted</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The message term to be appended to the trace message</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Flags</fo:inline> is a list containing all the trace flags to be enabled,
          currently this is only <fo:inline font-family="monospace">return_trace</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a useful debugging and test tool, especially when writing
          complicated match specifications.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ets:test_ms/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13767056"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">max(Term1, Term2) -&gt; Maximum</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term1 = Term2 = Maximum = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the largest of <fo:inline font-family="monospace">Term1</fo:inline> and
          <fo:inline font-family="monospace">Term2</fo:inline>.
          If the terms are equal, <fo:inline font-family="monospace">Term1</fo:inline> is returned.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13771440"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:md5(Data) -&gt; Digest</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Digest = binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Computes an MD5 message digest from <fo:inline font-family="monospace">Data</fo:inline>, where
          the length of the digest is 128 bits (16 bytes).
          <fo:inline font-family="monospace">Data</fo:inline>
          is a binary or a list of small integers and binaries.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information about MD5, see
          <fo:inline font-weight="bold"><fo:basic-link external-destination="href">
          RFC 1321 - The MD5 Message-Digest Algorithm</fo:basic-link></fo:inline>.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The MD5 Message-Digest Algorithm is <fo:inline font-weight="bold">not</fo:inline> considered
            safe for code-signing or software-integrity purposes.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13778032"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:md5_final(Context) -&gt; Digest</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Context = Digest = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Finishes the update of an MD5 <fo:inline font-family="monospace">Context</fo:inline> and returns
          the computed <fo:inline font-family="monospace">MD5</fo:inline> message digest.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13781776"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:md5_init() -&gt; Context</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Context = binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an MD5 context, to be used in the following calls to
          <fo:inline font-family="monospace">md5_update/2</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13784896"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:md5_update(Context, Data) -&gt; NewContext</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Context = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">NewContext = binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Update an MD5 <fo:inline font-family="monospace">Context</fo:inline> with
          <fo:inline font-family="monospace">Data</fo:inline> and returns a
          <fo:inline font-family="monospace">NewContext</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13789312"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:memory() -&gt; [{Type, Size}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = <fo:inline font-style="italic">memory_type()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Size = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">memory_type() = <fo:block/>    total |<fo:block/>    processes |<fo:block/>    processes_used |<fo:block/>    system |<fo:block/>    atom |<fo:block/>    atom_used |<fo:block/>    binary |<fo:block/>    code |<fo:block/>    ets |<fo:block/>    low |<fo:block/>    maximum</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list with information about memory
          dynamically allocated by the Erlang emulator. Each list
          element is a tuple <fo:inline font-family="monospace">{Type, Size}</fo:inline>. The first element
          <fo:inline font-family="monospace">Type</fo:inline> is an atom describing memory type. The second
          element <fo:inline font-family="monospace">Size</fo:inline> is the memory size in bytes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Memory types:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">total</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The total amount of memory currently allocated. This is
              the same as the sum of the memory size for <fo:inline font-family="monospace">processes</fo:inline>
              and <fo:inline font-family="monospace">system</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">processes</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The total amount of memory currently allocated for
              the Erlang processes.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">processes_used</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The total amount of memory currently used by the Erlang
              processes. This is part of the memory presented as
              <fo:inline font-family="monospace">processes</fo:inline> memory.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">system</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The total amount of memory currently allocated for
              the emulator that is not directly related to any Erlang
              process. Memory presented as <fo:inline font-family="monospace">processes</fo:inline> is not
              included in this memory.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">atom</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The total amount of memory currently allocated for atoms.
              This memory is part of the memory presented as
              <fo:inline font-family="monospace">system</fo:inline> memory.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">atom_used</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The total amount of memory currently used for atoms.
              This memory is part of the memory presented as
              <fo:inline font-family="monospace">atom</fo:inline> memory.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">binary</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The total amount of memory currently allocated for
              binaries. This memory is part of the memory presented
              as <fo:inline font-family="monospace">system</fo:inline> memory.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">code</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The total amount of memory currently allocated for
              Erlang code. This memory is part of the memory presented
              as <fo:inline font-family="monospace">system</fo:inline> memory.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ets</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The total amount of memory currently allocated for ETS
              tables. This memory is part of the memory presented as
              <fo:inline font-family="monospace">system</fo:inline> memory.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">low</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only on 64-bit halfword emulator.
              The total amount of memory allocated in low memory areas
              that are restricted to &lt; 4 GB, although
              the system can have more memory.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be removed in a future release of the halfword
              emulator.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">maximum</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The maximum total amount of memory allocated since
              the emulator was started. This tuple is only present
              when the emulator is run with instrumentation.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information on how to run the emulator with
              instrumentation, see
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">instrument(3)</fo:inline></fo:inline>
              and/or <fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">system</fo:inline> value is not complete. Some allocated
            memory that is to be part of this value is not.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the emulator is run with instrumentation,
            the <fo:inline font-family="monospace">system</fo:inline> value is more accurate, but memory
            directly allocated for <fo:inline font-family="monospace">malloc</fo:inline> (and friends) is still
            not part of the <fo:inline font-family="monospace">system</fo:inline> value. Direct calls to
            <fo:inline font-family="monospace">malloc</fo:inline> are only done from OS-specific runtime
            libraries and perhaps from user-implemented Erlang drivers
            that do not use the memory allocation functions in
            the driver interface.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As the <fo:inline font-family="monospace">total</fo:inline> value is the sum of <fo:inline font-family="monospace">processes</fo:inline>
            and <fo:inline font-family="monospace">system</fo:inline>, the error in <fo:inline font-family="monospace">system</fo:inline> propagates
            to the <fo:inline font-family="monospace">total</fo:inline> value.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The different amounts of memory that are summed are
            <fo:inline font-weight="bold">not</fo:inline> gathered atomically, which introduces
            an error in the result.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The different values have the following relation to each
          other. Values beginning with an uppercase letter is not part
          of the result.</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
total      = processes + system
processes  = processes_used + ProcessesNotUsed
system     = atom + binary + code + ets + OtherSystem
atom       = atom_used + AtomNotUsed
RealTotal  = processes + RealSystem
RealSystem = system + MissedSystem</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">More tuples in the returned list can be added in a
          future release.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">total</fo:inline> value is supposed to be the total amount
            of memory dynamically allocated by the emulator. Shared
            libraries, the code of the emulator itself, and
            the emulator stacks are not supposed to be included. That
            is, the <fo:inline font-family="monospace">total</fo:inline> value is <fo:inline font-weight="bold">not</fo:inline> supposed to be
            equal to the total size of all pages mapped to the emulator.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, because of fragmentation and prereservation of
            memory areas, the size of the memory segments containing
            the dynamically allocated memory blocks can be much
            larger than the total size of the dynamically allocated
            memory blocks.</fo:block>
        </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from ERTS 5.6.4, <fo:inline font-family="monospace">erlang:memory/0</fo:inline> requires that
            all <fo:inline font-style="italic"><fo:inline font-family="monospace">erts_alloc(3)</fo:inline></fo:inline>
            allocators are enabled (default behavior).</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">notsup</fo:inline> if an
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erts_alloc(3)</fo:inline></fo:inline>
          allocator has been disabled.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13836800"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:memory(Type :: <fo:inline font-style="italic">memory_type()</fo:inline>) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block id="idp13837904"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:memory(TypeList :: [<fo:inline font-style="italic">memory_type()</fo:inline>]) -&gt;<fo:block/>                 [{<fo:inline font-style="italic">memory_type()</fo:inline>, integer() &gt;= 0}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">memory_type() = <fo:block/>    total |<fo:block/>    processes |<fo:block/>    processes_used |<fo:block/>    system |<fo:block/>    atom |<fo:block/>    atom_used |<fo:block/>    binary |<fo:block/>    code |<fo:block/>    ets |<fo:block/>    low |<fo:block/>    maximum</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the memory size in bytes allocated for memory of type
          <fo:inline font-family="monospace">Type</fo:inline>. The argument can also be specified as a list
          of <fo:inline font-family="monospace">memory_type()</fo:inline> atoms, in which case a corresponding list of
          <fo:inline font-family="monospace">{memory_type(), Size :: integer &gt;= 0}</fo:inline> tuples is returned.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from ERTS 5.6.4,
            <fo:inline font-family="monospace">erlang:memory/1</fo:inline> requires that
            all <fo:inline font-style="italic"><fo:inline font-family="monospace">erts_alloc(3)</fo:inline></fo:inline>
            allocators are enabled (default behavior).</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If <fo:inline font-family="monospace">Type</fo:inline> is not one of the memory types
            listed in the description of
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:memory/0</fo:inline></fo:inline>.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If <fo:inline font-family="monospace">maximum</fo:inline> is passed as <fo:inline font-family="monospace">Type</fo:inline> and
            the emulator is not run in instrumented mode.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">notsup</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If an <fo:inline font-style="italic"><fo:inline font-family="monospace">erts_alloc(3)</fo:inline></fo:inline>
            allocator has been disabled.
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:memory/0</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13854016"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">min(Term1, Term2) -&gt; Minimum</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term1 = Term2 = Minimum = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the smallest of <fo:inline font-family="monospace">Term1</fo:inline> and
          <fo:inline font-family="monospace">Term2</fo:inline>.
          If the terms are equal, <fo:inline font-family="monospace">Term1</fo:inline> is returned.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13858416"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">module_loaded(Module) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if the module <fo:inline font-family="monospace">Module</fo:inline>
          is loaded, otherwise <fo:inline font-family="monospace">false</fo:inline>. It does not attempt to load
          the module.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is intended for the code server (see
            <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>)
            and is not to be used elsewhere.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13864400"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">monitor(Type :: process, Item :: <fo:inline font-style="italic">monitor_process_identifier()</fo:inline>) -&gt;<fo:block/>           MonitorRef</fo:block></fo:block><fo:block id="idp13865504"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">monitor(Type :: port, Item :: <fo:inline font-style="italic">monitor_port_identifier()</fo:inline>) -&gt;<fo:block/>           MonitorRef</fo:block></fo:block><fo:block id="idp13866608"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">monitor(Type :: time_offset, Item :: clock_service) -&gt; MonitorRef</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MonitorRef = reference()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">registered_name() = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">registered_process_identifier() = <fo:block/>    <fo:inline font-style="italic">registered_name()</fo:inline> | {<fo:inline font-style="italic">registered_name()</fo:inline>, node()}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">monitor_process_identifier() = <fo:block/>    pid() | <fo:inline font-style="italic">registered_process_identifier()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">monitor_port_identifier() = port() | <fo:inline font-style="italic">registered_name()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a monitor request of type <fo:inline font-family="monospace">Type</fo:inline> to the
	  entity identified by <fo:inline font-family="monospace">Item</fo:inline>. If the monitored entity
          does not exist or it changes monitored state, the caller of
          <fo:inline font-family="monospace">monitor/2</fo:inline> is notified by a message on the following format:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{Tag, , , Object, Info}</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The monitor request is an asynchronous signal. That is, it
	    takes time before the signal reaches its destination.</fo:block>
        </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Type</fo:inline> can be one of the following atoms:
          <fo:inline font-family="monospace">process</fo:inline>, <fo:inline font-family="monospace">port</fo:inline> or <fo:inline font-family="monospace">time_offset</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">process</fo:inline> or <fo:inline font-family="monospace">port</fo:inline> monitor is triggered only once,
          after that it is removed from both monitoring process and
          the monitored entity. Monitors are fired when the monitored process
          or port terminates, does not exist at the moment of creation,
          or if the connection to it is lost. If the connection to it is lost,
          we do not know if it still exists. The monitoring is also turned off
          when <fo:inline font-style="italic">demonitor/1</fo:inline> is
          called.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">process</fo:inline> or <fo:inline font-family="monospace">port</fo:inline> monitor by name
          resolves the <fo:inline font-family="monospace">RegisteredName</fo:inline> to <fo:inline font-family="monospace">pid()</fo:inline> or <fo:inline font-family="monospace">port()</fo:inline>
          only once at the moment of monitor instantiation, later changes to
          the name registration will not affect the existing monitor.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a <fo:inline font-family="monospace">process</fo:inline> or <fo:inline font-family="monospace">port</fo:inline> monitor is triggered,
          a <fo:inline font-family="monospace">'DOWN'</fo:inline> message is sent that has the following pattern:</fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{'DOWN', MonitorRef, Type, Object, Info}</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the monitor message <fo:inline font-family="monospace">MonitorRef</fo:inline> and <fo:inline font-family="monospace">Type</fo:inline> are the
          same as described earlier, and:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Object</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The monitored entity, which triggered the event. When monitoring
              a local process or port, <fo:inline font-family="monospace">Object</fo:inline> will be equal to the
              <fo:inline font-family="monospace">pid()</fo:inline> or <fo:inline font-family="monospace">port()</fo:inline> that was being monitored. When
              monitoring process or port by name, <fo:inline font-family="monospace">Object</fo:inline> will have format
              <fo:inline font-family="monospace">{RegisteredName, Node}</fo:inline> where <fo:inline font-family="monospace">RegisteredName</fo:inline> is the
              name which has been used with <fo:inline font-family="monospace">monitor/2</fo:inline> call and
              <fo:inline font-family="monospace">Node</fo:inline> is local or remote node name (for ports monitored by
              name, <fo:inline font-family="monospace">Node</fo:inline> is always local node name).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Info</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Either the exit reason of the process, <fo:inline font-family="monospace">noproc</fo:inline>
              (process or port did not exist at the time of monitor creation),
              or <fo:inline font-family="monospace">noconnection</fo:inline> (no connection to the node where the
              monitored process resides). </fo:block></fo:block></fo:block-container>
        </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an attempt is made to monitor a process on an older node
          (where remote process monitoring is not implemented or
          where remote process monitoring by registered name is not
          implemented), the call fails with <fo:inline font-family="monospace">badarg</fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The format of the <fo:inline font-family="monospace">'DOWN'</fo:inline> message changed in ERTS
            5.2 (Erlang/OTP R9B) for monitoring
            <fo:inline font-weight="bold">by registered name</fo:inline>. Element <fo:inline font-family="monospace">Object</fo:inline> of
            the <fo:inline font-family="monospace">'DOWN'</fo:inline> message could in earlier versions
            sometimes be the process identifier of the monitored process and sometimes
            be the registered name. Now element <fo:inline font-family="monospace">Object</fo:inline> is
            always a tuple consisting of the registered name and
            the node name. Processes on new nodes (ERTS 5.2
            or higher versions) always get <fo:inline font-family="monospace">'DOWN'</fo:inline> messages on
            the new format even if they are monitoring processes on old
            nodes. Processes on old nodes always get <fo:inline font-family="monospace">'DOWN'</fo:inline>
            messages on the old format.</fo:block>
        </fo:block>

        <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always">Monitoring a <fo:inline font-family="monospace">process</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates monitor between the current process and another
            process identified by <fo:inline font-family="monospace">Item</fo:inline>, which can be a
            <fo:inline font-family="monospace">pid()</fo:inline> (local or remote), an atom <fo:inline font-family="monospace">RegisteredName</fo:inline> or
            a tuple <fo:inline font-family="monospace">{RegisteredName, Node}</fo:inline> for a registered process,
            located elsewhere.</fo:block>
        </fo:block></fo:block-container>

        <fo:block keep-with-next.within-page="always">Monitoring a <fo:inline font-family="monospace">port</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates monitor between the current process and a port
            identified by <fo:inline font-family="monospace">Item</fo:inline>, which can be a
            <fo:inline font-family="monospace">port()</fo:inline> (only local), an atom <fo:inline font-family="monospace">RegisteredName</fo:inline> or
            a tuple <fo:inline font-family="monospace">{RegisteredName, Node}</fo:inline> for a registered port,
            located on this node. Note, that attempt to monitor a remote port
            will result in <fo:inline font-family="monospace">badarg</fo:inline>.</fo:block>
        </fo:block></fo:block-container>

        <fo:block keep-with-next.within-page="always">Monitoring a
          <fo:inline font-family="monospace">time_offset</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Monitors changes in
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">time offset</fo:inline></fo:inline>
	      between
	      <fo:inline font-style="italic">Erlang
	      monotonic time</fo:inline> and
	      <fo:inline font-style="italic">Erlang
	      system time</fo:inline>. One valid <fo:inline font-family="monospace">Item</fo:inline>
              exists in combination with the
	      <fo:inline font-family="monospace">time_offset Type</fo:inline>, namely the atom
	      <fo:inline font-family="monospace">clock_service</fo:inline>. Notice that the atom <fo:inline font-family="monospace">clock_service</fo:inline> is
	      <fo:inline font-weight="bold">not</fo:inline> the registered name of a process. In this
	      case it serves as an identifier of the runtime system internal
	      clock service at current runtime system instance.</fo:block>

	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The monitor is triggered when the time offset is changed.
	      This either if the time offset value is changed, or if the
	      offset is changed from preliminary to final during
	      <fo:inline font-style="italic">finalization
	      of the time offset</fo:inline> when the
	      <fo:inline font-style="italic">single
	      time warp mode</fo:inline> is used. When a change from preliminary
	      to final time offset is made, the monitor is triggered once
	      regardless of whether the time offset value was changed
	      or not.</fo:block>

	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the runtime system is in
	      <fo:inline font-style="italic">multi
	      time warp mode</fo:inline>, the time offset is changed when
	      the runtime system detects that the
	      <fo:inline font-style="italic">OS system
	      time</fo:inline> has changed. The runtime system does, however,
	      not detect this immediately when it occurs. A task checking
	      the time offset is scheduled to execute at least once a minute,
	      so under normal operation this is to be detected within a
	      minute, but during heavy load it can take longer time.</fo:block>

	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The monitor is <fo:inline font-weight="bold">not</fo:inline> automatically removed
	      after it has been triggered. That is, repeated changes of
	      the time offset trigger the monitor repeatedly.</fo:block>

            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the monitor is triggered a <fo:inline font-family="monospace">'CHANGE'</fo:inline> message is
	      sent to the monitoring process. A <fo:inline font-family="monospace">'CHANGE'</fo:inline> message has
	      the following pattern:</fo:block>
              <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{'CHANGE', MonitorRef, Type, Item, NewTimeOffset}</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">MonitorRef</fo:inline>, <fo:inline font-family="monospace">Type</fo:inline>, and
	      <fo:inline font-family="monospace">Item</fo:inline> are the same as described above, and
	      <fo:inline font-family="monospace">NewTimeOffset</fo:inline> is the new time offset.</fo:block>

	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the <fo:inline font-family="monospace">'CHANGE'</fo:inline> message has been received you are
	      guaranteed not to retrieve the old time offset when calling
	      <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:time_offset()</fo:inline></fo:inline>.
	      Notice that you can observe the change of the time offset
	      when calling <fo:inline font-family="monospace">erlang:time_offset()</fo:inline> before you
	      get the <fo:inline font-family="monospace">'CHANGE'</fo:inline> message.</fo:block>
	  </fo:block></fo:block-container>
	</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Making several calls to <fo:inline font-family="monospace">monitor/2</fo:inline> for the same
	  <fo:inline font-family="monospace">Item</fo:inline> and/or <fo:inline font-family="monospace">Type</fo:inline> is not
	  an error; it results in as many independent monitoring instances.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The monitor functionality is expected to be extended. That is,
	  other <fo:inline font-family="monospace">Type</fo:inline>s and <fo:inline font-family="monospace">Item</fo:inline>s
	  are expected to be supported in a future release.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If or when <fo:inline font-family="monospace">monitor/2</fo:inline> is extended, other
            possible values for <fo:inline font-family="monospace">Tag</fo:inline>, <fo:inline font-family="monospace">Object</fo:inline>, and
            <fo:inline font-family="monospace">Info</fo:inline> in the monitor message will be introduced.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13938384"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">monitor_node(Node, Flag) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Flag = boolean()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Monitor the status of the node <fo:inline font-family="monospace">Node</fo:inline>.
          If <fo:inline font-family="monospace">Flag</fo:inline>
          is <fo:inline font-family="monospace">true</fo:inline>, monitoring is turned on. If <fo:inline font-family="monospace">Flag</fo:inline>
          is <fo:inline font-family="monospace">false</fo:inline>, monitoring is turned off.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Making several calls to <fo:inline font-family="monospace">monitor_node(Node, true)</fo:inline> for
          the same <fo:inline font-family="monospace">Node</fo:inline> is not an error; it results
          in as many independent monitoring instances.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Node</fo:inline> fails or does not exist, the message
          <fo:inline font-family="monospace">{nodedown, Node}</fo:inline> is delivered to the process. If a
          process has made two calls to <fo:inline font-family="monospace">monitor_node(Node, true)</fo:inline>
          and <fo:inline font-family="monospace">Node</fo:inline> terminates, two <fo:inline font-family="monospace">nodedown</fo:inline> messages
          are delivered to the process. If there is no connection to
          <fo:inline font-family="monospace">Node</fo:inline>, an attempt is made to create one.
          If this fails, a <fo:inline font-family="monospace">nodedown</fo:inline> message is delivered.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Nodes connected through hidden connections can be monitored
          as any other nodes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if the local node is not alive.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13950928"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:monitor_node(Node, Flag, Options) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Flag = boolean()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [Option]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = allow_passive_connect</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Behaves as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">monitor_node/2</fo:inline></fo:inline>
          except that it allows an
          extra option to be specified, namely <fo:inline font-family="monospace">allow_passive_connect</fo:inline>.
          This option allows the BIF to wait the normal network connection
          time-out for the <fo:inline font-weight="bold">monitored node</fo:inline> to connect itself,
          even if it cannot be actively connected from this node
          (that is, it is blocked). The state where this can be useful
          can only be achieved by using the Kernel option
          <fo:inline font-family="monospace">dist_auto_connect once</fo:inline>. If that option is not
          used, option <fo:inline font-family="monospace">allow_passive_connect</fo:inline> has no effect.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">allow_passive_connect</fo:inline> is used
            internally and is seldom needed in applications where the
            network topology and the Kernel options in effect
            are known in advance.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if the local node is not alive or the
          option list is malformed.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13959072"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:monotonic_time() -&gt; integer()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current
          <fo:inline font-style="italic">Erlang
          monotonic time</fo:inline> in <fo:inline font-family="monospace">native</fo:inline>
          <fo:inline font-style="italic">time unit</fo:inline>. This
          is a monotonically increasing time since some unspecified point in
          time.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a
            <fo:inline font-style="italic">
            monotonically increasing</fo:inline> time, but <fo:inline font-weight="bold">not</fo:inline> a
            <fo:inline font-style="italic">
            strictly monotonically increasing</fo:inline>
            time. That is, consecutive calls to
            <fo:inline font-family="monospace">erlang:monotonic_time/0</fo:inline> can produce the same result.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Different runtime system instances will use different unspecified
            points in time as base for their Erlang monotonic clocks.
            That is, it is <fo:inline font-weight="bold">pointless</fo:inline> comparing monotonic times from
            different runtime system instances. Different runtime system
            instances can also place this unspecified point in time different
            relative runtime system start. It can be placed in the future (time
            at start is a negative value), the past (time at start is a
            positive value), or the runtime system start (time at start is
            zero). The monotonic time at runtime system start can be
            retrieved by calling
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:system_info(start_time)</fo:inline></fo:inline>.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13969712"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:monotonic_time(Unit) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Unit = <fo:inline font-style="italic">time_unit()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current
          <fo:inline font-style="italic">Erlang
          monotonic time</fo:inline> converted
          into the <fo:inline font-family="monospace">Unit</fo:inline> passed as argument.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as calling
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:convert_time_unit</fo:inline></fo:inline><fo:inline font-family="monospace">(</fo:inline><fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:monotonic_time()</fo:inline></fo:inline><fo:inline font-family="monospace">,
          native, Unit)</fo:inline>,
          however optimized for commonly used <fo:inline font-family="monospace">Unit</fo:inline>s.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13977680"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:nif_error(Reason) -&gt; no_return()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works exactly like
         <fo:inline font-style="italic"><fo:inline font-family="monospace">error/1</fo:inline></fo:inline>, but
         Dialyzer thinks that this BIF will return an arbitrary
         term. When used in a stub function for a NIF to generate an
         exception when the NIF library is not loaded, Dialyzer
         does not generate false warnings.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13981408"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:nif_error(Reason, Args) -&gt; no_return()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works exactly like
          <fo:inline font-style="italic"><fo:inline font-family="monospace">error/2</fo:inline></fo:inline>, but
          Dialyzer thinks that this BIF will return an arbitrary
          term. When used in a stub function for a NIF to generate an
          exception when the NIF library is not loaded, Dialyzer
          does not generate false warnings.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13985152"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">node() -&gt; Node</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name of the local node. If the node is not alive,
          <fo:inline font-family="monospace">nonode@nohost</fo:inline> is returned instead.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13988736"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">node(Arg) -&gt; Node</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Arg = pid() | port() | reference()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the node where <fo:inline font-family="monospace">Arg</fo:inline> originates.
          <fo:inline font-family="monospace">Arg</fo:inline> can
          be a process identifier, a reference, or a port.
          If the local node is not
          alive, <fo:inline font-family="monospace">nonode@nohost</fo:inline> is returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13993536"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">nodes() -&gt; Nodes</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nodes = [node()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all visible nodes in the system, except
          the local node. Same as <fo:inline font-family="monospace">nodes(visible)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp13996704"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">nodes(Arg) -&gt; Nodes</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Arg = NodeType | [NodeType]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">NodeType = visible | hidden | connected | this | known</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nodes = [node()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of nodes according to the argument specified.
          The returned result, when the argument is a list, is the list
          of nodes satisfying the disjunction(s) of the list elements.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NodeType</fo:inline>s:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">visible</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Nodes connected to this node through normal connections.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">hidden</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Nodes connected to this node through hidden connections.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">connected</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All nodes connected to this node.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">this</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This node.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">known</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Nodes that are known to this node. That is, connected
              nodes and nodes referred to by process identifiers, port
              identifiers, and references located on this node.
              The set of known nodes is garbage collected. Notice that
              this garbage collection can be delayed. For more
              information, see
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(delayed_node_table_gc)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some equalities: <fo:inline font-family="monospace">[node()] = nodes(this)</fo:inline>,
          <fo:inline font-family="monospace">nodes(connected) = nodes([visible, hidden])</fo:inline>, and
          <fo:inline font-family="monospace">nodes() = nodes(visible)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14011600"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">now() -&gt; Timestamp</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timestamp = <fo:inline font-style="italic">timestamp()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">timestamp() = <fo:block/>    {MegaSecs :: integer() &gt;= 0,<fo:block/>     Secs :: integer() &gt;= 0,<fo:block/>     MicroSecs :: integer() &gt;= 0}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">This function is deprecated. Do not use it.</fo:inline></fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see section
            <fo:inline font-style="italic">Time and Time Correction</fo:inline>
            in the User's Guide. Specifically, section
            <fo:inline font-style="italic">
            Dos and Dont's</fo:inline> describes what to use instead of
            <fo:inline font-family="monospace">erlang:now/0</fo:inline>.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the tuple <fo:inline font-family="monospace">{MegaSecs, Secs, MicroSecs}</fo:inline>, which is
          the elapsed time since 00:00 GMT, January 1, 1970 (zero hour),
          if provided by the underlying OS.
          Otherwise some other point in time is chosen. It is also
          guaranteed that the following calls to this BIF return
          continuously increasing values. Hence, the return value from
          <fo:inline font-family="monospace">erlang:now/0</fo:inline> can be used to generate unique time stamps.
          If it is called in a tight loop on a fast machine,
          the time of the node can become skewed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can only be used to check the local time of day if
          the time-zone information of the underlying OS is
          properly configured.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14020304"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open_port(PortName, PortSettings) -&gt; port()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">PortName = <fo:block/>    {spawn, Command :: string() | binary()} |<fo:block/>    {spawn_driver, Command :: string() | binary()} |<fo:block/>    {spawn_executable, FileName :: <fo:inline font-style="italic">file:name()</fo:inline>} |<fo:block/>    {fd, In :: integer() &gt;= 0, Out :: integer() &gt;= 0}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">PortSettings = [Opt]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opt = <fo:block/>    {packet, N :: 1 | 2 | 4} |<fo:block/>    stream |<fo:block/>    {line, L :: integer() &gt;= 0} |<fo:block/>    {cd, Dir :: string() | binary()} |<fo:block/>    {env, Env :: [{Name :: string(), Val :: string() | false}]} |<fo:block/>    {args, [string() | binary()]} |<fo:block/>    {arg0, string() | binary()} |<fo:block/>    exit_status |<fo:block/>    use_stdio |<fo:block/>    nouse_stdio |<fo:block/>    stderr_to_stdout |<fo:block/>    in |<fo:block/>    out |<fo:block/>    binary |<fo:block/>    eof |<fo:block/>    {parallelism, Boolean :: boolean()} |<fo:block/>    hide</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a port identifier as the result of opening a
          new Erlang port. A port can be seen as an external Erlang
          process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name of the executable as well as the arguments
          specifed in <fo:inline font-family="monospace">cd</fo:inline>, <fo:inline font-family="monospace">env</fo:inline>, <fo:inline font-family="monospace">args</fo:inline>, and <fo:inline font-family="monospace">arg0</fo:inline> are
          subject to Unicode filename translation if the system is running
          in Unicode filename mode. To avoid
          translation or to force, for example UTF-8, supply the executable
          and/or arguments as a binary in the correct
          encoding. For details, see the module
          <fo:inline font-style="italic"><fo:inline font-family="monospace">file(3)</fo:inline></fo:inline>, the
          function <fo:inline font-style="italic">
          <fo:inline font-family="monospace">file:native_name_encoding/0</fo:inline></fo:inline> in Kernel, and
          the <fo:inline font-style="italic">
          <fo:inline font-family="monospace">Using Unicode in Erlang</fo:inline></fo:inline> User's Guide.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The characters in the name (if specified as a list) can
            only be &gt; 255 if the Erlang virtual machine is started
            in Unicode filename translation mode. Otherwise the name
            of the executable is limited to the ISO Latin-1
            character set.</fo:block>
        </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">PortName</fo:inline>s:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{spawn, Command}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts an external program. <fo:inline font-family="monospace">Command</fo:inline>
              is the name of the external program to be run.
              <fo:inline font-family="monospace">Command</fo:inline>
              runs outside the Erlang work space unless an Erlang
              driver with the name <fo:inline font-family="monospace">Command</fo:inline> is found.
              If found, that driver is started. A driver runs in the Erlang
              work space, which means that it is linked with the Erlang
              runtime system.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When starting external programs on Solaris, the system
              call <fo:inline font-family="monospace">vfork</fo:inline> is used in preference to <fo:inline font-family="monospace">fork</fo:inline>
              for performance reasons, although it has a history of
              being less robust. If there are problems using
              <fo:inline font-family="monospace">vfork</fo:inline>, setting environment variable
              <fo:inline font-family="monospace">ERL_NO_VFORK</fo:inline> to any value causes <fo:inline font-family="monospace">fork</fo:inline>
              to be used instead.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For external programs, <fo:inline font-family="monospace">PATH</fo:inline> is searched
              (or an equivalent method is used to find programs,
              depending on the OS). This is done by invoking
              the shell on certain platforms. The first space-separated
              token of the command is considered as the
              name of the executable (or driver). This (among other
              things) makes this option unsuitable for running
              programs with spaces in filenames or directory names.
              If spaces in executable filenames are desired, use
              <fo:inline font-family="monospace">{spawn_executable, Command}</fo:inline> instead.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{spawn_driver, Command}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works like <fo:inline font-family="monospace">{spawn, Command}</fo:inline>, but demands
              the first (space-separated) token of the command to be the name
              of a loaded driver. If no driver with that name is loaded, a
              <fo:inline font-family="monospace">badarg</fo:inline> error is raised.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{spawn_executable, FileName}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works like <fo:inline font-family="monospace">{spawn, FileName}</fo:inline>, but only runs
              external executables. <fo:inline font-family="monospace">FileName</fo:inline> in its whole
              is used as the name of the executable, including any spaces.
              If arguments are to be passed, the
              <fo:inline font-family="monospace">PortSettings</fo:inline>
              <fo:inline font-family="monospace">args</fo:inline> and <fo:inline font-family="monospace">arg0</fo:inline> can be used.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The shell is usually not invoked to start the
              program, it is executed directly. <fo:inline font-family="monospace">PATH</fo:inline> (or
              equivalent) is not searched. To find a program
              in <fo:inline font-family="monospace">PATH</fo:inline> to execute, use
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">os:find_executable/1</fo:inline></fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only if a shell script or <fo:inline font-family="monospace">.bat</fo:inline> file is
              executed, the appropriate command interpreter is
              invoked implicitly, but there is still no
              command-argument expansion or implicit <fo:inline font-family="monospace">PATH</fo:inline> search.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">FileName</fo:inline> cannot be run, an error
              exception is raised, with the POSIX error code as the reason.
              The error reason can differ between OSs.
              Typically the error <fo:inline font-family="monospace">enoent</fo:inline> is raised when an
              attempt is made to run a program that is not found and
              <fo:inline font-family="monospace">eacces</fo:inline> is raised when the specified file is not
              executable.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fd, In, Out}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allows an Erlang process to access any currently opened
              file descriptors used by Erlang. The file descriptor
              <fo:inline font-family="monospace">In</fo:inline> can be used for standard input, and the
              file descriptor <fo:inline font-family="monospace">Out</fo:inline> for standard output.
              It is only used for various servers in the Erlang OS (<fo:inline font-family="monospace">shell</fo:inline>
              and <fo:inline font-family="monospace">user</fo:inline>). Hence, its use is limited.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">PortSettings</fo:inline> is a list of settings for the port.
          The valid settings are as follows:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{packet, N}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Messages are preceded by their length, sent in
              <fo:inline font-family="monospace">N</fo:inline>
              bytes, with the most significant byte first. The valid values
              for <fo:inline font-family="monospace">N</fo:inline> are 1, 2, and 4.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">stream</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Output messages are sent without packet lengths. A
              user-defined protocol must be used between the Erlang
              process and the external object.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{line, L}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Messages are delivered on a per line basis. Each line
              (delimited by the OS-dependent newline sequence) is
              delivered in a single message. The message data format
              is <fo:inline font-family="monospace">{Flag, Line}</fo:inline>, where <fo:inline font-family="monospace">Flag</fo:inline> is
              <fo:inline font-family="monospace">eol</fo:inline> or <fo:inline font-family="monospace">noeol</fo:inline>, and <fo:inline font-family="monospace">Line</fo:inline> is the
              data delivered (without the newline sequence).</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">L</fo:inline> specifies the maximum line length in bytes.
              Lines longer than this are delivered in more than one
              message, with <fo:inline font-family="monospace">Flag</fo:inline> set to <fo:inline font-family="monospace">noeol</fo:inline> for all
              but the last message. If end of file is encountered
              anywhere else than immediately following a newline
              sequence, the last line is also delivered with
              <fo:inline font-family="monospace">Flag</fo:inline> set to <fo:inline font-family="monospace">noeol</fo:inline>. Otherwise
              lines are delivered with <fo:inline font-family="monospace">Flag</fo:inline> set to <fo:inline font-family="monospace">eol</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">{packet, N}</fo:inline> and <fo:inline font-family="monospace">{line,
              L}</fo:inline> settings are mutually exclusive.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cd, Dir}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only valid for <fo:inline font-family="monospace">{spawn, Command}</fo:inline> and
              <fo:inline font-family="monospace">{spawn_executable, FileName}</fo:inline>.
              The external program starts using <fo:inline font-family="monospace">Dir</fo:inline> as its
              working directory. <fo:inline font-family="monospace">Dir</fo:inline> must be a string.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{env, Env}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only valid for <fo:inline font-family="monospace">{spawn, Command}</fo:inline>, and
              <fo:inline font-family="monospace">{spawn_executable, FileName}</fo:inline>.
              The environment of the started process is extended using
              the environment specifications in <fo:inline font-family="monospace">Env</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Env</fo:inline> is to be a list of tuples
              <fo:inline font-family="monospace">{Name, Val}</fo:inline>,
              where <fo:inline font-family="monospace">Name</fo:inline> is the name of an
              environment variable, and <fo:inline font-family="monospace">Val</fo:inline> is the
              value it is to have in the spawned
              port process. Both <fo:inline font-family="monospace">Name</fo:inline> and
              <fo:inline font-family="monospace">Val</fo:inline> must be strings. The one
              exception is <fo:inline font-family="monospace">Val</fo:inline> being the atom
              <fo:inline font-family="monospace">false</fo:inline> (in analogy with
              <fo:inline font-style="italic"><fo:inline font-family="monospace">os:getenv/1</fo:inline></fo:inline>,
              which removes the environment variable.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{args, [ string() | binary() ]}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only valid for <fo:inline font-family="monospace">{spawn_executable, FileName}</fo:inline>
              and specifies arguments to the executable. Each argument
              is specified as a separate string and (on Unix) eventually
              ends up as one element each in the argument vector. On
              other platforms, a similar behavior is mimicked.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The arguments are not expanded by the shell before
              they are supplied to the executable. Most notably this
              means that file wildcard expansion does not occur.
              To expand wildcards for the arguments, use
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">filelib:wildcard/1</fo:inline></fo:inline>.
              Notice that even if
              the program is a Unix shell script, meaning that the
              shell ultimately is invoked, wildcard expansion
              does not occur, and the script is provided with the
              untouched arguments. On Windows, wildcard expansion
              is always up to the program itself, therefore this is
              not an issue.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The executable name (also known as <fo:inline font-family="monospace">argv[0]</fo:inline>)
              is not to be specified in this list. The proper executable name
              is automatically used as <fo:inline font-family="monospace">argv[0]</fo:inline>, where applicable.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you explicitly want to set the
              program name in the argument vector, option <fo:inline font-family="monospace">arg0</fo:inline>
              can be used.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{arg0, string() | binary()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only valid for <fo:inline font-family="monospace">{spawn_executable, FileName}</fo:inline>
              and explicitly specifies the program name argument when
              running an executable. This can in some circumstances,
              on some OSs, be desirable. How the program
              responds to this is highly system-dependent and no specific
              effect is guaranteed.</fo:block>
          </fo:block></fo:block-container> 
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">exit_status</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only valid for <fo:inline font-family="monospace">{spawn, Command}</fo:inline>, where
              <fo:inline font-family="monospace">Command</fo:inline> refers to an external program, and
              for <fo:inline font-family="monospace">{spawn_executable, FileName}</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the external process connected to the port exits, a
              message of the form <fo:inline font-family="monospace">{Port,{exit_status,Status}}</fo:inline> is
              sent to the connected process, where <fo:inline font-family="monospace">Status</fo:inline> is the
              exit status of the external process. If the program
              aborts on Unix, the same convention is used as the shells
              do (that is, 128+signal).</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If option <fo:inline font-family="monospace">eof</fo:inline> is specified also, the messages <fo:inline font-family="monospace">eof</fo:inline>
              and <fo:inline font-family="monospace">exit_status</fo:inline> appear in an unspecified order.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port program closes its <fo:inline font-family="monospace">stdout</fo:inline> without exiting,
              option <fo:inline font-family="monospace">exit_status</fo:inline> does not work.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">use_stdio</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only valid for <fo:inline font-family="monospace">{spawn, Command}</fo:inline> and
              <fo:inline font-family="monospace">{spawn_executable, FileName}</fo:inline>. It
              allows the standard input and output (file descriptors 0
              and 1) of the spawned (Unix) process for communication
              with Erlang.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nouse_stdio</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The opposite of <fo:inline font-family="monospace">use_stdio</fo:inline>. It uses file descriptors
              3 and 4 for communication with Erlang.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">stderr_to_stdout</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Affects ports to external programs. The executed program
              gets its standard error file redirected to its standard
              output file. <fo:inline font-family="monospace">stderr_to_stdout</fo:inline> and
              <fo:inline font-family="monospace">nouse_stdio</fo:inline> are mutually exclusive.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">overlapped_io</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Affects ports to external programs on Windows only. The
              standard input and standard output handles of the port program
              are, if this option is supplied, opened with flag
              <fo:inline font-family="monospace">FILE_FLAG_OVERLAPPED</fo:inline>, so that the port program can
              (and must) do
              overlapped I/O on its standard handles. This is not normally
              the case for simple port programs, but an option of value for the
              experienced Windows programmer. <fo:inline font-weight="bold">On all other platforms, this
              option is silently discarded.</fo:inline></fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">in</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The port can only be used for input.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">out</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The port can only be used for output.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">binary</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All I/O from the port is binary data objects as opposed
              to lists of bytes.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eof</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The port is not closed at the end of the file and does not
              produce an exit signal. Instead, it remains open and
              a <fo:inline font-family="monospace">{Port, eof}</fo:inline> message is sent to the process
              holding the port.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">hide</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When running on Windows, suppresses creation of a new
              console window when spawning the port program.
              (This option has no effect on other platforms.)</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{parallelism, Boolean}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets scheduler hint for port parallelism. If set to
              <fo:inline font-family="monospace">true</fo:inline>, the virtual machine schedules port tasks;
              when doing so, it improves parallelism in the system. If set
              to <fo:inline font-family="monospace">false</fo:inline>, the virtual machine tries to
              perform port tasks immediately, improving latency at the
              expense of parallelism. The default can be set at system startup
              by passing command-line argument
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+spp</fo:inline></fo:inline> to
              <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">stream</fo:inline> for all port types and
          <fo:inline font-family="monospace">use_stdio</fo:inline> for spawned ports.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: if the port cannot be opened, the exit reason is
          <fo:inline font-family="monospace">badarg</fo:inline>, <fo:inline font-family="monospace">system_limit</fo:inline>, or the POSIX error code that
          most closely describes the error, or <fo:inline font-family="monospace">einval</fo:inline> if no POSIX
          code is appropriate:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Bad input arguments to <fo:inline font-family="monospace">open_port</fo:inline>.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">system_limit</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All available ports in the Erlang emulator are in use.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enomem</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Not enough memory to create the port.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eagain</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">No more available OS processes.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enametoolong</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Too long external command.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">emfile</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">No more available file descriptors (for the
            OS process that the Erlang emulator runs in).
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enfile</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Full file table (for the entire OS).
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:inline font-family="monospace">Command</fo:inline> specified in <fo:inline font-family="monospace">{spawn_executable, Command}</fo:inline>
            does not point out an executable file.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enoent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:inline font-family="monospace">FileName</fo:inline> specified in
            <fo:inline font-family="monospace">{spawn_executable, FileName}</fo:inline>
            does not point out an existing file.
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">During use of a port opened using <fo:inline font-family="monospace">{spawn, Name}</fo:inline>,
          <fo:inline font-family="monospace">{spawn_driver, Name}</fo:inline>, or <fo:inline font-family="monospace">{spawn_executable, Name}</fo:inline>,
          errors arising when sending messages to it are reported to
          the owning process using signals of the form
          <fo:inline font-family="monospace">{'EXIT', Port, PosixCode}</fo:inline>. For the possible values of
          <fo:inline font-family="monospace">PosixCode</fo:inline>, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">file(3)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The maximum number of ports that can be open at the same
          time can be configured by passing command-line flag
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+Q</fo:inline></fo:inline> to
          <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14155840"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:phash(Term, Range) -&gt; Hash</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Range = Hash = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Range = 1..2^32, Hash = 1..Range</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Portable hash function that gives the same hash for
          the same Erlang term regardless of machine architecture and
          ERTS version (the BIF was introduced in ERTS 4.9.1.1).
          The function returns a hash value for
          <fo:inline font-family="monospace">Term</fo:inline> within the range
          <fo:inline font-family="monospace">1..Range</fo:inline>. The maximum value for
          <fo:inline font-family="monospace">Range</fo:inline> is 2^32.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14161344"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:phash2(Term) -&gt; Hash</fo:block></fo:block><fo:block id="idp14162176"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:phash2(Term, Range) -&gt; Hash</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Range = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>1..2^32</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Hash = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>0..Range-1</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Portable hash function that gives the same hash for
          the same Erlang term regardless of machine architecture and
          ERTS version (the BIF was introduced in ERTS 5.2).
          The function returns a hash value for
          <fo:inline font-family="monospace">Term</fo:inline> within the range
          <fo:inline font-family="monospace">0..Range-1</fo:inline>. The maximum value for
          <fo:inline font-family="monospace">Range</fo:inline> is 2^32. When without argument
          <fo:inline font-family="monospace">Range</fo:inline>, a value in the range
          0..2^27-1 is returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is always to be used for hashing terms. It
          distributes small integers better than <fo:inline font-family="monospace">phash/2</fo:inline>, and
          it is faster for bignums and binaries.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the range <fo:inline font-family="monospace">0..Range-1</fo:inline> is
          different from the range of <fo:inline font-family="monospace">phash/2</fo:inline>, which is
          <fo:inline font-family="monospace">1..Range</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14172752"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">pid_to_list(Pid) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a string corresponding to the text
          representation of <fo:inline font-family="monospace">Pid</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14176016"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_call(Port, Operation, Data) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Operation = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs a synchronous call to a port. The meaning of
          <fo:inline font-family="monospace">Operation</fo:inline> and <fo:inline font-family="monospace">Data</fo:inline>
          depends on the port, that is,
          on the port driver. Not all port drivers support this feature.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Port</fo:inline> is a port identifier,
          referring to a driver.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Operation</fo:inline> is an integer, which is passed on to
          the driver.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Data</fo:inline> is any Erlang term. This data is converted
          to binary term format and sent to the port.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a term from the driver. The meaning of the returned
          data also depends on the port driver.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If <fo:inline font-family="monospace">Port</fo:inline> is not an identifier of an open port,
            or the registered name of an open port. If the calling
            process was previously linked to the closed port,
            identified by <fo:inline font-family="monospace">Port</fo:inline>, the exit signal
            from the port is guaranteed to be delivered before this
            <fo:inline font-family="monospace">badarg</fo:inline> exception occurs.
            </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If <fo:inline font-family="monospace">Operation</fo:inline> does not fit in a 32-bit integer.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If the port driver does not support synchronous control operations.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If the port driver so decides for any reason (probably
            something wrong with <fo:inline font-family="monospace">Operation</fo:inline>
            or <fo:inline font-family="monospace">Data</fo:inline>).
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14192048"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">port_close(Port) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes an open port. Roughly the same as <fo:inline font-family="monospace">Port !
          {self(), close}</fo:inline> except for the error behavior
          (see below), being synchronous, and that the port does
          <fo:inline font-weight="bold">not</fo:inline> reply with <fo:inline font-family="monospace">{Port, closed}</fo:inline>. Any process can
          close a port with <fo:inline font-family="monospace">port_close/1</fo:inline>, not only the port owner
          (the connected process). If the calling process is linked to
          the port identified by <fo:inline font-family="monospace">Port</fo:inline>, the exit
          signal from the port is guaranteed to be delivered before
          <fo:inline font-family="monospace">port_close/1</fo:inline> returns.</fo:block> 
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For comparison: <fo:inline font-family="monospace">Port ! {self(), close}</fo:inline>
          only fails with <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> does
          not refer to a port or a process. If <fo:inline font-family="monospace">Port</fo:inline>
          is a closed port, nothing happens. If <fo:inline font-family="monospace">Port</fo:inline>
          is an open port and the calling process is the port owner,
          the port replies with <fo:inline font-family="monospace">{Port, closed}</fo:inline> when all buffers
          have been flushed and the port really closes. If the calling
          process is not the port owner, the <fo:inline font-weight="bold">port owner</fo:inline> fails
          with <fo:inline font-family="monospace">badsig</fo:inline>.</fo:block> 
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that any process can close a port using
          <fo:inline font-family="monospace">Port ! {PortOwner, close}</fo:inline> as if it itself was
          the port owner, but the reply always goes to the port owner.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from Erlang/OTP R16,
          <fo:inline font-family="monospace">Port ! {PortOwner, close}</fo:inline> is truly
          asynchronous. Notice that this operation has always been
          documented as an asynchronous operation, while the underlying
          implementation has been synchronous. <fo:inline font-family="monospace">port_close/1</fo:inline> is
          however still fully synchronous because of its error behavior.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> is not an
          identifier of an open port, or the registered name of an open port.
          If the calling process was previously linked to the closed
          port, identified by <fo:inline font-family="monospace">Port</fo:inline>, the exit
          signal from the port is guaranteed to be delivered before
          this <fo:inline font-family="monospace">badarg</fo:inline> exception occurs.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14209072"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">port_command(Port, Data) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends data to a port. Same as
          <fo:inline font-family="monospace">Port ! {PortOwner, {command, Data}}</fo:inline> except for
          the error behavior and being synchronous (see below). Any process
          can send data to a port with <fo:inline font-family="monospace">port_command/2</fo:inline>, not only the
          port owner (the connected process).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For comparison: <fo:inline font-family="monospace">Port ! {PortOwner, {command,
          Data}}</fo:inline> only fails with <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline>
          does not refer to a port or a process. If <fo:inline font-family="monospace">Port</fo:inline> is
          a closed port, the data message disappears 
          without a sound. If <fo:inline font-family="monospace">Port</fo:inline> is open and the calling
          process is not the port owner, the <fo:inline font-weight="bold">port owner</fo:inline> fails
          with <fo:inline font-family="monospace">badsig</fo:inline>. The port owner fails with <fo:inline font-family="monospace">badsig</fo:inline>
          also if <fo:inline font-family="monospace">Data</fo:inline> is an invalid I/O list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that any process can send to a port using
          <fo:inline font-family="monospace">Port ! {PortOwner, {command, Data}}</fo:inline>
          as if it itself was the port owner.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port is busy, the calling process is suspended
          until the port is not busy any more.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from Erlang/OTP R16,
          <fo:inline font-family="monospace">Port ! {PortOwner, {command, Data}}</fo:inline>
          is truly asynchronous. Notice that this operation has always been
          documented as an asynchronous operation, while the underlying
          implementation has been synchronous. <fo:inline font-family="monospace">port_command/2</fo:inline> is
          however still fully synchronous because of its error behavior.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Port</fo:inline> is not an identifier of an open
              port, or the registered name of an open port. If the
              calling process was previously linked to the closed port,
              identified by <fo:inline font-family="monospace">Port</fo:inline>, the exit signal
              from the port is guaranteed to be delivered before this
              <fo:inline font-family="monospace">badarg</fo:inline> exception occurs.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Data</fo:inline> is an invalid I/O list.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14229056"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">port_command(Port, Data, OptionList) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = force | nosuspend</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OptionList = [Option]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends data to a port. <fo:inline font-family="monospace">port_command(Port, Data, [])</fo:inline>
          equals <fo:inline font-family="monospace">port_command(Port, Data)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port command is aborted, <fo:inline font-family="monospace">false</fo:inline> is returned,
          otherwise <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port is busy, the calling process is suspended
          until the port is not busy anymore.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Option</fo:inline>s:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">force</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The calling process is not suspended if the port is
            busy, instead the port command is forced through. The
            call fails with a <fo:inline font-family="monospace">notsup</fo:inline> exception if the
            driver of the port does not support this. For more
            information, see driver flag
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">![CDATA[ERL_DRV_FLAG_SOFT_BUSY]]</fo:inline></fo:inline>.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nosuspend</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The calling process is not suspended if the port is
            busy, instead the port command is aborted and
            <fo:inline font-family="monospace">false</fo:inline> is returned. 
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">More options can be added in a future release.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If <fo:inline font-family="monospace">Port</fo:inline> is not an identifier of an open
            port, or the registered name of an open port. If the
            calling process was previously linked to the closed port,
            identified by <fo:inline font-family="monospace">Port</fo:inline>, the exit signal
            from the port is guaranteed to be delivered before this
            <fo:inline font-family="monospace">badarg</fo:inline> exception occurs.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If <fo:inline font-family="monospace">Data</fo:inline> is an invalid I/O list.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
          If <fo:inline font-family="monospace">OptionList</fo:inline> is an invalid option list.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">notsup</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If option <fo:inline font-family="monospace">force</fo:inline> has been passed, but the
            driver of the port does not allow forcing through
            a busy port.
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14249712"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">port_connect(Port, Pid) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the port owner (the connected port) to <fo:inline font-family="monospace">Pid</fo:inline>.
          Roughly the same as
          <fo:inline font-family="monospace">Port ! {Owner, {connect, Pid}}</fo:inline>
          except for the following:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The error behavior differs, see below.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The port does <fo:inline font-weight="bold">not</fo:inline> reply with
              <fo:inline font-family="monospace">{Port,connected}</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">port_connect/1</fo:inline> is synchronous, see below.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The new port owner gets linked to the port.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The old port owner stays linked to the port and must call
          <fo:inline font-family="monospace">unlink(Port)</fo:inline> if this is not desired. Any process can
          set the port owner to be any process with
          <fo:inline font-family="monospace">port_connect/2</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For comparison:
          <fo:inline font-family="monospace">Port ! {self(), {connect, Pid}}</fo:inline>
          only fails with <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline>
          does not refer to a port or a process. If
          <fo:inline font-family="monospace">Port</fo:inline> is a closed port, nothing happens.
          If <fo:inline font-family="monospace">Port</fo:inline>
          is an open port and the calling process is the port owner,
          the port replies with <fo:inline font-family="monospace">{Port, connected}</fo:inline> to the old
          port owner. Notice that the old port owner is still linked to
          the port, while the new is not. If <fo:inline font-family="monospace">Port</fo:inline> is an open
          port and the calling process is not the port owner,
          the <fo:inline font-weight="bold">port owner</fo:inline> fails with <fo:inline font-family="monospace">badsig</fo:inline>. The port
          owner fails with <fo:inline font-family="monospace">badsig</fo:inline> also if <fo:inline font-family="monospace">Pid</fo:inline> is not
          an existing local process identifier.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that any process can set the port owner using
          <fo:inline font-family="monospace">Port ! {PortOwner, {connect, Pid}}</fo:inline>
          as if it itself was the port owner, but the reply always goes to
          the port owner.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from Erlang/OTP R16,
          <fo:inline font-family="monospace">Port ! {PortOwner, {connect, Pid}}</fo:inline>
          is truly asynchronous. Notice that this operation has always been
          documented as an asynchronous operation, while the underlying
          implementation has been synchronous. <fo:inline font-family="monospace">port_connect/2</fo:inline> is
          however still fully synchronous because of its error behavior.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If <fo:inline font-family="monospace">Port</fo:inline> is not an identifier of an open port,
            or the registered name of an open port. If the calling
            process was previously linked to the closed port,
            identified by <fo:inline font-family="monospace">Port</fo:inline>, the exit signal
            from the port is guaranteed to be delivered before this
            <fo:inline font-family="monospace">badarg</fo:inline> exception occurs.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If the process identified by <fo:inline font-family="monospace">Pid</fo:inline> is not an existing
            local process.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14277856"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">port_control(Port, Operation, Data) -&gt; iodata() | binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Operation = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs a synchronous control operation on a port.
          The meaning of <fo:inline font-family="monospace">Operation</fo:inline> and
          <fo:inline font-family="monospace">Data</fo:inline> depends on
          the port, that is, on the port driver. Not all port drivers
          support this control feature.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of integers in the range 0..255, or a
          binary, depending on the port driver. The meaning of
          the returned data also depends on the port driver.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If <fo:inline font-family="monospace">Port</fo:inline> is not an open port or the registered
            name of an open port.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If <fo:inline font-family="monospace">Operation</fo:inline> cannot fit in a 32-bit integer.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If the port driver does not support synchronous control operations.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If the port driver so decides for any reason (probably
            something wrong with <fo:inline font-family="monospace">Operation</fo:inline> or
            <fo:inline font-family="monospace">Data</fo:inline>).
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14290000"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_info(Port) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ResultItem = <fo:block/>    {registered_name, RegisteredName :: atom()} |<fo:block/>    {id, Index :: integer() &gt;= 0} |<fo:block/>    {connected, Pid :: pid()} |<fo:block/>    {links, Pids :: [pid()]} |<fo:block/>    {name, String :: string()} |<fo:block/>    {input, Bytes :: integer() &gt;= 0} |<fo:block/>    {output, Bytes :: integer() &gt;= 0} |<fo:block/>    {os_pid, OsPid :: integer() &gt;= 0 | undefined}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = [ResultItem] | undefined</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list containing tuples with information about
          <fo:inline font-family="monospace">Port</fo:inline>, or <fo:inline font-family="monospace">undefined</fo:inline> if the port is not open.
          The order of the tuples is undefined, and all the
          tuples are not mandatory.
          If the port is closed and the calling process
          was previously linked to the port, the exit signal from the
          port is guaranteed to be delivered before <fo:inline font-family="monospace">port_info/1</fo:inline>
          returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result contains information about the following
          <fo:inline font-family="monospace">Item</fo:inline>s:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">registered_name</fo:inline> (if the port has a registered
            name)</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">id</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">connected</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">links</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">name</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">input</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">output</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information about the different <fo:inline font-family="monospace">Item</fo:inline>s, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">port_info/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> is not a local port
          identifier, or an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14303936"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_info(Port, Item :: connected) -&gt;<fo:block/>                    {connected, Pid} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Pid</fo:inline> is the process identifier of the process
          connected to the port.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port identified by <fo:inline font-family="monospace">Port</fo:inline> is not open,
          <fo:inline font-family="monospace">undefined</fo:inline> is returned. If the port is closed and the
          calling process was previously linked to the port, the exit
          signal from the port is guaranteed to be delivered before
          <fo:inline font-family="monospace">port_info/2</fo:inline> returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> is not a local
          port identifier, or an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14311424"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_info(Port, Item :: id) -&gt; {id, Index} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Index = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Index</fo:inline> is the internal index of the port. This
          index can be used to separate ports.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port identified by <fo:inline font-family="monospace">Port</fo:inline> is not open,
          <fo:inline font-family="monospace">undefined</fo:inline> is returned. If the port is closed and the
          calling process was previously linked to the port, the exit
          signal from the port is guaranteed to be delivered before
          <fo:inline font-family="monospace">port_info/2</fo:inline> returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> is not a local
          port identifier, or an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14318912"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_info(Port, Item :: input) -&gt;<fo:block/>                    {input, Bytes} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bytes = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Bytes</fo:inline> is the total number of bytes
          read from the port.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port identified by <fo:inline font-family="monospace">Port</fo:inline> is not open,
          <fo:inline font-family="monospace">undefined</fo:inline> is returned. If the port is closed and the
          calling process was previously linked to the port, the exit
          signal from the port is guaranteed to be delivered before
          <fo:inline font-family="monospace">port_info/2</fo:inline> returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> is not a local
          port identifier, or an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14326368"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_info(Port, Item :: links) -&gt; {links, Pids} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pids = [pid()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Pids</fo:inline> is a list of the process identifiers
          of the processes that the port is linked to.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port identified by <fo:inline font-family="monospace">Port</fo:inline> is not open,
          <fo:inline font-family="monospace">undefined</fo:inline> is returned. If the port is closed and the
          calling process was previously linked to the port, the exit
          signal from the port is guaranteed to be delivered before
          <fo:inline font-family="monospace">port_info/2</fo:inline> returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> is not a local
          port identifier, or an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14333856"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_info(Port, Item :: locking) -&gt;<fo:block/>                    {locking, Locking} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Locking = false | port_level | driver_level</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Locking</fo:inline> is one of the following:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">false</fo:inline> (emulator without SMP support)</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port_level</fo:inline> (port-specific locking)</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver_level</fo:inline> (driver-specific locking)</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that these results are highly implementation-specific
          and can change in a future release.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port identified by <fo:inline font-family="monospace">Port</fo:inline> is not open,
          <fo:inline font-family="monospace">undefined</fo:inline> is returned. If the port is closed and the
          calling process was previously linked to the port, the exit
          signal from the port is guaranteed to be delivered before
          <fo:inline font-family="monospace">port_info/2</fo:inline> returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> is not a local
          port identifier, or an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14344816"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_info(Port, Item :: memory) -&gt;<fo:block/>                    {memory, Bytes} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bytes = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Bytes</fo:inline> is the total number of
          bytes allocated for this port by the runtime system. The
          port itself can have allocated memory that is not
          included in <fo:inline font-family="monospace">Bytes</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port identified by <fo:inline font-family="monospace">Port</fo:inline> is not open,
          <fo:inline font-family="monospace">undefined</fo:inline> is returned. If the port is closed and the
          calling process was previously linked to the port, the exit
          signal from the port is guaranteed to be delivered before
          <fo:inline font-family="monospace">port_info/2</fo:inline> returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> is not a local
          port identifier, or an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14352976"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_info(Port, Item :: monitors) -&gt;<fo:block/>                    {monitors, Monitors} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Monitors = [{process, pid()}]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Monitors</fo:inline> represent processes monitored by
          this port.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port identified by <fo:inline font-family="monospace">Port</fo:inline> is not open,
          <fo:inline font-family="monospace">undefined</fo:inline> is returned. If the port is closed and the
          calling process was previously linked to the port, the exit
          signal from the port is guaranteed to be delivered before
          <fo:inline font-family="monospace">port_info/2</fo:inline> returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> is not a local
          port identifier, or an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14360432"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_info(Port, Item :: monitored_by) -&gt;<fo:block/>                    {monitored_by, MonitoredBy} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MonitoredBy = [pid()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns list of pids that are monitoring given port at the
          moment.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port identified by <fo:inline font-family="monospace">Port</fo:inline> is not open,
          <fo:inline font-family="monospace">undefined</fo:inline> is returned. If the port is closed and the
          calling process was previously linked to the port, the exit
          signal from the port is guaranteed to be delivered before
          <fo:inline font-family="monospace">port_info/2</fo:inline> returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> is not a local
          port identifier, or an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14367504"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_info(Port, Item :: name) -&gt; {name, Name} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Name</fo:inline> is the command name set by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">open_port/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port identified by <fo:inline font-family="monospace">Port</fo:inline> is not open,
          <fo:inline font-family="monospace">undefined</fo:inline> is returned. If the port is closed and the
          calling process was previously linked to the port, the exit
          signal from the port is guaranteed to be delivered before
          <fo:inline font-family="monospace">port_info/2</fo:inline> returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> is not a local
          port identifier, or an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14375776"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_info(Port, Item :: os_pid) -&gt;<fo:block/>                    {os_pid, OsPid} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OsPid = integer() &gt;= 0 | undefined</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OsPid</fo:inline> is the process identifier (or equivalent)
          of an OS process created with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">open_port({spawn | spawn_executable,
          Command}, Options)</fo:inline></fo:inline>. If the port is not the result of
          spawning an OS process, the value is <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port identified by <fo:inline font-family="monospace">Port</fo:inline> is not open,
          <fo:inline font-family="monospace">undefined</fo:inline> is returned. If the port is closed and the
          calling process was previously linked to the port, the exit
          signal from the port is guaranteed to be delivered before
          <fo:inline font-family="monospace">port_info/2</fo:inline> returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> is not a local
          port identifier, or an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14384672"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_info(Port, Item :: output) -&gt;<fo:block/>                    {output, Bytes} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bytes = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Bytes</fo:inline> is the total number of bytes written
          to the port from Erlang processes using
          <fo:inline font-style="italic"><fo:inline font-family="monospace">port_command/2</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">port_command/3</fo:inline></fo:inline>,
          or <fo:inline font-family="monospace">Port ! {Owner, {command, Data}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port identified by <fo:inline font-family="monospace">Port</fo:inline> is not open,
          <fo:inline font-family="monospace">undefined</fo:inline> is returned. If the port is closed and the
          calling process was previously linked to the port, the exit
          signal from the port is guaranteed to be delivered before
          <fo:inline font-family="monospace">port_info/2</fo:inline> returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> is not a local
          port identifier, or an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14394608"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_info(Port, Item :: parallelism) -&gt;<fo:block/>                    {parallelism, Boolean} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Boolean = boolean()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Boolean</fo:inline> corresponds to the port parallelism
          hint used by this port. For more information, see option
          <fo:inline font-style="italic"><fo:inline font-family="monospace">parallelism</fo:inline></fo:inline>
          of <fo:inline font-style="italic"><fo:inline font-family="monospace">open_port/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14399744"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_info(Port, Item :: queue_size) -&gt;<fo:block/>                    {queue_size, Bytes} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bytes = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Bytes</fo:inline> is the total number
          of bytes queued by the port using the ERTS driver queue
          implementation.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port identified by <fo:inline font-family="monospace">Port</fo:inline> is not open,
          <fo:inline font-family="monospace">undefined</fo:inline> is returned. If the port is closed and the
          calling process was previously linked to the port, the exit
          signal from the port is guaranteed to be delivered before
          <fo:inline font-family="monospace">port_info/2</fo:inline> returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> is not a local
          port identifier, or an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14407264"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:port_info(Port, Item :: registered_name) -&gt;<fo:block/>                    {registered_name, RegisteredName} |<fo:block/>                    [] |<fo:block/>                    undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">RegisteredName = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RegisteredName</fo:inline> is the registered name of
          the port. If the port has no registered name, <fo:inline font-family="monospace">[]</fo:inline> is
          returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port identified by <fo:inline font-family="monospace">Port</fo:inline> is not open,
          <fo:inline font-family="monospace">undefined</fo:inline> is returned. If the port is closed and the
          calling process was previously linked to the port, the exit
          signal from the port is guaranteed to be delivered before
          <fo:inline font-family="monospace">port_info/2</fo:inline> returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Port</fo:inline> is not a local
          port identifier, or an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14415200"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">port_to_list(Port) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = port()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a string corresponding to the text
          representation of the port identifier <fo:inline font-family="monospace">Port</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14418512"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:ports() -&gt; [port()]</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of port identifiers corresponding to all the
          ports existing on the local node.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that an exiting port exists, but is not open.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14421712"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">pre_loaded() -&gt; [module()]</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of Erlang modules that are preloaded in
          the system. As all loading of code is done through the file
          system, the file system must have been loaded previously.
          Hence, at least the module <fo:inline font-family="monospace">init</fo:inline> must be preloaded.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14425008"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:process_display(Pid, Type) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = backtrace</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writes information about the local process <fo:inline font-family="monospace">Pid</fo:inline> on
          standard error. The only allowed value for the atom
          <fo:inline font-family="monospace">Type</fo:inline> is <fo:inline font-family="monospace">backtrace</fo:inline>, which shows the contents
          of the call stack, including information about the call chain, with
          the current function printed first. The format of the output
          is not further defined.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14429568"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_flag(Flag :: trap_exit, Boolean) -&gt; OldBoolean</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Boolean = OldBoolean = boolean()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">trap_exit</fo:inline> is set to <fo:inline font-family="monospace">true</fo:inline>, exit signals
          arriving to a process are converted to <fo:inline font-family="monospace">{'EXIT', From, Reason}</fo:inline>
          messages, which can be received as ordinary
          messages. If <fo:inline font-family="monospace">trap_exit</fo:inline> is set to <fo:inline font-family="monospace">false</fo:inline>, the
          process exits if it receives an exit signal other than
          <fo:inline font-family="monospace">normal</fo:inline> and the exit signal is propagated to its
          linked processes. Application processes are normally
          not to trap exits.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic"><fo:inline font-family="monospace">exit/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14437232"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_flag(Flag :: error_handler, Module) -&gt; OldModule</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = OldModule = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used by a process to redefine the error handler
          for undefined function calls and undefined registered
          processes. Inexperienced users are not to use this flag,
          as code auto-loading depends on the correct
          operation of the error handling module.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14440912"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_flag(Flag :: min_heap_size, MinHeapSize) -&gt; OldMinHeapSize</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MinHeapSize = OldMinHeapSize = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the minimum heap size for the calling process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14444928"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_flag(Flag :: min_bin_vheap_size, MinBinVHeapSize) -&gt;<fo:block/>                OldMinBinVHeapSize</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MinBinVHeapSize = OldMinBinVHeapSize = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the minimum binary virtual heap size for the calling
          process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14448400"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_flag(Flag :: max_heap_size, MaxHeapSize) -&gt; OldMaxHeapSize</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MaxHeapSize = OldMaxHeapSize = <fo:inline font-style="italic">max_heap_size()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">max_heap_size() = <fo:block/>    integer() &gt;= 0 |<fo:block/>    #{size =&gt; integer() &gt;= 0,<fo:block/>      kill =&gt; boolean(),<fo:block/>      error_logger =&gt; boolean()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This flag sets the maximum heap size for the calling process.
          If <fo:inline font-family="monospace">MaxHeapSize</fo:inline> is an integer, the system default
          values for <fo:inline font-family="monospace">kill</fo:inline> and <fo:inline font-family="monospace">error_logger</fo:inline> are used.
        </fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">size</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The maximum size in words of the process. If set to zero, the
              heap size limit is disabled. <fo:inline font-family="monospace">badarg</fo:inline> is be thrown if the
              value is smaller than <fo:inline font-style="italic">
              <fo:inline font-family="monospace">min_heap_size</fo:inline></fo:inline>. The size check is only done when
              a garbage collection is triggered.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">size</fo:inline> is the entire heap of the process when garbage collection
              is triggered. This includes all generational heaps, the process stack, 
              any <fo:inline font-style="italic">
              messages that are considered to be part of the heap</fo:inline>, and any
              extra memory that the garbage collector needs during collection.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">size</fo:inline> is the same as can be retrieved using
              <fo:inline font-style="italic">
                <fo:inline font-family="monospace">erlang:process_info(Pid, total_heap_size)</fo:inline></fo:inline>,
              or by adding <fo:inline font-family="monospace">heap_block_size</fo:inline>, <fo:inline font-family="monospace">old_heap_block_size</fo:inline>
              and <fo:inline font-family="monospace">mbuf_size</fo:inline> from <fo:inline font-style="italic">
                <fo:inline font-family="monospace">erlang:process_info(Pid, garbage_collection_info)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">kill</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When set to <fo:inline font-family="monospace">true</fo:inline>, the runtime system sends an
              untrappable exit signal with reason <fo:inline font-family="monospace">kill</fo:inline> to the process
              if the maximum heap size is reached. The garbage collection
              that triggered the <fo:inline font-family="monospace">kill</fo:inline> is not completed, instead the
              process exits as soon as possible. When set to <fo:inline font-family="monospace">false</fo:inline>,
              no exit signal is sent to the process, instead it continues
              executing.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">kill</fo:inline> is not defined in the map,
              the system default will be used. The default system default
              is <fo:inline font-family="monospace">true</fo:inline>. It can be changed by either option
              <fo:inline font-style="italic">+hmaxk</fo:inline> in <fo:inline font-family="monospace">erl(1)</fo:inline>,
              or <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag(max_heap_size, MaxHeapSize)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">error_logger</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When set to <fo:inline font-family="monospace">true</fo:inline>, the runtime system sends a
              message to the current <fo:inline font-style="italic">
              <fo:inline font-family="monospace">error_logger</fo:inline></fo:inline>
              containing details about the process when the maximum
              heap size is reached. One <fo:inline font-family="monospace">error_logger</fo:inline> report is sent
              each time the limit is reached.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">error_logger</fo:inline> is not defined in the map, the system
              default is used. The default system default is <fo:inline font-family="monospace">true</fo:inline>.
              It can be changed by either the option
              <fo:inline font-style="italic">+hmaxel</fo:inline> int <fo:inline font-family="monospace">erl(1)</fo:inline>,
              or <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag(max_heap_size, MaxHeapSize)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The heap size of a process is quite hard to predict, especially the
          amount of memory that is used during the garbage collection. When
          contemplating using this option, it is recommended to first run
          it in production with <fo:inline font-family="monospace">kill</fo:inline> set to <fo:inline font-family="monospace">false</fo:inline> and inspect
          the <fo:inline font-family="monospace">error_logger</fo:inline> reports to see what the normal peak sizes
          of the processes in the system is and then tune the value
          accordingly.
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14480384"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_flag(Flag :: message_queue_data, MQD) -&gt; OldMQD</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MQD = OldMQD = <fo:inline font-style="italic">message_queue_data()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">message_queue_data() = off_heap | on_heap</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This flag determines how messages in the message queue
          are stored, as follows:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">off_heap</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">All</fo:inline> messages in the message queue will be stored
              outside of the process heap. This implies that <fo:inline font-weight="bold">no</fo:inline>
              messages in the message queue will be part of a garbage
              collection of the process.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">on_heap</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All messages in the message queue will eventually be
              placed on heap. They can however temporarily be stored
              off heap. This is how messages always have been stored
              up until ERTS 8.0.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default <fo:inline font-family="monospace">message_queue_data</fo:inline> process flag is determined
          by command-line argument <fo:inline font-style="italic">
          <fo:inline font-family="monospace">+hmqd</fo:inline></fo:inline> in <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the process potentially can get many messages,
          you are advised to set the flag to <fo:inline font-family="monospace">off_heap</fo:inline>. This
          because a garbage collection with many messages placed on
          the heap can become extremely expensive and the process can
          consume large amounts of memory. Performance of the
          actual message passing is however generally better when not
          using flag <fo:inline font-family="monospace">off_heap</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When changing this flag messages will be moved. This work
          has been initiated but not completed when this function
          call returns.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14494224"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_flag(Flag :: priority, Level) -&gt; OldLevel</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Level = OldLevel = <fo:inline font-style="italic">priority_level()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">priority_level() = low | normal | high | max</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          Sets the process priority. <fo:inline font-family="monospace">Level</fo:inline> is an atom.
          Four priority levels exist: <fo:inline font-family="monospace">low</fo:inline>,
          <fo:inline font-family="monospace">normal</fo:inline>, <fo:inline font-family="monospace">high</fo:inline>, and <fo:inline font-family="monospace">max</fo:inline>. Default
          is <fo:inline font-family="monospace">normal</fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Priority level <fo:inline font-family="monospace">max</fo:inline> is reserved for internal use in
          the Erlang runtime system, and is <fo:inline font-weight="bold">not</fo:inline> to be used
          by others.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Internally in each priority level, processes are scheduled
          in a round robin fashion.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Execution of processes on priority <fo:inline font-family="monospace">normal</fo:inline> and
          <fo:inline font-family="monospace">low</fo:inline> are interleaved. Processes on priority
          <fo:inline font-family="monospace">low</fo:inline> are selected for execution less
          frequently than processes on priority <fo:inline font-family="monospace">normal</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When runnable processes on priority <fo:inline font-family="monospace">high</fo:inline> exist,
          no processes on priority <fo:inline font-family="monospace">low</fo:inline> or <fo:inline font-family="monospace">normal</fo:inline> are
          selected for execution. Notice however that this does
          <fo:inline font-weight="bold">not</fo:inline> mean that no processes on priority <fo:inline font-family="monospace">low</fo:inline>
          or <fo:inline font-family="monospace">normal</fo:inline> can run when processes
          are running on priority <fo:inline font-family="monospace">high</fo:inline>. On the runtime
          system with SMP support, more processes can be running
          in parallel than processes on priority <fo:inline font-family="monospace">high</fo:inline>. That is,
          a <fo:inline font-family="monospace">low</fo:inline> and a <fo:inline font-family="monospace">high</fo:inline> priority process can
          execute at the same time.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When runnable processes on priority <fo:inline font-family="monospace">max</fo:inline> exist,
          no processes on priority <fo:inline font-family="monospace">low</fo:inline>, <fo:inline font-family="monospace">normal</fo:inline>, or
          <fo:inline font-family="monospace">high</fo:inline> are selected for execution. As with priority
          <fo:inline font-family="monospace">high</fo:inline>, processes on lower priorities can
          execute in parallel with processes on priority <fo:inline font-family="monospace">max</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Scheduling is pre-emptive. Regardless of priority, a process
          is pre-empted when it has consumed more than a certain number
          of reductions since the last time it was selected for
          execution.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do not depend on the scheduling
          to remain exactly as it is today. Scheduling, at least on
          the runtime system with SMP support, is likely to be
          changed in a future release to use available
          processor cores better.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is <fo:inline font-weight="bold">no</fo:inline> automatic mechanism for
          avoiding priority inversion, such as priority inheritance
          or priority ceilings. When using priorities,
          take this into account and handle such scenarios by
          yourself.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Making calls from a <fo:inline font-family="monospace">high</fo:inline> priority process into code
          that you has no control over can cause the <fo:inline font-family="monospace">high</fo:inline>
          priority process to wait for a process with lower
          priority. That is, effectively decreasing the priority of the
          <fo:inline font-family="monospace">high</fo:inline> priority process during the call. Even if this
          is not the case with one version of the code that you have no
          control over, it can be the case in a future
          version of it. This can, for example, occur if a
          <fo:inline font-family="monospace">high</fo:inline> priority process triggers code loading, as
          the code server runs on priority <fo:inline font-family="monospace">normal</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other priorities than <fo:inline font-family="monospace">normal</fo:inline> are normally not needed.
          When other priorities are used, use them with care,
          <fo:inline font-weight="bold">especially</fo:inline> priority <fo:inline font-family="monospace">high</fo:inline>. A
          process on priority <fo:inline font-family="monospace">high</fo:inline> is only
          to perform work for short periods. Busy looping for
          long periods in a <fo:inline font-family="monospace">high</fo:inline> priority process causes
          most likely problems, as important OTP servers
          run on priority <fo:inline font-family="monospace">normal</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14524240"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_flag(Flag :: save_calls, N) -&gt; OldN</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">N = OldN = 0..10000</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">N</fo:inline> must be an integer in the interval 0..10000.
          If <fo:inline font-family="monospace">N</fo:inline> &gt; 0, call saving is made
          active for the
          process. This means that information about the <fo:inline font-family="monospace">N</fo:inline>
          most recent global function calls, BIF calls, sends, and
          receives made by the process are saved in a list, which
          can be retrieved with
          <fo:inline font-family="monospace">process_info(Pid, last_calls)</fo:inline>. A global function
          call is one in which the module of the function is
          explicitly mentioned. Only a fixed amount of information
          is saved, as follows:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A tuple <fo:inline font-family="monospace">{Module, Function, Arity}</fo:inline> for
            function calls</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The atoms <fo:inline font-family="monospace">send</fo:inline>, <fo:inline font-family="monospace">'receive'</fo:inline>, and
            <fo:inline font-family="monospace">timeout</fo:inline> for sends and receives (<fo:inline font-family="monospace">'receive'</fo:inline>
            when a message is received and <fo:inline font-family="monospace">timeout</fo:inline> when a
            receive times out)</fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">N</fo:inline> = 0,
          call saving is disabled for the process, which is the
          default. Whenever the size of the call saving list is set,
          its contents are reset.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14535840"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_flag(Flag :: sensitive, Boolean) -&gt; OldBoolean</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Boolean = OldBoolean = boolean()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets or clears flag <fo:inline font-family="monospace">sensitive</fo:inline> for the current process.
          When a process has been marked as sensitive by calling
          <fo:inline font-family="monospace">process_flag(sensitive, true)</fo:inline>, features in the runtime
          system that can be used for examining the data or inner working
          of the process are silently disabled.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Features that are disabled include (but are not limited to)
          the following:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tracing. Trace flags can still be set for the process,
            but no trace messages of any kind are generated. (If flag
            <fo:inline font-family="monospace">sensitive</fo:inline> is turned off, trace messages are again
            generated if any trace flags are set.)</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sequential tracing. The sequential trace token is
            propagated as usual, but no sequential trace messages are
            generated.</fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">process_info/1,2</fo:inline> cannot be used to read out the
          message queue or the process dictionary (both are returned
          as empty lists).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stack back-traces cannot be displayed for the process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In crash dumps, the stack, messages, and the process dictionary
          are omitted.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">{save_calls,N}</fo:inline> has been set for the process, no
          function calls are saved to the call saving list.
          (The call saving list is not cleared. Also, send, receive,
          and time-out events are still added to the list.)</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14546464"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_flag(Pid, Flag, Value) -&gt; OldValue</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Flag = save_calls</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Value = OldValue = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets certain flags for the process <fo:inline font-family="monospace">Pid</fo:inline>,
          in the same manner as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">process_flag/2</fo:inline></fo:inline>.
          Returns the old value of the flag. The valid values for
          <fo:inline font-family="monospace">Flag</fo:inline> are only a subset of those allowed in
          <fo:inline font-family="monospace">process_flag/2</fo:inline>, namely <fo:inline font-family="monospace">save_calls</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Pid</fo:inline>
          is not a local process.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14553632"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_info(Pid) -&gt; Info</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Info = [InfoTuple] | undefined</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">InfoTuple = <fo:inline font-style="italic">process_info_result_item()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_info_result_item() = <fo:block/>    {backtrace, Bin :: binary()} |<fo:block/>    {binary,<fo:block/>     BinInfo ::<fo:block/>         [{integer() &gt;= 0,<fo:block/>           integer() &gt;= 0,<fo:block/>           integer() &gt;= 0}]} |<fo:block/>    {catchlevel, CatchLevel :: integer() &gt;= 0} |<fo:block/>    {current_function,<fo:block/>     {Module :: module(), Function :: atom(), Arity :: arity()}} |<fo:block/>    {current_location,<fo:block/>     {Module :: module(),<fo:block/>      Function :: atom(),<fo:block/>      Arity :: arity(),<fo:block/>      Location ::<fo:block/>          [{file, Filename :: string()} |<fo:block/>           {line, Line :: integer() &gt;= 1}]}} |<fo:block/>    {current_stacktrace, Stack :: [<fo:inline font-style="italic">stack_item()</fo:inline>]} |<fo:block/>    {dictionary, Dictionary :: [{Key :: term(), Value :: term()}]} |<fo:block/>    {error_handler, Module :: module()} |<fo:block/>    {garbage_collection, GCInfo :: [{atom(), integer() &gt;= 0}]} |<fo:block/>    {garbage_collection_info,<fo:block/>     GCInfo :: [{atom(), integer() &gt;= 0}]} |<fo:block/>    {group_leader, GroupLeader :: pid()} |<fo:block/>    {heap_size, Size :: integer() &gt;= 0} |<fo:block/>    {initial_call, mfa()} |<fo:block/>    {links, PidsAndPorts :: [pid() | port()]} |<fo:block/>    {last_calls, false | (Calls :: [mfa()])} |<fo:block/>    {memory, Size :: integer() &gt;= 0} |<fo:block/>    {message_queue_len, MessageQueueLen :: integer() &gt;= 0} |<fo:block/>    {messages, MessageQueue :: [term()]} |<fo:block/>    {min_heap_size, MinHeapSize :: integer() &gt;= 0} |<fo:block/>    {min_bin_vheap_size, MinBinVHeapSize :: integer() &gt;= 0} |<fo:block/>    {max_heap_size, MaxHeapSize :: <fo:inline font-style="italic">max_heap_size()</fo:inline>} |<fo:block/>    {monitored_by, Pids :: [pid()]} |<fo:block/>    {monitors,<fo:block/>     Monitors ::<fo:block/>         [{process | port,<fo:block/>           Pid ::<fo:block/>               pid() |<fo:block/>               port() |<fo:block/>               {RegName :: atom(), Node :: node()}}]} |<fo:block/>    {message_queue_data, MQD :: <fo:inline font-style="italic">message_queue_data()</fo:inline>} |<fo:block/>    {priority, Level :: <fo:inline font-style="italic">priority_level()</fo:inline>} |<fo:block/>    {reductions, Number :: integer() &gt;= 0} |<fo:block/>    {registered_name, [] | (Atom :: atom())} |<fo:block/>    {sequential_trace_token,<fo:block/>     [] | (SequentialTraceToken :: term())} |<fo:block/>    {stack_size, Size :: integer() &gt;= 0} |<fo:block/>    {status,<fo:block/>     Status ::<fo:block/>         exiting |<fo:block/>         garbage_collecting |<fo:block/>         waiting |<fo:block/>         running |<fo:block/>         runnable |<fo:block/>         suspended} |<fo:block/>    {suspending,<fo:block/>     SuspendeeList ::<fo:block/>         [{Suspendee :: pid(),<fo:block/>           ActiveSuspendCount :: integer() &gt;= 0,<fo:block/>           OutstandingSuspendCount :: integer() &gt;= 0}]} |<fo:block/>    {total_heap_size, Size :: integer() &gt;= 0} |<fo:block/>    {trace, InternalTraceFlags :: integer() &gt;= 0} |<fo:block/>    {trap_exit, Boolean :: boolean()}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">priority_level() = low | normal | high | max</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stack_item() = <fo:block/>    {Module :: module(),<fo:block/>     Function :: atom(),<fo:block/>     Arity :: arity() | (Args :: [term()]),<fo:block/>     Location ::<fo:block/>         [{file, Filename :: string()} |<fo:block/>          {line, Line :: integer() &gt;= 1}]}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">max_heap_size() = <fo:block/>    integer() &gt;= 0 |<fo:block/>    #{size =&gt; integer() &gt;= 0,<fo:block/>      kill =&gt; boolean(),<fo:block/>      error_logger =&gt; boolean()}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">message_queue_data() = off_heap | on_heap</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list containing <fo:inline font-family="monospace">InfoTuple</fo:inline>s with
          miscellaneous information about the process identified by
          <fo:inline font-family="monospace">Pid</fo:inline>, or <fo:inline font-family="monospace">undefined</fo:inline> if the process is not alive.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The order of the <fo:inline font-family="monospace">InfoTuple</fo:inline>s is undefined and
          all <fo:inline font-family="monospace">InfoTuple</fo:inline>s are not mandatory.
          The <fo:inline font-family="monospace">InfoTuple</fo:inline>s
          part of the result can be changed without prior notice.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">InfoTuple</fo:inline>s with the following items
          are part of the result:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">current_function</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">initial_call</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">status</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">message_queue_len</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">messages</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">links</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">dictionary</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">trap_exit</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">error_handler</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">priority</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">group_leader</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">total_heap_size</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">heap_size</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">stack_size</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reductions</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">garbage_collection</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the process identified by <fo:inline font-family="monospace">Pid</fo:inline> has a
          registered name,
          also an <fo:inline font-family="monospace">InfoTuple</fo:inline> with item <fo:inline font-family="monospace">registered_name</fo:inline>
          is included.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about specific <fo:inline font-family="monospace">InfoTuple</fo:inline>s, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">process_info/2</fo:inline></fo:inline>.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is intended for <fo:inline font-weight="bold">debugging only</fo:inline>. For
            all other purposes, use <fo:inline font-style="italic">
            <fo:inline font-family="monospace">process_info/2</fo:inline></fo:inline>.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Pid</fo:inline> is not a
          local process.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14581792"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_info(Pid, Item) -&gt; InfoTuple | [] | undefined</fo:block></fo:block><fo:block id="idp14582896"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_info(Pid, ItemList) -&gt; InfoTupleList | [] | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ItemList = [Item]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Item = <fo:inline font-style="italic">process_info_item()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">InfoTupleList = [InfoTuple]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">InfoTuple = <fo:inline font-style="italic">process_info_result_item()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_info_item() = <fo:block/>    backtrace |<fo:block/>    binary |<fo:block/>    catchlevel |<fo:block/>    current_function |<fo:block/>    current_location |<fo:block/>    current_stacktrace |<fo:block/>    dictionary |<fo:block/>    error_handler |<fo:block/>    garbage_collection |<fo:block/>    garbage_collection_info |<fo:block/>    group_leader |<fo:block/>    heap_size |<fo:block/>    initial_call |<fo:block/>    links |<fo:block/>    last_calls |<fo:block/>    memory |<fo:block/>    message_queue_len |<fo:block/>    messages |<fo:block/>    min_heap_size |<fo:block/>    min_bin_vheap_size |<fo:block/>    monitored_by |<fo:block/>    monitors |<fo:block/>    message_queue_data |<fo:block/>    priority |<fo:block/>    reductions |<fo:block/>    registered_name |<fo:block/>    sequential_trace_token |<fo:block/>    stack_size |<fo:block/>    status |<fo:block/>    suspending |<fo:block/>    total_heap_size |<fo:block/>    trace |<fo:block/>    trap_exit</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">process_info_result_item() = <fo:block/>    {backtrace, Bin :: binary()} |<fo:block/>    {binary,<fo:block/>     BinInfo ::<fo:block/>         [{integer() &gt;= 0,<fo:block/>           integer() &gt;= 0,<fo:block/>           integer() &gt;= 0}]} |<fo:block/>    {catchlevel, CatchLevel :: integer() &gt;= 0} |<fo:block/>    {current_function,<fo:block/>     {Module :: module(), Function :: atom(), Arity :: arity()}} |<fo:block/>    {current_location,<fo:block/>     {Module :: module(),<fo:block/>      Function :: atom(),<fo:block/>      Arity :: arity(),<fo:block/>      Location ::<fo:block/>          [{file, Filename :: string()} |<fo:block/>           {line, Line :: integer() &gt;= 1}]}} |<fo:block/>    {current_stacktrace, Stack :: [<fo:inline font-style="italic">stack_item()</fo:inline>]} |<fo:block/>    {dictionary, Dictionary :: [{Key :: term(), Value :: term()}]} |<fo:block/>    {error_handler, Module :: module()} |<fo:block/>    {garbage_collection, GCInfo :: [{atom(), integer() &gt;= 0}]} |<fo:block/>    {garbage_collection_info,<fo:block/>     GCInfo :: [{atom(), integer() &gt;= 0}]} |<fo:block/>    {group_leader, GroupLeader :: pid()} |<fo:block/>    {heap_size, Size :: integer() &gt;= 0} |<fo:block/>    {initial_call, mfa()} |<fo:block/>    {links, PidsAndPorts :: [pid() | port()]} |<fo:block/>    {last_calls, false | (Calls :: [mfa()])} |<fo:block/>    {memory, Size :: integer() &gt;= 0} |<fo:block/>    {message_queue_len, MessageQueueLen :: integer() &gt;= 0} |<fo:block/>    {messages, MessageQueue :: [term()]} |<fo:block/>    {min_heap_size, MinHeapSize :: integer() &gt;= 0} |<fo:block/>    {min_bin_vheap_size, MinBinVHeapSize :: integer() &gt;= 0} |<fo:block/>    {max_heap_size, MaxHeapSize :: <fo:inline font-style="italic">max_heap_size()</fo:inline>} |<fo:block/>    {monitored_by, Pids :: [pid()]} |<fo:block/>    {monitors,<fo:block/>     Monitors ::<fo:block/>         [{process | port,<fo:block/>           Pid ::<fo:block/>               pid() |<fo:block/>               port() |<fo:block/>               {RegName :: atom(), Node :: node()}}]} |<fo:block/>    {message_queue_data, MQD :: <fo:inline font-style="italic">message_queue_data()</fo:inline>} |<fo:block/>    {priority, Level :: <fo:inline font-style="italic">priority_level()</fo:inline>} |<fo:block/>    {reductions, Number :: integer() &gt;= 0} |<fo:block/>    {registered_name, [] | (Atom :: atom())} |<fo:block/>    {sequential_trace_token,<fo:block/>     [] | (SequentialTraceToken :: term())} |<fo:block/>    {stack_size, Size :: integer() &gt;= 0} |<fo:block/>    {status,<fo:block/>     Status ::<fo:block/>         exiting |<fo:block/>         garbage_collecting |<fo:block/>         waiting |<fo:block/>         running |<fo:block/>         runnable |<fo:block/>         suspended} |<fo:block/>    {suspending,<fo:block/>     SuspendeeList ::<fo:block/>         [{Suspendee :: pid(),<fo:block/>           ActiveSuspendCount :: integer() &gt;= 0,<fo:block/>           OutstandingSuspendCount :: integer() &gt;= 0}]} |<fo:block/>    {total_heap_size, Size :: integer() &gt;= 0} |<fo:block/>    {trace, InternalTraceFlags :: integer() &gt;= 0} |<fo:block/>    {trap_exit, Boolean :: boolean()}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stack_item() = <fo:block/>    {Module :: module(),<fo:block/>     Function :: atom(),<fo:block/>     Arity :: arity() | (Args :: [term()]),<fo:block/>     Location ::<fo:block/>         [{file, Filename :: string()} |<fo:block/>          {line, Line :: integer() &gt;= 1}]}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">priority_level() = low | normal | high | max</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">max_heap_size() = <fo:block/>    integer() &gt;= 0 |<fo:block/>    #{size =&gt; integer() &gt;= 0,<fo:block/>      kill =&gt; boolean(),<fo:block/>      error_logger =&gt; boolean()}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">message_queue_data() = off_heap | on_heap</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns information about the process identified by
          <fo:inline font-family="monospace">Pid</fo:inline>, as specified by
          <fo:inline font-family="monospace">Item</fo:inline> or <fo:inline font-family="monospace">ItemList</fo:inline>.
          Returns <fo:inline font-family="monospace">undefined</fo:inline> if the process is not alive.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the process is alive and a single <fo:inline font-family="monospace">Item</fo:inline>
          is specified, the returned value is the corresponding
          <fo:inline font-family="monospace">InfoTuple</fo:inline>, unless <fo:inline font-family="monospace">Item =:= registered_name</fo:inline>
          and the process has no registered name. In this case,
          <fo:inline font-family="monospace">[]</fo:inline> is returned. This strange behavior is because of
          historical reasons, and is kept for backward compatibility.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">ItemList</fo:inline> is specified, the result is
          <fo:inline font-family="monospace">InfoTupleList</fo:inline>.
          The <fo:inline font-family="monospace">InfoTuple</fo:inline>s in
          <fo:inline font-family="monospace">InfoTupleList</fo:inline> are included with the corresponding
          <fo:inline font-family="monospace">Item</fo:inline>s in the same order as the
          <fo:inline font-family="monospace">Item</fo:inline>s were included
          in <fo:inline font-family="monospace">ItemList</fo:inline>. Valid <fo:inline font-family="monospace">Item</fo:inline>s can
          be included multiple times in <fo:inline font-family="monospace">ItemList</fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">registered_name</fo:inline> is part of <fo:inline font-family="monospace">ItemList</fo:inline>
            and the process has no name registered, a
            <fo:inline font-family="monospace">{registered_name, []}</fo:inline>, <fo:inline font-family="monospace">InfoTuple</fo:inline>
            <fo:inline font-weight="bold">will</fo:inline> be included in the resulting
            <fo:inline font-family="monospace">InfoTupleList</fo:inline>. This
            behavior is different when a single
            <fo:inline font-family="monospace">Item =:= registered_name</fo:inline> is specified, and when
            <fo:inline font-family="monospace">process_info/1</fo:inline> is used.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Valid <fo:inline font-family="monospace">InfoTuple</fo:inline>s with corresponding
          <fo:inline font-family="monospace">Item</fo:inline>s:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{backtrace, Bin}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Binary <fo:inline font-family="monospace">Bin</fo:inline> contains the same information
              as the output from
              <fo:inline font-family="monospace">erlang:process_display(Pid, backtrace)</fo:inline>. Use
              <fo:inline font-family="monospace">binary_to_list/1</fo:inline> to obtain the string of characters
              from the binary.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{binary, BinInfo}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">BinInfo</fo:inline> is a list containing miscellaneous
              information about binaries currently referred to by this
              process. This <fo:inline font-family="monospace">InfoTuple</fo:inline> can be changed or
              removed without prior notice. In the current implementation
              <fo:inline font-family="monospace">BinInfo</fo:inline> is a list of tuples. The tuples
              contain; <fo:inline font-family="monospace">BinaryId</fo:inline>, <fo:inline font-family="monospace">BinarySize</fo:inline>, <fo:inline font-family="monospace">BinaryRefcCount</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{catchlevel, CatchLevel}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CatchLevel</fo:inline> is the number of currently active
              catches in this process. This <fo:inline font-family="monospace">InfoTuple</fo:inline> can be
              changed or removed without prior notice.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{current_function, {Module,
            Function, Arity}}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Module</fo:inline>, <fo:inline font-family="monospace">Function</fo:inline>,
              <fo:inline font-family="monospace">Arity</fo:inline> is
              the current function call of the process.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{current_location, {Module,
            Function, Arity,
            Location}}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Module</fo:inline>, <fo:inline font-family="monospace">Function</fo:inline>,
              <fo:inline font-family="monospace">Arity</fo:inline> is
              the current function call of the process.
              <fo:inline font-family="monospace">Location</fo:inline> is a list of two-tuples describing
              the location in the source code.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{current_stacktrace, Stack}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current call stack back-trace (<fo:inline font-weight="bold">stacktrace</fo:inline>)
              of the process. The stack has the same format as returned by
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:get_stacktrace/0</fo:inline></fo:inline>. The depth of the
              stacktrace is truncated according to the <fo:inline font-family="monospace">backtrace_depth</fo:inline>
              system flag setting.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{dictionary, Dictionary}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dictionary</fo:inline> is the process dictionary.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error_handler, Module}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Module</fo:inline> is the error handler module used by
              the process (for undefined function calls, for example).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{garbage_collection, GCInfo}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GCInfo</fo:inline> is a list containing miscellaneous
              information about garbage collection for this process.
              The content of <fo:inline font-family="monospace">GCInfo</fo:inline> can be changed without
              prior notice.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{garbage_collection_info, GCInfo}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GCInfo</fo:inline> is a list containing miscellaneous
              detailed information about garbage collection for this process.
              The content of <fo:inline font-family="monospace">GCInfo</fo:inline> can be changed without
              prior notice. For details about the meaning of each item, see
              <fo:inline font-style="italic"><fo:inline font-family="monospace">gc_minor_start</fo:inline></fo:inline>
              in <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{group_leader, GroupLeader}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GroupLeader</fo:inline> is the group leader for the I/O
              of the process.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{heap_size, Size}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Size</fo:inline> is the size in words of the youngest
              heap generation of the process. This generation includes
              the process stack. This information is highly
              implementation-dependent, and can change if the
              implementation changes.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{initial_call, {Module, Function,
            Arity}}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Module</fo:inline>, <fo:inline font-family="monospace">Function</fo:inline>,
              <fo:inline font-family="monospace">Arity</fo:inline> is
              the initial function call with which the process was
              spawned.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{links, PidsAndPorts}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">PidsAndPorts</fo:inline> is a list of process identifiers
              and port identifiers, with processes or ports to which the process
              has a link.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{last_calls, false|Calls}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value is <fo:inline font-family="monospace">false</fo:inline> if call saving is not active
              for the process (see <fo:inline font-style="italic">
              <fo:inline font-family="monospace">process_flag/3</fo:inline></fo:inline>).
              If call saving is active, a list is returned, in which
              the last element is the most recent called.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{memory, Size}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Size</fo:inline> is the size in bytes of the process.
              This includes call stack, heap, and internal structures.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{message_queue_len, MessageQueueLen}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">MessageQueueLen</fo:inline> is the number of messages
              currently in the message queue of the process. This is the
              length of the list <fo:inline font-family="monospace">MessageQueue</fo:inline> returned as
              the information item <fo:inline font-family="monospace">messages</fo:inline> (see below).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{messages, MessageQueue}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">MessageQueue</fo:inline> is a list of the messages to
              the process, which have not yet been processed.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{min_heap_size, MinHeapSize}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">MinHeapSize</fo:inline> is the minimum heap size
              for the process.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{min_bin_vheap_size, MinBinVHeapSize}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">MinBinVHeapSize</fo:inline> is the minimum binary virtual
              heap size for the process.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{monitored_by, Pids}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of process identifiers monitoring the process (with
              <fo:inline font-family="monospace">monitor/2</fo:inline>).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{monitors, Monitors}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of monitors (started by <fo:inline font-family="monospace">monitor/2</fo:inline>)
              that are active for the process. For a local process
              monitor or a remote process monitor by a process
              identifier, the list consists of:</fo:block>
              <fo:block space-after="0.25em" space-before="0.25em">
                <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{process, Pid}</fo:inline></fo:block>
                <fo:block-container><fo:block start-indent="2em">Process is monitored by pid.</fo:block></fo:block-container>
                <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{process, {RegName, Node}}</fo:inline></fo:block>
                <fo:block-container><fo:block start-indent="2em">Local or remote process is monitored by name.</fo:block></fo:block-container>
                <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{port, PortId}</fo:inline></fo:block>
                <fo:block-container><fo:block start-indent="2em">Local port is monitored by port id.</fo:block></fo:block-container>
                <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{port, {RegName, Node}}</fo:inline></fo:block>
                <fo:block-container><fo:block start-indent="2em">Local port is monitored by name. Please note, that
                  remote port monitors are not supported, so <fo:inline font-family="monospace">Node</fo:inline> will
                  always be the local node name.</fo:block></fo:block-container>
              </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{message_queue_data, MQD}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current state of process flag
              <fo:inline font-family="monospace">message_queue_data</fo:inline>. <fo:inline font-family="monospace">MQD</fo:inline> is either
              <fo:inline font-family="monospace">off_heap</fo:inline> or <fo:inline font-family="monospace">on_heap</fo:inline>. For more
              information, see the documentation of
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">process_flag(message_queue_data, MQD)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{priority, Level}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Level</fo:inline> is the current priority level for
              the process. For more information on priorities, see
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">process_flag(priority, Level)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{reductions, Number}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Number</fo:inline> is the number of reductions executed
              by the process.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{registered_name, Atom}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Atom</fo:inline> is the registered process name.
              If the process has no registered name, this tuple is not
              present in the list.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sequential_trace_token, [] |
            SequentialTraceToken}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SequentialTraceToken</fo:inline> is the sequential trace
              token for the process. This <fo:inline font-family="monospace">InfoTuple</fo:inline> can be
              changed or removed without prior notice.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{stack_size, Size}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Size</fo:inline> is the stack size, in words,
              of the process.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{status, Status}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Status</fo:inline> is the status of the process and is
              one of the following:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">exiting</fo:inline></fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">garbage_collecting</fo:inline></fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">waiting</fo:inline> (for a message)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">running</fo:inline></fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">runnable</fo:inline> (ready to run, but another process is
                running)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">suspended</fo:inline> (suspended on a "busy" port
                or by the BIF <fo:inline font-family="monospace">erlang:suspend_process/1,2</fo:inline>)</fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{suspending, SuspendeeList}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SuspendeeList</fo:inline> is a list of
              <fo:inline font-family="monospace">{Suspendee, ActiveSuspendCount,
              OutstandingSuspendCount}</fo:inline> tuples.
              <fo:inline font-family="monospace">Suspendee</fo:inline> is the process identifier of a
              process that has been, or is to be,
              suspended by the process identified by <fo:inline font-family="monospace">Pid</fo:inline>
              through the BIF <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:suspend_process/2</fo:inline></fo:inline> or
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:suspend_process/1</fo:inline></fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ActiveSuspendCount</fo:inline> is the number of
              times <fo:inline font-family="monospace">Suspendee</fo:inline> has been suspended by
              <fo:inline font-family="monospace">Pid</fo:inline>.
              <fo:inline font-family="monospace">OutstandingSuspendCount</fo:inline> is the number of not
              yet completed suspend requests sent by <fo:inline font-family="monospace">Pid</fo:inline>,
              that is:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">ActiveSuspendCount =/= 0</fo:inline>,
                  <fo:inline font-family="monospace">Suspendee</fo:inline> is
                  currently in the suspended state.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">OutstandingSuspendCount =/= 0</fo:inline>,
                  option <fo:inline font-family="monospace">asynchronous</fo:inline> of <fo:inline font-family="monospace">erlang:suspend_process/2</fo:inline>
                  has been used and the suspendee has not yet been
                  suspended by <fo:inline font-family="monospace">Pid</fo:inline>.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-family="monospace">ActiveSuspendCount</fo:inline> and
              <fo:inline font-family="monospace">OutstandingSuspendCount</fo:inline> are not the
              total suspend count on <fo:inline font-family="monospace">Suspendee</fo:inline>,
              only the parts contributed by <fo:inline font-family="monospace">Pid</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{total_heap_size, Size}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Size</fo:inline> is the total size, in words, of all heap
              fragments of the process. This includes the process stack and
              any unreceived messages that are considered to be part of the
              heap.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{trace, InternalTraceFlags}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">InternalTraceFlags</fo:inline> is an integer
              representing the internal trace flag for this process.
              This <fo:inline font-family="monospace">InfoTuple</fo:inline>
              can be changed or removed without prior notice.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{trap_exit, Boolean}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Boolean</fo:inline> is <fo:inline font-family="monospace">true</fo:inline> if the process
              is trapping exits, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that not all implementations support all
          these <fo:inline font-family="monospace">Item</fo:inline>s.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If <fo:inline font-family="monospace">Pid</fo:inline> is not a local process.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If <fo:inline font-family="monospace">Item</fo:inline> is an invalid item.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14747760"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">processes() -&gt; [pid()]</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of process identifiers corresponding to
          all the processes currently existing on the local node.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that an exiting process exists, but is not alive.
          That is, <fo:inline font-family="monospace">is_process_alive/1</fo:inline> returns <fo:inline font-family="monospace">false</fo:inline>
          for an exiting process, but its process identifier is part
          of the result returned from <fo:inline font-family="monospace">processes/0</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">processes().</fo:inline>
[&lt;0.0.0&gt;,&lt;0.2.0&gt;,&lt;0.4.0&gt;,&lt;0.5.0&gt;,&lt;0.7.0&gt;,&lt;0.8.0&gt;]</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14753824"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">purge_module(Module) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes old code for <fo:inline font-family="monospace">Module</fo:inline>.
          Before this BIF is used,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">check_process_code/2</fo:inline></fo:inline>is to be called to check
          that no processes execute old code in the module.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is intended for the code server (see
            <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>)
            and is not to be used elsewhere.</fo:block>
        </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from ERTS 8.0 (Erlang/OTP 19), any lingering processes
            that still execute the old code is killed by this function.
            In earlier versions, such incorrect use could cause much
            more fatal failures, like emulator crash.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if there is no old code for
          <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14762592"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">put(Key, Val) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Key = Val = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a new <fo:inline font-family="monospace">Key</fo:inline> to the process dictionary,
          associated with the value <fo:inline font-family="monospace">Val</fo:inline>, and returns
          <fo:inline font-family="monospace">undefined</fo:inline>. If <fo:inline font-family="monospace">Key</fo:inline> exists, the old
          value is deleted and replaced by <fo:inline font-family="monospace">Val</fo:inline>, and
          the function returns the old value. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">X = put(name, walrus), Y = put(name, carpenter),</fo:inline>
<fo:inline font-weight="bold">Z = get(name),</fo:inline>
<fo:inline font-weight="bold">{X, Y, Z}.</fo:inline>
{undefined,walrus,carpenter}</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The values stored when <fo:inline font-family="monospace">put</fo:inline> is evaluated within
            the scope of a <fo:inline font-family="monospace">catch</fo:inline> are not retracted if a
            <fo:inline font-family="monospace">throw</fo:inline> is evaluated, or if an error occurs.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14772304"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:raise(Class, Reason, Stacktrace) -&gt; no_return()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Class = error | exit | throw</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Stacktrace = <fo:inline font-style="italic">raise_stacktrace()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">raise_stacktrace() = <fo:block/>    [{module(), atom(), arity() | [term()]} |<fo:block/>     {function(), [term()]}] |<fo:block/>    [{module(), atom(), arity() | [term()], [{atom(), term()}]} |<fo:block/>     {function(), [term()], [{atom(), term()}]}]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the execution of the calling process with an
          exception of the specified class, reason, and call stack backtrace
          (<fo:inline font-weight="bold">stacktrace</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Class</fo:inline> is <fo:inline font-family="monospace">error</fo:inline>, <fo:inline font-family="monospace">exit</fo:inline>, or
          <fo:inline font-family="monospace">throw</fo:inline>. So, if it were not for the stacktrace,
          <fo:inline font-family="monospace">erlang:raise(Class, Reason,
          Stacktrace)</fo:inline> is equivalent to
          <fo:inline font-family="monospace">erlang:Class(Reason)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Reason</fo:inline> is any term.
          <fo:inline font-family="monospace">Stacktrace</fo:inline> is a list as
          returned from <fo:inline font-family="monospace">get_stacktrace()</fo:inline>, that is, a list of
          four-tuples <fo:inline font-family="monospace">{Module, Function, Arity | Args,
          Location}</fo:inline>, where <fo:inline font-family="monospace">Module</fo:inline> and <fo:inline font-family="monospace">Function</fo:inline>
          are atoms, and the third element is an integer arity or an
          argument list. The stacktrace can also contain <fo:inline font-family="monospace">{Fun,
          Args, Location}</fo:inline> tuples, where <fo:inline font-family="monospace">Fun</fo:inline> is a local
          fun and <fo:inline font-family="monospace">Args</fo:inline> is an argument list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Element <fo:inline font-family="monospace">Location</fo:inline> at the end is optional.
          Omitting it is equivalent to specifying an empty list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The stacktrace is used as the exception stacktrace for the
          calling process; it is truncated to the current
          maximum stacktrace depth.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As evaluating this function causes the process to
          terminate, it has no return value unless the arguments are
          invalid, in which case the function <fo:inline font-weight="bold">returns the error
          reason</fo:inline> <fo:inline font-family="monospace">badarg</fo:inline>. If you want to be
          sure not to return, you can call
          <fo:inline font-family="monospace">error(erlang:raise(Class, Reason,
          Stacktrace))</fo:inline>
          and hope to distinguish exceptions later.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14791312"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:read_timer(TimerRef) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TimerRef = reference()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Time = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = Time | false</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads the state of a timer. The same as calling
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:read_timer(TimerRef,
          [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14794880"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:read_timer(TimerRef, Options) -&gt; Result | ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TimerRef = reference()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Async = boolean()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = {async, Async}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [Option]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Time = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = Time | false</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads the state of a timer that has been created by either
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:start_timer</fo:inline></fo:inline>
          or <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:send_after</fo:inline></fo:inline>.
          <fo:inline font-family="monospace">TimerRef</fo:inline> identifies the timer, and
          was returned by the BIF that created the timer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Options</fo:inline>:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{async, Async}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asynchronous request for state information. <fo:inline font-family="monospace">Async</fo:inline>
              defaults to <fo:inline font-family="monospace">false</fo:inline>, which causes the operation
              to be performed synchronously. In this case, the <fo:inline font-family="monospace">Result</fo:inline>
              is returned by <fo:inline font-family="monospace">erlang:read_timer</fo:inline>. When
              <fo:inline font-family="monospace">Async</fo:inline> is <fo:inline font-family="monospace">true</fo:inline>, <fo:inline font-family="monospace">erlang:read_timer</fo:inline>
              sends an asynchronous request for the state information
              to the timer service that manages the timer, and then returns
              <fo:inline font-family="monospace">ok</fo:inline>. A message on the format <fo:inline font-family="monospace">{read_timer,
              TimerRef, Result}</fo:inline> is
              sent to the caller of <fo:inline font-family="monospace">erlang:read_timer</fo:inline> when the
              operation has been processed.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">More <fo:inline font-family="monospace">Option</fo:inline>s can be added in the future.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Result</fo:inline> is an integer, it represents the
          time in milliseconds left until the timer expires.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Result</fo:inline> is <fo:inline font-family="monospace">false</fo:inline>, a
          timer corresponding to <fo:inline font-family="monospace">TimerRef</fo:inline> could not
          be found. This because the timer had expired,
          or been canceled, or because <fo:inline font-family="monospace">TimerRef</fo:inline>
          never has corresponded to a timer. Even if the timer has expired,
          it does not tell you whether or not the time-out message has
          arrived at its destination yet.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The timer service that manages the timer can be co-located
            with another scheduler than the scheduler that the calling
            process is executing on. If so, communication
            with the timer service takes much longer time than if it
            is located locally. If the calling process is in a critical
            path, and can do other things while waiting for the result
            of this operation, you want to use option <fo:inline font-family="monospace">{async, true}</fo:inline>.
            If using option <fo:inline font-family="monospace">{async, false}</fo:inline>, the calling
            process is blocked until the operation has been performed.</fo:block>
         </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also 
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:send_after/4</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:start_timer/4</fo:inline></fo:inline>, and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:cancel_timer/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14819280"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ref_to_list(Ref) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Ref = reference()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a string corresponding to the text
          representation of <fo:inline font-family="monospace">Ref</fo:inline>.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is intended for debugging and is not to be used
            in application programs.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14823520"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">register(RegName, PidOrPort) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">RegName = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">PidOrPort = port() | pid()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Associates the name <fo:inline font-family="monospace">RegName</fo:inline> with a process
          identifier (pid) or a port identifier.
          <fo:inline font-family="monospace">RegName</fo:inline>, which must be an atom, can be used
          instead of the pid or port identifier in send operator
          (<fo:inline font-family="monospace">RegName ! Message</fo:inline>). Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">register(db, Pid).</fo:inline>
true</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em">If <fo:inline font-family="monospace">PidOrPort</fo:inline> is not an existing local
              process or port.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em">If <fo:inline font-family="monospace">RegName</fo:inline> is already in use.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em">If the process or port is already registered
              (already has a name).</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em">If <fo:inline font-family="monospace">RegName</fo:inline> is the atom
              <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14836400"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">registered() -&gt; [RegName]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">RegName = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of names that have been registered using
          <fo:inline font-style="italic"><fo:inline font-family="monospace">register/2</fo:inline></fo:inline>, for
          example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">registered().</fo:inline>
[code_server, file_server, init, user, my_db]</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14840864"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:resume_process(Suspendee) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Suspendee = pid()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decreases the suspend count on the process identified by
          <fo:inline font-family="monospace">Suspendee</fo:inline>. <fo:inline font-family="monospace">Suspendee</fo:inline>
          is previously to have been suspended through
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:suspend_process/2</fo:inline></fo:inline> or
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:suspend_process/1</fo:inline></fo:inline>
          by the process calling
          <fo:inline font-family="monospace">erlang:resume_process(Suspendee)</fo:inline>. When the
          suspend count on <fo:inline font-family="monospace">Suspendee</fo:inline> reaches zero,
          <fo:inline font-family="monospace">Suspendee</fo:inline> is resumed, that is, its state
          is changed from suspended into the state it had before it was
          suspended.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is intended for debugging only.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If <fo:inline font-family="monospace">Suspendee</fo:inline> is not a process identifier.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If the process calling <fo:inline font-family="monospace">erlang:resume_process/1</fo:inline> had
            not previously increased the suspend count on the process
            identified by <fo:inline font-family="monospace">Suspendee</fo:inline>.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If the process identified by <fo:inline font-family="monospace">Suspendee</fo:inline>
            is not alive.
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14856272"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">round(Number) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Number = number()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer by rounding <fo:inline font-family="monospace">Number</fo:inline>,
          for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
<fo:inline font-weight="bold">round(5.5).</fo:inline>
6</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14860864"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">self() -&gt; pid()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier of the calling process, for
          example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">self().</fo:inline>
&lt;0.26.0&gt;</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14864912"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:send(Dest, Msg) -&gt; Msg</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dest = <fo:inline font-style="italic">dst()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Msg = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dst() = <fo:block/>    pid() |<fo:block/>    port() |<fo:block/>    (RegName :: atom()) |<fo:block/>    {RegName :: atom(), Node :: node()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a message and returns <fo:inline font-family="monospace">Msg</fo:inline>. This
          is the same as <fo:inline font-family="monospace">Dest ! Msg</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dest</fo:inline> can be a remote or local process identifier,
          a (local) port, a locally registered name, or a tuple
          <fo:inline font-family="monospace">{RegName, Node}</fo:inline>
          for a registered name at another node.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14872080"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:send(Dest, Msg, Options) -&gt; Res</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dest = <fo:inline font-style="italic">dst()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Msg = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [nosuspend | noconnect]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Res = ok | nosuspend | noconnect</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dst() = <fo:block/>    pid() |<fo:block/>    port() |<fo:block/>    (RegName :: atom()) |<fo:block/>    {RegName :: atom(), Node :: node()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Either sends a message and returns <fo:inline font-family="monospace">ok</fo:inline>, or does not send
          the message but returns something else (see below).
          Otherwise the same as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:send/2</fo:inline></fo:inline>.
          For more detailed explanation and warnings, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:send_nosuspend/2,3</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nosuspend</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If the sender would have to be suspended to do the send,
            <fo:inline font-family="monospace">nosuspend</fo:inline> is returned instead.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">noconnect</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If the destination node would have to be auto-connected
             to do the send, <fo:inline font-family="monospace">noconnect</fo:inline> is returned
             instead.
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As with <fo:inline font-family="monospace">erlang:send_nosuspend/2,3</fo:inline>: use with extreme
            care.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14883168"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:send_after(Time, Dest, Msg) -&gt; TimerRef</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Time = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dest = pid() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Msg = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TimerRef = reference()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts a timer. The same as calling
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:send_after(Time, Dest,
          Msg, [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14888176"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:send_after(Time, Dest, Msg, Options) -&gt; TimerRef</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Time = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dest = pid() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Msg = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [Option]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Abs = boolean()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = {abs, Abs}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TimerRef = reference()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts a timer. When the timer expires, the message
          <fo:inline font-family="monospace">Msg</fo:inline> is sent to the process
          identified by <fo:inline font-family="monospace">Dest</fo:inline>. Apart from
          the format of the time-out message, this function works exactly as
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:start_timer/4</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14893120"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:send_nosuspend(Dest, Msg) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dest = <fo:inline font-style="italic">dst()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Msg = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dst() = <fo:block/>    pid() |<fo:block/>    port() |<fo:block/>    (RegName :: atom()) |<fo:block/>    {RegName :: atom(), Node :: node()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:send(Dest,
          Msg, [nosuspend])</fo:inline></fo:inline>,
          but returns <fo:inline font-family="monospace">true</fo:inline> if
          the message was sent and <fo:inline font-family="monospace">false</fo:inline> if the message was not
          sent because the sender would have had to be suspended.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is intended for send operations to an
          unreliable remote node without ever blocking the sending
          (Erlang) process. If the connection to the remote node
          (usually not a real Erlang node, but a node written in C or
          Java) is overloaded, this function <fo:inline font-weight="bold">does not send the message</fo:inline>
          and returns <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same occurs if <fo:inline font-family="monospace">Dest</fo:inline> refers to a local port
          that is busy. For all other destinations (allowed for the ordinary
          send operator <fo:inline font-family="monospace">'!'</fo:inline>), this function sends the message and
          returns <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is only to be used in rare circumstances
          where a process communicates with Erlang nodes that can
          disappear without any trace, causing the TCP buffers and
          the drivers queue to be over-full before the node is
          shut down (because of tick time-outs) by <fo:inline font-family="monospace">net_kernel</fo:inline>.
          The normal reaction to take when this occurs is some kind of
          premature shutdown of the other node.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that ignoring the return value from this function would
          result in an <fo:inline font-weight="bold">unreliable</fo:inline> message passing, which is
          contradictory to the Erlang programming model. The message is
          <fo:inline font-weight="bold">not</fo:inline> sent if this function returns <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In many systems, transient states of
          overloaded queues are normal. Although this function
          returns <fo:inline font-family="monospace">false</fo:inline> does not mean that the other
          node is guaranteed to be non-responsive, it could be a
          temporary overload. Also, a return value of <fo:inline font-family="monospace">true</fo:inline> does
          only mean that the message can be sent on the (TCP) channel
          without blocking; the message is not guaranteed to
          arrive at the remote node. For a disconnected
          non-responsive node, the return value is <fo:inline font-family="monospace">true</fo:inline> (mimics
          the behavior of operator <fo:inline font-family="monospace">!</fo:inline>). The expected
          behavior and the actions to take when the function
          returns <fo:inline font-family="monospace">false</fo:inline> are application- and hardware-specific.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use with extreme care.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14910256"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:send_nosuspend(Dest, Msg, Options) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dest = <fo:inline font-style="italic">dst()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Msg = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [noconnect]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dst() = <fo:block/>    pid() |<fo:block/>    port() |<fo:block/>    (RegName :: atom()) |<fo:block/>    {RegName :: atom(), Node :: node()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:send(Dest,
          Msg, [nosuspend | Options])</fo:inline></fo:inline>,
          but with a Boolean return value.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function behaves like
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:send_nosuspend/2</fo:inline></fo:inline>,
          but takes a third parameter, a list of options.
          The only option is <fo:inline font-family="monospace">noconnect</fo:inline>, which
          makes the function return <fo:inline font-family="monospace">false</fo:inline> if
          the remote node is not currently reachable by the local
          node. The normal behavior is to try to connect to the node,
          which can stall the process during a short period. The use of
          option <fo:inline font-family="monospace">noconnect</fo:inline> makes it possible to be
          sure not to get the slightest delay when
          sending to a remote process. This is especially useful when
          communicating with nodes that expect to always be
          the connecting part (that is, nodes written in C or Java).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Whenever the function returns <fo:inline font-family="monospace">false</fo:inline> (either when a
          suspend would occur or when <fo:inline font-family="monospace">noconnect</fo:inline> was specified and
          the node was not already connected), the message is guaranteed
          <fo:inline font-weight="bold">not</fo:inline> to have been sent.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use with extreme care.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14921904"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:set_cookie(Node, Cookie) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Cookie = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the magic cookie of <fo:inline font-family="monospace">Node</fo:inline> to the atom
          <fo:inline font-family="monospace">Cookie</fo:inline>. If <fo:inline font-family="monospace">Node</fo:inline> is the
          local node, the function
          also sets the cookie of all other unknown nodes to
          <fo:inline font-family="monospace">Cookie</fo:inline> (see section
          <fo:inline font-style="italic">
          Distributed Erlang</fo:inline>
          in the Erlang Reference Manual in System Documentation).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">function_clause</fo:inline> if the local node is not
          alive.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14928704"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">setelement(Index, Tuple1, Value) -&gt; Tuple2</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Index = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>1..tuple_size(Tuple1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Tuple1 = Tuple2 = tuple()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Value = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a tuple that is a copy of argument
          <fo:inline font-family="monospace">Tuple1</fo:inline>
          with the element specified by integer argument
          <fo:inline font-family="monospace">Index</fo:inline>
          (the first element is the element with index 1) replaced by
          argument <fo:inline font-family="monospace">Value</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">setelement(2, {10, green, bottles}, red).</fo:inline>
{10,red,bottles}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14935168"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">size(Item) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Item = tuple() | binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of elements in a tuple or the number of
          bytes in a binary or bitstring, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">size({morni, mulle, bwange}).</fo:inline>
3
&gt; <fo:inline font-weight="bold">size(&lt;&lt;11, 22, 33&gt;&gt;).</fo:inline>
3</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For bitstrings, the number of whole bytes is returned.
          That is, if the number of bits
          in the bitstring is not divisible by 8, the resulting
          number of bytes is rounded <fo:inline font-weight="bold">down</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">tuple_size/1</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">byte_size/1</fo:inline></fo:inline>, and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">bit_size/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14943776"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn(Fun) -&gt; pid()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Fun = function()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier of a new process started by the
          application of <fo:inline font-family="monospace">Fun</fo:inline> to the empty list
          <fo:inline font-family="monospace">[]</fo:inline>. Otherwise
          works like <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14948416"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn(Node, Fun) -&gt; pid()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Fun = function()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier of a new process started
          by the application of <fo:inline font-family="monospace">Fun</fo:inline> to the
          empty list <fo:inline font-family="monospace">[]</fo:inline> on <fo:inline font-family="monospace">Node</fo:inline>. If
          <fo:inline font-family="monospace">Node</fo:inline> does not exist, a useless pid is
          returned. Otherwise works like
          <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14954288"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn(Module, Function, Args) -&gt; pid()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier of a new process started by
          the application of <fo:inline font-family="monospace">Module:Function</fo:inline>
          to <fo:inline font-family="monospace">Args</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">error_handler:undefined_function(Module,
          Function, Args)</fo:inline>
          is evaluated by the new process if
          <fo:inline font-family="monospace">Module:Function/Arity</fo:inline>
          does not exist (where <fo:inline font-family="monospace">Arity</fo:inline> is the length of
          <fo:inline font-family="monospace">Args</fo:inline>). The error handler
          can be redefined (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">process_flag/2</fo:inline></fo:inline>).
          If <fo:inline font-family="monospace">error_handler</fo:inline> is undefined, or the user has
          redefined the default <fo:inline font-family="monospace">error_handler</fo:inline> and its replacement is
          undefined, a failure with reason <fo:inline font-family="monospace">undef</fo:inline> occurs.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">spawn(speed, regulator, [high_speed, thin_cut]).</fo:inline>
&lt;0.13.1&gt;</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14966720"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn(Node, Module, Function, Args) -&gt; pid()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier (pid) of a new process started
          by the application
          of <fo:inline font-family="monospace">Module:Function</fo:inline>
          to <fo:inline font-family="monospace">Args</fo:inline> on <fo:inline font-family="monospace">Node</fo:inline>. If
          <fo:inline font-family="monospace">Node</fo:inline> does not exist, a useless pid is returned.
          Otherwise works like
          <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14973168"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn_link(Fun) -&gt; pid()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Fun = function()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier of a new process started by
          the application of <fo:inline font-family="monospace">Fun</fo:inline> to the empty list
          <fo:inline font-family="monospace">[]</fo:inline>. A link is created between
          the calling process and the new process, atomically.
          Otherwise works like
          <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14977920"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn_link(Node, Fun) -&gt; pid()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Fun = function()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier (pid) of a new process started
          by the application of <fo:inline font-family="monospace">Fun</fo:inline> to the empty
          list <fo:inline font-family="monospace">[]</fo:inline> on <fo:inline font-family="monospace">Node</fo:inline>. A link is
          created between the calling process and the new process,
          atomically. If <fo:inline font-family="monospace">Node</fo:inline> does not exist,
          a useless pid is returned and an exit signal with
          reason <fo:inline font-family="monospace">noconnection</fo:inline> is sent to the calling
          process. Otherwise works like <fo:inline font-style="italic">
          <fo:inline font-family="monospace">spawn/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14984560"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn_link(Module, Function, Args) -&gt; pid()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier of a new process started by
          the application of <fo:inline font-family="monospace">Module:Function</fo:inline>
          to <fo:inline font-family="monospace">Args</fo:inline>. A link is created
          between the calling process and the new process, atomically.
          Otherwise works like
          <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14989872"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn_link(Node, Module, Function, Args) -&gt; pid()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier (pid) of a new process
          started by the application
          of <fo:inline font-family="monospace">Module:Function</fo:inline>
          to <fo:inline font-family="monospace">Args</fo:inline> on <fo:inline font-family="monospace">Node</fo:inline>. A
          link is created between the calling process and the new
          process, atomically. If <fo:inline font-family="monospace">Node</fo:inline> does
          not exist, a useless pid is returned and an exit signal with
          reason <fo:inline font-family="monospace">noconnection</fo:inline> is sent to the calling
          process. Otherwise works like <fo:inline font-style="italic">
          <fo:inline font-family="monospace">spawn/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp14997104"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn_monitor(Fun) -&gt; {pid(), reference()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Fun = function()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier of a new process, started by
          the application of <fo:inline font-family="monospace">Fun</fo:inline> to the empty list
          <fo:inline font-family="monospace">[]</fo:inline>,
          and a reference for a monitor created to the new process.
          Otherwise works like
          <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15001840"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn_monitor(Module, Function, Args) -&gt; {pid(), reference()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A new process is started by the application
          of <fo:inline font-family="monospace">Module:Function</fo:inline>
          to <fo:inline font-family="monospace">Args</fo:inline>. The process is
          monitored at the same time. Returns the process identifier
          and a reference for the monitor. Otherwise works like
          <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15007152"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn_opt(Fun, Options) -&gt; pid() | {pid(), reference()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Fun = function()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">spawn_opt_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">priority_level() = low | normal | high | max</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">max_heap_size() = <fo:block/>    integer() &gt;= 0 |<fo:block/>    #{size =&gt; integer() &gt;= 0,<fo:block/>      kill =&gt; boolean(),<fo:block/>      error_logger =&gt; boolean()}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">message_queue_data() = off_heap | on_heap</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn_opt_option() = <fo:block/>    link |<fo:block/>    monitor |<fo:block/>    {priority, Level :: <fo:inline font-style="italic">priority_level()</fo:inline>} |<fo:block/>    {fullsweep_after, Number :: integer() &gt;= 0} |<fo:block/>    {min_heap_size, Size :: integer() &gt;= 0} |<fo:block/>    {min_bin_vheap_size, VSize :: integer() &gt;= 0} |<fo:block/>    {max_heap_size, Size :: <fo:inline font-style="italic">max_heap_size()</fo:inline>} |<fo:block/>    {message_queue_data, MQD :: <fo:inline font-style="italic">message_queue_data()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier (pid) of a new process
          started by the application of <fo:inline font-family="monospace">Fun</fo:inline>
          to the empty list <fo:inline font-family="monospace">[]</fo:inline>. Otherwise works like
          <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn_opt/4</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If option <fo:inline font-family="monospace">monitor</fo:inline> is specified, the newly created
          process is monitored, and both the pid and reference for
          the monitor are returned.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15015040"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn_opt(Node, Fun, Options) -&gt; pid() | {pid(), reference()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Fun = function()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">spawn_opt_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">priority_level() = low | normal | high | max</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">max_heap_size() = <fo:block/>    integer() &gt;= 0 |<fo:block/>    #{size =&gt; integer() &gt;= 0,<fo:block/>      kill =&gt; boolean(),<fo:block/>      error_logger =&gt; boolean()}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">message_queue_data() = off_heap | on_heap</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn_opt_option() = <fo:block/>    link |<fo:block/>    monitor |<fo:block/>    {priority, Level :: <fo:inline font-style="italic">priority_level()</fo:inline>} |<fo:block/>    {fullsweep_after, Number :: integer() &gt;= 0} |<fo:block/>    {min_heap_size, Size :: integer() &gt;= 0} |<fo:block/>    {min_bin_vheap_size, VSize :: integer() &gt;= 0} |<fo:block/>    {max_heap_size, Size :: <fo:inline font-style="italic">max_heap_size()</fo:inline>} |<fo:block/>    {message_queue_data, MQD :: <fo:inline font-style="italic">message_queue_data()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier (pid) of a new process started
          by the application of <fo:inline font-family="monospace">Fun</fo:inline> to the
          empty list <fo:inline font-family="monospace">[]</fo:inline> on <fo:inline font-family="monospace">Node</fo:inline>. If
          <fo:inline font-family="monospace">Node</fo:inline> does not exist, a useless pid is
          returned. Otherwise works like
          <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn_opt/4</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15023152"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn_opt(Module, Function, Args, Options) -&gt;<fo:block/>             pid() | {pid(), reference()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">spawn_opt_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">priority_level() = low | normal | high | max</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">max_heap_size() = <fo:block/>    integer() &gt;= 0 |<fo:block/>    #{size =&gt; integer() &gt;= 0,<fo:block/>      kill =&gt; boolean(),<fo:block/>      error_logger =&gt; boolean()}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">message_queue_data() = off_heap | on_heap</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn_opt_option() = <fo:block/>    link |<fo:block/>    monitor |<fo:block/>    {priority, Level :: <fo:inline font-style="italic">priority_level()</fo:inline>} |<fo:block/>    {fullsweep_after, Number :: integer() &gt;= 0} |<fo:block/>    {min_heap_size, Size :: integer() &gt;= 0} |<fo:block/>    {min_bin_vheap_size, VSize :: integer() &gt;= 0} |<fo:block/>    {max_heap_size, Size :: <fo:inline font-style="italic">max_heap_size()</fo:inline>} |<fo:block/>    {message_queue_data, MQD :: <fo:inline font-style="italic">message_queue_data()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn/3</fo:inline></fo:inline>, except that an
          extra option list is specified when creating the process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If option <fo:inline font-family="monospace">monitor</fo:inline> is specified, the newly created
          process is monitored, and both the pid and reference for
          the monitor are returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">link</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a link to the parent process (like
              <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn_link/3</fo:inline></fo:inline>
              does).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">monitor</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Monitors the new process (like
              <fo:inline font-style="italic"><fo:inline font-family="monospace">monitor/2</fo:inline></fo:inline> does).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{priority, Level</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the priority of the new process. Equivalent to
              executing <fo:inline font-style="italic">
              <fo:inline font-family="monospace">process_flag(priority, Level)</fo:inline></fo:inline>
              in the start function of the new process,
              except that the priority is set before the process is
              selected for execution for the first time. For more
              information on priorities, see
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">process_flag(priority, Level)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fullsweep_after, Number}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Useful only for performance tuning. Do not use this
              option unless you
              know that there is problem with execution times or
              memory consumption, and ensure
              that the option improves matters.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang runtime system uses a generational garbage
              collection scheme, using an "old heap" for data that has
              survived at least one garbage collection. When there is
              no more room on the old heap, a fullsweep garbage
              collection is done.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">fullsweep_after</fo:inline> makes it possible to
              specify the maximum number of generational collections
              before forcing a fullsweep, even if there is room on
              the old heap. Setting the number to zero
              disables the general collection algorithm, that is,
              all live data is copied at every garbage collection.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A few cases when it can be useful to change
              <fo:inline font-family="monospace">fullsweep_after</fo:inline>:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If binaries that are no longer used are to be
                thrown away as soon as possible. (Set
                <fo:inline font-family="monospace">Number</fo:inline> to zero.)</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process that mostly have short-lived data is
                fullsweeped seldom or never, that is, the old heap
                contains mostly garbage. To ensure a fullsweep
                occasionally, set <fo:inline font-family="monospace">Number</fo:inline> to a
                suitable value, such as 10 or 20.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>In embedded systems with a limited amount of RAM
              and no virtual memory, you might want to preserve memory
              by setting <fo:inline font-family="monospace">Number</fo:inline> to zero.
              (The value can be set globally, see
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag/2</fo:inline></fo:inline>.)
              </fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{min_heap_size, Size}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Useful only for performance tuning. Do not use this
              option unless you know that there is problem with
              execution times or memory consumption, and
              ensure that the option improves matters.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gives a minimum heap size, in words. Setting this value
              higher than the system default can speed up some
              processes because less garbage collection is done.
              However, setting a too high value can waste memory and
              slow down the system because of worse data locality.
              Therefore, use this option only for
              fine-tuning an application and to measure the execution
              time with various <fo:inline font-family="monospace">Size</fo:inline> values.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{min_bin_vheap_size, VSize}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Useful only for performance tuning. Do not use this
              option unless you know that there is problem with
              execution times or memory consumption, and
              ensure that the option improves matters.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gives a minimum binary virtual heap size, in words.
              Setting this value
              higher than the system default can speed up some
              processes because less garbage collection is done.
              However, setting a too high value can waste memory.
              Therefore, use this option only for
              fine-tuning an application and to measure the execution
              time with various <fo:inline font-family="monospace">VSize</fo:inline> values.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{max_heap_size, Size}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the <fo:inline font-family="monospace">max_heap_size</fo:inline> process flag. The default
              <fo:inline font-family="monospace">max_heap_size</fo:inline> is determined by command-line argument
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+hmax</fo:inline></fo:inline>
              in <fo:inline font-family="monospace">erl(1)</fo:inline>. For more information, see the
              documentation of <fo:inline font-style="italic">
              <fo:inline font-family="monospace">process_flag(max_heap_size, Size)</fo:inline></fo:inline>.
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{message_queue_data, MQD}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the state of the <fo:inline font-family="monospace">message_queue_data</fo:inline> process
              flag. <fo:inline font-family="monospace">MQD</fo:inline> is to be either <fo:inline font-family="monospace">off_heap</fo:inline>
              or <fo:inline font-family="monospace">on_heap</fo:inline>. The default
              <fo:inline font-family="monospace">message_queue_data</fo:inline> process flag is determined by
              command-line argument <fo:inline font-style="italic">
              <fo:inline font-family="monospace">+hmqd</fo:inline></fo:inline> in <fo:inline font-family="monospace">erl(1)</fo:inline>.
              For more information, see the documentation of
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">process_flag(message_queue_data,
              MQD)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15071760"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn_opt(Node, Module, Function, Args, Options) -&gt;<fo:block/>             pid() | {pid(), reference()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">spawn_opt_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">priority_level() = low | normal | high | max</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">max_heap_size() = <fo:block/>    integer() &gt;= 0 |<fo:block/>    #{size =&gt; integer() &gt;= 0,<fo:block/>      kill =&gt; boolean(),<fo:block/>      error_logger =&gt; boolean()}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">message_queue_data() = off_heap | on_heap</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">spawn_opt_option() = <fo:block/>    link |<fo:block/>    monitor |<fo:block/>    {priority, Level :: <fo:inline font-style="italic">priority_level()</fo:inline>} |<fo:block/>    {fullsweep_after, Number :: integer() &gt;= 0} |<fo:block/>    {min_heap_size, Size :: integer() &gt;= 0} |<fo:block/>    {min_bin_vheap_size, VSize :: integer() &gt;= 0} |<fo:block/>    {max_heap_size, Size :: <fo:inline font-style="italic">max_heap_size()</fo:inline>} |<fo:block/>    {message_queue_data, MQD :: <fo:inline font-style="italic">message_queue_data()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier (pid) of a new process started
          by the application
          of <fo:inline font-family="monospace">Module:Function</fo:inline> to
          <fo:inline font-family="monospace">Args</fo:inline> on <fo:inline font-family="monospace">Node</fo:inline>. If
          <fo:inline font-family="monospace">Node</fo:inline> does not exist, a useless pid is returned.
          Otherwise works like
          <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn_opt/4</fo:inline></fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">monitor</fo:inline> is not supported by
            <fo:inline font-family="monospace">spawn_opt/5</fo:inline>.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15082256"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">split_binary(Bin, Pos) -&gt; {binary(), binary()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bin = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pos = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>0..byte_size(Bin)</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a tuple containing the binaries that are the result
          of splitting <fo:inline font-family="monospace">Bin</fo:inline> into two parts at
          position <fo:inline font-family="monospace">Pos</fo:inline>.
          This is not a destructive operation. After the operation,
          there are three binaries altogether. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">B = list_to_binary("0123456789").</fo:inline>
&lt;&lt;"0123456789"&gt;&gt;
&gt; <fo:inline font-weight="bold">byte_size(B).</fo:inline>
10
&gt; <fo:inline font-weight="bold">{B1, B2} = split_binary(B,3).</fo:inline>
{&lt;&lt;"012"&gt;&gt;,&lt;&lt;"3456789"&gt;&gt;}
&gt; <fo:inline font-weight="bold">byte_size(B1).</fo:inline>
3
&gt; <fo:inline font-weight="bold">byte_size(B2).</fo:inline>
7</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15089696"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:start_timer(Time, Dest, Msg) -&gt; TimerRef</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Time = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dest = pid() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Msg = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TimerRef = reference()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts a timer. The same as calling
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:start_timer(Time,
          Dest, Msg, [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15094704"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:start_timer(Time, Dest, Msg, Options) -&gt; TimerRef</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Time = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dest = pid() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Msg = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [Option]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Abs = boolean()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = {abs, Abs}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TimerRef = reference()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts a timer. When the timer expires, the message
          <fo:inline font-family="monospace">{timeout, TimerRef, Msg}</fo:inline>
          is sent to the process identified by <fo:inline font-family="monospace">Dest</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Option</fo:inline>s:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{abs, false}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the default. It means the
              <fo:inline font-family="monospace">Time</fo:inline> value is interpreted
              as a time in milliseconds <fo:inline font-weight="bold">relative</fo:inline> current
              <fo:inline font-style="italic">Erlang
              monotonic time</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{abs, true}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Absolute <fo:inline font-family="monospace">Time</fo:inline> value. The
              <fo:inline font-family="monospace">Time</fo:inline> value is interpreted as an
              absolute Erlang monotonic time in milliseconds.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">More <fo:inline font-family="monospace">Option</fo:inline>s can be added in the future.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The absolute point in time, the timer is set to expire on,
          must be in the interval
          <fo:inline font-family="monospace">[</fo:inline><fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_info(start_time)</fo:inline></fo:inline><fo:inline font-family="monospace">,
          </fo:inline><fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_info(end_time)</fo:inline></fo:inline><fo:inline font-family="monospace">]</fo:inline>.
          If a relative time is specified, the <fo:inline font-family="monospace">Time</fo:inline>
          value is not allowed to be negative.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Dest</fo:inline> is a <fo:inline font-family="monospace">pid()</fo:inline>, it must
          be a <fo:inline font-family="monospace">pid()</fo:inline> of a process created on the current
          runtime system instance. This process has either terminated
          or not. If <fo:inline font-family="monospace">Dest</fo:inline> is an
          <fo:inline font-family="monospace">atom()</fo:inline>, it is interpreted as the name of a
          locally registered process. The process referred to by the
          name is looked up at the time of timer expiration. No error
          is returned if the name does not refer to a process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Dest</fo:inline> is a <fo:inline font-family="monospace">pid()</fo:inline>, the timer is
          automatically canceled if the process referred to by the
          <fo:inline font-family="monospace">pid()</fo:inline> is not alive, or if the process exits. This
          feature was introduced in ERTS 5.4.11. Notice that
          timers are not automatically canceled when
          <fo:inline font-family="monospace">Dest</fo:inline> is an <fo:inline font-family="monospace">atom()</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:send_after/4</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:cancel_timer/2</fo:inline></fo:inline>, and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:read_timer/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if the arguments do not satisfy
          the requirements specified here.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15122400"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: active_tasks) -&gt; [ActiveTasks]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ActiveTasks = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the same as
	<fo:inline font-style="italic">
        <fo:inline font-family="monospace">statistics(active_tasks_all)</fo:inline></fo:inline>
	with the exception that no information about the dirty
	IO run queue and its associated schedulers is part of
	the result. That is, only tasks that are expected to be
	CPU bound are part of the result.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15127120"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: active_tasks_all) -&gt; [ActiveTasks]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ActiveTasks = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list where each element represents the amount
          of active processes and ports on each run queue and its
          associated schedulers. That is, the number of processes and
          ports that are ready to run, or are currently running.
	  Values for normal run queues and their associated schedulers
	  are located first in the resulting list. The first element
	  corresponds to scheduler number 1 and so on. If support for
	  dirty schedulers exist, an element with the value for the
	  dirty CPU run queue and its associated dirty CPU schedulers
	  follow and then as last element the value for the the dirty
	  IO run queue and its associated dirty IO schedulers follow.
	  The information is <fo:inline font-weight="bold">not</fo:inline> gathered atomically. That is,
	  the result is not necessarily a consistent snapshot of the
	  state, but instead quite efficiently gathered.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each normal scheduler has one run queue that it
	manages. If dirty schedulers schedulers are supported, all
	dirty CPU schedulers share one run queue, and all dirty IO
	schedulers share one run queue. That is, we have multiple
	normal run queues, one dirty CPU run queue and one dirty
	IO run queue. Work can <fo:inline font-weight="bold">not</fo:inline> migrate between the
	different types of run queues. Only work in normal run
	queues can migrate to other normal run queues. This has
	to be taken into account when evaluating the result.</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(total_active_tasks)</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(run_queue_lengths)</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(run_queue_lengths_all)</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(total_run_queue_lengths)</fo:inline></fo:inline>, and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(total_run_queue_lengths_all)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15139040"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: context_switches) -&gt; {ContextSwitches, 0}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ContextSwitches = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the total number of context switches since the
          system started.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15142016"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: exact_reductions) -&gt;<fo:block/>              {Total_Exact_Reductions,<fo:block/>               Exact_Reductions_Since_Last_Call}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Total_Exact_Reductions = Exact_Reductions_Since_Last_Call = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of exact reductions.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">statistics(exact_reductions)</fo:inline> is
            a more expensive operation than
            <fo:inline font-style="italic">
            statistics(reductions)</fo:inline>,
            especially on an Erlang machine with SMP support.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15147552"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: garbage_collection) -&gt;<fo:block/>              {Number_of_GCs, Words_Reclaimed, 0}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Number_of_GCs = Words_Reclaimed = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns information about garbage collection, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">statistics(garbage_collection).</fo:inline>
{85,23961,0}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This information can be invalid for some implementations.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15151920"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: io) -&gt; {{input, Input}, {output, Output}}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Input = Output = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">Input</fo:inline>,
          which is the total number of bytes
          received through ports, and <fo:inline font-family="monospace">Output</fo:inline>,
          which is the total number of bytes output to ports.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15156080"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: microstate_accounting) -&gt;<fo:block/>              [MSAcc_Thread] | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MSAcc_Thread = <fo:block/>    #{type := MSAcc_Thread_Type,<fo:block/>      id := MSAcc_Thread_Id,<fo:block/>      counters := MSAcc_Counters}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MSAcc_Thread_Type = scheduler | async | aux</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MSAcc_Thread_Id = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MSAcc_Counters = #{MSAcc_Thread_State =&gt; integer() &gt;= 0}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MSAcc_Thread_State = <fo:block/>    alloc |<fo:block/>    aux |<fo:block/>    bif |<fo:block/>    busy_wait |<fo:block/>    check_io |<fo:block/>    emulator |<fo:block/>    ets |<fo:block/>    gc |<fo:block/>    gc_fullsweep |<fo:block/>    nif |<fo:block/>    other |<fo:block/>    port |<fo:block/>    send |<fo:block/>    sleep |<fo:block/>    timers</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Microstate accounting can be used to measure how much time the Erlang
          runtime system spends doing various tasks. It is designed to be as
          lightweight as possible, but some overhead exists when this
          is enabled. Microstate accounting is meant to be a profiling tool
          to help finding performance bottlenecks.
          To <fo:inline font-family="monospace">start</fo:inline>/<fo:inline font-family="monospace">stop</fo:inline>/<fo:inline font-family="monospace">reset</fo:inline> microstate accounting, use
          system flag <fo:inline font-style="italic">
          <fo:inline font-family="monospace">microstate_accounting</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">statistics(microstate_accounting)</fo:inline> returns a list of maps
          representing some of the OS threads within ERTS. Each map
          contains <fo:inline font-family="monospace">type</fo:inline> and <fo:inline font-family="monospace">id</fo:inline> fields that can be used to
          identify what
          thread it is, and also a counters field that contains data about how
          much time has been spent in the various states.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:statistics(microstate_accounting).</fo:inline>
[#{counters =&gt; #{aux =&gt; 1899182914,
                 check_io =&gt; 2605863602,
                 emulator =&gt; 45731880463,
                 gc =&gt; 1512206910,
                 other =&gt; 5421338456,
                 port =&gt; 221631,
                 sleep =&gt; 5150294100},
   id =&gt; 1,
   type =&gt; scheduler}|...]</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time unit is the same as returned by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">os:perf_counter/0</fo:inline></fo:inline>.
          So, to convert it to milliseconds, you can do something like this:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
lists:map(
  fun(#{ counters := Cnt } = M) -&gt;
          MsCnt = maps:map(fun(_K, PerfCount) -&gt;
                                   erlang:convert_time_unit(PerfCount, perf_counter, 1000)
                           end, Cnt),
         M#{ counters := MsCnt }
  end, erlang:statistics(microstate_accounting)).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that these values are not guaranteed to be
          the exact time spent in each state. This is because of various
          optimisation done to keep the overhead as small as possible.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">MSAcc_Thread_Type</fo:inline>s:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">scheduler</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The main execution threads that do most of the work.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dirty_cpu_scheduler</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The threads for long running cpu intensive work.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dirty_io_scheduler</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The threads for long running I/O work.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">async</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Async threads are used by various linked-in drivers (mainly the
            file drivers) do offload non-CPU intensive work.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">aux</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Takes care of any work that is not
            specifically assigned to a scheduler.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following <fo:inline font-family="monospace">MSAcc_Thread_State</fo:inline>s are available.
          All states are exclusive, meaning that a thread cannot be in two
          states at once. So, if you add the numbers of all counters in a
          thread, you get the total runtime for that thread.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">aux</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time spent handling auxiliary jobs.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">check_io</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time spent checking for new I/O events.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">emulator</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time spent executing Erlang processes.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">gc</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time spent doing garbage collection. When extra states are
            enabled this is the time spent doing non-fullsweep garbage
            collections.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">other</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time spent doing unaccounted things.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">port</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time spent executing ports.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sleep</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time spent sleeping.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">More fine-grained <fo:inline font-family="monospace">MSAcc_Thread_State</fo:inline>s can
          be added through configure (such as
          <fo:inline font-family="monospace">./configure --with-microstate-accounting=extra</fo:inline>).
          Enabling these states causes performance degradation when
          microstate accounting is turned off and increases the overhead when
          it is turned on.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">alloc</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time spent managing memory. Without extra states this time is
            spread out over all other states.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">bif</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time spent in BIFs. Without extra states this time is part of
            the <fo:inline font-family="monospace">emulator</fo:inline> state.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">busy_wait</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time spent busy waiting. This is also the state where a
            scheduler no longer reports that it is active when using
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">statistics(scheduler_wall_time)</fo:inline></fo:inline>. So, if you add
            all other states but this and sleep, and then divide that by all
            time in the thread, you should get something very similar to the
            <fo:inline font-family="monospace">scheduler_wall_time</fo:inline> fraction. Without extra states this
            time is part of the <fo:inline font-family="monospace">other</fo:inline> state.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ets</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time spent executing ETS BIFs. Without extra states
            this time is part of the <fo:inline font-family="monospace">emulator</fo:inline> state.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">gc_full</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time spent doing fullsweep garbage collection. Without extra
            states this time is part of the <fo:inline font-family="monospace">gc</fo:inline> state.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nif</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time spent in NIFs. Without extra states this time is part of
            the <fo:inline font-family="monospace">emulator</fo:inline> state.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">send</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time spent sending messages (processes only). Without extra
            states this time is part of the <fo:inline font-family="monospace">emulator</fo:inline> state.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">timers</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time spent managing timers. Without extra states this time is
            part of the <fo:inline font-family="monospace">other</fo:inline> state.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The utility module
          <fo:inline font-style="italic"><fo:inline font-family="monospace">msacc(3)</fo:inline></fo:inline>
          can be used to more easily analyse these statistics.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">undefined</fo:inline> if system flag
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">microstate_accounting</fo:inline></fo:inline> is turned off.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The list of thread information is unsorted and can appear in
          different order between calls.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The threads and states are subject to change without any
            prior notice.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15205248"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: reductions) -&gt;<fo:block/>              {Total_Reductions, Reductions_Since_Last_Call}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Total_Reductions = Reductions_Since_Last_Call = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns information about reductions, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">statistics(reductions).</fo:inline>
{2046,11}</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from ERTS 5.5 (Erlang/OTP R11B),
          this value does not include reductions performed in current
          time slices of currently scheduled processes. If an
          exact value is wanted, use
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(exact_reductions)</fo:inline></fo:inline>.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15211616"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: run_queue) -&gt; integer() &gt;= 0</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the total length of all normal run-queues. That is, the number
          of processes and ports that are ready to run on all available
          normal run-queues. Dirty run queues are not part of the
	  result. The information is gathered atomically. That
          is, the result is a consistent snapshot of the state, but
          this operation is much more expensive compared to
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(total_run_queue_lengths)</fo:inline></fo:inline>,
          especially when a large amount of schedulers is used.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15216400"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: run_queue_lengths) -&gt; [RunQueueLength]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">RunQueueLength = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the same as
	<fo:inline font-style="italic">
        <fo:inline font-family="monospace">statistics(run_queue_lengths_all)</fo:inline></fo:inline>
	with the exception that no information about the dirty
	IO run queue is part of the result. That is, only
	run queues with work that is expected to be CPU bound
	is part of the result.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15220960"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: run_queue_lengths_all) -&gt; [RunQueueLength]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">RunQueueLength = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list where each element represents the amount
          of processes and ports ready to run for each run queue.
	  Values for normal run queues are located first in the
	  resulting list. The first element corresponds to the
	  normal run queue of scheduler number 1 and so on. If
	  support for dirty schedulers exist, values for the dirty
	  CPU run queue and the dirty IO run queue follow (in that
	  order) at the end. The information is <fo:inline font-weight="bold">not</fo:inline>
	  gathered atomically. That is, the result is not
	  necessarily a consistent snapshot of the state, but
	  instead quite efficiently gathered.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each normal scheduler has one run queue that it
	manages. If dirty schedulers schedulers are supported, all
	dirty CPU schedulers share one run queue, and all dirty IO
	schedulers share one run queue. That is, we have multiple
	normal run queues, one dirty CPU run queue and one dirty
	IO run queue. Work can <fo:inline font-weight="bold">not</fo:inline> migrate between the
	different types of run queues. Only work in normal run
	queues can migrate to other normal run queues. This has
	to be taken into account when evaluating the result.</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(run_queue_lengths)</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(total_run_queue_lengths_all)</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(total_run_queue_lengths)</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(active_tasks)</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(active_tasks_all)</fo:inline></fo:inline>, and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(total_active_tasks)</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(total_active_tasks_all)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15234528"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: runtime) -&gt;<fo:block/>              {Total_Run_Time, Time_Since_Last_Call}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Total_Run_Time = Time_Since_Last_Call = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns information about runtime, in milliseconds.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the sum of the runtime for all threads
          in the Erlang runtime system and can therefore be greater
          than the wall clock time.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">statistics(runtime).</fo:inline>
{1690,1620}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15239392"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: scheduler_wall_time) -&gt;<fo:block/>              [{SchedulerId, ActiveTime, TotalTime}] | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">SchedulerId = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ActiveTime = TotalTime = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of tuples with
          <fo:inline font-family="monospace">{SchedulerId, ActiveTime,
          TotalTime}</fo:inline>, where
          <fo:inline font-family="monospace">SchedulerId</fo:inline> is an integer ID of the scheduler,
          <fo:inline font-family="monospace">ActiveTime</fo:inline> is
          the duration the scheduler has been busy, and
          <fo:inline font-family="monospace">TotalTime</fo:inline> is the total time duration since
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">scheduler_wall_time</fo:inline></fo:inline>
          activation for the specific scheduler. Note that
	  activation time can differ significantly between
	  schedulers. Currently dirty schedulers are activated
	  at system start while normal schedulers are activated
	  some time after the <fo:inline font-family="monospace">scheduler_wall_time</fo:inline>
	  functionality is enabled. The time unit is undefined
	  and can be subject to change between releases, OSs,
	  and system restarts. <fo:inline font-family="monospace">scheduler_wall_time</fo:inline> is only
	  to be used to calculate relative values for scheduler
	  utilization. <fo:inline font-family="monospace">ActiveTime</fo:inline> can never
	  exceed <fo:inline font-family="monospace">TotalTime</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The definition of a busy scheduler is when it is not idle
          and is not scheduling (selecting) a process or port,
          that is:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Executing process code</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Executing linked-in driver or NIF code</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Executing BIFs, or any other runtime handling</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Garbage collecting</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Handling any other memory management</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that a scheduler can also be busy even if the
          OS has scheduled out the scheduler thread.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">undefined</fo:inline> if system flag
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">scheduler_wall_time</fo:inline></fo:inline> is turned off.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The list of scheduler information is unsorted and can
          appear in different order between calls.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As of ERTS version 9.0, also dirty CPU schedulers will
	be included in the result. That is, all scheduler threads
	that are expected to handle CPU bound work. If you also
	want information about dirty I/O schedulers, use
	<fo:inline font-style="italic"><fo:inline font-family="monospace">statistics(scheduler_wall_time_all)</fo:inline></fo:inline>
	instead.</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normal schedulers will have scheduler identifiers in
	the range <fo:inline font-family="monospace">1 =&lt; SchedulerId =&lt;
	</fo:inline><fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:system_info(schedulers)</fo:inline></fo:inline>.
	Dirty CPU schedulers will have scheduler identifiers in
	the range <fo:inline font-family="monospace">erlang:system_info(schedulers) &lt;
	SchedulerId =&lt; erlang:system_info(schedulers)
	+
	</fo:inline><fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:system_info(dirty_cpu_schedulers)</fo:inline></fo:inline>.
	</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The different types of schedulers handle
	specific types of jobs. Every job is assigned to a specific
	scheduler type. Jobs can migrate between different schedulers
	of the same type, but never between schedulers of different
	types. This fact has to be taken under consideration when
	evaluating the result returned.</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using <fo:inline font-family="monospace">scheduler_wall_time</fo:inline> to calculate
          scheduler utilization:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:system_flag(scheduler_wall_time, true).</fo:inline>
false
&gt; <fo:inline font-weight="bold">Ts0 = lists:sort(erlang:statistics(scheduler_wall_time)), ok.</fo:inline>
ok</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some time later the user takes another snapshot and calculates
          scheduler utilization per scheduler, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">Ts1 = lists:sort(erlang:statistics(scheduler_wall_time)), ok.</fo:inline>
ok
&gt; <fo:inline font-weight="bold">lists:map(fun({{I, A0, T0}, {I, A1, T1}}) -&gt;
	{I, (A1 - A0)/(T1 - T0)} end, lists:zip(Ts0,Ts1)).</fo:inline>
[{1,0.9743474730177548},
 {2,0.9744843782751444},
 {3,0.9995902361669045},
 {4,0.9738012596572161},
 {5,0.9717956667018103},
 {6,0.9739235846420741},
 {7,0.973237033077876},
 {8,0.9741297293248656}]</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using the same snapshots to calculate a total
          scheduler utilization:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">{A, T} = lists:foldl(fun({{_, A0, T0}, {_, A1, T1}}, {Ai,Ti}) -&gt;
	{Ai + (A1 - A0), Ti + (T1 - T0)} end, {0, 0}, lists:zip(Ts0,Ts1)),
	TotalSchedulerUtilization = A/T.</fo:inline>
0.9769136803764825</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Total scheduler utilization will equal <fo:inline font-family="monospace">1.0</fo:inline> when
	all schedulers have been active all the time between the
	two measurements.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another (probably more) useful value is to calculate
	total scheduler utilization weighted against maximum amount
	of available CPU time:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">WeightedSchedulerUtilization = (TotalSchedulerUtilization
                                  * (erlang:system_info(schedulers)
                                     + erlang:system_info(dirty_cpu_schedulers)))
                                 / erlang:system_info(logical_processors_available).</fo:inline>
0.9769136803764825</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This weighted scheduler utilization will reach <fo:inline font-family="monospace">1.0</fo:inline>
	when schedulers are active the same amount of time as
	maximum available CPU time. If more schedulers exist
	than available logical processors, this value may
	be greater than <fo:inline font-family="monospace">1.0</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As of ERTS version 9.0, the Erlang runtime system
	with SMP support will as default have more schedulers
	than logical processors. This due to the dirty schedulers.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">scheduler_wall_time</fo:inline> is by default disabled. To
            enable it, use
            <fo:inline font-family="monospace">erlang:system_flag(scheduler_wall_time, true)</fo:inline>.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15275584"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: scheduler_wall_time_all) -&gt;<fo:block/>              [{SchedulerId, ActiveTime, TotalTime}] | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">SchedulerId = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ActiveTime = TotalTime = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as
	<fo:inline font-style="italic"><fo:inline font-family="monospace">statistics(scheduler_wall_time)</fo:inline></fo:inline>,
	except that it also include information about all dirty I/O
	schedulers.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dirty IO schedulers will have scheduler identifiers in
	the range
	<fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:system_info(schedulers)</fo:inline></fo:inline><fo:inline font-family="monospace">
	+
	</fo:inline><fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:system_info(dirty_cpu_schedulers)</fo:inline></fo:inline><fo:inline font-family="monospace"> &lt;
	SchedulerId =&lt; erlang:system_info(schedulers)
	+ erlang:system_info(dirty_cpu_schedulers)
	+
	</fo:inline><fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:system_info(dirty_io_schedulers)</fo:inline></fo:inline>.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that work executing on dirty I/O schedulers
	are expected to mainly wait for I/O. That is, when you
	get high scheduler utilization on dirty I/O schedulers,
	CPU utilization is <fo:inline font-weight="bold">not</fo:inline> expected to be high due to
	this work.</fo:block></fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp15285136"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: total_active_tasks) -&gt; ActiveTasks</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ActiveTasks = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as calling
	<fo:inline font-family="monospace">lists:sum(</fo:inline><fo:inline font-style="italic"><fo:inline font-family="monospace">statistics(active_tasks)</fo:inline></fo:inline><fo:inline font-family="monospace">)</fo:inline>,
	but more efficient.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15289936"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: total_active_tasks_all) -&gt; ActiveTasks</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ActiveTasks = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as calling
	<fo:inline font-family="monospace">lists:sum(</fo:inline><fo:inline font-style="italic"><fo:inline font-family="monospace">statistics(active_tasks_all)</fo:inline></fo:inline><fo:inline font-family="monospace">)</fo:inline>,
	but more efficient.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15294736"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: total_run_queue_lengths) -&gt;<fo:block/>              TotalRunQueueLengths</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TotalRunQueueLengths = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as calling
	<fo:inline font-family="monospace">lists:sum(</fo:inline><fo:inline font-style="italic"><fo:inline font-family="monospace">statistics(run_queue_lengths)</fo:inline></fo:inline><fo:inline font-family="monospace">)</fo:inline>,
	but more efficient.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15299536"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: total_run_queue_lengths_all) -&gt;<fo:block/>              TotalRunQueueLengths</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TotalRunQueueLengths = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as calling
	<fo:inline font-family="monospace">lists:sum(</fo:inline><fo:inline font-style="italic"><fo:inline font-family="monospace">statistics(run_queue_lengths_all)</fo:inline></fo:inline><fo:inline font-family="monospace">)</fo:inline>,
	but more efficient.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15304336"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">statistics(Item :: wall_clock) -&gt;<fo:block/>              {Total_Wallclock_Time,<fo:block/>               Wallclock_Time_Since_Last_Call}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Total_Wallclock_Time = Wallclock_Time_Since_Last_Call = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns information about wall clock. <fo:inline font-family="monospace">wall_clock</fo:inline> can
          be used in the same manner as
          <fo:inline font-family="monospace">runtime</fo:inline>, except that real time is measured as
          opposed to runtime or CPU time.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15308256"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:suspend_process(Suspendee) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Suspendee = pid()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Suspends the process identified by
          <fo:inline font-family="monospace">Suspendee</fo:inline>. The same as calling
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:suspend_process(Suspendee,
          [])</fo:inline></fo:inline>.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is intended for debugging only.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15313888"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:suspend_process(Suspendee, OptList) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Suspendee = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OptList = [Opt]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opt = unless_suspending | asynchronous</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Increases the suspend count on the process identified by
          <fo:inline font-family="monospace">Suspendee</fo:inline> and puts it in the suspended
          state if it is not
          already in that state. A suspended process is not
          scheduled for execution until the process has been resumed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process can be suspended by multiple processes and can
          be suspended multiple times by a single process. A suspended
          process does not leave the suspended state until its suspend 
          count reaches zero. The suspend count of
          <fo:inline font-family="monospace">Suspendee</fo:inline> is decreased when
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:resume_process(Suspendee)</fo:inline></fo:inline>
          is called by the same process that called
          <fo:inline font-family="monospace">erlang:suspend_process(Suspendee)</fo:inline>.
          All increased suspend
          counts on other processes acquired by a process are automatically
          decreased when the process terminates.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options (<fo:inline font-family="monospace">Opt</fo:inline>s):</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">asynchronous</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A suspend request is sent to the process identified by
              <fo:inline font-family="monospace">Suspendee</fo:inline>. <fo:inline font-family="monospace">Suspendee</fo:inline>
              eventually suspends
              unless it is resumed before it could suspend. The caller
              of <fo:inline font-family="monospace">erlang:suspend_process/2</fo:inline> returns immediately,
              regardless of whether <fo:inline font-family="monospace">Suspendee</fo:inline> has
              suspended yet or not. The point in time when
              <fo:inline font-family="monospace">Suspendee</fo:inline> suspends cannot be deduced
              from other events in the system. It is only guaranteed that
              <fo:inline font-family="monospace">Suspendee</fo:inline> <fo:inline font-weight="bold">eventually</fo:inline> suspends
              (unless it
              is resumed). If option <fo:inline font-family="monospace">asynchronous</fo:inline> has <fo:inline font-weight="bold">not</fo:inline>
              been passed, the caller of <fo:inline font-family="monospace">erlang:suspend_process/2</fo:inline> is
              blocked until <fo:inline font-family="monospace">Suspendee</fo:inline> has suspended.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">unless_suspending</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process identified by <fo:inline font-family="monospace">Suspendee</fo:inline> is
              suspended unless the calling process already is suspending
              <fo:inline font-family="monospace">Suspendee</fo:inline>.
              If <fo:inline font-family="monospace">unless_suspending</fo:inline> is combined
              with option <fo:inline font-family="monospace">asynchronous</fo:inline>, a suspend request is
              sent unless the calling process already is suspending
              <fo:inline font-family="monospace">Suspendee</fo:inline> or if a suspend request
              already has been sent and is in transit. If the calling
              process already is suspending <fo:inline font-family="monospace">Suspendee</fo:inline>,
              or if combined with option <fo:inline font-family="monospace">asynchronous</fo:inline>
              and a send request already is in transit,
              <fo:inline font-family="monospace">false</fo:inline> is returned and the suspend count on
              <fo:inline font-family="monospace">Suspendee</fo:inline> remains unchanged.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the suspend count on the process identified by
          <fo:inline font-family="monospace">Suspendee</fo:inline> is increased, <fo:inline font-family="monospace">true</fo:inline>
          is returned, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This BIF is intended for debugging only.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If <fo:inline font-family="monospace">Suspendee</fo:inline> is not a process identifier.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If the process identified by <fo:inline font-family="monospace">Suspendee</fo:inline>
            is the same process
            as the process calling <fo:inline font-family="monospace">erlang:suspend_process/2</fo:inline>.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If the process identified by <fo:inline font-family="monospace">Suspendee</fo:inline>
            is not alive.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If the process identified by <fo:inline font-family="monospace">Suspendee</fo:inline>
            resides on another node.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If <fo:inline font-family="monospace">OptList</fo:inline> is not a proper list of valid
            <fo:inline font-family="monospace">Opt</fo:inline>s.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">system_limit</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            If the process identified by <fo:inline font-family="monospace">Suspendee</fo:inline>
            has been suspended
            more times by the calling process than can be represented by the
            currently used internal data structures. The system limit is
            &gt; 2,000,000,000 suspends and will never be lower.
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15351856"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_flag(Flag :: backtrace_depth, Depth) -&gt; OldDepth</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Depth = OldDepth = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the maximum depth of call stack back-traces in the
          exit reason element of <fo:inline font-family="monospace">'EXIT'</fo:inline> tuples. The flag
          also limits the stacktrace depth returned by <fo:inline font-family="monospace">process_info</fo:inline>
          item <fo:inline font-family="monospace">current_stacktrace.</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15356992"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_flag(Flag :: cpu_topology, CpuTopology) -&gt;<fo:block/>                      OldCpuTopology</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">CpuTopology = OldCpuTopology = <fo:inline font-style="italic">cpu_topology()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">cpu_topology() = [LevelEntry :: <fo:inline font-style="italic">level_entry()</fo:inline>] | undefined</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">level_entry() = <fo:block/>    {LevelTag :: <fo:inline font-style="italic">level_tag()</fo:inline>, SubLevel :: <fo:inline font-style="italic">sub_level()</fo:inline>} |<fo:block/>    {LevelTag :: <fo:inline font-style="italic">level_tag()</fo:inline>,<fo:block/>     InfoList :: <fo:inline font-style="italic">info_list()</fo:inline>,<fo:block/>     SubLevel :: <fo:inline font-style="italic">sub_level()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">level_tag() = core | node | processor | thread</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">sub_level() = <fo:block/>    [LevelEntry :: <fo:inline font-style="italic">level_entry()</fo:inline>] |<fo:block/>    (LogicalCpuId :: {logical, integer() &gt;= 0})</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">info_list() = []</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            <fo:inline font-weight="bold">This argument is deprecated.</fo:inline>
            Instead of using this argument, use command-line argument
            <fo:inline font-style="italic"><fo:inline font-family="monospace">+sct</fo:inline></fo:inline> in
            <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When this argument is removed, a final CPU topology
            to use is determined at emulator boot time.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the user-defined <fo:inline font-family="monospace">CpuTopology</fo:inline>.
          The user-defined
          CPU topology overrides any automatically detected
          CPU topology. By passing <fo:inline font-family="monospace">undefined</fo:inline> as
          <fo:inline font-family="monospace">CpuTopology</fo:inline>,
          the system reverts to the CPU topology automatically
          detected. The returned value equals the value returned
          from <fo:inline font-family="monospace">erlang:system_info(cpu_topology)</fo:inline> before the
          change was made.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The CPU topology is used when binding schedulers to logical
          processors. If schedulers are already bound when the CPU
          topology is changed, the schedulers are sent a request
          to rebind according to the new CPU topology.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The user-defined CPU topology can also be set by passing
          command-line argument
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+sct</fo:inline></fo:inline> to
          <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information on type <fo:inline font-family="monospace">CpuTopology</fo:inline>
          and more, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_info(cpu_topology)</fo:inline></fo:inline>
          as well as command-line flags
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+sct</fo:inline></fo:inline> and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt</fo:inline></fo:inline> in
          <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15376368"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_flag(Flag :: dirty_cpu_schedulers_online,<fo:block/>                   DirtyCPUSchedulersOnline) -&gt;<fo:block/>                      OldDirtyCPUSchedulersOnline</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">DirtyCPUSchedulersOnline = OldDirtyCPUSchedulersOnline = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          Sets the number of dirty CPU schedulers online. Range is
          <fo:inline font-family="monospace">1 &lt;= DirtyCPUSchedulersOnline &lt;= N</fo:inline>, where <fo:inline font-family="monospace">N</fo:inline>
          is the smallest of the return values of
          <fo:inline font-family="monospace">erlang:system_info(dirty_cpu_schedulers)</fo:inline> and
          <fo:inline font-family="monospace">erlang:system_info(schedulers_online)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of dirty CPU schedulers online can change if the
          number of schedulers online changes. For example, if 12
          schedulers and 6 dirty CPU schedulers are online, and
          <fo:inline font-family="monospace">system_flag/2</fo:inline> is used to set the number of
          schedulers online to 6, then the number of dirty CPU
          schedulers online is automatically decreased by half as well,
          down to 3. Similarly, the number of dirty CPU schedulers
          online increases proportionally to increases in the number of
          schedulers online.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_info(dirty_cpu_schedulers)</fo:inline></fo:inline> and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_info(dirty_cpu_schedulers_online)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15386144"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_flag(Flag :: fullsweep_after, Number) -&gt; OldNumber</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Number = OldNumber = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets system flag <fo:inline font-family="monospace">fullsweep_after</fo:inline>.
          <fo:inline font-family="monospace">Number</fo:inline> is a non-negative integer indicating
          how many times generational garbage collections can be
          done without forcing a fullsweep collection. The value
          applies to new processes, while processes already running are
          not affected.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In low-memory systems (especially without virtual
          memory), setting the value to <fo:inline font-family="monospace">0</fo:inline> can help to conserve
          memory.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This value can also be set through (OS)
          environment variable <fo:inline font-family="monospace">ERL_FULLSWEEP_AFTER</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15392720"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_flag(Flag :: microstate_accounting, Action) -&gt;<fo:block/>                      OldState</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Action = true | false | reset</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OldState = true | false</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          Turns on/off microstate accounting measurements. When passing reset,
          all counters are reset to 0.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(microstate_accounting)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15397648"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_flag(Flag :: min_heap_size, MinHeapSize) -&gt;<fo:block/>                      OldMinHeapSize</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MinHeapSize = OldMinHeapSize = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the default minimum heap size for processes. The size
          is specified in words. The new <fo:inline font-family="monospace">min_heap_size</fo:inline> effects
          only processes spawned after the change of
          <fo:inline font-family="monospace">min_heap_size</fo:inline> has been made. <fo:inline font-family="monospace">min_heap_size</fo:inline>
          can be set for individual processes by using
          <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn_opt/4</fo:inline></fo:inline> or
          <fo:inline font-style="italic"><fo:inline font-family="monospace">process_flag/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15404256"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_flag(Flag :: min_bin_vheap_size, MinBinVHeapSize) -&gt;<fo:block/>                      OldMinBinVHeapSize</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MinBinVHeapSize = OldMinBinVHeapSize = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the default minimum binary virtual heap size for
          processes. The size is specified in words.
          The new <fo:inline font-family="monospace">min_bin_vhheap_size</fo:inline> effects only
          processes spawned after the change of
          <fo:inline font-family="monospace">min_bin_vheap_size</fo:inline> has been made.
          <fo:inline font-family="monospace">min_bin_vheap_size</fo:inline> can be set for individual
          processes by using
          <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn_opt/2,3,4</fo:inline></fo:inline> or
          <fo:inline font-style="italic"><fo:inline font-family="monospace">process_flag/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15410912"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_flag(Flag :: max_heap_size, MaxHeapSize) -&gt;<fo:block/>                      OldMaxHeapSize</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MaxHeapSize = OldMaxHeapSize = <fo:inline font-style="italic">max_heap_size()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">max_heap_size() = <fo:block/>    integer() &gt;= 0 |<fo:block/>    #{size =&gt; integer() &gt;= 0,<fo:block/>      kill =&gt; boolean(),<fo:block/>      error_logger =&gt; boolean()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          Sets the default maximum heap size settings for processes.
          The size is specified in words. The new <fo:inline font-family="monospace">max_heap_size</fo:inline>
          effects only processes spawned efter the change has been made.
          <fo:inline font-family="monospace">max_heap_size</fo:inline> can be set for individual processes using
          <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn_opt/2,3,4</fo:inline></fo:inline> or
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">process_flag/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15418400"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_flag(Flag :: multi_scheduling, BlockState) -&gt;<fo:block/>                      OldBlockState</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">BlockState = block | unblock | block_normal | unblock_normal</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OldBlockState = blocked | disabled | enabled</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          If multi-scheduling is enabled, more than one scheduler
          thread is used by the emulator. Multi-scheduling can be
          blocked in two different ways. Either all schedulers but
          one is blocked, or all <fo:inline font-weight="bold">normal</fo:inline> schedulers but
          one is blocked. When only normal schedulers are blocked,
          dirty schedulers are free to continue to schedule
          processes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">BlockState =:= block</fo:inline>, multi-scheduling is
          blocked. That is, one and only one scheduler thread will
          execute. If <fo:inline font-family="monospace">BlockState =:= unblock</fo:inline> and no one
          else blocks multi-scheduling, and this process has
          blocked only once, multi-scheduling is unblocked.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">BlockState =:= block_normal</fo:inline>, normal
          multi-scheduling is blocked. That is, only one normal scheduler
          thread will execute, but multiple dirty schedulers can execute.
          If <fo:inline font-family="monospace">BlockState =:= unblock_normal</fo:inline> and no one
          else blocks normal multi-scheduling, and this process has
          blocked only once, normal multi-scheduling is unblocked.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One process can block multi-scheduling and normal
          multi-scheduling multiple times. If a process has blocked
          multiple times, it must unblock exactly as many times as it
          has blocked before it has released its multi-scheduling
          block. If a process that has blocked multi-scheduling or normal
          multi-scheduling exits, it automatically releases its blocking
          of multi-scheduling and normal multi-scheduling.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return values are <fo:inline font-family="monospace">disabled</fo:inline>, <fo:inline font-family="monospace">blocked</fo:inline>,
          <fo:inline font-family="monospace">blocked_normal</fo:inline>, or <fo:inline font-family="monospace">enabled</fo:inline>. The returned value
          describes the state just after the call to
          <fo:inline font-family="monospace">erlang:system_flag(multi_scheduling, BlockState)</fo:inline>
          has been made. For information about the return values, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_info(multi_scheduling)</fo:inline></fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Blocking of multi-scheduling and normal multi-scheduling
          is normally not needed. If you feel that you need to use these
          features, consider it a few more times again. Blocking
          multi-scheduling is only to be used as a last resort, as it is
          most likely a <fo:inline font-weight="bold">very inefficient</fo:inline> way to solve the problem.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_info(multi_scheduling)</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_info(normal_multi_scheduling_blockers)</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_info(multi_scheduling_blockers)</fo:inline></fo:inline>, and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_info(schedulers)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15438208"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_flag(Flag :: scheduler_bind_type, How) -&gt;<fo:block/>                      OldBindType</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">How = <fo:inline font-style="italic">scheduler_bind_type()</fo:inline> | default_bind</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OldBindType = <fo:inline font-style="italic">scheduler_bind_type()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">scheduler_bind_type() = <fo:block/>    no_node_processor_spread |<fo:block/>    no_node_thread_spread |<fo:block/>    no_spread |<fo:block/>    processor_spread |<fo:block/>    spread |<fo:block/>    thread_spread |<fo:block/>    thread_no_node_processor_spread |<fo:block/>    unbound</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            <fo:inline font-weight="bold">This argument is deprecated.</fo:inline>
            Instead of using this argument, use command-line argument
            <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt</fo:inline></fo:inline> in
            <fo:inline font-family="monospace">erl(1)</fo:inline>. When this argument is removed, a final scheduler bind
            type to use is determined at emulator boot time.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Controls if and how schedulers are bound to logical
          processors.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">erlang:system_flag(scheduler_bind_type, How)</fo:inline>
          is called, an asynchronous signal is sent to all schedulers
          online, causing them to try to bind or unbind as requested.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a scheduler fails to bind, this is often silently
          ignored, as it is not always possible to verify valid
          logical processor identifiers. If an error is reported,
          it is reported to <fo:inline font-family="monospace">error_logger</fo:inline>. To verify that the
          schedulers have bound as requested, call
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_info(scheduler_bindings)</fo:inline></fo:inline>.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Schedulers can be bound on newer Linux,
          Solaris, FreeBSD, and Windows systems, but more systems will be
          supported in future releases.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order for the runtime system to be able to bind schedulers,
          the CPU topology must be known. If the runtime system fails
          to detect the CPU topology automatically, it can be defined.
          For more information on how to define the CPU topology, see
          command-line flag <fo:inline font-style="italic">
          <fo:inline font-family="monospace">+sct</fo:inline></fo:inline> in <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime system does by default <fo:inline font-weight="bold">not</fo:inline> bind schedulers
          to logical processors.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the Erlang runtime system is the only OS
          process binding threads to logical processors, this
          improves the performance of the runtime system. However,
          if other OS processes (for example, another Erlang
          runtime system) also bind threads to logical processors,
          there can be a performance penalty instead. Sometimes this
          performance penalty can be severe. If so, it is recommended
          to not bind the schedulers.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Schedulers can be bound in different ways. Argument
          <fo:inline font-family="monospace">How</fo:inline> determines how schedulers are
          bound and can be any of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">unbound</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Same as command-line argument
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt u</fo:inline></fo:inline> in
            <fo:inline font-family="monospace">erl(1)</fo:inline>.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">no_spread</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Same as command-line argument
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt ns</fo:inline></fo:inline>
            in <fo:inline font-family="monospace">erl(1)</fo:inline>.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">thread_spread</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Same as command-line argument
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt ts</fo:inline></fo:inline>
            in <fo:inline font-family="monospace">erl(1)</fo:inline>.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">processor_spread</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Same as command-line argument
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt ps</fo:inline></fo:inline>
          in <fo:inline font-family="monospace">erl(1)</fo:inline>.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">spread</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Same as command-line argument
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt s</fo:inline></fo:inline>
            in <fo:inline font-family="monospace">erl(1)</fo:inline>.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">no_node_thread_spread</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Same as command-line argument
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt nnts</fo:inline></fo:inline>
            in <fo:inline font-family="monospace">erl(1)</fo:inline>.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">no_node_processor_spread</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Same as command-line argument
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt nnps</fo:inline></fo:inline>
            in <fo:inline font-family="monospace">erl(1)</fo:inline>.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">thread_no_node_processor_spread</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Same as command-line argument
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt tnnps</fo:inline></fo:inline>
            in <fo:inline font-family="monospace">erl(1)</fo:inline>.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">default_bind</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Same as command-line argument
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt db</fo:inline></fo:inline>
            in <fo:inline font-family="monospace">erl(1)</fo:inline>.
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The returned value equals <fo:inline font-family="monospace">How</fo:inline> before flag
           <fo:inline font-family="monospace">scheduler_bind_type</fo:inline> was changed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">notsup</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If binding of schedulers is not supported.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If <fo:inline font-family="monospace">How</fo:inline> is not one of the documented
            alternatives.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If CPU topology information is unavailable.
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The scheduler bind type can also be set by passing command-line
          argument <fo:inline font-style="italic">
          <fo:inline font-family="monospace">+sbt</fo:inline></fo:inline> to <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_info(scheduler_bind_type)</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_info(scheduler_bindings)</fo:inline></fo:inline>,
          as well as command-line flags
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt</fo:inline></fo:inline>
          and <fo:inline font-style="italic"><fo:inline font-family="monospace">+sct</fo:inline></fo:inline>
          in <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15489520"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_flag(Flag :: scheduler_wall_time, Boolean) -&gt;<fo:block/>                      OldBoolean</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Boolean = OldBoolean = boolean()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          Turns on or off scheduler wall time measurements.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">statistics(scheduler_wall_time)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15494400"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_flag(Flag :: schedulers_online, SchedulersOnline) -&gt;<fo:block/>                      OldSchedulersOnline</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">SchedulersOnline = OldSchedulersOnline = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          Sets the number of schedulers online. Range is
          <fo:inline font-family="monospace">1 &lt;= SchedulersOnline &lt;=
          erlang:system_info(schedulers)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the emulator was built with support for
          <fo:inline font-style="italic">
          dirty schedulers</fo:inline>,
          changing the number of schedulers online can also change the
          number of dirty CPU schedulers online. For example, if 12
          schedulers and 6 dirty CPU schedulers are online, and
          <fo:inline font-family="monospace">system_flag/2</fo:inline> is used to set the number of schedulers
          online to 6, then the number of dirty CPU schedulers online
          is automatically decreased by half as well, down to 3.
          Similarly, the number of dirty CPU schedulers online increases
          proportionally to increases in the number of schedulers online.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_info(schedulers)</fo:inline></fo:inline> and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_info(schedulers_online)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15503456"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_flag(Flag :: trace_control_word, TCW) -&gt; OldTCW</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TCW = OldTCW = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the value of the node trace control word to
          <fo:inline font-family="monospace">TCW</fo:inline>, which is to be an unsigned integer.
          For more information, see function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">set_tcw</fo:inline></fo:inline>
          in section "Match Specifications in Erlang" in the
          User's Guide.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old value of the flag.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15508448"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_flag(Flag :: time_offset, Value :: finalize) -&gt;<fo:block/>                      OldState</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OldState = preliminary | final | volatile</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          Finalizes the <fo:inline font-style="italic">time offset</fo:inline>
          when <fo:inline font-style="italic">single
          time warp mode</fo:inline> is used. If another time warp mode
          is used, the time offset state is left unchanged.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the old state identifier, that is:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">preliminary</fo:inline> is returned, finalization was
            performed and the time offset is now final.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">final</fo:inline> is returned, the time offset was
            already in the final state. This either because another
            <fo:inline font-family="monospace">erlang:system_flag(time_offset, finalize)</fo:inline> call or
            because <fo:inline font-style="italic">no
            time warp mode</fo:inline> is used.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">volatile</fo:inline> is returned, the time offset
            cannot be finalized because
            <fo:inline font-style="italic">multi-time
            warp mode</fo:inline> is used.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15520304"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: allocated_areas) -&gt; [tuple()]</fo:block></fo:block><fo:block id="idp15521408"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: allocator) -&gt;<fo:block/>                      {Allocator, Version, Features, Settings}</fo:block></fo:block><fo:block id="idp15522512"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: alloc_util_allocators) -&gt; [Alloc]</fo:block></fo:block><fo:block id="idp15523616"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: {allocator, Alloc}) -&gt; [term()]</fo:block></fo:block><fo:block id="idp15524720"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: {allocator_sizes, Alloc}) -&gt; [term()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Allocator = undefined | glibc</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Version = [integer() &gt;= 0]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Features = [atom()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Settings = <fo:block/>    [{Subsystem :: atom(),<fo:block/>      [{Parameter :: atom(), Value :: term()}]}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Alloc = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns various information about the allocators of the
          current system (emulator) as specified by
          <fo:inline font-family="monospace">Item</fo:inline>:</fo:block>
        
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">allocated_areas</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of tuples with information about
              miscellaneous allocated memory areas.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each tuple contains an atom describing the type of
              memory as first element and the amount of allocated
              memory in bytes as second element. When information
              about allocated and used memory is present, also a
              third element is present, containing the amount of
              used memory in bytes.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erlang:system_info(allocated_areas)</fo:inline> is intended
              for debugging, and the content is highly
              implementation-dependent. The content of the results
              therefore changes when needed without prior notice.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the sum of these values is <fo:inline font-weight="bold">not</fo:inline>
              the total amount of memory allocated by the emulator.
              Some values are part of other values, and some memory
              areas are not part of the result. For information about
              the total amount of memory allocated by the emulator, see
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:memory/0,1</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">allocator</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{Allocator, Version,
              Features, Settings</fo:inline>, where:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Allocator</fo:inline> corresponds to the
                  <fo:inline font-family="monospace">malloc()</fo:inline> implementation used. If
                  <fo:inline font-family="monospace">Allocator</fo:inline> equals
                  <fo:inline font-family="monospace">undefined</fo:inline>, the <fo:inline font-family="monospace">malloc()</fo:inline> implementation
                  used cannot be identified. <fo:inline font-family="monospace">glibc</fo:inline> can be
                  identified.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Version</fo:inline> is a list of integers
                  (but not a string) representing the version of
                  the <fo:inline font-family="monospace">malloc()</fo:inline> implementation used.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Features</fo:inline> is a list of atoms
                  representing the allocation features used.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Settings</fo:inline> is a list of subsystems,
                  their configurable parameters, and used values. Settings
                  can differ between different combinations of
                  platforms, allocators, and allocation features.
                  Memory sizes are given in bytes.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also "System Flags Effecting erts_alloc" in
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erts_alloc(3)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">alloc_util_allocators</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of the names of all allocators using
              the ERTS internal <fo:inline font-family="monospace">alloc_util</fo:inline> framework
              as atoms. For more information, see section
              <fo:inline font-style="italic">The
              alloc_util framework</fo:inline>
              in <fo:inline font-family="monospace">erts_alloc(3)</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{allocator, Alloc}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns information about the specified allocator.
              As from ERTS 5.6.1, the return value is a list
              of <fo:inline font-family="monospace">{instance, InstanceNo, InstanceInfo}</fo:inline> tuples,
              where <fo:inline font-family="monospace">InstanceInfo</fo:inline> contains information about
              a specific instance of the allocator.
              If <fo:inline font-family="monospace">Alloc</fo:inline> is not a
              recognized allocator, <fo:inline font-family="monospace">undefined</fo:inline> is returned.
              If <fo:inline font-family="monospace">Alloc</fo:inline> is disabled,
              <fo:inline font-family="monospace">false</fo:inline> is returned.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the information returned is highly
              implementation-dependent and can be changed or removed
              at any time without prior notice. It was initially
              intended as a tool when developing new allocators, but
              as it can be of interest for others it has been
              briefly documented.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The recognized allocators are listed in
              <fo:inline font-style="italic"><fo:inline font-family="monospace">erts_alloc(3)</fo:inline></fo:inline>.
              Information about super carriers can be obtained from
              ERTS 8.0 with <fo:inline font-family="monospace">{allocator, erts_mmap}</fo:inline> or from
              ERTS 5.10.4; the returned list when calling with
              <fo:inline font-family="monospace">{allocator, mseg_alloc}</fo:inline> also includes an
              <fo:inline font-family="monospace">{erts_mmap, _}</fo:inline> tuple as one element in the list.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After reading the <fo:inline font-family="monospace">erts_alloc(3)</fo:inline> documentation,
              the returned information
              more or less speaks for itself, but it can be worth
              explaining some things. Call counts are presented by two
              values, the first value is giga calls, and the second
              value is calls. <fo:inline font-family="monospace">mbcs</fo:inline> and <fo:inline font-family="monospace">sbcs</fo:inline> denote
              multi-block carriers, and single-block carriers,
              respectively. Sizes are presented in bytes. When a
              size is not presented, it is the amount of something.
              Sizes and amounts are often presented by three values:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The first is the current value.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The second is the maximum value since the last call
                to <fo:inline font-family="monospace">erlang:system_info({allocator, Alloc})</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The third is the maximum value since the emulator
                was started.</fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If only one value is present, it is the current value.
              <fo:inline font-family="monospace">fix_alloc</fo:inline> memory block types are presented by two
              values. The first value is the memory pool size and
              the second value is the used memory size.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{allocator_sizes, Alloc}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns various size information for the specified
              allocator. The information returned is a subset of the
              information returned by
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info({allocator,
              Alloc})</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15577920"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: cpu_topology) -&gt; CpuTopology</fo:block></fo:block><fo:block id="idp15579024"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item ::<fo:block/>                       {cpu_topology, defined | detected | used}) -&gt;<fo:block/>                      CpuTopology</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">CpuTopology = <fo:inline font-style="italic">cpu_topology()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">cpu_topology() = [LevelEntry :: <fo:inline font-style="italic">level_entry()</fo:inline>] | undefined</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        All <fo:inline font-family="monospace">LevelEntry</fo:inline>s of a list
        must contain the same <fo:inline font-family="monospace">LevelTag</fo:inline>, except
        on the top level where both <fo:inline font-family="monospace">node</fo:inline> and
        <fo:inline font-family="monospace">processor</fo:inline> <fo:inline font-family="monospace">LevelTag</fo:inline>s can coexist.
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">level_entry() = <fo:block/>    {LevelTag :: <fo:inline font-style="italic">level_tag()</fo:inline>, SubLevel :: <fo:inline font-style="italic">sub_level()</fo:inline>} |<fo:block/>    {LevelTag :: <fo:inline font-style="italic">level_tag()</fo:inline>,<fo:block/>     InfoList :: <fo:inline font-style="italic">info_list()</fo:inline>,<fo:block/>     SubLevel :: <fo:inline font-style="italic">sub_level()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-family="monospace">{LevelTag,
        SubLevel} == {LevelTag, [],
        SubLevel}</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">level_tag() = core | node | processor | thread</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        More <fo:inline font-family="monospace">LevelTag</fo:inline>s can be introduced in a
        future release.
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">sub_level() = <fo:block/>    [LevelEntry :: <fo:inline font-style="italic">level_entry()</fo:inline>] |<fo:block/>    (LogicalCpuId :: {logical, integer() &gt;= 0})</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">info_list() = []</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        The <fo:inline font-family="monospace">info_list()</fo:inline> can be extended in a future release.
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns various information about the CPU topology of
          the current system (emulator) as specified by
          <fo:inline font-family="monospace">Item</fo:inline>:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cpu_topology</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the <fo:inline font-family="monospace">CpuTopology</fo:inline> currently used by
              the emulator. The CPU topology is used when binding schedulers
              to logical processors. The CPU topology used is the
              <fo:inline font-style="italic">
              user-defined CPU topology</fo:inline>,
              if such exists, otherwise the
              <fo:inline font-style="italic">
              automatically detected CPU topology</fo:inline>,
              if such exists. If no CPU topology
              exists, <fo:inline font-family="monospace">undefined</fo:inline> is returned.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">node</fo:inline> refers to Non-Uniform Memory Access (NUMA)
              nodes. <fo:inline font-family="monospace">thread</fo:inline> refers to hardware threads
              (for example, Intel hyper-threads).</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A level in term <fo:inline font-family="monospace">CpuTopology</fo:inline> can be
              omitted if only one entry exists and
              <fo:inline font-family="monospace">InfoList</fo:inline> is empty.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">thread</fo:inline> can only be a sublevel to <fo:inline font-family="monospace">core</fo:inline>.
              <fo:inline font-family="monospace">core</fo:inline> can be a sublevel to <fo:inline font-family="monospace">processor</fo:inline>
              or <fo:inline font-family="monospace">node</fo:inline>. <fo:inline font-family="monospace">processor</fo:inline> can be on the
              top level or a sublevel to <fo:inline font-family="monospace">node</fo:inline>. <fo:inline font-family="monospace">node</fo:inline>
              can be on the top level or a sublevel to
              <fo:inline font-family="monospace">processor</fo:inline>. That is, NUMA nodes can be processor
              internal or processor external. A CPU topology can
              consist of a mix of processor internal and external
              NUMA nodes, as long as each logical CPU belongs to
              <fo:inline font-weight="bold">one</fo:inline> NUMA node. Cache hierarchy is not part of
              the <fo:inline font-family="monospace">CpuTopology</fo:inline> type, but will be in a
              future release. Other things can also make it into the CPU
              topology in a future release. So, expect the
              <fo:inline font-family="monospace">CpuTopology</fo:inline> type to change.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cpu_topology, defined}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the user-defined <fo:inline font-family="monospace">CpuTopology</fo:inline>.
              For more information, see command-line flag
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+sct</fo:inline></fo:inline> in
              <fo:inline font-family="monospace">erl(1)</fo:inline> and argument
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">cpu_topology</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cpu_topology, detected}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the automatically detected
              <fo:inline font-family="monospace">CpuTopologyy</fo:inline>. The
              emulator detects the CPU topology on some newer
              Linux, Solaris, FreeBSD, and Windows systems.
              On Windows system with more than 32 logical processors,
              the CPU topology is not detected.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see argument
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">cpu_topology</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cpu_topology, used}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">CpuTopology</fo:inline> used by the emulator.
              For more information, see argument
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">cpu_topology</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15622432"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: fullsweep_after) -&gt;<fo:block/>                      {fullsweep_after, integer() &gt;= 0}</fo:block></fo:block><fo:block id="idp15623536"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: garbage_collection) -&gt;<fo:block/>                      [{atom(), integer()}]</fo:block></fo:block><fo:block id="idp15624640"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: max_heap_size) -&gt;<fo:block/>                      {max_heap_size,<fo:block/>                       MaxHeapSize :: <fo:inline font-style="italic">max_heap_size()</fo:inline>}</fo:block></fo:block><fo:block id="idp15625744"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: message_queue_data) -&gt;<fo:block/>                      <fo:inline font-style="italic">message_queue_data()</fo:inline></fo:block></fo:block><fo:block id="idp15626848"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: min_heap_size) -&gt;<fo:block/>                      {min_heap_size,<fo:block/>                       MinHeapSize :: integer() &gt;= 1}</fo:block></fo:block><fo:block id="idp15627952"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: min_bin_vheap_size) -&gt;<fo:block/>                      {min_bin_vheap_size,<fo:block/>                       MinBinVHeapSize :: integer() &gt;= 1}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">message_queue_data() = off_heap | on_heap</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">max_heap_size() = <fo:block/>    integer() &gt;= 0 |<fo:block/>    #{size =&gt; integer() &gt;= 0,<fo:block/>      kill =&gt; boolean(),<fo:block/>      error_logger =&gt; boolean()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns information about the default process heap settings:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">fullsweep_after</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{fullsweep_after, integer() &gt;= 0}</fo:inline>, which is
              the <fo:inline font-family="monospace">fullsweep_after</fo:inline> garbage collection setting used
              by default. For more information, see
              <fo:inline font-family="monospace">garbage_collection</fo:inline> described below.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">garbage_collection</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list describing the default garbage collection
              settings. A process spawned on the local node by a
              <fo:inline font-family="monospace">spawn</fo:inline> or <fo:inline font-family="monospace">spawn_link</fo:inline> uses these
              garbage collection settings. The default settings can be
              changed by using
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag/2</fo:inline></fo:inline>.
              <fo:inline font-style="italic"><fo:inline font-family="monospace">spawn_opt/2,3,4</fo:inline></fo:inline>
              can spawn a process that does not use the default
              settings.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">max_heap_size</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{max_heap_size, MaxHeapSize}</fo:inline>,
              where <fo:inline font-family="monospace">MaxHeapSize</fo:inline> is the current
              system-wide maximum heap size settings for spawned processes.
              This setting can be set using the command-line flags
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+hmax</fo:inline></fo:inline>,
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+hmaxk</fo:inline></fo:inline> and
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+hmaxel</fo:inline></fo:inline> in
              <fo:inline font-family="monospace">erl(1)</fo:inline>. It can also be changed at runtime using
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag(max_heap_size, MaxHeapSize)</fo:inline></fo:inline>.
              For more details about the <fo:inline font-family="monospace">max_heap_size</fo:inline> process flag,
              see <fo:inline font-style="italic">
              <fo:inline font-family="monospace">process_flag(max_heap_size, MaxHeapSize)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            <fo:inline font-family="monospace">message_queue_data</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the default value of the <fo:inline font-family="monospace">message_queue_data</fo:inline>
              process flag, which is either <fo:inline font-family="monospace">off_heap</fo:inline> or <fo:inline font-family="monospace">on_heap</fo:inline>.
              This default is set by command-line argument
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+hmqd</fo:inline></fo:inline> in
              <fo:inline font-family="monospace">erl(1)</fo:inline>. For more information on the
              <fo:inline font-family="monospace">message_queue_data</fo:inline> process flag, see documentation of
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">process_flag(message_queue_data, MQD)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">min_heap_size</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{min_heap_size, MinHeapSize}</fo:inline>,
              where <fo:inline font-family="monospace">MinHeapSize</fo:inline> is the current
              system-wide minimum heap size for spawned processes.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">min_bin_vheap_size</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{min_bin_vheap_size,
              MinBinVHeapSize}</fo:inline>, where
              <fo:inline font-family="monospace">MinBinVHeapSize</fo:inline> is the current system-wide
              minimum binary virtual heap size for spawned processes.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp15661120"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: atom_count) -&gt; integer() &gt;= 1</fo:block></fo:block><fo:block id="idp15662224"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: atom_limit) -&gt; integer() &gt;= 1</fo:block></fo:block><fo:block id="idp15663328"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: build_type) -&gt;<fo:block/>                      opt |<fo:block/>                      debug |<fo:block/>                      purify |<fo:block/>                      quantify |<fo:block/>                      purecov |<fo:block/>                      gcov |<fo:block/>                      valgrind |<fo:block/>                      gprof |<fo:block/>                      lcnt |<fo:block/>                      frmptr</fo:block></fo:block><fo:block id="idp15664432"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: c_compiler_used) -&gt; {atom(), term()}</fo:block></fo:block><fo:block id="idp15665536"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: check_io) -&gt; [term()]</fo:block></fo:block><fo:block id="idp15666640"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: compat_rel) -&gt; integer()</fo:block></fo:block><fo:block id="idp15667744"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: creation) -&gt; integer()</fo:block></fo:block><fo:block id="idp15668848"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: debug_compiled) -&gt; boolean()</fo:block></fo:block><fo:block id="idp15669952"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: delayed_node_table_gc) -&gt;<fo:block/>                      infinity | integer() &gt;= 0</fo:block></fo:block><fo:block id="idp15671056"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: dirty_cpu_schedulers) -&gt;<fo:block/>                      integer() &gt;= 0</fo:block></fo:block><fo:block id="idp15672160"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: dirty_cpu_schedulers_online) -&gt;<fo:block/>                      integer() &gt;= 0</fo:block></fo:block><fo:block id="idp15673264"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: dirty_io_schedulers) -&gt;<fo:block/>                      integer() &gt;= 0</fo:block></fo:block><fo:block id="idp15674368"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: dist) -&gt; binary()</fo:block></fo:block><fo:block id="idp15675472"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: dist_buf_busy_limit) -&gt;<fo:block/>                      integer() &gt;= 0</fo:block></fo:block><fo:block id="idp15676576"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: dist_ctrl) -&gt;<fo:block/>                      {Node :: node(),<fo:block/>                       ControllingEntity :: port() | pid()}</fo:block></fo:block><fo:block id="idp15677680"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: driver_version) -&gt; string()</fo:block></fo:block><fo:block id="idp15678784"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: dynamic_trace) -&gt;<fo:block/>                      none | dtrace | systemtap</fo:block></fo:block><fo:block id="idp15679888"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: dynamic_trace_probes) -&gt; boolean()</fo:block></fo:block><fo:block id="idp15680992"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: elib_malloc) -&gt; false</fo:block></fo:block><fo:block id="idp15682096"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: eager_check_io) -&gt; boolean()</fo:block></fo:block><fo:block id="idp15683200"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: ets_limit) -&gt; integer() &gt;= 1</fo:block></fo:block><fo:block id="idp15684304"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: heap_sizes) -&gt; [integer() &gt;= 0]</fo:block></fo:block><fo:block id="idp15685408"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: heap_type) -&gt; private</fo:block></fo:block><fo:block id="idp15686512"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: info) -&gt; binary()</fo:block></fo:block><fo:block id="idp15687616"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: kernel_poll) -&gt; boolean()</fo:block></fo:block><fo:block id="idp15688720"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: loaded) -&gt; binary()</fo:block></fo:block><fo:block id="idp15689824"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item ::<fo:block/>                       logical_processors |<fo:block/>                       logical_processors_available |<fo:block/>                       logical_processors_online) -&gt;<fo:block/>                      unknown | integer() &gt;= 1</fo:block></fo:block><fo:block id="idp15690928"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: machine) -&gt; string()</fo:block></fo:block><fo:block id="idp15692032"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: modified_timing_level) -&gt;<fo:block/>                      integer() | undefined</fo:block></fo:block><fo:block id="idp15693136"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: multi_scheduling) -&gt;<fo:block/>                      disabled |<fo:block/>                      blocked |<fo:block/>                      blocked_normal |<fo:block/>                      enabled</fo:block></fo:block><fo:block id="idp15694240"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: multi_scheduling_blockers) -&gt;<fo:block/>                      [Pid :: pid()]</fo:block></fo:block><fo:block id="idp15695344"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: nif_version) -&gt; string()</fo:block></fo:block><fo:block id="idp15696448"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: normal_multi_scheduling_blockers) -&gt;<fo:block/>                      [Pid :: pid()]</fo:block></fo:block><fo:block id="idp15697552"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: otp_release) -&gt; string()</fo:block></fo:block><fo:block id="idp15698656"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: os_monotonic_time_source) -&gt;<fo:block/>                      [{atom(), term()}]</fo:block></fo:block><fo:block id="idp15699760"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: os_system_time_source) -&gt;<fo:block/>                      [{atom(), term()}]</fo:block></fo:block><fo:block id="idp15700864"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: port_count) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block id="idp15701968"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: port_limit) -&gt; integer() &gt;= 1</fo:block></fo:block><fo:block id="idp15703072"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: process_count) -&gt; integer() &gt;= 1</fo:block></fo:block><fo:block id="idp15704176"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: process_limit) -&gt; integer() &gt;= 1</fo:block></fo:block><fo:block id="idp15705280"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: procs) -&gt; binary()</fo:block></fo:block><fo:block id="idp15706384"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: scheduler_bind_type) -&gt;<fo:block/>                      spread |<fo:block/>                      processor_spread |<fo:block/>                      thread_spread |<fo:block/>                      thread_no_node_processor_spread |<fo:block/>                      no_node_processor_spread |<fo:block/>                      no_node_thread_spread |<fo:block/>                      no_spread |<fo:block/>                      unbound</fo:block></fo:block><fo:block id="idp15707488"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: scheduler_bindings) -&gt; tuple()</fo:block></fo:block><fo:block id="idp15708592"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: scheduler_id) -&gt;<fo:block/>                      SchedulerId :: integer() &gt;= 1</fo:block></fo:block><fo:block id="idp15709696"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: schedulers | schedulers_online) -&gt;<fo:block/>                      integer() &gt;= 1</fo:block></fo:block><fo:block id="idp15710800"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: smp_support) -&gt; boolean()</fo:block></fo:block><fo:block id="idp15711904"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: start_time) -&gt; integer()</fo:block></fo:block><fo:block id="idp15713008"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: system_version) -&gt; string()</fo:block></fo:block><fo:block id="idp15714112"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: system_architecture) -&gt; string()</fo:block></fo:block><fo:block id="idp15715216"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: threads) -&gt; boolean()</fo:block></fo:block><fo:block id="idp15716320"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: thread_pool_size) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block id="idp15717424"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: time_correction) -&gt; true | false</fo:block></fo:block><fo:block id="idp15718528"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: time_offset) -&gt;<fo:block/>                      preliminary | final | volatile</fo:block></fo:block><fo:block id="idp15719632"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: time_warp_mode) -&gt;<fo:block/>                      no_time_warp |<fo:block/>                      single_time_warp |<fo:block/>                      multi_time_warp</fo:block></fo:block><fo:block id="idp15720736"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: tolerant_timeofday) -&gt;<fo:block/>                      enabled | disabled</fo:block></fo:block><fo:block id="idp15721840"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: trace_control_word) -&gt;<fo:block/>                      integer() &gt;= 0</fo:block></fo:block><fo:block id="idp15722944"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: update_cpu_info) -&gt; changed | unchanged</fo:block></fo:block><fo:block id="idp15724048"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_info(Item :: version) -&gt; string()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns various information about the current system
          (emulator) as specified by <fo:inline font-family="monospace">Item</fo:inline>:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">atom_count</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of atoms currently existing at the
              local node. The value is given as an integer.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">atom_limit</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the maximum number of atoms allowed.
              This limit can be increased at startup by passing
              command-line flag
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+t</fo:inline></fo:inline> to
              <fo:inline font-family="monospace">erl(1)</fo:inline>.
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">build_type</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an atom describing the build type of the runtime
              system. This is normally the atom <fo:inline font-family="monospace">opt</fo:inline> for optimized.
              Other possible return values are <fo:inline font-family="monospace">debug</fo:inline>, <fo:inline font-family="monospace">purify</fo:inline>,
              <fo:inline font-family="monospace">quantify</fo:inline>, <fo:inline font-family="monospace">purecov</fo:inline>, <fo:inline font-family="monospace">gcov</fo:inline>, <fo:inline font-family="monospace">valgrind</fo:inline>,
              <fo:inline font-family="monospace">gprof</fo:inline>, and <fo:inline font-family="monospace">lcnt</fo:inline>. Possible return values
              can be added or removed at any time without prior notice.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">c_compiler_used</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a two-tuple describing the C compiler used when
              compiling the runtime system. The first element is an
              atom describing the name of the compiler, or <fo:inline font-family="monospace">undefined</fo:inline>
              if unknown. The second element is a term describing the
              version of the compiler, or <fo:inline font-family="monospace">undefined</fo:inline> if unknown.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">check_io</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list containing miscellaneous information
              about the emulators internal I/O checking. Notice that
              the content of the returned list can vary between
              platforms and over time. It is only guaranteed
              that a list is returned.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">compat_rel</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the compatibility mode of the local node as
              an integer. The integer returned represents the
              Erlang/OTP release that the current emulator has been
              set to be backward compatible with. The compatibility
              mode can be configured at startup by using command-line flag
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+R</fo:inline></fo:inline> in
              <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cpu_topology</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">above</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">creation</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the creation of the local node as an integer.
              The creation is changed when a node is restarted. The
              creation of a node is stored in process identifiers, port
              identifiers, and references. This makes it (to some
              extent) possible to distinguish between identifiers from
              different incarnations of a node. The valid
              creations are integers in the range 1..3, but this will
              probably change in a future release. If the node is not
              alive, <fo:inline font-family="monospace">0</fo:inline> is returned.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">debug_compiled</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if the emulator has been
              debug-compiled, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">delayed_node_table_gc</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the amount of time in seconds garbage collection
              of an entry in a node table is delayed. This limit can be set
              on startup by passing command-line flag
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+zdntgc</fo:inline></fo:inline>
              to <fo:inline font-family="monospace">erl(1)</fo:inline>. For more information, see the documentation of
              the command-line flag.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dirty_cpu_schedulers</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of dirty CPU scheduler threads used by
              the emulator. Dirty CPU schedulers execute CPU-bound
              native functions, such as NIFs, linked-in driver code,
              and BIFs that cannot be managed cleanly by the normal
              emulator schedulers.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of dirty CPU scheduler threads is determined
              at emulator boot time and cannot be changed after that.
              However, the number of dirty CPU scheduler threads online
              can be changed at any time. The number of dirty CPU
              schedulers can be set at startup by passing
              command-line flag
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+SDcpu</fo:inline></fo:inline> or
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+SDPcpu</fo:inline></fo:inline> in
              <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag(dirty_cpu_schedulers_online,
              DirtyCPUSchedulersOnline)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(dirty_cpu_schedulers_online)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(dirty_io_schedulers)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(schedulers)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(schedulers_online)</fo:inline></fo:inline>, and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag(schedulers_online,
              SchedulersOnline)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dirty_cpu_schedulers_online</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of dirty CPU schedulers online.
              The return value satisfies
              <fo:inline font-family="monospace">1 &lt;= DirtyCPUSchedulersOnline &lt;= N</fo:inline>,
              where <fo:inline font-family="monospace">N</fo:inline> is the smallest of the return values of
              <fo:inline font-family="monospace">erlang:system_info(dirty_cpu_schedulers)</fo:inline> and
              <fo:inline font-family="monospace">erlang:system_info(schedulers_online)</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of dirty CPU schedulers online can be set at
              startup by passing command-line flag
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+SDcpu</fo:inline></fo:inline> in
              <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(dirty_cpu_schedulers)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(dirty_io_schedulers)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(schedulers_online)</fo:inline></fo:inline>, and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag(dirty_cpu_schedulers_online,
              DirtyCPUSchedulersOnline)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dirty_io_schedulers</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of dirty I/O schedulers as an integer.
              Dirty I/O schedulers execute I/O-bound native functions,
              such as NIFs and linked-in driver code, which cannot be
              managed cleanly by the normal emulator schedulers.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This value can be set at startup by passing command-line
              argument <fo:inline font-style="italic"><fo:inline font-family="monospace">+SDio</fo:inline></fo:inline>
              in <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(dirty_cpu_schedulers)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(dirty_cpu_schedulers_online)</fo:inline></fo:inline>,
              and <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag(dirty_cpu_schedulers_online,
              DirtyCPUSchedulersOnline)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dist</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a binary containing a string of distribution
              information formatted as in Erlang crash dumps. For more
              information, see section <fo:inline font-style="italic">
              How to interpret the Erlang crash dumps</fo:inline>
              in the User's Guide.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dist_buf_busy_limit</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value of the distribution buffer busy limit
              in bytes. This limit can be set at startup by passing
              command-line flag
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+zdbbl</fo:inline></fo:inline>
              to <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dist_ctrl</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of tuples
              <fo:inline font-family="monospace">{Node, ControllingEntity}</fo:inline>,
              one entry for each connected remote node.
              <fo:inline font-family="monospace">Node</fo:inline> is the node name
              and <fo:inline font-family="monospace">ControllingEntity</fo:inline> is the port or process
              identifier responsible for the communication to that node.
              More specifically, <fo:inline font-family="monospace">ControllingEntity</fo:inline> for
              nodes connected through TCP/IP (the normal case) is the socket
              used in communication with the specific node.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">driver_version</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a string containing the Erlang driver version
              used by the runtime system. It has the form
              <fo:inline font-style="italic">
              "&lt;major ver&gt;.&lt;minor ver&gt;"</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dynamic_trace</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an atom describing the dynamic trace framework
              compiled into the virtual machine. It can be
              <fo:inline font-family="monospace">dtrace</fo:inline>, <fo:inline font-family="monospace">systemtap</fo:inline>, or <fo:inline font-family="monospace">none</fo:inline>. For a
              commercial or standard build, it is always <fo:inline font-family="monospace">none</fo:inline>.
              The other return values indicate a custom configuration
              (for example, <fo:inline font-family="monospace">./configure --with-dynamic-trace=dtrace</fo:inline>).
              For more information about dynamic tracing, see
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">dyntrace(3)</fo:inline></fo:inline> manual page and the
              <fo:inline font-family="monospace">README.dtrace</fo:inline>/<fo:inline font-family="monospace">README.systemtap</fo:inline> files in the
              Erlang source code top directory.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dynamic_trace_probes</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a <fo:inline font-family="monospace">boolean()</fo:inline> indicating if dynamic trace
              probes (<fo:inline font-family="monospace">dtrace</fo:inline> or <fo:inline font-family="monospace">systemtap</fo:inline>) are built into
              the emulator. This can only be <fo:inline font-family="monospace">true</fo:inline> if the virtual
              machine was built for dynamic tracing (that is,
              <fo:inline font-family="monospace">system_info(dynamic_trace)</fo:inline> returns
              <fo:inline font-family="monospace">dtrace</fo:inline> or <fo:inline font-family="monospace">systemtap</fo:inline>).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">end_time</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The last <fo:inline font-style="italic">Erlang monotonic
              time</fo:inline> in <fo:inline font-family="monospace">native</fo:inline>
              <fo:inline font-style="italic">time unit</fo:inline> that
              can be represented internally in the current Erlang runtime system
              instance. The time between the
              <fo:inline font-style="italic">start time</fo:inline> and
              the end time is at least a quarter of a millennium.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">elib_malloc</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option will be removed in a future release.
              The return value will always be <fo:inline font-family="monospace">false</fo:inline>, as the
              <fo:inline font-family="monospace">elib_malloc</fo:inline> allocator has been removed.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            <fo:inline font-family="monospace">eager_check_io</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value of command-line flag
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+secio</fo:inline></fo:inline> in
              <fo:inline font-family="monospace">erl(1)</fo:inline>, which is either <fo:inline font-family="monospace">true</fo:inline> or <fo:inline font-family="monospace">false</fo:inline>.
              For information about the different values, see the
              documentation of the command-line flag.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ets_limit</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the maximum number of ETS tables allowed. This
              limit can be increased at startup by passing
              command-line flag
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+e</fo:inline></fo:inline> to
              <fo:inline font-family="monospace">erl(1)</fo:inline> or by setting environment variable
              <fo:inline font-family="monospace">ERL_MAX_ETS_TABLES</fo:inline> before starting the Erlang
              runtime system.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">heap_sizes</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of integers representing valid heap sizes 
              in words. All Erlang heaps are sized from sizes in this
              list.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">heap_type</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the heap type used by the current emulator. One
              heap type exists:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">private</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                Each process has a heap reserved for its use and no
                references between heaps of different processes are
                allowed. Messages passed between processes are copied
                between heaps.
              </fo:block></fo:block-container>
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">info</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a binary containing a string of miscellaneous
              system information formatted as in Erlang crash dumps.
              For more information, see section
              <fo:inline font-style="italic">
              How to interpret the Erlang crash dumps</fo:inline>
              in the User's Guide.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">kernel_poll</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if the emulator uses some kind of
              kernel-poll implementation, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">loaded</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a binary containing a string of loaded module
              information formatted as in Erlang crash dumps. For more
              information, see section
              <fo:inline font-style="italic">How to interpret the Erlang
              crash dumps</fo:inline> in the User's Guide.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">logical_processors</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the detected number of logical processors configured
              in the system. The return value is either an integer, or
              the atom <fo:inline font-family="monospace">unknown</fo:inline> if the emulator cannot
              detect the configured logical processors.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">logical_processors_available</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the detected number of logical processors available
              to the Erlang runtime system. The return value is either an
              integer, or the atom <fo:inline font-family="monospace">unknown</fo:inline> if the emulator
              cannot detect the available logical processors. The number
              of available logical processors is less than or equal to
              the number of <fo:inline font-style="italic">
              logical processors online</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">logical_processors_online</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the detected number of logical processors online on
              the system. The return value is either an integer,
              or the atom <fo:inline font-family="monospace">unknown</fo:inline> if the emulator cannot
              detect logical processors online. The number of logical
              processors online is less than or equal to the number of
              <fo:inline font-style="italic">logical processors
              configured</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">machine</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a string containing the Erlang machine name.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">modified_timing_level</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the modified timing-level (an integer) if
              modified timing is enabled, otherwise <fo:inline font-family="monospace">undefined</fo:inline>.
              For more information about modified timing, see
              command-line flag
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+T</fo:inline></fo:inline>
              in <fo:inline font-family="monospace">erl(1)</fo:inline></fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">multi_scheduling</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns one of the following:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">disabled</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The emulator has only one scheduler thread. The
                  emulator does not have SMP support, or have been
                  started with only one scheduler thread.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">blocked</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The emulator has more than one scheduler thread,
                  but all scheduler threads except one are blocked.
                  That is, only one scheduler thread schedules
                  Erlang processes and executes Erlang code.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">blocked_normal</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The emulator has more than one scheduler thread,
                  but all normal scheduler threads except one are
                  blocked. Notice that dirty schedulers are not
                  blocked, and can schedule Erlang processes and
                  execute native code.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enabled</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The emulator has more than one scheduler thread,
                  and no scheduler threads are blocked. That is,
                  all available scheduler threads schedule
                  Erlang processes and execute Erlang code.</fo:block>
              </fo:block></fo:block-container>
            </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag(multi_scheduling, BlockState)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(multi_scheduling_blockers)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(normal_multi_scheduling_blockers)</fo:inline></fo:inline>,
              and <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(schedulers)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">multi_scheduling_blockers</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of <fo:inline font-family="monospace">Pid</fo:inline>s when
              multi-scheduling is blocked, otherwise the empty list is
              returned. The <fo:inline font-family="monospace">Pid</fo:inline>s in the list
              represent all the processes currently
              blocking multi-scheduling. A <fo:inline font-family="monospace">Pid</fo:inline> occurs
              only once in the list, even if the corresponding
              process has blocked multiple times.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag(multi_scheduling, BlockState)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(multi_scheduling)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(normal_multi_scheduling_blockers)</fo:inline></fo:inline>,
              and <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(schedulers)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nif_version</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a string containing the version of the Erlang NIF
              interface used by the runtime system. It is on the form
              "&lt;major ver&gt;.&lt;minor ver&gt;".</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">normal_multi_scheduling_blockers</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of <fo:inline font-family="monospace">Pid</fo:inline>s when
              normal multi-scheduling is blocked (that is, all normal schedulers
              but one is blocked), otherwise the empty list is returned.
              The <fo:inline font-family="monospace">Pid</fo:inline>s in the list represent all the
              processes currently blocking normal multi-scheduling.
              A <fo:inline font-family="monospace">Pid</fo:inline> occurs only once in the list, even if
              the corresponding process has blocked multiple times.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag(multi_scheduling, BlockState)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(multi_scheduling)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(multi_scheduling_blockers)</fo:inline></fo:inline>,
              and <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(schedulers)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            <fo:inline font-family="monospace">otp_release</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a string containing the OTP release number of the
              OTP release that the currently executing ERTS application
              is part of.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from Erlang/OTP 17, the OTP release number corresponds to
              the major OTP version number. No
              <fo:inline font-family="monospace">erlang:system_info()</fo:inline> argument gives the exact OTP
              version. This is because the exact OTP version in the general case
              is difficult to determine. For more information, see the
              description of versions in
              <fo:inline font-style="italic">
              System principles</fo:inline> in System Documentation.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            <fo:inline font-family="monospace">os_monotonic_time_source</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list containing information about the source of
              <fo:inline font-style="italic">OS
              monotonic time</fo:inline> that is used by the runtime system.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">[]</fo:inline> is returned, no OS monotonic time is
              available. The list contains two-tuples with <fo:inline font-family="monospace">Key</fo:inline>s
              as first element, and <fo:inline font-family="monospace">Value</fo:inline>s as second element. The
              order of these tuples is undefined. The following
              tuples can be part of the list, but more tuples can be
              introduced in the future:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{function, Function}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Function</fo:inline> is the name of the function
                used. This tuple always exists if OS monotonic time is
                available to the runtime system.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{clock_id, ClockId}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This tuple only exists if <fo:inline font-family="monospace">Function</fo:inline>
                can be used with different clocks. <fo:inline font-family="monospace">ClockId</fo:inline>
                corresponds to the clock identifier used when calling
                <fo:inline font-family="monospace">Function</fo:inline>.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{resolution, OsMonotonicTimeResolution}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Highest possible
                <fo:inline font-style="italic">
                resolution</fo:inline>
                of current OS monotonic time source as parts per
                second. If no resolution information can be retrieved
                from the OS, <fo:inline font-family="monospace">OsMonotonicTimeResolution</fo:inline> is
                set to the resolution of the time unit of
                <fo:inline font-family="monospace">Function</fo:inline>s return value. That is, the actual
                resolution can be lower than
                <fo:inline font-family="monospace">OsMonotonicTimeResolution</fo:inline>. Notice that
                the resolution does not say anything about the
                <fo:inline font-style="italic">
                accuracy</fo:inline> or whether the
                <fo:inline font-style="italic">
                precision</fo:inline> aligns with the resolution. You do,
                however, know that the precision is not better than
                <fo:inline font-family="monospace">OsMonotonicTimeResolution</fo:inline>.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{extended, Extended}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Extended</fo:inline> equals <fo:inline font-family="monospace">yes</fo:inline> if
                the range of time values has been extended;
                otherwise <fo:inline font-family="monospace">Extended</fo:inline> equals <fo:inline font-family="monospace">no</fo:inline>. The
                range must be extended if <fo:inline font-family="monospace">Function</fo:inline>
                returns values that wrap fast. This typically
                is the case when the return value is a 32-bit value.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{parallel, Parallel}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Parallel</fo:inline> equals <fo:inline font-family="monospace">yes</fo:inline> if
                <fo:inline font-family="monospace">Function</fo:inline> is called in parallel from multiple
                threads. If it is not called in parallel, because
                calls must be serialized, <fo:inline font-family="monospace">Parallel</fo:inline> equals
                <fo:inline font-family="monospace">no</fo:inline>.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{time, OsMonotonicTime}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OsMonotonicTime</fo:inline> equals current OS
                monotonic time in <fo:inline font-family="monospace">native</fo:inline>
                <fo:inline font-style="italic">time unit</fo:inline>.</fo:block>
              </fo:block></fo:block-container>
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
          <fo:inline font-family="monospace">os_system_time_source</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list containing information about the source of
              <fo:inline font-style="italic">OS
              system time</fo:inline> that is used by the runtime system.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The list contains two-tuples with <fo:inline font-family="monospace">Key</fo:inline>s
              as first element, and <fo:inline font-family="monospace">Value</fo:inline>s as second element. The
              order if these tuples is undefined. The following
              tuples can be part of the list, but more tuples can be
              introduced in the future:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{function, Function}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Function</fo:inline> is the name of the funcion used.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{clock_id, ClockId}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Exists only if <fo:inline font-family="monospace">Function</fo:inline>
                can be used with different clocks. <fo:inline font-family="monospace">ClockId</fo:inline>
                corresponds to the clock identifier used when calling
                <fo:inline font-family="monospace">Function</fo:inline>.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{resolution, OsSystemTimeResolution}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Highest possible
                <fo:inline font-style="italic">
                resolution</fo:inline>
                of current OS system time source as parts per
                second. If no resolution information can be retrieved
                from the OS, <fo:inline font-family="monospace">OsSystemTimeResolution</fo:inline> is
                set to the resolution of the time unit of
                <fo:inline font-family="monospace">Function</fo:inline>s return value. That is, the actual
                resolution can be lower than
                <fo:inline font-family="monospace">OsSystemTimeResolution</fo:inline>. Notice that
                the resolution does not say anything about the
                <fo:inline font-style="italic">
                accuracy</fo:inline> or whether the
                <fo:inline font-style="italic">
                precision</fo:inline> do align with the resolution. You do,
                however, know that the precision is not better than
                <fo:inline font-family="monospace">OsSystemTimeResolution</fo:inline>.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{parallel, Parallel}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Parallel</fo:inline> equals <fo:inline font-family="monospace">yes</fo:inline> if
                <fo:inline font-family="monospace">Function</fo:inline> is called in parallel from multiple
                threads. If it is not called in parallel, because
                calls needs to be serialized, <fo:inline font-family="monospace">Parallel</fo:inline> equals
                <fo:inline font-family="monospace">no</fo:inline>.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{time, OsSystemTime}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OsSystemTime</fo:inline> equals current OS
                system time in <fo:inline font-family="monospace">native</fo:inline>
                <fo:inline font-style="italic">time unit</fo:inline>.</fo:block>
              </fo:block></fo:block-container>
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">port_parallelism</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the default port parallelism scheduling hint used.
              For more information, see command-line argument
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+spp</fo:inline></fo:inline>
              in <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">port_count</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of ports currently existing at the
              local node. The value is given as an integer. This is
              the same value as returned by
              <fo:inline font-family="monospace">length(erlang:ports())</fo:inline>, but more efficient.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">port_limit</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
          
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the maximum number of simultaneously existing
              ports at the local node as an integer. This limit can be
              configured at startup by using command-line flag
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+Q</fo:inline></fo:inline> in <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            <fo:inline font-family="monospace">process_count</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of processes currently existing at the
              local node. The value is given as an integer. This is
              the same value as returned by
              <fo:inline font-family="monospace">length(processes())</fo:inline>, but more efficient.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">process_limit</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the maximum number of simultaneously existing
              processes at the local node. The value is given as an
              integer. This limit can be configured at startup by using
              command-line flag <fo:inline font-style="italic"><fo:inline font-family="monospace">+P</fo:inline></fo:inline>
              in <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">procs</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a binary containing a string of process and port
              information formatted as in Erlang crash dumps. For more
              information, see section <fo:inline font-style="italic">
              How to interpret the Erlang crash dumps</fo:inline>
              in the User's Guide.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">scheduler_bind_type</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns information about how the user has requested
              schedulers to be bound or not bound.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that although a user has requested
              schedulers to be bound, they can silently have failed
              to bind. To inspect the scheduler bindings, call
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(scheduler_bindings)</fo:inline></fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see command-line argument
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt</fo:inline></fo:inline>
              in <fo:inline font-family="monospace">erl(1)</fo:inline> and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(scheduler_bindings)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">scheduler_bindings</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns information about the currently used scheduler
              bindings.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A tuple of a size equal to
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(schedulers)</fo:inline></fo:inline>
              is returned. The tuple elements are integers
              or the atom <fo:inline font-family="monospace">unbound</fo:inline>. Logical processor identifiers
              are represented as integers. The <fo:inline font-family="monospace">N</fo:inline>th
              element of the tuple equals the current binding for
              the scheduler with the scheduler identifier equal to
              <fo:inline font-family="monospace">N</fo:inline>. For example, if the schedulers are bound,
              <fo:inline font-family="monospace">element(erlang:system_info(scheduler_id),
              erlang:system_info(scheduler_bindings))</fo:inline> returns
              the identifier of the logical processor that the calling
              process is executing on.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that only schedulers online can be bound to logical
              processors.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see command-line argument
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt</fo:inline></fo:inline>
              in <fo:inline font-family="monospace">erl(1)</fo:inline> and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(schedulers_online)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">scheduler_id</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the scheduler ID (<fo:inline font-family="monospace">SchedulerId</fo:inline>) of the
              scheduler thread that the calling process is executing
              on. <fo:inline font-family="monospace">SchedulerId</fo:inline> is a positive integer,
              where <fo:inline font-family="monospace">1 &lt;= SchedulerId &lt;=
              erlang:system_info(schedulers)</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(schedulers)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">schedulers</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of scheduler threads used by
              the emulator. Scheduler threads online schedules Erlang
              processes and Erlang ports, and execute Erlang code
              and Erlang linked-in driver code.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of scheduler threads is determined at
              emulator boot time and cannot be changed later.
              However, the number of schedulers online can
              be changed at any time.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag(schedulers_online,
              SchedulersOnline)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(schedulers_online)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(scheduler_id)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag(multi_scheduling, BlockState)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(multi_scheduling)</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(normal_multi_scheduling_blockers)</fo:inline></fo:inline>
              and <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(multi_scheduling_blockers)</fo:inline></fo:inline>.
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">schedulers_online</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of schedulers online. The scheduler
              identifiers of schedulers online satisfy the relationship
              <fo:inline font-family="monospace">1 &lt;= SchedulerId &lt;=
              erlang:system_info(schedulers_online)</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(schedulers)</fo:inline></fo:inline> and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag(schedulers_online,
              SchedulersOnline)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">smp_support</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if the emulator has been compiled
              with SMP support, otherwise <fo:inline font-family="monospace">false</fo:inline> is returned.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">start_time</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic">Erlang monotonic
              time</fo:inline> in <fo:inline font-family="monospace">native</fo:inline>
              <fo:inline font-style="italic">time unit</fo:inline> at the
              time when current Erlang runtime system instance started.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(end_time)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">system_version</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a string containing version number and
              some important properties, such as the number of schedulers.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">system_architecture</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a string containing the processor and OS
              architecture the emulator is built for.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">threads</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if the emulator has been compiled
              with thread support, otherwise <fo:inline font-family="monospace">false</fo:inline> is returned.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">thread_pool_size</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of async threads in the async thread
              pool used for asynchronous driver calls
              (<fo:inline font-style="italic">
              <fo:inline font-family="monospace">erl_driver:driver_async()</fo:inline></fo:inline>).
              The value is given as an integer.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">time_correction</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a boolean value indicating whether
              <fo:inline font-style="italic">
              time correction</fo:inline> is enabled or not.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">time_offset</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the state of the time offset:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">preliminary</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time offset is preliminary, and will be changed
                  and finalized later. The preliminary time offset
                  is used during the preliminary phase of the
                  <fo:inline font-style="italic">
                  single time warp mode</fo:inline>.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">final</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time offset is final. This either because
                  <fo:inline font-style="italic">
                  no time warp mode</fo:inline> is used, or because the time
                  offset have been finalized when
                  <fo:inline font-style="italic">
                  single time warp mode</fo:inline> is used.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">volatile</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time offset is volatile. That is, it can
                  change at any time. This is because
                  <fo:inline font-style="italic">
                  multi-time warp mode</fo:inline> is used.</fo:block>
              </fo:block></fo:block-container>
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            <fo:inline font-family="monospace">time_warp_mode</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a value identifying the
              <fo:inline font-style="italic">
              time warp mode</fo:inline> that is used:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">no_time_warp</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The <fo:inline font-style="italic">
                no time warp mode</fo:inline> is used.
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">single_time_warp</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The <fo:inline font-style="italic">
                single time warp mode</fo:inline> is used.
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">multi_time_warp</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The <fo:inline font-style="italic">
                multi-time warp mode</fo:inline> is used.
              </fo:block></fo:block-container>
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">tolerant_timeofday</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns whether a pre ERTS 7.0 backwards compatible
              compensation for sudden changes of system time is <fo:inline font-family="monospace">enabled</fo:inline>
              or <fo:inline font-family="monospace">disabled</fo:inline>. Such compensation is <fo:inline font-family="monospace">enabled</fo:inline> when the
              <fo:inline font-style="italic">time offset</fo:inline>
              is <fo:inline font-family="monospace">final</fo:inline>, and
              <fo:inline font-style="italic">
              time correction</fo:inline> is enabled.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trace_control_word</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value of the node trace control word. For
              more information, see function <fo:inline font-family="monospace">get_tcw</fo:inline> in section
              <fo:inline font-style="italic">
              Match Specifications in Erlang</fo:inline> in the User's Guide.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">update_cpu_info</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime system rereads the CPU information available
              and updates its internally stored information about the
              <fo:inline font-style="italic">detected
              CPU topology</fo:inline> and the number of logical processors
              <fo:inline font-style="italic">configured</fo:inline>,
              <fo:inline font-style="italic">online</fo:inline>,
              and <fo:inline font-style="italic">
              available</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the CPU information has changed since the last time
              it was read, the atom <fo:inline font-family="monospace">changed</fo:inline> is returned, otherwise
              the atom <fo:inline font-family="monospace">unchanged</fo:inline>. If the CPU information has changed,
              you probably want to
              <fo:inline font-style="italic">adjust the
              number of schedulers online</fo:inline>. You typically want
              to have as many schedulers online as
              <fo:inline font-style="italic">logical
              processors available</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">version</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a string containing the version number of the
              emulator.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">wordsize</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">{wordsize, internal}</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{wordsize, internal}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the size of Erlang term words in bytes as an
              integer, that is, 4 is returned on a 32-bit architecture,
              and 8 is returned on a pure 64-bit architecture. On a
              halfword 64-bit emulator, 4 is returned, as the Erlang
              terms are stored using a virtual word size of half the
              system word size.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{wordsize, external}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the true word size of the emulator, that is,
              the size of a pointer. The value is given in bytes
              as an integer. On a pure 32-bit architecture, 4 is
              returned. On both a half word and on a pure
              64-bit architecture, 8 is returned.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">scheduler</fo:inline> has changed name to
            <fo:inline font-family="monospace">scheduler_id</fo:inline> to avoid mix up with argument
            <fo:inline font-family="monospace">schedulers</fo:inline>. Argument <fo:inline font-family="monospace">scheduler</fo:inline> was
            introduced in ERTS 5.5 and renamed in
            ERTS 5.5.1.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16058960"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_monitor() -&gt; MonSettings</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MonSettings = undefined | {MonitorPid, Options}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MonitorPid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">system_monitor_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">system_monitor_option() = <fo:block/>    busy_port |<fo:block/>    busy_dist_port |<fo:block/>    {long_gc, integer() &gt;= 0} |<fo:block/>    {long_schedule, integer() &gt;= 0} |<fo:block/>    {large_heap, integer() &gt;= 0}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current system monitoring settings set by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_monitor/2</fo:inline></fo:inline>
          as <fo:inline font-family="monospace">{MonitorPid, Options}</fo:inline>,
          or <fo:inline font-family="monospace">undefined</fo:inline> if no settings exist. The order of the
          options can be different from the one that was set.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16065104"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_monitor(Arg) -&gt; MonSettings</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Arg = MonSettings = undefined | {MonitorPid, Options}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MonitorPid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">system_monitor_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">system_monitor_option() = <fo:block/>    busy_port |<fo:block/>    busy_dist_port |<fo:block/>    {long_gc, integer() &gt;= 0} |<fo:block/>    {long_schedule, integer() &gt;= 0} |<fo:block/>    {large_heap, integer() &gt;= 0}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When called with argument <fo:inline font-family="monospace">undefined</fo:inline>, all
          system performance monitoring settings are cleared.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling the function with <fo:inline font-family="monospace">{MonitorPid,
          Options}</fo:inline> as argument is the same as calling
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_monitor(MonitorPid,
          Options)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the previous system monitor settings just like
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_monitor/0</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16074080"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_monitor(MonitorPid, Options) -&gt; MonSettings</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MonitorPid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">system_monitor_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MonSettings = undefined | {OldMonitorPid, OldOptions}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OldMonitorPid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OldOptions = [<fo:inline font-style="italic">system_monitor_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">system_monitor_option() = <fo:block/>    busy_port |<fo:block/>    busy_dist_port |<fo:block/>    {long_gc, integer() &gt;= 0} |<fo:block/>    {long_schedule, integer() &gt;= 0} |<fo:block/>    {large_heap, integer() &gt;= 0}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the system performance monitoring options.
          <fo:inline font-family="monospace">MonitorPid</fo:inline> is a local process identifier (pid)
          receiving system monitor messages. The
          second argument is a list of monitoring options:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{long_gc, Time}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a garbage collection in the system takes at least
              <fo:inline font-family="monospace">Time</fo:inline> wall clock milliseconds, a message
              <fo:inline font-family="monospace">{monitor, GcPid, long_gc, Info}</fo:inline> is sent to
              <fo:inline font-family="monospace">MonitorPid</fo:inline>. <fo:inline font-family="monospace">GcPid</fo:inline> is the pid that
              was garbage collected. <fo:inline font-family="monospace">Info</fo:inline> is a list of two-element
              tuples describing the result of the garbage collection.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One of the tuples is <fo:inline font-family="monospace">{timeout, GcTime}</fo:inline>, where
              <fo:inline font-family="monospace">GcTime</fo:inline> is the time for the garbage
              collection in milliseconds. The other tuples are
              tagged with <fo:inline font-family="monospace">heap_size</fo:inline>, <fo:inline font-family="monospace">heap_block_size</fo:inline>,
              <fo:inline font-family="monospace">stack_size</fo:inline>, <fo:inline font-family="monospace">mbuf_size</fo:inline>, <fo:inline font-family="monospace">old_heap_size</fo:inline>,
              and <fo:inline font-family="monospace">old_heap_block_size</fo:inline>. These tuples are
              explained in the description of trace message
              <fo:inline font-style="italic"><fo:inline font-family="monospace">gc_minor_start</fo:inline></fo:inline>
              (see <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline>).
              New tuples can be added, and the order of the tuples in
              the <fo:inline font-family="monospace">Info</fo:inline> list can be changed at any time without
              prior notice.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{long_schedule, Time}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a process or port in the system runs uninterrupted
              for at least <fo:inline font-family="monospace">Time</fo:inline> wall clock milliseconds, a
              message <fo:inline font-family="monospace">{monitor, PidOrPort, long_schedule, Info}</fo:inline>
              is sent to <fo:inline font-family="monospace">MonitorPid</fo:inline>. <fo:inline font-family="monospace">PidOrPort</fo:inline> is the
              process or port that was running. <fo:inline font-family="monospace">Info</fo:inline> is a
              list of two-element tuples describing the event.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a <fo:inline font-family="monospace">pid()</fo:inline>, the tuples <fo:inline font-family="monospace">{timeout, Millis}</fo:inline>,
              <fo:inline font-family="monospace">{in, Location}</fo:inline>, and <fo:inline font-family="monospace">{out, Location}</fo:inline> are
              present, where <fo:inline font-family="monospace">Location</fo:inline> is either an MFA
              (<fo:inline font-family="monospace">{Module, Function, Arity}</fo:inline>) describing the
              function where the process was scheduled in/out, or the
              atom <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a <fo:inline font-family="monospace">port()</fo:inline>, the
              tuples <fo:inline font-family="monospace">{timeout, Millis}</fo:inline> and <fo:inline font-family="monospace">{port_op,Op}</fo:inline>
              are present. <fo:inline font-family="monospace">Op</fo:inline> is one of <fo:inline font-family="monospace">proc_sig</fo:inline>,
              <fo:inline font-family="monospace">timeout</fo:inline>, <fo:inline font-family="monospace">input</fo:inline>, <fo:inline font-family="monospace">output</fo:inline>,
              <fo:inline font-family="monospace">event</fo:inline>, or <fo:inline font-family="monospace">dist_cmd</fo:inline>, depending on which
              driver callback was executing.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">proc_sig</fo:inline> is an
              internal operation and is never to appear, while the
              others represent the corresponding driver callbacks
              <fo:inline font-family="monospace">timeout</fo:inline>, <fo:inline font-family="monospace">ready_input</fo:inline>, <fo:inline font-family="monospace">ready_output</fo:inline>,
              <fo:inline font-family="monospace">event</fo:inline>, and <fo:inline font-family="monospace">outputv</fo:inline> (when the port
              is used by distribution). Value <fo:inline font-family="monospace">Millis</fo:inline> in
              tuple <fo:inline font-family="monospace">timeout</fo:inline> informs about the
              uninterrupted execution time of the process or port, which
              always is equal to or higher than the <fo:inline font-family="monospace">Time</fo:inline> value
              supplied when starting the trace. New tuples can be
              added to the <fo:inline font-family="monospace">Info</fo:inline> list in a future release. The
              order of the tuples in the list can be changed at any
              time without prior notice.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This can be used to detect problems with NIFs or
              drivers that take too long to execute. 1 ms is
              considered a good maximum time for a driver callback
              or a NIF. However, a time-sharing system is usually to
              consider everything &lt; 100 ms as "possible" and
              fairly "normal". However, longer schedule times can
              indicate swapping or a misbehaving NIF/driver.
              Misbehaving NIFs and drivers can cause bad resource
              utilization and bad overall system performance.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{large_heap, Size}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a garbage collection in the system results in
              the allocated size of a heap being at least <fo:inline font-family="monospace">Size</fo:inline>
              words, a message <fo:inline font-family="monospace">{monitor, GcPid, large_heap, Info}</fo:inline>
              is sent to <fo:inline font-family="monospace">MonitorPid</fo:inline>.
              <fo:inline font-family="monospace">GcPid</fo:inline> and <fo:inline font-family="monospace">Info</fo:inline>
              are the same as for <fo:inline font-family="monospace">long_gc</fo:inline> earlier, except that
              the tuple tagged with <fo:inline font-family="monospace">timeout</fo:inline> is not present.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The monitor message is sent if the sum of the sizes of
              all memory blocks allocated for all heap generations after
              a garbage collection is equal to or higher than <fo:inline font-family="monospace">Size</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a process is killed by
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">max_heap_size</fo:inline></fo:inline>, it is killed before the
              garbage collection is complete and thus no large heap message
              is sent.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">busy_port</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a process in the system gets suspended because it
              sends to a busy port, a message
              <fo:inline font-family="monospace">{monitor, SusPid, busy_port, Port}</fo:inline> is sent to
              <fo:inline font-family="monospace">MonitorPid</fo:inline>. <fo:inline font-family="monospace">SusPid</fo:inline> is the pid
              that got suspended when sending to <fo:inline font-family="monospace">Port</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">busy_dist_port</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a process in the system gets suspended because it
              sends to a process on a remote node whose inter-node
              communication was handled by a busy port, a message
              <fo:inline font-family="monospace">{monitor, SusPid, busy_dist_port, Port}</fo:inline> is sent to
              <fo:inline font-family="monospace">MonitorPid</fo:inline>. <fo:inline font-family="monospace">SusPid</fo:inline> is the pid
              that got suspended when sending through the inter-node
              communication port <fo:inline font-family="monospace">Port</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the previous system monitor settings just like
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_monitor/0</fo:inline></fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a monitoring process gets so large that it itself
            starts to cause system monitor messages when garbage
            collecting, the messages enlarge the process
            message queue and probably make the problem worse.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Keep the monitoring process neat and do not set the system
            monitor limits too tight.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If <fo:inline font-family="monospace">MonitorPid</fo:inline> does not exist.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If <fo:inline font-family="monospace">MonitorPid</fo:inline> is not a local process.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16130208"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_profile() -&gt; ProfilerSettings</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ProfilerSettings = undefined | {ProfilerPid, Options}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ProfilerPid = pid() | port()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">system_profile_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">system_profile_option() = <fo:block/>    exclusive |<fo:block/>    runnable_ports |<fo:block/>    runnable_procs |<fo:block/>    scheduler |<fo:block/>    timestamp |<fo:block/>    monotonic_timestamp |<fo:block/>    strict_monotonic_timestamp</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current system profiling settings set by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_profile/2</fo:inline></fo:inline>
          as <fo:inline font-family="monospace">{ProfilerPid, Options}</fo:inline>,
          or <fo:inline font-family="monospace">undefined</fo:inline> if there
          are no settings. The order of the options can be different
          from the one that was set.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16136352"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_profile(ProfilerPid, Options) -&gt; ProfilerSettings</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ProfilerPid = pid() | port() | undefined</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">system_profile_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ProfilerSettings = <fo:block/>    undefined | {pid() | port(), [<fo:inline font-style="italic">system_profile_option()</fo:inline>]}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">system_profile_option() = <fo:block/>    exclusive |<fo:block/>    runnable_ports |<fo:block/>    runnable_procs |<fo:block/>    scheduler |<fo:block/>    timestamp |<fo:block/>    monotonic_timestamp |<fo:block/>    strict_monotonic_timestamp</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets system profiler options. <fo:inline font-family="monospace">ProfilerPid</fo:inline>
          is a local process identifier (pid) or port receiving profiling
          messages. The receiver is excluded from all profiling.
          The second argument is a list of profiling options:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">exclusive</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a synchronous call to a port from a process is done, the
              calling process is considered not runnable during the call
              runtime to the port. The calling process is notified as
              <fo:inline font-family="monospace">inactive</fo:inline>, and later <fo:inline font-family="monospace">active</fo:inline> when the port
              callback returns.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">monotonic_timestamp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Time stamps in profile messages use
              <fo:inline font-style="italic">Erlang
              monotonic time</fo:inline>. The time stamp (Ts) has the same
              format and value as produced by
              <fo:inline font-family="monospace">erlang:monotonic_time(nanosecond)</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">runnable_procs</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a process is put into or removed from the run queue, a
              message, <fo:inline font-family="monospace">{profile, Pid, State, Mfa, Ts}</fo:inline>, is sent to
              <fo:inline font-family="monospace">ProfilerPid</fo:inline>. Running processes that
              are reinserted into the run queue after having been
              pre-empted do not trigger this message.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">runnable_ports</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a port is put into or removed from the run queue, a 
              message, <fo:inline font-family="monospace">{profile, Port, State, 0, Ts}</fo:inline>, is sent to
              <fo:inline font-family="monospace">ProfilerPid</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">scheduler</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a scheduler is put to sleep or awoken, a message,
              <fo:inline font-family="monospace">{profile, scheduler, Id, State, NoScheds, Ts}</fo:inline>, is
              sent to <fo:inline font-family="monospace">ProfilerPid</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">strict_monotonic_timestamp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Time stamps in profile messages consist of
              <fo:inline font-style="italic">Erlang
              monotonic time</fo:inline> and a monotonically increasing
              integer. The time stamp (Ts) has the same format and value
              as produced by <fo:inline font-family="monospace">{erlang:monotonic_time(nanosecond),
              erlang:unique_integer([monotonic])}</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">timestamp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Time stamps in profile messages include a
              time stamp (Ts) that has the same form as returned by
              <fo:inline font-family="monospace">erlang:now()</fo:inline>. This is also the default if no
              time stamp flag is specified. If <fo:inline font-family="monospace">cpu_timestamp</fo:inline> has
              been enabled through
              <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline>,
              this also effects the time stamp produced in profiling messages
              when flag <fo:inline font-family="monospace">timestamp</fo:inline> is enabled.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erlang:system_profile</fo:inline> behavior can change
            in a future release.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16162192"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_time() -&gt; integer()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns current
          <fo:inline font-style="italic">
          Erlang system time</fo:inline> in <fo:inline font-family="monospace">native</fo:inline>
          <fo:inline font-style="italic">time unit</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling <fo:inline font-family="monospace">erlang:system_time()</fo:inline> is equivalent to
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:monotonic_time()</fo:inline></fo:inline><fo:inline font-family="monospace"> +
          </fo:inline><fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:time_offset()</fo:inline></fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This time is <fo:inline font-weight="bold">not</fo:inline> a monotonically increasing time
            in the general case. For more information, see the documentation of
            <fo:inline font-style="italic">
            time warp modes</fo:inline> in the User's Guide.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16172032"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:system_time(Unit) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Unit = <fo:inline font-style="italic">time_unit()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns current
          <fo:inline font-style="italic">
          Erlang system time</fo:inline>
          converted into the <fo:inline font-family="monospace">Unit</fo:inline> passed as argument.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling <fo:inline font-family="monospace">erlang:system_time(Unit)</fo:inline> is equivalent
          to <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:convert_time_unit</fo:inline></fo:inline><fo:inline font-family="monospace">(</fo:inline><fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:system_time()</fo:inline></fo:inline><fo:inline font-family="monospace">,
          native, Unit)</fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This time is <fo:inline font-weight="bold">not</fo:inline> a monotonically increasing time
            in the general case. For more information, see the documentation of
            <fo:inline font-style="italic">
            time warp modes</fo:inline> in the User's Guide.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16182336"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">term_to_binary(Term) -&gt; <fo:inline font-style="italic">ext_binary()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a binary data object that is the result of encoding
          <fo:inline font-family="monospace">Term</fo:inline> according to the
          <fo:inline font-style="italic">Erlang external
          term format.</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This can be used for various purposes, for example,
          writing a term to a file in an efficient way, or sending an
          Erlang term to some type of communications channel not
          supported by distributed Erlang.</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">Bin = term_to_binary(hello).</fo:inline>
&lt;&lt;131,100,0,5,104,101,108,108,111&gt;&gt;
&gt; <fo:inline font-weight="bold">hello = binary_to_term(Bin).</fo:inline>
hello
</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">binary_to_term/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16189728"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">term_to_binary(Term, Options) -&gt; <fo:inline font-style="italic">ext_binary()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = <fo:block/>    [compressed |<fo:block/>     {compressed, Level :: 0..9} |<fo:block/>     {minor_version, Version :: 0..1}]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a binary data object that is the result of encoding
          <fo:inline font-family="monospace">Term</fo:inline> according to the Erlang external
          term format.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If option <fo:inline font-family="monospace">compressed</fo:inline> is provided, the external term
          format is compressed. The compressed format is automatically
          recognized by <fo:inline font-family="monospace">binary_to_term/1</fo:inline> as from Erlang/OTP R7B.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A compression level can be specified by giving option
          <fo:inline font-family="monospace">{compressed, Level}</fo:inline>.
          <fo:inline font-family="monospace">Level</fo:inline> is an integer
          with range 0..9, where:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">0</fo:inline> - No compression is done (it is the same as
            giving no <fo:inline font-family="monospace">compressed</fo:inline> option).</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">1</fo:inline> - Takes least time but may not compress
            as well as the higher levels.</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">6</fo:inline> - Default level when option <fo:inline font-family="monospace">compressed</fo:inline>
            is provided.</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">9</fo:inline> - Takes most time and tries to produce a smaller
            result. Notice "tries" in the preceding sentence; depending
            on the input term, level 9 compression either does or does
            not produce a smaller result than level 1 compression.</fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">{minor_version, Version}</fo:inline>
          can be used to control some
          encoding details. This option was introduced in Erlang/OTP R11B-4.
          The valid values for <fo:inline font-family="monospace">Version</fo:inline> are:</fo:block>
	  <fo:block space-after="0.25em" space-before="0.25em">
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">0</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Floats are encoded using a textual representation.
	      This option is useful to ensure that releases before Erlang/OTP
	      R11B-4 can decode resulting binary.</fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This version encode atoms that can be represented by a
	      latin1 string using latin1 encoding while only atoms that
	      cannot be represented by latin1 are encoded using utf8.</fo:block>
	    </fo:block></fo:block-container>
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">1</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is as of Erlang/OTP 17.0 the default. It forces any floats
	      in the term to be encoded in a more space-efficient and exact way
	      (namely in the 64-bit IEEE format, rather than converted to a
	      textual representation). As from Erlang/OTP R11B-4,
	      <fo:inline font-family="monospace">binary_to_term/1</fo:inline> can decode this representation.</fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This version encode atoms that can be represented by a
	      latin1 string using latin1 encoding while only atoms that
	      cannot be represented by latin1 are encoded using utf8.</fo:block>
	    </fo:block></fo:block-container>
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">2</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Drops usage of the latin1 atom encoding and unconditionally
	      use utf8 encoding for all atoms. This will be changed to the
	      default in a future major release of Erlang/OTP. Erlang/OTP
	      systems as of R16B can decode this representation.</fo:block>
	    </fo:block></fo:block-container>
	  </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">binary_to_term/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16212688"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">throw(Any) -&gt; no_return()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Any = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A non-local return from a function. If evaluated within a
          <fo:inline font-family="monospace">catch</fo:inline>, <fo:inline font-family="monospace">catch</fo:inline> returns value <fo:inline font-family="monospace">Any</fo:inline>.
          Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">catch throw({hello, there}).</fo:inline>
{hello,there}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">nocatch</fo:inline> if not evaluated within a catch.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16218656"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">time() -&gt; Time</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Time = <fo:inline font-style="italic">calendar:time()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current time as <fo:inline font-family="monospace">{Hour, Minute, Second}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time zone and Daylight Saving Time correction depend on
          the underlying OS. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">time().</fo:inline>
{9,42,44}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16223168"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:time_offset() -&gt; integer()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current time offset between
          <fo:inline font-style="italic">
          Erlang monotonic time</fo:inline> and
          <fo:inline font-style="italic">
          Erlang system time</fo:inline> in
          <fo:inline font-family="monospace">native</fo:inline> <fo:inline font-style="italic">time unit</fo:inline>.
          Current time offset added to an Erlang monotonic time gives
          corresponding Erlang system time.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time offset may or may not change during operation depending
          on the <fo:inline font-style="italic">time
          warp mode</fo:inline> used.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A change in time offset can be observed at slightly
            different points in time by different processes.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the runtime system is in
            <fo:inline font-style="italic">multi-time
            warp mode</fo:inline>, the time offset is changed when
            the runtime system detects that the
            <fo:inline font-style="italic">OS system
            time</fo:inline> has changed. The runtime system will, however,
            not detect this immediately when it occurs. A task checking
            the time offset is scheduled to execute at least once a minute;
            so, under normal operation this is to be detected within a
            minute, but during heavy load it can take longer time.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16233232"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:time_offset(Unit) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Unit = <fo:inline font-style="italic">time_unit()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current time offset between
          <fo:inline font-style="italic">
          Erlang monotonic time</fo:inline> and
          <fo:inline font-style="italic">
          Erlang system time</fo:inline>
          converted into the <fo:inline font-family="monospace">Unit</fo:inline> passed as argument.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as calling
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:convert_time_unit</fo:inline></fo:inline><fo:inline font-family="monospace">(</fo:inline><fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:time_offset()</fo:inline></fo:inline><fo:inline font-family="monospace">, native,
          Unit)</fo:inline>
          however optimized for commonly used <fo:inline font-family="monospace">Unit</fo:inline>s.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16241952"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:timestamp() -&gt; Timestamp</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timestamp = <fo:inline font-style="italic">timestamp()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">timestamp() = <fo:block/>    {MegaSecs :: integer() &gt;= 0,<fo:block/>     Secs :: integer() &gt;= 0,<fo:block/>     MicroSecs :: integer() &gt;= 0}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns current
          <fo:inline font-style="italic">
          Erlang system time</fo:inline>
          on the format <fo:inline font-family="monospace">{MegaSecs, Secs, MicroSecs}</fo:inline>. This format is 
          the same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">os:timestamp/0</fo:inline></fo:inline>
          and the deprecated <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:now/0</fo:inline></fo:inline>
          use. The reason for the existence of <fo:inline font-family="monospace">erlang:timestamp()</fo:inline> is
          purely to simplify use for existing code that assumes this time stamp
          format. Current Erlang system time can more efficiently be retrieved
          in the time unit of your choice using
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_time/1</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">erlang:timestamp()</fo:inline> BIF is equivalent to:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
timestamp() -&gt;
    ErlangSystemTime = erlang:system_time(microsecond),
    MegaSecs = ErlangSystemTime div 1000000000000,
    Secs = ErlangSystemTime div 1000000 - MegaSecs*1000000,
    MicroSecs = ErlangSystemTime rem 1000000,
    {MegaSecs, Secs, MicroSecs}.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It, however, uses a native implementation that does
          not build garbage on the heap and with slightly better
          performance.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This time is <fo:inline font-weight="bold">not</fo:inline> a monotonically increasing time
            in the general case. For more information, see the documentation of
            <fo:inline font-style="italic">
            time warp modes</fo:inline> in the User's Guide.</fo:block>
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16254800"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">tl(List) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">List = [term(), ...]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the tail of <fo:inline font-family="monospace">List</fo:inline>, that is,
          the list minus the first element, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">tl([geesties, guilies, beasties]).</fo:inline>
[guilies, beasties]</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">List</fo:inline>
          is the empty list <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16261344"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:trace(PidPortSpec, How, FlagList) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">PidPortSpec = <fo:block/>    pid() |<fo:block/>    port() |<fo:block/>    all |<fo:block/>    processes |<fo:block/>    ports |<fo:block/>    existing |<fo:block/>    existing_processes |<fo:block/>    existing_ports |<fo:block/>    new |<fo:block/>    new_processes |<fo:block/>    new_ports</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">How = boolean()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FlagList = [<fo:inline font-style="italic">trace_flag()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_flag() = <fo:block/>    all |<fo:block/>    send |<fo:block/>    'receive' |<fo:block/>    procs |<fo:block/>    ports |<fo:block/>    call |<fo:block/>    arity |<fo:block/>    return_to |<fo:block/>    silent |<fo:block/>    running |<fo:block/>    exiting |<fo:block/>    running_procs |<fo:block/>    running_ports |<fo:block/>    garbage_collection |<fo:block/>    timestamp |<fo:block/>    cpu_timestamp |<fo:block/>    monotonic_timestamp |<fo:block/>    strict_monotonic_timestamp |<fo:block/>    set_on_spawn |<fo:block/>    set_on_first_spawn |<fo:block/>    set_on_link |<fo:block/>    set_on_first_link |<fo:block/>    {tracer, pid() | port()} |<fo:block/>    {tracer, module(), term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Turns on (if <fo:inline font-family="monospace">How == true</fo:inline>) or off (if
          <fo:inline font-family="monospace">How == false</fo:inline>) the trace flags in
          <fo:inline font-family="monospace">FlagList</fo:inline> for
          the process or processes represented by
          <fo:inline font-family="monospace">PidPortSpec</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">PidPortSpec</fo:inline> is either a process identifier
          (pid) for a local process, a port identifier,
          or one of the following atoms:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">all</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All currently existing processes and ports and all that
            will be created in the future.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">processes</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All currently existing processes and all that will be created
            in the future.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ports</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All currently existing ports and all that will be created in
            the future.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">existing</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All currently existing processes and ports.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">existing_processes</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All currently existing processes.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">existing_ports</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All currently existing ports.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">new</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All processes and ports that will be created in the future.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">new_processes</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All processes that will be created in the future.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">new_ports</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All ports that will be created in the future.
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">FlagList</fo:inline> can contain any number of the
          following flags (the "message tags" refers to the list of
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">trace messages</fo:inline></fo:inline>):</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">all</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets all trace flags except <fo:inline font-family="monospace">tracer</fo:inline> and
              <fo:inline font-family="monospace">cpu_timestamp</fo:inline>, which are in their nature different
              than the others.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">send</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces sending of messages.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Message tags:
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">send</fo:inline></fo:inline> and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">send_to_non_existing_process</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">'receive'</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces receiving of messages.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Message tags:
              <fo:inline font-style="italic">
                <fo:inline font-family="monospace">'receive'</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">call</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces certain function calls. Specify which function
              calls to trace by calling <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:trace_pattern/3</fo:inline></fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Message tags:
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">call</fo:inline></fo:inline> and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">return_from</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">silent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used with the <fo:inline font-family="monospace">call</fo:inline> trace flag.
              The <fo:inline font-family="monospace">call</fo:inline>, <fo:inline font-family="monospace">return_from</fo:inline>, and <fo:inline font-family="monospace">return_to</fo:inline>
              trace messages are inhibited if this flag is set, but they
              are executed as normal if there are match specifications.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Silent mode is inhibited by executing
              <fo:inline font-family="monospace">erlang:trace(_, false, [silent|_])</fo:inline>,
              or by a match specification executing the function
              <fo:inline font-family="monospace">{silent, false}</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">silent</fo:inline> trace flag facilitates setting up
              a trace on many or even all processes in the system.
              The trace can then be activated and deactivated using the match
              specification function <fo:inline font-family="monospace">{silent,Bool}</fo:inline>, giving
              a high degree of control of which functions with which 
              arguments that trigger the trace.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Message tags:
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">call</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">return_from</fo:inline></fo:inline>, and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">return_to</fo:inline></fo:inline>. Or rather, the absence of.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">return_to</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used with the <fo:inline font-family="monospace">call</fo:inline> trace flag.
              Traces the return from a traced function back to
              its caller. Only works for functions traced with
              option <fo:inline font-family="monospace">local</fo:inline> to <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:trace_pattern/3</fo:inline></fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics is that a trace message is sent when a
              call traced function returns, that is, when a
              chain of tail recursive calls ends. Only one trace
              message is sent per chain of tail recursive calls,
              so the properties of tail recursiveness for
              function calls are kept while tracing with this flag.
              Using <fo:inline font-family="monospace">call</fo:inline> and <fo:inline font-family="monospace">return_to</fo:inline> trace together
              makes it possible to know exactly in which function a
              process executes at any time.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To get trace messages containing return values from
              functions, use the <fo:inline font-family="monospace">{return_trace}</fo:inline> match
              specification action instead.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Message tags:
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">return_to</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">procs</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces process-related events.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Message tags:
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">spawn</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">spawned</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">exit</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">register</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">unregister</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">link</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">unlink</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">getting_linked</fo:inline></fo:inline>, and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">getting_unlinked</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ports</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces port-related events.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Message tags:
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">open</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">closed</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">register</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">unregister</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">getting_linked</fo:inline></fo:inline>, and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">getting_unlinked</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">running</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces scheduling of processes.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Message tags:
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">in</fo:inline></fo:inline> and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">out</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">exiting</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces scheduling of exiting processes.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Message tags:
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">in_exiting</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">out_exiting</fo:inline></fo:inline>, and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">out_exited</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">running_procs</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces scheduling of processes just like <fo:inline font-family="monospace">running</fo:inline>.
              However, this option also includes schedule events when the
              process executes within the context of a port without
              being scheduled out itself.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Message tags:
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">in</fo:inline></fo:inline> and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">out</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">running_ports</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces scheduling of ports.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Message tags:
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">in</fo:inline></fo:inline> and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">out</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">garbage_collection</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces garbage collections of processes.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Message tags:
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">gc_minor_start</fo:inline></fo:inline>,
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">gc_max_heap_size</fo:inline></fo:inline>, and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">gc_minor_end</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">timestamp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Includes a time stamp in all trace messages. The
              time stamp (Ts) has the same form as returned by
              <fo:inline font-family="monospace">erlang:now()</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cpu_timestamp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A global trace flag for the Erlang node that makes all
              trace time stamps using flag <fo:inline font-family="monospace">timestamp</fo:inline> to be
              in CPU time, not wall clock time. That is, <fo:inline font-family="monospace">cpu_timestamp</fo:inline>
              is not be used if <fo:inline font-family="monospace">monotonic_timestamp</fo:inline> or
              <fo:inline font-family="monospace">strict_monotonic_timestamp</fo:inline> is enabled.
              Only allowed with <fo:inline font-family="monospace">PidPortSpec==all</fo:inline>. If the
              host machine OS does not support high-resolution
              CPU time measurements, <fo:inline font-family="monospace">trace/3</fo:inline> exits with
              <fo:inline font-family="monospace">badarg</fo:inline>. Notice that most OS do
              not synchronize this value across cores, so be prepared
              that time can seem to go backwards when using this option.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">monotonic_timestamp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Includes an
              <fo:inline font-style="italic">Erlang
              monotonic time</fo:inline> time stamp in all trace messages. The
              time stamp (Ts) has the same format and value as produced by
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:monotonic_time(nanosecond)</fo:inline></fo:inline>.
              This flag overrides flag <fo:inline font-family="monospace">cpu_timestamp</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">strict_monotonic_timestamp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Includes an time stamp consisting of
              <fo:inline font-style="italic">Erlang
              monotonic time</fo:inline> and a monotonically increasing
              integer in all trace messages. The time stamp (Ts) has the
              same format and value as produced by <fo:inline font-family="monospace">{</fo:inline>
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:monotonic_time(nanosecond)</fo:inline></fo:inline><fo:inline font-family="monospace">,</fo:inline>
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:unique_integer([monotonic])</fo:inline></fo:inline><fo:inline font-family="monospace">}</fo:inline>.
              This flag overrides flag <fo:inline font-family="monospace">cpu_timestamp</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">arity</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used with the <fo:inline font-family="monospace">call</fo:inline> trace flag.
              <fo:inline font-family="monospace">{M, F, Arity}</fo:inline> is specified instead of
              <fo:inline font-family="monospace">{M, F, Args}</fo:inline> in call trace messages.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">set_on_spawn</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes any process created by a traced process inherit
              its trace flags, including flag <fo:inline font-family="monospace">set_on_spawn</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">set_on_first_spawn</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the first process created by a traced process
              inherit its trace flags, excluding flag
              <fo:inline font-family="monospace">set_on_first_spawn</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">set_on_link</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes any process linked by a traced process inherit its
              trace flags, including flag <fo:inline font-family="monospace">set_on_link</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">set_on_first_link</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the first process linked to by a traced process
              inherit its trace flags, excluding flag
              <fo:inline font-family="monospace">set_on_first_link</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{tracer, Tracer}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies where to send the trace messages. <fo:inline font-family="monospace">Tracer</fo:inline>
              must be the process identifier of a local process
              or the port identifier of a local port.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{tracer, TracerModule, TracerState}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies that a tracer module is to be called
              instead of sending a trace message. The tracer module
              can then ignore or change the trace message. For more details
              on how to write a tracer module, see
              <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_tracer(3)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no <fo:inline font-family="monospace">tracer</fo:inline> is specified, the calling process
          receives all the trace messages.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The effect of combining <fo:inline font-family="monospace">set_on_first_link</fo:inline> with
          <fo:inline font-family="monospace">set_on_link</fo:inline> is the same as
          <fo:inline font-family="monospace">set_on_first_link</fo:inline> alone. Likewise for
          <fo:inline font-family="monospace">set_on_spawn</fo:inline> and <fo:inline font-family="monospace">set_on_first_spawn</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The tracing process receives the <fo:inline font-weight="bold">trace messages</fo:inline> described
          in the following list. <fo:inline font-family="monospace">Pid</fo:inline> is the process identifier of the
          traced process in which the traced event has occurred. The
          third tuple element is the message tag.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If flag <fo:inline font-family="monospace">timestamp</fo:inline>, <fo:inline font-family="monospace">strict_monotonic_timestamp</fo:inline>, or
          <fo:inline font-family="monospace">monotonic_timestamp</fo:inline> is specified, the first tuple
          element is <fo:inline font-family="monospace">trace_ts</fo:inline> instead, and the time stamp
          is added as an extra element last in the message tuple. If
          multiple time stamp flags are passed, <fo:inline font-family="monospace">timestamp</fo:inline> has
          precedence over <fo:inline font-family="monospace">strict_monotonic_timestamp</fo:inline>, which
          in turn has precedence over <fo:inline font-family="monospace">monotonic_timestamp</fo:inline>. All
          time stamp flags are remembered, so if two are passed
          and the one with highest precedence later is disabled,
          the other one becomes active.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Trace messages:</fo:block>
        
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, PidPort, send, Msg, To}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">PidPort</fo:inline> sends message <fo:inline font-family="monospace">Msg</fo:inline> to
              process <fo:inline font-family="monospace">To</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, PidPort, send_to_non_existing_process, Msg, To}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">PidPort</fo:inline> sends message <fo:inline font-family="monospace">Msg</fo:inline> to
              the non-existing process <fo:inline font-family="monospace">To</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, PidPort, 'receive', Msg}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">PidPort</fo:inline> receives message <fo:inline font-family="monospace">Msg</fo:inline>.
              If <fo:inline font-family="monospace">Msg</fo:inline> is set to time-out, a receive
              statement can have timed out, or the process received
              a message with the payload <fo:inline font-family="monospace">timeout</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Pid, call, {M, F, Args}}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Pid</fo:inline> calls a traced function. The return
              values of calls are never supplied, only the call and its
              arguments.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Trace flag <fo:inline font-family="monospace">arity</fo:inline> can be used to
              change the contents of this message, so that <fo:inline font-family="monospace">Arity</fo:inline>
              is specified instead of <fo:inline font-family="monospace">Args</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Pid, return_to, {M, F, Arity}}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Pid</fo:inline> returns <fo:inline font-weight="bold">to</fo:inline> the specified
              function. This trace message is sent if both
              the flags <fo:inline font-family="monospace">call</fo:inline> and <fo:inline font-family="monospace">return_to</fo:inline> are set,
              and the function is set to be traced on <fo:inline font-weight="bold">local</fo:inline>
              function calls. The message is only sent when returning
              from a chain of tail recursive function calls, where at
              least one call generated a <fo:inline font-family="monospace">call</fo:inline> trace message
              (that is, the functions match specification matched, and
              <fo:inline font-family="monospace">{message, false}</fo:inline> was not an action).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Pid, return_from, {M, F, Arity}, ReturnValue}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Pid</fo:inline> returns <fo:inline font-weight="bold">from</fo:inline> the specified
              function. This trace message is sent if flag <fo:inline font-family="monospace">call</fo:inline>
              is set, and the function has a match specification
              with a <fo:inline font-family="monospace">return_trace</fo:inline> or <fo:inline font-family="monospace">exception_trace</fo:inline> action.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Pid, exception_from, {M, F, Arity}, {Class, Value}}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Pid</fo:inline> exits <fo:inline font-weight="bold">from</fo:inline> the specified
              function because of an exception. This trace message is
              sent if flag <fo:inline font-family="monospace">call</fo:inline> is set, and the function has 
              a match specification with an <fo:inline font-family="monospace">exception_trace</fo:inline> action.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Pid, spawn, Pid2, {M, F, Args}}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Pid</fo:inline> spawns a new process <fo:inline font-family="monospace">Pid2</fo:inline> with
              the specified function call as entry point.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Args</fo:inline> is supposed to be the argument list,
              but can be any term if the spawn is erroneous.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Pid, spawned, Pid2, {M, F, Args}}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Pid</fo:inline> is spawned by process <fo:inline font-family="monospace">Pid2</fo:inline> with
              the specified function call as entry point.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Args</fo:inline> is supposed to be the argument list,
              but can be any term if the spawn is erroneous.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Pid, exit, Reason}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Pid</fo:inline> exits with reason <fo:inline font-family="monospace">Reason</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, PidPort, register, RegName}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">PidPort</fo:inline> gets the name <fo:inline font-family="monospace">RegName</fo:inline> registered.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, PidPort, unregister, RegName}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">PidPort</fo:inline> gets the name <fo:inline font-family="monospace">RegName</fo:inline> unregistered.
              This is done automatically when a registered
              process or port exits.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Pid, link, Pid2}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Pid</fo:inline> links to a process <fo:inline font-family="monospace">Pid2</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Pid, unlink, Pid2}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Pid</fo:inline> removes the link from a process
              <fo:inline font-family="monospace">Pid2</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, PidPort, getting_linked, Pid2}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">PidPort</fo:inline> gets linked to a process <fo:inline font-family="monospace">Pid2</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, PidPort, getting_unlinked, Pid2}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">PidPort</fo:inline> gets unlinked from a process <fo:inline font-family="monospace">Pid2</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Pid, exit, Reason}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Pid</fo:inline> exits with reason <fo:inline font-family="monospace">Reason</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Port, open, Pid, Driver}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Pid</fo:inline> opens a new port <fo:inline font-family="monospace">Port</fo:inline> with
              the running <fo:inline font-family="monospace">Driver</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Driver</fo:inline> is the name of the driver as an atom.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Port, closed, Reason}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Port</fo:inline> closes with <fo:inline font-family="monospace">Reason</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            
            <fo:inline font-family="monospace">{trace, Pid, in | in_exiting, {M, F, Arity} | 0}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Pid</fo:inline> is scheduled to run. The process
              runs in function <fo:inline font-family="monospace">{M, F, Arity}</fo:inline>. On some rare
              occasions, the current function cannot be determined,
              then the last element is <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            
            
            <fo:inline font-family="monospace">{trace, Pid, out | out_exiting | out_exited, {M, F, Arity}
            | 0}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Pid</fo:inline> is scheduled out. The process was
              running in function {M, F, Arity}. On some rare occasions,
              the current function cannot be determined, then the last
              element is <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Port, in, Command | 0}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Port</fo:inline> is scheduled to run. <fo:inline font-family="monospace">Command</fo:inline> is the
              first thing the port will execute, it can however run several
              commands before being scheduled out. On some rare
              occasions, the current function cannot be determined,
              then the last element is <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The possible commands are <fo:inline font-family="monospace">call</fo:inline>, <fo:inline font-family="monospace">close</fo:inline>,
              <fo:inline font-family="monospace">command</fo:inline>, <fo:inline font-family="monospace">connect</fo:inline>, <fo:inline font-family="monospace">control</fo:inline>, <fo:inline font-family="monospace">flush</fo:inline>,
              <fo:inline font-family="monospace">info</fo:inline>, <fo:inline font-family="monospace">link</fo:inline>, <fo:inline font-family="monospace">open</fo:inline>, and <fo:inline font-family="monospace">unlink</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Port, out, Command | 0}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Port</fo:inline> is scheduled out. The last command run
              was <fo:inline font-family="monospace">Command</fo:inline>. On some rare occasions,
              the current function cannot be determined, then the last
              element is <fo:inline font-family="monospace">0</fo:inline>. <fo:inline font-family="monospace">Command</fo:inline> can contain the same
              commands as <fo:inline font-family="monospace">in</fo:inline></fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Pid, gc_minor_start, Info}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
          
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sent when a young garbage collection is about to be started.
              <fo:inline font-family="monospace">Info</fo:inline> is a list of two-element tuples, where
              the first element is a key, and the second is the value.
              Do not depend on any order of the tuples.
              The following keys are defined:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">heap_size</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The size of the used part of the heap.</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">heap_block_size</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The size of the memory block used for storing
                the heap and the stack.</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">old_heap_size</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The size of the used part of the old heap.</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">old_heap_block_size</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The size of the memory block used for storing
                the old heap.</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">stack_size</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The size of the stack.</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">recent_size</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The size of the data that survived the previous garbage
                collection.</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">mbuf_size</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The combined size of message buffers associated with
                the process.</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">bin_vheap_size</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The total size of unique off-heap binaries referenced
                from the process heap.</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">bin_vheap_block_size</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The total size of binaries allowed in the virtual
                heap in the process before doing a garbage collection.</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">bin_old_vheap_size</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The total size of unique off-heap binaries referenced
                from the process old heap.</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">bin_old_vheap_block_size</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The total size of binaries allowed in the virtual
                old heap in the process before doing a garbage
                collection.</fo:block></fo:block-container>
            </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All sizes are in words.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Pid, gc_max_heap_size, Info}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sent when the <fo:inline font-style="italic">
              <fo:inline font-family="monospace">max_heap_size</fo:inline></fo:inline>
              is reached during garbage collection. <fo:inline font-family="monospace">Info</fo:inline> contains the
              same kind of list as in message <fo:inline font-family="monospace">gc_start</fo:inline>,
              but the sizes reflect the sizes that triggered
              <fo:inline font-family="monospace">max_heap_size</fo:inline> to be reached.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Pid, gc_minor_end, Info}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sent when young garbage collection is finished. <fo:inline font-family="monospace">Info</fo:inline>
              contains the same kind of list as in message
              <fo:inline font-family="monospace">gc_minor_start</fo:inline>,
              but the sizes reflect the new sizes after
              garbage collection.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Pid, gc_major_start, Info}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sent when fullsweep garbage collection is about to be started.
              <fo:inline font-family="monospace">Info</fo:inline> contains the same kind of list as in message
              <fo:inline font-family="monospace">gc_minor_start</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            
            <fo:inline font-family="monospace">{trace, Pid, gc_major_end, Info}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sent when fullsweep garbage collection is finished. <fo:inline font-family="monospace">Info</fo:inline>
              contains the same kind of list as in message
              <fo:inline font-family="monospace">gc_minor_start</fo:inline>, but the sizes reflect the new sizes after
              a fullsweep garbage collection.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the tracing process/port dies or the tracer module returns
          <fo:inline font-family="monospace">remove</fo:inline>, the flags are silently removed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each process can only be traced by one tracer. Therefore,
          attempts to trace an already traced process fail.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a number indicating the number of processes that
          matched <fo:inline font-family="monospace">PidPortSpec</fo:inline>.
          If <fo:inline font-family="monospace">PidPortSpec</fo:inline> is a process
          identifier, the return value is <fo:inline font-family="monospace">1</fo:inline>.
          If <fo:inline font-family="monospace">PidPortSpec</fo:inline>
          is <fo:inline font-family="monospace">all</fo:inline> or <fo:inline font-family="monospace">existing</fo:inline>, the return value is
          the number of processes running.
          If <fo:inline font-family="monospace">PidPortSpec</fo:inline> is <fo:inline font-family="monospace">new</fo:inline>, the return value is
          <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if the specified arguments are
          not supported. For example, <fo:inline font-family="monospace">cpu_timestamp</fo:inline> is not
          supported on all platforms.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16535424"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:trace_delivered(Tracee) -&gt; Ref</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Tracee = pid() | all</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Ref = reference()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The delivery of trace messages (generated by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">seq_trace(3)</fo:inline></fo:inline>,
          or <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_profile/2</fo:inline></fo:inline>)
          is dislocated on the time-line
          compared to other events in the system. If you know that
          <fo:inline font-family="monospace">Tracee</fo:inline> has passed some specific point
          in its execution,
          and you want to know when at least all trace messages
          corresponding to events up to this point have reached the
          tracer, use <fo:inline font-family="monospace">erlang:trace_delivered(Tracee)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When it is guaranteed that all trace messages are delivered to
          the tracer up to the point that <fo:inline font-family="monospace">Tracee</fo:inline> reached
          at the time of the call to
          <fo:inline font-family="monospace">erlang:trace_delivered(Tracee)</fo:inline>, then a
          <fo:inline font-family="monospace">{trace_delivered, Tracee, Ref}</fo:inline>
          message is sent to the caller of
          <fo:inline font-family="monospace">erlang:trace_delivered(Tracee)</fo:inline> .</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that message <fo:inline font-family="monospace">trace_delivered</fo:inline> does <fo:inline font-weight="bold">not</fo:inline>
          imply that trace messages have been delivered.
          Instead it implies that all trace messages that
          <fo:inline font-weight="bold">are to be delivered</fo:inline> have been delivered.
          It is not an error if <fo:inline font-family="monospace">Tracee</fo:inline> is not, and
          has not been traced by someone, but if this is the case,
          <fo:inline font-weight="bold">no</fo:inline> trace messages have been delivered when the
          <fo:inline font-family="monospace">trace_delivered</fo:inline> message arrives.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-family="monospace">Tracee</fo:inline> must refer
          to a process currently
          or previously existing on the same node as the caller of
          <fo:inline font-family="monospace">erlang:trace_delivered(Tracee)</fo:inline> resides on.
          The special <fo:inline font-family="monospace">Tracee</fo:inline> atom <fo:inline font-family="monospace">all</fo:inline>
          denotes all processes that currently are traced in the node.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When used together with a <fo:inline font-style="italic">
          Tracer Module</fo:inline>, any message sent in the trace callback
          is guaranteed to have reached its recipient before the
          <fo:inline font-family="monospace">trace_delivered</fo:inline> message is sent.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example: Process <fo:inline font-family="monospace">A</fo:inline> is <fo:inline font-family="monospace">Tracee</fo:inline>,
          port <fo:inline font-family="monospace">B</fo:inline> is tracer, and process <fo:inline font-family="monospace">C</fo:inline> is the port
          owner of <fo:inline font-family="monospace">B</fo:inline>. <fo:inline font-family="monospace">C</fo:inline> wants to close <fo:inline font-family="monospace">B</fo:inline> when
          <fo:inline font-family="monospace">A</fo:inline> exits. To ensure that the trace is not truncated,
          <fo:inline font-family="monospace">C</fo:inline> can call <fo:inline font-family="monospace">erlang:trace_delivered(A)</fo:inline> when
          <fo:inline font-family="monospace">A</fo:inline> exits, and wait for message <fo:inline font-family="monospace">{trace_delivered, A,
          Ref}</fo:inline> before closing <fo:inline font-family="monospace">B</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Tracee</fo:inline>
          does not refer to a
          process (dead or alive) on the same node as the caller of
          <fo:inline font-family="monospace">erlang:trace_delivered(Tracee)</fo:inline> resides on.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16564752"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:trace_info(PidPortFuncEvent, Item) -&gt; Res</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">PidPortFuncEvent = <fo:block/>    pid() |<fo:block/>    port() |<fo:block/>    new |<fo:block/>    new_processes |<fo:block/>    new_ports |<fo:block/>    {Module, Function, Arity} |<fo:block/>    on_load |<fo:block/>    send |<fo:block/>    'receive'</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Arity = arity()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Item = <fo:block/>    flags |<fo:block/>    tracer |<fo:block/>    traced |<fo:block/>    match_spec |<fo:block/>    meta |<fo:block/>    meta_match_spec |<fo:block/>    call_count |<fo:block/>    call_time |<fo:block/>    all</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Res = <fo:inline font-style="italic">trace_info_return()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_info_return() = <fo:block/>    undefined |<fo:block/>    {flags, [<fo:inline font-style="italic">trace_info_flag()</fo:inline>]} |<fo:block/>    {tracer, pid() | port() | []} |<fo:block/>    {tracer, module(), term()} |<fo:block/>    <fo:inline font-style="italic">trace_info_item_result()</fo:inline> |<fo:block/>    {all, [<fo:inline font-style="italic">trace_info_item_result()</fo:inline>] | false | undefined}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_info_item_result() = <fo:block/>    {traced, global | local | false | undefined} |<fo:block/>    {match_spec, <fo:inline font-style="italic">trace_match_spec()</fo:inline> | false | undefined} |<fo:block/>    {meta, pid() | port() | false | undefined | []} |<fo:block/>    {meta, module(), term()} |<fo:block/>    {meta_match_spec, <fo:inline font-style="italic">trace_match_spec()</fo:inline> | false | undefined} |<fo:block/>    {call_count, integer() &gt;= 0 | boolean() | undefined} |<fo:block/>    {call_time,<fo:block/>     [{pid(),<fo:block/>       integer() &gt;= 0,<fo:block/>       integer() &gt;= 0,<fo:block/>       integer() &gt;= 0}] |<fo:block/>     boolean() |<fo:block/>     undefined}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_info_flag() = <fo:block/>    send |<fo:block/>    'receive' |<fo:block/>    set_on_spawn |<fo:block/>    call |<fo:block/>    return_to |<fo:block/>    procs |<fo:block/>    set_on_first_spawn |<fo:block/>    set_on_link |<fo:block/>    running |<fo:block/>    garbage_collection |<fo:block/>    timestamp |<fo:block/>    monotonic_timestamp |<fo:block/>    strict_monotonic_timestamp |<fo:block/>    arity</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_match_spec() = <fo:block/>    [{[term()] | '_' | <fo:inline font-style="italic">match_variable()</fo:inline>, [term()], [term()]}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">match_variable() = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        Approximation of '$1' | '$2' | '$3' | ...
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns trace information about a port, process, function, or
          event.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">To get information about a port or process</fo:inline>,
          <fo:inline font-family="monospace">PidPortFuncEvent</fo:inline> is to
          be a process identifier (pid), port identifier, or one of
          the atoms <fo:inline font-family="monospace">new</fo:inline>, <fo:inline font-family="monospace">new_processes</fo:inline>, or <fo:inline font-family="monospace">new_ports</fo:inline>. The
          atom <fo:inline font-family="monospace">new</fo:inline> or <fo:inline font-family="monospace">new_processes</fo:inline> means that the default trace
          state for processes to be created is returned. The atom
          <fo:inline font-family="monospace">new_ports</fo:inline> means that the default trace state for ports to be
          created is returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Valid <fo:inline font-family="monospace">Item</fo:inline>s for ports and processes:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">flags</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of atoms indicating what kind of traces is
              enabled for the process. The list is empty if no
              traces are enabled, and one or more of the followings
              atoms if traces are enabled: <fo:inline font-family="monospace">send</fo:inline>,
              <fo:inline font-family="monospace">'receive'</fo:inline>, <fo:inline font-family="monospace">set_on_spawn</fo:inline>, <fo:inline font-family="monospace">call</fo:inline>,
              <fo:inline font-family="monospace">return_to</fo:inline>, <fo:inline font-family="monospace">procs</fo:inline>, <fo:inline font-family="monospace">ports</fo:inline>,
              <fo:inline font-family="monospace">set_on_first_spawn</fo:inline>,
              <fo:inline font-family="monospace">set_on_link</fo:inline>, <fo:inline font-family="monospace">running</fo:inline>, <fo:inline font-family="monospace">running_procs</fo:inline>,
              <fo:inline font-family="monospace">running_ports</fo:inline>, <fo:inline font-family="monospace">silent</fo:inline>, <fo:inline font-family="monospace">exiting</fo:inline>,
              <fo:inline font-family="monospace">monotonic_timestamp</fo:inline>, <fo:inline font-family="monospace">strict_monotonic_timestamp</fo:inline>,
              <fo:inline font-family="monospace">garbage_collection</fo:inline>, <fo:inline font-family="monospace">timestamp</fo:inline>, and
              <fo:inline font-family="monospace">arity</fo:inline>. The order is arbitrary.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">tracer</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the identifier for process, port, or a tuple containing
              the tracer module and tracer state tracing this
              process. If this process is not traced, the return
              value is <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">To get information about a function</fo:inline>,
          <fo:inline font-family="monospace">PidPortFuncEvent</fo:inline> is to
          be the three-element tuple <fo:inline font-family="monospace">{Module, Function, Arity}</fo:inline> or
          the atom <fo:inline font-family="monospace">on_load</fo:inline>. No wildcards are allowed. Returns
          <fo:inline font-family="monospace">undefined</fo:inline> if the function does not exist, or
          <fo:inline font-family="monospace">false</fo:inline> if the function is not traced.
          If <fo:inline font-family="monospace">PidPortFuncEvent</fo:inline>
          is <fo:inline font-family="monospace">on_load</fo:inline>, the information returned refers to
          the default value for code that will be loaded.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Valid <fo:inline font-family="monospace">Item</fo:inline>s for functions:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">traced</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">global</fo:inline> if this function is traced on
              global function calls, <fo:inline font-family="monospace">local</fo:inline> if this function is
              traced on local function calls (that is, local and global
              function calls), and <fo:inline font-family="monospace">false</fo:inline> if local or
              global function calls are not traced.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">match_spec</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the match specification for this function, if it
              has one. If the function is locally or globally traced but
              has no match specification defined, the returned value
              is <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">meta</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the meta-trace tracer process, port, or trace module
              for this function, if it has one. If the function is not
              meta-traced, the returned value is <fo:inline font-family="monospace">false</fo:inline>. If
              the function is meta-traced but has once detected that
              the tracer process is invalid, the returned value is
              <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">meta_match_spec</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the meta-trace match specification for this
              function, if it has one. If the function is meta-traced
              but has no match specification defined, the returned
              value is <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">call_count</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the call count value for this function or
              <fo:inline font-family="monospace">true</fo:inline> for the pseudo function <fo:inline font-family="monospace">on_load</fo:inline> if call
              count tracing is active. Otherwise <fo:inline font-family="monospace">false</fo:inline> is returned.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:trace_pattern/3</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">call_time</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the call time values for this function or
              <fo:inline font-family="monospace">true</fo:inline> for the pseudo function <fo:inline font-family="monospace">on_load</fo:inline> if call
              time tracing is active. Otherwise <fo:inline font-family="monospace">false</fo:inline> is returned.
              The call time values returned, <fo:inline font-family="monospace">[{Pid, Count, S, Us}]</fo:inline>,
              is a list of each process that executed the function
              and its specific counters.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:trace_pattern/3</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">all</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list containing the
              <fo:inline font-family="monospace">{Item, Value}</fo:inline> tuples
              for all other items, or returns <fo:inline font-family="monospace">false</fo:inline> if no tracing
              is active for this function.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">To get information about an event</fo:inline>,
          <fo:inline font-family="monospace">PidPortFuncEvent</fo:inline> is to
          be one of the atoms <fo:inline font-family="monospace">send</fo:inline> or <fo:inline font-family="monospace">'receive'</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One valid <fo:inline font-family="monospace">Item</fo:inline> for events exists:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">match_spec</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the match specification for this event, if it
              has one, or <fo:inline font-family="monospace">true</fo:inline> if no match specification has been
              set.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">{Item, Value}</fo:inline>, where
          <fo:inline font-family="monospace">Value</fo:inline> is the requested information as described earlier.
          If a pid for a dead process was specified, or the name of a
          non-existing function, <fo:inline font-family="monospace">Value</fo:inline> is <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16625392"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:trace_pattern(MFA, MatchSpec) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MFA = <fo:inline font-style="italic">trace_pattern_mfa()</fo:inline> | send | 'receive'</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MatchSpec = <fo:block/>    (MatchSpecList :: <fo:inline font-style="italic">trace_match_spec()</fo:inline>) |<fo:block/>    boolean() |<fo:block/>    restart |<fo:block/>    pause</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_pattern_mfa() = {atom(), atom(), arity() | '_'} | on_load</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_match_spec() = <fo:block/>    [{[term()] | '_' | <fo:inline font-style="italic">match_variable()</fo:inline>, [term()], [term()]}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">match_variable() = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        Approximation of '$1' | '$2' | '$3' | ...
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:trace_pattern(Event, MatchSpec, [])</fo:inline></fo:inline>,
          retained for backward compatibility.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16631856"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:trace_pattern(MFA :: send, MatchSpec, FlagList :: []) -&gt;<fo:block/>                        integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MatchSpec = (MatchSpecList :: <fo:inline font-style="italic">trace_match_spec()</fo:inline>) | boolean()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_match_spec() = <fo:block/>    [{[term()] | '_' | <fo:inline font-style="italic">match_variable()</fo:inline>, [term()], [term()]}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">match_variable() = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        Approximation of '$1' | '$2' | '$3' | ...
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets trace pattern for <fo:inline font-weight="bold">message sending</fo:inline>.
          Must be combined with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline>
          to set the <fo:inline font-family="monospace">send</fo:inline> trace flag for one or more processes.
          By default all messages sent from <fo:inline font-family="monospace">send</fo:inline> traced processes
          are traced. To limit
          traced send events based on the message content, the sender
          and/or the receiver, use <fo:inline font-family="monospace">erlang:trace_pattern/3</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">MatchSpec</fo:inline> can take the
          following forms:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">MatchSpecList</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of match specifications. The matching is done
              on the list <fo:inline font-family="monospace">[Receiver, Msg]</fo:inline>. <fo:inline font-family="monospace">Receiver</fo:inline>
              is the process or port identity of the receiver and
              <fo:inline font-family="monospace">Msg</fo:inline> is the message term. The pid of the sending
              process can be accessed with the guard function
              <fo:inline font-family="monospace">self/0</fo:inline>. An empty list is the same as <fo:inline font-family="monospace">true</fo:inline>.
              For more information, see section
              <fo:inline font-style="italic">
              Match Specifications in Erlang</fo:inline> in the User's Guide.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">true</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables tracing for all sent messages (from <fo:inline font-family="monospace">send</fo:inline>
              traced processes). Any match specification is
              removed. <fo:inline font-weight="bold">This is the default</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">false</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Disables tracing for all sent messages.
              Any match specification is removed.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">FlagList</fo:inline> must be <fo:inline font-family="monospace">[]</fo:inline>
          for send tracing.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is always <fo:inline font-family="monospace">1</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only trace messages to a specific process <fo:inline font-family="monospace">Pid</fo:inline>:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:trace_pattern(send, [{[Pid, '_'],[],[]}], []).</fo:inline>
1</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only trace messages matching <fo:inline font-family="monospace">{reply, _}</fo:inline>:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:trace_pattern(send, [{['_', {reply,'_'}],[],[]}], []).</fo:inline>
1</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only trace messages sent to the sender itself:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:trace_pattern(send, [{['$1', '_'],[{'=:=','$1',{self}}],[]}], []).</fo:inline>
1</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only trace messages sent to other nodes:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:trace_pattern(send, [{['$1', '_'],[{'=/=',{node,'$1'},{node}}],[]}], []).</fo:inline>
1</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A match specification for <fo:inline font-family="monospace">send</fo:inline> trace can use
            all guard and body functions except <fo:inline font-family="monospace">caller</fo:inline>.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16661248"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:trace_pattern(MFA :: 'receive', MatchSpec, FlagList :: []) -&gt;<fo:block/>                        integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MatchSpec = (MatchSpecList :: <fo:inline font-style="italic">trace_match_spec()</fo:inline>) | boolean()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_match_spec() = <fo:block/>    [{[term()] | '_' | <fo:inline font-style="italic">match_variable()</fo:inline>, [term()], [term()]}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">match_variable() = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        Approximation of '$1' | '$2' | '$3' | ...
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets trace pattern for <fo:inline font-weight="bold">message receiving</fo:inline>.
          Must be combined with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline>
          to set the <fo:inline font-family="monospace">'receive'</fo:inline> trace flag for one or more processes.
          By default all messages received by <fo:inline font-family="monospace">'receive'</fo:inline> traced
          processes are traced. To limit
          traced receive events based on the message content, the sender
          and/or the receiver, use <fo:inline font-family="monospace">erlang:trace_pattern/3</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">MatchSpec</fo:inline> can take the
          following forms:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">MatchSpecList</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of match specifications. The matching is done
              on the list <fo:inline font-family="monospace">[Node, Sender, Msg]</fo:inline>. <fo:inline font-family="monospace">Node</fo:inline>
              is the node name of the sender. <fo:inline font-family="monospace">Sender</fo:inline> is the
              process or port identity of the sender, or the atom
              <fo:inline font-family="monospace">undefined</fo:inline> if the sender is not known (which can
              be the case for remote senders). <fo:inline font-family="monospace">Msg</fo:inline> is the
              message term. The pid of the receiving process can be
              accessed with the guard function <fo:inline font-family="monospace">self/0</fo:inline>. An empty
              list is the same as <fo:inline font-family="monospace">true</fo:inline>. For more information, see
              section <fo:inline font-style="italic">
              Match Specifications in Erlang</fo:inline> in the User's Guide.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">true</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables tracing for all received messages (to <fo:inline font-family="monospace">'receive'</fo:inline>
              traced processes). Any match specification is
              removed. <fo:inline font-weight="bold">This is the default</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">false</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Disables tracing for all received messages.
              Any match specification is removed.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">FlagList</fo:inline> must be <fo:inline font-family="monospace">[]</fo:inline>
          for receive tracing.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is always <fo:inline font-family="monospace">1</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only trace messages from a specific process <fo:inline font-family="monospace">Pid</fo:inline>:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:trace_pattern('receive', [{['_',Pid, '_'],[],[]}], []).</fo:inline>
1</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only trace messages matching <fo:inline font-family="monospace">{reply, _}</fo:inline>:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:trace_pattern('receive', [{['_','_', {reply,'_'}],[],[]}], []).</fo:inline>
1</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only trace messages from other nodes:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:trace_pattern('receive', [{['$1', '_', '_'],[{'=/=','$1',{node}}],[]}], []).</fo:inline>
1</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A match specification for <fo:inline font-family="monospace">'receive'</fo:inline> trace can
            use all guard and body functions except <fo:inline font-family="monospace">caller</fo:inline>,
            <fo:inline font-family="monospace">is_seq_trace</fo:inline>, <fo:inline font-family="monospace">get_seq_token</fo:inline>, <fo:inline font-family="monospace">set_seq_token</fo:inline>,
            <fo:inline font-family="monospace">enable_trace</fo:inline>, <fo:inline font-family="monospace">disable_trace</fo:inline>, <fo:inline font-family="monospace">trace</fo:inline>,
            <fo:inline font-family="monospace">silent</fo:inline>, and <fo:inline font-family="monospace">process_dump</fo:inline>.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16693808"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:trace_pattern(MFA, MatchSpec, FlagList) -&gt;<fo:block/>                        integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MFA = <fo:inline font-style="italic">trace_pattern_mfa()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MatchSpec = <fo:block/>    (MatchSpecList :: <fo:inline font-style="italic">trace_match_spec()</fo:inline>) |<fo:block/>    boolean() |<fo:block/>    restart |<fo:block/>    pause</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FlagList = [<fo:inline font-style="italic">trace_pattern_flag()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_pattern_mfa() = {atom(), atom(), arity() | '_'} | on_load</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_match_spec() = <fo:block/>    [{[term()] | '_' | <fo:inline font-style="italic">match_variable()</fo:inline>, [term()], [term()]}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_pattern_flag() = <fo:block/>    global |<fo:block/>    local |<fo:block/>    meta |<fo:block/>    {meta, Pid :: pid()} |<fo:block/>    {meta, TracerModule :: module(), TracerState :: term()} |<fo:block/>    call_count |<fo:block/>    call_time</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">match_variable() = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        Approximation of '$1' | '$2' | '$3' | ...
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables or disables <fo:inline font-weight="bold">call tracing</fo:inline> for one or more functions.
          Must be combined with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline>
          to set the <fo:inline font-family="monospace">call</fo:inline> trace flag
          for one or more processes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Conceptually, call tracing works as follows. Inside
          the Erlang virtual machine, a set of processes and
          a set of functions are to be traced. If a traced process
          calls a traced function, the trace action is taken.
          Otherwise, nothing happens.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To add or remove one or more processes to the set of traced
          processes, use
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To add or remove functions to the set of traced
          functions, use <fo:inline font-family="monospace">erlang:trace_pattern/3</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The BIF <fo:inline font-family="monospace">erlang:trace_pattern/3</fo:inline> can also add match
          specifications to a function. A match specification
          comprises a pattern that the function arguments must
          match, a guard expression that must evaluate to <fo:inline font-family="monospace">true</fo:inline>,
          and an action to be performed. The default action is to send a
          trace message. If the pattern does not match or the guard
          fails, the action is not executed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">MFA</fo:inline> is to be a tuple, such as
          <fo:inline font-family="monospace">{Module, Function, Arity}</fo:inline>, or the atom <fo:inline font-family="monospace">on_load</fo:inline>
          (described below). It can be the module, function,
          and arity for a function (or a BIF in any module).
          The atom <fo:inline font-family="monospace">'_'</fo:inline> can be used as a wildcard in any of the
          following ways:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{Module,Function,'_'}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All functions of any arity named <fo:inline font-family="monospace">Function</fo:inline>
              in module <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{Module,'_','_'}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All functions in module <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{'_','_','_'}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All functions in all loaded modules.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other combinations, such as <fo:inline font-family="monospace">{Module,'_',Arity}</fo:inline>, are
          not allowed. Local functions match wildcards only if
          option <fo:inline font-family="monospace">local</fo:inline> is in <fo:inline font-family="monospace">FlagList</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If argument <fo:inline font-family="monospace">MFA</fo:inline> is the atom <fo:inline font-family="monospace">on_load</fo:inline>,
          the match specification and flag list are used on all
          modules that are newly loaded.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">MatchSpec</fo:inline> can take the
          following forms:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">false</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Disables tracing for the matching functions.
              Any match specification is removed.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">true</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables tracing for the matching functions.
              Any match specification is removed.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">MatchSpecList</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of match specifications. An empty list is
              equivalent to <fo:inline font-family="monospace">true</fo:inline>. For a description of match
              specifications, see section <fo:inline font-style="italic">
              Match Specifications in Erlang</fo:inline> in the User's Guide.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">restart</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the <fo:inline font-family="monospace">FlagList</fo:inline> options <fo:inline font-family="monospace">call_count</fo:inline>
              and <fo:inline font-family="monospace">call_time</fo:inline>: restarts
              the existing counters. The behavior is undefined
              for other <fo:inline font-family="monospace">FlagList</fo:inline> options.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pause</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the <fo:inline font-family="monospace">FlagList</fo:inline> options
              <fo:inline font-family="monospace">call_count</fo:inline> and <fo:inline font-family="monospace">call_time</fo:inline>: pauses
              the existing counters. The behavior is undefined for
              other <fo:inline font-family="monospace">FlagList</fo:inline> options.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">FlagList</fo:inline> is a list of options.
          The following are the valid options:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">global</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Turns on or off call tracing for global function calls
              (that is, calls specifying the module explicitly). Only
              exported functions match and only global calls
              generate trace messages. <fo:inline font-weight="bold">This is the default</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">local</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Turns on or off call tracing for all types of function
              calls. Trace messages are sent whenever any of
              the specified functions are called, regardless of how they
              are called. If flag <fo:inline font-family="monospace">return_to</fo:inline> is set for
              the process, a <fo:inline font-family="monospace">return_to</fo:inline> message is also sent
              when this function returns to its caller.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">meta | {meta, Pid} |
            {meta, TracerModule, TracerState}</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Turns on or off meta-tracing for all types of function
              calls. Trace messages are sent to the tracer whenever any of
              the specified functions are called. If no tracer is specified,
              <fo:inline font-family="monospace">self()</fo:inline> is used as a default tracer process.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Meta-tracing traces all processes and does not care
              about the process trace flags set by <fo:inline font-family="monospace">erlang:trace/3</fo:inline>,
              the trace flags are instead fixed to
              <fo:inline font-family="monospace">[call, timestamp]</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The match specification function <fo:inline font-family="monospace">{return_trace}</fo:inline>
              works with meta-trace and sends its trace message to the
              same tracer.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">call_count</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts (<fo:inline font-family="monospace">MatchSpec == true</fo:inline>) or stops
              (<fo:inline font-family="monospace">MatchSpec == false</fo:inline>)
              call count tracing for all
              types of function calls. For every function, a counter is
              incremented when the function is called, in any process.
              No process trace flags need to be activated.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If call count tracing is started while already running,
              the count is restarted from zero. To pause running
              counters, use <fo:inline font-family="monospace">MatchSpec == pause</fo:inline>.
              Paused and running counters can be restarted from zero with
              <fo:inline font-family="monospace">MatchSpec == restart</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To read the counter value, use
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:trace_info/2</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">call_time</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts (<fo:inline font-family="monospace">MatchSpec == true</fo:inline>) or stops
              (<fo:inline font-family="monospace">MatchSpec == false</fo:inline>) call time
              tracing for all
              types of function calls. For every function, a counter is
              incremented when the function is called.
              Time spent in the function is accumulated in
              two other counters, seconds and microseconds.
              The counters are stored for each call traced process.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If call time tracing is started while already running,
              the count and time restart from zero. To pause
              running counters, use <fo:inline font-family="monospace">MatchSpec == pause</fo:inline>.
              Paused and running counters can be restarted from zero with
              <fo:inline font-family="monospace">MatchSpec == restart</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To read the counter value, use
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:trace_info/2</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The options <fo:inline font-family="monospace">global</fo:inline> and <fo:inline font-family="monospace">local</fo:inline> are mutually
          exclusive, and <fo:inline font-family="monospace">global</fo:inline> is the default (if no options are
          specified). The options <fo:inline font-family="monospace">call_count</fo:inline> and <fo:inline font-family="monospace">meta</fo:inline>
          perform a kind of local tracing, and cannot be combined
          with <fo:inline font-family="monospace">global</fo:inline>. A function can be globally or
          locally traced. If global tracing is specified for a
          set of functions, then local, meta, call time, and call count
          tracing for the matching set of local functions is
          disabled, and conversely.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When disabling trace, the option must match the type of trace
          set on the function. That is, local tracing must be
          disabled with option <fo:inline font-family="monospace">local</fo:inline> and global tracing with
          option <fo:inline font-family="monospace">global</fo:inline> (or no option), and so on.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Part of a match specification list cannot be changed directly.
          If a function has a match specification, it can be replaced
          with a new one. To change an existing match specification,
          use the BIF
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace_info/2</fo:inline></fo:inline>
          to retrieve the existing match specification.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of functions matching
          argument <fo:inline font-family="monospace">MFA</fo:inline>. This is zero if none matched.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16767312"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trunc(Number) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Number = number()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer by truncating <fo:inline font-family="monospace">Number</fo:inline>,
          for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">trunc(5.5).</fo:inline>
5</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16771920"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">tuple_size(Tuple) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Tuple = tuple()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer that is the number of elements in
          <fo:inline font-family="monospace">Tuple</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">tuple_size({morni, mulle, bwange}).</fo:inline>
3</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed in guard tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16776544"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">tuple_to_list(Tuple) -&gt; [term()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Tuple = tuple()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list corresponding to <fo:inline font-family="monospace">Tuple</fo:inline>.
          <fo:inline font-family="monospace">Tuple</fo:inline> can contain any Erlang terms.
          Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">tuple_to_list({share, {'Ericsson_B', 163}}).</fo:inline>
[share,{'Ericsson_B',163}]</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16781328"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:unique_integer() -&gt; integer()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generates and returns an
          <fo:inline font-style="italic">
          integer unique on current runtime system instance</fo:inline>.
          The same as calling
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:unique_integer([])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16785840"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:unique_integer(ModifierList) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ModifierList = [Modifier]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Modifier = positive | monotonic</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generates and returns an
          <fo:inline font-style="italic">
          integer unique on current runtime system
          instance</fo:inline>. The integer is unique in the
          sense that this BIF, using the same set of
          modifiers, does not return the same integer more
          than once on the current runtime system instance.
          Each integer value can of course be constructed
          by other means.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, when <fo:inline font-family="monospace">[]</fo:inline> is passed as
          <fo:inline font-family="monospace">ModifierList</fo:inline>, both negative and
          positive integers can be returned. This
          to use the range of integers that do
          not need heap memory allocation as much as possible.
          By default the returned integers are also only
          guaranteed to be unique, that is, any returned integer
          can be smaller or larger than previously
          returned integers.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Modifier</fo:inline>s:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always">positive</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns only positive integers.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that by passing the <fo:inline font-family="monospace">positive</fo:inline> modifier
              you will get heap allocated integers (bignums) quicker.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">monotonic</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-style="italic">
              strictly monotonically increasing</fo:inline> integers
              corresponding to creation time. That is, the integer
              returned is always larger than previously
              returned integers on the current runtime system
              instance.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These values can be used to determine order between events
              on the runtime system instance. That is, if both
              <fo:inline font-family="monospace">X = erlang:unique_integer([monotonic])</fo:inline> and
              <fo:inline font-family="monospace">Y = erlang:unique_integer([monotonic])</fo:inline> are
              executed by different processes (or the same
              process) on the same runtime system instance and
              <fo:inline font-family="monospace">X &lt; Y</fo:inline>, we know that <fo:inline font-family="monospace">X</fo:inline> was created
              before <fo:inline font-family="monospace">Y</fo:inline>.</fo:block>
            <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Strictly monotonically increasing values
                are inherently quite expensive to generate and scales
                poorly. This is because the values need to be synchronized
                between CPU cores. That is, do not pass the <fo:inline font-family="monospace">monotonic</fo:inline>
                modifier unless you really need strictly monotonically
                increasing values.</fo:block>
            </fo:block>
        </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All valid <fo:inline font-family="monospace">Modifier</fo:inline>s
          can be combined. Repeated (valid)
          <fo:inline font-family="monospace">Modifier</fo:inline>s in the <fo:inline font-family="monospace">ModifierList</fo:inline>
          are ignored.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The set of integers returned by
            <fo:inline font-family="monospace">erlang:unique_integer/1</fo:inline> using different sets of
            <fo:inline font-family="monospace">Modifier</fo:inline>s <fo:inline font-weight="bold">will overlap</fo:inline>.
            For example, by calling <fo:inline font-family="monospace">unique_integer([monotonic])</fo:inline>,
            and <fo:inline font-family="monospace">unique_integer([positive, monotonic])</fo:inline>
            repeatedly, you will eventually see some integers that are
            returned by both calls.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failures:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">if <fo:inline font-family="monospace">ModifierList</fo:inline> is not a
            proper list.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">if <fo:inline font-family="monospace">Modifier</fo:inline> is not a
            valid modifier.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16811744"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:universaltime() -&gt; DateTime</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">DateTime = <fo:inline font-style="italic">calendar:datetime()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current date and time according to Universal
          Time Coordinated (UTC) in the form
          <fo:inline font-family="monospace">{{Year, Month, Day}, {Hour, Minute, Second}}</fo:inline> if
          supported by the underlying OS.
          Otherwise <fo:inline font-family="monospace">erlang:universaltime()</fo:inline> is equivalent to
          <fo:inline font-family="monospace">erlang:localtime()</fo:inline>. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:universaltime().</fo:inline>
{{1996,11,6},{14,18,43}}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16816880"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:universaltime_to_localtime(Universaltime) -&gt; Localtime</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Localtime = Universaltime = <fo:inline font-style="italic">calendar:datetime()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts Universal Time Coordinated (UTC) date and time to
          local date and time in the form
          <fo:inline font-family="monospace">{{Year, Month, Day}, {Hour, Minute, Second}}</fo:inline> if
          supported by the underlying OS.
          Otherwise no conversion is done, and
          <fo:inline font-family="monospace">Universaltime</fo:inline> is returned. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erlang:universaltime_to_localtime({{1996,11,6},{14,18,43}}).</fo:inline>
{{1996,11,7},{15,18,43}}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Universaltime</fo:inline> denotes
          an invalid date and time.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16823152"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">unlink(Id) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Id = pid() | port()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes the link, if there is one, between the calling
          process and the process or port referred to by
          <fo:inline font-family="monospace">Id</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> and does not fail, even if there is no
          link to <fo:inline font-family="monospace">Id</fo:inline>, or if <fo:inline font-family="monospace">Id</fo:inline>
          does not exist.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Once <fo:inline font-family="monospace">unlink(Id)</fo:inline> has returned,
          it is guaranteed that
          the link between the caller and the entity referred to by
          <fo:inline font-family="monospace">Id</fo:inline> has no effect on the caller
          in the future (unless
          the link is setup again). If the caller is trapping exits, an
          <fo:inline font-family="monospace">{'EXIT', Id, _}</fo:inline> message from the link
          can have been placed in the caller's message queue before
          the call.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the <fo:inline font-family="monospace">{'EXIT', Id, _}</fo:inline>
          message can be the
          result of the link, but can also be the result of <fo:inline font-family="monospace">Id</fo:inline>
          calling <fo:inline font-family="monospace">exit/2</fo:inline>. Therefore, it <fo:inline font-weight="bold">can</fo:inline> be
          appropriate to clean up the message queue when trapping exits
          after the call to <fo:inline font-family="monospace">unlink(Id)</fo:inline>, as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
unlink(Id),
receive
    {'EXIT', Id, _} -&gt;
        true
after 0 -&gt;
        true
end</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before Erlang/OTP R11B (ERTS 5.5) <fo:inline font-family="monospace">unlink/1</fo:inline>
            behaved completely asynchronously, that is, the link was active
            until the "unlink signal" reached the linked entity. This
            had an undesirable effect, as you could never know when
            you were guaranteed <fo:inline font-weight="bold">not</fo:inline> to be effected by the link.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current behavior can be viewed as two combined operations:
            asynchronously send an "unlink signal" to the linked entity
            and ignore any future results of the link.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16838976"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">unregister(RegName) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">RegName = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes the registered name <fo:inline font-family="monospace">RegName</fo:inline>
          associated with a
          process identifier or a port identifier, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">unregister(db).</fo:inline>
true</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Users are advised not to unregister system processes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">RegName</fo:inline> is not a registered
          name.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16845040"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">whereis(RegName) -&gt; pid() | port() | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">RegName = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier or port identifier with
          the registered name <fo:inline font-family="monospace">RegName</fo:inline>. Returns <fo:inline font-family="monospace">undefined</fo:inline>
          if the name is not registered. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">whereis(db).</fo:inline>
&lt;0.43.0&gt;</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16849600"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">erlang:yield() -&gt; true</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Voluntarily lets other processes (if any) get a chance to
          execute. Using this function is similar to
          <fo:inline font-family="monospace">receive after 1 -&gt; ok end</fo:inline>, except that <fo:inline font-family="monospace">yield()</fo:inline>
          is faster.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is seldom or never any need to use this BIF,
            especially in the SMP emulator, as other processes have a
            chance to run in another scheduler thread anyway.
            Using this BIF without a thorough grasp of how the scheduler
            works can cause performance degradation.</fo:block>
        </fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp16860752" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">init</fo:marker>init</fo:block>Erlang module</fo:block>
  <fo:block/>
  init
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module is preloaded and contains the code for
      the <fo:inline font-family="monospace">init</fo:inline> system process that coordinates the startup of
      the system. The first function evaluated at startup is
      <fo:inline font-family="monospace">boot(BootArgs)</fo:inline>, where <fo:inline font-family="monospace">BootArgs</fo:inline> is a list of
      command-line arguments supplied to the Erlang runtime system from
      the local operating system; see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">init</fo:inline> reads the boot script, which contains instructions on
      how to initiate the system. For more information about boot scripts, see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">script(4)</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">init</fo:inline> also contains functions to restart, reboot, and stop
      the system.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp16868080"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">boot(BootArgs) -&gt; no_return()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">BootArgs = [binary()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the Erlang runtime system. This function is called
          when the emulator is started and coordinates system startup.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">BootArgs</fo:inline> are all command-line arguments except
          the emulator flags, that is, flags and plain arguments; see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">init</fo:inline> interprets some of the flags, see section
          <fo:inline font-style="italic">Command-Line Flags</fo:inline> below.
          The remaining flags ("user flags") and plain arguments are
          passed to the <fo:inline font-family="monospace">init</fo:inline> loop and can be retrieved by calling
          <fo:inline font-style="italic"><fo:inline font-family="monospace">get_arguments/0</fo:inline></fo:inline>
          and <fo:inline font-style="italic">
          <fo:inline font-family="monospace">get_plain_arguments/0</fo:inline></fo:inline>, respectively.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16876544"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_argument(Flag) -&gt; {ok, Arg} | error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Flag = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Arg = [Values :: [string()]]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns all values associated with the command-line user flag
          <fo:inline font-family="monospace">Flag</fo:inline>. If <fo:inline font-family="monospace">Flag</fo:inline> is provided
          several times, each <fo:inline font-family="monospace">Values</fo:inline> is returned in
          preserved order. Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -a b c -a d</fo:inline>
...
1&gt; <fo:inline font-weight="bold">init:get_argument(a).</fo:inline>
{ok,[["b","c"],["d"]]}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following flags are defined
          automatically and can be retrieved using this function:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">root</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The installation directory of Erlang/OTP, <fo:inline font-family="monospace">$ROOT</fo:inline>:</fo:block>
            <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">init:get_argument(root).</fo:inline>
{ok,[["/usr/local/otp/releases/otp_beam_solaris8_r10b_patched"]]}</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">progname</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name of the program which started Erlang:</fo:block>
            <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; <fo:inline font-weight="bold">init:get_argument(progname).</fo:inline>
{ok,[["erl"]]}</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">home</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The home directory:</fo:block>
            <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
4&gt; <fo:inline font-weight="bold">init:get_argument(home).</fo:inline>
{ok,[["/home/harry"]]}</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">error</fo:inline> if no value is associated with <fo:inline font-family="monospace">Flag</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16892464"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_arguments() -&gt; Flags</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Flags = [{Flag :: atom(), Values :: [string()]}]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns all command-line flags and the system-defined flags, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">get_argument/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16896016"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_plain_arguments() -&gt; [Arg]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Arg = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns any plain command-line arguments as a list of strings
          (possibly empty).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16898752"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_status() -&gt; {InternalStatus, ProvidedStatus}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">InternalStatus = <fo:inline font-style="italic">internal_status()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ProvidedStatus = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">internal_status() = starting | started | stopping</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current status of the <fo:inline font-family="monospace">init</fo:inline> process can be
          inspected. During system startup (initialization),
          <fo:inline font-family="monospace">InternalStatus</fo:inline> is <fo:inline font-family="monospace">starting</fo:inline>, and
          <fo:inline font-family="monospace">ProvidedStatus</fo:inline> indicates how far the boot
          script has been interpreted. Each <fo:inline font-family="monospace">{progress, Info}</fo:inline> term
          interpreted in the boot script affects
          <fo:inline font-family="monospace">ProvidedStatus</fo:inline>, that is,
          <fo:inline font-family="monospace">ProvidedStatus</fo:inline> gets the value of <fo:inline font-family="monospace">Info</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16906240"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">reboot() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All applications are taken down smoothly, all code is
          unloaded, and all ports are closed before the system
          terminates. If command-line flag <fo:inline font-family="monospace">-heart</fo:inline> was specified,
          the <fo:inline font-family="monospace">heart</fo:inline> program tries to reboot the system. For more
          information, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">heart(3)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To limit the shutdown time, the time <fo:inline font-family="monospace">init</fo:inline> is allowed
          to spend taking down applications, command-line flag
          <fo:inline font-family="monospace">-shutdown_time</fo:inline> is to be used.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16912288"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">restart() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The system is restarted <fo:inline font-weight="bold">inside</fo:inline> the running Erlang
          node, which means that the emulator is not restarted. All
          applications are taken down smoothly, all code is unloaded,
          and all ports are closed before the system is booted again in
          the same way as initially started. The same <fo:inline font-family="monospace">BootArgs</fo:inline>
          are used again.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To limit the shutdown time, the time <fo:inline font-family="monospace">init</fo:inline> is allowed
          to spend taking down applications, command-line flag
          <fo:inline font-family="monospace">-shutdown_time</fo:inline> is to be used.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16917552"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">script_id() -&gt; Id</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Id = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the identity of the boot script used to boot the system.
          <fo:inline font-family="monospace">Id</fo:inline> can be any Erlang term. In the delivered boot
          scripts, <fo:inline font-family="monospace">Id</fo:inline> is <fo:inline font-family="monospace">{Name, Vsn}</fo:inline>. <fo:inline font-family="monospace">Name</fo:inline>
          and <fo:inline font-family="monospace">Vsn</fo:inline> are strings.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16922816"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stop() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as
	<fo:inline font-style="italic"><fo:inline font-family="monospace">stop(0)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp16926304"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stop(Status) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Status = integer() &gt;= 0 | string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All applications are taken down smoothly, all code is
          unloaded, and all ports are closed before the system
          terminates by calling <fo:inline font-family="monospace">halt(Status)</fo:inline>. If
          command-line flag <fo:inline font-family="monospace">-heart</fo:inline> was specified, the <fo:inline font-family="monospace">heart</fo:inline>
          program is terminated before the Erlang node terminates.
          For more information, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">heart(3)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To limit the shutdown time, the time <fo:inline font-family="monospace">init</fo:inline> is allowed
          to spend taking down applications, command-line flag
          <fo:inline font-family="monospace">-shutdown_time</fo:inline> is to be used.</fo:block>
      </fo:block>
  

  <fo:block id="idp16933968" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Command-Line Flags</fo:block>
    
    
    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The support for loading of code from archive files is
        experimental. The only purpose of releasing it before it is ready
	is to obtain early feedback. The file format, semantics,
	interfaces, and so on, can  be changed in a future release. The
        <fo:inline font-family="monospace">-code_path_choice</fo:inline> flag is also experimental.</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">init</fo:inline> module interprets the following command-line flags:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">--</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Everything following <fo:inline font-family="monospace">--</fo:inline> up to the next flag is
          considered plain arguments and can be retrieved using
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">get_plain_arguments/0</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-code_path_choice Choice</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be set to <fo:inline font-family="monospace">strict</fo:inline> or <fo:inline font-family="monospace">relaxed</fo:inline>. It controls how each
          directory in the code path is to be interpreted:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Strictly as it appears in the <fo:inline font-family="monospace">boot script</fo:inline>, or</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">init</fo:inline> is to be more relaxed and try to find a suitable
              directory if it can choose from a regular <fo:inline font-family="monospace">ebin</fo:inline> directory
              and an <fo:inline font-family="monospace">ebin</fo:inline> directory in an archive file.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This flag is particular
          useful when you want to elaborate with code loading from
          archives without editing the <fo:inline font-family="monospace">boot script</fo:inline>. For more
          information about interpretation of boot scripts, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">script(4)</fo:inline></fo:inline>.
          The flag has also a similar effect on how the code server works; see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-epmd_module Module</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the module to use for registration and lookup of
          node names.  Defaults to <fo:inline font-family="monospace">erl_epmd</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-eval Expr</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Scans, parses, and evaluates an arbitrary expression
          <fo:inline font-family="monospace">Expr</fo:inline> during system initialization. If any of these
          steps fail (syntax error, parse error, or exception during
          evaluation), Erlang stops with an error message. In the following
          example Erlang is used as a hexadecimal calculator:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -noshell -eval 'R = 16#1F+16#A0, io:format("~.16B~n", [R])' \\</fo:inline>
<fo:inline font-weight="bold">-s erlang halt</fo:inline>
BF</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If multiple <fo:inline font-family="monospace">-eval</fo:inline> expressions are specified, they
          are evaluated sequentially in the order specified.
          <fo:inline font-family="monospace">-eval</fo:inline> expressions are evaluated sequentially with
          <fo:inline font-family="monospace">-s</fo:inline> and <fo:inline font-family="monospace">-run</fo:inline> function calls (this also in
          the order specified). As with <fo:inline font-family="monospace">-s</fo:inline> and <fo:inline font-family="monospace">-run</fo:inline>, an
          evaluation that does not terminate blocks the system
          initialization process.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-extra</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Everything following <fo:inline font-family="monospace">-extra</fo:inline> is considered plain
          arguments and can be retrieved using
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">get_plain_arguments/0</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-run Mod [Func [Arg1, Arg2, ...]]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluates the specified function call during system
          initialization. <fo:inline font-family="monospace">Func</fo:inline> defaults to <fo:inline font-family="monospace">start</fo:inline>. If no
          arguments are provided, the function is assumed to be of arity
          0. Otherwise it is assumed to be of arity 1, taking the list
          <fo:inline font-family="monospace">[Arg1,Arg2,...]</fo:inline> as argument. All arguments are passed
          as strings. If an exception is raised, Erlang stops with an
          error message.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -run foo -run foo bar -run foo bar baz 1 2</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This starts the Erlang runtime system and evaluates
          the following functions:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
foo:start()
foo:bar()
foo:bar(["baz", "1", "2"]).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions are executed sequentially in an initialization
          process, which then terminates normally and passes control to
          the user. This means that a <fo:inline font-family="monospace">-run</fo:inline> call that does not
          return blocks further processing; to avoid this, use
          some variant of <fo:inline font-family="monospace">spawn</fo:inline> in such cases.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-s Mod [Func [Arg1, Arg2, ...]]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluates the specified function call during system
          initialization. <fo:inline font-family="monospace">Func</fo:inline> defaults to <fo:inline font-family="monospace">start</fo:inline>. If no
          arguments are provided, the function is assumed to be of arity
          0. Otherwise it is assumed to be of arity 1, taking the list
          <fo:inline font-family="monospace">[Arg1,Arg2,...]</fo:inline> as argument. All arguments are passed
          as atoms. If an exception is raised, Erlang stops with an
          error message.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -s foo -s foo bar -s foo bar baz 1 2</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This starts the Erlang runtime system and evaluates
          the following functions:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
foo:start()
foo:bar()
foo:bar([baz, '1', '2']).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions are executed sequentially in an initialization
          process, which then terminates normally and passes control to
          the user. This means that a <fo:inline font-family="monospace">-s</fo:inline> call that does not
          return blocks further processing; to avoid this, use
          some variant of <fo:inline font-family="monospace">spawn</fo:inline> in such cases.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Because of the limited length of atoms, it is recommended to
          use <fo:inline font-family="monospace">-run</fo:inline> instead.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp16977840" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Example</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -- a b -children thomas claire -ages 7 3 -- x y</fo:inline>
...

1&gt; <fo:inline font-weight="bold">init:get_plain_arguments().</fo:inline>
["a","b","x","y"]
2&gt; <fo:inline font-weight="bold">init:get_argument(children).</fo:inline>
{ok,[["thomas","claire"]]}
3&gt; <fo:inline font-weight="bold">init:get_argument(ages).</fo:inline>
{ok, [["7","3"]]}
4&gt; <fo:inline font-weight="bold">init:get_argument(silly).</fo:inline>
error</fo:block>
  

  <fo:block id="idp16981536" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">erl_prim_loader(3)</fo:inline></fo:inline>, 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">heart(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp16990384" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">zlib</fo:marker>zlib</fo:block>Erlang module</fo:block>
  <fo:block/>
  zlib
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module provides an API for the zlib library
      (<fo:inline font-weight="bold"><fo:basic-link external-destination="href">www.zlib.net</fo:basic-link></fo:inline>).
      It is used to compress and decompress data.
      The data format is described by
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 1950</fo:basic-link></fo:inline>,
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 1951</fo:basic-link></fo:inline>, and
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 1952</fo:basic-link></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A typical (compress) usage is as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Z = zlib:open(),
ok = zlib:deflateInit(Z,default),

Compress = fun(end_of_data, _Cont) -&gt; [];
              (Data, Cont) -&gt;
                 [zlib:deflate(Z, Data)|Cont(Read(),Cont)]
           end,
Compressed = Compress(Read(),Compress),
Last = zlib:deflate(Z, [], finish),
ok = zlib:deflateEnd(Z),
zlib:close(Z),
list_to_binary([Compressed|Last])</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In all functions errors, <fo:inline font-family="monospace">{'EXIT',{Reason,Backtrace}}</fo:inline>,
      can be thrown, where <fo:inline font-family="monospace">Reason</fo:inline> describes the error.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical <fo:inline font-family="monospace">Reasons</fo:inline>s:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Bad argument.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">data_error</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The data contains errors.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">stream_error</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Inconsistent stream state.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">einval</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Bad value or wrong function called.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{need_dictionary,Adler32}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">See <fo:inline font-style="italic"><fo:inline font-family="monospace">inflate/2</fo:inline></fo:inline>.
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">zstream() = port()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A zlib stream, see <fo:inline font-style="italic"><fo:inline font-family="monospace">open/0</fo:inline></fo:inline>.
        </fo:block>
       
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">zlevel() = <fo:block/>    none | default | best_compression | best_speed | 0..9</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">zmemlevel() = 1..9</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">zmethod() = deflated</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">zstrategy() = default | filtered | huffman_only | rle</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">zwindowbits() = -15..-8 | 8..47</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally in the range <fo:inline font-family="monospace">-15..-8 | 8..15</fo:inline>.</fo:block>
      
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp17015440"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">adler32(Z, Data) -&gt; CheckSum</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">CheckSum = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calculates the Adler-32 checksum for <fo:inline font-family="monospace">Data</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17018672"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">adler32(Z, PrevAdler, Data) -&gt; CheckSum</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">PrevAdler = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">CheckSum = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Updates a running Adler-32 checksum for <fo:inline font-family="monospace">Data</fo:inline>.
          If <fo:inline font-family="monospace">Data</fo:inline> is the empty binary or the empty iolist,
          this function returns the required initial value for the checksum.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Crc = lists:foldl(fun(Data,Crc0) -&gt;
                      zlib:adler32(Z, Crc0, Data),
                  end, zlib:adler32(Z,&lt;&lt; &gt;&gt;), Datas)</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17023616"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">adler32_combine(Z, Adler1, Adler2, Size2) -&gt; Adler</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Adler = Adler1 = Adler2 = Size2 = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Combines two Adler-32 checksums into one. For two binaries or
          iolists, <fo:inline font-family="monospace">Data1</fo:inline> and <fo:inline font-family="monospace">Data2</fo:inline> with sizes of <fo:inline font-family="monospace">Size1</fo:inline>
          and <fo:inline font-family="monospace">Size2</fo:inline>, with Adler-32 checksums
          <fo:inline font-family="monospace">Adler1</fo:inline> and <fo:inline font-family="monospace">Adler2</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function returns the <fo:inline font-family="monospace">Adler</fo:inline> checksum of
          <fo:inline font-family="monospace">[Data1,Data2]</fo:inline>, requiring only <fo:inline font-family="monospace">Adler1</fo:inline>,
          <fo:inline font-family="monospace">Adler2</fo:inline>, and <fo:inline font-family="monospace">Size2</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17032624"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">close(Z) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes the stream referenced by <fo:inline font-family="monospace">Z</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17035840"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">compress(Data) -&gt; Compressed</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Compressed = binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compresses data with zlib headers and checksum.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17038528"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">crc32(Z) -&gt; CRC</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">CRC = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the current calculated CRC checksum.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17041184"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">crc32(Z, Data) -&gt; CRC</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">CRC = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calculates the CRC checksum for <fo:inline font-family="monospace">Data</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17044400"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">crc32(Z, PrevCRC, Data) -&gt; CRC</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">PrevCRC = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">CRC = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Updates a running CRC checksum for <fo:inline font-family="monospace">Data</fo:inline>.
          If <fo:inline font-family="monospace">Data</fo:inline> is the empty binary or the empty iolist,
          this function returns the required initial value for the CRC.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Crc = lists:foldl(fun(Data,Crc0) -&gt;
                      zlib:crc32(Z, Crc0, Data),
                  end, zlib:crc32(Z,&lt;&lt; &gt;&gt;), Datas)</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17049312"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">crc32_combine(Z, CRC1, CRC2, Size2) -&gt; CRC</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">CRC = CRC1 = CRC2 = Size2 = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Combines two CRC checksums into one. For two binaries or iolists,
          <fo:inline font-family="monospace">Data1</fo:inline> and <fo:inline font-family="monospace">Data2</fo:inline> with sizes of <fo:inline font-family="monospace">Size1</fo:inline> and
          <fo:inline font-family="monospace">Size2</fo:inline>, with CRC checksums <fo:inline font-family="monospace">CRC1</fo:inline>
          and <fo:inline font-family="monospace">CRC2</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function returns the <fo:inline font-family="monospace">CRC</fo:inline> checksum of
          <fo:inline font-family="monospace">[Data1,Data2]</fo:inline>, requiring only <fo:inline font-family="monospace">CRC1</fo:inline>,
          <fo:inline font-family="monospace">CRC2</fo:inline>, and <fo:inline font-family="monospace">Size2</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17058288"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">deflate(Z, Data) -&gt; Compressed</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Compressed = iolist()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">deflate(Z, Data, none)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17062256"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">deflate(Z, Data, Flush) -&gt; Compressed</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Flush = none | sync | full | finish</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Compressed = iolist()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compresses as much data as possible, and
          stops when the input buffer becomes empty. It can introduce
          some output latency (reading input without producing any
          output) except when forced to flush.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Flush</fo:inline> is set to <fo:inline font-family="monospace">sync</fo:inline>, all
          pending output is flushed to the output buffer and the
          output is aligned on a byte boundary, so that the
          decompressor can get all input data available so far. 
          Flushing can degrade compression for some compression algorithms;
          thus, use it only when necessary.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Flush</fo:inline> is set to <fo:inline font-family="monospace">full</fo:inline>, all output is
          flushed as with <fo:inline font-family="monospace">sync</fo:inline>, and the compression state is reset so
          that decompression can restart from this point if previous compressed
          data has been damaged or if random access is desired. Using
          <fo:inline font-family="monospace">full</fo:inline> too often can seriously degrade the compression.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Flush</fo:inline> is set to <fo:inline font-family="monospace">finish</fo:inline>,
          pending input is processed, pending output is flushed, and
          <fo:inline font-family="monospace">deflate/3</fo:inline> returns. Afterwards the only possible operations
          on the stream are
          <fo:inline font-style="italic"><fo:inline font-family="monospace">deflateReset/1</fo:inline></fo:inline> or
          <fo:inline font-style="italic"><fo:inline font-family="monospace">deflateEnd/1</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Flush</fo:inline> can be set to <fo:inline font-family="monospace">finish</fo:inline> immediately
          after <fo:inline font-style="italic"><fo:inline font-family="monospace">deflateInit</fo:inline></fo:inline>
          if all compression is to be done in one step.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
zlib:deflateInit(Z),
B1 = zlib:deflate(Z,Data),
B2 = zlib:deflate(Z,&lt;&lt; &gt;&gt;,finish),
zlib:deflateEnd(Z),
list_to_binary([B1,B2])</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17076480"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">deflateEnd(Z) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Ends the deflate session and cleans all data used. Notice that this
          function throws a <fo:inline font-family="monospace">data_error</fo:inline> exception if the last call to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">deflate/3</fo:inline></fo:inline>
          was not called with <fo:inline font-family="monospace">Flush</fo:inline> set to <fo:inline font-family="monospace">finish</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17081424"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">deflateInit(Z) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">zlib:deflateInit(Z, default)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17084960"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">deflateInit(Z, Level) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Level = <fo:inline font-style="italic">zlevel()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initializes a zlib stream for compression.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Level</fo:inline> decides the compression level to be
          used:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>0 (<fo:inline font-family="monospace">none</fo:inline>), gives no compression</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>1 (<fo:inline font-family="monospace">best_speed</fo:inline>) gives best speed</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>9 (<fo:inline font-family="monospace">best_compression</fo:inline>) gives best compression</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17091952"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">deflateInit(Z, Level, Method, WindowBits, MemLevel, Strategy) -&gt;<fo:block/>               ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Level = <fo:inline font-style="italic">zlevel()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Method = <fo:inline font-style="italic">zmethod()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">WindowBits = <fo:inline font-style="italic">zwindowbits()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MemLevel = <fo:inline font-style="italic">zmemlevel()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Strategy = <fo:inline font-style="italic">zstrategy()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initiates a zlib stream for compression.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Level</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compression level to use:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>0 (<fo:inline font-family="monospace">none</fo:inline>), gives no compression</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>1 (<fo:inline font-family="monospace">best_speed</fo:inline>) gives best speed</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>9 (<fo:inline font-family="monospace">best_compression</fo:inline>) gives best compression</fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Method</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compression method to use, currently the only supported method
              is <fo:inline font-family="monospace">deflated</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">WindowBits</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The base two logarithm of the window size (the size of the
              history buffer). It is to be in the range 8 through 15. Larger
              values result in better compression at the expense of memory
              usage. Defaults to 15 if <fo:inline font-style="italic">
              <fo:inline font-family="monospace">deflateInit/2</fo:inline></fo:inline> is used. A negative
              <fo:inline font-family="monospace">WindowBits</fo:inline> value suppresses the zlib header
              (and checksum) from the stream. Notice that the zlib source
              mentions this only as a undocumented feature.</fo:block>
	      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Due to a known bug in the underlying zlib library, <fo:inline font-family="monospace">WindowBits</fo:inline> values 8 and -8
		do not work as expected. In zlib versions before 1.2.9 values
		8 and -8 are automatically changed to 9 and -9. <fo:inline font-weight="bold">From zlib version 1.2.9
		value -8 is rejected</fo:inline> causing <fo:inline font-family="monospace">zlib:deflateInit/6</fo:inline> to fail
		(8 is still changed to 9). It also seem possible that future versions
		of zlib may fix this bug and start accepting 8 and -8 as is.</fo:block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Conclusion: Avoid values 8 and -8 unless you know your zlib version supports them.</fo:block>
	      </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">MemLevel</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies how much memory is to be allocated for the internal
              compression state: <fo:inline font-family="monospace">MemLevel</fo:inline>=1 uses minimum
              memory but is slow and reduces compression ratio;
              <fo:inline font-family="monospace">MemLevel</fo:inline>=9 uses maximum memory for optimal
              speed. Defaults to 8.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Strategy</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tunes the compression algorithm. Use the following values:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">default</fo:inline> for normal data</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">filtered</fo:inline> for data produced by a filter (or
                predictor)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">huffman_only</fo:inline> to force Huffman encoding only
                (no string match)</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">rle</fo:inline> to limit match distances to one (run-length
                encoding)</fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Filtered data consists mostly of small values with a somewhat
              random distribution. In this case, the compression algorithm is
              tuned to compress them better. The effect of <fo:inline font-family="monospace">filtered</fo:inline> is to
              force more Huffman coding and less string matching; it is somewhat
              intermediate between <fo:inline font-family="monospace">default</fo:inline> and <fo:inline font-family="monospace">huffman_only</fo:inline>.
              <fo:inline font-family="monospace">rle</fo:inline> is designed to be almost as fast as
              <fo:inline font-family="monospace">huffman_only</fo:inline>, but gives better compression for PNG image
              data.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Strategy</fo:inline> affects only the compression ratio,
              but not the correctness of the compressed output even if it is not
              set appropriately.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17121328"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">deflateParams(Z, Level, Strategy) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Level = <fo:inline font-style="italic">zlevel()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Strategy = <fo:inline font-style="italic">zstrategy()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dynamically updates the compression level and compression
          strategy. The interpretation of <fo:inline font-family="monospace">Level</fo:inline> and
          <fo:inline font-family="monospace">Strategy</fo:inline> is as in
          <fo:inline font-style="italic"><fo:inline font-family="monospace">deflateInit/6</fo:inline></fo:inline>.
          This can be
          used to switch between compression and straight copy of the
          input data, or to switch to a different kind of input data
          requiring a different strategy. If the compression level is
          changed, the input available so far is compressed with the
          old level (and can be flushed); the new level takes
          effect only at the next call of
          <fo:inline font-style="italic"><fo:inline font-family="monospace">deflate/3</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before the call of <fo:inline font-family="monospace">deflateParams</fo:inline>, the stream state must be
          set as for a call of <fo:inline font-family="monospace">deflate/3</fo:inline>, as the currently available
          input may have to be compressed and flushed.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17128752"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">deflateReset(Z) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">deflateEnd/1</fo:inline></fo:inline>
          followed by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">deflateInit/1,2,6</fo:inline></fo:inline>,
          but does not free and reallocate all the internal compression state.
          The stream keeps the same compression level and any other
          attributes.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17133280"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">deflateSetDictionary(Z, Dictionary) -&gt; Adler32</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dictionary = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Adler32 = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initializes the compression dictionary from the specified byte
          sequence without producing any compressed output.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function must be called immediately after
          <fo:inline font-style="italic"><fo:inline font-family="monospace">deflateInit/1,2,6</fo:inline></fo:inline> or
          <fo:inline font-style="italic"><fo:inline font-family="monospace">deflateReset/1</fo:inline></fo:inline>,
          before any call of
          <fo:inline font-style="italic"><fo:inline font-family="monospace">deflate/3</fo:inline></fo:inline>.
          The compressor and decompressor must use the same dictionary (see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">inflateSetDictionary/2</fo:inline></fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Adler checksum of the dictionary is returned.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17140672"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">getBufSize(Z) -&gt; Size</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Size = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the size of the intermediate buffer.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17143328"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">gunzip(Data) -&gt; Decompressed</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Decompressed = binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Uncompresses data with gz headers and checksum.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17146000"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">gzip(Data) -&gt; Compressed</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Compressed = binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compresses data with gz headers and checksum.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17148672"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">inflate(Z, Data) -&gt; Decompressed</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Decompressed = iolist()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decompresses as much data as possible.
          It can introduce some output latency (reading
          input without producing any output).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a preset dictionary is needed at this point (see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">inflateSetDictionary/2</fo:inline></fo:inline>), <fo:inline font-family="monospace">inflate/2</fo:inline> throws a
          <fo:inline font-family="monospace">{need_dictionary,Adler}</fo:inline> exception, where <fo:inline font-family="monospace">Adler</fo:inline> is
          the Adler-32 checksum of the dictionary chosen by the compressor.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17154336"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">inflateChunk(Z) -&gt; Decompressed | {more, Decompressed}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Decompressed = iolist()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads the next chunk of uncompressed data, initialized by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inflateChunk/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is to be repeatedly called, while it returns
          <fo:inline font-family="monospace">{more, Decompressed}</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17158816"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">inflateChunk(Z, Data) -&gt; Decompressed | {more, Decompressed}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Decompressed = iolist()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Like <fo:inline font-style="italic"><fo:inline font-family="monospace">inflate/2</fo:inline></fo:inline>,
          but decompresses no more data than will fit in the buffer configured
          through <fo:inline font-style="italic"><fo:inline font-family="monospace">setBufSize/2</fo:inline></fo:inline>.
          Is is useful when decompressing a stream with a high compression
          ratio, such that a small amount of compressed input can expand up to
          1000 times.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function returns <fo:inline font-family="monospace">{more, Decompressed}</fo:inline>, when there is
          more output available, and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inflateChunk/1</fo:inline></fo:inline>
          is to be used to read it.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can introduce some output latency (reading
          input without producing any output).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a preset dictionary is needed at this point (see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">inflateSetDictionary/2</fo:inline></fo:inline>), this function throws a
          <fo:inline font-family="monospace">{need_dictionary,Adler}</fo:inline> exception, where <fo:inline font-family="monospace">Adler</fo:inline> is
          the Adler-32 checksum of the dictionary chosen by the compressor.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
walk(Compressed, Handler) -&gt;
    Z = zlib:open(),
    zlib:inflateInit(Z),
    % Limit single uncompressed chunk size to 512kb
    zlib:setBufSize(Z, 512 * 1024),
    loop(Z, Handler, zlib:inflateChunk(Z, Compressed)),
    zlib:inflateEnd(Z),
    zlib:close(Z).

loop(Z, Handler, {more, Uncompressed}) -&gt;
    Handler(Uncompressed),
    loop(Z, Handler, zlib:inflateChunk(Z));
loop(Z, Handler, Uncompressed) -&gt;
    Handler(Uncompressed).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17169536"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">inflateEnd(Z) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Ends the inflate session and cleans all data used. Notice
          that this function throws a <fo:inline font-family="monospace">data_error</fo:inline> exception
          if no end of stream was found (meaning that not all data
          has been uncompressed).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17172784"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">inflateInit(Z) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initializes a zlib stream for decompression.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17175456"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">inflateInit(Z, WindowBits) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">WindowBits = <fo:inline font-style="italic">zwindowbits()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initializes a decompression session on zlib stream.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">WindowBits</fo:inline> is the base two logarithm
          of the maximum window size (the size of the history buffer).
          It is to be in the range 8 through 15. Default to 15 if
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inflateInit/1</fo:inline></fo:inline>
          is used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a compressed stream with a larger window size is specified as
          input, <fo:inline font-style="italic"><fo:inline font-family="monospace">inflate/2</fo:inline></fo:inline>
          throws the <fo:inline font-family="monospace">data_error</fo:inline> exception.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A negative <fo:inline font-family="monospace">WindowBits</fo:inline> value makes zlib
          ignore the zlib header (and checksum) from the stream. Notice that
          the zlib source mentions this only as a undocumented feature.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17182976"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">inflateReset(Z) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inflateEnd/1</fo:inline></fo:inline>
          followed by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inflateInit/1</fo:inline></fo:inline>,
          but does not free and reallocate all the internal decompression state.
          The stream will keep attributes that could have been set by
          <fo:inline font-family="monospace">inflateInit/1,2</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17187936"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">inflateSetDictionary(Z, Dictionary) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dictionary = iodata()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initializes the decompression dictionary from the specified
          uncompressed byte sequence. This function must be called
          immediately after a call of
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inflate/2</fo:inline></fo:inline>
          if this call threw a <fo:inline font-family="monospace">{need_dictionary,Adler}</fo:inline> exception.
          The dictionary chosen by the compressor can be determined from the
          Adler value thrown by the call to <fo:inline font-family="monospace">inflate/2</fo:inline>.
          The compressor and decompressor must use the same dictionary (see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">deflateSetDictionary/2</fo:inline></fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
unpack(Z, Compressed, Dict) -&gt;
     case catch zlib:inflate(Z, Compressed) of
          {'EXIT',{{need_dictionary,DictID},_}} -&gt;
                   zlib:inflateSetDictionary(Z, Dict),
                 Uncompressed = zlib:inflate(Z, []);
          Uncompressed -&gt;
                 Uncompressed
     end.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17194896"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">inflateGetDictionary(Z) -&gt; Dictionary</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dictionary = iolist()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the decompression dictionary currently in use
          by the stream. This function must be called between
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inflateInit/1,2</fo:inline></fo:inline>
          and <fo:inline font-style="italic"><fo:inline font-family="monospace">inflateEnd</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only supported if ERTS was compiled with zlib &gt;= 1.2.8.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17199824"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open() -&gt; <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a zlib stream.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17202480"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">setBufSize(Z, Size) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Z = <fo:inline font-style="italic">zstream()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Size = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the intermediate buffer size.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17205120"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">uncompress(Data) -&gt; Decompressed</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Decompressed = binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Uncompresses data with zlib headers and checksum.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17207808"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">unzip(Data) -&gt; Decompressed</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Decompressed = binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Uncompresses data without zlib headers and checksum.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp17210496"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">zip(Data) -&gt; Compressed</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Compressed = binary()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compresses data without zlib headers and checksum.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp17220960" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">epmd</fo:marker>epmd</fo:block>Command</fo:block>
  <fo:block/>

  epmd
  Erlang Port Mapper Daemon

  

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">epmd [-d|-debug] [DbgExtra...] [-address Addresses]
      [-port No] [-daemon] [-relaxed_command_check]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the port mapper daemon.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">epmd [-d|-debug] [-port No]
      [-names|-kill|-stop Name]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Communicates with a running port mapper daemon.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This daemon acts as a name server on all hosts involved in
      distributed Erlang computations. When an Erlang node starts,
      the node has a name and it obtains an address from the host
      OS kernel. The name and address are sent to the
      <fo:inline font-family="monospace">epmd</fo:inline> daemon running on the local host.
      In a TCP/IP environment, the address consists
      of the IP address and a port number. The node name is
      an atom on the form of <fo:inline font-family="monospace">Name@Node</fo:inline>.
      The job of the <fo:inline font-family="monospace">epmd</fo:inline> daemon is to keep track of which
      node name listens on which address. Hence, <fo:inline font-family="monospace">epmd</fo:inline> maps
      symbolic node names to machine addresses.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The TCP/IP <fo:inline font-family="monospace">epmd</fo:inline> daemon only keeps track of
      the <fo:inline font-family="monospace">Name</fo:inline> (first) part of an Erlang node name. The <fo:inline font-family="monospace">Host</fo:inline>
      part (whatever is after the <fo:inline font-family="monospace">@</fo:inline>) is implicit in the
      node name where the <fo:inline font-family="monospace">epmd</fo:inline> daemon was contacted,
      as is the IP address where the Erlang node can be
      reached. Consistent and correct TCP naming services are
      therefore required for an Erlang network to function
      correctly.</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">Starting the port mapper daemon</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The daemon is started automatically by command
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>
          if the node is to be distributed and no running
          instance is present. If automatically launched
          environment variables must be used to change the behavior
          of the daemon; see section
          <fo:inline font-style="italic">Environment
          Variables</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If argument <fo:inline font-family="monospace">-daemon</fo:inline> is not specified,
          <fo:inline font-family="monospace">epmd</fo:inline> runs as a normal program with the
          controlling terminal of the shell in which it is
          started. Normally, it is to be run as a daemon.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Regular startup options are described in section
          <fo:inline font-style="italic">Regular Options</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">DbgExtra</fo:inline> options are described in section
          <fo:inline font-style="italic">DbgExtra Options</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Communicating with a running port mapper daemon</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Communicating with the running <fo:inline font-family="monospace">epmd</fo:inline> daemon by the
          <fo:inline font-family="monospace">epmd</fo:inline> program is done primarily for debugging purposes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The different queries are described in section <fo:inline font-style="italic">Interactive options</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp17244000" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Regular Options</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These options are available when starting the name server. The name
      server is normally started automatically by command
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline> (if not already available),
      but it can also be started at system startup.</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-address List</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lets this instance of <fo:inline font-family="monospace">epmd</fo:inline> listen only on the
	  comma-separated list of IP addresses and on the loopback address
	  (which is implicitly added to the list if it has not been
	  specified). This can also be set using environment variable
	  <fo:inline font-family="monospace">ERL_EPMD_ADDRESS</fo:inline>; see section <fo:inline font-style="italic">Environment Variables</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-port No</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lets this instance of <fo:inline font-family="monospace">epmd</fo:inline> listen to another TCP port than
	  default 4369. This can also be set using environment variable
	  <fo:inline font-family="monospace">ERL_EPMD_PORT</fo:inline>; see section <fo:inline font-style="italic">Environment Variables</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-d | -debug</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables debug output. The more <fo:inline font-family="monospace">-d</fo:inline> flags specified, the more
	  debug output you will get (to a certain limit). This option is  most
	  useful when the <fo:inline font-family="monospace">epmd</fo:inline> daemon is not started as a daemon.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-daemon</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts <fo:inline font-family="monospace">epmd</fo:inline> detached from the controlling terminal. Logging
	  ends up in syslog when available and correctly configured. If the
	  <fo:inline font-family="monospace">epmd</fo:inline> daemon is started at boot, this option is definitely
	  to be used. It is also used when command <fo:inline font-family="monospace">erl</fo:inline> automatically
	  starts <fo:inline font-family="monospace">epmd</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-relaxed_command_check</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the <fo:inline font-family="monospace">epmd</fo:inline> program with relaxed command checking
	  (mostly for backward compatibility). This affects the following:</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With relaxed command checking, the <fo:inline font-family="monospace">epmd</fo:inline> daemon can be
	      killed from the local host with, for example, command
	      <fo:inline font-family="monospace">epmd -kill</fo:inline> even if active nodes are registered. Normally
	      only daemons with an empty node database can be killed with
	      <fo:inline font-family="monospace">epmd -kill</fo:inline>.</fo:block>
	  </fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Command <fo:inline font-family="monospace">epmd -stop</fo:inline> (and the corresponding messages to
	      <fo:inline font-family="monospace">epmd</fo:inline>, as can be specified using <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_interface:ei(3)</fo:inline></fo:inline>) is
	      normally always ignored. This because it can cause a strange
	      situation where two nodes of the same name can be alive at the
	      same time. A node unregisters itself by only closing the
	      connection to <fo:inline font-family="monospace">epmd</fo:inline>, which is why command <fo:inline font-family="monospace">stop</fo:inline>
	      was only intended for use in debugging situations.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With relaxed command checking enabled, you can forcibly
	      unregister live nodes.</fo:block>
	  </fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Relaxed command checking can also be enabled by setting environment
	  variable <fo:inline font-family="monospace">ERL_EPMD_RELAXED_COMMAND_CHECK</fo:inline> before starting
	  <fo:inline font-family="monospace">epmd</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use relaxed command checking only on systems with very limited
	  interactive usage.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp17271248" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DbgExtra Options</fo:block>
    
    
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These options are only for debugging and testing <fo:inline font-family="monospace">epmd</fo:inline> clients.
      They are not to be used in normal operation.</fo:block>
    </fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-packet_timeout Seconds</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the number of seconds a connection can be
	  inactive before <fo:inline font-family="monospace">epmd</fo:inline> times out and closes the
	  connection. Defaults to 60.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-delay_accept Seconds</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To simulate a busy server, you can insert a delay between when
	  <fo:inline font-family="monospace">epmd</fo:inline> gets notified that a new connection is requested and
	  when the connection gets accepted.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-delay_write Seconds</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also a simulation of a busy server. Inserts
	  a delay before a reply is sent.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp17280176" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Interactive Options</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These options make <fo:inline font-family="monospace">epmd</fo:inline> run as an interactive command,
      displaying the results of sending queries to an already running
      instance of <fo:inline font-family="monospace">epmd</fo:inline>. The <fo:inline font-family="monospace">epmd</fo:inline> contacted is always on the
      local node, but option <fo:inline font-family="monospace">-port</fo:inline> can be used to select between
      instances if several are running using different ports on the host.</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-port No</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Contacts the <fo:inline font-family="monospace">epmd</fo:inline> listening on the specified TCP port
	  number (default 4369). This can also be set using environment
	  variable <fo:inline font-family="monospace">ERL_EPMD_PORT</fo:inline>; see section <fo:inline font-style="italic">Environment Variables</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-names</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lists names registered with the currently running <fo:inline font-family="monospace">epmd</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-kill</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Kills the currently running <fo:inline font-family="monospace">epmd</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Killing the running <fo:inline font-family="monospace">epmd</fo:inline> is only allowed if
	  <fo:inline font-family="monospace">epmd -names</fo:inline> shows an empty database or if
	  <fo:inline font-family="monospace">-relaxed_command_check</fo:inline> was specified when the running
	  instance of <fo:inline font-family="monospace">epmd</fo:inline> was started.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-family="monospace">-relaxed_command_check</fo:inline> is specified when
	  starting the daemon that is to accept killing when it has live
	  nodes registered. When running <fo:inline font-family="monospace">epmd</fo:inline> interactively,
	  <fo:inline font-family="monospace">-relaxed_command_check</fo:inline> has no effect. A daemon that is
	  started without relaxed command checking must be killed using,
	  for example, signals or some other OS-specific method if it has
	active clients registered.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-stop Name</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Forcibly unregisters a live node from the <fo:inline font-family="monospace">epmd</fo:inline> database.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This command can only be used when contacting <fo:inline font-family="monospace">epmd</fo:inline>
	  instances started with flag <fo:inline font-family="monospace">-relaxed_command_check</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that relaxed command checking must enabled for the
	  <fo:inline font-family="monospace">epmd</fo:inline> daemon contacted. When running <fo:inline font-family="monospace">epmd</fo:inline>
	  interactively, <fo:inline font-family="monospace">-relaxed_command_check</fo:inline> has no effect.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp17301200" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Environment Variables</fo:block>
    
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_EPMD_ADDRESS</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be set to a comma-separated
	  list of IP addresses, in which case the <fo:inline font-family="monospace">epmd</fo:inline> daemon
	  will listen only on the specified address(es) and on the
	  loopback address (which is implicitly added to the list if it
	  has not been specified). The default behavior is to listen on
	  all available IP addresses.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_EPMD_PORT</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can contain the port number <fo:inline font-family="monospace">epmd</fo:inline> will use.
	  The default port will work fine in most cases. A different port can
	  be specified to allow several instances of <fo:inline font-family="monospace">epmd</fo:inline>, representing
	  independent clusters of nodes, to co-exist on the same host.
	  All nodes in a cluster must use the same <fo:inline font-family="monospace">epmd</fo:inline> port number.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_EPMD_RELAXED_COMMAND_CHECK</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If set before start, the <fo:inline font-family="monospace">epmd</fo:inline> daemon behaves
	  as if option <fo:inline font-family="monospace">-relaxed_command_check</fo:inline> was specified at
	  startup. Consequently, if this option is set before starting
	  the Erlang virtual machine, the automatically started
	  <fo:inline font-family="monospace">epmd</fo:inline> accepts the <fo:inline font-family="monospace">-kill</fo:inline> and <fo:inline font-family="monospace">-stop</fo:inline>
	  commands without restrictions.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp17311696" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Logging</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On some operating systems <fo:inline font-weight="bold">syslog</fo:inline> will be used for
      error reporting when <fo:inline font-family="monospace">epmd</fo:inline> runs as a daemon. To enable
      the error logging, you must edit the
      /etc/syslog.conf file and add an
      entry:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  !epmd
  *.*&lt;TABs&gt;/var/log/epmd.log
</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">&lt;TABs&gt;</fo:inline> are at least one real tab character.
      Spaces are silently ignored.</fo:block>
  

  <fo:block id="idp17316752" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Access Restrictions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">epmd</fo:inline> daemon accepts messages from both the local host and
      remote hosts. However, only the query commands are answered (and
      acted upon) if the query comes from a remote host. It is always an
      error to try to register a node name if the client is not a process
      on the same host as the <fo:inline font-family="monospace">epmd</fo:inline> instance is running on. Such
      requests are considered hostile and the connection is closed
      immediately.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following queries are accepted from remote nodes:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Port queries, that is, on which port the node with a specified
	  name listens</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Name listing, that is, gives a list of all names registered on
	  the host</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To restrict access further, firewall software must be used.</fo:block>
  
<fo:block page-break-before="always" id="idp17329120" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl</fo:marker>erl</fo:block>Command</fo:block>
  <fo:block/>
  erl
  The Erlang emulator.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">erl</fo:inline> program starts an Erlang runtime system.
      The exact details (for example, whether <fo:inline font-family="monospace">erl</fo:inline> is a
      script or a program and which other programs it calls) are
      system-dependent.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Windows users probably want to use the <fo:inline font-family="monospace">werl</fo:inline> program
      instead, which runs in its own window with scrollbars and supports
      command-line editing. The <fo:inline font-family="monospace">erl</fo:inline> program on Windows
      provides no line editing in its shell, and on Windows 95 there is no way
      to scroll back to text that has scrolled off the screen. The
      <fo:inline font-family="monospace">erl</fo:inline> program must be used, however, in pipelines or if
      you want to redirect standard input or output.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from ERTS 5.9 (Erlang/OTP R15B) the runtime system does by
        default <fo:inline font-weight="bold">not</fo:inline> bind schedulers to logical processors.
	For more information, see system flag
	<fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt</fo:inline></fo:inline>.</fo:block>
    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp17337008">erl &lt;arguments&gt;</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts an Erlang runtime system.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The arguments can be divided into <fo:inline font-weight="bold">emulator flags</fo:inline>,
	  <fo:inline font-weight="bold">flags</fo:inline>, and <fo:inline font-weight="bold">plain arguments</fo:inline>:</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any argument starting with character <fo:inline font-family="monospace">+</fo:inline> is
	      interpreted as an
	      <fo:inline font-style="italic">emulator flag</fo:inline>.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As indicated by the name, emulator flags control
	      the behavior of the emulator.</fo:block>
	  </fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any argument starting with character <fo:inline font-family="monospace">-</fo:inline>
	      (hyphen) is interpreted as a
	      <fo:inline font-style="italic">flag</fo:inline>, which is to
	      be passed to the Erlang part of the runtime system, more
	      specifically to the <fo:inline font-family="monospace">init</fo:inline> system process, see
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">init(3)</fo:inline></fo:inline>.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">init</fo:inline> process itself interprets some of
	      these flags, the <fo:inline font-weight="bold">init flags</fo:inline>. It also stores any
	      remaining flags, the <fo:inline font-weight="bold">user flags</fo:inline>. The latter can be
	      retrieved by calling <fo:inline font-family="monospace">init:get_argument/1</fo:inline>.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A small number of "-" flags exist, which now actually are
	      emulator flags, see the description below.</fo:block>
	  </fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Plain arguments are not interpreted in any way. They are also
	      stored by the <fo:inline font-family="monospace">init</fo:inline> process and can be retrieved
	      by calling <fo:inline font-family="monospace">init:get_plain_arguments/0</fo:inline>.
	      Plain arguments can occur before the first flag, or after a
	      <fo:inline font-family="monospace">--</fo:inline> flag. Also, the <fo:inline font-family="monospace">-extra</fo:inline>
	      flag causes everything that follows to become plain arguments.</fo:block>
	  </fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl +W w -sname arnie +R 9 -s my_init -extra +bertie</fo:inline>
(arnie@host)1&gt; <fo:inline font-weight="bold">init:get_argument(sname).</fo:inline>
{ok,[["arnie"]]}
(arnie@host)2&gt; <fo:inline font-weight="bold">init:get_plain_arguments().</fo:inline>
["+bertie"]</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here <fo:inline font-family="monospace">+W w</fo:inline> and <fo:inline font-family="monospace">+R 9</fo:inline> are
	  emulator flags. <fo:inline font-family="monospace">-s my_init</fo:inline> is an init flag,
	  interpreted by <fo:inline font-family="monospace">init</fo:inline>.
	  <fo:inline font-family="monospace">-sname arnie</fo:inline> is a user flag, stored by
	  <fo:inline font-family="monospace">init</fo:inline>. It is read by Kernel and causes the
	  Erlang runtime system to become distributed. Finally, everything after
	  <fo:inline font-family="monospace">-extra</fo:inline> (that is, <fo:inline font-family="monospace">+bertie</fo:inline>) is
	  considered as plain arguments.</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -myflag 1</fo:inline>
1&gt; <fo:inline font-weight="bold">init:get_argument(myflag).</fo:inline>
{ok,[["1"]]}
2&gt; <fo:inline font-weight="bold">init:get_plain_arguments().</fo:inline>
[]</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here the user flag <fo:inline font-family="monospace">-myflag 1</fo:inline> is passed to and
	  stored by the <fo:inline font-family="monospace">init</fo:inline> process. It is a user-defined
	  flag, presumably used by some user-defined application.</fo:block>
      </fo:block>
  

  <fo:block id="idp17364368" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Flags</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following list, init flags are marked "(init flag)".
      Unless otherwise specified, all other flags are user flags, for
      which the values can be retrieved by calling
      <fo:inline font-family="monospace">init:get_argument/1</fo:inline>. Notice that the list of user
      flags is not exhaustive, there can be more application-specific
      flags that instead are described in the corresponding
      application documentation.</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">--</fo:inline> (init flag)</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Everything following <fo:inline font-family="monospace">--</fo:inline> up to the next flag
          (<fo:inline font-family="monospace">-flag</fo:inline> or <fo:inline font-family="monospace">+flag</fo:inline>) is considered
          plain arguments and can be retrieved using
          <fo:inline font-family="monospace">init:get_plain_arguments/0</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-Application Par Val</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the application configuration parameter <fo:inline font-family="monospace">Par</fo:inline>
          to the value <fo:inline font-family="monospace">Val</fo:inline> for the application
          <fo:inline font-family="monospace">Application</fo:inline>; see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">app(4)</fo:inline></fo:inline> and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">application(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-args_file FileName</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Command-line arguments are read from the file
          <fo:inline font-family="monospace">FileName</fo:inline>. The arguments read from the file replace
          flag '<fo:inline font-family="monospace">-args_file FileName</fo:inline>' on the resulting
          command line.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file <fo:inline font-family="monospace">FileName</fo:inline> is to be a plain text file and
          can contain comments and command-line arguments. A comment begins
          with a <fo:inline font-family="monospace">#</fo:inline> character and continues until the next end of line
          character. Backslash (\\) is used as quoting character. All
          command-line arguments accepted by <fo:inline font-family="monospace">erl</fo:inline> are allowed,
          also flag <fo:inline font-family="monospace">-args_file FileName</fo:inline>. Be careful not to
          cause circular dependencies between files containing flag
          <fo:inline font-family="monospace">-args_file</fo:inline>, though.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The flag <fo:inline font-family="monospace">-extra</fo:inline> is treated in special way. Its
          scope ends at the end of the file. Arguments following an
          <fo:inline font-family="monospace">-extra</fo:inline> flag are moved on the command line into the
          <fo:inline font-family="monospace">-extra</fo:inline> section, that is, the end of the command
          line following after an <fo:inline font-family="monospace">-extra</fo:inline> flag.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-async_shell_start</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The initial Erlang shell does not read user input until
          the system boot procedure has been completed (Erlang/OTP 5.4 and
          later). This flag disables the start synchronization feature
          and lets the shell start in parallel with the rest of
          the system.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-boot File</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the name of the boot file, <fo:inline font-family="monospace">File.boot</fo:inline>,
          which is used to start the system; see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init(3)</fo:inline></fo:inline>. Unless
          <fo:inline font-family="monospace">File</fo:inline> contains an absolute path, the system searches
          for <fo:inline font-family="monospace">File.boot</fo:inline> in the current and 
          <fo:inline font-family="monospace">$ROOT/bin</fo:inline> directories.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-family="monospace">$ROOT/bin/start.boot</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-boot_var Var Dir</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the boot script contains a path variable <fo:inline font-family="monospace">Var</fo:inline>
          other than <fo:inline font-family="monospace">$ROOT</fo:inline>, this variable is expanded to
          <fo:inline font-family="monospace">Dir</fo:inline>. Used when applications are installed in
          another directory than <fo:inline font-family="monospace">$ROOT/lib</fo:inline>; see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">systools:make_script/1,2</fo:inline></fo:inline> in SASL.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-code_path_cache</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables the code path cache of the code server; see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-compile Mod1 Mod2 ...</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compiles the specified modules and then terminates (with
          non-zero exit code if the compilation of some file did not
          succeed). Implies <fo:inline font-family="monospace">-noinput</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Not recommended; use <fo:inline font-style="italic"><fo:inline font-family="monospace">erlc</fo:inline></fo:inline>
          instead.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-config Config</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the name of a configuration file,
          <fo:inline font-family="monospace">Config.config</fo:inline>, which is used to configure
          applications; see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">app(4)</fo:inline></fo:inline> and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">application(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-connect_all false</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If this flag is present, <fo:inline font-family="monospace">global</fo:inline> does not maintain
          a fully connected network of distributed Erlang nodes, and then
          global name registration cannot be used; see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">global(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-cookie Cookie</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Obsolete flag without any effect and common misspelling for
          <fo:inline font-family="monospace">-setcookie</fo:inline>. Use <fo:inline font-family="monospace">-setcookie</fo:inline>
          instead.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-detached</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the Erlang runtime system detached from the system
          console. Useful for running daemons and backgrounds processes. Implies
          <fo:inline font-family="monospace">-noinput</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-emu_args</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Useful for debugging. Prints the arguments sent to the emulator.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-emu_type Type</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start an emulator of a different type. For example, to start
	the lock-counter emualator, use <fo:inline font-family="monospace">-emu_type lcnt</fo:inline>. (The emulator
	must already be built. Use the <fo:inline font-family="monospace">configure</fo:inline> option
	<fo:inline font-family="monospace">--enable-lock-counter</fo:inline> to build the lock-counter emulator.)</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-env Variable Value</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the host OS environment variable <fo:inline font-family="monospace">Variable</fo:inline> to
          the value <fo:inline font-family="monospace">Value</fo:inline> for the Erlang runtime system.
          Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -env DISPLAY gin:0</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example, an Erlang runtime system is started with
          environment variable <fo:inline font-family="monospace">DISPLAY</fo:inline> set to
          <fo:inline font-family="monospace">gin:0</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-epmd_module Module</fo:inline> (init flag)</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configures the module responsible to communicate to
          <fo:inline font-style="italic">epmd</fo:inline>. Defaults to <fo:inline font-family="monospace">erl_epmd</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-eval Expr</fo:inline> (init flag)</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes <fo:inline font-family="monospace">init</fo:inline> evaluate the expression
          <fo:inline font-family="monospace">Expr</fo:inline>; see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-extra</fo:inline> (init flag)</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Everything following <fo:inline font-family="monospace">-extra</fo:inline> is considered plain
          arguments and can be retrieved using
          <fo:inline font-family="monospace">init:get_plain_arguments/0</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-heart</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts heartbeat monitoring of the Erlang runtime system;
          see <fo:inline font-style="italic">
          <fo:inline font-family="monospace">heart(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-hidden</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the Erlang runtime system as a hidden node, if it is
          run as a distributed node. Hidden nodes always establish
          hidden connections to all other nodes except for nodes in the
          same global group. Hidden connections are not published on
          any of the connected nodes, that is, none of the connected
          nodes are part of the result from <fo:inline font-family="monospace">nodes/0</fo:inline> on the
          other node. See also hidden global groups;
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">global_group(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-hosts Hosts</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the IP addresses for the hosts on which Erlang boot servers
          are running, see <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_boot_server(3)</fo:inline></fo:inline>. This flag
          is mandatory if flag <fo:inline font-family="monospace">-loader inet</fo:inline> is present.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The IP addresses must be specified in the standard form (four
          decimal numbers separated by periods, for example,
          <fo:inline font-family="monospace">"150.236.20.74"</fo:inline>. Hosts names are not acceptable,
          but a broadcast address (preferably limited to the local network)
          is.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-id Id</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the identity of the Erlang runtime system. If it is
          run as a distributed node, <fo:inline font-family="monospace">Id</fo:inline> must be identical to
          the name supplied together with flag <fo:inline font-family="monospace">-sname</fo:inline> or
          <fo:inline font-family="monospace">-name</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-init_debug</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes <fo:inline font-family="monospace">init</fo:inline> write some debug information while
          interpreting the boot script.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-instr</fo:inline> (emulator flag)</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Selects an instrumented Erlang runtime system (virtual
          machine) to run, instead of the ordinary one. When running an
          instrumented runtime system, some resource usage data can be
          obtained and analyzed using the <fo:inline font-family="monospace">instrument</fo:inline> module.
          Functionally, it behaves exactly like an ordinary Erlang
          runtime system.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-loader Loader</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the method used by <fo:inline font-family="monospace">erl_prim_loader</fo:inline> to
          load Erlang modules into the system; see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_prim_loader(3)</fo:inline></fo:inline>.
          Two <fo:inline font-family="monospace">Loader</fo:inline> methods are supported:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">efile</fo:inline>, which means use the local file system,
              this is the default.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">inet</fo:inline>, which means use a boot server on
              another machine. The flags <fo:inline font-family="monospace">-id</fo:inline>,
              <fo:inline font-family="monospace">-hosts</fo:inline> and <fo:inline font-family="monospace">-setcookie</fo:inline> must
              also be specified.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Loader</fo:inline> is something else, the user-supplied
          <fo:inline font-family="monospace">Loader</fo:inline> port program is started.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-make</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the Erlang runtime system invoke <fo:inline font-family="monospace">make:all()</fo:inline>
          in the current working directory and then terminate; see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">make(3)</fo:inline></fo:inline>. Implies
          <fo:inline font-family="monospace">-noinput</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-man Module</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Displays the manual page for the Erlang module
          <fo:inline font-family="monospace">Module</fo:inline>. Only supported on Unix.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-mode interactive | embedded</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates if the system is to load code dynamically
          (<fo:inline font-family="monospace">interactive</fo:inline>), or if all code is to be loaded
          during system initialization (<fo:inline font-family="monospace">embedded</fo:inline>); see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>.
          Defaults to <fo:inline font-family="monospace">interactive</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-name Name</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the Erlang runtime system into a distributed node.
          This flag invokes all network servers necessary for a node to
          become distributed; see <fo:inline font-style="italic">
          <fo:inline font-family="monospace">net_kernel(3)</fo:inline></fo:inline>. It is also ensured that
          <fo:inline font-family="monospace">epmd</fo:inline> runs on the current host before Erlang is
          started; see <fo:inline font-style="italic"><fo:inline font-family="monospace">epmd(1)</fo:inline></fo:inline>.and the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">-start_epmd</fo:inline></fo:inline> option.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node name will be <fo:inline font-family="monospace">Name@Host</fo:inline>, where
          <fo:inline font-family="monospace">Host</fo:inline> is the fully qualified host name of the
          current host. For short names, use flag <fo:inline font-family="monospace">-sname</fo:inline>
          instead.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Starting a distributed node without also specifying
            <fo:inline font-style="italic"><fo:inline font-family="monospace">-proto_dist inet_tls</fo:inline></fo:inline>
            will expose the node to attacks that may give the attacker
            complete access to the node and in extension the cluster.
            When using un-secure distributed nodes, make sure that the
            network is configured to keep potential attackers out.
          </fo:block>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-noinput</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Ensures that the Erlang runtime system never tries to read
          any input. Implies <fo:inline font-family="monospace">-noshell</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-noshell</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts an Erlang runtime system with no shell. This flag
          makes it possible to have the Erlang runtime system as a
          component in a series of Unix pipes.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-nostick</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Disables the sticky directory facility of the Erlang code
          server; see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-oldshell</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Invokes the old Erlang shell from Erlang/OTP 3.3. The old shell
          can still be used.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-pa Dir1 Dir2 ...</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds the specified directories to the beginning of the code
          path, similar to <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">code:add_pathsa/1</fo:inline></fo:inline>. Note that the
	  order of the given directories will be reversed in the
	  resulting path.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As an alternative to <fo:inline font-family="monospace">-pa</fo:inline>, if several directories are
	  to be prepended to the code path and the directories have a
	  common parent directory, that parent directory can be
	  specified in environment variable <fo:inline font-family="monospace">ERL_LIBS</fo:inline>; see
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-pz Dir1 Dir2 ...</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds the specified directories to the end of the code path,
          similar to <fo:inline font-family="monospace">code:add_pathsz/1</fo:inline>; see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-path Dir1 Dir2 ...</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Replaces the path specified in the boot script; see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">script(4)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-proto_dist Proto</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a protocol for Erlang distribution:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inet_tcp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">TCP over IPv4 (the default)</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inet_tls</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Distribution over TLS/SSL, See the
            <fo:inline font-style="italic">
              Using SSL for Erlang Distribution</fo:inline> User's Guide
              for details on how to setup a secure distributed node.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inet6_tcp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">TCP over IPv6</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, to start up IPv6 distributed nodes:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -name test@ipv6node.example.com -proto_dist inet6_tcp</fo:inline></fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-remsh Node</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts Erlang with a remote shell connected to
          <fo:inline font-family="monospace">Node</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-rsh Program</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies an alternative to <fo:inline font-family="monospace">rsh</fo:inline> for starting a
          slave node on a remote host; see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">slave(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-run Mod [Func [Arg1, Arg2, ...]]</fo:inline> (init
        flag)</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes <fo:inline font-family="monospace">init</fo:inline> call the specified function.
          <fo:inline font-family="monospace">Func</fo:inline> defaults to <fo:inline font-family="monospace">start</fo:inline>.
          If no arguments are provided, the function is assumed to be of
          arity 0. Otherwise it is assumed to be of arity 1, taking the list
          <fo:inline font-family="monospace">[Arg1,Arg2,...]</fo:inline> as argument. All arguments are
          passed as strings. See <fo:inline font-style="italic">
          <fo:inline font-family="monospace">init(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-s Mod [Func [Arg1, Arg2, ...]]</fo:inline> (init flag)</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes <fo:inline font-family="monospace">init</fo:inline> call the specified function.
          <fo:inline font-family="monospace">Func</fo:inline> defaults to <fo:inline font-family="monospace">start</fo:inline>.
          If no arguments are provided, the function is assumed to be of
          arity 0. Otherwise it is assumed to be of arity 1, taking the list
          <fo:inline font-family="monospace">[Arg1,Arg2,...]</fo:inline> as argument. All arguments are
          passed as atoms. See <fo:inline font-style="italic">
          <fo:inline font-family="monospace">init(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-setcookie Cookie</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the magic cookie of the node to <fo:inline font-family="monospace">Cookie</fo:inline>; see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:set_cookie/2</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-shutdown_time Time</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies how long time (in milliseconds) the <fo:inline font-family="monospace">init</fo:inline>
          process is allowed to spend shutting down the system. If
          <fo:inline font-family="monospace">Time</fo:inline> milliseconds have elapsed, all processes still
          existing are killed. Defaults to <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-sname Name</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the Erlang runtime system into a distributed node, similar to
          <fo:inline font-family="monospace">-name</fo:inline>, but the host name portion of the node
          name <fo:inline font-family="monospace">Name@Host</fo:inline> will be the short name, not fully
          qualified.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is sometimes the only way to run distributed Erlang if
          the Domain Name System (DNS) is not running. No communication can
          exist between nodes running with flag <fo:inline font-family="monospace">-sname</fo:inline>
          and those running with flag <fo:inline font-family="monospace">-name</fo:inline>, as node
          names must be unique in distributed Erlang systems.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Starting a distributed node without also specifying
            <fo:inline font-style="italic"><fo:inline font-family="monospace">-proto_dist inet_tls</fo:inline></fo:inline>
            will expose the node to attacks that may give the attacker
            complete access to the node and in extension the cluster.
            When using un-secure distributed nodes, make sure that the
            network is configured to keep potential attackers out.
          </fo:block>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-start_epmd true | false</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies whether Erlang should start
          <fo:inline font-style="italic">epmd</fo:inline> on startup. By default
          this is <fo:inline font-family="monospace">true</fo:inline>, but if you prefer to start epmd
          manually, set this to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This only applies if Erlang is started as a distributed node,
          i.e. if <fo:inline font-family="monospace">-name</fo:inline> or <fo:inline font-family="monospace">-sname</fo:inline> is specified. Otherwise,
          epmd is not started even if <fo:inline font-family="monospace">-start_epmd true</fo:inline> is given.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that a distributed node will fail to start if epmd is
          not running.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-smp [enable|auto|disable]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-smp enable</fo:inline> and <fo:inline font-family="monospace">-smp</fo:inline> start the Erlang runtime
	  system with SMP support enabled. This can fail if no runtime
	  system with SMP support is available. <fo:inline font-family="monospace">-smp auto</fo:inline> starts
	  the Erlang runtime system with SMP support enabled if it is
	  available and more than one logical processor is detected.
	  <fo:inline font-family="monospace">-smp disable</fo:inline> starts a runtime system without SMP support.
           The runtime system without SMP support is deprecated and will
           be removed in a future major release.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also flag<fo:inline font-style="italic"><fo:inline font-family="monospace">+S</fo:inline></fo:inline>.</fo:block>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-version</fo:inline> (emulator flag)</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the emulator print its version number. The same
          as <fo:inline font-family="monospace">erl +V</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp17541184" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Emulator Flags</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl</fo:inline> invokes the code for the Erlang emulator (virtual
      machine), which supports the following flags:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">+a size</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Suggested stack size, in kilowords, for threads in the
          async thread pool. Valid range is 16-8192 kilowords. The
          default suggested stack size is 16 kilowords, that is, 64
          kilobyte on 32-bit architectures. This small default size
          has been chosen because the number of async threads can
          be large. The default size is enough for drivers
          delivered with Erlang/OTP, but might not be large
          enough for other dynamically linked-in drivers that use the
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_async()</fo:inline></fo:inline> functionality.
          Notice that the value passed is only a suggestion,
          and it can even be ignored on some platforms.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+A size</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the number of threads in async thread pool. Valid range
          is 0-1024. Defaults to 10 if thread support is available.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+B [c | d | i]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">c</fo:inline> makes <fo:inline font-family="monospace">Ctrl-C</fo:inline>
          interrupt the current shell instead of invoking the emulator break
          handler. Option <fo:inline font-family="monospace">d</fo:inline> (same as specifying
          <fo:inline font-family="monospace">+B</fo:inline> without an extra option) disables the break
          handler. Option <fo:inline font-family="monospace">i</fo:inline> makes the emulator ignore any
          break signal.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If option <fo:inline font-family="monospace">c</fo:inline> is used with
          <fo:inline font-family="monospace">oldshell</fo:inline> on Unix, <fo:inline font-family="monospace">Ctrl-C</fo:inline> will
          restart the shell process rather than interrupt it.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that on Windows, this flag is only applicable for
          <fo:inline font-family="monospace">werl</fo:inline>, not <fo:inline font-family="monospace">erl</fo:inline>
          (<fo:inline font-family="monospace">oldshell</fo:inline>). Notice also that
          <fo:inline font-family="monospace">Ctrl-Break</fo:inline> is used instead of
          <fo:inline font-family="monospace">Ctrl-C</fo:inline> on Windows.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+c true | false</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables or disables
          <fo:inline font-style="italic">time
          correction</fo:inline>:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">true</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Enables time correction. This is the default if
            time correction is supported on the specific platform.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">false</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Disables time correction.</fo:block></fo:block-container>
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For backward compatibility, the boolean value can be omitted.
          This is interpreted as <fo:inline font-family="monospace">+c false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+C no_time_warp | single_time_warp |
        multi_time_warp</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-style="italic">time warp
          mode</fo:inline>:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">no_time_warp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:inline font-style="italic">
            No time warp mode</fo:inline> (the default)</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">single_time_warp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:inline font-style="italic">
            Single time warp mode</fo:inline></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">multi_time_warp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:inline font-style="italic">
            Multi-time warp mode</fo:inline></fo:block></fo:block-container>
      </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+d</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the emulator detects an internal error (or runs out of memory),
          it, by default, generates both a crash dump and a core dump.
          The core dump is, however, not very useful as the content
          of process heaps is destroyed by the crash dump generation.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">+d</fo:inline> instructs the emulator to produce only a
          core dump and no crash dump if an internal error is detected.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:halt/1</fo:inline></fo:inline> with a string argument still
          produces a crash dump. On Unix systems, sending an emulator process
          a <fo:inline font-family="monospace">SIGUSR1</fo:inline> signal also forces a crash dump.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+e Number</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the maximum number of ETS tables.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+ec</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Forces option <fo:inline font-family="monospace">compressed</fo:inline> on all ETS tables.
          Only intended for test and evaluation.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">+fnl</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The virtual machine works with filenames as if they are encoded
          using the ISO Latin-1 encoding, disallowing Unicode characters with
          code points &gt; 255.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information about Unicode filenames, see section
          <fo:inline font-style="italic">Unicode
          Filenames</fo:inline> in the STDLIB User's Guide. Notice that
          this value also applies to command-line parameters and environment
          variables (see section <fo:inline font-style="italic">
          Unicode in Environment and Parameters</fo:inline> in the STDLIB
          User's Guide).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+fnu[{w|i|e}]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The virtual machine works with filenames as if they are encoded
          using UTF-8 (or some other system-specific Unicode encoding). This is
          the default on operating systems that enforce Unicode encoding, that
          is, Windows and MacOS X.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">+fnu</fo:inline> switch can be followed by <fo:inline font-family="monospace">w</fo:inline>, <fo:inline font-family="monospace">i</fo:inline>, or
          <fo:inline font-family="monospace">e</fo:inline> to control how wrongly encoded filenames are to be
          reported:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">w</fo:inline> means that a warning is sent to the <fo:inline font-family="monospace">error_logger</fo:inline>
              whenever a wrongly encoded filename is "skipped" in directory
              listings. This is the default.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">i</fo:inline> means that those wrongly encoded filenames are silently
              ignored.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">e</fo:inline> means that the API function returns an error whenever a
              wrongly encoded filename (or directory name) is encountered.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-style="italic">
          <fo:inline font-family="monospace">file:read_link/1</fo:inline></fo:inline> always returns an error if the link
          points to an invalid filename.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information about Unicode filenames, see section
          <fo:inline font-style="italic">Unicode
          Filenames</fo:inline> in the STDLIB User's Guide. Notice that
          this value also applies to command-line parameters and environment
          variables (see section <fo:inline font-style="italic">
          Unicode in Environment and Parameters</fo:inline> in the STDLIB
          User's Guide).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+fna[{w|i|e}]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Selection between <fo:inline font-family="monospace">+fnl</fo:inline> and <fo:inline font-family="monospace">+fnu</fo:inline> is done based
          on the current locale settings in the OS. This means that if you
          have set your terminal for UTF-8 encoding, the filesystem is
          expected to use the same encoding for filenames. This is
          default on all operating systems, except MacOS X and Windows.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">+fna</fo:inline> switch can be followed by <fo:inline font-family="monospace">w</fo:inline>, <fo:inline font-family="monospace">i</fo:inline>, or
          <fo:inline font-family="monospace">e</fo:inline>. This has effect if the locale settings cause the behavior
          of <fo:inline font-family="monospace">+fnu</fo:inline> to be selected; see the description of <fo:inline font-family="monospace">+fnu</fo:inline>
          above. If the locale settings cause the behavior of <fo:inline font-family="monospace">+fnl</fo:inline> to be
          selected, then <fo:inline font-family="monospace">w</fo:inline>, <fo:inline font-family="monospace">i</fo:inline>, or <fo:inline font-family="monospace">e</fo:inline> have no effect.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information about Unicode filenames, see section
          <fo:inline font-style="italic">Unicode
          Filenames</fo:inline> in the STDLIB User's Guide. Notice that
          this value also applies to command-line parameters and environment
          variables (see section <fo:inline font-style="italic">
          Unicode in Environment and Parameters</fo:inline> in the STDLIB
          User's Guide).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+hms Size</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the default heap size of processes to the size
          <fo:inline font-family="monospace">Size</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+hmbs Size</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the default binary virtual heap size of processes to the size
          <fo:inline font-family="monospace">Size</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+hmax Size</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the default maximum heap size of processes to the size
          <fo:inline font-family="monospace">Size</fo:inline>. Defaults to <fo:inline font-family="monospace">0</fo:inline>, which means that no
          maximum heap size is used. For more information, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">process_flag(max_heap_size, MaxHeapSize)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+hmaxel true|false</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets whether to send an error logger message or not for processes
          reaching the maximum heap size. Defaults to <fo:inline font-family="monospace">true</fo:inline>.
          For more information, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">process_flag(max_heap_size, MaxHeapSize)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+hmaxk true|false</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets whether to kill processes reaching the maximum heap size or not.
          Default to <fo:inline font-family="monospace">true</fo:inline>. For more information, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">process_flag(max_heap_size, MaxHeapSize)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+hpds Size</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the initial process dictionary size of processes to the size
          <fo:inline font-family="monospace">Size</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+hmqd off_heap|on_heap</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the default value for process flag <fo:inline font-family="monospace">message_queue_data</fo:inline>.
          Defaults to <fo:inline font-family="monospace">on_heap</fo:inline>. If <fo:inline font-family="monospace">+hmqd</fo:inline> is not
	  passed, <fo:inline font-family="monospace">on_heap</fo:inline> will be the default. For more information, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">process_flag(message_queue_data, MQD)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+K true | false</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables or disables the kernel poll functionality if supported by
          the emulator. Defaults to <fo:inline font-family="monospace">false</fo:inline> (disabled).
          If the emulator does not support kernel poll, and flag
          <fo:inline font-family="monospace">+K</fo:inline> is passed to the emulator, a warning is
          issued at startup.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+l</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables autoload tracing, displaying information while loading
          code.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+L</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prevents loading information about source filenames and line
          numbers. This saves some memory, but exceptions do not contain
          information about the filenames and line numbers.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+MFlag Value</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Memory allocator-specific flags. For more information, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erts_alloc(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">+pc Range</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the range of characters that the system considers printable in
          heuristic detection of strings. This typically affects the shell,
          debugger, and <fo:inline font-family="monospace">io:format</fo:inline> functions (when <fo:inline font-family="monospace">~tp</fo:inline> is used in
          the format string).</fo:block> 
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two values are supported for <fo:inline font-family="monospace">Range</fo:inline>:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">latin1</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The default. Only characters in the ISO Latin-1 range can be
            considered printable. This means that a character with a code point
            &gt; 255 is never considered printable and that lists containing
            such characters are displayed as lists of integers rather than text
            strings by tools.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">unicode</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All printable Unicode characters are considered when
            determining if a list of integers is to be displayed in
            string syntax. This can give unexpected results if, for
            example, your font does not cover all Unicode characters.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">io:printable_range/0</fo:inline></fo:inline> in STDLIB.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+P Number</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the maximum number of simultaneously existing processes for this
          system if a <fo:inline font-family="monospace">Number</fo:inline> is passed as value. Valid range for
	<fo:inline font-family="monospace">Number</fo:inline> is <fo:inline font-family="monospace">[1024-134217727]</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">NOTE</fo:inline>: The actual maximum chosen may be much larger than
	the <fo:inline font-family="monospace">Number</fo:inline> passed. Currently the runtime system often,
	but not always, chooses a value that is a power of 2. This might,
	however, be changed in the future. The actual value chosen can be
	checked by calling
	<fo:inline font-style="italic">erlang:system_info(process_limit)</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default value is <fo:inline font-family="monospace">262144</fo:inline></fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+Q Number</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the maximum number of simultaneously existing ports for this
          system if a Number is passed as value. Valid range for <fo:inline font-family="monospace">Number</fo:inline>
	is <fo:inline font-family="monospace">[1024-134217727]</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">NOTE</fo:inline>: The actual maximum chosen may be much larger than
	the actual <fo:inline font-family="monospace">Number</fo:inline> passed. Currently the runtime system often,
	but not always, chooses a value that is a power of 2. This might,
	however, be changed in the future. The actual value chosen can be
	checked by calling
	<fo:inline font-style="italic">erlang:system_info(port_limit)</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default value used is normally <fo:inline font-family="monospace">65536</fo:inline>. However, if
	the runtime system is able to determine maximum amount of file
	descriptors that it is allowed to open and this value is larger
	than <fo:inline font-family="monospace">65536</fo:inline>, the chosen value will increased to a value
	larger or equal to the maximum amount of file descriptors that
	can be opened.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On Windows the default value is set to <fo:inline font-family="monospace">8196</fo:inline> because the
	normal OS limitations are set higher than most machines can handle.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+R ReleaseNumber</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the compatibility mode.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The distribution mechanism is not backward compatible by
          default. This flag sets the emulator in compatibility mode
          with an earlier Erlang/OTP release <fo:inline font-family="monospace">ReleaseNumber</fo:inline>.
          The release number must be in the range
          <fo:inline font-family="monospace">&lt;current release&gt;-2..&lt;current release&gt;</fo:inline>. This
          limits the emulator, making it possible for it to communicate
          with Erlang nodes (as well as C- and Java nodes) running that
          earlier release.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Ensure that all nodes (Erlang-,  C-, and Java nodes) of
            a distributed Erlang system is of the same Erlang/OTP release,
            or from two different Erlang/OTP releases X and Y, where
            <fo:inline font-weight="bold">all</fo:inline> Y nodes have compatibility mode X.</fo:block>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+r</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Forces ETS memory block to be moved on realloc.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+rg ReaderGroupsLimit</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Limits the number of reader groups used by read/write locks
          optimized for read operations in the Erlang runtime system. By
          default the reader groups limit is 64.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the number of schedulers is less than or equal to the reader
          groups limit, each scheduler has its own reader group. When the
          number of schedulers is larger than the reader groups limit,
          schedulers share reader groups. Shared reader groups degrade
          read lock and read unlock performance while many
          reader groups degrade write lock performance. So, the limit is a
          tradeoff between performance for read operations and performance
          for write operations. Each reader group consumes 64 byte
          in each read/write lock.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that a runtime system using shared reader groups benefits from
          <fo:inline font-style="italic">binding schedulers to logical
          processors</fo:inline>, as the reader groups are distributed better
          between schedulers.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">+S Schedulers:SchedulerOnline</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the number of scheduler threads to create and scheduler threads
          to set online when SMP support has been enabled. The maximum for both
          values is 1024. If the Erlang runtime system is able to determine the
          number of logical processors configured and logical processors
          available, <fo:inline font-family="monospace">Schedulers</fo:inline> defaults to logical processors
          configured, and <fo:inline font-family="monospace">SchedulersOnline</fo:inline> defaults to logical processors
          available; otherwise the default values are 1. <fo:inline font-family="monospace">Schedulers</fo:inline> can
          be omitted if <fo:inline font-family="monospace">:SchedulerOnline</fo:inline> is not and conversely. The
          number of schedulers online can be changed at runtime through
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_flag(schedulers_online,
          SchedulersOnline)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Schedulers</fo:inline> or <fo:inline font-family="monospace">SchedulersOnline</fo:inline> is specified as a
          negative number, the value is subtracted from the default number of
          logical processors configured or logical processors available,
          respectively.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifying value <fo:inline font-family="monospace">0</fo:inline> for <fo:inline font-family="monospace">Schedulers</fo:inline> or
          <fo:inline font-family="monospace">SchedulersOnline</fo:inline> resets the number of scheduler threads or
          scheduler threads online, respectively, to its default value.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option is ignored if the emulator does not have SMP support
          enabled (see flag <fo:inline font-style="italic"><fo:inline font-family="monospace">-smp</fo:inline></fo:inline>).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+SP
        SchedulersPercentage:SchedulersOnlinePercentage</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Similar to <fo:inline font-style="italic"><fo:inline font-family="monospace">+S</fo:inline></fo:inline> but uses
          percentages to set the number of scheduler threads to create, based
          on logical processors configured, and scheduler threads to set online,
          based on logical processors available, when SMP support has been
          enabled. Specified values must be &gt; 0. For example,
          <fo:inline font-family="monospace">+SP 50:25</fo:inline> sets the number of scheduler threads to 50% of the
          logical processors configured, and the number of scheduler threads
          online to 25% of the logical processors available.
          <fo:inline font-family="monospace">SchedulersPercentage</fo:inline> can be omitted if
          <fo:inline font-family="monospace">:SchedulersOnlinePercentage</fo:inline> is not and conversely. The number
          of schedulers online can be changed at runtime through
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_flag(schedulers_online,
          SchedulersOnline)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option interacts with <fo:inline font-style="italic"><fo:inline font-family="monospace">+S</fo:inline></fo:inline>
          settings. For example, on a system with 8 logical cores configured
          and 8 logical cores available, the combination of the options
          <fo:inline font-family="monospace">+S 4:4 +SP 50:25</fo:inline> (in either order) results in 2 scheduler
          threads (50% of 4) and 1 scheduler thread online (25% of 4).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option is ignored if the emulator does not have SMP support
          enabled (see flag <fo:inline font-style="italic"><fo:inline font-family="monospace">-smp</fo:inline></fo:inline>).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+SDcpu
        DirtyCPUSchedulers:DirtyCPUSchedulersOnline</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the number of dirty CPU scheduler threads to create and dirty
          CPU scheduler threads to set online when threading support has been
          enabled. The maximum for both values is 1024, and each value is
          further limited by the settings for normal schedulers:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The number of dirty CPU scheduler threads created cannot exceed
            the number of normal scheduler threads created.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The number of dirty CPU scheduler threads online cannot exceed
            the number of normal scheduler threads online.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see the <fo:inline font-style="italic"><fo:inline font-family="monospace">+S</fo:inline></fo:inline> and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+SP</fo:inline></fo:inline>. By default, the number
          of dirty CPU scheduler threads created equals the number of normal
          scheduler threads created, and the number of dirty CPU scheduler
          threads online equals the number of normal scheduler threads online.
          <fo:inline font-family="monospace">DirtyCPUSchedulers</fo:inline> can be omitted if
          <fo:inline font-family="monospace">:DirtyCPUSchedulersOnline</fo:inline> is not and conversely. The number of
          dirty CPU schedulers online can be changed at runtime through
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_flag(dirty_cpu_schedulers_online,
          DirtyCPUSchedulersOnline)</fo:inline></fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The amount of dirty CPU schedulers is limited by the amount of
	  normal schedulers in order to limit the effect on processes
	  executing on ordinary schedulers. If the amount of dirty CPU
	  schedulers was allowed to be unlimited, dirty CPU bound jobs would
	  potentially starve normal jobs.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option is ignored if the emulator does not have threading
          support enabled.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+SDPcpu
        DirtyCPUSchedulersPercentage:DirtyCPUSchedulersOnlinePercentage</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Similar to <fo:inline font-style="italic"><fo:inline font-family="monospace">+SDcpu</fo:inline></fo:inline> but
          uses percentages to set the number of dirty CPU scheduler threads to
          create and the number of dirty CPU scheduler threads to set online
          when threading support has been enabled. Specified values must be
          &gt; 0. For example, <fo:inline font-family="monospace">+SDPcpu 50:25</fo:inline> sets the number of dirty
          CPU scheduler threads to 50% of the logical processors configured
          and the number of dirty CPU scheduler threads online to 25% of the
          logical processors available. <fo:inline font-family="monospace">DirtyCPUSchedulersPercentage</fo:inline> can
          be omitted if <fo:inline font-family="monospace">:DirtyCPUSchedulersOnlinePercentage</fo:inline> is not and
          conversely. The number of dirty CPU schedulers online can be changed
          at runtime through
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:system_flag(dirty_cpu_schedulers_online,
          DirtyCPUSchedulersOnline)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option interacts with <fo:inline font-style="italic"><fo:inline font-family="monospace">+SDcpu</fo:inline></fo:inline> settings. For example, on a
          system with 8 logical cores configured and 8 logical cores available,
          the combination of the options <fo:inline font-family="monospace">+SDcpu 4:4 +SDPcpu 50:25</fo:inline> (in
          either order) results in 2 dirty CPU scheduler threads (50% of 4) and
          1 dirty CPU scheduler thread online (25% of 4).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option is ignored if the emulator does not have threading
          support enabled.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+SDio DirtyIOSchedulers</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the number of dirty I/O scheduler threads to create when
          threading support has been enabled. Valid range is 0-1024. By
          default, the number of dirty I/O scheduler threads created is 10,
          same as the default number of threads in the <fo:inline font-style="italic">async thread pool</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The amount of dirty IO schedulers is not limited by the amount of
	  normal schedulers <fo:inline font-style="italic">like the amount of
	  dirty CPU schedulers</fo:inline>. This since only I/O bound work is
	  expected to execute on dirty I/O schedulers. If the user should schedule CPU
	  bound jobs on dirty I/O schedulers, these jobs might starve ordinary
	  jobs executing on ordinary schedulers.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option is ignored if the emulator does not have threading
          support enabled.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+sFlag Value</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Scheduling specific flags.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+sbt BindType</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets scheduler bind type.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Schedulers can also be bound using flag
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+stbt</fo:inline></fo:inline>. The only
              difference between these two flags is how the following errors
              are handled:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Binding of schedulers is not supported on the specific
                platform.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>No available CPU topology. That is, the runtime system was
                not able to detect the CPU topology automatically, and no
                <fo:inline font-style="italic">user-defined CPU topology</fo:inline>
                was set.</fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If any of these errors occur when <fo:inline font-family="monospace">+sbt</fo:inline> has been passed,
              the runtime system prints an error message, and refuses to
              start. If any of these errors occur when <fo:inline font-family="monospace">+stbt</fo:inline> has been
              passed, the runtime system silently ignores the error, and
              start up using unbound schedulers.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Valid <fo:inline font-family="monospace">BindType</fo:inline>s:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">u</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:inline font-family="monospace">unbound</fo:inline> - Schedulers are not bound to logical
                processors, that is, the operating system decides where the
                scheduler threads execute, and when to migrate them. This is
                the default.
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ns</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:inline font-family="monospace">no_spread</fo:inline> - Schedulers with close scheduler
                identifiers are bound as close as possible in hardware.
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ts</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:inline font-family="monospace">thread_spread</fo:inline> - Thread refers to hardware threads
                (such as Intel's hyper-threads). Schedulers with low scheduler
                identifiers, are bound to the first hardware thread of
                each core, then schedulers with higher scheduler identifiers
                are bound to the second hardware thread of each core,and so on.
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ps</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:inline font-family="monospace">processor_spread</fo:inline> - Schedulers are spread like
                <fo:inline font-family="monospace">thread_spread</fo:inline>, but also over physical processor chips.
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">s</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:inline font-family="monospace">spread</fo:inline> - Schedulers are spread as much as possible.
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nnts</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:inline font-family="monospace">no_node_thread_spread</fo:inline> - Like <fo:inline font-family="monospace">thread_spread</fo:inline>,
                but if multiple Non-Uniform Memory Access (NUMA) nodes exist,
                schedulers are spread over one NUMA node at a time,
                that is, all logical processors of one NUMA node are bound
                to schedulers in sequence.
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nnps</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:inline font-family="monospace">no_node_processor_spread</fo:inline> - Like
                <fo:inline font-family="monospace">processor_spread</fo:inline>, but if multiple NUMA nodes exist,
                schedulers are spread over one NUMA node at a time, that is,
                all logical processors of one NUMA node are bound to
                schedulers in sequence.
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">tnnps</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:inline font-family="monospace">thread_no_node_processor_spread</fo:inline> - A combination of
                <fo:inline font-family="monospace">thread_spread</fo:inline>, and <fo:inline font-family="monospace">no_node_processor_spread</fo:inline>.
                Schedulers are spread over hardware threads across NUMA
                nodes, but schedulers are only spread over processors
                internally in one NUMA node at a time.
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">db</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:inline font-family="monospace">default_bind</fo:inline> - Binds schedulers the default way.
                Defaults to <fo:inline font-family="monospace">thread_no_node_processor_spread</fo:inline>
                (which can change in the future).
              </fo:block></fo:block-container>
            </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Binding of schedulers is only supported on newer
              Linux, Solaris, FreeBSD, and Windows systems.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no CPU topology is available when flag <fo:inline font-family="monospace">+sbt</fo:inline>
              is processed and <fo:inline font-family="monospace">BindType</fo:inline> is any other type than
              <fo:inline font-family="monospace">u</fo:inline>, the runtime system fails to start. CPU
              topology can be defined using flag
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+sct</fo:inline></fo:inline>. Notice
              that flag <fo:inline font-family="monospace">+sct</fo:inline> can have to be passed before flag
              <fo:inline font-family="monospace">+sbt</fo:inline> on the command line (if no CPU topology
              has been automatically detected).</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime system does by default <fo:inline font-weight="bold">not</fo:inline> bind schedulers
              to logical processors.</fo:block>
            <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the Erlang runtime system is the only operating system
                process that binds threads to logical processors, this
                improves the performance of the runtime system. However,
                if other operating system processes (for example
                another Erlang runtime system) also bind threads to
                logical processors, there can be a performance penalty
                instead. This performance penalty can sometimes be
                severe. If so, you are advised not to
                bind the schedulers.</fo:block>
            </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">How schedulers are bound matters. For example, in
              situations when there are fewer running processes than
              schedulers online, the runtime system tries to migrate
              processes to schedulers with low scheduler identifiers.
              The more the schedulers are spread over the hardware,
              the more resources are available to the runtime
              system in such situations.</fo:block>
            <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a scheduler fails to bind, this is
                often silently ignored, as it is not always
                possible to verify valid logical processor identifiers. If
                an error is reported, it is reported to the
                <fo:inline font-family="monospace">error_logger</fo:inline>. If you want to verify that the
                schedulers have bound as requested, call
                <fo:inline font-style="italic">
                <fo:inline font-family="monospace">erlang:system_info(scheduler_bindings)</fo:inline></fo:inline>.</fo:block>
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            <fo:inline font-family="monospace">+sbwt none|very_short|short|medium|long|very_long</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets scheduler busy wait threshold. Defaults to <fo:inline font-family="monospace">medium</fo:inline>.
              The threshold determines how long schedulers are to busy
              wait when running out of work before going to sleep.</fo:block>
            <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This flag can be removed or changed at any time
                without prior notice.</fo:block>
            </fo:block>
          </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+scl true|false</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables or disables scheduler compaction of load. By default
              scheduler compaction of load is enabled. When enabled, load
              balancing strives for a load distribution, which causes
              as many scheduler threads as possible to be fully loaded (that is,
              not run out of work). This is accomplished by migrating load
              (for example, runnable processes) into a smaller set of schedulers
              when schedulers frequently run out of work. When disabled,
              the frequency with which schedulers run out of work is
              not taken into account by the load balancing logic.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">+scl false</fo:inline> is similar to
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+sub true</fo:inline></fo:inline>, but
              <fo:inline font-family="monospace">+sub true</fo:inline> also balances scheduler utilization
              between schedulers.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+sct CpuTopology</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;Id&gt; = integer(); when 0 =&lt; &lt;Id&gt; =&lt; 65535</fo:inline>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;IdRange&gt; = &lt;Id&gt;-&lt;Id&gt;</fo:inline></fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;IdOrIdRange&gt; = &lt;Id&gt; | &lt;IdRange&gt;</fo:inline></fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;IdList&gt; = &lt;IdOrIdRange&gt;,&lt;IdOrIdRange&gt; |
                &lt;IdOrIdRange&gt;</fo:inline></fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;LogicalIds&gt; = L&lt;IdList&gt;</fo:inline></fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;ThreadIds&gt; = T&lt;IdList&gt; | t&lt;IdList&gt;</fo:inline>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;CoreIds&gt; = C&lt;IdList&gt; | c&lt;IdList&gt;</fo:inline></fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;ProcessorIds&gt; = P&lt;IdList&gt; | p&lt;IdList&gt;</fo:inline>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;NodeIds&gt; = N&lt;IdList&gt; | n&lt;IdList&gt;</fo:inline></fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;IdDefs&gt; =
                &lt;LogicalIds&gt;&lt;ThreadIds&gt;&lt;CoreIds&gt;&lt;ProcessorIds&gt;&lt;NodeIds&gt; |
                &lt;LogicalIds&gt;&lt;ThreadIds&gt;&lt;CoreIds&gt;&lt;NodeIds&gt;&lt;ProcessorIds&gt;</fo:inline>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">CpuTopology = &lt;IdDefs&gt;:&lt;IdDefs&gt; |
                &lt;IdDefs&gt;</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a user-defined CPU topology. The user-defined
              CPU topology overrides any automatically detected
              CPU topology. The CPU topology is used when
              <fo:inline font-style="italic">binding schedulers to logical
              processors</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Uppercase letters signify real identifiers and lowercase
	      letters signify fake identifiers only used for description
              of the topology. Identifiers passed as real identifiers can
              be used by the runtime system when trying to access specific
              hardware; if they are incorrect the behavior is
              undefined. Faked logical CPU identifiers are not accepted,
              as there is no point in defining the CPU topology without
              real logical CPU identifiers. Thread, core, processor, and
              node identifiers can be omitted. If omitted, the thread ID
              defaults to <fo:inline font-family="monospace">t0</fo:inline>, the core ID defaults to <fo:inline font-family="monospace">c0</fo:inline>,
              the processor ID defaults to <fo:inline font-family="monospace">p0</fo:inline>, and the node ID is
              left undefined. Either each logical processor must 
              belong to only one NUMA node, or no logical
              processors must belong to any NUMA nodes.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Both increasing and decreasing <fo:inline font-family="monospace">&lt;IdRange&gt;</fo:inline>s
              are allowed.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">NUMA node identifiers are system wide. That is, each NUMA
              node on the system must have a unique identifier. Processor
              identifiers are also system wide. Core identifiers are
              processor wide. Thread identifiers are core wide.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The order of the identifier types implies the hierarchy of the
              CPU topology. The valid orders are as follows:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">&lt;LogicalIds&gt;&lt;ThreadIds&gt;&lt;CoreIds&gt;&lt;ProcessorIds&gt;&lt;NodeIds&gt;</fo:inline>,
                  that is, thread is part of a core that is part of a processor,
                  which is part of a NUMA node.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">&lt;LogicalIds&gt;&lt;ThreadIds&gt;&lt;CoreIds&gt;&lt;NodeIds&gt;&lt;ProcessorIds&gt;</fo:inline>,
                  that is, thread is part of a core that is part of a NUMA node,
                  which is part of a processor.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A CPU topology can consist of both processor external, and
              processor internal NUMA nodes as long as each logical processor
              belongs to only one NUMA node. If
              <fo:inline font-family="monospace">&lt;ProcessorIds&gt;</fo:inline> is omitted, its default position
              is before <fo:inline font-family="monospace">&lt;NodeIds&gt;</fo:inline>. That is, the default is
              processor external NUMA nodes.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a list of identifiers is used in an
              <fo:inline font-family="monospace">&lt;IdDefs&gt;</fo:inline>:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;LogicalIds&gt;</fo:inline> must be a list
                of identifiers.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>At least one other identifier type besides
                <fo:inline font-family="monospace">&lt;LogicalIds&gt;</fo:inline> must also have a
                list of identifiers.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>All lists of identifiers must produce the
                same number of identifiers.</fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A simple example. A single quad core processor can be
              described as follows:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl +sct L0-3c0-3</fo:inline>
1&gt; <fo:inline font-weight="bold">erlang:system_info(cpu_topology).</fo:inline>
[{processor,[{core,{logical,0}},
             {core,{logical,1}},
             {core,{logical,2}},
             {core,{logical,3}}]}]</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A more complicated example with two quad core
              processors, each processor in its own NUMA node.
              The ordering of logical processors is a bit weird.
              This to give a better example of identifier lists:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl +sct L0-1,3-2c0-3p0N0:L7,4,6-5c0-3p1N1</fo:inline>
1&gt; <fo:inline font-weight="bold">erlang:system_info(cpu_topology).</fo:inline>
[{node,[{processor,[{core,{logical,0}},
                    {core,{logical,1}},
                    {core,{logical,3}},
                    {core,{logical,2}}]}]},
 {node,[{processor,[{core,{logical,7}},
                    {core,{logical,4}},
                    {core,{logical,6}},
                    {core,{logical,5}}]}]}]</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As long as real identifiers are correct, it is OK
              to pass a CPU topology that is not a correct
              description of the CPU topology. When used with
              care this can be very useful. This
              to trick the emulator to bind its schedulers
              as you want. For example, if you want to run multiple
              Erlang runtime systems on the same machine, you
              want to reduce the number of schedulers used and
              manipulate the CPU topology so that they bind to
              different logical CPUs. An example, with two Erlang
              runtime systems on a quad core machine:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl +sct L0-3c0-3 +sbt db +S3:2 -detached -noinput -noshell -sname one</fo:inline>
% <fo:inline font-weight="bold">erl +sct L3-0c0-3 +sbt db +S3:2 -detached -noinput -noshell -sname two</fo:inline></fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example, each runtime system have two
              schedulers each online, and all schedulers online
              will run on different cores. If we change to one
              scheduler online on one runtime system, and three
              schedulers online on the other, all schedulers
              online will still run on different cores.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that a faked CPU topology that does not reflect
              how the real CPU topology looks like is likely to
              decrease the performance of the runtime system.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(cpu_topology)</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+secio true|false</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables or disables eager check I/O scheduling. Defaults
              to <fo:inline font-family="monospace">true</fo:inline>. The default was changed from <fo:inline font-family="monospace">false</fo:inline>
              as from ERTS 7.0. The behavior before this
              flag was introduced corresponds to <fo:inline font-family="monospace">+secio false</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The flag effects when schedulers will check for I/O
              operations possible to execute, and when such I/O operations
              will execute. As the parameter name implies,
              schedulers are more eager to check for I/O when
              <fo:inline font-family="monospace">true</fo:inline> is passed. This, however, also implies that
              execution of outstanding I/O operation is not
              prioritized to the same extent as when <fo:inline font-family="monospace">false</fo:inline> is
              passed.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(eager_check_io)</fo:inline></fo:inline>
              returns the value of this parameter used when starting
              the virtual machine.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+sfwi Interval</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets scheduler-forced wakeup interval. All run queues are
              scanned each <fo:inline font-family="monospace">Interval</fo:inline> milliseconds. While there are
              sleeping schedulers in the system, one scheduler is woken
              for each non-empty run queue found. <fo:inline font-family="monospace">Interval</fo:inline> default
              to <fo:inline font-family="monospace">0</fo:inline>, meaning this feature is disabled.</fo:block>
            <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This feature has been introduced as a temporary workaround
                for long-executing native code, and native code that does not
                bump reductions properly in OTP. When these bugs have be fixed,
                this flag will be removed.</fo:block>
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+spp Bool</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets default scheduler hint for port parallelism. If set to
              <fo:inline font-family="monospace">true</fo:inline>, the virtual machine schedules port tasks when it
              improves parallelism in the system. If set to <fo:inline font-family="monospace">false</fo:inline>, the
              virtual machine tries to perform port tasks immediately,
              improving latency at the expense of parallelism. Default to
              <fo:inline font-family="monospace">false</fo:inline>. The default used can be inspected in runtime by
              calling <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(port_parallelism)</fo:inline></fo:inline>.
              The default can be overridden on port creation by passing option
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">parallelism</fo:inline></fo:inline> to
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:open_port/2</fo:inline></fo:inline></fo:block>.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            <fo:inline font-family="monospace">+sss size</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Suggested stack size, in kilowords, for scheduler threads.
              Valid range is 20-8192 kilowords. The default suggested
	      stack size is 128 kilowords.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            <fo:inline font-family="monospace">+sssdcpu size</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Suggested stack size, in kilowords, for dirty CPU scheduler
	      threads. Valid range is 20-8192 kilowords. The default
	      suggested stack size is 40 kilowords.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            <fo:inline font-family="monospace">+sssdio size</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Suggested stack size, in kilowords, for dirty IO scheduler
	      threads. Valid range is 20-8192 kilowords. The default
	      suggested stack size is 40 kilowords.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+stbt BindType</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to set the scheduler bind type. The same as flag
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt</fo:inline></fo:inline> except
              how some errors are handled. For more information, see
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+sbt</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+sub true|false</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables or disables
              <fo:inline font-style="italic">
              scheduler utilization</fo:inline> balancing of load. By default
              scheduler utilization balancing is disabled and instead scheduler
              compaction of load is enabled, which strives for a load
              distribution that causes as many scheduler threads as possible
              to be fully loaded (that is, not run out of work). When scheduler
              utilization balancing is enabled, the system instead tries to
              balance scheduler utilization between schedulers. That is,
              strive for equal scheduler utilization on all schedulers.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">+sub true</fo:inline> is only supported on systems where the runtime
              system detects and uses a monotonically increasing high-resolution
              clock. On other systems, the runtime system fails to start.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">+sub true</fo:inline> implies <fo:inline font-style="italic">
              <fo:inline font-family="monospace">+scl false</fo:inline></fo:inline>. The difference between
              <fo:inline font-family="monospace">+sub true</fo:inline> and <fo:inline font-family="monospace">+scl false</fo:inline> is that <fo:inline font-family="monospace">+scl false</fo:inline>
              does not try to balance the scheduler utilization.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            <fo:inline font-family="monospace">+swct very_eager|eager|medium|lazy|very_lazy</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets scheduler wake cleanup threshold. Defaults to <fo:inline font-family="monospace">medium</fo:inline>.
              Controls how eager schedulers are to be requesting
              wakeup because of certain cleanup operations. When a lazy setting
              is used, more outstanding cleanup operations can be left undone
              while a scheduler is idling. When an eager setting is used,
              schedulers are more frequently woken, potentially increasing
              CPU-utilization.</fo:block>
            <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This flag can be removed or changed at any time without prior
                notice.</fo:block>
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+sws default|legacy</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets scheduler wakeup strategy. Default strategy changed in
              ERTS 5.10 (Erlang/OTP R16A). This strategy was known as
              <fo:inline font-family="monospace">proposal</fo:inline> in Erlang/OTP R15. The <fo:inline font-family="monospace">legacy</fo:inline> strategy
              was used as default from R13 up to and including R15.</fo:block>
            <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This flag can be removed or changed at any time without prior
                notice.</fo:block>
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            <fo:inline font-family="monospace">+swt very_low|low|medium|high|very_high</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets scheduler wakeup threshold. Defaults to <fo:inline font-family="monospace">medium</fo:inline>.
              The threshold determines when to wake up sleeping schedulers
              when more work than can be handled by currently awake schedulers
              exists. A low threshold causes earlier wakeups, and a high
              threshold causes later wakeups. Early wakeups distribute work
              over multiple schedulers faster, but work does more easily bounce
              between schedulers.</fo:block>
            <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This flag can be removed or changed at any time without prior
                notice.</fo:block>
            </fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+t size</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the maximum number of atoms the virtual machine can handle.
          Defaults to 1,048,576.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+T Level</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables modified timing and sets the modified timing level. Valid
          range is 0-9. The timing of the runtime system is changed. A high
          level usually means a greater change than a low level. Changing the
          timing can be very useful for finding timing-related bugs.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Modified timing affects the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always">Process spawning</fo:block>
          <fo:block-container><fo:block start-indent="2em">A process calling <fo:inline font-family="monospace">spawn</fo:inline>,
            <fo:inline font-family="monospace">spawn_link</fo:inline>, <fo:inline font-family="monospace">spawn_monitor</fo:inline>,
            or <fo:inline font-family="monospace">spawn_opt</fo:inline> is scheduled out immediately
            after completing the call. When higher modified timing levels are
            used, the caller also sleeps for a while after it is scheduled out.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">Context reductions</fo:block>
          <fo:block-container><fo:block start-indent="2em">The number of reductions a process is allowed to use before it
            is scheduled out is increased or reduced.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">Input reductions</fo:block>
          <fo:block-container><fo:block start-indent="2em">The number of reductions performed before checking I/O is
            increased or reduced.
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performance suffers when modified timing is enabled. This flag is
            <fo:inline font-weight="bold">only</fo:inline> intended for testing and debugging.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">return_to</fo:inline> and <fo:inline font-family="monospace">return_from</fo:inline>
            trace messages are lost when tracing on the spawn BIFs.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This flag can be removed or changed at any time without prior
            notice.</fo:block>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+v</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Verbose.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+V</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the emulator print its version number.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+W w | i | e</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the mapping of warning messages for
          <fo:inline font-family="monospace">error_logger</fo:inline>. Messages sent to the error logger
          using one of the warning routines can be mapped to errors
          (<fo:inline font-family="monospace">+W e</fo:inline>), warnings (<fo:inline font-family="monospace">+W w</fo:inline>), or
          information reports (<fo:inline font-family="monospace">+W i</fo:inline>). Defaults to warnings.
          The current mapping can be retrieved using
          <fo:inline font-family="monospace">error_logger:warning_map/0</fo:inline>. For more information,
          see <fo:inline font-style="italic">
          <fo:inline font-family="monospace">error_logger:warning_map/0</fo:inline></fo:inline> in Kernel.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+zFlag Value</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Miscellaneous flags:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+zdbbl size</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the distribution buffer busy limit
              (<fo:inline font-style="italic">
              <fo:inline font-family="monospace">dist_buf_busy_limit</fo:inline></fo:inline>)
              in kilobytes. Valid range is 1-2097151. Defaults to 1024.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A larger buffer limit allows processes to buffer
              more outgoing messages over the distribution. When the
              buffer limit has been reached, sending processes will be
              suspended until the buffer size has shrunk. The buffer
              limit is per distribution channel. A higher limit
              gives lower latency and higher throughput at the expense
              of higher memory use.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+zdntgc time</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the delayed node table garbage collection time
              (<fo:inline font-style="italic">
              <fo:inline font-family="monospace">delayed_node_table_gc</fo:inline></fo:inline>)
              in seconds. Valid values are either <fo:inline font-family="monospace">infinity</fo:inline> or
              an integer in the range 0-100000000. Defaults to 60.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Node table entries that are not referred linger
              in the table for at least the amount of time that this
              parameter determines. The lingering prevents repeated
              deletions and insertions in the tables from occurring.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp17872448" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Environment Variables</fo:block>
    
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_CRASH_DUMP</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the emulator needs to write a crash dump, the value of this
          variable is the filename of the crash dump file.
          If the variable is not set, the name of the crash dump file is
          <fo:inline font-family="monospace">erl_crash.dump</fo:inline> in the current directory.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_CRASH_DUMP_NICE</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Unix systems</fo:inline>: If the emulator needs to write a crash dump,
        it uses the value of this variable to set the nice value
        for the process, thus lowering its priority. Valid range is
        1-39 (higher values are replaced with 39). The highest
        value, 39, gives the process the lowest priority.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_CRASH_DUMP_SECONDS</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Unix systems</fo:inline>: This variable gives the number of seconds
          that the emulator is allowed to spend writing a crash dump. When the
          given number of seconds have elapsed, the emulator is terminated.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_CRASH_DUMP_SECONDS=0</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">If the variable is set to <fo:inline font-family="monospace">0</fo:inline> seconds, the runtime system does
            not even attempt to write the crash dump file. It only terminates.
	    This is the default if option <fo:inline font-family="monospace">-heart</fo:inline> is passed to <fo:inline font-family="monospace">erl</fo:inline>
	    and <fo:inline font-family="monospace">ERL_CRASH_DUMP_SECONDS</fo:inline> is not set.
	  </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_CRASH_DUMP_SECONDS=S</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If the variable is set to a positive value <fo:inline font-family="monospace">S</fo:inline>,
	    wait for <fo:inline font-family="monospace">S</fo:inline> seconds to complete the crash dump file and
            then terminates the runtime system with a <fo:inline font-family="monospace">SIGALRM</fo:inline> signal.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_CRASH_DUMP_SECONDS=-1</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">A negative value causes the termination of the runtime system
	    to wait indefinitely until the crash dump file has been completly
	    written. This is the default if option <fo:inline font-family="monospace">-heart</fo:inline> is <fo:inline font-weight="bold">not</fo:inline>
	    passed to <fo:inline font-family="monospace">erl</fo:inline> and <fo:inline font-family="monospace">ERL_CRASH_DUMP_SECONDS</fo:inline> is not set.
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic"><fo:inline font-family="monospace">heart(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_CRASH_DUMP_BYTES</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This variable sets the maximum size of a crash dump file in bytes.
        The crash dump will be truncated if this limit is exceeded. If the
	variable is not set, no size limit is enforced by default. If the
	variable is set to <fo:inline font-family="monospace">0</fo:inline>, the runtime system does not even attempt
	to write a crash dump file.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Introduced in ERTS 8.1.2 (Erlang/OTP 19.2).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_AFLAGS</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The content of this variable is added to the beginning of the
          command line for <fo:inline font-family="monospace">erl</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Flag <fo:inline font-family="monospace">-extra</fo:inline> is treated in a special way. Its
          scope ends at the end of the environment variable content. Arguments
          following an <fo:inline font-family="monospace">-extra</fo:inline> flag are moved on the command
          line into section <fo:inline font-family="monospace">-extra</fo:inline>, that is, the end of the
          command line following an <fo:inline font-family="monospace">-extra</fo:inline> flag.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_ZFLAGS</fo:inline> and
        <fo:inline font-family="monospace">ERL_FLAGS</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The content of these variables are added to the end of the command
          line for <fo:inline font-family="monospace">erl</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Flag <fo:inline font-family="monospace">-extra</fo:inline> is treated in a special way. Its
          scope ends at the end of the environment variable content. Arguments
          following an <fo:inline font-family="monospace">-extra</fo:inline> flag are moved on the command
          line into section <fo:inline font-family="monospace">-extra</fo:inline>, that is, the end of the
          command line following an <fo:inline font-family="monospace">-extra</fo:inline> flag.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_LIBS</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Contains a list of additional library directories that the code
          server searches for applications and adds to the code path; see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_EPMD_ADDRESS</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be set to a comma-separated list of IP addresses, in which case
          the <fo:inline font-style="italic"><fo:inline font-family="monospace">epmd</fo:inline></fo:inline> daemon listens only
          on the specified address(es) and on the loopback address (which is
          implicitly added to the list if it has not been specified).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_EPMD_PORT</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can contain the port number to use when communicating with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">epmd</fo:inline></fo:inline>. The default port works
          fine in most cases. A different port can be specified
          to allow nodes of independent clusters to co-exist on the same host.
          All nodes in a cluster must use the same <fo:inline font-family="monospace">epmd</fo:inline> port number.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp17911888" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Signals</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On Unix systems, the Erlang runtime will interpret two types of signals.</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">SIGUSR1</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">SIGUSR1</fo:inline> signal forces a crash dump.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">SIGTERM</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">SIGTERM</fo:inline> will produce a <fo:inline font-family="monospace">stop</fo:inline> message to the <fo:inline font-family="monospace">init</fo:inline> process.
                  This is equivalent to a <fo:inline font-family="monospace">init:stop/0</fo:inline> call.</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Introduced in ERTS 8.3 (Erlang/OTP 19.3)</fo:block>
          </fo:block></fo:block-container>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The signal <fo:inline font-family="monospace">SIGUSR2</fo:inline> is reserved for internal usage. No other signals are handled.</fo:block>
  

  <fo:block id="idp17920960" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Configuration</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The standard Erlang/OTP system can be reconfigured to change the default
      behavior on startup.</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">The <fo:inline font-family="monospace">.erlang</fo:inline> startup file</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When Erlang/OTP is started, the system searches for a file named
          <fo:inline font-family="monospace">.erlang</fo:inline> in the directory where Erlang/OTP is started. If not
          found, the user's home directory is searched for an <fo:inline font-family="monospace">.erlang</fo:inline>
          file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an <fo:inline font-family="monospace">.erlang</fo:inline> file is found, it is assumed to contain valid
          Erlang expressions. These expressions are evaluated as if they were
          input to the shell.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A typical <fo:inline font-family="monospace">.erlang</fo:inline> file contains a set of search paths, for
          example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
io:format("executing user profile in HOME/.erlang\n",[]).
code:add_path("/home/calvin/test/ebin").
code:add_path("/home/hobbes/bigappl-1.2/ebin").
io:format(".erlang rc finished\n",[]).    </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">user_default and shell_default</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Functions in the shell that are not prefixed by a module name are
          assumed to be functional objects (funs), built-in functions (BIFs),
          or belong to the module <fo:inline font-family="monospace">user_default</fo:inline> or
          <fo:inline font-family="monospace">shell_default</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To include private shell commands, define them in a module
          <fo:inline font-family="monospace">user_default</fo:inline> and add the following argument as the first line
          in the <fo:inline font-family="monospace">.erlang</fo:inline> file:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
code:load_abs("..../user_default").    </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">erl</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the contents of <fo:inline font-family="monospace">.erlang</fo:inline> are changed and a private version
          of <fo:inline font-family="monospace">user_default</fo:inline> is defined, the Erlang/OTP environment can be
          customized. More powerful changes can be made by supplying
          command-line arguments in the startup script <fo:inline font-family="monospace">erl</fo:inline>. For more
          information, see <fo:inline font-style="italic"><fo:inline font-family="monospace">init(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp17936912" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">epmd(1)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_prim_loader(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erts_alloc(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">init(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic">
        <fo:inline font-family="monospace">application(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">auth(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic">
        <fo:inline font-family="monospace">erl_boot_server(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">heart(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">net_kernel(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">make(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp17955536" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erlc</fo:marker>erlc</fo:block>Command</fo:block>
  <fo:block/>
  erlc
  Compiler
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">erlc</fo:inline> program provides a common way to run
      all compilers in the Erlang system.
      Depending on the extension of each input file, <fo:inline font-family="monospace">erlc</fo:inline>
      invokes the appropriate compiler.
      Regardless of which compiler is used, the same flags are used to provide
      parameters, such as include paths and output directory.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current working directory, <fo:inline font-family="monospace">"."</fo:inline>, is not included
      in the code path when running the compiler. This to avoid loading
      Beam files from the current working directory that could potentially
      be in conflict with the compiler or the Erlang/OTP system used by the
      compiler.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp17960224">erlc flags file1.ext file2.ext...</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compiles one or more files. The files must include the extension,
          for example, <fo:inline font-family="monospace">.erl</fo:inline> for Erlang source code, or
          <fo:inline font-family="monospace">.yrl</fo:inline> for Yecc source code.
          <fo:inline font-family="monospace">Erlc</fo:inline> uses the extension to invoke the correct
          compiler.</fo:block>
      </fo:block>
  

  <fo:block id="idp17964144" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Generally Useful Flags</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following flags are supported:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-I &lt;Directory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Instructs the compiler to search for include files in
          the <fo:inline font-family="monospace">Directory</fo:inline>. When encountering an
          <fo:inline font-family="monospace">-include</fo:inline> or <fo:inline font-family="monospace">-include_lib</fo:inline>
          directive, the compiler searches for header files in the following
          directories:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"."</fo:inline>, the current working directory of the
              file server</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The base name of the compiled file</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The directories specified using option <fo:inline font-family="monospace">-I</fo:inline>;
              the directory specified last is searched first</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-o &lt;Directory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The directory where the compiler is to place the output files.
          Defaults to the current working directory.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-D&lt;Name&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines a macro.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-D&lt;Name&gt;=&lt;Value&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines a macro with the specified value.
          The value can be any Erlang term.
          Depending on the platform, the value may need to be
          quoted if the shell itself interprets certain characters.
          On Unix, terms containing tuples and lists
          must be quoted. Terms containing spaces
          must be quoted on all platforms.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-W&lt;Error&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes all warnings into errors.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-W&lt;Number&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets warning level to <fo:inline font-family="monospace">Number</fo:inline>. Defaults to
          <fo:inline font-family="monospace">1</fo:inline>. To turn off warnings,
          use <fo:inline font-family="monospace">-W0</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-W</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">-W1</fo:inline>. Default.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-v</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables verbose output.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-b &lt;Output_type&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the type of output file.
          <fo:inline font-family="monospace">Output_type</fo:inline> is the same as the file extension
          of the output file, but without the period.
          This option is ignored by compilers that have
          a single output format.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-smp</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compiles using the SMP emulator. This is mainly useful
          for compiling native code, which must be compiled with the same
          runtime system that it is to be run on.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-M</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Produces a Makefile rule to track header dependencies. The
          rule is sent to <fo:inline font-family="monospace">stdout</fo:inline>. No object file is produced.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-MF &lt;Makefile&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As option <fo:inline font-family="monospace">-M</fo:inline>, except that the
          Makefile is written to <fo:inline font-family="monospace">Makefile</fo:inline>. No object
          file is produced.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-MD</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">-M -MF &lt;File&gt;.Pbeam</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-MT &lt;Target&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In conjunction with option <fo:inline font-family="monospace">-M</fo:inline> or
          <fo:inline font-family="monospace">-MF</fo:inline>, changes the name of the rule emitted
          to <fo:inline font-family="monospace">Target</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-MQ &lt;Target&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As option <fo:inline font-family="monospace">-MT</fo:inline>, except that characters special to
          <fo:inline font-family="monospace">make/1</fo:inline> are quoted.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-MP</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In conjunction with option <fo:inline font-family="monospace">-M</fo:inline> or
          <fo:inline font-family="monospace">-MF</fo:inline>, adds a phony target for each dependency.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-MG</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In conjunction with option <fo:inline font-family="monospace">-M</fo:inline> or
          <fo:inline font-family="monospace">-MF</fo:inline>, considers missing headers as generated
          files and adds them to the dependencies.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">--</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Signals that no more options will follow.
          The rest of the arguments is treated as filenames,
          even if they start with hyphens.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+&lt;Term&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A flag starting with a plus (<fo:inline font-family="monospace">+</fo:inline>) rather than a hyphen
          is converted to an Erlang term and passed unchanged to
          the compiler.
          For example, option <fo:inline font-family="monospace">export_all</fo:inline> for the Erlang
          compiler can be specified as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erlc +export_all file.erl</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Depending on the platform, the value may need to be
          quoted if the shell itself interprets certain characters.
          On Unix, terms containing tuples and lists
          must be quoted. Terms containing spaces
          must be quoted on all platforms.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp18011328" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Special Flags</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following flags are useful in special situations,
      such as rebuilding the OTP system:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-pa &lt;Directory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Appends <fo:inline font-family="monospace">Directory</fo:inline> to the front of the code path in
          the invoked Erlang emulator.
          This can be used to invoke another
          compiler than the default one.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-pz &lt;Directory&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Appends <fo:inline font-family="monospace">Directory</fo:inline> to the code path in
          the invoked Erlang emulator.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp18017232" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Supported Compilers</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following compilers are supported:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">.erl</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang source code. It generates a <fo:inline font-family="monospace">.beam</fo:inline> file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options <fo:inline font-family="monospace">-P</fo:inline>, <fo:inline font-family="monospace">-E</fo:inline>, and <fo:inline font-family="monospace">-S</fo:inline> are equivalent to
          <fo:inline font-family="monospace">+'P'</fo:inline>, <fo:inline font-family="monospace">+'E'</fo:inline>, and <fo:inline font-family="monospace">+'S'</fo:inline>, except that it is not
          necessary to include the single quotes to protect them from the
          shell.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Supported options: <fo:inline font-family="monospace">-I</fo:inline>, <fo:inline font-family="monospace">-o</fo:inline>, <fo:inline font-family="monospace">-D</fo:inline>, <fo:inline font-family="monospace">-v</fo:inline>,
          <fo:inline font-family="monospace">-W</fo:inline>, <fo:inline font-family="monospace">-b</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">.S</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang assembler source code. It generates a <fo:inline font-family="monospace">.beam</fo:inline>
          file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Supported options: same as for <fo:inline font-family="monospace">.erl</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">.core</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang core source code. It generates a <fo:inline font-family="monospace">.beam</fo:inline>
          file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Supported options: same as for <fo:inline font-family="monospace">.erl</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">.yrl</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Yecc source code. It generates an <fo:inline font-family="monospace">.erl</fo:inline> file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use option <fo:inline font-family="monospace">-I</fo:inline> with the name of a file to use that file
          as a customized prologue file (option
          <fo:inline font-family="monospace">includefile</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Supported options: <fo:inline font-family="monospace">-o</fo:inline>, <fo:inline font-family="monospace">-v</fo:inline>, <fo:inline font-family="monospace">-I</fo:inline>, <fo:inline font-family="monospace">-W</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">.mib</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">MIB for SNMP. It generates a <fo:inline font-family="monospace">.bin</fo:inline> file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Supported options: <fo:inline font-family="monospace">-I</fo:inline>, <fo:inline font-family="monospace">-o</fo:inline>, <fo:inline font-family="monospace">-W</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">.bin</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A compiled MIB for SNMP. It generates a <fo:inline font-family="monospace">.hrl</fo:inline>
          file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Supported options: <fo:inline font-family="monospace">-o</fo:inline>, <fo:inline font-family="monospace">-v</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">.rel</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Script file. It generates a boot file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use option <fo:inline font-family="monospace">-I</fo:inline> to name directories to be searched for
          application files (equivalent to the <fo:inline font-family="monospace">path</fo:inline> in the
          option list for <fo:inline font-family="monospace">systools:make_script/2</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Supported option: <fo:inline font-family="monospace">-o</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">.asn1</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ASN1 file. It creates an <fo:inline font-family="monospace">.erl</fo:inline>,
          <fo:inline font-family="monospace">.hrl</fo:inline>, and <fo:inline font-family="monospace">.asn1db</fo:inline> file from
          an <fo:inline font-family="monospace">.asn1</fo:inline> file. Also compiles the
          <fo:inline font-family="monospace">.erl</fo:inline> using the Erlang compiler unless option
          <fo:inline font-family="monospace">+noobj</fo:inline> is specified.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Supported options: <fo:inline font-family="monospace">-I</fo:inline>, <fo:inline font-family="monospace">-o</fo:inline>, <fo:inline font-family="monospace">-b</fo:inline>, <fo:inline font-family="monospace">-W</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">.idl</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">IC file. It runs the IDL compiler.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Supported options: <fo:inline font-family="monospace">-I</fo:inline>, <fo:inline font-family="monospace">-o</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp18059280" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Environment Variables</fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERLC_EMULATOR</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The command for starting the emulator. Defaults to <fo:inline font-family="monospace">erl</fo:inline>
        in the same directory as the <fo:inline font-family="monospace">erlc</fo:inline> program itself,
        or, if it does not exist, <fo:inline font-family="monospace">erl</fo:inline> in any of the directories
        specified in environment variable <fo:inline font-family="monospace">PATH</fo:inline>.</fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp18063568" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">compile(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">yecc(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">snmp(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp18075936" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">werl</fo:marker>werl</fo:block>Command</fo:block>
  <fo:block/>
  werl
  The Erlang Emulator
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On Windows, the preferred way to start the Erlang system for interactive
      use is as follows:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">werl &lt;arguments&gt;</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This starts Erlang in its own window, with fully
      functioning command-line editing and scrollbars. All flags
      except <fo:inline font-family="monospace">-oldshell</fo:inline> work as they do for
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>.</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To copy text to the clipboard, use <fo:inline font-family="monospace">Ctrl-C</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To paste text, use <fo:inline font-family="monospace">Ctrl-V</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To interrupt the runtime system or the shell process (depending
          on what has been specified with system flag <fo:inline font-family="monospace">+B</fo:inline>), use
          <fo:inline font-family="monospace">Ctrl-Break</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In cases where you want to redirect standard input and/or
      standard output or use Erlang in a pipeline, <fo:inline font-family="monospace">werl</fo:inline> is
      not suitable, and the <fo:inline font-family="monospace">erl</fo:inline> program is to be used instead.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">werl</fo:inline> window is in many ways modeled after the <fo:inline font-family="monospace">xterm</fo:inline>
      window present on other platforms, as the <fo:inline font-family="monospace">xterm</fo:inline> model
      fits well with line-oriented command-based interaction. This
      means that selecting text is line-oriented rather than
      rectangle-oriented.</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To select text in the <fo:inline font-family="monospace">werl</fo:inline> window, press and hold
          the left mouse button and drag the mouse over the text you want
          to select. If the selection crosses line boundaries, the
          selected text consists of complete lines where applicable
          (just like in a word processor).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To select more text than fits
          in the window, start by selecting a small part in the
          beginning of the text you want, then use the scrollbar
          to view the end of the desired selection, point to it, and press
          the <fo:inline font-weight="bold">right</fo:inline> mouse button. The whole area between your
          first selection and the point where you right-clicked is
          included in the selection.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To copy the selected text to the clipboard, either
          use <fo:inline font-family="monospace">Ctrl-C</fo:inline>, use the menu, or press the copy
          button in the toolbar.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Pasted text is inserted at the current prompt position
      and is interpreted by Erlang as usual keyboard input.</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To retrieve previous command lines, press the <fo:inline font-family="monospace">Up arrow</fo:inline> or
          use <fo:inline font-family="monospace">Ctrl-P</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
      
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A drop-down box in the toolbar contains the command
      history. Selecting a command in the drop-down box inserts the command
      at the prompt, as if you used the keyboard to retrieve the
      command.</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To stop the Erlang emulator, close the <fo:inline font-family="monospace">werl</fo:inline> window.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  
<fo:block page-break-before="always" id="idp18106736" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">escript</fo:marker>escript</fo:block>Command</fo:block>
  <fo:block/>
  escript
  Erlang scripting support
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">escript</fo:inline> provides support for running short Erlang programs
      without having to compile them first, and an easy way to retrieve the
      command-line arguments.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to bundle <fo:inline font-family="monospace">escript</fo:inline>(s) with an Erlang
      runtime system to make it self-sufficient and relocatable. In such
      a standalone system, the <fo:inline font-family="monospace">escript</fo:inline>(s) should be located in
      the top <fo:inline font-family="monospace">bin</fo:inline> directory of the standalone system and given
      <fo:inline font-family="monospace">.escript</fo:inline> as file extension. Further the (built-in)
      <fo:inline font-family="monospace">escript</fo:inline> program should be copied to the same directory and
      given the scripts original name (without the <fo:inline font-family="monospace">.escript</fo:inline>
      extension). This will enable use of the bundled Erlang runtime
      system.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The (built-in) <fo:inline font-family="monospace">escript</fo:inline> program first determines which
      Erlang runtime system to use and then starts it to execute your
      script. Usually the runtime system is located in the same Erlang
      installation as the <fo:inline font-family="monospace">escript</fo:inline> program itself. But for
      standalone systems with one or more escripts it may be the case
      that the <fo:inline font-family="monospace">escript</fo:inline> program in your path actually starts the
      runtime system bundled with the escript. This is intentional, and
      typically happens when the standalone system <fo:inline font-family="monospace">bin</fo:inline> directory is not
      in the execution path (as it may cause its <fo:inline font-family="monospace">erl</fo:inline> program to
      override the desired one) and the <fo:inline font-family="monospace">escript</fo:inline>(s) are referred to via
      symbolic links from a <fo:inline font-family="monospace">bin</fo:inline> directory in the path.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18117152">script-name script-arg1 script-arg2...</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18117616">escript escript-flags script-name script-arg1 script-arg2...</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">escript</fo:inline> runs a script written in Erlang.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ <fo:inline font-weight="bold">chmod u+x factorial</fo:inline>
$ <fo:inline font-weight="bold">cat factorial</fo:inline>
#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -sname factorial -mnesia debug verbose
main([String]) -&gt;
    try
        N = list_to_integer(String),
        F = fac(N),
        io:format("factorial ~w = ~w\n", [N,F])
    catch
        _:_ -&gt;
            usage()
    end;
main(_) -&gt;
    usage().

usage() -&gt;
    io:format("usage: factorial integer\n"),
    halt(1).

fac(0) -&gt; 1;
fac(N) -&gt; N * fac(N-1).
$ <fo:inline font-weight="bold">./factorial 5</fo:inline>
factorial 5 = 120
$ <fo:inline font-weight="bold">./factorial</fo:inline>
usage: factorial integer
$ <fo:inline font-weight="bold">./factorial five</fo:inline>
usage: factorial integer</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The header of the Erlang script in the example differs from
          a normal Erlang module. The first line is intended to be the
          interpreter line, which invokes <fo:inline font-family="monospace">escript</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, if you invoke the <fo:inline font-family="monospace">escript</fo:inline> as follows,
          the contents of the first line does not matter, but it
          cannot contain Erlang code as it will be ignored:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ <fo:inline font-weight="bold">escript factorial 5</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second line in the example contains an optional
          directive to the <fo:inline font-family="monospace">Emacs</fo:inline> editor, which causes it to
          enter the major mode for editing Erlang source files. If the
          directive is present, it must be located on the second
          line.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a comment selecting the <fo:inline font-style="italic">encoding</fo:inline> exists, it can be
          located on the second line.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The encoding specified by the above mentioned comment
            applies to the script itself. The encoding of the
            I/O-server, however, must be set explicitly as follows:</fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
io:setopts([{encoding, unicode}])</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default encoding of the I/O-server for <fo:inline font-family="monospace">standard_io</fo:inline>
            is <fo:inline font-family="monospace">latin1</fo:inline>, as the script runs in a non-interactive terminal
            (see section
            <fo:inline font-style="italic">
            Summary of Options</fo:inline>) in the STDLIB User's Guide.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On the third line (or second line depending on the presence
          of the Emacs directive), arguments can be specified to
          the emulator, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%%! -smp enable -sname factorial -mnesia debug verbose</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Such an argument line must start with <fo:inline font-family="monospace">%%!</fo:inline> and the
          remaining line is interpreted as arguments to the emulator.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you know the location of the <fo:inline font-family="monospace">escript</fo:inline> executable, the first
          line can directly give the path to <fo:inline font-family="monospace">escript</fo:inline>, for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#!/usr/local/bin/escript</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As any other type of scripts, Erlang scripts do not work on
          Unix platforms if the execution bit for the script file is not set.
          (To turn on the execution bit, use <fo:inline font-family="monospace">chmod +x script-name</fo:inline>.)</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The remaining Erlang script file can either contain
          Erlang <fo:inline font-weight="bold">source code</fo:inline>, an <fo:inline font-weight="bold">inlined beam file</fo:inline>, or an
          <fo:inline font-weight="bold">inlined archive file</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang script file must always contain the <fo:inline font-family="monospace">main/1</fo:inline>
          function. When the script is run, the
          <fo:inline font-family="monospace">main/1</fo:inline> function is called with a list
          of strings representing the arguments specified to the script (not
          changed or interpreted in any way).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">main/1</fo:inline> function in the script returns successfully,
          the exit status for the script is <fo:inline font-family="monospace">0</fo:inline>. If an exception is
          generated during execution, a short message is printed and the script
          terminates with exit status <fo:inline font-family="monospace">127</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To return your own non-zero exit code, call <fo:inline font-family="monospace">halt(ExitCode)</fo:inline>,
          for example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
halt(1).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To retrieve the pathname of the script, call
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">escript:script_name()</fo:inline></fo:inline> from your script
	  (the pathname is usually, but not always, absolute).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the file contains source code (as in the example above),
          it is processed by the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">epp</fo:inline></fo:inline> preprocessor.
          This means that you, for example, can use predefined macros
          (such as <fo:inline font-family="monospace">?MODULE</fo:inline>) and include directives like
          the <fo:inline font-family="monospace">-include_lib</fo:inline> directive. For example, use</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-include_lib("kernel/include/file.hrl").</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">to include the record definitions for the records used by function
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">file:read_link_info/1</fo:inline></fo:inline>. You can also select
          encoding by including an encoding comment here, but if
          a valid encoding comment exists on the second line, it takes
          precedence.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The script is checked for syntactic and semantic
          correctness before it is run. If there are warnings (such as
          unused variables), they are printed and the script will
          still be run. If there are errors, they are printed and
          the script will not be run and its exit status is
          <fo:inline font-family="monospace">127</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Both the module declaration and the export declaration of
          the <fo:inline font-family="monospace">main/1</fo:inline> function are optional.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, the script will be interpreted. You can force
          it to be compiled by including the following line somewhere
          in the script file:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-mode(compile).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Execution of interpreted code is slower than compiled code.
          If much of the execution takes place in interpreted code, it
          can be worthwhile to compile it, although the compilation
          itself takes a little while. Also, <fo:inline font-family="monospace">native</fo:inline> can be supplied
          instead of <fo:inline font-family="monospace">compile</fo:inline>. This compiles the script
          using the native flag and may or may not be worthwhile
          depending on the escript characteristics.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As mentioned earlier, a script can
          contains precompiled <fo:inline font-family="monospace">beam</fo:inline> code. In a precompiled
          script, the interpretation of the script header is
          the same as in a script containing source code. This means
          that you can make a <fo:inline font-family="monospace">beam</fo:inline> file executable by
          prepending the file with the lines starting with <fo:inline font-family="monospace">#!</fo:inline>
          and <fo:inline font-family="monospace">%%!</fo:inline> mentioned above. In a precompiled script, the
          <fo:inline font-family="monospace">main/1</fo:inline> function must be exported.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another option is to have an entire
          Erlang archive in the script. In an archive script, the
          interpretation of the script header is the same as
          in a script containing source code. This means that you can
          make an archive file executable by prepending the file with
          the lines starting with <fo:inline font-family="monospace">#!</fo:inline> and <fo:inline font-family="monospace">%%!</fo:inline> mentioned
          above. In an archive script, the <fo:inline font-family="monospace">main/1</fo:inline> function must
          be exported. By default the <fo:inline font-family="monospace">main/1</fo:inline> function in the
          module with the same name as the basename of the
          <fo:inline font-family="monospace">escript</fo:inline> file is invoked. This behavior can be
          overridden by setting flag <fo:inline font-family="monospace">-escript main Module</fo:inline>
          as one of the emulator flags. <fo:inline font-family="monospace">Module</fo:inline> must be the
          name of a module that has an exported <fo:inline font-family="monospace">main/1</fo:inline>
          function. For more information about archives and code loading, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is often very convenient to have a header in
          the escript, especially on Unix platforms. However, the header
          is optional, so you directly can "execute"
          an Erlang module, Beam file, or archive file without adding
          any header to them. But then you have to invoke the script
          as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ <fo:inline font-weight="bold">escript factorial.erl 5</fo:inline>
factorial 5 = 120
$ <fo:inline font-weight="bold">escript factorial.beam 5</fo:inline>
factorial 5 = 120
$ <fo:inline font-weight="bold">escript factorial.zip 5</fo:inline>
factorial 5 = 120</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18167008">escript:create(FileOrBin, Sections) -&gt; ok | {ok, binary()} |
        {error, term()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FileOrBin = filename() | 'binary'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Sections = [Header] Body | Body</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Header = shebang | {shebang, Shebang}
           | comment | {comment, Comment}
           | {emu_args, EmuArgs}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Shebang = string() | 'default' | 'undefined'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Comment = string() | 'default' | 'undefined'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EmuArgs = string() | 'undefined'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Body = {source, SourceCode} | {beam, BeamCode}
           | {archive, ZipArchive}
           | {archive, ZipFiles, ZipOptions}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SourceCode = BeamCode = file:filename() | binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ZipArchive = <fo:inline font-style="italic">
          zip:filename()</fo:inline> | binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ZipFiles = [ZipFile]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ZipFile = file:filename()
           | {file:filename(), binary()}
           | {file:filename(), binary(), file:file_info()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ZipOptions = [<fo:inline font-style="italic">
          zip:create_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          Creates an escript from a list of sections. The
          sections can be specified in any order. An escript begins with an
          optional <fo:inline font-family="monospace">Header</fo:inline> followed by a mandatory <fo:inline font-family="monospace">Body</fo:inline>. If
          the header is present, it does always begin with a
          <fo:inline font-family="monospace">shebang</fo:inline>, possibly followed by a <fo:inline font-family="monospace">comment</fo:inline> and
          <fo:inline font-family="monospace">emu_args</fo:inline>. The <fo:inline font-family="monospace">shebang</fo:inline> defaults to
          <fo:inline font-family="monospace">"/usr/bin/env escript"</fo:inline>. The <fo:inline font-family="monospace">comment</fo:inline> defaults to
          <fo:inline font-family="monospace">"This is an -*- erlang -*- file"</fo:inline>. The created escript
          can either be returned as a binary or written to file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As an example of how the function can be used, we create an
          interpreted escript that uses <fo:inline font-family="monospace">emu_args</fo:inline> to set some emulator
          flag. In this case, it happens to disable the <fo:inline font-family="monospace">smp_support</fo:inline>. We
          also extract the different sections from the newly created script:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">Source = "%% Demo\nmain(_Args) -&gt;\n    io:format(erlang:system_info(smp_support)).\n".</fo:inline>
"%% Demo\nmain(_Args) -&gt;\n    io:format(erlang:system_info(smp_support)).\n"
&gt; <fo:inline font-weight="bold">io:format("~s\n", [Source]).</fo:inline>
%% Demo
main(_Args) -&gt;
    io:format(erlang:system_info(smp_support)).

ok
&gt; <fo:inline font-weight="bold">{ok, Bin} = escript:create(binary, [shebang, comment, {emu_args, "-smp disable"},
                                      {source, list_to_binary(Source)}]).</fo:inline>
{ok,&lt;&lt;"#!/usr/bin/env escript\n%% This is an -*- erlang -*- file\n%%!-smp disabl"...&gt;&gt;}
&gt; <fo:inline font-weight="bold">file:write_file("demo.escript", Bin).</fo:inline>
ok
&gt; <fo:inline font-weight="bold">os:cmd("escript demo.escript").</fo:inline>
"false"
&gt; <fo:inline font-weight="bold">escript:extract("demo.escript", []).</fo:inline>
{ok,[{shebang,default}, {comment,default}, {emu_args,"-smp disable"},
     {source,&lt;&lt;"%% Demo\nmain(_Args) -&gt;\n    io:format(erlang:system_info(smp_su"...&gt;&gt;}]}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An escript without header can be created as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">file:write_file("demo.erl",
                  ["%% demo.erl\n-module(demo).\n-export([main/1]).\n\n", Source]).</fo:inline>
ok
&gt; <fo:inline font-weight="bold">{ok, _, BeamCode} = compile:file("demo.erl", [binary, debug_info]).</fo:inline>
{ok,demo,
    &lt;&lt;70,79,82,49,0,0,2,208,66,69,65,77,65,116,111,109,0,0,0,
      79,0,0,0,9,4,100,...&gt;&gt;}
&gt; <fo:inline font-weight="bold">escript:create("demo.beam", [{beam, BeamCode}]).</fo:inline>
ok
&gt; <fo:inline font-weight="bold">escript:extract("demo.beam", []).</fo:inline>
{ok,[{shebang,undefined}, {comment,undefined}, {emu_args,undefined},
     {beam,&lt;&lt;70,79,82,49,0,0,3,68,66,69,65,77,65,116,
             111,109,0,0,0,83,0,0,0,9,...&gt;&gt;}]}
&gt; <fo:inline font-weight="bold">os:cmd("escript demo.beam").</fo:inline>
"true"</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here we create an archive script containing both Erlang
          code and Beam code, then we iterate over all files in
          the archive and collect their contents and some information about
          them:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">{ok, SourceCode} = file:read_file("demo.erl").</fo:inline>
{ok,&lt;&lt;"%% demo.erl\n-module(demo).\n-export([main/1]).\n\n%% Demo\nmain(_Arg"...&gt;&gt;}
&gt; <fo:inline font-weight="bold">escript:create("demo.escript",
                 [shebang,
                  {archive, [{"demo.erl", SourceCode},
                             {"demo.beam", BeamCode}], []}]).</fo:inline>
ok
&gt; <fo:inline font-weight="bold">{ok, [{shebang,default}, {comment,undefined}, {emu_args,undefined},
     {archive, ArchiveBin}]} = escript:extract("demo.escript", []).</fo:inline>
{ok,[{shebang,default}, {comment,undefined}, {emu_args,undefined},
     {{archive,&lt;&lt;80,75,3,4,20,0,0,0,8,0,118,7,98,60,105,
                152,61,93,107,0,0,0,118,0,...&gt;&gt;}]}
&gt; <fo:inline font-weight="bold">file:write_file("demo.zip", ArchiveBin).</fo:inline>
ok
&gt; <fo:inline font-weight="bold">zip:foldl(fun(N, I, B, A) -&gt; [{N, I(), B()} | A] end, [], "demo.zip").</fo:inline>
{ok,[{"demo.beam",
      {file_info,748,regular,read_write,
                 {{2010,3,2},{0,59,22}},
                 {{2010,3,2},{0,59,22}},
                 {{2010,3,2},{0,59,22}},
                 54,1,0,0,0,0,0},
      &lt;&lt;70,79,82,49,0,0,2,228,66,69,65,77,65,116,111,109,0,0,0,
        83,0,0,...&gt;&gt;},
     {"demo.erl",
      {file_info,118,regular,read_write,
                 {{2010,3,2},{0,59,22}},
                 {{2010,3,2},{0,59,22}},
                 {{2010,3,2},{0,59,22}},
                 54,1,0,0,0,0,0},
      &lt;&lt;"%% demo.erl\n-module(demo).\n-export([main/1]).\n\n%% Demo\nmain(_Arg"...&gt;&gt;}]}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18195328">escript:extract(File, Options) -&gt; {ok, Sections} |
        {error, term()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = filename()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [] | [compile_source]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Sections = Headers Body</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Headers =  {shebang, Shebang}
          {comment, Comment}
          {emu_args, EmuArgs}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Shebang = string() | 'default' | 'undefined'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Comment = string() | 'default' | 'undefined'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EmuArgs = string() | 'undefined'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Body = {source, SourceCode}
           | {source, BeamCode}
           | {beam, BeamCode}
           | {archive, ZipArchive}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SourceCode = BeamCode = ZipArchive = binary()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          Parses an escript and extracts its sections. This is the reverse
          of <fo:inline font-style="italic"><fo:inline font-family="monospace">create/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All sections are returned even if they do not exist in the
          escript. If a particular section happens to have the same
          value as the default value, the extracted value is set to the
          atom <fo:inline font-family="monospace">default</fo:inline>. If a section is missing, the extracted
          value is set to the atom <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">compile_source</fo:inline> only affects the result if
          the escript contains <fo:inline font-family="monospace">source</fo:inline> code. In this case the
          Erlang code is automatically compiled and <fo:inline font-family="monospace">{source,
          BeamCode}</fo:inline> is returned instead of <fo:inline font-family="monospace">{source,
          SourceCode}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">escript:create("demo.escript",
                 [shebang, {archive, [{"demo.erl", SourceCode},
                                      {"demo.beam", BeamCode}], []}]).</fo:inline>
ok
&gt; <fo:inline font-weight="bold">{ok, [{shebang,default}, {comment,undefined}, {emu_args,undefined},
     {archive, ArchiveBin}]} =
              escript:extract("demo.escript", []).</fo:inline>
{ok,[{{archive,&lt;&lt;80,75,3,4,20,0,0,0,8,0,118,7,98,60,105,
                152,61,93,107,0,0,0,118,0,...&gt;&gt;}
     {emu_args,undefined}]}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18209968">escript:script_name() -&gt; File</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = filename()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          Returns the name of the escript that is executed.
          If the function is invoked outside the context
          of an escript, the behavior is undefined.</fo:block>
      </fo:block>
  

  <fo:block id="idp18213856" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Options Accepted By escript</fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-c</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Compiles the escript regardless of the value of the mode attribute.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-d</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Debugs the escript. Starts the debugger, loads the module
        containing the <fo:inline font-family="monospace">main/1</fo:inline> function into the debugger, sets a
        breakpoint in <fo:inline font-family="monospace">main/1</fo:inline>, and invokes <fo:inline font-family="monospace">main/1</fo:inline>. If the
        module is precompiled, it must be explicitly compiled with option
        <fo:inline font-family="monospace">debug_info</fo:inline>.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-i</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Interprets the escript regardless of the value of the mode
        attribute.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-s</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Performs a syntactic and semantic check of the script file.
        Warnings and errors (if any) are written to the standard output, but
        the script will not be run. The exit status is <fo:inline font-family="monospace">0</fo:inline> if any errors
        are found, otherwise <fo:inline font-family="monospace">127</fo:inline>.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-n</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Compiles the escript using flag <fo:inline font-family="monospace">+native</fo:inline>.
      </fo:block></fo:block-container>
    </fo:block>
  
<fo:block page-break-before="always" id="idp18231328" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erlsrv</fo:marker>erlsrv</fo:block>Command</fo:block>
  <fo:block/>
  erlsrv
  Run the Erlang emulator as a service on Windows
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This utility is specific to Windows NT/2000/XP (and later
      versions of Windows). It allows Erlang
      emulators to run as services on the Windows system, allowing embedded
      systems to start without any user needing to log on. The
      emulator started in this way can be manipulated through the
      Windows services applet in a manner similar to other services.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-family="monospace">erlsrv</fo:inline> is not a general service utility for Windows,
      but designed for embedded Erlang systems.</fo:block> 

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erlsrv</fo:inline> also provides a command-line interface for registering,
      changing, starting, and stopping services.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To manipulate services, the logged on user is to have
      administrator privileges on the machine. The Erlang machine
      itself is (default) run as the local administrator. This can be
      changed with the Services applet in Windows.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The processes created by the service can, as opposed to normal
      services, be "killed" with the task manager. Killing an emulator
      that is started by a service triggers the "OnFail" action
      specified for that service, which can be a reboot.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following parameters can be specified for each Erlang service:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">StopAction</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tells <fo:inline font-family="monospace">erlsrv</fo:inline> how to stop
          the Erlang emulator. Default is to kill it (Win32
          TerminateProcess), but this action can specify any Erlang
          shell command that will be executed in the emulator to make
          it stop. The emulator is expected to stop within 30 seconds
          after the command is issued in the shell. If the emulator is
          not stopped, it reports a running state to the service
          manager.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">OnFail</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">reboot</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Windows system is rebooted whenever the emulator stops
              (a more simple form of watchdog). This can be useful for
              less critical systems, otherwise use the heart functionality
              to accomplish this.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">restart</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the Erlang emulator be
              restarted (with whatever parameters are registered for the
              service at the occasion) when it stops. If the emulator
              stops again within 10 seconds, it is not restarted to avoid
              an infinite loop, which could hang the Windows system.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">restart_always</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Similar to <fo:inline font-family="monospace">restart</fo:inline>, but does
              not try to detect cyclic restarts; it is expected that
              some other mechanism is present to avoid the problem.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ignore</fo:inline> (the default)</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reports the service as stopped to the service manager
              whenever it fails; it must be manually restarted.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On a system where release handling is used,
          this is always to be set to <fo:inline font-family="monospace">ignore</fo:inline>. Use
          <fo:inline font-family="monospace">heart</fo:inline> to restart the service on failure
          instead.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Machine</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The location of the Erlang emulator.
          The default is the <fo:inline font-family="monospace">erl.exe</fo:inline> located in the same
          directory as <fo:inline font-family="monospace">erlsrv.exe</fo:inline>. Do not specify
          <fo:inline font-family="monospace">werl.exe</fo:inline> as this emulator, it will not work.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the system uses release handling, this is to be set to a
          program similar to <fo:inline font-family="monospace">start_erl.exe</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Env</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies an <fo:inline font-weight="bold">extra</fo:inline> environment
          for the emulator. The environment variables specified
          here are added to the system-wide environment block that is
          normally present when a service starts up. Variables present
          in both the system-wide environment and in the service
          environment specification will be set to the value specified
          in the service.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">WorkDir</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The working directory for the Erlang emulator.
          Must be on a local drive (no network drives are mounted when a
          service starts). Default working directory for services is
          <fo:inline font-family="monospace">%SystemDrive%%SystemPath%</fo:inline>.
          Debug log files will be placed in this directory.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Priority</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process priority of the emulator. Can be one of the
          following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">realtime</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Not recommended, as the machine will possibly be
              inaccessible to interactive users.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">high</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be used if two Erlang nodes are to reside on one dedicated
              system and one is to have precedence over the other.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">low</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be used if interactive performance is not to be affected
              by the emulator process.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">default</fo:inline> (the default&gt;</fo:block>
          <fo:block-container><fo:block start-indent="2em">
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">SName or Name</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the short or long
          node name of the Erlang emulator. The Erlang services are
          always distributed. Default is to use the service name as
          (short) nodename.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">DebugType</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies that output from the Erlang shell is to be
          sent to a "debug log". The log file is named
          &lt;servicename&gt;<fo:inline font-family="monospace">.debug</fo:inline> or
          &lt;servicename&gt;<fo:inline font-family="monospace">.debug.</fo:inline>&lt;N&gt;,
          where &lt;N&gt; is an integer from 1 through 99.
          The log file is placed in the working directory of the
          service (as specified in <fo:inline font-family="monospace">WorkDir</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">new</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Uses a separate log file for every invocation of the service
              (&lt;servicename&gt;<fo:inline font-family="monospace">.debug.</fo:inline>&lt;N&gt;).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">reuse</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reuses the same log file
              (&lt;servicename&gt;<fo:inline font-family="monospace">.debug</fo:inline>).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">console</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens an interactive Windows console window for the Erlang
              shell of the service. Automatically disables the
              <fo:inline font-family="monospace">StopAction</fo:inline>. A service started with an
              interactive console window does not survive logouts.
              <fo:inline font-family="monospace">OnFail</fo:inline> actions do not work with
              debug consoles either.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">none</fo:inline> (the default)</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The output of the Erlang shell is discarded.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">console</fo:inline> option is <fo:inline font-weight="bold">not</fo:inline> intended
            for production. It is <fo:inline font-weight="bold">only</fo:inline> a convenient way to debug
            Erlang services during development.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">new</fo:inline> and <fo:inline font-family="monospace">reuse</fo:inline> options
            might seem convenient in a production system, but consider that
            the logs grow indefinitely during the system lifetime and cannot
            be truncated, except if the service is restarted.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In short, the <fo:inline font-family="monospace">DebugType</fo:inline> is
            intended for debugging only. Logs during production are
            better produced with the standard Erlang logging facilities.</fo:block>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Args</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Passes extra arguments to the emulator startup program
          <fo:inline font-family="monospace">erl.exe</fo:inline> (or <fo:inline font-family="monospace">start_erl.exe</fo:inline>).
          Arguments that cannot be specified here are
          <fo:inline font-family="monospace">-noinput</fo:inline> (<fo:inline font-family="monospace">StopActions</fo:inline> would not work),
          <fo:inline font-family="monospace">-name</fo:inline>, and <fo:inline font-family="monospace">-sname</fo:inline> (they are
          specified in any way). The most common use is for specifying cookies
          and flags to be passed to <fo:inline font-family="monospace">init:boot()</fo:inline>
          (<fo:inline font-family="monospace">-s</fo:inline>).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">InternalServiceName</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the Windows-internal service name (not the display name,
          which is the one <fo:inline font-family="monospace">erlsrv</fo:inline> uses to identify the service).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This internal name cannot be changed, it is fixed even if the
          service is renamed. <fo:inline font-family="monospace">erlsrv</fo:inline> generates a unique internal name
          when a service is created. It is recommended to keep to the default
          if release handling is to be used for the application.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The internal service name can be seen in the Windows service
          manager if viewing <fo:inline font-family="monospace">Properties</fo:inline> for an Erlang service.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Comment</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A textual comment describing the service. Not mandatory, but shows
          up as the service description in the Windows service manager.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The naming of the service in a system that
      uses release handling must follow the convention
      <fo:inline font-weight="bold">NodeName</fo:inline>_<fo:inline font-weight="bold">Release</fo:inline>, where <fo:inline font-weight="bold">NodeName</fo:inline> is
      the first part of the Erlang node name (up to, but not including
      the "@") and <fo:inline font-weight="bold">Release</fo:inline> is the current release of the
      application.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18300048">erlsrv {set | add} &lt;service-name&gt; [&lt;service options&gt;]</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">set</fo:inline> and <fo:inline font-family="monospace">add</fo:inline> commands modifies or adds an Erlang
          service, respectively. The simplest form of an <fo:inline font-family="monospace">add</fo:inline> command is
          without any options in which case all default values
          (described above) apply. The service name is mandatory.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Every option can be specified without parameters, the
          default value is then applied. Values to the options are
          supplied <fo:inline font-weight="bold">only</fo:inline> when the default is not to be used.
          For example, <fo:inline font-family="monospace">erlsrv set myservice -prio -arg</fo:inline>
          sets the default priority and removes all arguments.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Service options:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-st[opaction] [&lt;erlang shell command&gt;]</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines the <fo:inline font-family="monospace">StopAction</fo:inline>, the command given
              to the Erlang shell when the service is stopped.
              Default is none.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-on[fail] [{reboot | restart | restart_always}]</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The action to take when the Erlang emulator
              stops unexpectedly. Default is to ignore.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-m[achine] [&lt;erl-command&gt;]</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The complete path to the Erlang emulator. Never use the
              <fo:inline font-family="monospace">werl</fo:inline> program for this. Defaults to the
              <fo:inline font-family="monospace">erl.exe</fo:inline> in the same directory as
              <fo:inline font-family="monospace">erlsrv.exe</fo:inline>. When release handling
              is used, this is to be set to a program similar to
              <fo:inline font-family="monospace">start_erl.exe</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-e[nv] [&lt;variable&gt;[=&lt;value&gt;]] ...</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Edits the environment block for the service. Every
              environment variable specified is added to the system
              environment block. If a variable specified here has the same
              name as a system-wide environment variable, the specified
              value overrides the system-wide. Environment variables are
              added to this list by specifying
              &lt;variable&gt;=&lt;value&gt; and deleted from the list by
              specifying &lt;variable&gt; alone. The environment block is
              automatically sorted. Any number of <fo:inline font-family="monospace">-env</fo:inline>
              options can be specified in one command. Default is to use the
              system environment block unmodified (except for two additions,
              see section <fo:inline font-style="italic">Environment</fo:inline>
              below).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-w[orkdir] [&lt;directory&gt;]</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The initial working directory of the Erlang
              emulator. Defaults to the system directory.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-p[riority] [{low|high|realtime}]</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The priority of the Erlang emulator. Default to the
              Windows default priority.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{-sn[ame] | -n[ame]} [&lt;node-name&gt;]</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node name of the Erlang machine. Distribution is mandatory.
              Defaults to <fo:inline font-family="monospace">-sname &lt;service name&gt;</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-d[ebugtype] [{new|reuse|console}]</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies where shell output is to be sent.
              Default is that shell output is discarded.
              To be used only for debugging.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-ar[gs] [&lt;limited erl arguments&gt;]</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Extra arguments to the Erlang emulator. Avoid
              <fo:inline font-family="monospace">-noinput</fo:inline>, <fo:inline font-family="monospace">-noshell</fo:inline>, and
              <fo:inline font-family="monospace">-sname</fo:inline>/<fo:inline font-family="monospace">-name</fo:inline>. Default is
              no extra arguments. Remember that the services cookie file is not
              necessarily the same as the interactive users. The service
              runs as the local administrator. Specify all arguments
              together in one string, use double quotes (") to specify an
              argument string containing spaces, and use quoted quotes (\")
              to specify a quote within the argument string if necessary.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-i[nternalservicename] [&lt;internal name&gt;]</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Only</fo:inline> allowed for <fo:inline font-family="monospace">add</fo:inline>. Specifies a
              Windows-internal service name for the service, which by
              default is set to something unique (prefixed with the
              original service name) by <fo:inline font-family="monospace">erlsrv</fo:inline> when adding a new
              service. Specifying this is a purely cosmethic action and is
              <fo:inline font-weight="bold">not</fo:inline> recommended if release handling is to be
              performed. The internal service name cannot be changed once
              the service is created. The internal name is <fo:inline font-weight="bold">not</fo:inline> to
              be confused with the ordinary service name, which is the name
              used to identify a service to <fo:inline font-family="monospace">erlsrv</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-c[omment] [&lt;short description&gt;]</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a textual comment describing the
              service. This comment shows up as the service description
              in the Windows service manager.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18333568">erlsrv {start | start_disabled | stop | disable |
        enable} &lt;service-name&gt;</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These commands are only added for convenience, the normal
          way to manipulate the state of a service is through the
          control panels services applet.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">start</fo:inline> and
          <fo:inline font-family="monospace">stop</fo:inline> commands communicates
          with the service manager for starting and stopping a
          service. The commands wait until the service is
          started or stopped. When disabling a service, it is not
          stopped, the disabled state does not take effect until the
          service is stopped. Enabling a service sets it in
          automatic mode, which is started at boot. This command cannot
          set the service to manual.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">start_disabled</fo:inline> command operates on a service
          regardless of if it is enabled/disabled or started/stopped. It
          does this by first enabling it (regardless of if it is enabled
          or not), then starting it (if not already started), and
          then disabling it. The result is a disabled but started
          service, regardless of its earlier state. This is useful for
          starting services temporarily during a release upgrade. The
          difference between using <fo:inline font-family="monospace">start_disabled</fo:inline> and the
          sequence <fo:inline font-family="monospace">enable</fo:inline>, <fo:inline font-family="monospace">start</fo:inline>, and <fo:inline font-family="monospace">disable</fo:inline> is
          that all other <fo:inline font-family="monospace">erlsrv</fo:inline> commands are locked out during
          the sequence of operations in <fo:inline font-family="monospace">start_disable</fo:inline>, making the
          operation atomic from an <fo:inline font-family="monospace">erlsrv</fo:inline> user's point of view.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18342432">erlsrv remove &lt;service-name&gt;</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes the service completely with all its registered
          options. It is stopped before it is removed.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18344784">erlsrv list [&lt;service-name&gt;]</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no service name is specified, a brief listing of all Erlang
          services is presented. If a service name is supplied, all options
          for that service are presented.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18347248">erlsrv help</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Displays a brief help text.</fo:block>
      </fo:block>
  

  <fo:block id="idp18349680" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Environment</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The environment of an Erlang machine started
      as a service contains two special variables:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERLSRV_SERVICE_NAME</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The name of the service that started the machine.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERLSRV_EXECUTABLE</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The full path to the <fo:inline font-family="monospace">erlsrv.exe</fo:inline>, which can be
        used to manipulate the service. This comes in handy when defining a
        heart command for your service.</fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A command file for restarting a service looks as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
@echo off
%ERLSRV_EXECUTABLE% stop %ERLSRV_SERVICE_NAME%
%ERLSRV_EXECUTABLE% start %ERLSRV_SERVICE_NAME%    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This command file is then set as heart command.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The environment variables can also be used to detect that we
      are running as a service and make port programs react correctly
      to the control events generated on logout (see the next section).</fo:block>
  

  <fo:block id="idp18357024" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Port Programs</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a program runs in
      the service context, it must handle the control events that are
      sent to every program in the system when the interactive user
      logs off. This is done in different ways for programs running in
      the console subsystem and programs running as window
      applications. An application running in the console subsystem
      (normal for port programs) uses the win32 function
      <fo:inline font-family="monospace">SetConsoleCtrlHandler</fo:inline> to register a control handler
      that returns <fo:inline font-family="monospace">true</fo:inline> in answer to the
      <fo:inline font-family="monospace">CTRL_LOGOFF_EVENT</fo:inline>
      and <fo:inline font-family="monospace">CTRL_SHUTDOWN_EVENT</fo:inline> events. Other applications
      only forward <fo:inline font-family="monospace">WM_ENDSESSION</fo:inline> and
      <fo:inline font-family="monospace">WM_QUERYENDSESSION</fo:inline> to the default window procedure.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A brief example in C of how to set the console control handler:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#include &lt;windows.h&gt;
/* 
** A Console control handler that ignores the log off events,
** and lets the default handler take care of other events.
*/   
BOOL WINAPI service_aware_handler(DWORD ctrl){
    if(ctrl == CTRL_LOGOFF_EVENT)
        return TRUE;
    if(ctrl == CTRL_SHUTDOWN_EVENT)
        return TRUE;
    return FALSE;
}

void initialize_handler(void){
    char buffer[2];
    /* 
     * We assume we are running as a service if this  
     * environment variable is defined.
     */
    if(GetEnvironmentVariable("ERLSRV_SERVICE_NAME",buffer,
                              (DWORD) 2)){
        /*
        ** Actually set the control handler
        */
        SetConsoleCtrlHandler(&amp;service_aware_handler, TRUE);
    }
}    </fo:block>
  

  <fo:block id="idp18363488" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Notes</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Although the options are described in a Unix-like format, the case of
      the options or commands is not relevant, and both character "/" and "-"
      can be used for options.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the program resides in the emulator's <fo:inline font-family="monospace">bin</fo:inline>
      directory, not in the <fo:inline font-family="monospace">bin</fo:inline> directory directly under
      the Erlang root. The reasons for this are the subtle problem of
      upgrading the emulator on a running system, where a new version of
      the runtime system should not need to overwrite existing (and probably
      used) executables.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To manipulate the Erlang services easily, put
      the <fo:inline font-family="monospace">&lt;erlang_root&gt;\erts-&lt;version&gt;\bin</fo:inline> directory in
      the path instead of <fo:inline font-family="monospace">&lt;erlang_root&gt;\bin</fo:inline>. The
      <fo:inline font-family="monospace">erlsrv</fo:inline> program can be found from inside Erlang by using the
      <fo:inline font-family="monospace">os:find_executable/1</fo:inline> Erlang function.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For release handling to work, use <fo:inline font-family="monospace">start_erl</fo:inline> as the
      Erlang machine. As stated <fo:inline font-style="italic">above</fo:inline>,
      the service name is significant.</fo:block>
  

  <fo:block id="idp18370720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">start_erl(1)</fo:inline></fo:inline>,
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">release_handler(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp18380912" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">start_erl</fo:marker>start_erl</fo:block>Command</fo:block>
  <fo:block/>
  start_erl
  Start Erlang for embedded systems on Windows systems.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">start_erl</fo:inline> program is specific to
      Windows NT/2000/XP (and later versions of Windows).
      Although there are programs with the same name on other
      platforms, their functionality is different.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This program is distributed both in compiled
      form (under &lt;Erlang root&gt;\\erts-&lt;version&gt;\\bin) and
      in source form (under &lt;Erlang root&gt;\\erts-&lt;version&gt;\\src).
      The purpose of the source code is to ease customization of the
      program for local needs, such as cyclic restart
      detection. There is also a "make"-file, written for the
      <fo:inline font-family="monospace">nmake</fo:inline> program distributed with Microsoft Visual
      C++. This program can, however, be compiled with
      any Win32 C compiler (possibly with minor modifications).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This program aids release handling on Windows systems.
      The program is to be called by the
      <fo:inline font-family="monospace">erlsrv</fo:inline> program, read up the release data file
      <fo:inline font-family="monospace">start_erl.data</fo:inline>, and start Erlang. Some options to
      <fo:inline font-family="monospace">start_erl</fo:inline> are added and removed by the release handler
      during upgrade with emulator restart (more specifically option
      <fo:inline font-family="monospace">-data</fo:inline>).</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18387808">start_erl [&lt;erl options&gt;] ++ [&lt;start_erl options&gt;]</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">start_erl</fo:inline> program in its original form
          recognizes the following options:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">++</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mandatory. Delimits <fo:inline font-family="monospace">start_erl</fo:inline> options from normal Erlang
              options. Everything on the command line <fo:inline font-weight="bold">before</fo:inline>
              <fo:inline font-family="monospace">++</fo:inline> is interpreted as options to be sent to the
              <fo:inline font-family="monospace">erl</fo:inline> program. Everything <fo:inline font-weight="bold">after</fo:inline>
              <fo:inline font-family="monospace">++</fo:inline> is interpreted as options to
              <fo:inline font-family="monospace">start_erl</fo:inline> itself.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-reldir &lt;release root&gt;</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mandatory if environment variable
              <fo:inline font-family="monospace">RELDIR</fo:inline> is not specified and no
              <fo:inline font-family="monospace">-rootdir</fo:inline> option is specified. Tells <fo:inline font-family="monospace">start_erl</fo:inline> where
              the root of the release tree is located in the file system
              (typically &lt;Erlang root&gt;\\releases). The
              <fo:inline font-family="monospace">start_erl.data</fo:inline> file is expected to be
              located in this directory (unless otherwise specified). If
              only option <fo:inline font-family="monospace">-rootdir</fo:inline> is specified, the directory is
              assumed to be &lt;Erlang root&gt;\\releases.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-rootdir &lt;Erlang root directory&gt;</fo:inline></fo:block> 
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mandatory if <fo:inline font-family="monospace">-reldir</fo:inline> is not specified and no
              <fo:inline font-family="monospace">RELDIR</fo:inline> exists in the environment. This
              specifies the Erlang installation root directory (under
              which the <fo:inline font-family="monospace">lib</fo:inline>, <fo:inline font-family="monospace">releases</fo:inline>, and
              <fo:inline font-family="monospace">erts-&lt;Version&gt;</fo:inline> directories are located). If only
              <fo:inline font-family="monospace">-reldir</fo:inline> (or environment variable <fo:inline font-family="monospace">RELDIR</fo:inline>)
              is specified, the Erlang root is assumed to
              be the directory exactly one level above the release
              directory.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-data &lt;data file name&gt;</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Specifies another data file than <fo:inline font-family="monospace">start_erl.data</fo:inline>
              in the &lt;release root&gt;. It is specified relative to the
              &lt;release root&gt; or absolute (including drive letter, and so
              on). This option is used by the release handler during
              upgrade and is not to be used during normal
              operation. Normally the release data file is not to be
              named differently.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-bootflags &lt;boot flags file name&gt;</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Specifies a file name relative to the release
              directory (that is, the subdirectory of &lt;release root&gt;
              where the <fo:inline font-family="monospace">.boot</fo:inline> file and others are located).
              The contents of this file is appended to the command line
              when Erlang is started. This makes it easy to start the
              emulator with different options for different releases.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
  

  <fo:block id="idp18409600" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Notes</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As the source code is distributed, it can easily be modified to
          accept other options. The program must still accept option
          <fo:inline font-family="monospace">-data</fo:inline> with the semantics described above for the
          release handler to work correctly.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang emulator is found by examining the registry keys for
          the emulator version specified in the release data file. The new
          emulator must be properly installed before the upgrade for
          this to work.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Although the program is located together with files specific to the
          emulator version, it is not expected to be specific to the
          emulator version. The release handler does <fo:inline font-weight="bold">not</fo:inline> change option
          <fo:inline font-family="monospace">-machine</fo:inline> to <fo:inline font-family="monospace">erlsrv</fo:inline> during
          emulator restart. Locate the (possibly customized)
          <fo:inline font-family="monospace">start_erl</fo:inline> program so that it is not overwritten
          during upgrade.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default options of the <fo:inline font-family="monospace">erlsrv</fo:inline> program are not
          sufficient for release handling. The machine started by
          <fo:inline font-family="monospace">erlsrv</fo:inline> is be specified as the
          <fo:inline font-family="monospace">start_erl</fo:inline> program and the arguments are to contain
          <fo:inline font-family="monospace">++</fo:inline> followed by the desired options.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp18419712" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">erlsrv(1)</fo:inline></fo:inline>,
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">release_handler(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp18429904" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">run_erl</fo:marker>run_erl</fo:block>Command</fo:block>
  <fo:block/>
  run_erl
  Redirect Erlang input and output streams on Unix systems.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">run_erl</fo:inline> program is specific to Unix systems.
      This program redirects the standard input and standard
      output streams so that all output can be logged. It also lets the
      program <fo:inline font-family="monospace">to_erl</fo:inline> connect to the Erlang console, making
      it possible to monitor and debug an embedded system remotely.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information about the use, see the
      <fo:inline font-style="italic">
      Embedded System User's Guide</fo:inline> in System Documentation.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18434736">run_erl [-daemon] pipe_dir/ log_dir "exec command
        arg1 arg2 ..."</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Arguments:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-daemon</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option is highly recommended. It makes <fo:inline font-family="monospace">run_erl</fo:inline> run
              in the background completely detached from any controlling
              terminal and the command returns to the caller immediately.
              Without this option, <fo:inline font-family="monospace">run_erl</fo:inline> must be started using several
              tricks in the shell to detach it completely from the
              terminal in use when starting it. The option must be the
              first argument to <fo:inline font-family="monospace">run_erl</fo:inline> on the command line.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pipe_dir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The named pipe, usually <fo:inline font-family="monospace">/tmp/</fo:inline>. It must be
              suffixed by a <fo:inline font-family="monospace">/</fo:inline> (slash), that is,
              <fo:inline font-family="monospace">/tmp/epipes/</fo:inline>, not
              <fo:inline font-family="monospace">/tmp/epipes</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">log_dir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The log files, that is:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One log file, <fo:inline font-family="monospace">run_erl.log</fo:inline>, which logs
                  progress and warnings from the <fo:inline font-family="monospace">run_erl</fo:inline>
                  program itself.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Up to five log files at maximum 100 KB each with the content
                  of the standard streams from and to the command. (Both the
                  number of logs and sizes can be changed by environment
                  variables, see section <fo:inline font-style="italic">Environment Variables</fo:inline>
                  below.)</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the logs are full, <fo:inline font-family="monospace">run_erl</fo:inline> deletes
                  and reuses the oldest log file.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">"exec command arg1 arg2 ..."</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A space-separated string specifying the program to be executed.
	      The second field is typically a command name such as <fo:inline font-family="monospace">erl</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
  

  <fo:block id="idp18453152" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Notes concerning the Log Files</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">While running, <fo:inline font-family="monospace">run_erl</fo:inline> sends all output,
      uninterpreted, to a log file. The file is named
      <fo:inline font-family="monospace">erlang.log.N</fo:inline>, where <fo:inline font-family="monospace">N</fo:inline> is an integer. When the
      log is "full" (default log size is 100 KB), <fo:inline font-family="monospace">run_erl</fo:inline> starts to log
      in file <fo:inline font-family="monospace">erlang.log.(N+1)</fo:inline>, until <fo:inline font-family="monospace">N</fo:inline> reaches a
      certain number (default 5), whereupon <fo:inline font-family="monospace">N</fo:inline> starts at 1 again and
      the oldest files start getting overwritten.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no output comes from the Erlang shell, but
      the Erlang machine still seems to be alive, an "ALIVE" message is
      written to the log; it is a time stamp and is written, by default,
      after 15 minutes of inactivity. Also, if output from Erlang is
      logged, but more than 5 minutes (default) has passed since last time
      we got anything from Erlang, a time stamp is written in the
      log. The "ALIVE" messages look as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
===== ALIVE &lt;date-time-string&gt;    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The other time stamps look as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
===== &lt;date-time-string&gt;    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">date-time-string</fo:inline> is the date and time the message is
      written, default in local time (can be changed to UTC if needed).
      It is formatted with the ANSI-C function <fo:inline font-family="monospace">strftime</fo:inline>
      using the format string <fo:inline font-family="monospace">%a %b %e %T %Z %Y</fo:inline>, which
      produces messages like
      <fo:inline font-family="monospace">===== ALIVE Thu May 15 10:13:36 MEST 2003</fo:inline>; this can
      be changed, see the next section.</fo:block>
  

  <fo:block id="idp18463600" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Environment Variables</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following environment variables are recognized by <fo:inline font-family="monospace">run_erl</fo:inline>
      and change the logging behavior. For more information, see the previous
      section.</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">RUN_ERL_LOG_ALIVE_MINUTES</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">How long to wait for output (in minutes) before writing an
          "ALIVE" message to the log. Defaults to 15, minimum is 1.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">RUN_ERL_LOG_ACTIVITY_MINUTES</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">How long Erlang needs to be inactive before output is
          preceded with a time stamp. Defaults to
          <fo:inline font-family="monospace">RUN_ERL_LOG_ALIVE_MINUTES div 3</fo:inline>, minimum is 1.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">RUN_ERL_LOG_ALIVE_FORMAT</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies another format string to be used in the <fo:inline font-family="monospace">strftime</fo:inline>
          C library call. That is, specifying this to
          <fo:inline font-family="monospace">"%e-%b-%Y, %T %Z"</fo:inline> gives
          log messages with time stamps like
          <fo:inline font-family="monospace">15-May-2003, 10:23:04 MET</fo:inline>. For more information,
          see the documentation for the C library function <fo:inline font-family="monospace">strftime</fo:inline>.
          Defaults to <fo:inline font-family="monospace">"%a %b %e %T %Z %Y"</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">RUN_ERL_LOG_ALIVE_IN_UTC</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If set to anything else than <fo:inline font-family="monospace">0</fo:inline>, it makes all
          times displayed by <fo:inline font-family="monospace">run_erl</fo:inline> to be in UTC (GMT, CET, MET,
          without Daylight Saving Time), rather than in local time.
          This does not affect data coming from Erlang,
          only the logs output directly by <fo:inline font-family="monospace">run_erl</fo:inline>. Application
          SASL can be modified accordingly by setting the Erlang
          application variable <fo:inline font-family="monospace">utc_log</fo:inline> to
          <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">RUN_ERL_LOG_GENERATIONS</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Controls the number of log files written before older
          files are reused. Defaults to 5, minimum is 2, maximum is 1000.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">RUN_ERL_LOG_MAXSIZE</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The size, in bytes, of a log file before switching to a
          new log file. Defaults to 100000, minimum is 1000, maximum is
          about 2^30.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">RUN_ERL_DISABLE_FLOWCNTRL</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If defined, disables input and output flow control for the pty
          opend by <fo:inline font-family="monospace">run_erl</fo:inline>. Useful if you want to remove any risk of
          accidentally blocking the flow control by using Ctrl-S (instead of
          Ctrl-D to detach), which can result in blocking of the entire Beam
          process, and in the case of running heart as supervisor even the
          heart process becomes blocked when writing log message to terminal,
          leaving the heart process unable to do its work.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp18483184" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">start(1)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">start_erl(1)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp18493216" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">start</fo:marker>start</fo:block>Command</fo:block>
  <fo:block/>
  start
  OTP start script example for Unix.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">start</fo:inline> script is an example script on
      how to start up the Erlang system in embedded mode on Unix.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information about the use, see the
      <fo:inline font-style="italic">
      Embedded System User's Guide</fo:inline> in System Documentation.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18497376">start [ data_file ]</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">data_file</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Specifies what <fo:inline font-family="monospace">start_erl.data</fo:inline> file
              to use.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Environment variable <fo:inline font-family="monospace">RELDIR</fo:inline> can
          be set before calling this example, which sets the directory
          where to find the release files.</fo:block>
      </fo:block>
  

  <fo:block id="idp18503232" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">run_erl(1)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">start_erl(1)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp18513744" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_driver</fo:marker>erl_driver</fo:block>C Library</fo:block>
  <fo:block/>
  erl_driver
  API functions for an Erlang driver.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang driver is a library containing a set of native driver
      callback functions that the Erlang Virtual Machine calls when certain
      events occur. There can be multiple instances of a driver, each
      instance is associated with an Erlang port.</fo:block>

    
    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Use this functionality with extreme care.</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A driver callback is executed as a direct extension of the
        native code of the VM. Execution is not made in a safe environment.
        The VM <fo:inline font-weight="bold">cannot</fo:inline> provide the same services as provided when
        executing Erlang code, such as pre-emptive scheduling or memory
        protection. If the driver callback function does not behave well,
        the whole VM will misbehave.</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A driver callback that crash will crash the whole VM.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An erroneously implemented driver callback can cause a VM
            internal state inconsistency, which can cause a crash of the VM,
            or miscellaneous misbehaviors of the VM at any point after the
            call to the driver callback.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A driver callback doing
            <fo:inline font-style="italic">lengthy work</fo:inline> before
            returning degrades responsiveness of the VM and can cause
            miscellaneous strange behaviors. Such strange behaviors
            include, but are not limited to, extreme memory usage and bad
            load balancing between schedulers. Strange behaviors that can
            occur because of lengthy work can also vary between Erlang/OTP
            releases.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from ERTS 5.5.3 the driver interface has been extended
      (see <fo:inline font-style="italic">
      <fo:inline font-family="monospace">extended marker</fo:inline></fo:inline>). The extended interface introduces
      <fo:inline font-style="italic">version management</fo:inline>,
      the possibility to pass capability flags (see
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">driver_flags</fo:inline></fo:inline>) to the runtime system at driver
      initialization, and some new driver API functions.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from ERTS 5.9 old drivers must be recompiled
        and use the extended interface. They must also be adjusted to the
        <fo:inline font-style="italic">
        64-bit capable driver interface</fo:inline>.</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver calls back to the emulator, using the API
      functions declared in <fo:inline font-family="monospace">erl_driver.h</fo:inline>. They are used for
      outputting data from the driver, using timers, and so on.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each driver instance is associated with a port. Every port
      has a port owner process. Communication with the port is normally
      done through the port owner process. Most of the functions take
      the <fo:inline font-family="monospace">port</fo:inline> handle as an argument. This identifies the driver
      instance. Notice that this port handle must be stored by the driver,
      it is not given when the driver is called from the emulator (see
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">driver_entry</fo:inline></fo:inline>).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some of the functions take a parameter of type
      <fo:inline font-family="monospace">ErlDrvBinary</fo:inline>, a driver binary. It is to be both
      allocated and freed by the caller. Using a binary directly avoids
      one extra copying of data.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Many of the output functions have a "header buffer", with
      <fo:inline font-family="monospace">hbuf</fo:inline> and <fo:inline font-family="monospace">hlen</fo:inline> parameters. This buffer is sent as a
      list before the binary (or list, depending on port mode) that is
      sent. This is convenient when matching on messages received from
      the port. (Although in the latest Erlang versions there is
      the binary syntax, which enables you to match on the beginning of
      a binary.)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the runtime system with
      SMP support, drivers are locked either on driver level
      or port level (driver instance level). By default
      driver level locking will be used, that is, only one emulator thread
      will execute code in the driver at a time. If port level locking
      is used, multiple emulator threads can execute code in the driver
      at the same time. Only one thread at a time will call
      driver callbacks corresponding to the same port, though.
      To enable port level locking, set the <fo:inline font-family="monospace">ERL_DRV_FLAG_USE_PORT_LOCKING</fo:inline>
      <fo:inline font-style="italic">driver flag</fo:inline> in
      the <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_entry</fo:inline></fo:inline>
      used by the driver. When port level locking is used,
      the driver writer is responsible for synchronizing all accesses
      to data shared by the ports (driver instances).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Most drivers written before the runtime system with SMP
      support existed can run in the runtime system
      with SMP support, without being rewritten, if driver
      level locking is used.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that drivers do not access other drivers. If
        drivers access each other, they must provide their own
        mechanism for thread-safe synchronization. Such "inter-driver
        communication" is strongly discouraged.</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Previously, in the runtime system without SMP support,
      specific driver callbacks were always called from the same
      thread. This is <fo:inline font-weight="bold">not</fo:inline> the case in the runtime system
      with SMP support. Regardless of locking scheme used, calls
      to driver callbacks can be made from different threads. For example,
      two consecutive calls to exactly the same callback for exactly
      the same port can be made from two different threads. This
      is for <fo:inline font-weight="bold">most</fo:inline> drivers not a problem, but it can be.
      Drivers that depend on all callbacks that are called in the
      same thread, <fo:inline font-weight="bold">must</fo:inline> be rewritten before they are used
      in the runtime system with SMP support.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Regardless of locking scheme used, calls to driver
        callbacks can be made from different threads.</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Most functions in this API are <fo:inline font-weight="bold">not</fo:inline> thread-safe, that is,
      they <fo:inline font-weight="bold">cannot</fo:inline> be called from any thread. Functions
      that are not documented as thread-safe can only be called from
      driver callbacks or function calls descending from a driver
      callback call. Notice that driver callbacks can be called from
      different threads. This, however, is not a problem for any
      function in this API, as the emulator has control over
      these threads.</fo:block>

    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Functions not explicitly documented as thread-safe are
        <fo:inline font-weight="bold">not</fo:inline> thread safe. Also notice that some functions
        are <fo:inline font-weight="bold">only</fo:inline> thread-safe when used in a runtime
        system with SMP support.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A function not explicitly documented as thread-safe can, at
        some point in time, have a thread-safe implementation in the
        runtime system. Such an implementation can however change to
        a thread <fo:inline font-weight="bold">unsafe</fo:inline> implementation at any time <fo:inline font-weight="bold">without
        any notice</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Only use functions explicitly documented as thread-safe
        from arbitrary threads.</fo:inline></fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      As mentioned in the <fo:inline font-style="italic">warning</fo:inline> text at
      the beginning of this section, it is of vital importance that a driver
      callback returns relatively fast. It is difficult to give an exact
      maximum amount of time that a driver callback is allowed to work, but
      usually a well-behaving driver callback is to return within 1 millisecond.
      This can be achieved using different approaches.
      If you have full control over the code to execute in the driver
      callback, the best approach is to divide the work into multiple chunks of
      work, and trigger multiple calls to the
      <fo:inline font-style="italic">time-out callback</fo:inline> using
      zero time-outs. Function <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erl_drv_consume_timeslice</fo:inline></fo:inline> can be useful to
      determine when to trigger such time-out callback calls. However, sometimes
      it cannot be implemented this way, for example when calling
      third-party libraries. In this case, you typically want to dispatch the
      work to another thread. Information about thread primitives is provided
      below.</fo:block>
  

  <fo:block id="idp18553808" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Functionality</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All functions that a driver needs to do with Erlang are
      performed through driver API functions. Functions exist
      for the following functionality:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">Timer functions</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Control the timer that a driver can use. The timer has the
          emulator call the <fo:inline font-style="italic">
          <fo:inline font-family="monospace">timeout</fo:inline></fo:inline> entry function after a specified time.
          Only one timer is available for each driver instance.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Queue handling</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Every driver instance has an associated queue. This queue is a
          <fo:inline font-family="monospace">SysIOVec</fo:inline>, which works as a buffer. It is mostly used for
          the driver to buffer data that is to be written to a device,
          it is a byte stream. If the port owner process closes the
          driver, and the queue is not empty, the driver is not
          closed. This enables the driver to flush its buffers before
          closing.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The queue can be manipulated from any threads if
          a port data lock is used. For more information, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlDrvPDL</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Output functions</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With these functions, the driver sends data back to the emulator.
          The data is received as messages by the port owner process, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:open_port/2</fo:inline></fo:inline>. The vector function and the
          function taking a driver binary are faster, as they avoid
          copying the data buffer. There is also a fast way of sending
          terms from the driver, without going through the binary term
          format.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Failure</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver can exit and signal errors up to Erlang. This is
          only for severe errors, when the driver cannot possibly keep
          open.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Asynchronous calls</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang/OTP R7B and later versions have provision for
          asynchronous function calls, using a thread pool provided by
          Erlang. There is also a select call, which can be used for
          asynchronous drivers.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Multi-threading</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A POSIX thread like API for multi-threading is provided. The
          Erlang driver thread API only provides a subset of the functionality
          provided by the POSIX thread API. The subset provided is
          more or less the basic functionality needed for multi-threaded
          programming:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">Threads</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">Mutexes</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
            Condition variables</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
            Read/write locks</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
           Thread-specific data</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang driver thread API can be used in conjunction with
          the POSIX thread API on UN-ices and with the Windows native thread
          API on Windows. The Erlang driver thread API has the advantage of
          being portable, but there can exist situations where you want to
          use functionality from the POSIX thread API or the Windows
          native thread API.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang driver thread API only returns error codes when it is
          reasonable to recover from an error condition. If it is not reasonable
          to recover from an error condition, the whole runtime system is
          terminated. For example, if a create mutex operation fails, an error
          code is returned, but if a lock operation on a mutex fails, the
          whole runtime system is terminated.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that there is no "condition variable wait with time-out" in
          the Erlang driver thread API. This because of issues with
          <fo:inline font-family="monospace">pthread_cond_timedwait</fo:inline>. When the system clock suddenly
          is changed, it is not always guaranteed that you will wake up from
          the call as expected. An Erlang runtime system must be able to
          cope with sudden changes of the system clock. Therefore, we have
          omitted it from the Erlang driver thread API. In the Erlang driver
          case, time-outs can and are to be handled with the timer functionality
          of the Erlang driver API.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order for the Erlang driver thread API to function, thread
          support must be enabled in the runtime system. An Erlang driver
          can check if thread support is enabled by use of
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_system_info</fo:inline></fo:inline>.
          Notice that some functions in the Erlang driver API are thread-safe
          only when the runtime system has SMP support, also this
          information can be retrieved through
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_system_info</fo:inline></fo:inline>.
          Also notice that many functions in the Erlang driver API are
          <fo:inline font-weight="bold">not</fo:inline> thread-safe, regardless of whether SMP support is
          enabled or not. If a function is not documented as thread-safe, it
          is <fo:inline font-weight="bold">not</fo:inline> thread-safe.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When executing in an emulator thread, it is
            <fo:inline font-weight="bold">very important</fo:inline> that you unlock <fo:inline font-weight="bold">all</fo:inline> locks you
            have locked before letting the thread out of your control;
            otherwise you are <fo:inline font-weight="bold">very likely</fo:inline> to deadlock the whole
            emulator.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you need to use thread-specific data in an emulator
            thread, only have the thread-specific data set while the thread is
            under your control, and clear the thread-specific data before
            you let the thread out of your control.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the future, debug functionality will probably be
          integrated with the Erlang driver thread API. All functions
          that create entities take a <fo:inline font-family="monospace">name</fo:inline> argument. Currently
          the <fo:inline font-family="monospace">name</fo:inline> argument is unused, but it will be used when
          the debug functionality is implemented. If you name all
          entities created well, the debug functionality will be able
          to give you better error reports.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Adding/removing drivers</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A driver can add and later remove drivers.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Monitoring processes</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A driver can monitor a process that does not own a port.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Version management</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Version management is enabled for drivers that have set the
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">extended_marker</fo:inline></fo:inline> field of their
          <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_entry</fo:inline></fo:inline>
          to <fo:inline font-family="monospace">ERL_DRV_EXTENDED_MARKER</fo:inline>. <fo:inline font-family="monospace">erl_driver.h</fo:inline> defines:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_DRV_EXTENDED_MARKER</fo:inline></fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_DRV_EXTENDED_MAJOR_VERSION</fo:inline>, which is incremented when
              driver incompatible changes are made to the Erlang runtime
              system. Normally it suffices to recompile drivers when
              <fo:inline font-family="monospace">ERL_DRV_EXTENDED_MAJOR_VERSION</fo:inline> has changed, but it
              can, under rare circumstances, mean that drivers must
              be slightly modified. If so, this will of course be
              documented.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_DRV_EXTENDED_MINOR_VERSION</fo:inline>, which is incremented when
              new features are added. The runtime system uses the minor version
              of the driver to determine what features to use.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime system normally refuses to load a driver if the major
          versions differ, or if the major versions are equal and the
          minor version used by the driver is greater than the one used
          by the runtime system. Old drivers with lower major versions
          are however allowed after a bump of the major version during
          a transition period of two major releases. Such old drivers can,
          however, fail if deprecated features are used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The emulator refuses to load a driver that does not use
          the extended driver interface, to allow for 64-bit capable drivers,
          as incompatible type changes for the callbacks
          <fo:inline font-style="italic"><fo:inline font-family="monospace">output</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">control</fo:inline></fo:inline>, and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">call</fo:inline></fo:inline>
          were introduced in Erlang/OTP R15B. A driver written
          with the old types would compile with warnings and when
          called return garbage sizes to the emulator, causing it
          to read random memory and create huge incorrect result blobs.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Therefore it is not enough to only recompile drivers written with
          version management for pre R15B types; the types must be changed
          in the driver suggesting other rewrites, especially regarding size
          variables. <fo:inline font-weight="bold">Investigate all warnings when recompiling.</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, the API driver functions <fo:inline font-family="monospace">driver_output*</fo:inline> and
          <fo:inline font-family="monospace">driver_vec_to_buf</fo:inline>, <fo:inline font-family="monospace">driver_alloc/realloc*</fo:inline>, and the
          <fo:inline font-family="monospace">driver_*</fo:inline> queue functions were changed to have
          larger length arguments and return values. This is a
          lesser problem, as code that passes smaller types
          gets them auto-converted in the calls, and as long as
          the driver does not handle sizes that overflow an <fo:inline font-family="monospace">int</fo:inline>,
          all will work as before.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Time measurement</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Support for time measurement in drivers:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
            <fo:inline font-family="monospace">ErlDrvTime</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
            <fo:inline font-family="monospace">ErlDrvTimeUnit</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
            <fo:inline font-family="monospace">erl_drv_monotonic_time</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
            <fo:inline font-family="monospace">erl_drv_time_offset</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
            <fo:inline font-family="monospace">erl_drv_convert_time_unit</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp18615872" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Rewrites for 64-Bit Driver Interface</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ERTS 5.9 introduced two new integer types,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlDrvSizeT</fo:inline></fo:inline> and
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlDrvSSizeT</fo:inline></fo:inline>,
      which can hold 64-bit sizes if necessary.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To not update a driver and only recompile, it probably works
      when building for a 32-bit machine creating a false sense of security.
      Hopefully that will generate many important warnings.
      But when recompiling the same driver later on for a 64-bit machine,
      there <fo:inline font-weight="bold">will</fo:inline> be warnings and almost certainly crashes.
      So it is a <fo:inline font-weight="bold">bad</fo:inline> idea to postpone updating the driver and
      not fixing the warnings.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When recompiling with <fo:inline font-family="monospace">gcc</fo:inline>, use flag <fo:inline font-family="monospace">-Wstrict-prototypes</fo:inline>
      to get better warnings. Try to find a similar flag if you use
      another compiler.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is a checklist for rewriting a pre ERTS 5.9 driver,
      most important first:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">Return types for driver callbacks</fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Rrewrite driver callback
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">control</fo:inline></fo:inline>
	  to use return type <fo:inline font-family="monospace">ErlDrvSSizeT</fo:inline> instead of <fo:inline font-family="monospace">int</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Rewrite driver callback
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">call</fo:inline></fo:inline>
	  to use return type <fo:inline font-family="monospace">ErlDrvSSizeT</fo:inline> instead of <fo:inline font-family="monospace">int</fo:inline>.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These changes are essential not to crash the emulator
	    or worse cause malfunction.
	    Without them a driver can return garbage in the high 32 bits
	    to the emulator, causing it to build a huge result from random
	    bytes, either crashing on memory allocation or succeeding with
	    a random result from the driver call.</fo:block>
	</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Arguments to driver callbacks</fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Driver callback
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">output</fo:inline></fo:inline>
	  now gets <fo:inline font-family="monospace">ErlDrvSizeT</fo:inline> as 3rd argument instead
	  of previously <fo:inline font-family="monospace">int</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Driver callback
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">control</fo:inline></fo:inline>
	  now gets <fo:inline font-family="monospace">ErlDrvSizeT</fo:inline> as 4th and 6th arguments instead
	  of previously <fo:inline font-family="monospace">int</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Driver callback
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">call</fo:inline></fo:inline>
	  now gets <fo:inline font-family="monospace">ErlDrvSizeT</fo:inline> as 4th and 6th arguments instead
	  of previously <fo:inline font-family="monospace">int</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sane compiler's calling conventions probably make these changes
	  necessary only for a driver to handle data chunks that require
	  64-bit size fields (mostly larger than 2 GB, as that is what
	  an <fo:inline font-family="monospace">int</fo:inline> of 32 bits can hold). But it is possible to think
	  of non-sane calling conventions that would make the driver
	  callbacks mix up the arguments causing malfunction.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The argument type change is from signed to unsigned. This
	    can cause problems for, for example, loop termination conditions or
	    error conditions if you only change the types all over the place.
          </fo:block>
	</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Larger <fo:inline font-family="monospace">size</fo:inline> field in <fo:inline font-family="monospace">ErlIOVec</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">size</fo:inline> field in
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlIOVec</fo:inline></fo:inline>
	  has been changed to <fo:inline font-family="monospace">ErlDrvSizeT</fo:inline> from <fo:inline font-family="monospace">int</fo:inline>.
	  Check all code that use that field.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Automatic type-casting probably makes these changes necessary only
	  for a driver that encounters sizes &gt; 32 bits.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">size</fo:inline> field changed from signed to unsigned. This
	    can cause problems for, for example, loop termination conditions or
	    error conditions if you only change the types all over the place.
          </fo:block>
	</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Arguments and return values in the driver API</fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Many driver API functions have changed argument type
	  and/or return value to <fo:inline font-family="monospace">ErlDrvSizeT</fo:inline> from mostly <fo:inline font-family="monospace">int</fo:inline>.
	  Automatic type-casting probably makes these changes necessary only
	  for a driver that encounters sizes &gt; 32 bits.</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_output</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">3rd argument</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_output2</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">3rd and 5th arguments</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_output_binary</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">3rd, 5th, and 6th arguments</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_outputv</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">3rd and 5th arguments</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_vec_to_buf</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">3rd argument and return value</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_alloc</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">1st argument</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_realloc</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">2nd argument</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_alloc_binary</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">1st argument</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_realloc_binary</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">2nd argument</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_enq</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">3rd argument</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_pushq</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">3rd argument</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_deq</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">2nd argument and return value</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_sizeq</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">Return value</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_enq_bin</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">3rd and 4th arguments</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_pushq_bin</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">3rd and 4th arguments</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_enqv</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">3rd argument</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_pushqv</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">3rd argument</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_peekqv</fo:inline></fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">Return value</fo:block></fo:block-container>
	</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a change from signed to unsigned. This can cause
	    problems for, for example, loop termination conditions and error
	    conditions if you only change the types all over the place.</fo:block>
	</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp18678480" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvSizeT</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An unsigned integer type to be used as <fo:inline font-family="monospace">size_t</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvSSizeT</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A signed integer type, the size of <fo:inline font-family="monospace">ErlDrvSizeT</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvSysInfo</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef struct ErlDrvSysInfo {
   int driver_major_version;
   int driver_minor_version;
   char *erts_version;
   char *otp_release;
   int thread_support;
   int smp_support;
   int async_threads;
   int scheduler_threads;
   int nif_major_version;
   int nif_minor_version;
   int dirty_scheduler_support;
} ErlDrvSysInfo;</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ErlDrvSysInfo</fo:inline> structure is used for storage of
          information about the Erlang runtime system.
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_system_info</fo:inline></fo:inline>
          writes the system information when passed a reference to
          a <fo:inline font-family="monospace">ErlDrvSysInfo</fo:inline> structure. The fields in the structure
          are as follows:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">driver_major_version</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of <fo:inline font-style="italic">
              <fo:inline font-family="monospace">ERL_DRV_EXTENDED_MAJOR_VERSION</fo:inline></fo:inline>
              when the runtime system was compiled. This value is the same
              as the value of <fo:inline font-style="italic">
              <fo:inline font-family="monospace">ERL_DRV_EXTENDED_MAJOR_VERSION</fo:inline></fo:inline>
              used when compiling the driver; otherwise the runtime system
              would have refused to load the driver.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">driver_minor_version</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of <fo:inline font-style="italic">
              <fo:inline font-family="monospace">ERL_DRV_EXTENDED_MINOR_VERSION</fo:inline></fo:inline>
              when the runtime system was compiled. This value can differ
              from the value of <fo:inline font-style="italic">
              <fo:inline font-family="monospace">ERL_DRV_EXTENDED_MINOR_VERSION</fo:inline></fo:inline>
              used when compiling the driver.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">erts_version</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A string containing the version number of the runtime system
              (the same as returned by
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(version)</fo:inline></fo:inline>).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">otp_release</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A string containing the OTP release number
              (the same as returned by
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(otp_release)</fo:inline></fo:inline>).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">thread_support</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A value <fo:inline font-family="monospace">!= 0</fo:inline> if the runtime system has thread support;
              otherwise <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">smp_support</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A value <fo:inline font-family="monospace">!= 0</fo:inline> if the runtime system has SMP support;
              otherwise <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">async_threads</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of async threads in the async thread pool used by
              <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_async</fo:inline></fo:inline>
              (the same as returned by
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(thread_pool_size)</fo:inline></fo:inline>).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">scheduler_threads</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of scheduler threads used by the runtime system
              (the same as returned by
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_info(schedulers)</fo:inline></fo:inline>).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nif_major_version</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of <fo:inline font-family="monospace">ERL_NIF_MAJOR_VERSION</fo:inline> when the runtime
              system was compiled.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nif_minor_version</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of <fo:inline font-family="monospace">ERL_NIF_MINOR_VERSION</fo:inline> when the runtime
                system was compiled.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dirty_scheduler_support</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A value <fo:inline font-family="monospace">!= 0</fo:inline> if the runtime system has support for dirty
              scheduler threads; otherwise <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvBinary</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef struct ErlDrvBinary {
   ErlDrvSint orig_size;
   char orig_bytes[];
} ErlDrvBinary;</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ErlDrvBinary</fo:inline> structure is a binary, as sent
          between the emulator and the driver. All binaries are
          reference counted; when <fo:inline font-family="monospace">driver_binary_free</fo:inline> is called,
          the reference count is decremented, when it reaches zero,
          the binary is deallocated. <fo:inline font-family="monospace">orig_size</fo:inline> is the binary size
          and <fo:inline font-family="monospace">orig_bytes</fo:inline> is the buffer.
          <fo:inline font-family="monospace">ErlDrvBinary</fo:inline> has not a fixed size, its size is
          <fo:inline font-family="monospace">orig_size + 2 * sizeof(int)</fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">refc</fo:inline> field has been removed. The reference count of
            an <fo:inline font-family="monospace">ErlDrvBinary</fo:inline> is now stored elsewhere. The
            reference count of an <fo:inline font-family="monospace">ErlDrvBinary</fo:inline> can be accessed through
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_binary_get_refc</fo:inline></fo:inline>,
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_binary_inc_refc</fo:inline></fo:inline>, and
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_binary_dec_refc</fo:inline></fo:inline>.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some driver calls, such as <fo:inline font-family="monospace">driver_enq_binary</fo:inline>,
          increment the driver reference count, and others, such as
          <fo:inline font-family="monospace">driver_deq</fo:inline> decrement it.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using a driver binary instead of a normal buffer is often
          faster, as the emulator needs not to copy the data,
          only the pointer is used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A driver binary allocated in the driver, with
          <fo:inline font-family="monospace">driver_alloc_binary</fo:inline>, is to be freed in the driver
          (unless otherwise stated)
          with <fo:inline font-family="monospace">driver_free_binary</fo:inline>. (Notice that this does not
          necessarily deallocate it, if the driver is still referred
          in the emulator, the ref-count will not go to zero.)</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Driver binaries are used in the <fo:inline font-family="monospace">driver_output2</fo:inline> and
          <fo:inline font-family="monospace">driver_outputv</fo:inline> calls, and in the queue. Also the
          driver callback <fo:inline font-style="italic">
          <fo:inline font-family="monospace">outputv</fo:inline></fo:inline> uses driver binaries.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the driver for some reason wants to keep a
          driver binary around, for example in a static variable, the
          reference count is to be incremented, and the binary can later
          be freed in the <fo:inline font-style="italic">
          <fo:inline font-family="monospace">stop</fo:inline></fo:inline> callback, with <fo:inline font-family="monospace">driver_free_binary</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that as a driver binary is shared by the driver and
          the emulator. A binary received from the emulator or sent to
          the emulator must not be changed by the driver.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since ERTS 5.5 (Erlang/OTP R11B), <fo:inline font-family="monospace">orig_bytes</fo:inline> is
          guaranteed to be properly aligned for storage of an array of
          doubles (usually 8-byte aligned).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvData</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A handle to driver-specific data,
          passed to the driver callbacks. It is a pointer, and is
          most often type cast to a specific pointer in the driver.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">SysIOVec</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A system I/O vector, as used by <fo:inline font-family="monospace">writev</fo:inline> on
          Unix and <fo:inline font-family="monospace">WSASend</fo:inline> on Win32. It is used in
          <fo:inline font-family="monospace">ErlIOVec</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlIOVec</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef struct ErlIOVec {
  int vsize;
  ErlDrvSizeT size;
  SysIOVec* iov;
  ErlDrvBinary** binv;
} ErlIOVec;</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The I/O vector used by the emulator and drivers is a list
          of binaries, with a <fo:inline font-family="monospace">SysIOVec</fo:inline> pointing to the buffers
          of the binaries. It is used in <fo:inline font-family="monospace">driver_outputv</fo:inline> and the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">outputv</fo:inline></fo:inline>
          driver callback. Also, the driver queue is an
          <fo:inline font-family="monospace">ErlIOVec</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvMonitor</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a driver creates a monitor for a process, a
          <fo:inline font-family="monospace">ErlDrvMonitor</fo:inline> is filled in. This is an opaque
          data type that can be assigned to, but not compared without
          using the supplied compare function (that is, it behaves like
          a struct).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver writer is to provide the memory for storing the
          monitor when calling <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_monitor_process</fo:inline></fo:inline>. The
          address of the data is not stored outside of the driver, so
          <fo:inline font-family="monospace">ErlDrvMonitor</fo:inline> can be used as any other data, it
          can be copied, moved in memory, forgotten, and so on.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvNowData</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ErlDrvNowData</fo:inline> structure holds a time stamp
          consisting of three values measured from some arbitrary
          point in the past. The three structure members are:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">megasecs</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The number of whole megaseconds elapsed since the arbitrary
            point in time</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">secs</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The number of whole seconds elapsed since the arbitrary
            point in time</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">microsecs</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The number of whole microseconds elapsed since the arbitrary
            point in time</fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvPDL</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If certain port-specific data must be accessed from other
          threads than those calling the driver callbacks, a port data lock
          can be used to synchronize the operations on the data.
          Currently, the only port-specific data that the emulator
          associates with the port data lock is the driver queue.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally a driver instance has no port data lock. If
          the driver instance wants to use a port data lock, it must
          create the port data lock by calling
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_pdl_create</fo:inline></fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Once the port data lock has been created, every
            access to data associated with the port data lock must be done
            while the port data lock is locked. The port data lock is
            locked and unlocked by
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_pdl_lock</fo:inline></fo:inline>, and
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_pdl_unlock</fo:inline></fo:inline>, respectively.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A port data lock is reference counted, and when the reference
          count reaches zero, it is destroyed. The emulator at
          least increments the reference count once when the lock is
          created and decrements it once the port associated with
          the lock terminates. The emulator also increments the
          reference count when an async job is enqueued and decrements
          it when an async job has been invoked.
          Also, the driver is responsible for ensuring that
          the reference count does not reach zero before the last use
          of the lock by the driver has been made. The reference count
          can be read, incremented, and decremented by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_pdl_get_refc</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_pdl_inc_refc</fo:inline></fo:inline>, and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_pdl_dec_refc</fo:inline></fo:inline>, respectively.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvTid</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thread identifier.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
           <fo:inline font-family="monospace">erl_drv_thread_create</fo:inline></fo:inline>,
	   <fo:inline font-style="italic">
           <fo:inline font-family="monospace">erl_drv_thread_exit</fo:inline></fo:inline>,
	   <fo:inline font-style="italic">
           <fo:inline font-family="monospace">erl_drv_thread_join</fo:inline></fo:inline>,
	   <fo:inline font-style="italic">
           <fo:inline font-family="monospace">erl_drv_thread_self</fo:inline></fo:inline>, and
	   <fo:inline font-style="italic">
           <fo:inline font-family="monospace">erl_drv_equal_tids</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvThreadOpts</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
int suggested_stack_size;</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thread options structure passed to
	  <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erl_drv_thread_create</fo:inline></fo:inline>.
	    The following fields exists:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">suggested_stack_size</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">A suggestion, in kilowords, on how large a stack to use.
            A value &lt; 0 means default size.
	  </fo:block></fo:block-container>
        </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_thread_opts_create</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_thread_opts_destroy</fo:inline></fo:inline>, and
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_thread_create</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvMutex</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mutual exclusion lock. Used for synchronizing access to shared data.
	   Only one thread at a time can lock a mutex.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_mutex_create</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_mutex_destroy</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_mutex_lock</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_mutex_trylock</fo:inline></fo:inline>, and
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_mutex_unlock</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvCond</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Condition variable. Used when threads must wait for a specific
	  condition to appear before continuing execution. Condition variables
	  must be used with associated mutexes.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_cond_create</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_cond_destroy</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_cond_signal</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_cond_broadcast</fo:inline></fo:inline>, and
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_cond_wait</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvRWLock</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read/write lock. Used to allow multiple threads to read shared data
	  while only allowing one thread to write the same data. Multiple
	  threads can read lock an rwlock at the same time, while only
	  one thread can read/write lock an rwlock at a time.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_rwlock_create</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_rwlock_destroy</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_rwlock_rlock</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_rwlock_tryrlock</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_rwlock_runlock</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_rwlock_rwlock</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_rwlock_tryrwlock</fo:inline></fo:inline>, and
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_rwlock_rwunlock</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvTSDKey</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Key that thread-specific data can be associated with.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_tsd_key_create</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_tsd_key_destroy</fo:inline></fo:inline>,
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_tsd_set</fo:inline></fo:inline>, and
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erl_drv_tsd_get</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvTime</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A signed 64-bit integer type for time representation.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvTimeUnit</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An enumeration of time units supported by the driver API:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_DRV_SEC</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">Seconds</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_DRV_MSEC</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">Milliseconds</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_DRV_USEC</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">Microseconds</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_DRV_NSEC</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">Nanoseconds</fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18828864">void add_driver_entry(ErlDrvEntry
        *de)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a driver entry to the list of drivers known by Erlang.
          The <fo:inline font-style="italic"><fo:inline font-family="monospace">init</fo:inline></fo:inline>
          function of parameter <fo:inline font-family="monospace">de</fo:inline> is called.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To use this function for adding drivers residing in
            dynamically loaded code is dangerous. If the driver code
            for the added driver resides in the same dynamically
            loaded module (that is, <fo:inline font-family="monospace">.so</fo:inline> file) as a normal
            dynamically loaded driver (loaded with the <fo:inline font-family="monospace">erl_ddll</fo:inline>
            interface), the caller is to call
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_lock_driver</fo:inline></fo:inline> before
            adding driver entries.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Use of this function is generally deprecated.</fo:inline></fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18837408">void *driver_alloc(ErlDrvSizeT size)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allocates a memory block of the size specified
          in <fo:inline font-family="monospace">size</fo:inline>, and returns it. This fails only on out of
          memory, in which case <fo:inline font-family="monospace">NULL</fo:inline> is returned. (This is most
          often a wrapper for <fo:inline font-family="monospace">malloc</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Memory allocated must be explicitly freed with a corresponding
          call to <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_free</fo:inline></fo:inline>
          (unless otherwise stated).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18844144">ErlDrvBinary *driver_alloc_binary(ErlDrvSizeT size)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allocates a driver binary with a memory block
          of at least <fo:inline font-family="monospace">size</fo:inline> bytes, and returns a pointer to it,
          or <fo:inline font-family="monospace">NULL</fo:inline> on failure (out of memory). When a driver binary has
          been sent to the emulator, it must not be changed. Every
          allocated binary is to be freed by a corresponding call to
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_free_binary</fo:inline></fo:inline> (unless otherwise stated).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that a driver binary has an internal reference counter.
          This means that calling <fo:inline font-family="monospace">driver_free_binary</fo:inline>, it may not
          actually dispose of it. If it is sent to the emulator, it can
          be referenced there.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver binary has a field, <fo:inline font-family="monospace">orig_bytes</fo:inline>, which
          marks the start of the data in the binary.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18852080">long driver_async(ErlDrvPort port, unsigned
        int* key, void (*async_invoke)(void*), void* async_data, void
        (*async_free)(void*))</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs an asynchronous call. The function
          <fo:inline font-family="monospace">async_invoke</fo:inline> is invoked in a thread separate from the
          emulator thread. This enables the driver to perform
          time-consuming, blocking operations without blocking the
          emulator.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The async thread pool size can be set with command-line argument
          <fo:inline font-style="italic"><fo:inline font-family="monospace">+A</fo:inline></fo:inline>
          in <fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>.
          If an async thread pool is unavailable, the call is made
          synchronously in the thread calling <fo:inline font-family="monospace">driver_async</fo:inline>. The
          current number of async threads in the async thread pool can be
          retrieved through <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_system_info</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a thread pool is available, a thread is used.
          If argument <fo:inline font-family="monospace">key</fo:inline> is <fo:inline font-family="monospace">NULL</fo:inline>, the threads from the
          pool are used in a round-robin way, each call to
          <fo:inline font-family="monospace">driver_async</fo:inline> uses the next thread in the pool. With
          argument <fo:inline font-family="monospace">key</fo:inline> set, this behavior is changed. The two
          same values of <fo:inline font-family="monospace">*key</fo:inline> always get the same thread.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To ensure that a driver instance always uses the same
          thread, the following call can be used:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
unsigned int myKey = driver_async_port_key(myPort);

r = driver_async(myPort, &amp;myKey, myData, myFunc);    </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is enough to initialize <fo:inline font-family="monospace">myKey</fo:inline> once for each
          driver instance.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a thread is already working, the calls are
          queued up and executed in order. Using the same thread for
          each driver instance ensures that the calls are made in sequence.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">async_data</fo:inline> is the argument to the functions
          <fo:inline font-family="monospace">async_invoke</fo:inline> and <fo:inline font-family="monospace">async_free</fo:inline>. It is typically a
          pointer to a structure containing a pipe or event that
          can be used to signal that the async operation completed.
          The data is to be freed in <fo:inline font-family="monospace">async_free</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the async operation is done,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">ready_async</fo:inline></fo:inline> driver
          entry function is called. If <fo:inline font-family="monospace">ready_async</fo:inline> is <fo:inline font-family="monospace">NULL</fo:inline> in
          the driver entry, the <fo:inline font-family="monospace">async_free</fo:inline> function is called
          instead.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">-1</fo:inline> if the <fo:inline font-family="monospace">driver_async</fo:inline> call
          fails.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from ERTS 5.5.4.3 the default stack size for
            threads in the async-thread pool is 16 kilowords,
            that is, 64 kilobyte on 32-bit architectures.
            This small default size has been chosen because the
            amount of async-threads can be quite large. The
            default stack size is enough for drivers delivered
            with Erlang/OTP, but is possibly not sufficiently large
            for other dynamically linked-in drivers that use the
            <fo:inline font-family="monospace">driver_async</fo:inline> functionality. A suggested stack size
            for threads in the async-thread pool can be configured
            through command-line argument
            <fo:inline font-style="italic"><fo:inline font-family="monospace">+a</fo:inline></fo:inline>
            in <fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18876208">unsigned int driver_async_port_key(ErlDrvPort
        port)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calculates a key for later use in <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_async</fo:inline></fo:inline>. The keys are
          evenly distributed so that a fair mapping between port IDs
          and async thread IDs is achieved.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before Erlang/OTP R16, the port ID could be used as a key
            with proper casting, but after the rewrite of the port
            subsystem, this is no longer the case. With this function, you
            can achieve the same distribution based on port IDs as before
            Erlang/OTP R16.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18881808">long driver_binary_dec_refc(ErlDrvBinary *bin)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decrements the reference count on <fo:inline font-family="monospace">bin</fo:inline> and returns
          the reference count reached after the decrement.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reference count of driver binary is normally to be decremented
            by calling <fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_free_binary</fo:inline></fo:inline>.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">driver_binary_dec_refc</fo:inline> does <fo:inline font-weight="bold">not</fo:inline> free
            the binary if the reference count reaches zero. <fo:inline font-weight="bold">Only</fo:inline>
            use <fo:inline font-family="monospace">driver_binary_dec_refc</fo:inline> when you are sure
            <fo:inline font-weight="bold">not</fo:inline> to reach a reference count of zero.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18890816">long driver_binary_get_refc(ErlDrvBinary *bin)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current reference count on <fo:inline font-family="monospace">bin</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18895184">long driver_binary_inc_refc(ErlDrvBinary *bin)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Increments the reference count on <fo:inline font-family="monospace">bin</fo:inline> and returns
          the reference count reached after the increment.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18899440">ErlDrvTermData driver_caller(ErlDrvPort
        port)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process ID of the process that
          made the current call to the driver. The process ID can be used with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_send_term</fo:inline></fo:inline>
          to send back data to the caller.
          <fo:inline font-family="monospace">driver_caller</fo:inline> only returns valid data
          when currently executing in one of the following driver callbacks:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">start</fo:inline></fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Called from <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:open_port/2</fo:inline></fo:inline>.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">output</fo:inline></fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Called from <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:send/2</fo:inline></fo:inline> and
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:port_command/2</fo:inline></fo:inline>.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">outputv</fo:inline></fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Called from <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:send/2</fo:inline></fo:inline> and
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:port_command/2</fo:inline></fo:inline>.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">control</fo:inline></fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Called from <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:port_control/3</fo:inline></fo:inline>.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
            <fo:inline font-family="monospace">call</fo:inline></fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Called from <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:port_call/3</fo:inline></fo:inline>.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this function is <fo:inline font-weight="bold">not</fo:inline> thread-safe, not
          even when the emulator with SMP support is used.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18920784">int driver_cancel_timer(ErlDrvPort port)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Cancels a timer set with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_set_timer</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18925952">int driver_compare_monitors(const ErlDrvMonitor
        *monitor1, const ErlDrvMonitor *monitor2)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compares two <fo:inline font-family="monospace">ErlDrvMonitor</fo:inline>s.
          Can also be used to imply some artificial order on monitors,
          for whatever reason.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> if <fo:inline font-family="monospace">monitor1</fo:inline> and <fo:inline font-family="monospace">monitor2</fo:inline> are equal,
          &lt; <fo:inline font-family="monospace">0</fo:inline> if <fo:inline font-family="monospace">monitor1</fo:inline> &lt; <fo:inline font-family="monospace">monitor2</fo:inline>, and
          &gt; <fo:inline font-family="monospace">0</fo:inline> if <fo:inline font-family="monospace">monitor1</fo:inline> &gt; <fo:inline font-family="monospace">monitor2</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18934288">ErlDrvTermData driver_connected(ErlDrvPort
        port)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the port owner process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this function is <fo:inline font-weight="bold">not</fo:inline> thread-safe, not
          even when the emulator with SMP support is used.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18938544">ErlDrvPort driver_create_port(ErlDrvPort port,
        ErlDrvTermData owner_pid, char* name,
        ErlDrvData drv_data)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a new port executing the same driver
          code as the port creating the new port.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">port</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The port handle of the port (driver instance) creating
            the new port.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">owner_pid</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The process ID of the Erlang process to become
            owner of the new port. This process will be linked
            to the new port. You usually want to use
            <fo:inline font-family="monospace">driver_caller(port)</fo:inline> as <fo:inline font-family="monospace">owner_pid</fo:inline>.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">name</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The port name of the new port. You usually want to
            use the same port name as the driver name
            (<fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_name</fo:inline></fo:inline> field of the
            <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_entry</fo:inline></fo:inline>).
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">drv_data</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The driver-defined handle that is passed in later
            calls to driver callbacks. Notice that the
            <fo:inline font-style="italic">driver start
            callback</fo:inline> is not called for this new driver instance.
            The driver-defined handle is normally created in the
            <fo:inline font-style="italic">driver start callback</fo:inline>
            when a port is created through
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:open_port/2</fo:inline></fo:inline>.
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The caller of <fo:inline font-family="monospace">driver_create_port</fo:inline> is allowed to
          manipulate the newly created port when <fo:inline font-family="monospace">driver_create_port</fo:inline>
          has returned. When
          <fo:inline font-style="italic">port level locking</fo:inline>
          is used, the creating port is only allowed to
          manipulate the newly created port until the current driver
          callback, which was called by the emulator, returns.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18954080">int driver_demonitor_process(ErlDrvPort port,
        const ErlDrvMonitor *monitor)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Cancels a monitor created earlier.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> if a monitor was removed and &gt; 0 if the monitor
          no longer exists.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18958384">ErlDrvSizeT driver_deq(ErlDrvPort port,
        ErlDrvSizeT size)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dequeues data by moving the head pointer
          forward in the driver queue by <fo:inline font-family="monospace">size</fo:inline> bytes. The data
          in the queue is deallocated.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of bytes remaining in the queue on success,
          otherwise <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called from any thread if a
          <fo:inline font-style="italic">port data lock</fo:inline>
          associated with the <fo:inline font-family="monospace">port</fo:inline> is locked by the calling
          thread during the call.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18964896">int driver_enq(ErlDrvPort port, char* buf,
        ErlDrvSizeT len)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enqueues data in the driver queue. The data in
          <fo:inline font-family="monospace">buf</fo:inline> is copied (<fo:inline font-family="monospace">len</fo:inline> bytes) and placed at the
          end of the driver queue. The driver queue is normally used
          in a FIFO way.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver queue is available to queue output from the
          emulator to the driver (data from the driver to the emulator
          is queued by the emulator in normal Erlang message
          queues). This can be useful if the driver must wait for
          slow devices, and so on, and wants to yield back to the
          emulator. The driver queue is implemented as an <fo:inline font-family="monospace">ErlIOVec</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the queue contains data, the driver does not close until
          the queue is empty.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called from any thread if a
          <fo:inline font-style="italic">port data lock</fo:inline>
          associated with the <fo:inline font-family="monospace">port</fo:inline> is locked by the calling
          thread during the call.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18973632">int driver_enq_bin(ErlDrvPort port,
        ErlDrvBinary *bin, ErlDrvSizeT offset, ErlDrvSizeT len)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enqueues a driver binary in the driver
          queue. The data in <fo:inline font-family="monospace">bin</fo:inline> at <fo:inline font-family="monospace">offset</fo:inline> with length
          <fo:inline font-family="monospace">len</fo:inline> is placed at the end of the queue. This function
          is most often faster than
          <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_enq</fo:inline></fo:inline>,
          because no data must be copied.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called from any thread if a
          <fo:inline font-style="italic">port data lock</fo:inline>
          associated with the <fo:inline font-family="monospace">port</fo:inline> is locked by the calling
          thread during the call.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18982080">int driver_enqv(ErlDrvPort port, ErlIOVec *ev,
        ErlDrvSizeT skip)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enqueues the data in <fo:inline font-family="monospace">ev</fo:inline>, skipping the
          first <fo:inline font-family="monospace">skip</fo:inline> bytes of it, at the end of the driver
          queue. It is faster than
          <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_enq</fo:inline></fo:inline>,
          because no data must be copied.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called from any thread if a
          <fo:inline font-style="italic">port data lock</fo:inline>
          associated with the <fo:inline font-family="monospace">port</fo:inline> is locked by the calling
          thread during the call.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18989840">int driver_failure(ErlDrvPort port, int
        error)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18990736">int driver_failure_atom(ErlDrvPort port, char
        *string)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp18991648">int driver_failure_posix(ErlDrvPort port, int
        error)</fo:block></fo:block>
        
        
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Signals to Erlang that the driver has
          encountered an error and is to be closed. The port is
          closed and the tuple <fo:inline font-family="monospace">{'EXIT', error, Err}</fo:inline> is sent to
          the port owner process, where error is an error atom
          (<fo:inline font-family="monospace">driver_failure_atom</fo:inline> and
          <fo:inline font-family="monospace">driver_failure_posix</fo:inline>) or an integer
          (<fo:inline font-family="monospace">driver_failure</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver is to fail only when in severe error situations,
          when the driver cannot possibly keep open, for example,
          buffer allocation gets out of memory. For normal errors
          it is more appropriate to send error codes with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_output</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19000448">int driver_failure_eof(ErlDrvPort
        port)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Signals to Erlang that the driver has
          encountered an EOF and is to be closed, unless the port was
          opened with option <fo:inline font-family="monospace">eof</fo:inline>, in which case <fo:inline font-family="monospace">eof</fo:inline> is sent
          to the port. Otherwise the port is closed and an
          <fo:inline font-family="monospace">'EXIT'</fo:inline> message is sent to the port owner process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19006160">void driver_free(void *ptr)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Frees the memory pointed to by <fo:inline font-family="monospace">ptr</fo:inline>. The
          memory is to have been allocated with
          <fo:inline font-family="monospace">driver_alloc</fo:inline>. All allocated memory is to be
          deallocated, only once. There is no garbage collection in
          drivers.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19011072">void driver_free_binary(ErlDrvBinary *bin)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Frees a driver binary <fo:inline font-family="monospace">bin</fo:inline>, allocated previously with
        <fo:inline font-style="italic">
        <fo:inline font-family="monospace">driver_alloc_binary</fo:inline></fo:inline>. As binaries
          in Erlang are reference counted, the binary can still be around.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19016480">ErlDrvTermData driver_get_monitored_process(ErlDrvPort port, const
        ErlDrvMonitor *monitor)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process ID associated with a living
          monitor. It can be used in the
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">process_exit</fo:inline></fo:inline> callback to
          get the process identification for the exiting process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">driver_term_nil</fo:inline> if the monitor no longer exists.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19022032">int driver_get_now(ErlDrvNowData *now)</fo:block></fo:block>
        
	<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">This function is deprecated. Do not use it.</fo:inline> Use
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erl_drv_monotonic_time</fo:inline></fo:inline> (perhaps in combination with
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erl_drv_time_offset</fo:inline></fo:inline>) instead.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads a time stamp into the memory pointed to by
          parameter <fo:inline font-family="monospace">now</fo:inline>. For information about specific fields, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlDrvNowData</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">0</fo:inline>, unless the <fo:inline font-family="monospace">now</fo:inline> pointer is
          invalid, in which case it is &lt; <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19031744">int driver_lock_driver(ErlDrvPort
        port)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Locks the driver used by the port <fo:inline font-family="monospace">port</fo:inline>
          in memory for the rest of the emulator process'
          lifetime. After this call, the driver behaves as one of Erlang's
          statically linked-in drivers.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19035632">ErlDrvTermData driver_mk_atom(char*
        string)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an atom given a name
          <fo:inline font-family="monospace">string</fo:inline>. The atom is created and does not change, so the
          return value can be saved and reused, which is faster than
          looking up the atom several times.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this function is <fo:inline font-weight="bold">not</fo:inline> thread-safe, not
          even when the emulator with SMP support is used.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19040464">ErlDrvTermData driver_mk_port(ErlDrvPort
        port)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts a port handle to the Erlang term format, usable in
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_output_term</fo:inline></fo:inline> and 
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_send_term</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this function is <fo:inline font-weight="bold">not</fo:inline> thread-safe, not
          even when the emulator with SMP support is used.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19046752">int driver_monitor_process(ErlDrvPort port,
        ErlDrvTermData process, ErlDrvMonitor *monitor)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts monitoring a process from a driver. When a process is
          monitored, a process exit results in a call to the provided
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">process_exit</fo:inline></fo:inline> callback
          in the <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlDrvEntry</fo:inline></fo:inline>
          structure. The <fo:inline font-family="monospace">ErlDrvMonitor</fo:inline> structure is filled in, for later
          removal or compare.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">process</fo:inline> is to be the return value of an
          earlier call to <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_caller</fo:inline></fo:inline> or
          <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_connected</fo:inline></fo:inline>
          call.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, &lt; 0 if no callback is
          provided, and &gt; 0 if the process is no longer alive.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19056368">int driver_output(ErlDrvPort port, char *buf,
        ErlDrvSizeT len)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends data from the driver up to the emulator. The data is received
          as terms or binary data, depending on how the driver port was
          opened.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The data is queued in the port owner process' message
          queue. Notice that this does not yield to the emulator (as
          the driver and the emulator run in the same thread).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">buf</fo:inline> points to the data to send, and
          <fo:inline font-family="monospace">len</fo:inline> is the number of bytes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value for all output functions is <fo:inline font-family="monospace">0</fo:inline> for normal use.
          If the driver is used for distribution, it can fail and return
          <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19063264">int driver_output_binary(ErlDrvPort port, char
        *hbuf, ErlDrvSizeT hlen, ErlDrvBinary* bin, ErlDrvSizeT offset,
        ErlDrvSizeT len)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends data to a port owner process from a
          driver binary. It has a header buffer (<fo:inline font-family="monospace">hbuf</fo:inline>
          and <fo:inline font-family="monospace">hlen</fo:inline>) just like
          <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_output2</fo:inline></fo:inline>.
          Parameter <fo:inline font-family="monospace">hbuf</fo:inline> can be <fo:inline font-family="monospace">NULL</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">offset</fo:inline> is an offset into the binary and
          <fo:inline font-family="monospace">len</fo:inline> is the number of bytes to send.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Driver binaries are created with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_alloc_binary</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The data in the header is sent as a list and the binary as
          an Erlang binary in the tail of the list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, if <fo:inline font-family="monospace">hlen</fo:inline> is <fo:inline font-family="monospace">2</fo:inline>, the port owner process
          receives <fo:inline font-family="monospace">[H1, H2 | &lt;&lt;T&gt;&gt;]</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">0</fo:inline> for normal use.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that, using the binary syntax in Erlang, the driver
          application can match the header directly from the binary,
          so the header can be put in the binary, and <fo:inline font-family="monospace">hlen</fo:inline> can be set
          to <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19077024">int driver_output_term(ErlDrvPort port,
        ErlDrvTermData* term, int n)</fo:block></fo:block>
        
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">This function is deprecated.</fo:inline>
            Use <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erl_drv_output_term</fo:inline></fo:inline>instead.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameters <fo:inline font-family="monospace">term</fo:inline> and <fo:inline font-family="monospace">n</fo:inline> work as in
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_output_term</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this function is <fo:inline font-weight="bold">not</fo:inline> thread-safe, not
          even when the emulator with SMP support is used.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19085424">int driver_output2(ErlDrvPort port, char *hbuf,
        ErlDrvSizeT hlen, char *buf, ErlDrvSizeT len)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First sends <fo:inline font-family="monospace">hbuf</fo:inline>
          (length in <fo:inline font-family="monospace">hlen</fo:inline>) data as a list, regardless of port
          settings. Then sends <fo:inline font-family="monospace">buf</fo:inline> as a binary or list.
          For example, if <fo:inline font-family="monospace">hlen</fo:inline> is <fo:inline font-family="monospace">3</fo:inline>, the port owner process
          receives <fo:inline font-family="monospace">[H1, H2, H3 | T]</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The point of sending data as a list header, is to facilitate
          matching on the data received.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">0</fo:inline> for normal use.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19092976">int driver_outputv(ErlDrvPort port, char* hbuf,
        ErlDrvSizeT hlen, ErlIOVec *ev, ErlDrvSizeT skip)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends data from an I/O vector, <fo:inline font-family="monospace">ev</fo:inline>, to
          the port owner process. It has a header buffer (<fo:inline font-family="monospace">hbuf</fo:inline>
          and <fo:inline font-family="monospace">hlen</fo:inline>), just like <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_output2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">skip</fo:inline> is a number of bytes to skip of
          the <fo:inline font-family="monospace">ev</fo:inline> vector from the head.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You get vectors of <fo:inline font-family="monospace">ErlIOVec</fo:inline> type from the driver
          queue (see below), and the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">outputv</fo:inline></fo:inline>
          driver entry function. You can also make them yourself, if you want to
          send several <fo:inline font-family="monospace">ErlDrvBinary</fo:inline> buffers at once. Often
          it is faster to use
          <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_output</fo:inline></fo:inline> or
          <fo:inline font-style="italic"/>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, if <fo:inline font-family="monospace">hlen</fo:inline> is <fo:inline font-family="monospace">2</fo:inline> and <fo:inline font-family="monospace">ev</fo:inline> points to an
          array of three binaries, the port owner process receives
          <fo:inline font-family="monospace">[H1, H2, &lt;&lt;B1&gt;&gt;, &lt;&lt;B2&gt;&gt; | &lt;&lt;B3&gt;&gt;]</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">0</fo:inline> for normal use.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The comment for <fo:inline font-family="monospace">driver_output_binary</fo:inline> also applies for
          <fo:inline font-family="monospace">driver_outputv</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19108624">ErlDrvPDL driver_pdl_create(ErlDrvPort port)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a port data lock associated with the <fo:inline font-family="monospace">port</fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Once a port data lock has been created, it must be locked during
            all operations on the driver queue of the <fo:inline font-family="monospace">port</fo:inline>.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a newly created port data lock on success,
          otherwise <fo:inline font-family="monospace">NULL</fo:inline>. The function fails
          if <fo:inline font-family="monospace">port</fo:inline> is invalid or if a port data lock already has
          been associated with the <fo:inline font-family="monospace">port</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19115712">long driver_pdl_dec_refc(ErlDrvPDL
        pdl)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decrements the reference count of
          the port data lock passed as argument (<fo:inline font-family="monospace">pdl</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current reference count after the decrement has
          been performed is returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19120464">long driver_pdl_get_refc(ErlDrvPDL pdl)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current reference count of
          the port data lock passed as argument (<fo:inline font-family="monospace">pdl</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19124688">long driver_pdl_inc_refc(ErlDrvPDL pdl)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Increments the reference count of
          the port data lock passed as argument (<fo:inline font-family="monospace">pdl</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current reference count after the increment has
          been performed is returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19129424">void driver_pdl_lock(ErlDrvPDL pdl)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Locks the port data lock passed as argument (<fo:inline font-family="monospace">pdl</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19133760">void driver_pdl_unlock(ErlDrvPDL pdl)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unlocks the port data lock passed as argument (<fo:inline font-family="monospace">pdl</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19137936">SysIOVec *driver_peekq(ErlDrvPort port, int
        *vlen)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieves the driver queue as a pointer to an
          array of <fo:inline font-family="monospace">SysIOVec</fo:inline>s. It also returns the number of
          elements in <fo:inline font-family="monospace">vlen</fo:inline>. This is one of two ways to get data
          out of the queue.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Nothing is removed from the queue by this function, that must be done
          with <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_deq</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The returned array is suitable to use with the Unix system
          call <fo:inline font-family="monospace">writev</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called from any thread if a
          <fo:inline font-style="italic">port data lock</fo:inline>
          associated with the <fo:inline font-family="monospace">port</fo:inline> is locked by the calling
          thread during the call.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19146272">ErlDrvSizeT driver_peekqv(ErlDrvPort port,
        ErlIOVec *ev)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieves the driver queue into a supplied
	  <fo:inline font-family="monospace">ErlIOVec</fo:inline> <fo:inline font-family="monospace">ev</fo:inline>. It also returns the queue size.
	  This is one of two ways to get data out of the queue.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">ev</fo:inline> is <fo:inline font-family="monospace">NULL</fo:inline>, all ones that is <fo:inline font-family="monospace">-1</fo:inline> type cast to
	  <fo:inline font-family="monospace">ErlDrvSizeT</fo:inline> are returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Nothing is removed from the queue by this function, that must be done
          with <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_deq</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called from any thread if a
          <fo:inline font-style="italic">port data lock</fo:inline>
          associated with the <fo:inline font-family="monospace">port</fo:inline> is locked by the calling
          thread during the call.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19155872">int driver_pushq(ErlDrvPort port, char* buf,
        ErlDrvSizeT len)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Puts data at the head of the driver queue. The
          data in <fo:inline font-family="monospace">buf</fo:inline> is copied (<fo:inline font-family="monospace">len</fo:inline> bytes) and placed
          at the beginning of the queue.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called from any thread if a
          <fo:inline font-style="italic">port data lock</fo:inline>
          associated with the <fo:inline font-family="monospace">port</fo:inline> is locked by the calling
          thread during the call.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19162784">int driver_pushq_bin(ErlDrvPort port,
        ErlDrvBinary *bin, ErlDrvSizeT offset, ErlDrvSizeT len)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Puts data in the binary <fo:inline font-family="monospace">bin</fo:inline>, at
          <fo:inline font-family="monospace">offset</fo:inline> with length <fo:inline font-family="monospace">len</fo:inline> at the head of the
          driver queue. It is most often faster than
          <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_pushq</fo:inline></fo:inline>,
          because no data must be copied.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called from any thread if a
          <fo:inline font-style="italic">port data lock</fo:inline>
          associated with the <fo:inline font-family="monospace">port</fo:inline> is locked by the calling
          thread during the call.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19171200">int driver_pushqv(ErlDrvPort port, ErlIOVec
        *ev, ErlDrvSizeT skip)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Puts the data in <fo:inline font-family="monospace">ev</fo:inline>, skipping the first
          <fo:inline font-family="monospace">skip</fo:inline> bytes of it, at the head of the driver queue.
          It is faster than
          <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_pushq</fo:inline></fo:inline>,
          because no data must be copied.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called from any thread if a
          <fo:inline font-style="italic">port data lock</fo:inline>
          associated with the <fo:inline font-family="monospace">port</fo:inline> is locked by the calling
          thread during the call.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19178976">int driver_read_timer(ErlDrvPort port, unsigned
        long *time_left)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads the current time of a timer, and places
          the result in <fo:inline font-family="monospace">time_left</fo:inline>. This is the time in
          milliseconds, before the time-out occurs.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19183872">void *driver_realloc(void *ptr, ErlDrvSizeT size)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Resizes a memory block, either in place, or by
          allocating a new block, copying the data, and freeing the old
          block. A pointer is returned to the reallocated memory. On
          failure (out of memory), <fo:inline font-family="monospace">NULL</fo:inline> is returned. (This is
          most often a wrapper for <fo:inline font-family="monospace">realloc</fo:inline>.)</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19188912">ErlDrvBinary *driver_realloc_binary(ErlDrvBinary *bin, ErlDrvSizeT size)
        </fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Resizes a driver binary, while keeping the data.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the resized driver binary on success. Returns <fo:inline font-family="monospace">NULL</fo:inline>
          on failure (out of memory).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19193616">int driver_select(ErlDrvPort port, ErlDrvEvent
        event, int mode, int on)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used by drivers to provide the emulator with
          events to check for. This enables the emulator to call the driver
          when something has occurred asynchronously.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">event</fo:inline> identifies an OS-specific event object.
          On Unix systems, the functions <fo:inline font-family="monospace">select</fo:inline>/<fo:inline font-family="monospace">poll</fo:inline> are used.
          The event object must be a socket or pipe (or other object that
          <fo:inline font-family="monospace">select</fo:inline>/<fo:inline font-family="monospace">poll</fo:inline> can use).
          On Windows, the Win32 API function <fo:inline font-family="monospace">WaitForMultipleObjects</fo:inline>
          is used. This places other restrictions on the event object;
          see the Win32 SDK documentation.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">on</fo:inline> is to be <fo:inline font-family="monospace">1</fo:inline> for setting events
          and <fo:inline font-family="monospace">0</fo:inline> for clearing them.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">mode</fo:inline> is a bitwise OR combination of
          <fo:inline font-family="monospace">ERL_DRV_READ</fo:inline>, <fo:inline font-family="monospace">ERL_DRV_WRITE</fo:inline>, and <fo:inline font-family="monospace">ERL_DRV_USE</fo:inline>.
          The first two specify whether to wait for read events and/or write
          events. A fired read event calls
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">ready_input</fo:inline></fo:inline> and a fired write event calls
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">ready_output</fo:inline></fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some OS (Windows) do not differentiate between read and write
            events. The callback for a fired event then only depends on the
            value of <fo:inline font-family="monospace">mode</fo:inline>.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_DRV_USE</fo:inline> specifies if we are using the event object or
          if we want to close it.
          On an emulator with SMP support, it is not safe to clear all events
          and then close the event object after <fo:inline font-family="monospace">driver_select</fo:inline> has
          returned. Another thread can still be using the event object
          internally. To safely close an event object, call
          <fo:inline font-family="monospace">driver_select</fo:inline> with <fo:inline font-family="monospace">ERL_DRV_USE</fo:inline> and <fo:inline font-family="monospace">on==0</fo:inline>, which
          clears all events and then either calls
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">stop_select</fo:inline></fo:inline>
	  or schedules it to be called when it is safe to close the event
          object. <fo:inline font-family="monospace">ERL_DRV_USE</fo:inline> is to be set together with the first event
          for an event object. It is harmless to set <fo:inline font-family="monospace">ERL_DRV_USE</fo:inline>
          even if it already has been done. Clearing all events but keeping
          <fo:inline font-family="monospace">ERL_DRV_USE</fo:inline> set indicates that we are using the event
          object and probably will set events for it again.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_DRV_USE</fo:inline> was added in Erlang/OTP R13. Old drivers still
            work as before, but it is recommended to update them to use
            <fo:inline font-family="monospace">ERL_DRV_USE</fo:inline> and <fo:inline font-family="monospace">stop_select</fo:inline> to ensure that event
            objects are closed in a safe way.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is <fo:inline font-family="monospace">0</fo:inline>, unless
          <fo:inline font-family="monospace">ready_input</fo:inline>/<fo:inline font-family="monospace">ready_output</fo:inline> is <fo:inline font-family="monospace">NULL</fo:inline>, in which case
          it is <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19218640">int driver_send_term(ErlDrvPort port,
        ErlDrvTermData receiver, ErlDrvTermData* term, int n)</fo:block></fo:block>
        
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">This function is deprecated.</fo:inline>
            Use <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erl_drv_send_term</fo:inline></fo:inline> instead.</fo:block>
        </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The parameters of this function
            cannot be properly checked by the runtime system when
            executed by arbitrary threads. This can cause the
            function not to fail when it should.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameters <fo:inline font-family="monospace">term</fo:inline> and <fo:inline font-family="monospace">n</fo:inline> work as in
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_output_term</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is only thread-safe when the emulator with SMP
          support is used.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19227696">int driver_set_timer(ErlDrvPort port, unsigned
        long time)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a timer on the driver, which will count
          down and call the driver when it is timed out. Parameter
          <fo:inline font-family="monospace">time</fo:inline> is the time in milliseconds before the timer expires.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the timer reaches <fo:inline font-family="monospace">0</fo:inline> and expires, the driver entry
          function <fo:inline font-style="italic">
          <fo:inline font-family="monospace">timeout</fo:inline></fo:inline> is called.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that only one timer exists on each driver instance;
          setting a new timer replaces an older one.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Return value is <fo:inline font-family="monospace">0</fo:inline>, unless the <fo:inline font-family="monospace">timeout</fo:inline>
          driver function is <fo:inline font-family="monospace">NULL</fo:inline>, in which case it is <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19236464">ErlDrvSizeT driver_sizeq(ErlDrvPort port)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of bytes currently in the driver queue.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called from any thread if a
          <fo:inline font-style="italic">port data lock</fo:inline>
          associated with the <fo:inline font-family="monospace">port</fo:inline> is locked by the calling
          thread during the call.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19241488">void driver_system_info(ErlDrvSysInfo
        *sys_info_ptr, size_t size)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writes information about the Erlang runtime system into the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlDrvSysInfo</fo:inline></fo:inline>
          structure referred to by the first argument. The second
          argument is to be the size of the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlDrvSysInfo</fo:inline></fo:inline>
          structure, that is, <fo:inline font-family="monospace">sizeof(ErlDrvSysInfo)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about specific fields, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlDrvSysInfo</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19248432">ErlDrvSizeT driver_vec_to_buf(ErlIOVec *ev,
        char *buf, ErlDrvSizeT len)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Collects several segments of data, referenced
          by <fo:inline font-family="monospace">ev</fo:inline>, by copying them in order to the buffer
          <fo:inline font-family="monospace">buf</fo:inline>, of the size <fo:inline font-family="monospace">len</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the data is to be sent from the driver to the port owner
          process, it is faster to use
          <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_outputv</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is the space left in the buffer, that is, if
          <fo:inline font-family="monospace">ev</fo:inline> contains less than <fo:inline font-family="monospace">len</fo:inline> bytes it is the
          difference, and if <fo:inline font-family="monospace">ev</fo:inline> contains <fo:inline font-family="monospace">len</fo:inline> bytes or more,
          it is <fo:inline font-family="monospace">0</fo:inline>. This is faster if there is more than one header byte,
          as the binary syntax can construct integers directly from
          the binary.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19257456">void erl_drv_busy_msgq_limits(ErlDrvPort port,
        ErlDrvSizeT *low, ErlDrvSizeT *high)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets and gets limits that will be used for controlling the
          busy state of the port message queue.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The port message queue is set into a busy
          state when the amount of command data queued on the
          message queue reaches the <fo:inline font-family="monospace">high</fo:inline> limit. The port
          message queue is set into a not busy state when the
          amount of command data queued on the message queue falls
          below the <fo:inline font-family="monospace">low</fo:inline> limit. Command data is in this
          context data passed to the port using either
          <fo:inline font-family="monospace">Port ! {Owner, {command, Data}}</fo:inline> or
          <fo:inline font-family="monospace">port_command/[2,3]</fo:inline>. Notice that these limits
          only concerns command data that have not yet reached the
          port. The <fo:inline font-style="italic">busy port</fo:inline>
          feature can be used for data that has reached the port.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Valid limits are values in the range
          <fo:inline font-family="monospace">[ERL_DRV_BUSY_MSGQ_LIM_MIN, ERL_DRV_BUSY_MSGQ_LIM_MAX]</fo:inline>.
          Limits are automatically adjusted to be sane. That is,
          the system adjusts values so that the low limit used is
          lower than or equal to the high limit used. By default the high
          limit is 8 kB and the low limit is 4 kB.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By passing a pointer to an integer variable containing
          the value <fo:inline font-family="monospace">ERL_DRV_BUSY_MSGQ_READ_ONLY</fo:inline>, the currently used
          limit is read and written back to the integer variable.
          A new limit can be set by passing a pointer to an integer
          variable containing a valid limit. The passed value is
          written to the internal limit. The internal limit is then
          adjusted. After this the adjusted limit is written
          back to the integer variable from which the new value was
          read. Values are in bytes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The busy message queue feature can be disabled either
          by setting the <fo:inline font-family="monospace">ERL_DRV_FLAG_NO_BUSY_MSGQ</fo:inline>
          <fo:inline font-style="italic">driver flag</fo:inline>
          in the <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_entry</fo:inline></fo:inline>
          used by the driver, or by calling this function with
          <fo:inline font-family="monospace">ERL_DRV_BUSY_MSGQ_DISABLED</fo:inline> as a limit (either low or
          high). When this feature has been disabled, it cannot be
          enabled again. When reading the limits, both are
          <fo:inline font-family="monospace">ERL_DRV_BUSY_MSGQ_DISABLED</fo:inline> if this
          feature has been disabled.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Processes sending command data to the port are suspended
          if either the port is busy or if the port message queue is
          busy. Suspended processes are resumed when neither the
          port or the port message queue is busy.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about busy port functionality, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">set_busy_port</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19272704">void erl_drv_cond_broadcast(ErlDrvCond
        *cnd)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Broadcasts on a condition variable. That is, if
          other threads are waiting on the condition variable being
          broadcast on, <fo:inline font-weight="bold">all</fo:inline> of them are woken.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">cnd</fo:inline> is a pointer to a condition variable to broadcast on.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19277776">ErlDrvCond *erl_drv_cond_create(char
        *name)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a condition variable and returns a pointer to it.</fo:block> 
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">name</fo:inline> is a string identifying the created condition variable.
          It is used to identify the condition variable in planned
          future debug functionality.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">NULL</fo:inline> on failure. The driver
          creating the condition variable is responsible for
          destroying it before the driver is unloaded.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19283440">void erl_drv_cond_destroy(ErlDrvCond
        *cnd)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Destroys a condition variable previously created by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_cond_create</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">cnd</fo:inline> is a pointer to a condition variable to destroy.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19288992">char *erl_drv_cond_name(ErlDrvCond
        *cnd)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a pointer to the name of the condition.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">cnd</fo:inline> is a  pointer to an initialized condition.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is intended for debugging purposes only.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19293984">void erl_drv_cond_signal(ErlDrvCond
        *cnd)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Signals on a condition variable. That is, if
          other threads are waiting on the condition variable being
          signaled, <fo:inline font-weight="bold">one</fo:inline> of them is woken.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">cnd</fo:inline> is a pointer to a condition variable to signal on.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19299040">void erl_drv_cond_wait(ErlDrvCond *cnd,
        ErlDrvMutex *mtx)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Waits on a condition variable. The calling
          thread is blocked until another thread wakes it by signaling
          or broadcasting on the condition variable. Before the calling
          thread is blocked, it unlocks the mutex passed as argument.
          When the calling thread is woken, it locks the same mutex before
          returning. That is, the mutex currently must be locked by
          the calling thread when calling this function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">cnd</fo:inline> is a pointer to a condition variable to wait on.
          <fo:inline font-family="monospace">mtx</fo:inline> is a pointer to a mutex to unlock while waiting.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_drv_cond_wait</fo:inline> can return even if
            no one has signaled or broadcast on the condition
            variable. Code calling <fo:inline font-family="monospace">erl_drv_cond_wait</fo:inline> is
            always to be prepared for <fo:inline font-family="monospace">erl_drv_cond_wait</fo:inline>
            returning even if the condition that the thread was
            waiting for has not occurred. That is, when returning from
            <fo:inline font-family="monospace">erl_drv_cond_wait</fo:inline>, always check if the condition
            has occurred, and if not call <fo:inline font-family="monospace">erl_drv_cond_wait</fo:inline>  again.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19307776">int erl_drv_consume_timeslice(ErlDrvPort port,
        int percent)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gives the runtime system a hint about how much CPU time the current
          driver callback call has consumed since the last hint, or since the
          the start of the callback if no previous hint has been given.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">port</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Port handle of the executing port.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">percent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Approximate consumed fraction of a full
            time-slice in percent.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time is specified as a fraction, in percent, of a full time-slice
          that a port is allowed to execute before it is to surrender the
          CPU to other runnable ports or processes. Valid range is
          <fo:inline font-family="monospace">[1, 100]</fo:inline>. The scheduling time-slice is not an exact entity,
          but can usually be approximated to about 1 millisecond.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that it is up to the runtime system to determine if and
          how to use this information. Implementations on some platforms
          can use other means to determine the consumed fraction
          of the time-slice. Lengthy driver callbacks should, regardless of
          this, frequently call this function to determine if it is allowed
          to continue execution or not.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function returns a non-zero value
          if the time-slice has been exhausted, and zero if the callback is
          allowed to continue execution. If a non-zero value is
          returned, the driver callback is to return as soon as possible in
          order for the port to be able to yield.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is provided to better support co-operative scheduling,
          improve system responsiveness, and to make it easier to prevent
          misbehaviors of the VM because of a port monopolizing a scheduler
          thread. It can be used when dividing lengthy work into some repeated
          driver callback calls, without the need to use threads.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also the important <fo:inline font-style="italic">warning</fo:inline>
          text at the beginning of this manual page.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19318704">ErlDrvTime erl_drv_convert_time_unit(ErlDrvTime
        val, ErlDrvTimeUnit from, ErlDrvTimeUnit to)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts the <fo:inline font-family="monospace">val</fo:inline> value of time unit <fo:inline font-family="monospace">from</fo:inline> to
          the corresponding value of time unit <fo:inline font-family="monospace">to</fo:inline>. The result is
          rounded using the floor function.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">val</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Value to convert time unit for.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">from</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time unit of <fo:inline font-family="monospace">val</fo:inline>.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">to</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time unit of returned value.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">ERL_DRV_TIME_ERROR</fo:inline> if called with an invalid
          time unit argument.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">ErlDrvTime</fo:inline></fo:inline> and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">ErlDrvTimeUnit</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19330864">int erl_drv_equal_tids(ErlDrvTid tid1,
        ErlDrvTid tid2)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compares two thread identifiers, <fo:inline font-family="monospace">tid1</fo:inline> and <fo:inline font-family="monospace">tid2</fo:inline>,
          for equality.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> it they are not equal, and a value not equal to
          <fo:inline font-family="monospace">0</fo:inline> if they are equal.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A thread identifier can be reused very quickly after
            a thread has terminated. Therefore, if a thread
            corresponding to one of the involved thread identifiers
            has terminated since the thread identifier was saved,
            the result of <fo:inline font-family="monospace">erl_drv_equal_tids</fo:inline> does possibly not give
            the expected result.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19338592">int erl_drv_getenv(const char *key, char
        *value, size_t *value_size)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieves the value of an environment variable.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">key</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">A <fo:inline font-family="monospace">NULL</fo:inline>-terminated string containing the
            name of the environment variable.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">value</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">A pointer to an output buffer.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">value_size</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">A pointer to an integer. The integer is used both for
            passing input and output sizes (see below).</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When this function is called, <fo:inline font-family="monospace">*value_size</fo:inline> is to contain the
          size of the <fo:inline font-family="monospace">value</fo:inline> buffer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, <fo:inline font-family="monospace">0</fo:inline> is returned,
          the value of the environment variable has been written to
          the <fo:inline font-family="monospace">value</fo:inline> buffer, and <fo:inline font-family="monospace">*value_size</fo:inline> contains the
          string length (excluding the terminating <fo:inline font-family="monospace">NULL</fo:inline> character) of
          the value written to the <fo:inline font-family="monospace">value</fo:inline> buffer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On failure, that is, no such environment variable was found,
          a value &lt; <fo:inline font-family="monospace">0</fo:inline> is returned. When the size of the <fo:inline font-family="monospace">value</fo:inline>
          buffer is too small, a value &gt; <fo:inline font-family="monospace">0</fo:inline> is returned and
          <fo:inline font-family="monospace">*value_size</fo:inline> has been set to the buffer size needed.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do <fo:inline font-weight="bold">not</fo:inline> use libc's <fo:inline font-family="monospace">getenv</fo:inline> or similar C library
            interfaces from a driver.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19355024">void erl_drv_init_ack(ErlDrvPort port,
        ErlDrvData res)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Acknowledges the start of the port.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">port</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The port handle of the port (driver instance)
            doing the acknowledgment.
	  </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">res</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The result of the port initialization. Can be the same
            values as the return value of <fo:inline font-style="italic">
            <fo:inline font-family="monospace">start</fo:inline></fo:inline>, that is, any of the error codes or the
            <fo:inline font-family="monospace">ErlDrvData</fo:inline> that is to be used for this port.
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When this function is called the initiating <fo:inline font-family="monospace">erlang:open_port</fo:inline>
          call is returned as if the <fo:inline font-style="italic">
          <fo:inline font-family="monospace">start</fo:inline></fo:inline> function had just been called. It can only be
          used when flag <fo:inline font-style="italic">
          <fo:inline font-family="monospace">ERL_DRV_FLAG_USE_INIT_ACK</fo:inline></fo:inline>
          has been set on the linked-in driver.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19365728">ErlDrvTime erl_drv_monotonic_time(ErlDrvTimeUnit time_unit)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-style="italic">
          Erlang monotonic time</fo:inline>. Notice that negative values are
          not uncommon.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">time_unit</fo:inline> is time unit of returned value.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">ERL_DRV_TIME_ERROR</fo:inline> if called with an invalid
          time unit argument, or if called from a thread that is not a
          scheduler thread.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlDrvTime</fo:inline></fo:inline>
          and <fo:inline font-style="italic">
          <fo:inline font-family="monospace">ErlDrvTimeUnit</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19374016">ErlDrvMutex *erl_drv_mutex_create(char
        *name)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a mutex and returns a pointer to it.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">name</fo:inline> is a string identifying the created mutex. It is used
          to identify the mutex in planned future debug functionality.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">NULL</fo:inline> on failure. The driver creating the mutex is
          responsible for destroying it before the driver is unloaded.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19379600">void erl_drv_mutex_destroy(ErlDrvMutex
        *mtx)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Destroys a mutex previously created by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_mutex_create</fo:inline></fo:inline>.
          The mutex must be in an unlocked state before it is destroyed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mtx</fo:inline> is a pointer to a mutex to destroy.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19385168">void erl_drv_mutex_lock(ErlDrvMutex
        *mtx)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Locks a mutex. The calling thread is blocked until the mutex has
          been locked. A thread that has currently locked the mutex
          <fo:inline font-weight="bold">cannot</fo:inline> lock the same mutex again.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mtx</fo:inline> is a pointer to a mutex to lock.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you leave a mutex locked in an emulator thread
            when you let the thread out of your control, you will
            <fo:inline font-weight="bold">very likely</fo:inline> deadlock the whole emulator.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19391696">char *erl_drv_mutex_name(ErlDrvMutex
        *mtx)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a pointer to the mutex name.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mtx</fo:inline> is a pointer to an initialized mutex.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is intended for debugging purposes only.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19396656">int erl_drv_mutex_trylock(ErlDrvMutex
        *mtx)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to lock a mutex. A thread that has currently locked the mutex
          <fo:inline font-weight="bold">cannot</fo:inline> try to lock the same mutex again.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mtx</fo:inline> is a pointer to a mutex to try to lock.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise <fo:inline font-family="monospace">EBUSY</fo:inline>.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you leave a mutex locked in an emulator thread
            when you let the thread out of your control, you will
            <fo:inline font-weight="bold">very likely</fo:inline> deadlock the whole emulator.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19404480">void erl_drv_mutex_unlock(ErlDrvMutex
        *mtx)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unlocks a mutex. The mutex currently must be
          locked by the calling thread.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mtx</fo:inline> is a pointer to a mutex to unlock.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19409008">int erl_drv_output_term(ErlDrvTermData port,
        ErlDrvTermData* term, int n)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends data in the special driver term
          format to the port owner process. This is a fast way to
          deliver term data from a driver. It needs no binary
          conversion, so the port owner process receives data as
          normal Erlang terms. The <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_send_term</fo:inline></fo:inline>
          functions can be used for sending to any process
          on the local node.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">port</fo:inline> is <fo:inline font-weight="bold">not</fo:inline>
            an ordinary port handle, but a port handle converted using
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_mk_port</fo:inline></fo:inline>.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">term</fo:inline> points to an array of
          <fo:inline font-family="monospace">ErlDrvTermData</fo:inline> with <fo:inline font-family="monospace">n</fo:inline> elements. This array
          contains terms described in the driver term format. Every
          term consists of 1-4 elements in the array. The
          first term has a term type and then arguments.
          Parameter <fo:inline font-family="monospace">port</fo:inline> specifies the sending port.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tuples, maps, and lists (except strings, see below)
          are built in reverse polish notation, so that to build a
          tuple, the elements are specified first, and then the tuple
          term, with a count. Likewise for lists and maps.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A tuple must be specified with the number of elements. (The
              elements precede the <fo:inline font-family="monospace">ERL_DRV_TUPLE</fo:inline> term.)</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A map must be specified with the number of key-value pairs
              <fo:inline font-family="monospace">N</fo:inline>. The key-value pairs must precede the <fo:inline font-family="monospace">ERL_DRV_MAP</fo:inline>
              in this order: <fo:inline font-family="monospace">key1,value1,key2,value2,...,keyN,valueN</fo:inline>.
              Duplicate keys are not allowed.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list must be specified with the number of elements,
              including the tail, which is the last term preceding
              <fo:inline font-family="monospace">ERL_DRV_LIST</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The special term <fo:inline font-family="monospace">ERL_DRV_STRING_CONS</fo:inline> is used to
          "splice" in a string in a list, a string specified this way is
          not a list in itself, but the elements are elements of the
          surrounding list.</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Term type            Arguments
---------            ---------
ERL_DRV_NIL
ERL_DRV_ATOM         ErlDrvTermData atom (from driver_mk_atom(char *string))
ERL_DRV_INT          ErlDrvSInt integer
ERL_DRV_UINT         ErlDrvUInt integer
ERL_DRV_INT64        ErlDrvSInt64 *integer_ptr
ERL_DRV_UINT64       ErlDrvUInt64 *integer_ptr
ERL_DRV_PORT         ErlDrvTermData port (from driver_mk_port(ErlDrvPort port))
ERL_DRV_BINARY       ErlDrvBinary *bin, ErlDrvUInt len, ErlDrvUInt offset
ERL_DRV_BUF2BINARY   char *buf, ErlDrvUInt len
ERL_DRV_STRING       char *str, int len
ERL_DRV_TUPLE        int sz
ERL_DRV_LIST         int sz
ERL_DRV_PID          ErlDrvTermData pid (from driver_connected(ErlDrvPort port)
                     or driver_caller(ErlDrvPort port))
ERL_DRV_STRING_CONS  char *str, int len
ERL_DRV_FLOAT        double *dbl
ERL_DRV_EXT2TERM     char *buf, ErlDrvUInt len
ERL_DRV_MAP          int sz</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The unsigned integer data type <fo:inline font-family="monospace">ErlDrvUInt</fo:inline> and the
	  signed integer data type <fo:inline font-family="monospace">ErlDrvSInt</fo:inline> are 64 bits wide
	  on a 64-bit runtime system and 32 bits wide on a 32-bit
	  runtime system. They were introduced in ERTS 5.6
	  and replaced some of the <fo:inline font-family="monospace">int</fo:inline> arguments in the list above.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The unsigned integer data type <fo:inline font-family="monospace">ErlDrvUInt64</fo:inline> and the
	  signed integer data type <fo:inline font-family="monospace">ErlDrvSInt64</fo:inline> are always 64 bits
	  wide. They were introduced in ERTS 5.7.4.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To build the tuple <fo:inline font-family="monospace">{tcp, Port, [100 | Binary]}</fo:inline>, the
	  following call can be made.</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ErlDrvBinary* bin = ...
ErlDrvPort port = ...
ErlDrvTermData spec[] = {
    ERL_DRV_ATOM, driver_mk_atom("tcp"),
    ERL_DRV_PORT, driver_mk_port(drvport),
        ERL_DRV_INT, 100,
        ERL_DRV_BINARY, bin, 50, 0,
        ERL_DRV_LIST, 2,
    ERL_DRV_TUPLE, 3,
};
erl_drv_output_term(driver_mk_port(drvport), spec, sizeof(spec) / sizeof(spec[0]));    </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here <fo:inline font-family="monospace">bin</fo:inline> is a driver binary of length at least 50 and
          <fo:inline font-family="monospace">drvport</fo:inline> is a port handle. Notice that <fo:inline font-family="monospace">ERL_DRV_LIST</fo:inline>
          comes after the elements of the list, likewise
          <fo:inline font-family="monospace">ERL_DRV_TUPLE</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ERL_DRV_STRING_CONS</fo:inline> term is a way to construct
          strings. It works differently from how <fo:inline font-family="monospace">ERL_DRV_STRING</fo:inline>
          works. <fo:inline font-family="monospace">ERL_DRV_STRING_CONS</fo:inline> builds a string list in
          reverse order (as opposed to how <fo:inline font-family="monospace">ERL_DRV_LIST</fo:inline>
          works), concatenating the strings added to a list. The tail
          must be specified before <fo:inline font-family="monospace">ERL_DRV_STRING_CONS</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_DRV_STRING</fo:inline> constructs a string, and ends
          it. (So it is the same as <fo:inline font-family="monospace">ERL_DRV_NIL</fo:inline> followed by
          <fo:inline font-family="monospace">ERL_DRV_STRING_CONS</fo:inline>.)</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
/* to send [x, "abc", y] to the port: */
ErlDrvTermData spec[] = {
    ERL_DRV_ATOM, driver_mk_atom("x"),
    ERL_DRV_STRING, (ErlDrvTermData)"abc", 3,
    ERL_DRV_ATOM, driver_mk_atom("y"),
    ERL_DRV_NIL,
    ERL_DRV_LIST, 4
};
erl_drv_output_term(driver_mk_port(drvport), spec, sizeof(spec) / sizeof(spec[0]));    </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
/* to send "abc123" to the port: */
ErlDrvTermData spec[] = {
    ERL_DRV_NIL,        /* with STRING_CONS, the tail comes first */
    ERL_DRV_STRING_CONS, (ErlDrvTermData)"123", 3,
    ERL_DRV_STRING_CONS, (ErlDrvTermData)"abc", 3,
};
erl_drv_output_term(driver_mk_port(drvport), spec, sizeof(spec) / sizeof(spec[0]));    </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ERL_DRV_EXT2TERM</fo:inline> term type is used for passing a
	  term encoded with the
	  <fo:inline font-style="italic">external format</fo:inline>,
	  that is, a term that has been encoded by
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">erlang:term_to_binary</fo:inline></fo:inline>,
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_interface:ei(3)</fo:inline></fo:inline>,
	  and so on.
	  For example, if <fo:inline font-family="monospace">binp</fo:inline> is a pointer to an <fo:inline font-family="monospace">ErlDrvBinary</fo:inline>
	  that contains term <fo:inline font-family="monospace">{17, 4711}</fo:inline> encoded with the
	  <fo:inline font-style="italic">external format</fo:inline>,
	  and you want to wrap it in a two-tuple with the tag <fo:inline font-family="monospace">my_tag</fo:inline>,
	  that is, <fo:inline font-family="monospace">{my_tag, {17, 4711}}</fo:inline>, you can do as follows:</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ErlDrvTermData spec[] = {
        ERL_DRV_ATOM, driver_mk_atom("my_tag"),
        ERL_DRV_EXT2TERM, (ErlDrvTermData) binp-&gt;orig_bytes, binp-&gt;orig_size
    ERL_DRV_TUPLE, 2,
};
erl_drv_output_term(driver_mk_port(drvport), spec, sizeof(spec) / sizeof(spec[0]));    </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To build the map <fo:inline font-family="monospace">#{key1 =&gt; 100, key2 =&gt; {200, 300}}</fo:inline>, the
          following call can be made.</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ErlDrvPort port = ...
ErlDrvTermData spec[] = {
    ERL_DRV_ATOM, driver_mk_atom("key1"),
        ERL_DRV_INT, 100,
    ERL_DRV_ATOM, driver_mk_atom("key2"),
        ERL_DRV_INT, 200,
        ERL_DRV_INT, 300,
    ERL_DRV_TUPLE, 2,
    ERL_DRV_MAP, 2
};
erl_drv_output_term(driver_mk_port(drvport), spec, sizeof(spec) / sizeof(spec[0]));    </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you want to pass a binary and do not already have the content
          of the binary in an <fo:inline font-family="monospace">ErlDrvBinary</fo:inline>, you can benefit from using
          <fo:inline font-family="monospace">ERL_DRV_BUF2BINARY</fo:inline> instead of creating an <fo:inline font-family="monospace">ErlDrvBinary</fo:inline>
          through <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_alloc_binary</fo:inline></fo:inline> and then pass the binary through
          <fo:inline font-family="monospace">ERL_DRV_BINARY</fo:inline>. The runtime system often allocates
          binaries smarter if <fo:inline font-family="monospace">ERL_DRV_BUF2BINARY</fo:inline> is used.
          However, if the content of the binary to pass already resides in
          an <fo:inline font-family="monospace">ErlDrvBinary</fo:inline>, it is normally better to pass the binary using
          <fo:inline font-family="monospace">ERL_DRV_BINARY</fo:inline> and the <fo:inline font-family="monospace">ErlDrvBinary</fo:inline> in question.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ERL_DRV_UINT</fo:inline>, <fo:inline font-family="monospace">ERL_DRV_BUF2BINARY</fo:inline>, and
          <fo:inline font-family="monospace">ERL_DRV_EXT2TERM</fo:inline> term types were introduced in
          ERTS 5.6.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is only thread-safe when the emulator with SMP
          support is used.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19459680">int erl_drv_putenv(const char *key, char
        *value)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the value of an environment variable.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">key</fo:inline> is a <fo:inline font-family="monospace">NULL</fo:inline>-terminated string containing the
          name of the environment variable.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">value</fo:inline> is a <fo:inline font-family="monospace">NULL</fo:inline>-terminated string containing the
          new value of the environment variable.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise a value <fo:inline font-family="monospace">!= 0</fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result of passing the empty string (<fo:inline font-family="monospace">""</fo:inline>) as a value
            is platform-dependent. On some platforms the variable value
            is set to the empty string, on others the
            environment variable is removed.</fo:block>
        </fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do <fo:inline font-weight="bold">not</fo:inline> use libc's <fo:inline font-family="monospace">putenv</fo:inline> or similar C library
            interfaces from a driver.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19470688">ErlDrvRWLock *erl_drv_rwlock_create(char
        *name)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an rwlock and returns a pointer to it.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">name</fo:inline> is a string identifying the created rwlock.
          It is used to identify the rwlock in planned future
          debug functionality.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">NULL</fo:inline> on failure. The driver creating the rwlock
          is responsible for destroying it before the driver is unloaded.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19476288">void erl_drv_rwlock_destroy(ErlDrvRWLock
        *rwlck)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Destroys an rwlock previously created by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_rwlock_create</fo:inline></fo:inline>.
          The rwlock must be in an unlocked state before it is destroyed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">rwlck</fo:inline> is a pointer to an rwlock to destroy.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19481856">char *erl_drv_rwlock_name(ErlDrvRWLock
        *rwlck)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a pointer to the name of the rwlock.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">rwlck</fo:inline> is a pointer to an initialized rwlock.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is intended for debugging purposes only.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19486832">void erl_drv_rwlock_rlock(ErlDrvRWLock
        *rwlck)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read locks an rwlock. The calling thread is
          blocked until the rwlock has been read locked. A thread
          that currently has read or read/write locked the rwlock
          <fo:inline font-weight="bold">cannot</fo:inline> lock the same rwlock again.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">rwlck</fo:inline> is a pointer to the rwlock to read lock.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you leave an rwlock locked in an emulator thread
            when you let the thread out of your control, you will
            <fo:inline font-weight="bold">very likely</fo:inline> deadlock the whole emulator.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19493424">void erl_drv_rwlock_runlock(ErlDrvRWLock
        *rwlck)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read unlocks an rwlock. The rwlock currently must
          be read locked by the calling thread.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">rwlck</fo:inline> is a pointer to an rwlock to read unlock.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19497984">void erl_drv_rwlock_rwlock(ErlDrvRWLock
        *rwlck)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read/write locks an rwlock. The calling thread
          is blocked until the rwlock has been read/write locked.
          A thread that currently has read or read/write locked the
          rwlock <fo:inline font-weight="bold">cannot</fo:inline> lock the same rwlock again.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">rwlck</fo:inline> is a pointer to an rwlock to read/write lock.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you leave an rwlock locked in an emulator thread
            when you let the thread out of your control, you will
            <fo:inline font-weight="bold">very likely</fo:inline> deadlock the whole emulator.</fo:block>
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19504592">void erl_drv_rwlock_rwunlock(ErlDrvRWLock
        *rwlck)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read/write unlocks an rwlock. The rwlock currently must be
          read/write locked by the calling thread.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">rwlck</fo:inline> is a pointer to an rwlock to read/write unlock.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19509184">int erl_drv_rwlock_tryrlock(ErlDrvRWLock
        *rwlck)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to read lock an rwlock.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">rwlck</fo:inline> is a pointer to an rwlock to try to read lock.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise <fo:inline font-family="monospace">EBUSY</fo:inline>.
          A thread that currently has read or read/write locked the
          rwlock <fo:inline font-weight="bold">cannot</fo:inline> try to lock the same rwlock again.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you leave an rwlock locked in an emulator thread
            when you let the thread out of your control, you will
            <fo:inline font-weight="bold">very likely</fo:inline> deadlock the whole emulator.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19517040">int erl_drv_rwlock_tryrwlock(ErlDrvRWLock
        *rwlck)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to read/write lock an rwlock.
          A thread that currently has read or read/write locked the
          rwlock <fo:inline font-weight="bold">cannot</fo:inline> try to lock the same rwlock again.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">rwlck</fo:inline>is pointer to an rwlock to try to read/write lock.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise <fo:inline font-family="monospace">EBUSY</fo:inline>.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you leave an rwlock locked in an emulator thread
            when you let the thread out of your control, you will
            <fo:inline font-weight="bold">very likely</fo:inline> deadlock the whole emulator.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19524944">int erl_drv_send_term(ErlDrvTermData port,
        ErlDrvTermData receiver, ErlDrvTermData* term, int n)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is the only way for a driver to send data to
          <fo:inline font-weight="bold">other</fo:inline> processes than the port owner process. Parameter
          <fo:inline font-family="monospace">receiver</fo:inline> specifies the process to receive the data.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">port</fo:inline> is <fo:inline font-weight="bold">not</fo:inline> an ordinary port handle, but
            a port handle converted using
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">driver_mk_port</fo:inline></fo:inline>.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameters <fo:inline font-family="monospace">port</fo:inline>, <fo:inline font-family="monospace">term</fo:inline>, and <fo:inline font-family="monospace">n</fo:inline> work as in
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_output_term</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is only thread-safe when the emulator with SMP
          support is used.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19535488">void erl_drv_set_os_pid(ErlDrvPort port,
        ErlDrvSInt pid)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the <fo:inline font-family="monospace">os_pid</fo:inline> seen when doing
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:port_info/2</fo:inline></fo:inline> on this port.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">port</fo:inline> is the port handle of the port (driver instance) to set
          the pid on. <fo:inline font-family="monospace">pid</fo:inline>is the pid to set.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19541488">int erl_drv_thread_create(char *name, ErlDrvTid
        *tid, void * (*func)(void *), void *arg, ErlDrvThreadOpts
        *opts)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a new thread.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">name</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">A string identifying the created thread. It is used to
            identify the thread in planned future debug functionality.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">tid</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">A pointer to a thread identifier variable.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">func</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">A pointer to a function to execute in the created thread.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">arg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">A pointer to argument to the <fo:inline font-family="monospace">func</fo:inline> function.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">opts</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">A pointer to thread options to use or <fo:inline font-family="monospace">NULL</fo:inline>.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success,
          otherwise an <fo:inline font-family="monospace">errno</fo:inline> value is returned to indicate the error.
          The newly created thread begins executing in the function pointed
          to by <fo:inline font-family="monospace">func</fo:inline>, and <fo:inline font-family="monospace">func</fo:inline> is passed <fo:inline font-family="monospace">arg</fo:inline> as
          argument. When <fo:inline font-family="monospace">erl_drv_thread_create</fo:inline> returns, the thread
          identifier of the newly created thread is available in
          <fo:inline font-family="monospace">*tid</fo:inline>. <fo:inline font-family="monospace">opts</fo:inline> can be either a <fo:inline font-family="monospace">NULL</fo:inline> pointer, or a
          pointer to an
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlDrvThreadOpts</fo:inline></fo:inline>
          structure. If <fo:inline font-family="monospace">opts</fo:inline> is a <fo:inline font-family="monospace">NULL</fo:inline> pointer, default options
          are used, otherwise the passed options are used.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You are not allowed to allocate the
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">ErlDrvThreadOpts</fo:inline></fo:inline> structure by yourself.
            It must be allocated and initialized by
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erl_drv_thread_opts_create</fo:inline></fo:inline>.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The created thread terminates either when <fo:inline font-family="monospace">func</fo:inline> returns or if
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_thread_exit</fo:inline></fo:inline>
          is called by the thread. The exit value of the thread is either
          returned from <fo:inline font-family="monospace">func</fo:inline> or passed as argument to
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_thread_exit</fo:inline></fo:inline>.
          The driver creating the thread is responsible for joining the
          thread, through <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_thread_join</fo:inline></fo:inline>,
          before the driver is unloaded. "Detached" threads cannot be created,
          that is, threads that do not need to be joined.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All created threads must be joined by the driver before
            it is unloaded. If the driver fails to join all threads
            created before it is unloaded, the runtime system
            most likely crashes when the driver code is unloaded.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19567456">void erl_drv_thread_exit(void
        *exit_value)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Terminates the calling thread with the exit value passed as
          argument. <fo:inline font-family="monospace">exit_value</fo:inline> is a pointer to an exit value or
          <fo:inline font-family="monospace">NULL</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You are only allowed to terminate threads created with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_thread_create</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The exit value can later be retrieved by another thread through
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_thread_join</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19575200">int erl_drv_thread_join(ErlDrvTid tid, void
        **exit_value)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Joins the calling thread with another thread, that is,
          the calling thread is blocked until the thread identified by
          <fo:inline font-family="monospace">tid</fo:inline> has terminated.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">tid</fo:inline> is the thread identifier of the thread to join.
          <fo:inline font-family="monospace">exit_value</fo:inline> is a pointer to a pointer to an exit value,
          or <fo:inline font-family="monospace">NULL</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise an <fo:inline font-family="monospace">errno</fo:inline>
          value is returned to indicate the error.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A thread can only be joined once. The behavior of joining
          more than once is undefined, an emulator crash is likely. If
          <fo:inline font-family="monospace">exit_value == NULL</fo:inline>, the exit value of the terminated thread
          is ignored, otherwise the exit value of the terminated thread
          is stored at <fo:inline font-family="monospace">*exit_value</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19584240">char *erl_drv_thread_name(ErlDrvTid
        tid)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a pointer to the name of the thread.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">tid</fo:inline> is a thread identifier.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is intended for debugging purposes only.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19589376">ErlDrvThreadOpts *erl_drv_thread_opts_create(char *name)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allocates and initializes a thread option structure.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">name</fo:inline> is a string identifying the created thread options.
          It is used to identify the thread options in planned future debug
          functionality.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">NULL</fo:inline> on failure. A thread option
          structure is used for passing options to
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_thread_create</fo:inline></fo:inline>.
          If the structure is not modified before it is passed to
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_thread_create</fo:inline></fo:inline>,
          the default values are used.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You are not allowed to allocate the
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">ErlDrvThreadOpts</fo:inline></fo:inline>
            structure by yourself. It must be allocated and initialized by
            <fo:inline font-family="monospace">erl_drv_thread_opts_create</fo:inline>.</fo:block>
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19599728">void erl_drv_thread_opts_destroy(ErlDrvThreadOpts *opts)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Destroys thread options previously created by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_thread_opts_create</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">opts</fo:inline> is a pointer to thread options to destroy.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19605632">ErlDrvTid erl_drv_thread_self(void)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the thread identifier of the calling thread.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19609392">ErlDrvTime erl_drv_time_offset(ErlDrvTimeUnit
        time_unit)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current time offset between
          <fo:inline font-style="italic">
          Erlang monotonic time</fo:inline> and
          <fo:inline font-style="italic">
          Erlang system time</fo:inline>
          converted into the <fo:inline font-family="monospace">time_unit</fo:inline> passed as argument.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">time_unit</fo:inline> is time unit of returned value.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">ERL_DRV_TIME_ERROR</fo:inline> if called with an invalid
          time unit argument, or if called from a thread that is not a
          scheduler thread.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">ErlDrvTime</fo:inline></fo:inline> and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">ErlDrvTimeUnit</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19618880">void *erl_drv_tsd_get(ErlDrvTSDKey
        key)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the thread-specific data
          associated with <fo:inline font-family="monospace">key</fo:inline> for the calling thread.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">key</fo:inline> is a thread-specific data key.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">NULL</fo:inline> if no data has been associated
          with <fo:inline font-family="monospace">key</fo:inline> for the calling thread.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19625264">int erl_drv_tsd_key_create(char *name,
        ErlDrvTSDKey *key)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a thread-specific data key.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">name</fo:inline> is a string identifying the created key. It is used
          to identify the key in planned future debug functionality.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">key</fo:inline> is a pointer to a thread-specific data key variable.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise an <fo:inline font-family="monospace">errno</fo:inline> value is
          returned to indicate the error. The driver creating the key is
          responsible for destroying it before the driver is unloaded.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19632144">void erl_drv_tsd_key_destroy(ErlDrvTSDKey
        key)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Destroys a thread-specific data key previously created by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_tsd_key_create</fo:inline></fo:inline>.
          All thread-specific data using this key in all threads
          must be cleared (see <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_tsd_set</fo:inline></fo:inline>)
	  before the call to <fo:inline font-family="monospace">erl_drv_tsd_key_destroy</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">key</fo:inline> is a thread-specific data key to destroy.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A destroyed key is very likely to be reused soon.
            Therefore, if you fail to clear the thread-specific
            data using this key in a thread before destroying
            the key, you will <fo:inline font-weight="bold">very likely</fo:inline> get unexpected
            errors in other parts of the system.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19640832">void erl_drv_tsd_set(ErlDrvTSDKey key, void
        *data)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets thread-specific data associated with
          <fo:inline font-family="monospace">key</fo:inline> for the calling thread. You are only allowed to set
          thread-specific data for threads while they are fully under your
          control. For example, if you set thread-specific data in a thread
          calling a driver callback function, it must be cleared, that is,
          set to <fo:inline font-family="monospace">NULL</fo:inline>, before returning from the driver callback
          function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">key</fo:inline> is a thread-specific data key.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">data</fo:inline> is a pointer to data to associate with <fo:inline font-family="monospace">key</fo:inline>
          in the calling thread.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you fail to clear thread-specific data in an
            emulator thread before letting it out of your control,
            you might never be able to clear this data with
            later unexpected errors in other parts of the system as
            a result.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is thread-safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19648960">char *erl_errno_id(int error)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the atom name of the Erlang error,
          given the error number in <fo:inline font-family="monospace">error</fo:inline>. The error atoms are
          <fo:inline font-family="monospace">einval</fo:inline>, <fo:inline font-family="monospace">enoent</fo:inline>, and so on. It can be used to make
          error terms from the driver.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19653696">int remove_driver_entry(ErlDrvEntry
        *de)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes a driver entry <fo:inline font-family="monospace">de</fo:inline> previously added with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">add_driver_entry</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Driver entries added by the <fo:inline font-family="monospace">erl_ddll</fo:inline> Erlang interface
          cannot be removed by using this interface.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19659376">void set_busy_port(ErlDrvPort port, int
        on)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets and unsets the busy state of the port. If
          <fo:inline font-family="monospace">on</fo:inline> is non-zero, the port is set to busy. If it is zero,
          the port is set to not busy. You typically want to combine
          this feature with the <fo:inline font-style="italic">
          busy port message queue</fo:inline> functionality.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Processes sending command data to the port are suspended
          if either the port or the port message queue
          is busy. Suspended processes are resumed when neither the
          port or the port message queue is busy. Command data
          is in this context data passed to the port using either
          <fo:inline font-family="monospace">Port ! {Owner, {command, Data}}</fo:inline> or
          <fo:inline font-family="monospace">port_command/[2,3]</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-style="italic">
          ERL_DRV_FLAG_SOFT_BUSY</fo:inline> has been set in the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">driver_entry</fo:inline></fo:inline>,
          data can be forced into the driver through
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:port_command(Port, Data, [force])</fo:inline></fo:inline>
          even if the driver has signaled that it is busy.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about busy port message queue functionality, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_busy_msgq_limits</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp19670448">void set_port_control_flags(ErlDrvPort port,
        int flags)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets flags for how the <fo:inline font-style="italic">
          <fo:inline font-family="monospace">control</fo:inline></fo:inline> driver entry
          function will return data to the port owner process.
          (The <fo:inline font-family="monospace">control</fo:inline> function is called from
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:port_control/3</fo:inline></fo:inline>.)</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Currently there are only two meaningful values for
          <fo:inline font-family="monospace">flags</fo:inline>: <fo:inline font-family="monospace">0</fo:inline> means that data is returned in a list,
          and <fo:inline font-family="monospace">PORT_CONTROL_FLAG_BINARY</fo:inline> means data is returned as
          a binary from <fo:inline font-family="monospace">control</fo:inline>.</fo:block>
      </fo:block>
  

  <fo:block id="idp19678416" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">driver_entry(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_ddll(3)</fo:inline></fo:inline>,
      section <fo:inline font-style="italic">How to Implement an Alternative
      Carrier for the Erlang Distribution&gt;</fo:inline> in the User's Guide</fo:block>
  
<fo:block page-break-before="always" id="idp19690720" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">driver_entry</fo:marker>driver_entry</fo:block>C Library</fo:block>
  <fo:block/>
  driver_entry
  The driver-entry structure used by Erlang drivers.
  
    
    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Use this functionality with extreme care.</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A driver callback is executed as a direct extension of the
        native code of the VM. Execution is not made in a safe environment.
        The VM <fo:inline font-weight="bold">cannot</fo:inline> provide the same services as provided when
        executing Erlang code, such as pre-emptive scheduling or memory
        protection. If the driver callback function does not behave well,
        the whole VM will misbehave.</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A driver callback that crash will crash the whole VM.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An erroneously implemented driver callback can cause a VM
            internal state inconsistency, which can cause a crash of the VM,
            or miscellaneous misbehaviors of the VM at any point after the
            call to the driver callback.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A driver callback doing
            <fo:inline font-style="italic">lengthy work</fo:inline>
            before returning degrades responsiveness of the VM, and can cause
            miscellaneous strange behaviors. Such strange behaviors
            include, but are not limited to, extreme memory usage, and bad
            load balancing between schedulers. Strange behaviors that can
            occur because of lengthy work can also vary between Erlang/OTP
            releases.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from ERTS 5.9 (Erlang/OTP R15B) the driver interface
      has been changed with larger types for the callbacks
      <fo:inline font-style="italic"><fo:inline font-family="monospace">output</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">control</fo:inline></fo:inline>, and
      <fo:inline font-style="italic"><fo:inline font-family="monospace">call</fo:inline></fo:inline>.
      See driver <fo:inline font-style="italic">
      version management</fo:inline> in
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_driver</fo:inline></fo:inline>.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Old drivers (compiled with an <fo:inline font-family="monospace">erl_driver.h</fo:inline> from an
        ERTS version earlier than 5.9) must be updated and have
        to use the extended interface (with
        <fo:inline font-style="italic">version management
        </fo:inline>).</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">driver_entry</fo:inline> structure is a C struct that all Erlang
      drivers define. It contains entry points for the Erlang driver,
      which are called by the Erlang emulator when Erlang code accesses
      the driver.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_driver</fo:inline></fo:inline> driver
      API functions need a port handle
      that identifies the driver instance (and the port in the
      emulator). This is only passed to the <fo:inline font-family="monospace">start</fo:inline> function, but
      not to the other functions. The <fo:inline font-family="monospace">start</fo:inline> function returns a
      driver-defined handle that is passed to the other functions. A
      common practice is to have the <fo:inline font-family="monospace">start</fo:inline> function allocate
      some application-defined structure and stash the <fo:inline font-family="monospace">port</fo:inline>
      handle in it, to use it later with the driver API functions.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver callback functions are called synchronously from the
      Erlang emulator. If they take too long before completing, they
      can cause time-outs in the emulator. Use the queue or
      asynchronous calls if necessary, as the emulator must be
      responsive.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver structure contains the driver name and some
      15 function pointers, which are called at different
      times by the emulator.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The only exported function from the driver is
      <fo:inline font-family="monospace">driver_init</fo:inline>. This function returns the <fo:inline font-family="monospace">driver_entry</fo:inline>
      structure that points to the other functions in the driver. The
      <fo:inline font-family="monospace">driver_init</fo:inline> function is declared with a macro,
      <fo:inline font-family="monospace">DRIVER_INIT(drivername)</fo:inline>. (This is because different
      operating systems have different names for it.)</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When writing a driver in C++, the driver entry is to be of
      <fo:inline font-family="monospace">"C"</fo:inline> linkage. One way to do this is to put the
      following line somewhere before the driver entry:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
extern "C" DRIVER_INIT(drivername);</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the driver has passed the <fo:inline font-family="monospace">driver_entry</fo:inline> over to
      the emulator, the driver is <fo:inline font-weight="bold">not</fo:inline> allowed to modify the
      <fo:inline font-family="monospace">driver_entry</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If compiling a driver for static inclusion through
      <fo:inline font-family="monospace">--enable-static-drivers</fo:inline>, you must define
      <fo:inline font-family="monospace">STATIC_ERLANG_DRIVER</fo:inline> before the <fo:inline font-family="monospace">DRIVER_INIT</fo:inline> declaration.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do <fo:inline font-weight="bold">not</fo:inline> declare the <fo:inline font-family="monospace">driver_entry</fo:inline> <fo:inline font-family="monospace">const</fo:inline>.
        This because the emulator must
        modify the <fo:inline font-family="monospace">handle</fo:inline> and the <fo:inline font-family="monospace">handle2</fo:inline>
        fields. A statically allocated, and <fo:inline font-family="monospace">const</fo:inline>-declared
        <fo:inline font-family="monospace">driver_entry</fo:inline> can be located in
        read-only memory, which causes the emulator to crash.</fo:block>
    </fo:block>
  

  <fo:block id="idp19725040" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ErlDrvEntry</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef struct erl_drv_entry {
    int (*init)(void);          /* Called at system startup for statically
                                   linked drivers, and after loading for
                                   dynamically loaded drivers */
#ifndef ERL_SYS_DRV
    ErlDrvData (*start)(ErlDrvPort port, char *command);
                                /* Called when open_port/2 is invoked,
                                   return value -1 means failure */
#else
    ErlDrvData (*start)(ErlDrvPort port, char *command, SysDriverOpts* opts);
                                /* Special options, only for system driver */
#endif
    void (*stop)(ErlDrvData drv_data);
                                /* Called when port is closed, and when the
                                   emulator is halted */
    void (*output)(ErlDrvData drv_data, char *buf, ErlDrvSizeT len);
                                /* Called when we have output from Erlang to
                                   the port */
    void (*ready_input)(ErlDrvData drv_data, ErlDrvEvent event); 
                                /* Called when we have input from one of
                                   the driver's handles */
    void (*ready_output)(ErlDrvData drv_data, ErlDrvEvent event);  
                                /* Called when output is possible to one of
                                   the driver's handles */
    char *driver_name;          /* Name supplied as command in
                                   erlang:open_port/2 */
    void (*finish)(void);       /* Called before unloading the driver -
                                   dynamic drivers only */
    void *handle;               /* Reserved, used by emulator internally */
    ErlDrvSSizeT (*control)(ErlDrvData drv_data, unsigned int command,
                            char *buf, ErlDrvSizeT len,
			    char **rbuf, ErlDrvSizeT rlen);
                                /* "ioctl" for drivers - invoked by
                                   port_control/3 */
    void (*timeout)(ErlDrvData drv_data);
                                /* Handling of time-out in driver */
    void (*outputv)(ErlDrvData drv_data, ErlIOVec *ev);
                                /* Called when we have output from Erlang
                                   to the port */
    void (*ready_async)(ErlDrvData drv_data, ErlDrvThreadData thread_data);
    void (*flush)(ErlDrvData drv_data);
                                /* Called when the port is about to be
                                   closed, and there is data in the
                                   driver queue that must be flushed
                                   before 'stop' can be called */
    ErlDrvSSizeT (*call)(ErlDrvData drv_data, unsigned int command,
                         char *buf, ErlDrvSizeT len,
			 char **rbuf, ErlDrvSizeT rlen, unsigned int *flags);
                                /* Works mostly like 'control', a synchronous
                                   call into the driver */
    void (*event)(ErlDrvData drv_data, ErlDrvEvent event,
                  ErlDrvEventData event_data);
                                /* Called when an event selected by
                                   driver_event() has occurred */
    int extended_marker;        /* ERL_DRV_EXTENDED_MARKER */
    int major_version;          /* ERL_DRV_EXTENDED_MAJOR_VERSION */
    int minor_version;          /* ERL_DRV_EXTENDED_MINOR_VERSION */
    int driver_flags;           /* ERL_DRV_FLAGs */
    void *handle2;              /* Reserved, used by emulator internally */
    void (*process_exit)(ErlDrvData drv_data, ErlDrvMonitor *monitor);
                                /* Called when a process monitor fires */
    void (*stop_select)(ErlDrvEvent event, void* reserved);
                                /* Called to close an event object */
 } ErlDrvEntry;</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int (*init)(void)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">       
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called directly after the driver has been loaded by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_ddll:load_driver/2</fo:inline></fo:inline> (actually when the driver is
          added to the driver list). The driver is to return <fo:inline font-family="monospace">0</fo:inline>, or, if
          the driver cannot initialize, <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">ErlDrvData (*start)(ErlDrvPort port, char* command)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called when the driver is instantiated, when
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:open_port/2</fo:inline></fo:inline> is called.
          The driver is to return a number &gt;= 0 or a pointer, or, if the
          driver cannot be started, one of three error codes:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_DRV_ERROR_GENERAL</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">General error, no error code</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_DRV_ERROR_ERRNO</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Error with error code in <fo:inline font-family="monospace">errno</fo:inline></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_DRV_ERROR_BADARG</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Error, <fo:inline font-family="monospace">badarg</fo:inline></fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error code is returned, the port is not started.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">void (*stop)(ErlDrvData drv_data)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called when the port is closed, with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:port_close/1</fo:inline></fo:inline> or <fo:inline font-family="monospace">Port ! {self(), close}</fo:inline>.
          Notice that terminating the port owner process also closes the
          port. If <fo:inline font-family="monospace">drv_data</fo:inline> is a pointer to memory allocated in
          <fo:inline font-family="monospace">start</fo:inline>, then <fo:inline font-family="monospace">stop</fo:inline> is the place to deallocate that
          memory.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">void (*output)(ErlDrvData drv_data, char *buf, ErlDrvSizeT len)</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called when an Erlang process has sent data to the port. The data is
          pointed to by <fo:inline font-family="monospace">buf</fo:inline>, and is <fo:inline font-family="monospace">len</fo:inline> bytes. Data is sent to
          the port with <fo:inline font-family="monospace">Port ! {self(), {command, Data}}</fo:inline> or with
          <fo:inline font-family="monospace">erlang:port_command/2</fo:inline>. Depending on how the port was
          opened, it is to be either a list of integers <fo:inline font-family="monospace">0...255</fo:inline> or a
          binary. See <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:open_port/2</fo:inline></fo:inline> and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:port_command/2</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">void (*ready_input)(ErlDrvData drv_data, ErlDrvEvent event)</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">void (*ready_output)(ErlDrvData drv_data, ErlDrvEvent event)</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called when a driver event (specified in parameter
          <fo:inline font-family="monospace">event</fo:inline>) is signaled. This is used to help
          asynchronous drivers "wake up" when something occurs.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On Unix the <fo:inline font-family="monospace">event</fo:inline> is a pipe or socket handle (or
          something that the <fo:inline font-family="monospace">select</fo:inline> system call understands).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On Windows the <fo:inline font-family="monospace">event</fo:inline> is an <fo:inline font-family="monospace">Event</fo:inline> or <fo:inline font-family="monospace">Semaphore</fo:inline>
          (or something that the <fo:inline font-family="monospace">WaitForMultipleObjects</fo:inline> API
          function understands). (Some trickery in the emulator allows
          more than the built-in limit of 64 <fo:inline font-family="monospace">Events</fo:inline> to be used.)</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To use this with threads and asynchronous routines, create a
          pipe on Unix and an <fo:inline font-family="monospace">Event</fo:inline> on Windows. When the routine
          completes, write to the pipe (use <fo:inline font-family="monospace">SetEvent</fo:inline> on
          Windows), this makes the emulator call
          <fo:inline font-family="monospace">ready_input</fo:inline> or <fo:inline font-family="monospace">ready_output</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">False events can occur. That is, calls to <fo:inline font-family="monospace">ready_input</fo:inline>
          or <fo:inline font-family="monospace">ready_output</fo:inline> although no real events are signaled. In
          reality, it is rare (and OS-dependant), but a robust driver
          must nevertheless be able to handle such cases.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">char *driver_name</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver name. It must correspond to the atom used in
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:open_port/2</fo:inline></fo:inline>, and the name of the driver
          library file (without the extension).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">void (*finish)(void)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called by the <fo:inline font-family="monospace">erl_ddll</fo:inline> driver when the
          driver is unloaded. (It is only called in dynamic drivers.)</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver is only unloaded as a result of calling
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_ddll:unload_driver/1</fo:inline></fo:inline>,
          or when the emulator halts.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">void *handle</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This field is reserved for the emulator's internal use. The
          emulator will modify this field, so it is important
          that the <fo:inline font-family="monospace">driver_entry</fo:inline> is not declared <fo:inline font-family="monospace">const</fo:inline>.</fo:block> 
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">ErlDrvSSizeT (*control)(ErlDrvData drv_data, unsigned int command,
        char *buf, ErlDrvSizeT len, char **rbuf, ErlDrvSizeT rlen)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A special routine invoked with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:port_control/3</fo:inline></fo:inline>.
          It works a little like an "ioctl" for
          Erlang drivers. The data specified to <fo:inline font-family="monospace">port_control/3</fo:inline>
          arrives in <fo:inline font-family="monospace">buf</fo:inline> and <fo:inline font-family="monospace">len</fo:inline>. The driver can send
          data back, using <fo:inline font-family="monospace">*rbuf</fo:inline> and <fo:inline font-family="monospace">rlen</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the fastest way of calling a driver and get a
          response. It makes no context switch in the Erlang
          emulator and requires no message passing. It is suitable
          for calling C function to get faster execution, when Erlang
          is too slow.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the driver wants to return data, it is to return it in
          <fo:inline font-family="monospace">rbuf</fo:inline>. When <fo:inline font-family="monospace">control</fo:inline> is called,
          <fo:inline font-family="monospace">*rbuf</fo:inline> points to a default buffer of <fo:inline font-family="monospace">rlen</fo:inline> bytes, which
          can be used to return data. Data is returned differently depending on
          the port control flags (those that are set with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_driver:set_port_control_flags</fo:inline></fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the flag is set to <fo:inline font-family="monospace">PORT_CONTROL_FLAG_BINARY</fo:inline>,
          a binary is returned. Small binaries can be returned by writing
          the raw data into the default buffer. A binary can also be
          returned by setting <fo:inline font-family="monospace">*rbuf</fo:inline> to point to a binary allocated with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_driver:driver_alloc_binary</fo:inline></fo:inline>.
          This binary is freed automatically after <fo:inline font-family="monospace">control</fo:inline> has returned.
          The driver can retain the binary for <fo:inline font-weight="bold">read only</fo:inline> access with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_driver:driver_binary_inc_refc</fo:inline></fo:inline> to be freed later
          with <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_driver:driver_free_binary</fo:inline></fo:inline>.
          It is never allowed to change the binary after <fo:inline font-family="monospace">control</fo:inline> has
          returned. If <fo:inline font-family="monospace">*rbuf</fo:inline> is set to <fo:inline font-family="monospace">NULL</fo:inline>, an empty list is
          returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the flag is set to <fo:inline font-family="monospace">0</fo:inline>, data is returned as a
          list of integers. Either use the default buffer or set
          <fo:inline font-family="monospace">*rbuf</fo:inline> to point to a larger buffer allocated with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_driver:driver_alloc</fo:inline></fo:inline>. The
          buffer is freed automatically after <fo:inline font-family="monospace">control</fo:inline> has returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using binaries is faster if more than a few bytes are returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is the number of bytes returned in <fo:inline font-family="monospace">*rbuf</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">void (*timeout)(ErlDrvData drv_data)</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called any time after the driver's timer reaches <fo:inline font-family="monospace">0</fo:inline>.
          The timer is activated with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_driver:driver_set_timer</fo:inline></fo:inline>. No priorities or
          ordering exist among drivers, so if several drivers time out at
          the same time, anyone of them is called first.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">void (*outputv)(ErlDrvData drv_data, ErlIOVec *ev)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called whenever the port is written to. If
          it is <fo:inline font-family="monospace">NULL</fo:inline>, the <fo:inline font-family="monospace">output</fo:inline> function is called
          instead. This function is faster than <fo:inline font-family="monospace">output</fo:inline>, as
          it takes an <fo:inline font-family="monospace">ErlIOVec</fo:inline> directly, which requires no
          copying of the data. The port is to be in binary mode, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:open_port/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ErlIOVec</fo:inline> contains both a <fo:inline font-family="monospace">SysIOVec</fo:inline>,
          suitable for <fo:inline font-family="monospace">writev</fo:inline>, and one or more binaries. If
          these binaries are to be retained when the driver returns
          from <fo:inline font-family="monospace">outputv</fo:inline>, they can be queued (using, for example,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_driver:driver_enq_bin</fo:inline></fo:inline>)
          or, if they are kept in a static or global
          variable, the reference counter can be incremented.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">void (*ready_async)(ErlDrvData drv_data, ErlDrvThreadData
        thread_data)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called after an asynchronous call has completed.
          The asynchronous call is started with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_driver:driver_async</fo:inline></fo:inline>.
          This function is called from the Erlang emulator thread, as
          opposed to the asynchronous function, which is called in
          some thread (if multi-threading is enabled).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">void (*flush)(ErlDrvData drv_data)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called when the port is about to be closed,
          and there is data in the driver queue that must be flushed
          before 'stop' can be called.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlDrvSSizeT (*call)(ErlDrvData drv_data,
        unsigned int command, char *buf, ErlDrvSizeT len, char **rbuf,
        ErlDrvSizeT rlen, unsigned int *flags)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called from <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:port_call/3</fo:inline></fo:inline>.
          It works a lot like the <fo:inline font-family="monospace">control</fo:inline> callback, but uses the
          external term format for input and output.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">command</fo:inline> is an integer, obtained from the call from
          Erlang (the second argument to <fo:inline font-family="monospace">erlang:port_call/3</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">buf</fo:inline> and <fo:inline font-family="monospace">len</fo:inline> provide the arguments to the call
          (the third argument to <fo:inline font-family="monospace">erlang:port_call/3</fo:inline>). They can
          be decoded using <fo:inline font-family="monospace">ei</fo:inline> functions.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">rbuf</fo:inline> points to a return buffer, <fo:inline font-family="monospace">rlen</fo:inline> bytes
          long. The return data is to be a valid Erlang term in the
          external (binary) format. This is converted to an Erlang
          term and returned by <fo:inline font-family="monospace">erlang:port_call/3</fo:inline> to the
          caller. If more space than <fo:inline font-family="monospace">rlen</fo:inline> bytes is needed to
          return data, <fo:inline font-family="monospace">*rbuf</fo:inline> can be set to memory allocated with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_driver:driver_alloc</fo:inline></fo:inline>.
          This memory is freed automatically after <fo:inline font-family="monospace">call</fo:inline> has returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is the number of bytes returned in
          <fo:inline font-family="monospace">*rbuf</fo:inline>. If <fo:inline font-family="monospace">ERL_DRV_ERROR_GENERAL</fo:inline> is returned
          (or in fact, anything &lt; 0), <fo:inline font-family="monospace">erlang:port_call/3</fo:inline>
          throws a <fo:inline font-family="monospace">BAD_ARG</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">void (*event)(ErlDrvData drv_data, ErlDrvEvent event,
        ErlDrvEventData event_data)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Intentionally left undocumented.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int extended_marker</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This field is either to be equal to <fo:inline font-family="monospace">ERL_DRV_EXTENDED_MARKER</fo:inline>
          or <fo:inline font-family="monospace">0</fo:inline>. An old driver (not aware of the extended driver
          interface) is to set this field to <fo:inline font-family="monospace">0</fo:inline>. If this field is
          <fo:inline font-family="monospace">0</fo:inline>, all the following fields <fo:inline font-weight="bold">must</fo:inline> also be <fo:inline font-family="monospace">0</fo:inline>,
          or <fo:inline font-family="monospace">NULL</fo:inline> if it is a pointer field.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int major_version</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This field is to equal <fo:inline font-family="monospace">ERL_DRV_EXTENDED_MAJOR_VERSION</fo:inline> if
          field <fo:inline font-family="monospace">extended_marker</fo:inline> equals
          <fo:inline font-family="monospace">ERL_DRV_EXTENDED_MARKER</fo:inline>.</fo:block> 
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int minor_version</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This field is to equal <fo:inline font-family="monospace">ERL_DRV_EXTENDED_MINOR_VERSION</fo:inline> if
          field <fo:inline font-family="monospace">extended_marker</fo:inline> equals
          <fo:inline font-family="monospace">ERL_DRV_EXTENDED_MARKER</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int driver_flags</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This field is used to pass driver capability and other
          information to the runtime system. If
          field <fo:inline font-family="monospace">extended_marker</fo:inline> equals <fo:inline font-family="monospace">ERL_DRV_EXTENDED_MARKER</fo:inline>,
          it is to contain <fo:inline font-family="monospace">0</fo:inline> or driver flags (<fo:inline font-family="monospace">ERL_DRV_FLAG_*</fo:inline>)
          OR'ed bitwise. The following driver flags exist:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_DRV_FLAG_USE_PORT_LOCKING</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime system uses port-level locking on
              all ports executing this driver instead of driver-level
              locking when the driver is run in a runtime
              system with SMP support. For more information, see
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erl_driver</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_DRV_FLAG_SOFT_BUSY</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Marks that driver instances can handle being called
              in the <fo:inline font-style="italic"><fo:inline font-family="monospace">output</fo:inline></fo:inline> and/or
              <fo:inline font-style="italic"><fo:inline font-family="monospace">outputv</fo:inline></fo:inline> callbacks
              although a driver instance has marked itself as busy (see
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erl_driver:set_busy_port</fo:inline></fo:inline>).
              As from ERTS 5.7.4 this flag is required for drivers used
              by the Erlang distribution (the behavior has always been
              required by drivers used by the distribution).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_DRV_FLAG_NO_BUSY_MSGQ</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Disables busy port message queue functionality. For
              more information, see
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erl_driver:erl_drv_busy_msgq_limits</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_DRV_FLAG_USE_INIT_ACK</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When this flag is specified, the linked-in driver must manually
              acknowledge that the port has been successfully started using
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erl_driver:erl_drv_init_ack()</fo:inline></fo:inline>.
              This allows the implementor to make the
              <fo:inline font-family="monospace">erlang:open_port</fo:inline> exit with <fo:inline font-family="monospace">badarg</fo:inline> after some
              initial asynchronous initialization has been done.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">void *handle2</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This field is reserved for the emulator's internal use. The
          emulator modifies this field, so it is important
          that the <fo:inline font-family="monospace">driver_entry</fo:inline> is not declared <fo:inline font-family="monospace">const</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">void (*process_exit)(ErlDrvData drv_data, ErlDrvMonitor *monitor)</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called when a monitored process exits. The
          <fo:inline font-family="monospace">drv_data</fo:inline> is the data associated with the port for which
          the process is monitored (using
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_driver:driver_monitor_process</fo:inline></fo:inline>)
          and the <fo:inline font-family="monospace">monitor</fo:inline> corresponds to the <fo:inline font-family="monospace">ErlDrvMonitor</fo:inline>
          structure filled
          in when creating the monitor. The driver interface function
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_driver:driver_get_monitored_process</fo:inline></fo:inline>
          can be used to retrieve the process ID of the exiting process as
          an <fo:inline font-family="monospace">ErlDrvTermData</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">
        <fo:inline font-family="monospace">void (*stop_select)(ErlDrvEvent event, void* reserved)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called on behalf of
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_driver:driver_select</fo:inline></fo:inline>
          when it is safe to close an event object.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A typical implementation on Unix is to do
          <fo:inline font-family="monospace">close((int)event)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">reserved</fo:inline> is intended for future use and is to be
          ignored.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In contrast to most of the other callback functions,
          <fo:inline font-family="monospace">stop_select</fo:inline> is called independent of any port. No
          <fo:inline font-family="monospace">ErlDrvData</fo:inline> argument is passed to the function. No
          driver lock or port lock is guaranteed to be held. The port that
          called <fo:inline font-family="monospace">driver_select</fo:inline> can even be closed at the
          time <fo:inline font-family="monospace">stop_select</fo:inline> is called. But it can also be
          the case that <fo:inline font-family="monospace">stop_select</fo:inline> is called directly by
          <fo:inline font-family="monospace">erl_driver:driver_select</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is not allowed to call any functions in the
          <fo:inline font-style="italic">driver API</fo:inline> from
          <fo:inline font-family="monospace">stop_select</fo:inline>. This strict limitation is because the
          volatile context that <fo:inline font-family="monospace">stop_select</fo:inline> can be called.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp19878592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">erl_driver(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_ddll(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp19888928" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erts_alloc</fo:marker>erts_alloc</fo:block>C Library</fo:block>
  <fo:block/>
  erts_alloc
  An Erlang runtime system internal memory allocator library.
  
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erts_alloc</fo:inline> is an Erlang runtime system internal memory
      allocator library. <fo:inline font-family="monospace">erts_alloc</fo:inline> provides the Erlang
      runtime system with a number of memory allocators.</fo:block>
  

  <fo:block id="idp19891904" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Allocators</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following allocators are present:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">temp_alloc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Allocator used for temporary allocations.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eheap_alloc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Allocator used for Erlang heap data, such as Erlang process heaps.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">binary_alloc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Allocator used for Erlang binary data.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ets_alloc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Allocator used for <fo:inline font-family="monospace">ets</fo:inline> data.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">driver_alloc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Allocator used for driver data.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">literal_alloc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Allocator used for constant terms in Erlang code.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sl_alloc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Allocator used for memory blocks that are expected to be
        short-lived.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ll_alloc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Allocator used for memory blocks that are expected to be
        long-lived, for example, Erlang code.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">fix_alloc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A fast allocator used for some frequently used
       fixed size data types.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">exec_alloc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Allocator used by the <fo:inline font-style="italic"><fo:inline font-family="monospace">HiPE</fo:inline></fo:inline>
        application for native executable code on specific architectures
        (x86_64).</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">std_alloc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Allocator used for most memory blocks not allocated through any of
        the other allocators described above.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sys_alloc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">This is normally the default <fo:inline font-family="monospace">malloc</fo:inline> implementation
        used on the specific OS.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">mseg_alloc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A memory segment allocator. It is used by other
        allocators for allocating memory segments and is only
        available on systems that have the <fo:inline font-family="monospace">mmap</fo:inline> system
        call. Memory segments that are deallocated are kept for a
        while in a segment cache before they are destroyed. When
        segments are allocated, cached segments are used if possible
        instead of creating new segments. This to reduce
        the number of system calls made.</fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">sys_alloc</fo:inline> and <fo:inline font-family="monospace">literal_alloc</fo:inline> are always enabled and
      cannot be disabled. <fo:inline font-family="monospace">exec_alloc</fo:inline> is only available if it is needed
      and cannot be disabled. <fo:inline font-family="monospace">mseg_alloc</fo:inline> is always enabled if it is
      available and an allocator that uses it is enabled. All other
      allocators can be <fo:inline font-style="italic">enabled or disabled</fo:inline>.
      By default all allocators are enabled.
      When an allocator is disabled, <fo:inline font-family="monospace">sys_alloc</fo:inline> is used instead of
      the disabled allocator.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The main idea with the <fo:inline font-family="monospace">erts_alloc</fo:inline> library is to separate
      memory blocks that are used differently into different memory
      areas, to achieve less memory fragmentation. By
      putting less effort in finding a good fit for memory blocks that
      are frequently allocated than for those less frequently
      allocated, a performance gain can be achieved.</fo:block>
  

  <fo:block id="idp19916112" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">The alloc_util Framework</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Internally a framework called <fo:inline font-family="monospace">alloc_util</fo:inline> is used for
      implementing allocators. <fo:inline font-family="monospace">sys_alloc</fo:inline> and
      <fo:inline font-family="monospace">mseg_alloc</fo:inline> do not use this framework, so the
      following does <fo:inline font-weight="bold">not</fo:inline> apply to them.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An allocator manages multiple areas, called carriers, in which
      memory blocks are placed. A carrier is either placed in a
      separate memory segment (allocated through <fo:inline font-family="monospace">mseg_alloc</fo:inline>), or in
      the heap segment (allocated through <fo:inline font-family="monospace">sys_alloc</fo:inline>).</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Multiblock carriers are used for storage of several blocks.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Singleblock carriers are used for storage of one block.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Blocks that are larger than the value of the singleblock carrier
          threshold (<fo:inline font-style="italic"><fo:inline font-family="monospace">sbct</fo:inline></fo:inline>) parameter
          are placed in singleblock carriers.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Blocks that are smaller than the value of parameter <fo:inline font-family="monospace">sbct</fo:inline>
          are placed in multiblock carriers.</fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally an allocator creates a "main multiblock
      carrier". Main multiblock carriers are never deallocated. The
      size of the main multiblock carrier is determined by the value of
      parameter <fo:inline font-style="italic"><fo:inline font-family="monospace">mmbcs</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sizes of multiblock carriers
      allocated through <fo:inline font-family="monospace">mseg_alloc</fo:inline> are decided based on the
      following parameters:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The values of the largest multiblock carrier size
        (<fo:inline font-style="italic"><fo:inline font-family="monospace">lmbcs</fo:inline></fo:inline>)</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The smallest multiblock carrier size
        (<fo:inline font-style="italic"><fo:inline font-family="monospace">smbcs</fo:inline></fo:inline>)</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The multiblock carrier growth stages
        (<fo:inline font-style="italic"><fo:inline font-family="monospace">mbcgs</fo:inline></fo:inline>)</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">nc</fo:inline> is the current number of multiblock carriers (the main
      multiblock carrier excluded) managed by an allocator, the size
      of the next <fo:inline font-family="monospace">mseg_alloc</fo:inline> multiblock carrier allocated by
      this allocator is roughly
      <fo:inline font-family="monospace">smbcs+nc*(lmbcs-smbcs)/mbcgs</fo:inline> when
      <fo:inline font-family="monospace">nc &lt;= mbcgs</fo:inline>,
      and <fo:inline font-family="monospace">lmbcs</fo:inline> when <fo:inline font-family="monospace">nc &gt; mbcgs</fo:inline>. If the value of
      parameter <fo:inline font-family="monospace">sbct</fo:inline> is larger than the value of parameter
      <fo:inline font-family="monospace">lmbcs</fo:inline>, the allocator may have to create
      multiblock carriers that are larger than the value of
      parameter <fo:inline font-family="monospace">lmbcs</fo:inline>, though.
      Singleblock carriers allocated through <fo:inline font-family="monospace">mseg_alloc</fo:inline> are sized
      to whole pages.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sizes of carriers allocated through <fo:inline font-family="monospace">sys_alloc</fo:inline> are
      decided based on the value of the <fo:inline font-family="monospace">sys_alloc</fo:inline> carrier size
      (<fo:inline font-style="italic"><fo:inline font-family="monospace">ycs</fo:inline></fo:inline>) parameter. The size of
      a carrier is the least number of multiples of the value of
      parameter <fo:inline font-family="monospace">ycs</fo:inline> satisfying the request.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Coalescing of free blocks are always performed immediately.
      Boundary tags (headers and footers) in free blocks are used,
      which makes the time complexity for coalescing constant.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The memory allocation strategy
      used for multiblock carriers by an allocator can be
      configured using parameter <fo:inline font-style="italic"><fo:inline font-family="monospace">as</fo:inline></fo:inline>.
      The following strategies are available:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">Best fit</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Strategy: Find the smallest block satisfying the
          requested block size.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Implementation: A balanced binary search tree is
          used. The time complexity is proportional to log N, where
          N is the number of sizes of free blocks.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Address order best fit</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Strategy: Find the smallest block satisfying the
          requested block size. If multiple blocks are found, choose
          the one with the lowest address.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Implementation: A balanced binary search tree is
          used. The time complexity is proportional to log N, where
          N is the number of free blocks.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Address order first fit</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Strategy: Find the block with the lowest address satisfying the
          requested block size.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Implementation: A balanced binary search tree is
          used. The time complexity is proportional to log N, where
          N is the number of free blocks.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Address order first fit carrier best fit</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Strategy: Find the <fo:inline font-weight="bold">carrier</fo:inline> with the lowest address that
          can satisfy the requested block size, then find a block within
          that carrier using the "best fit" strategy.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Implementation: Balanced binary search trees are
          used. The time complexity is proportional to log N, where
          N is the number of free blocks.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Address order first fit carrier address order best fit</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Strategy: Find the <fo:inline font-weight="bold">carrier</fo:inline> with the lowest address that
          can satisfy the requested block size, then find a block within
          that carrier using the "address order best fit" strategy.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Implementation: Balanced binary search trees are
          used. The time complexity is proportional to log N, where
          N is the number of free blocks.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Good fit</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Strategy: Try to find the best fit, but settle for the best fit
          found during a limited search.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Implementation: The implementation uses segregated free
          lists with a maximum block search depth (in each list)
          to find a good fit fast. When the maximum block
          search depth is small (by default 3), this implementation
          has a time complexity that is constant. The maximum block
          search depth can be configured using parameter
          <fo:inline font-style="italic"><fo:inline font-family="monospace">mbsd</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">A fit</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Strategy: Do not search for a fit, inspect only one free
          block to see if it satisfies the request. This strategy is
          only intended to be used for temporary allocations.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Implementation: Inspect the first block in a free-list.
          If it satisfies the request, it is used, otherwise a new
          carrier is created. The implementation has a time
          complexity that is constant.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from ERTS 5.6.1 the emulator refuses to
          use this strategy on other allocators than <fo:inline font-family="monospace">temp_alloc</fo:inline>.
          This because it only causes problems for other allocators.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Apart from the ordinary allocators described above, some
      pre-allocators are used for some specific data types. These
      pre-allocators pre-allocate a fixed amount of memory for certain data
      types when the runtime system starts. As long as pre-allocated memory
      is available, it is used. When no pre-allocated memory is
      available, memory is allocated in ordinary allocators. These
      pre-allocators are typically much faster than the ordinary allocators,
      but can only satisfy a limited number of requests.</fo:block>
  

  <fo:block id="idp19964256" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">System Flags Effecting erts_alloc</fo:block>
    
    
    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only use these flags if you are sure what you are
        doing. Unsuitable settings can cause serious performance
        degradation and even a system crash at any time during
        operation.</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Memory allocator system flags have the following syntax:
      <fo:inline font-family="monospace">+M&lt;S&gt;&lt;P&gt; &lt;V&gt;</fo:inline>,
      where <fo:inline font-family="monospace">&lt;S&gt;</fo:inline> is a letter identifying a subsystem,
      <fo:inline font-family="monospace">&lt;P&gt;</fo:inline> is a parameter, and <fo:inline font-family="monospace">&lt;V&gt;</fo:inline> is the
      value to use. The flags can be passed to the Erlang emulator
      (<fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>) as command-line
      arguments.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">System flags effecting specific allocators have an uppercase
      letter as <fo:inline font-family="monospace">&lt;S&gt;</fo:inline>. The following letters are used for
      the allocators:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">B: binary_alloc</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">D: std_alloc</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">E: ets_alloc</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">F: fix_alloc</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">H: eheap_alloc</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">I: literal_alloc</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">L: ll_alloc</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">M: mseg_alloc</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">R: driver_alloc</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">S: sl_alloc</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">T: temp_alloc</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">X: exec_alloc</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Y: sys_alloc</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block id="idp19978544" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Flags for Configuration of mseg_alloc</fo:block>
      
      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+MMamcbf &lt;size&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Absolute maximum cache bad fit (in kilobytes). A segment in the
            memory segment cache is not reused if its size exceeds the
            requested size with more than the value of this
            parameter. Defaults to <fo:inline font-family="monospace">4096</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+MMrmcbf &lt;ratio&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Relative maximum cache bad fit (in percent). A segment in the
            memory segment cache is not reused if its size exceeds the
            requested size with more than relative maximum cache bad fit
            percent of the requested size. Defaults to <fo:inline font-family="monospace">20</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+MMsco true|false</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-style="italic">super carrier</fo:inline> only flag.
            Defaults to <fo:inline font-family="monospace">true</fo:inline>. When a super carrier is used and this
            flag is <fo:inline font-family="monospace">true</fo:inline>, <fo:inline font-family="monospace">mseg_alloc</fo:inline> only creates carriers in
            the super carrier. Notice that the <fo:inline font-family="monospace">alloc_util</fo:inline> framework can
            create <fo:inline font-family="monospace">sys_alloc</fo:inline> carriers, so if you want all carriers to
            be created in the super carrier, you therefore want to disable use
            of <fo:inline font-family="monospace">sys_alloc</fo:inline> carriers by also passing
            <fo:inline font-style="italic"><fo:inline font-family="monospace">+Musac false</fo:inline></fo:inline>. When
            the flag is <fo:inline font-family="monospace">false</fo:inline>, <fo:inline font-family="monospace">mseg_alloc</fo:inline> tries to create carriers
            outside of the super carrier when the super carrier is full.</fo:block>
	  <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Setting this flag to <fo:inline font-family="monospace">false</fo:inline> is not supported
              on all systems. The flag is then ignored.</fo:block>
          </fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+MMscrfsd &lt;amount&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-style="italic">super carrier</fo:inline> reserved
            free segment descriptors. Defaults to <fo:inline font-family="monospace">65536</fo:inline>.
            This parameter determines the amount of memory to reserve for
            free segment descriptors used by the super carrier. If the system
            runs out of reserved memory for free segment descriptors, other
            memory is used. This can however cause fragmentation issues,
            so you want to ensure that this never happens. The maximum amount
            of free segment descriptors used can be retrieved from the
            <fo:inline font-family="monospace">erts_mmap</fo:inline> tuple part of the result from calling
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">erlang:system_info({allocator, mseg_alloc})</fo:inline></fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+MMscrpm true|false</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-style="italic">super carrier</fo:inline> reserve
            physical memory flag. Defaults to <fo:inline font-family="monospace">true</fo:inline>. When this flag is
            <fo:inline font-family="monospace">true</fo:inline>, physical memory is reserved for the whole super
            carrier at once when it is created. The reservation is after that
            left unchanged. When this flag is set to <fo:inline font-family="monospace">false</fo:inline>, only virtual
            address space is reserved for the super carrier upon creation.
            The system attempts to reserve physical memory upon carrier
            creations in the super carrier, and attempt to unreserve physical
            memory upon carrier destructions in the super carrier.</fo:block>
          <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">What reservation of physical memory means, highly
              depends on the operating system, and how it is configured. For
              example, different memory overcommit settings on Linux drastically
              change the behavior.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Setting this flag to <fo:inline font-family="monospace">false</fo:inline> is possibly not supported on
              all systems. The flag is then ignored.</fo:block>
          </fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+MMscs &lt;size in MB&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets super carrier size (in MB). Defaults to <fo:inline font-family="monospace">0</fo:inline>, that is,
            the super carrier is by default disabled. The super
            carrier is a large continuous area in the virtual address space.
            <fo:inline font-family="monospace">mseg_alloc</fo:inline> always tries to create new carriers in the super
            carrier if it exists. Notice that the <fo:inline font-family="monospace">alloc_util</fo:inline> framework
            can create <fo:inline font-family="monospace">sys_alloc</fo:inline> carriers. For more information, see
            <fo:inline font-style="italic"><fo:inline font-family="monospace">+MMsco</fo:inline></fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+MMmcs &lt;amount&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum cached segments. The maximum number of memory segments
            stored in the memory segment cache. Valid range is <fo:inline font-family="monospace">[0, 30]</fo:inline>.
            Defaults to <fo:inline font-family="monospace">10</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp20013104" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Flags for Configuration of sys_alloc</fo:block>
      
      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+MYe true</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables <fo:inline font-family="monospace">sys_alloc</fo:inline>.</fo:block>
          <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">sys_alloc</fo:inline> cannot be disabled.</fo:block>
          </fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+MYm libc</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">malloc</fo:inline> library to use. Only
            <fo:inline font-family="monospace">libc</fo:inline> is available. <fo:inline font-family="monospace">libc</fo:inline> enables the standard
            <fo:inline font-family="monospace">libc</fo:inline> <fo:inline font-family="monospace">malloc</fo:inline> implementation. By default <fo:inline font-family="monospace">libc</fo:inline>
            is used.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+MYtt &lt;size&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Trim threshold size (in kilobytes). This is the maximum amount
            of free memory at the top of the heap (allocated by
            <fo:inline font-family="monospace">sbrk</fo:inline>) that is kept by <fo:inline font-family="monospace">malloc</fo:inline> (not
            released to the operating system). When the amount of free
            memory at the top of the heap exceeds the trim threshold,
            <fo:inline font-family="monospace">malloc</fo:inline> releases it (by calling <fo:inline font-family="monospace">sbrk</fo:inline>).
            Trim threshold is specified in kilobytes.
            Defaults to <fo:inline font-family="monospace">128</fo:inline>.</fo:block>
          <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This flag has effect only when the emulator is linked with
              the GNU C library, and uses its <fo:inline font-family="monospace">malloc</fo:inline> implementation.</fo:block>
          </fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+MYtp &lt;size&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Top pad size (in kilobytes). This is the amount of extra
            memory that is allocated by <fo:inline font-family="monospace">malloc</fo:inline> when
            <fo:inline font-family="monospace">sbrk</fo:inline> is called to get more memory from the operating
            system. Defaults to <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
          <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This flag has effect only when the emulator is linked with
              the GNU C library, and uses its <fo:inline font-family="monospace">malloc</fo:inline> implementation.</fo:block>
          </fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp20033120" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Flags for Configuration of Allocators Based on alloc_util</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">u</fo:inline> is used as subsystem identifier (that is,
        <fo:inline font-family="monospace">&lt;S&gt; = u</fo:inline>), all allocators based on
        <fo:inline font-family="monospace">alloc_util</fo:inline> are effected. If <fo:inline font-family="monospace">B</fo:inline>, <fo:inline font-family="monospace">D</fo:inline>, <fo:inline font-family="monospace">E</fo:inline>,
        <fo:inline font-family="monospace">F</fo:inline>, <fo:inline font-family="monospace">H</fo:inline>, <fo:inline font-family="monospace">L</fo:inline>, <fo:inline font-family="monospace">R</fo:inline>, <fo:inline font-family="monospace">S</fo:inline>, or <fo:inline font-family="monospace">T</fo:inline> is used
        as subsystem identifier, only the specific allocator identifier is
        effected.</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;acul &lt;utilization&gt;|de</fo:inline>
        </fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Abandon carrier utilization limit. A valid
            <fo:inline font-family="monospace">&lt;utilization&gt;</fo:inline> is an integer in the range
            <fo:inline font-family="monospace">[0, 100]</fo:inline> representing utilization in percent. When a
            utilization value &gt; 0 is used, allocator instances
            are allowed to abandon multiblock carriers. If <fo:inline font-family="monospace">de</fo:inline> (default
            enabled) is passed instead of a <fo:inline font-family="monospace">&lt;utilization&gt;</fo:inline>,
            a recommended non-zero utilization value is used. The value
            chosen depends on the allocator type and can be changed between
            ERTS versions. Defaults to <fo:inline font-family="monospace">de</fo:inline>, but this
            can be changed in the future.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Carriers are abandoned when
            memory utilization in the allocator instance falls below the
            utilization value used. Once a carrier is abandoned, no new
            allocations are made in it. When an allocator instance gets an
            increased multiblock carrier need, it first tries to fetch an
            abandoned carrier from an allocator instance of the same
            allocator type. If no abandoned carrier can be fetched, it
            creates a new empty carrier. When an abandoned carrier has been
            fetched, it will function as an ordinary carrier. This feature has
            special requirements on the
            <fo:inline font-style="italic">allocation strategy</fo:inline> used. Only
            the strategies <fo:inline font-family="monospace">aoff</fo:inline>, <fo:inline font-family="monospace">aoffcbf</fo:inline>, and <fo:inline font-family="monospace">aoffcaobf</fo:inline>
            support abandoned carriers.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This feature also requires
            <fo:inline font-style="italic">multiple thread specific instances</fo:inline>
            to be enabled. When enabling this feature, multiple thread-specific
            instances are enabled if not already enabled, and the
            <fo:inline font-family="monospace">aoffcbf</fo:inline> strategy is enabled if the current strategy does not
            support abandoned carriers. This feature can be enabled on all
            allocators based on the <fo:inline font-family="monospace">alloc_util</fo:inline> framework, except
            <fo:inline font-family="monospace">temp_alloc</fo:inline> (which would be pointless).</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always">
          <fo:inline font-family="monospace">+M&lt;S&gt;as bf|aobf|aoff|aoffcbf|aoffcaobf|gf|af</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allocation strategy. The following strategies are valid:</fo:block>
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bf</fo:inline> (best fit)</fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">aobf</fo:inline> (address order best fit)</fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">aoff</fo:inline> (address order first fit)</fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">aoffcbf</fo:inline> (address order first fit carrier best fit)
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">aoffcaobf</fo:inline> (address order first fit carrier address
              order best fit)</fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">gf</fo:inline> (good fit)</fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">af</fo:inline> (a fit)</fo:block></fo:list-item-body></fo:list-item>
          </fo:list-block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See the description of allocation strategies in section
             <fo:inline font-style="italic">The alloc_util Framework</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;asbcst &lt;size&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Absolute singleblock carrier shrink threshold (in
            kilobytes). When a block located in an
            <fo:inline font-family="monospace">mseg_alloc</fo:inline> singleblock carrier is shrunk, the carrier
            is left unchanged if the amount of unused memory is less
            than this threshold, otherwise the carrier is shrunk.
            See also <fo:inline font-style="italic"><fo:inline font-family="monospace">rsbcst</fo:inline></fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;e true|false</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables allocator <fo:inline font-family="monospace">&lt;S&gt;</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;lmbcs &lt;size&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Largest (<fo:inline font-family="monospace">mseg_alloc</fo:inline>) multiblock carrier size (in kilobytes).
            See the description on how sizes for <fo:inline font-family="monospace">mseg_alloc</fo:inline> multiblock
            carriers are decided in section
            <fo:inline font-style="italic">
            The alloc_util Framework</fo:inline>. On
            32-bit Unix style OS this limit cannot be set &gt; 128 MB.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;mbcgs &lt;ratio&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(<fo:inline font-family="monospace">mseg_alloc</fo:inline>) multiblock carrier growth stages.
            See the description on how sizes for <fo:inline font-family="monospace">mseg_alloc</fo:inline> multiblock
            carriers are decided in section
            <fo:inline font-style="italic">
            The alloc_util Framework</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;mbsd &lt;depth&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum block search depth. This flag has effect only if the
            good fit strategy is selected for allocator
            <fo:inline font-family="monospace">&lt;S&gt;</fo:inline>. When the good fit strategy is used, free
            blocks are placed in segregated free-lists. Each free-list
            contains blocks of sizes in a specific range. The maxiumum block
            search depth sets a limit on the maximum number of blocks to
            inspect in a free-list during a search for suitable block
            satisfying the request.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;mmbcs &lt;size&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Main multiblock carrier size. Sets the size of the main
            multiblock carrier for allocator <fo:inline font-family="monospace">&lt;S&gt;</fo:inline>. The main
            multiblock carrier is allocated through <fo:inline font-family="monospace">sys_alloc</fo:inline>
            and is never deallocated.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;mmmbc &lt;amount&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum <fo:inline font-family="monospace">mseg_alloc</fo:inline> multiblock carriers. Maximum number of
            multiblock carriers allocated through <fo:inline font-family="monospace">mseg_alloc</fo:inline> by
            allocator <fo:inline font-family="monospace">&lt;S&gt;</fo:inline>. When this limit is reached,
            new multiblock carriers are allocated through
            <fo:inline font-family="monospace">sys_alloc</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;mmsbc &lt;amount&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum <fo:inline font-family="monospace">mseg_alloc</fo:inline> singleblock carriers. Maximum number of
            singleblock carriers allocated through <fo:inline font-family="monospace">mseg_alloc</fo:inline> by
            allocator <fo:inline font-family="monospace">&lt;S&gt;</fo:inline>. When this limit is reached,
            new singleblock carriers are allocated through
            <fo:inline font-family="monospace">sys_alloc</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;ramv &lt;bool&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Realloc always moves. When enabled, reallocate operations are
            more or less translated into an allocate, copy, free sequence.
            This often reduces memory fragmentation, but costs performance.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;rmbcmt &lt;ratio&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Relative multiblock carrier move threshold (in percent). When
            a block located in a multiblock carrier is shrunk,
            the block is moved if the ratio of the size of the returned
            memory compared to the previous size is more than this threshold,
            otherwise the block is shrunk at the current location.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;rsbcmt &lt;ratio&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Relative singleblock carrier move threshold (in percent). When
            a block located in a singleblock carrier is shrunk to
            a size smaller than the value of parameter
            <fo:inline font-style="italic"><fo:inline font-family="monospace">sbct</fo:inline></fo:inline>,
            the block is left unchanged in the singleblock carrier if
            the ratio of unused memory is less than this threshold,
            otherwise it is moved into a multiblock carrier.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;rsbcst &lt;ratio&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Relative singleblock carrier shrink threshold (in
            percent). When a block located in an <fo:inline font-family="monospace">mseg_alloc</fo:inline>
            singleblock carrier is shrunk, the carrier is left
            unchanged if the ratio of unused memory is less than this
            threshold, otherwise the carrier is shrunk.
            See also <fo:inline font-style="italic"><fo:inline font-family="monospace">asbcst</fo:inline></fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;sbct &lt;size&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Singleblock carrier threshold (in kilobytes). Blocks larger than this
            threshold are placed in singleblock carriers. Blocks
            smaller than this threshold are placed in multiblock
            carriers. On 32-bit Unix style OS this threshold cannot be set
            &gt; 8 MB.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;smbcs &lt;size&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Smallest (<fo:inline font-family="monospace">mseg_alloc</fo:inline>) multiblock carrier size (in
            kilobytes). See the description on how sizes for <fo:inline font-family="monospace">mseg_alloc</fo:inline>
            multiblock carriers are decided in section
            <fo:inline font-style="italic">
            The alloc_util Framework</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+M&lt;S&gt;t true|false</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Multiple, thread-specific instances of the allocator.
            This option has only effect on the runtime system
            with SMP support. Default behavior on the runtime system with
            SMP support is <fo:inline font-family="monospace">NoSchedulers+1</fo:inline> instances. Each scheduler
            uses a lock-free instance of its own and other threads use
            a common instance.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before ERTS 5.9 it was possible to configure
            a smaller number of thread-specific instances than schedulers.
            This is, however, not possible anymore.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp20106896" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Flags for Configuration of alloc_util</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All allocators based on <fo:inline font-family="monospace">alloc_util</fo:inline> are effected.</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+Muycs &lt;size&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">sys_alloc</fo:inline> carrier size. Carriers allocated through
            <fo:inline font-family="monospace">sys_alloc</fo:inline> are allocated in sizes that are
            multiples of the <fo:inline font-family="monospace">sys_alloc</fo:inline> carrier size. This is not
            true for main multiblock carriers and carriers allocated
            during a memory shortage, though.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+Mummc &lt;amount&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum <fo:inline font-family="monospace">mseg_alloc</fo:inline> carriers. Maximum number of carriers
            placed in separate memory segments. When this limit is
            reached, new carriers are placed in memory retrieved from
            <fo:inline font-family="monospace">sys_alloc</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+Musac &lt;bool&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allow <fo:inline font-family="monospace">sys_alloc</fo:inline> carriers. Defaults to <fo:inline font-family="monospace">true</fo:inline>.
            If set to <fo:inline font-family="monospace">false</fo:inline>, <fo:inline font-family="monospace">sys_alloc</fo:inline> carriers are never
            created by allocators using the <fo:inline font-family="monospace">alloc_util</fo:inline> framework.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp20119552" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Special Flag for literal_alloc</fo:block>
      
      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+MIscs &lt;size in MB&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">literal_alloc</fo:inline> super carrier size (in MB). The amount of
            <fo:inline font-weight="bold">virtual</fo:inline> address space reserved for literal terms in
            Erlang code on 64-bit architectures. Defaults to <fo:inline font-family="monospace">1024</fo:inline>
            (that is, 1 GB), which is usually sufficient.
            The flag is ignored on 32-bit architectures.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp20124192" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Special Flag for exec_alloc</fo:block>
      
      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+MXscs &lt;size in MB&gt;</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">exec_alloc</fo:inline> super carrier size (in MB). The amount of
            <fo:inline font-weight="bold">virtual</fo:inline> address space reserved for native executable code
            used by the <fo:inline font-style="italic"><fo:inline font-family="monospace">HiPE</fo:inline></fo:inline> application
            on specific architectures (x86_64). Defaults to <fo:inline font-family="monospace">512</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp20129616" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Instrumentation Flags</fo:block>
      
      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+Mim true|false</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A map over current allocations is kept by the emulator.
            The allocation map can be retrieved through module
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">instrument(3)</fo:inline></fo:inline>. <fo:inline font-family="monospace">+Mim true</fo:inline>
            implies <fo:inline font-family="monospace">+Mis true</fo:inline>. <fo:inline font-family="monospace">+Mim true</fo:inline> is the same as flag
            <fo:inline font-style="italic"><fo:inline font-family="monospace">-instr</fo:inline></fo:inline> in 
            <fo:inline font-family="monospace">erl(1)</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+Mis true|false</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Status over allocated memory is kept by the emulator.
            The allocation status can be retrieved through module
            <fo:inline font-style="italic">
            <fo:inline font-family="monospace">instrument(3)</fo:inline></fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+Mit X</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reserved for future use. Do <fo:inline font-weight="bold">not</fo:inline> use this flag.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>

      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When instrumentation of the emulator is enabled, the emulator
          uses more memory and runs slower.</fo:block>
      </fo:block>
    

    <fo:block id="idp20142928" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Other Flags</fo:block>
      
      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+Mea min|max|r9c|r10b|r11b|config</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options:</fo:block>
          <fo:block space-after="0.25em" space-before="0.25em">
            <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">min</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Disables all allocators that can be disabled.</fo:block>
            </fo:block></fo:block-container>
            <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">max</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables all allocators (default).</fo:block>
            </fo:block></fo:block-container>
            <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">r9c|r10b|r11b</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configures all allocators as they were configured in respective
                Erlang/OTP release. These will eventually be removed.</fo:block>
            </fo:block></fo:block-container>
            <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">config</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Disables features that cannot be enabled while creating an
                allocator configuration with
                <fo:inline font-style="italic">
                <fo:inline font-family="monospace">erts_alloc_config(3)</fo:inline></fo:inline>.</fo:block>
              <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option is to be used only while running
                  <fo:inline font-family="monospace">erts_alloc_config(3)</fo:inline>, <fo:inline font-weight="bold">not</fo:inline> when
                  using the created configuration.</fo:block>
              </fo:block>
            </fo:block></fo:block-container>
          </fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">+Mlpm all|no</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lock physical memory. Defaults to <fo:inline font-family="monospace">no</fo:inline>, that is,
            no physical memory is locked. If set to <fo:inline font-family="monospace">all</fo:inline>, all
            memory mappings made by the runtime system are locked into
            physical memory. If set to <fo:inline font-family="monospace">all</fo:inline>, the runtime system fails to
            start if this feature is not supported, the user has not got enough
            privileges, or the user is not allowed to lock enough physical
            memory. The runtime system also fails with an out of memory
            condition if the user limit on the amount of locked memory is
            reached.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    
  

  <fo:block id="idp20159552" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Notes</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only some default values have been presented here. For information
      about the currently used settings and the current status of the
      allocators, see
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erlang:system_info(allocator)</fo:inline></fo:inline> and
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erlang:system_info({allocator, Alloc})</fo:inline></fo:inline>.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Most of these flags are highly implementation-dependent and
        can be changed or removed without prior notice.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erts_alloc</fo:inline> is not obliged to strictly use the settings that
        have been passed to it (it can even ignore them).</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erts_alloc_config(3)</fo:inline></fo:inline>
      tool can be used to aid creation of an
      <fo:inline font-family="monospace">erts_alloc</fo:inline> configuration that is suitable for a limited
      number of runtime scenarios.</fo:block>
  

  <fo:block id="idp20166960" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erts_alloc_config(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">instrument(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp20179504" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_nif</fo:marker>erl_nif</fo:block>C Library</fo:block>
  <fo:block/>
  erl_nif
  API functions for an Erlang NIF library.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A NIF library contains native implementation of some functions
      of an Erlang module. The native implemented functions (NIFs) are
      called like any other functions without any difference to the
      caller. Each NIF must have an implementation in Erlang that
      is invoked if the function is called before the NIF library
      is successfully loaded. A typical such stub implementation
      is to throw an exception. But it can also be used as a fallback
      implementation if the NIF library is not implemented for some
      architecture.</fo:block>

    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Use this functionality with extreme care.</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A native function is executed as a direct extension of the
        native code of the VM. Execution is not made in a safe environment.
        The VM <fo:inline font-weight="bold">cannot</fo:inline> provide the same services as provided when
        executing Erlang code, such as pre-emptive scheduling or memory
        protection. If the native function does not behave well, the whole
        VM will misbehave.</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A native function that crash will crash the whole VM.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An erroneously implemented native function can cause a VM
            internal state inconsistency, which can cause a crash of the VM,
            or miscellaneous misbehaviors of the VM at any point after the
            call to the native function.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A native function doing <fo:inline font-style="italic">lengthy
            work</fo:inline> before returning degrades responsiveness of the VM,
            and can cause miscellaneous strange behaviors. Such strange
            behaviors include, but are not limited to, extreme memory usage,
            and bad load balancing between schedulers. Strange behaviors that
            can occur because of lengthy work can also vary between Erlang/OTP
            releases.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A minimal example of a NIF library can look as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
/* niftest.c */
#include &lt;erl_nif.h&gt;

static ERL_NIF_TERM hello(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])
{
    return enif_make_string(env, "Hello world!", ERL_NIF_LATIN1);
}

static ErlNifFunc nif_funcs[] =
{
    {"hello", 0, hello}
};

ERL_NIF_INIT(niftest,nif_funcs,NULL,NULL,NULL,NULL)</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang module can look as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(niftest).

-export([init/0, hello/0]).

init() -&gt;
      erlang:load_nif("./niftest", 0).

hello() -&gt;
      "NIF library not loaded".</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compile and test can look as follows (on Linux):</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$&gt; gcc -fPIC -shared -o niftest.so niftest.c -I $ERL_ROOT/usr/include/
$&gt; erl

1&gt; c(niftest).
{ok,niftest}
2&gt; niftest:hello().
"NIF library not loaded"
3&gt; niftest:init().
ok
4&gt; niftest:hello().
"Hello world!"</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A better solution for a real module is to take advantage of the new
      directive <fo:inline font-family="monospace">on_load</fo:inline> (see section
      <fo:inline font-style="italic">Running a
      Function When a Module is Loaded</fo:inline> in the Erlang Reference
      Manual) to load the NIF library automatically when the module is
      loaded.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A NIF does not have to be exported, it can be local to the module.
        However, unused local stub functions will be optimized
        away by the compiler, causing loading of the NIF library to fail.</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Once loaded, a NIF library is persistent. It will not be unloaded
      until the module code version that it belongs to is purged.</fo:block>
  

  <fo:block id="idp20197488" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Functionality</fo:block>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All interaction between NIF code and the Erlang runtime system is
      performed by calling NIF API functions. Functions exist
      for the following functionality:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">Read and write Erlang terms</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any Erlang terms can be passed to a NIF as function arguments and
          be returned as function return values. The terms are of C-type
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ERL_NIF_TERM</fo:inline></fo:inline> and can
          only be read or written using API functions. Most functions to read
          the content of a term are prefixed <fo:inline font-family="monospace">enif_get_</fo:inline> and usually return
          <fo:inline font-family="monospace">true</fo:inline> (or <fo:inline font-family="monospace">false</fo:inline>) if the term is of the expected type (or
          not). The functions to write terms are all prefixed <fo:inline font-family="monospace">enif_make_</fo:inline>
          and usually
          return the created <fo:inline font-family="monospace">ERL_NIF_TERM</fo:inline>. There are also some functions
          to query terms, like <fo:inline font-family="monospace">enif_is_atom</fo:inline>, <fo:inline font-family="monospace">enif_is_identical</fo:inline>,
          and <fo:inline font-family="monospace">enif_compare</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All terms of type <fo:inline font-family="monospace">ERL_NIF_TERM</fo:inline> belong to an environment of
          type <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifEnv</fo:inline></fo:inline>. The
          lifetime of a term is controlled by the lifetime of its environment
          object. All API functions that read or write terms has the
          environment that the term belongs to as the first function
          argument.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Binaries</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Terms of type binary are accessed with the help of struct type
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifBinary</fo:inline></fo:inline>,
          which contains a pointer (<fo:inline font-family="monospace">data</fo:inline>) to the raw binary data and the
          length (<fo:inline font-family="monospace">size</fo:inline>) of the data in bytes. Both <fo:inline font-family="monospace">data</fo:inline> and
          <fo:inline font-family="monospace">size</fo:inline> are read-only and are only to be written using calls to
          API functions. Instances of <fo:inline font-family="monospace">ErlNifBinary</fo:inline> are, however, always
          allocated by the user (usually as local variables).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The raw data pointed to by <fo:inline font-family="monospace">data</fo:inline> is only mutable after a call
          to <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_alloc_binary</fo:inline></fo:inline> or
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_realloc_binary</fo:inline></fo:inline>. All other functions that
          operate on a binary leave the data as read-only.
          A mutable binary must in the end either be freed with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_release_binary</fo:inline></fo:inline>
          or made read-only by transferring it to an Erlang term with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_make_binary</fo:inline></fo:inline>.
          However, it does not have to occur in the same NIF call. Read-only
          binaries do not have to be released.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_make_new_binary</fo:inline></fo:inline> can be used as a shortcut to
          allocate and return a binary in the same NIF call.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Binaries are sequences of whole bytes. Bitstrings with an arbitrary
          bit length have no support yet.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Resource objects</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The use of resource objects is a safe way to return pointers to
          native data structures from a NIF. A resource object is
          only a block of memory allocated with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_alloc_resource</fo:inline></fo:inline>.
          A handle ("safe pointer") to this memory block can then be returned
          to Erlang by the use of
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_make_resource</fo:inline></fo:inline>.
          The term returned by <fo:inline font-family="monospace">enif_make_resource</fo:inline> is opaque in nature.
          It can be stored and passed between processes on the same node, but
          the only real end usage is to pass it back as an argument to a NIF.
          The NIF can then call <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_get_resource</fo:inline></fo:inline> and get back a pointer to the
          memory block, which is guaranteed to still be valid. A resource
          object is not deallocated until the last handle term
          is garbage collected by the VM and the resource is released with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_release_resource</fo:inline></fo:inline>
          (not necessarily in that order).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All resource objects are created as instances of some <fo:inline font-weight="bold">resource
          type</fo:inline>. This makes resources from different modules to be
          distinguishable. A resource type is created by calling
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_open_resource_type</fo:inline></fo:inline> when a library is loaded.
          Objects of that resource type can then later be allocated and
          <fo:inline font-family="monospace">enif_get_resource</fo:inline> verifies that the resource is of the
          expected type. A resource type can have a user-supplied destructor
          function, which is automatically called when resources of that type
          are released (by either the garbage collector or
          <fo:inline font-family="monospace">enif_release_resource</fo:inline>). Resource types are uniquely identified
          by a supplied name string and the name of the implementing module.</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is a template example of how to create and return a
          resource object.</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ERL_NIF_TERM term;
MyStruct* obj = enif_alloc_resource(my_resource_type, sizeof(MyStruct));

/* initialize struct ... */

term = enif_make_resource(env, obj);

if (keep_a_reference_of_our_own) {
    /* store 'obj' in static variable, private data or other resource object */
}
else {
    enif_release_resource(obj);
    /* resource now only owned by "Erlang" */
}
return term;</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that once <fo:inline font-family="monospace">enif_make_resource</fo:inline> creates the term to
          return to Erlang, the code can choose to either keep its own
          native pointer to the allocated struct and release it later, or
          release it immediately and rely only on the garbage collector
          to deallocate the resource object eventually when it collects
          the term.</fo:block> 
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another use of resource objects is to create binary terms with
          user-defined memory management.
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_make_resource_binary</fo:inline></fo:inline>
          creates a binary term that is connected to a resource object. The
          destructor of the resource is called when the binary is garbage
          collected, at which time the binary data can be released. An example
          of this can be a binary term consisting of data from a <fo:inline font-family="monospace">mmap</fo:inline>'ed
          file. The destructor can then do <fo:inline font-family="monospace">munmap</fo:inline> to release the memory
          region.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Resource types support upgrade in runtime by allowing a loaded NIF
          library to take over an already existing resource type and by that
          "inherit" all existing objects of that type. The destructor of the
          new library is thereafter called for the inherited objects and the
          library with the old destructor function can be safely unloaded.
          Existing resource objects, of a module that is upgraded, must either
          be deleted or taken over by the new NIF library. The unloading of a
          library is postponed as long as there exist resource objects with a
          destructor function in the library.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Module upgrade and static data</fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A loaded NIF library is tied to the Erlang module instance
	that loaded it. If the module is upgraded, the new module instance
	needs to load its own NIF library (or maybe choose not to). The new
	module instance can, however, choose to load the exact same NIF library
	as the old code if it wants to. Sharing the dynamic library means that
	static data defined by the library is shared as well. To avoid
	unintentionally shared static data between module instances, each Erlang
	module version can keep its own private data. This private data can be
	set when the NIF library is loaded and later retrieved by calling
	<fo:inline font-style="italic"><fo:inline font-family="monospace">enif_priv_data</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Threads and concurrency</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A NIF is thread-safe without any explicit synchronization as
          long as it acts as a pure function and only reads the supplied
          arguments. When you write to a shared state either through
          static variables or <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_priv_data</fo:inline></fo:inline>, you need to supply your own explicit
          synchronization. This includes terms in process-independent
          environments that are shared between threads. Resource objects also
          require synchronization if you treat them as mutable.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The library initialization callbacks <fo:inline font-family="monospace">load</fo:inline> and
          <fo:inline font-family="monospace">upgrade</fo:inline> are thread-safe even for shared state data.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Version Management</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a NIF library is built, information about the NIF API version
          is compiled into the library. When a NIF library is loaded, the
          runtime system verifies that the library is of a compatible version.
          <fo:inline font-family="monospace">erl_nif.h</fo:inline> defines the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_MAJOR_VERSION</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Incremented when NIF library incompatible changes are made to the
              Erlang runtime system. Normally it suffices to recompile the NIF
              library when the <fo:inline font-family="monospace">ERL_NIF_MAJOR_VERSION</fo:inline> has changed, but it
              can, under rare circumstances, mean that NIF libraries must be
              slightly modified. If so, this will of course be documented.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_MINOR_VERSION</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Incremented when new features are added. The runtime system uses
              the minor version to determine what features to use.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime system normally refuses to load a NIF library if
          the major versions differ, or if the major versions are equal and
          the minor version used by the NIF library is greater than the one
          used by the runtime system. Old NIF libraries with lower major
          versions are, however, allowed after a bump of the major version
          during a transition period of two major releases. Such old NIF
          libraries can however fail if deprecated features are used.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Time Measurement</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Support for time measurement in NIF libraries:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
            <fo:inline font-family="monospace">ErlNifTime</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
            <fo:inline font-family="monospace">ErlNifTimeUnit</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
            <fo:inline font-family="monospace">enif_monotonic_time()</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
            <fo:inline font-family="monospace">enif_time_offset()</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
            <fo:inline font-family="monospace">enif_convert_time_unit()</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Long-running NIFs</fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As mentioned in the <fo:inline font-style="italic">warning</fo:inline> text
          at the beginning of this manual page, it is of <fo:inline font-weight="bold">vital
          importance</fo:inline> that a native function returns relatively fast. It is
          difficult to give an exact maximum amount of time that a native
          function is allowed to work, but usually a well-behaving native
          function is to return to its caller within 1 millisecond. This can be
          achieved using different approaches. If you have full control over the
          code to execute in the native function, the best approach is to
          divide the work into multiple chunks of work and call the native
          function multiple times. This is, however, not always possible, for
          example when calling third-party libraries.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_consume_timeslice()</fo:inline></fo:inline> function can be used to
          inform the runtime system about the length of the NIF call.
          It is typically always to be used unless the NIF executes very
          fast.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the NIF call is too lengthy, this must be handled in one of
          the following ways to avoid degraded responsiveness, scheduler load
          balancing problems, and other strange behaviors:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always">Yielding NIF</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the functionality of a long-running NIF can be split so that
              its work can be achieved through a series of shorter NIF calls,
              the application has two options:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Make that series of NIF calls from the Erlang level.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call a NIF that first performs a chunk of the work, then
                  invokes the <fo:inline font-style="italic">
                  <fo:inline font-family="monospace">enif_schedule_nif</fo:inline></fo:inline> function to schedule
                  another NIF call to perform the next chunk. The final call
                  scheduled in this manner can then return the overall
                  result.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Breaking up a long-running function in this manner enables the
              VM to regain control between calls to the NIFs.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This approach is always preferred over the other alternatives
              described below. This both from a performance perspective and
              a system characteristics perspective.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">Threaded NIF</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is accomplished by dispatching the work to another thread
              managed by the NIF library, return from the NIF, and wait for
              the result. The thread can send the result back to the Erlang
              process using <fo:inline font-style="italic">
              <fo:inline font-family="monospace">enif_send</fo:inline></fo:inline>.
              Information about thread primitives is provided below.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">Dirty NIF</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dirty NIF support is available only when the emulator is
	        configured with dirty scheduler support. As of ERTS version
		9.0, dirty scheduler support is enabled by default on the
		runtime system with SMP support. The Erlang runtime without
		SMP support does <fo:inline font-weight="bold">not</fo:inline> support dirty schedulers even
		when the dirty scheduler support is explicitly enabled. To
		check at runtime for the presence of dirty scheduler threads,
		code can use the <fo:inline font-style="italic">
                <fo:inline font-family="monospace">enif_system_info()</fo:inline></fo:inline> API function.</fo:block>
            </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A NIF that cannot be split and cannot execute in a millisecond
              or less is called a "dirty NIF", as it performs work that the
              ordinary schedulers of the Erlang runtime system cannot handle cleanly.
              Applications that make use of such functions must indicate to the
              runtime that the functions are dirty so they can be handled 
              specially. This is handled by executing dirty jobs on a separate
	      set of schedulers called dirty schedulers. A dirty NIF executing
	      on a dirty scheduler does not have the same duration restriction
	      as a normal NIF.
            </fo:block>

            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
              It is important to classify the dirty job correct. An I/O bound
	      job should be classified as such, and a CPU bound job should be
	      classified as such. If you should classify CPU bound jobs
	      as I/O bound jobs, dirty I/O schedulers might starve ordinary
	      schedulers. I/O bound jobs are expected to either block waiting
	      for I/O, and/or spend a limited amount of time moving data.
            </fo:block>

            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
              To schedule a dirty NIF for execution, the application has two options:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set the appropriate flags value for the dirty NIF in its
                  <fo:inline font-style="italic"> <fo:inline font-family="monospace">ErlNifFunc</fo:inline></fo:inline>
                  entry.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call <fo:inline font-style="italic">
                  <fo:inline font-family="monospace">enif_schedule_nif</fo:inline></fo:inline>, pass to it a pointer
                  to the dirty NIF to be executed, and indicate with argument
                  <fo:inline font-family="monospace">flags</fo:inline> whether it expects the operation to be CPU-bound
                  or I/O-bound.</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A job that alternates between I/O bound and CPU bound can be
              reclassified and rescheduled using <fo:inline font-family="monospace">enif_schedule_nif</fo:inline> so
              that it executes on the correct type of dirty scheduler at all
              times. For more information see the documentation of the
              <fo:inline font-family="monospace">erl(1)</fo:inline> command line arguments
              <fo:inline font-style="italic"><fo:inline font-family="monospace">+SDcpu</fo:inline></fo:inline>,
              and <fo:inline font-style="italic"><fo:inline font-family="monospace">+SDio</fo:inline></fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">While a process executes a dirty NIF, some operations that
              communicate with it can take a very long time to complete.
              Suspend or garbage collection of a process executing a dirty
              NIF cannot be done until the dirty NIF has returned. Thus, other
              processes waiting for such operations to complete might
              have to wait for a very long time. Blocking multi-scheduling, that
              is, calling <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:system_flag(multi_scheduling, block)</fo:inline></fo:inline>, can
              also take a very long time to complete. This becaue all ongoing
              dirty operations on all dirty schedulers must complete before
              the block operation can complete.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Many operations communicating with a process executing a
              dirty NIF can, however, complete while it executes the
              dirty NIF. For example, retrieving information about it through
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:process_info</fo:inline></fo:inline>, setting its group leader,
              register/unregister its name, and so on.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Termination of a process executing a dirty NIF can only be
              completed up to a certain point while it executes the dirty NIF.
              All Erlang resources, such as its registered name and its ETS
              tables, are released. All links and monitors are triggered. The
              execution of the NIF is, however, <fo:inline font-weight="bold">not</fo:inline> stopped. The NIF
              can safely continue execution, allocate heap memory, and so on,
              but it is of course better to stop executing as soon as possible.
              The NIF can check whether a current process is alive using
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">enif_is_current_process_alive</fo:inline></fo:inline>. Communication
              using <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_send</fo:inline></fo:inline> and
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">enif_port_command</fo:inline></fo:inline> is also dropped when the
              sending process is not alive. Deallocation of certain internal
              resources, such as process heap and process control block, is
              delayed until the dirty NIF has completed.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp20298416" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Initialization</fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_INIT(MODULE,
        ErlNifFunc funcs[], load, NULL, upgrade, unload)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the magic macro to initialize a NIF library. It
          is to be evaluated in global file scope.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">MODULE</fo:inline> is the name of the Erlang module as an
          identifier without string quotations. It is stringified by
          the macro.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">funcs</fo:inline> is a static array of function descriptors for
          all the implemented NIFs in this library.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">load</fo:inline>, <fo:inline font-family="monospace">upgrade</fo:inline> and <fo:inline font-family="monospace">unload</fo:inline>
          are pointers to functions. One of <fo:inline font-family="monospace">load</fo:inline> or
          <fo:inline font-family="monospace">upgrade</fo:inline> is called to initialize the library.
          <fo:inline font-family="monospace">unload</fo:inline> is called to release the library. All are
          described individually below.</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The fourth argument <fo:inline font-family="monospace">NULL</fo:inline> is ignored. It
          was earlier used for the deprectated <fo:inline font-family="monospace">reload</fo:inline> callback
          which is no longer supported since OTP 20.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If compiling a NIF for static inclusion through
          <fo:inline font-family="monospace">--enable-static-nifs</fo:inline>, you must define <fo:inline font-family="monospace">STATIC_ERLANG_NIF</fo:inline>
           before the <fo:inline font-family="monospace">ERL_NIF_INIT</fo:inline> declaration.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int (*load)(ErlNifEnv* env, void** priv_data,
        ERL_NIF_TERM load_info)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">load</fo:inline> is called when the NIF library is loaded
          and no previously loaded library exists for this module.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">*priv_data</fo:inline> can be set to point to some private data
          if the library needs to keep a state between NIF
          calls. <fo:inline font-family="monospace">enif_priv_data</fo:inline> returns this pointer.
          <fo:inline font-family="monospace">*priv_data</fo:inline> is initialized to <fo:inline font-family="monospace">NULL</fo:inline> when <fo:inline font-family="monospace">load</fo:inline> is
          called.</fo:block> 
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">load_info</fo:inline> is the second argument to <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:load_nif/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The library fails to load if <fo:inline font-family="monospace">load</fo:inline> returns
          anything other than <fo:inline font-family="monospace">0</fo:inline>. <fo:inline font-family="monospace">load</fo:inline> can be <fo:inline font-family="monospace">NULL</fo:inline> if
          initialization is not needed.</fo:block> 
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int (*upgrade)(ErlNifEnv* env, void**
        priv_data, void** old_priv_data, ERL_NIF_TERM load_info)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">upgrade</fo:inline> is called when the NIF library is loaded
          and there is old code of this module with a loaded NIF library.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works as <fo:inline font-family="monospace">load</fo:inline>, except that <fo:inline font-family="monospace">*old_priv_data</fo:inline> already
          contains the value set by the last call to <fo:inline font-family="monospace">load</fo:inline> or
          <fo:inline font-family="monospace">upgrade</fo:inline> for the old module code. <fo:inline font-family="monospace">*priv_data</fo:inline> is
          initialized to <fo:inline font-family="monospace">NULL</fo:inline> when <fo:inline font-family="monospace">upgrade</fo:inline> is called. It is
          allowed to write to both <fo:inline font-family="monospace">*priv_data</fo:inline> and
          <fo:inline font-family="monospace">*old_priv_data.</fo:inline></fo:block> 
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The library fails to load if <fo:inline font-family="monospace">upgrade</fo:inline> returns
           anything other than <fo:inline font-family="monospace">0</fo:inline> or if <fo:inline font-family="monospace">upgrade</fo:inline> is <fo:inline font-family="monospace">NULL</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">void (*unload)(ErlNifEnv* env, void*
        priv_data)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">unload</fo:inline> is called when the module code that
          the NIF library belongs to is purged as old. New code of the same
          module may or may not exist.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp20330080" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_TERM</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Variables of type <fo:inline font-family="monospace">ERL_NIF_TERM</fo:inline> can refer to any Erlang term.
          This is an opaque type and values of it can only by used either as
          arguments to API functions or as return values from NIFs. All
          <fo:inline font-family="monospace">ERL_NIF_TERM</fo:inline>s belong to an environment
          (<fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifEnv</fo:inline></fo:inline>).
          A term cannot be destructed individually, it is valid until its
          environment is destructed.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifEnv</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ErlNifEnv</fo:inline> represents an environment that can host Erlang
          terms. All terms in an environment are valid as long as the
          environment is valid. <fo:inline font-family="monospace">ErlNifEnv</fo:inline> is an opaque type; pointers to
          it can only be passed on to API functions. Two types of environments
          exist:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always">Process-bound environment</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Passed as the first argument to all NIFs. All function arguments
              passed to a NIF belong to that environment. The return value from
              a NIF must also be a term belonging to the same environment.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process-bound environment contains transient information
              about the calling Erlang process. The environment is only valid
              in the thread where it was supplied as argument until the NIF
              returns. It is thus useless and dangerous to store pointers to
              process-bound environments between NIF calls.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">Process-independent environment</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Created by calling <fo:inline font-style="italic">
              <fo:inline font-family="monospace">enif_alloc_env</fo:inline></fo:inline>. This environment can be
              used to store terms between NIF calls and to send terms with
              <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_send</fo:inline></fo:inline>. A
              process-independent environment with all its terms is valid until
              you explicitly invalidate it with
              <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_free_env</fo:inline></fo:inline>
              or <fo:inline font-family="monospace">enif_send</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All contained terms of a list/tuple/map must belong to the same
          environment as the list/tuple/map itself. Terms can be copied between
          environments with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_make_copy</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifFunc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef struct {
    const char* name;
    unsigned arity;
    ERL_NIF_TERM (*fptr)(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);
    unsigned flags;
} ErlNifFunc;</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Describes a NIF by its name, arity, and implementation.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">fptr</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A pointer to the function that implements the NIF.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">argv</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Contains the function arguments passed to the NIF.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">argc</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The array length, that is, the function arity. <fo:inline font-family="monospace">argv[N-1]</fo:inline>
              thus denotes the Nth argument to the NIF. Notice that the argument
              <fo:inline font-family="monospace">argc</fo:inline> allows for the same C function to implement several
              Erlang functions with different arity (but probably with the same
              name).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">flags</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Is <fo:inline font-family="monospace">0</fo:inline> for a regular NIF (and so its value can be omitted
              for statically initialized <fo:inline font-family="monospace">ErlNifFunc</fo:inline> instances).</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">flags</fo:inline> can be used to indicate that the NIF is a
              <fo:inline font-style="italic">dirty NIF</fo:inline> that is to be
              executed on a dirty scheduler thread.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the dirty NIF is expected to be CPU-bound, its <fo:inline font-family="monospace">flags</fo:inline>
              field is to be set to <fo:inline font-family="monospace">ERL_NIF_DIRTY_JOB_CPU_BOUND</fo:inline> or
              <fo:inline font-family="monospace">ERL_NIF_DIRTY_JOB_IO_BOUND</fo:inline>.</fo:block>
            <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If one of the <fo:inline font-family="monospace">ERL_NIF_DIRTY_JOB_*_BOUND</fo:inline> flags is set,
                and the runtime system has no support for dirty schedulers,
                the runtime system refuses to load the NIF library.</fo:block>
            </fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifBinary</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef struct {
    unsigned size;
    unsigned char* data;
} ErlNifBinary;</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ErlNifBinary</fo:inline> contains transient information about an
          inspected binary term. <fo:inline font-family="monospace">data</fo:inline> is a pointer to a buffer
          of <fo:inline font-family="monospace">size</fo:inline> bytes with the raw content of the binary.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-family="monospace">ErlNifBinary</fo:inline> is a semi-opaque type and you are
          only allowed to read fields <fo:inline font-family="monospace">size</fo:inline> and <fo:inline font-family="monospace">data</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifBinaryToTerm</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An enumeration of the options that can be specified to
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_binary_to_term</fo:inline></fo:inline>.
          For default behavior, use value <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When receiving data from untrusted sources, use option
          <fo:inline font-family="monospace">ERL_NIF_BIN2TERM_SAFE</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifMonitor</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is an opaque data type that identifies a monitor.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The nif writer is to provide the memory for storing the
          monitor when calling <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_monitor_process</fo:inline></fo:inline>. The
          address of the data is not stored by the runtime system, so
          <fo:inline font-family="monospace">ErlNifMonitor</fo:inline> can be used as any other data, it
          can be copied, moved in memory, forgotten, and so on.
	  To compare two monitors, <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_compare_monitors</fo:inline></fo:inline> must be used.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifPid</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process identifier (pid). In contrast to pid terms (instances of
          <fo:inline font-family="monospace">ERL_NIF_TERM</fo:inline>), <fo:inline font-family="monospace">ErlNifPid</fo:inline>s are self-contained and not
          bound to any <fo:inline font-style="italic">environment</fo:inline>.
          <fo:inline font-family="monospace">ErlNifPid</fo:inline> is an opaque type.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifPort</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A port identifier. In contrast to port ID terms (instances of
          <fo:inline font-family="monospace">ERL_NIF_TERM</fo:inline>), <fo:inline font-family="monospace">ErlNifPort</fo:inline>s are self-contained and not
          bound to any <fo:inline font-style="italic">environment</fo:inline>.
          <fo:inline font-family="monospace">ErlNifPort</fo:inline> is an opaque type.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifResourceType</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each instance of <fo:inline font-family="monospace">ErlNifResourceType</fo:inline> represents a class of
          memory-managed resource objects that can be garbage collected.
          Each resource type has a unique name and a destructor function that
          is called when objects of its type are released.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifResourceTypeInit</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef struct {
    ErlNifResourceDtor* dtor;
    ErlNifResourceStop* stop;
    ErlNifResourceDown* down;
} ErlNifResourceTypeInit;</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initialization structure read by <fo:inline font-style="italic">
	enif_open_resource_type_x</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifResourceDtor</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef void ErlNifResourceDtor(ErlNifEnv* env, void* obj);</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function prototype of a resource destructor function.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">obj</fo:inline> argument is a pointer to the resource. The only
	allowed use for the resource in the destructor is to access its
	user data one final time. The destructor is guaranteed to be the
	last callback before the resource is deallocated.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifResourceDown</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef void ErlNifResourceDown(ErlNifEnv* env, void* obj, const ErlNifPid* pid, const ErlNifMonitor* mon);</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function prototype of a resource down function,
	  called on the behalf of <fo:inline font-style="italic">
	  enif_monitor_process</fo:inline>. <fo:inline font-family="monospace">obj</fo:inline> is the resource, <fo:inline font-family="monospace">pid</fo:inline>
	  is the identity of the monitored process that is exiting, and <fo:inline font-family="monospace">mon</fo:inline>
	  is the identity of the monitor.
	</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifResourceStop</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef void ErlNifResourceStop(ErlNifEnv* env, void* obj, ErlNifEvent event, int is_direct_call);</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function prototype of a resource stop function,
	  called on the behalf of <fo:inline font-style="italic">
	  enif_select</fo:inline>. <fo:inline font-family="monospace">obj</fo:inline> is the resource, <fo:inline font-family="monospace">event</fo:inline> is OS event,
	  <fo:inline font-family="monospace">is_direct_call</fo:inline> is true if the call is made directly from <fo:inline font-family="monospace">enif_select</fo:inline>
	  or false if it is a scheduled call (potentially from another thread).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifCharEncoding</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef enum {
    ERL_NIF_LATIN1
}ErlNifCharEncoding;</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The character encoding used in strings and atoms. The only
          supported encoding is <fo:inline font-family="monospace">ERL_NIF_LATIN1</fo:inline> for
          ISO Latin-1 (8-bit ASCII).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifSysInfo</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used by <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_system_info</fo:inline></fo:inline> to return information about the
          runtime system. Contains the same content as
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">ErlDrvSysInfo</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifSInt64</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A native signed 64-bit integer type.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifUInt64</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A native unsigned 64-bit integer type.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifTime</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A signed 64-bit integer type for representation of time.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifTimeUnit</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An enumeration of time units supported by the NIF API:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_SEC</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Seconds</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_MSEC</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Milliseconds</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_USEC</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Microseconds</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_NSEC</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Nanoseconds</fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifUniqueInteger</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An enumeration of the properties that can be requested from
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_unique_integer</fo:inline></fo:inline>.
          For default properties, use value <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_UNIQUE_POSITIVE</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Return only positive integers.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_UNIQUE_MONOTONIC</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Return only <fo:inline font-style="italic">
              strictly monotonically increasing</fo:inline> integer corresponding
              to creation time.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ErlNifHash</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An enumeration of the supported hash types that can be generated
          using <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_hash</fo:inline></fo:inline>.
        </fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_INTERNAL_HASH</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Non-portable hash function that only guarantees the same hash
              for the same term within one Erlang VM instance.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It takes 32-bit salt values and generates hashes within <fo:inline font-family="monospace">0..2^32-1</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_PHASH2</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Portable hash function that gives the same hash for the
              same Erlang term regardless of machine architecture and ERTS version.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">It ignores salt values</fo:inline> and generates hashes within <fo:inline font-family="monospace">0..2^27-1</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Slower than <fo:inline font-family="monospace">ERL_NIF_INTERNAL_HASH.</fo:inline>
              It corresponds to <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:phash2/1</fo:inline></fo:inline>.
            </fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20444736">void *enif_alloc(size_t size)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allocates memory of <fo:inline font-family="monospace">size</fo:inline> bytes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">NULL</fo:inline> if the allocation fails.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20448928">int enif_alloc_binary(size_t size, ErlNifBinary* bin)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allocates a new binary of size <fo:inline font-family="monospace">size</fo:inline> bytes.
          Initializes the structure pointed to by <fo:inline font-family="monospace">bin</fo:inline> to
          refer to the allocated binary. The binary must either be released by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_release_binary</fo:inline></fo:inline> 
          or ownership transferred to an Erlang term with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_make_binary</fo:inline></fo:inline>.
          An allocated (and owned) <fo:inline font-family="monospace">ErlNifBinary</fo:inline> can be kept between NIF
          calls.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if allocation
          fails.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20456576">ErlNifEnv *enif_alloc_env()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allocates a new process-independent environment. The environment can
          be used to hold terms that are not bound to any process. Such terms
          can later be copied to a process environment with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_make_copy</fo:inline></fo:inline> or
          be sent to a process as a message with <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_send</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns pointer to the new environment.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20461808">void *enif_alloc_resource(ErlNifResourceType*
        type, unsigned size)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allocates a memory-managed resource object of type <fo:inline font-family="monospace">type</fo:inline> and
          size <fo:inline font-family="monospace">size</fo:inline> bytes.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20465472">size_t enif_binary_to_term(ErlNifEnv *env,
        const unsigned char* data, size_t size, ERL_NIF_TERM *term,
        ErlNifBinaryToTerm opts)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a term that is the result of decoding the binary data at
          <fo:inline font-family="monospace">data</fo:inline>, which must be encoded according to the Erlang external
          term format. No more than <fo:inline font-family="monospace">size</fo:inline> bytes are read from <fo:inline font-family="monospace">data</fo:inline>.
          Argument <fo:inline font-family="monospace">opts</fo:inline> corresponds to the second argument to
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:binary_to_term/2</fo:inline></fo:inline> and must be either <fo:inline font-family="monospace">0</fo:inline>
          or <fo:inline font-family="monospace">ERL_NIF_BIN2TERM_SAFE</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, stores the resulting term at <fo:inline font-family="monospace">*term</fo:inline> and returns
          the number of bytes read. Returns <fo:inline font-family="monospace">0</fo:inline> if decoding fails or if
          <fo:inline font-family="monospace">opts</fo:inline> is invalid.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">ErlNifBinaryToTerm</fo:inline></fo:inline>,
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:binary_to_term/2</fo:inline></fo:inline>, and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_term_to_binary</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20477504">void enif_clear_env(ErlNifEnv* env)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Frees all terms in an environment and clears it for reuse.
          The environment must have been allocated with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_alloc_env</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20481472">int enif_compare(ERL_NIF_TERM lhs, ERL_NIF_TERM rhs)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an integer &lt; <fo:inline font-family="monospace">0</fo:inline> if <fo:inline font-family="monospace">lhs</fo:inline> &lt; <fo:inline font-family="monospace">rhs</fo:inline>,
          <fo:inline font-family="monospace">0</fo:inline> if <fo:inline font-family="monospace">lhs</fo:inline> = <fo:inline font-family="monospace">rhs</fo:inline>, and &gt; <fo:inline font-family="monospace">0</fo:inline> if
          <fo:inline font-family="monospace">lhs</fo:inline> &gt; <fo:inline font-family="monospace">rhs</fo:inline>. Corresponds to the Erlang
          operators <fo:inline font-family="monospace">==</fo:inline>, <fo:inline font-family="monospace">/=</fo:inline>, <fo:inline font-family="monospace">=&lt;</fo:inline>, <fo:inline font-family="monospace">&lt;</fo:inline>,
          <fo:inline font-family="monospace">&gt;=</fo:inline>, and <fo:inline font-family="monospace">&gt;</fo:inline> (but <fo:inline font-weight="bold">not</fo:inline> <fo:inline font-family="monospace">=:=</fo:inline> or
          <fo:inline font-family="monospace">=/=</fo:inline>).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20492416">int enif_compare_monitors(const ErlNifMonitor
        *monitor1, const ErlNifMonitor *monitor2)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compares two <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifMonitor</fo:inline></fo:inline>s.
          Can also be used to imply some artificial order on monitors,
          for whatever reason.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> if <fo:inline font-family="monospace">monitor1</fo:inline> and <fo:inline font-family="monospace">monitor2</fo:inline> are equal,
          &lt; <fo:inline font-family="monospace">0</fo:inline> if <fo:inline font-family="monospace">monitor1</fo:inline> &lt; <fo:inline font-family="monospace">monitor2</fo:inline>, and
          &gt; <fo:inline font-family="monospace">0</fo:inline> if <fo:inline font-family="monospace">monitor1</fo:inline> &gt; <fo:inline font-family="monospace">monitor2</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20501312">void enif_cond_broadcast(ErlNifCond *cnd)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_cond_broadcast</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20505008">ErlNifCond *enif_cond_create(char *name)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_cond_create</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20508704">void enif_cond_destroy(ErlNifCond *cnd)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_cond_destroy</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20512400">void enif_cond_signal(ErlNifCond *cnd)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_cond_signal</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20516096">void enif_cond_wait(ErlNifCond *cnd, ErlNifMutex *mtx)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_cond_wait</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20519968">int enif_consume_timeslice(ErlNifEnv *env, int percent)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gives the runtime system a hint about how much CPU time the current
          NIF call has consumed since the last hint, or since the start of the
          NIF if no previous hint has been specified. The time is specified as a
          percent of the timeslice that a process is allowed to execute
          Erlang code until it can be suspended to give time for other runnable
          processes. The scheduling timeslice is not an exact entity, but can
          usually be approximated to about 1 millisecond.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that it is up to the runtime system to determine if and how
          to use this information. Implementations on some platforms can use
          other means to determine consumed CPU time. Lengthy NIFs should
          regardless of this frequently call <fo:inline font-family="monospace">enif_consume_timeslice</fo:inline> to
          determine if it is allowed to continue execution.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">percent</fo:inline> must be an integer between 1 and 100. This
          function must only be called from a NIF-calling thread, and argument
          <fo:inline font-family="monospace">env</fo:inline> must be the environment of the calling process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">1</fo:inline> if the timeslice is exhausted, otherwise <fo:inline font-family="monospace">0</fo:inline>.
          If <fo:inline font-family="monospace">1</fo:inline> is returned, the NIF is to return as soon as possible in
          order for the process to yield.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is provided to better support co-operative scheduling,
          improve system responsiveness, and make it easier to prevent
          misbehaviors of the VM because of a NIF monopolizing a scheduler
          thread. It can be used to divide <fo:inline font-style="italic">
          length work</fo:inline> into a number of repeated NIF calls without the
          need to create threads.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also the <fo:inline font-style="italic">warning</fo:inline> text at
          the beginning of this manual page.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20530400">ErlNifTime enif_convert_time_unit(ErlNifTime
        val, ErlNifTimeUnit from, ErlNifTimeUnit to)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts the <fo:inline font-family="monospace">val</fo:inline> value of time unit <fo:inline font-family="monospace">from</fo:inline> to
          the corresponding value of time unit <fo:inline font-family="monospace">to</fo:inline>. The result is
          rounded using the floor function.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">val</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Value to convert time unit for.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">from</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time unit of <fo:inline font-family="monospace">val</fo:inline>.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">to</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time unit of returned value.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">ERL_NIF_TIME_ERROR</fo:inline> if called with an invalid
          time unit argument.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifTime</fo:inline></fo:inline>
          and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifTimeUnit</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20542384">ERL_NIF_TERM enif_cpu_time(ErlNifEnv *)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the CPU time in the same format as
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:timestamp()</fo:inline></fo:inline>.
          The CPU time is the time the current logical CPU has spent executing
          since some arbitrary point in the past. If the OS does not support
          fetching this value, <fo:inline font-family="monospace">enif_cpu_time</fo:inline> invokes
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_make_badarg</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20547568">int enif_demonitor_process(ErlNifEnv* env, void* obj,
      const ErlNifMonitor* mon)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Cancels a monitor created earlier with <fo:inline font-style="italic">
	<fo:inline font-family="monospace">enif_monitor_process</fo:inline></fo:inline>. Argument <fo:inline font-family="monospace">obj</fo:inline> is a pointer
	to the resource holding the monitor and	<fo:inline font-family="monospace">*mon</fo:inline> identifies the monitor.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> if the monitor was successfully identified and removed.
	Returns	a non-zero value if the monitor could not be identified, which means
	it was either</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>never created for this resource</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>already cancelled</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>already triggered</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>just about to be triggered by a concurrent thread</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is only thread-safe when the emulator with SMP support
          is used. It can only be used in a non-SMP emulator from a NIF-calling
          thread.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20557168">int enif_equal_tids(ErlNifTid tid1, ErlNifTid tid2)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_equal_tids</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20560880">void enif_free(void* ptr)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Frees memory allocated by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_alloc</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20564560">void enif_free_env(ErlNifEnv* env)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Frees an environment allocated with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_alloc_env</fo:inline></fo:inline>.
          All terms created in the environment are freed as well.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20568192">int enif_get_atom(ErlNifEnv* env, ERL_NIF_TERM
        term, char* buf, unsigned size, ErlNifCharEncoding encode)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writes a <fo:inline font-family="monospace">NULL</fo:inline>-terminated string in the buffer pointed to by
          <fo:inline font-family="monospace">buf</fo:inline> of size <fo:inline font-family="monospace">size</fo:inline>, consisting of the string
          representation of the atom <fo:inline font-family="monospace">term</fo:inline> with encoding
          <fo:inline font-style="italic">encode</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of bytes written (including terminating
          <fo:inline font-family="monospace">NULL</fo:inline> character) or <fo:inline font-family="monospace">0</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is not an atom with
           maximum length of <fo:inline font-family="monospace">size-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20576080">int enif_get_atom_length(ErlNifEnv* env,
        ERL_NIF_TERM term, unsigned* len, ErlNifCharEncoding encode)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">*len</fo:inline> to the length (number of bytes excluding
          terminating <fo:inline font-family="monospace">NULL</fo:inline> character) of the atom <fo:inline font-family="monospace">term</fo:inline> with
          encoding <fo:inline font-family="monospace">encode</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is not
          an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20583120">int enif_get_double(ErlNifEnv* env,
        ERL_NIF_TERM term, double* dp)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">*dp</fo:inline> to the floating-point value of <fo:inline font-family="monospace">term</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is not
          a float.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20588560">int enif_get_int(ErlNifEnv* env, ERL_NIF_TERM
        term, int* ip)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">*ip</fo:inline> to the integer value of <fo:inline font-family="monospace">term</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is not
          an integer or is outside the bounds of type <fo:inline font-family="monospace">int</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20594464">int enif_get_int64(ErlNifEnv* env, ERL_NIF_TERM
        term, ErlNifSInt64* ip)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">*ip</fo:inline> to the integer value of <fo:inline font-family="monospace">term</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is not
          an integer or is outside the bounds of a signed 64-bit integer.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20599968">int enif_get_local_pid(ErlNifEnv* env,
        ERL_NIF_TERM term, ErlNifPid* pid)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">term</fo:inline> is the pid of a node local process, this function
          initializes the pid variable <fo:inline font-family="monospace">*pid</fo:inline> from it and returns
          <fo:inline font-family="monospace">true</fo:inline>. Otherwise returns <fo:inline font-family="monospace">false</fo:inline>. No check is done to see
          if the process is alive.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20604624">int enif_get_local_port(ErlNifEnv* env,
        ERL_NIF_TERM term, ErlNifPort* port_id)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">term</fo:inline> identifies a node local port, this function
          initializes the port variable <fo:inline font-family="monospace">*port_id</fo:inline> from it and returns
          <fo:inline font-family="monospace">true</fo:inline>. Otherwise returns <fo:inline font-family="monospace">false</fo:inline>. No check is done to see
          if the port is alive.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20609264">int enif_get_list_cell(ErlNifEnv* env,
        ERL_NIF_TERM list, ERL_NIF_TERM* head, ERL_NIF_TERM* tail)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">*head</fo:inline> and <fo:inline font-family="monospace">*tail</fo:inline> from list <fo:inline font-family="monospace">list</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if it is
          not a list or the list is empty.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20614896">int enif_get_list_length(ErlNifEnv* env,
        ERL_NIF_TERM term, unsigned* len)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">*len</fo:inline> to the length of list <fo:inline font-family="monospace">term</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is
          not a proper list.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20620768">int enif_get_long(ErlNifEnv* env, ERL_NIF_TERM
        term, long int* ip)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">*ip</fo:inline> to the long integer value of <fo:inline font-family="monospace">term</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is
          not an integer or is outside the bounds of type <fo:inline font-family="monospace">long int</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20626688">int enif_get_map_size(ErlNifEnv* env,
        ERL_NIF_TERM term, size_t *size)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">*size</fo:inline> to the number of key-value pairs in the map
          <fo:inline font-family="monospace">term</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is
          not a map.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20632160">int enif_get_map_value(ErlNifEnv* env,
        ERL_NIF_TERM map, ERL_NIF_TERM key, ERL_NIF_TERM* value)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">*value</fo:inline> to the value associated with <fo:inline font-family="monospace">key</fo:inline> in the
          map <fo:inline font-family="monospace">map</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">map</fo:inline> is not
          a map or if <fo:inline font-family="monospace">map</fo:inline> does not contain <fo:inline font-family="monospace">key</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20639136">int enif_get_resource(ErlNifEnv* env,
        ERL_NIF_TERM term, ErlNifResourceType* type, void** objp)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">*objp</fo:inline> to point to the resource object referred to by
          <fo:inline font-family="monospace">term</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is
          not a handle to a resource object of type <fo:inline font-family="monospace">type</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20645280">int enif_get_string(ErlNifEnv* env,
        ERL_NIF_TERM list, char* buf, unsigned size,
        ErlNifCharEncoding encode)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writes a <fo:inline font-family="monospace">NULL</fo:inline>-terminated string in the buffer pointed to by
          <fo:inline font-family="monospace">buf</fo:inline> with size <fo:inline font-family="monospace">size</fo:inline>, consisting of the characters
          in the string <fo:inline font-family="monospace">list</fo:inline>. The characters are written using encoding
          <fo:inline font-style="italic">encode</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns one of the following:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The number of bytes written (including terminating <fo:inline font-family="monospace">NULL</fo:inline>
            character)</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">-size</fo:inline> if the string was truncated because of buffer
            space</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">0</fo:inline> if <fo:inline font-family="monospace">list</fo:inline> is not a string that can be encoded
            with <fo:inline font-family="monospace">encode</fo:inline> or if <fo:inline font-family="monospace">size</fo:inline> was &lt; <fo:inline font-family="monospace">1</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The written string is always <fo:inline font-family="monospace">NULL</fo:inline>-terminated, unless buffer
          <fo:inline font-family="monospace">size</fo:inline> is &lt; <fo:inline font-family="monospace">1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20657952">int enif_get_tuple(ErlNifEnv* env, ERL_NIF_TERM
        term, int* arity, const ERL_NIF_TERM** array)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">term</fo:inline> is a tuple, this function sets <fo:inline font-family="monospace">*array</fo:inline> to point
          to an array containing the elements of the tuple, and sets
          <fo:inline font-family="monospace">*arity</fo:inline> to the number of elements. Notice that the array
          is read-only and <fo:inline font-family="monospace">(*array)[N-1]</fo:inline> is the Nth element of
          the tuple. <fo:inline font-family="monospace">*array</fo:inline> is undefined if the arity of the tuple
          is zero.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is
          not a tuple.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20664992">int enif_get_uint(ErlNifEnv* env, ERL_NIF_TERM
        term, unsigned int* ip)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">*ip</fo:inline> to the unsigned integer value of <fo:inline font-family="monospace">term</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is
          not an unsigned integer or is outside the bounds of type
          <fo:inline font-family="monospace">unsigned int</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20670944">int enif_get_uint64(ErlNifEnv* env,
        ERL_NIF_TERM term, ErlNifUInt64* ip)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">*ip</fo:inline> to the unsigned integer value of <fo:inline font-family="monospace">term</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is
          not an unsigned integer or is outside the bounds of an unsigned
          64-bit integer.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20676464">int enif_get_ulong(ErlNifEnv* env, ERL_NIF_TERM
        term, unsigned long* ip)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">*ip</fo:inline> to the unsigned long integer value of
          <fo:inline font-family="monospace">term</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is
          not an unsigned integer or is outside the bounds of type
          <fo:inline font-family="monospace">unsigned long</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20682432">int enif_getenv(const char* key, char* value,
        size_t *value_size)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_getenv</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20686192">int enif_has_pending_exception(ErlNifEnv* env,
        ERL_NIF_TERM* reason)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if a pending exception is associated with the
          environment <fo:inline font-family="monospace">env</fo:inline>. If <fo:inline font-family="monospace">reason</fo:inline> is a <fo:inline font-family="monospace">NULL</fo:inline> pointer,
          ignore it. Otherwise, if a pending exception associated with
          <fo:inline font-family="monospace">env</fo:inline> exists, set <fo:inline font-family="monospace">*reason</fo:inline> to the value of the exception
	  term. For example, if <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_make_badarg</fo:inline></fo:inline> is called to set a pending
          <fo:inline font-family="monospace">badarg</fo:inline> exception, a later call to
          <fo:inline font-family="monospace">enif_has_pending_exception(env, &amp;reason)</fo:inline> sets
          <fo:inline font-family="monospace">*reason</fo:inline> to the atom <fo:inline font-family="monospace">badarg</fo:inline>, then return <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_make_badarg</fo:inline></fo:inline> and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_raise_exception</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20697888">ErlNifUInt64 enif_hash(ErlNifHash type, ERL_NIF_TERM term, ErlNifUInt64 salt)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Hashes <fo:inline font-family="monospace">term</fo:inline> according to the specified
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifHash</fo:inline></fo:inline> <fo:inline font-family="monospace">type</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Ranges of taken salt (if any) and returned value depend on the hash type.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20703024">int enif_inspect_binary(ErlNifEnv* env,
        ERL_NIF_TERM bin_term, ErlNifBinary* bin)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initializes the structure pointed to by <fo:inline font-family="monospace">bin</fo:inline> with information
          about binary term <fo:inline font-family="monospace">bin_term</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">bin_term</fo:inline>
          is not a binary.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20708528">int enif_inspect_iolist_as_binary(ErlNifEnv*
        env, ERL_NIF_TERM term, ErlNifBinary* bin)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initializes the structure pointed to by <fo:inline font-family="monospace">bin</fo:inline> with a
          continuous buffer with the same byte content as <fo:inline font-family="monospace">iolist</fo:inline>. As
          with <fo:inline font-family="monospace">inspect_binary</fo:inline>, the data pointed to by <fo:inline font-family="monospace">bin</fo:inline> is
          transient and does not need to be released.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">iolist</fo:inline> is
          not an iolist.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20715184">int enif_is_atom(ErlNifEnv* env, ERL_NIF_TERM term)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20719104">int enif_is_binary(ErlNifEnv* env, ERL_NIF_TERM term)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is a binary.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20723024">int enif_is_current_process_alive(ErlNifEnv* env)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if the currently executing process is currently
          alive, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can only be used from a NIF-calling thread, and with
          an environment corresponding to currently executing processes.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20727440">int enif_is_empty_list(ErlNifEnv* env,
        ERL_NIF_TERM term)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is an empty list.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20731056">int enif_is_exception(ErlNifEnv* env,
        ERL_NIF_TERM term)</fo:block></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Return true if <fo:inline font-family="monospace">term</fo:inline> is an exception.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20734624">int enif_is_fun(ErlNifEnv* env, ERL_NIF_TERM
        term)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is a fun.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20738224">int enif_is_identical(ERL_NIF_TERM lhs,
        ERL_NIF_TERM rhs)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if the two terms are identical. Corresponds to
          the Erlang operators <fo:inline font-family="monospace">=:=</fo:inline> and <fo:inline font-family="monospace">=/=</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20742496">int enif_is_list(ErlNifEnv* env, ERL_NIF_TERM term)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is a list.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20746256">int enif_is_map(ErlNifEnv* env, ERL_NIF_TERM
        term)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is a map, otherwise
          <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20750320">int enif_is_number(ErlNifEnv* env, ERL_NIF_TERM
        term)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is a number.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20754112">int enif_is_pid(ErlNifEnv* env, ERL_NIF_TERM term)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is a pid.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20758032">int enif_is_port(ErlNifEnv* env, ERL_NIF_TERM term)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is a port.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20761792">int enif_is_port_alive(ErlNifEnv* env,
        ErlNifPort *port_id)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">port_id</fo:inline> is alive.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is only thread-safe when the emulator with SMP support
          is used. It can only be used in a non-SMP emulator from a NIF-calling
          thread.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20766000">int enif_is_process_alive(ErlNifEnv* env,
        ErlNifPid *pid)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">pid</fo:inline> is alive.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is only thread-safe when the emulator with SMP support
          is used. It can only be used in a non-SMP emulator from a NIF-calling
          thread.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20770368">int enif_is_ref(ErlNifEnv* env, ERL_NIF_TERM term)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is a reference.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20774288">int enif_is_tuple(ErlNifEnv* env, ERL_NIF_TERM term)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is a tuple.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20778208">int enif_keep_resource(void* obj)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a reference to resource object <fo:inline font-family="monospace">obj</fo:inline> obtained from
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_alloc_resource</fo:inline></fo:inline>. Each call to
          <fo:inline font-family="monospace">enif_keep_resource</fo:inline> for an object must be balanced by a call to
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_release_resource</fo:inline></fo:inline>
          before the object is destructed.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20784240">ERL_NIF_TERM enif_make_atom(ErlNifEnv* env, const char* name)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an atom term from the <fo:inline font-family="monospace">NULL</fo:inline>-terminated C-string
          <fo:inline font-family="monospace">name</fo:inline> with ISO Latin-1 encoding. If the length of <fo:inline font-family="monospace">name</fo:inline>
          exceeds the maximum length allowed for an atom (255 characters),
          <fo:inline font-family="monospace">enif_make_atom</fo:inline> invokes <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_make_badarg</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20790016">ERL_NIF_TERM enif_make_atom_len(ErlNifEnv* env,
        const char* name, size_t len)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create an atom term from the string <fo:inline font-family="monospace">name</fo:inline> with length
          <fo:inline font-family="monospace">len</fo:inline>. <fo:inline font-family="monospace">NULL</fo:inline> characters are treated as any other
          characters. If <fo:inline font-family="monospace">len</fo:inline> exceeds the maximum length
          allowed for an atom (255 characters), <fo:inline font-family="monospace">enif_make_atom</fo:inline> invokes
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_make_badarg</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20796272">ERL_NIF_TERM enif_make_badarg(ErlNifEnv* env)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes a <fo:inline font-family="monospace">badarg</fo:inline> exception to be returned from a NIF, and
          associates it with environment <fo:inline font-family="monospace">env</fo:inline>. Once a NIF or any function
          it calls invokes <fo:inline font-family="monospace">enif_make_badarg</fo:inline>, the runtime ensures that a
          <fo:inline font-family="monospace">badarg</fo:inline> exception is raised when the NIF returns, even if the
          NIF attempts to return a non-exception term instead.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value from <fo:inline font-family="monospace">enif_make_badarg</fo:inline> can be used only as
          the return value from the NIF that invoked it (directly or indirectly)
          or be passed to <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_is_exception</fo:inline></fo:inline>, but not to any other NIF API
          function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_has_pending_exception</fo:inline></fo:inline> and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_raise_exception</fo:inline></fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before ERTS 7.0 (Erlang/OTP 18), the return value
            from <fo:inline font-family="monospace">enif_make_badarg</fo:inline> had to be returned from the NIF. This
            requirement is now lifted as the return value from the NIF is
            ignored if <fo:inline font-family="monospace">enif_make_badarg</fo:inline> has been invoked.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20807648">ERL_NIF_TERM enif_make_binary(ErlNifEnv* env, ErlNifBinary* bin)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes a binary term from <fo:inline font-family="monospace">bin</fo:inline>. Any ownership of
          the binary data is transferred to the created term and
          <fo:inline font-family="monospace">bin</fo:inline> is to be considered read-only for the rest of the NIF
          call and then as released.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20811568">ERL_NIF_TERM enif_make_copy(ErlNifEnv* dst_env,
        ERL_NIF_TERM src_term)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes a copy of term <fo:inline font-family="monospace">src_term</fo:inline>. The copy is created in
          environment <fo:inline font-family="monospace">dst_env</fo:inline>. The source term can be located in any
          environment.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20815408">ERL_NIF_TERM enif_make_double(ErlNifEnv* env, double d)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a floating-point term from a <fo:inline font-family="monospace">double</fo:inline>. If argument
          <fo:inline font-family="monospace">double</fo:inline> is not finite or is NaN, <fo:inline font-family="monospace">enif_make_double</fo:inline>
          invokes <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_make_badarg</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20820512">int enif_make_existing_atom(ErlNifEnv* env,
        const char* name, ERL_NIF_TERM* atom, ErlNifCharEncoding
        encode)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to create the term of an already existing atom from
          the <fo:inline font-family="monospace">NULL</fo:inline>-terminated C-string <fo:inline font-family="monospace">name</fo:inline> with encoding
          <fo:inline font-style="italic">encode</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the atom already exists, this function stores the term in
          <fo:inline font-family="monospace">*atom</fo:inline> and returns <fo:inline font-family="monospace">true</fo:inline>, otherwise <fo:inline font-family="monospace">false</fo:inline>.
          Also returns <fo:inline font-family="monospace">false</fo:inline> if the length of <fo:inline font-family="monospace">name</fo:inline> exceeds the
          maximum length allowed for an atom (255 characters).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20827808">int enif_make_existing_atom_len(ErlNifEnv* env,
        const char* name, size_t len, ERL_NIF_TERM* atom, ErlNifCharEncoding
        encoding)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to create the term of an already existing atom from the
          string <fo:inline font-family="monospace">name</fo:inline> with length <fo:inline font-family="monospace">len</fo:inline> and encoding
          <fo:inline font-style="italic">encode</fo:inline>. <fo:inline font-family="monospace">NULL</fo:inline>
          characters are treated as any other characters.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the atom already exists, this function stores the term in
          <fo:inline font-family="monospace">*atom</fo:inline> and returns <fo:inline font-family="monospace">true</fo:inline>, otherwise <fo:inline font-family="monospace">false</fo:inline>.
          Also returns <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">len</fo:inline> exceeds the maximum length
          allowed for an atom (255 characters).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20835616">ERL_NIF_TERM enif_make_int(ErlNifEnv* env, int i)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an integer term.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20838464">ERL_NIF_TERM enif_make_int64(ErlNifEnv* env, ErlNifSInt64 i)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an integer term from a signed 64-bit integer.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20841504">ERL_NIF_TERM enif_make_list(ErlNifEnv* env, unsigned cnt, ...)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an ordinary list term of length <fo:inline font-family="monospace">cnt</fo:inline>. Expects
          <fo:inline font-family="monospace">cnt</fo:inline> number of arguments (after <fo:inline font-family="monospace">cnt</fo:inline>) of type
          <fo:inline font-family="monospace">ERL_NIF_TERM</fo:inline> as the elements of the list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an empty list if <fo:inline font-family="monospace">cnt</fo:inline> is 0.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20847280">ERL_NIF_TERM enif_make_list1(ErlNifEnv* env, ERL_NIF_TERM e1)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20848336">ERL_NIF_TERM enif_make_list2(ErlNifEnv* env,
        ERL_NIF_TERM e1, ERL_NIF_TERM e2)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20849264">ERL_NIF_TERM enif_make_list3(ErlNifEnv* env,
        ERL_NIF_TERM e1, ERL_NIF_TERM e2, ERL_NIF_TERM e3)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20850208">ERL_NIF_TERM enif_make_list4(ErlNifEnv* env,
        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e4)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20851136">ERL_NIF_TERM enif_make_list5(ErlNifEnv* env,
        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e5)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20852064">ERL_NIF_TERM enif_make_list6(ErlNifEnv* env,
        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e6)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20852992">ERL_NIF_TERM enif_make_list7(ErlNifEnv* env,
        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e7)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20853920">ERL_NIF_TERM enif_make_list8(ErlNifEnv* env,
        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e8)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20854848">ERL_NIF_TERM enif_make_list9(ErlNifEnv* env,
        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e9)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an ordinary list term with length indicated by the
          function name. Prefer these functions (macros) over the variadic
          <fo:inline font-family="monospace">enif_make_list</fo:inline> to get a compile-time error if the number of
          arguments does not match.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20858208">ERL_NIF_TERM enif_make_list_cell(ErlNifEnv*
        env, ERL_NIF_TERM head, ERL_NIF_TERM tail)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a list cell <fo:inline font-family="monospace">[head | tail]</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20861536">ERL_NIF_TERM enif_make_list_from_array(ErlNifEnv* env, const ERL_NIF_TERM
          arr[], unsigned cnt)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an ordinary list containing the elements of array <fo:inline font-family="monospace">arr</fo:inline>
          of length <fo:inline font-family="monospace">cnt</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an empty list if <fo:inline font-family="monospace">cnt</fo:inline> is 0.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20866304">ERL_NIF_TERM enif_make_long(ErlNifEnv* env, long int i)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an integer term from a <fo:inline font-family="monospace">long int</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20869472">int enif_make_map_put(ErlNifEnv* env,
        ERL_NIF_TERM map_in, ERL_NIF_TERM key, ERL_NIF_TERM value,
        ERL_NIF_TERM* map_out)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes a copy of map <fo:inline font-family="monospace">map_in</fo:inline> and inserts <fo:inline font-family="monospace">key</fo:inline> with
          <fo:inline font-family="monospace">value</fo:inline>. If <fo:inline font-family="monospace">key</fo:inline> already exists in <fo:inline font-family="monospace">map_in</fo:inline>, the old
          associated value is replaced by <fo:inline font-family="monospace">value</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If successful, this function sets <fo:inline font-family="monospace">*map_out</fo:inline> to the new map and
          returns <fo:inline font-family="monospace">true</fo:inline>. Returns <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">map_in</fo:inline> is not a
          map.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">map_in</fo:inline> term must belong to environment <fo:inline font-family="monospace">env</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20878624">int enif_make_map_remove(ErlNifEnv* env,
        ERL_NIF_TERM map_in, ERL_NIF_TERM key, ERL_NIF_TERM* map_out)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If map <fo:inline font-family="monospace">map_in</fo:inline> contains <fo:inline font-family="monospace">key</fo:inline>, this function makes a copy
          of <fo:inline font-family="monospace">map_in</fo:inline> in <fo:inline font-family="monospace">*map_out</fo:inline>, and removes <fo:inline font-family="monospace">key</fo:inline> and the
          associated value. If map <fo:inline font-family="monospace">map_in</fo:inline> does not contain <fo:inline font-family="monospace">key</fo:inline>,
          <fo:inline font-family="monospace">*map_out</fo:inline> is set to <fo:inline font-family="monospace">map_in</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">map_in</fo:inline> is
          not a map.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">map_in</fo:inline> term must belong to environment <fo:inline font-family="monospace">env</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20888800">int enif_make_map_update(ErlNifEnv* env,
        ERL_NIF_TERM map_in, ERL_NIF_TERM key, ERL_NIF_TERM new_value,
        ERL_NIF_TERM* map_out)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes a copy of map <fo:inline font-family="monospace">map_in</fo:inline> and replace the old associated
          value for <fo:inline font-family="monospace">key</fo:inline> with <fo:inline font-family="monospace">new_value</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If successful, this function sets <fo:inline font-family="monospace">*map_out</fo:inline> to the new map and
          returns <fo:inline font-family="monospace">true</fo:inline>. Returns <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">map_in</fo:inline> is not a
          map or if it does not contain <fo:inline font-family="monospace">key</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">map_in</fo:inline> term must belong to environment <fo:inline font-family="monospace">env</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20897088">unsigned char *enif_make_new_binary(ErlNifEnv*
        env, size_t size, ERL_NIF_TERM* termp)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allocates a binary of size <fo:inline font-family="monospace">size</fo:inline> bytes and creates an owning
          term. The binary data is mutable until the calling NIF returns.
          This is a quick way to create a new binary without having to use
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifBinary</fo:inline></fo:inline>.
          The drawbacks are that the binary cannot be kept between NIF calls
          and it cannot be reallocated.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a pointer to the raw binary data and sets
          <fo:inline font-family="monospace">*termp</fo:inline> to the binary term.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20902512">ERL_NIF_TERM enif_make_new_map(ErlNifEnv* env)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes an empty map term.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20905360">ERL_NIF_TERM enif_make_pid(ErlNifEnv* env, const ErlNifPid* pid)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes a pid term from <fo:inline font-family="monospace">*pid</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20908816">ERL_NIF_TERM enif_make_ref(ErlNifEnv* env)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a reference like <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:make_ref/0</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20912672">ERL_NIF_TERM enif_make_resource(ErlNifEnv* env, void* obj)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an opaque handle to a memory-managed resource object
          obtained by <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_alloc_resource</fo:inline></fo:inline>. No ownership transfer is done,
          as the resource object still needs to be released by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_release_resource</fo:inline></fo:inline>. However, notice that the call
          to <fo:inline font-family="monospace">enif_release_resource</fo:inline> can occur immediately after obtaining
          the term from <fo:inline font-family="monospace">enif_make_resource</fo:inline>, in which case the resource
          object is deallocated when the term is garbage collected. For more
          details, see the <fo:inline font-style="italic">example of
          creating and returning a resource object</fo:inline> in the User's
          Guide.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the only defined behavior of using a resource term in
          an Erlang program is to store it and send it between processes on the
          same node. Other operations, such as matching or
          <fo:inline font-family="monospace">term_to_binary</fo:inline>, have unpredictable (but harmless) results.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20920880">ERL_NIF_TERM enif_make_resource_binary(ErlNifEnv* env, void* obj, const
        void* data, size_t size)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a binary term that is memory-managed by a resource object
          <fo:inline font-family="monospace">obj</fo:inline> obtained by <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_alloc_resource</fo:inline></fo:inline>. The returned binary term
          consists of <fo:inline font-family="monospace">size</fo:inline> bytes pointed to by <fo:inline font-family="monospace">data</fo:inline>. This raw
          binary data must be kept readable and unchanged until the destructor
          of the resource is called. The binary data can be stored external to
          the resource object, in which case the destructor is responsible
          for releasing the data.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Several binary terms can be managed by the same resource object. The
          destructor is not called until the last binary is garbage collected.
          This can be useful to return different parts of a larger binary
          buffer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As with <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_make_resource</fo:inline></fo:inline>, no ownership transfer is done.
          The resource still needs to be released with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_release_resource</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20929712">int enif_make_reverse_list(ErlNifEnv* env, ERL_NIF_TERM list_in,
        ERL_NIF_TERM *list_out)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">*list_out</fo:inline> to the reverse list of the list <fo:inline font-family="monospace">list_in</fo:inline>
          and returns <fo:inline font-family="monospace">true</fo:inline>, or returns <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">list_in</fo:inline> is
          not a list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is only to be used on short lists, as a copy is
          created of the list, which is not released until after the NIF
          returns.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">list_in</fo:inline> term must belong to environment <fo:inline font-family="monospace">env</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20936688">ERL_NIF_TERM enif_make_string(ErlNifEnv* env,
        const char* string, ErlNifCharEncoding encoding)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a list containing the characters of the
          <fo:inline font-family="monospace">NULL</fo:inline>-terminated string <fo:inline font-family="monospace">string</fo:inline> with encoding
          <fo:inline font-style="italic">encoding</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20941104">ERL_NIF_TERM enif_make_string_len(ErlNifEnv*
        env, const char* string, size_t len, ErlNifCharEncoding
        encoding)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a list containing the characters of the string <fo:inline font-family="monospace">string</fo:inline>
          with length <fo:inline font-family="monospace">len</fo:inline> and encoding
          <fo:inline font-style="italic">encoding</fo:inline>.
          <fo:inline font-family="monospace">NULL</fo:inline> characters are treated as any other characters.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20946000">ERL_NIF_TERM enif_make_sub_binary(ErlNifEnv*
        env, ERL_NIF_TERM bin_term, size_t pos, size_t size)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes a subbinary of binary <fo:inline font-family="monospace">bin_term</fo:inline>, starting at
          zero-based position <fo:inline font-family="monospace">pos</fo:inline> with a length of <fo:inline font-family="monospace">size</fo:inline> bytes.
          <fo:inline font-family="monospace">bin_term</fo:inline> must be a binary or bitstring. <fo:inline font-family="monospace">pos+size</fo:inline> must
          be less or equal to the number of whole bytes in <fo:inline font-family="monospace">bin_term</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20951536">ERL_NIF_TERM enif_make_tuple(ErlNifEnv* env,
        unsigned cnt, ...)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a tuple term of arity <fo:inline font-family="monospace">cnt</fo:inline>. Expects <fo:inline font-family="monospace">cnt</fo:inline> number
          of arguments (after <fo:inline font-family="monospace">cnt</fo:inline>) of type <fo:inline font-family="monospace">ERL_NIF_TERM</fo:inline> as the
          elements of the tuple.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20956096">ERL_NIF_TERM enif_make_tuple1(ErlNifEnv* env,
        ERL_NIF_TERM e1)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20957008">ERL_NIF_TERM enif_make_tuple2(ErlNifEnv* env,
        ERL_NIF_TERM e1, ERL_NIF_TERM e2)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20957936">ERL_NIF_TERM enif_make_tuple3(ErlNifEnv* env,
        ERL_NIF_TERM e1, ERL_NIF_TERM e2, ERL_NIF_TERM e3)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20958880">ERL_NIF_TERM enif_make_tuple4(ErlNifEnv* env,
        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e4)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20959808">ERL_NIF_TERM enif_make_tuple5(ErlNifEnv* env,
        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e5)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20960736">ERL_NIF_TERM enif_make_tuple6(ErlNifEnv* env,
        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e6)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20961664">ERL_NIF_TERM enif_make_tuple7(ErlNifEnv* env,
        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e7)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20962592">ERL_NIF_TERM enif_make_tuple8(ErlNifEnv* env,
        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e8)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20963520">ERL_NIF_TERM enif_make_tuple9(ErlNifEnv* env,
        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e9)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a tuple term with length indicated by the
          function name. Prefer these functions (macros) over the variadic
          <fo:inline font-family="monospace">enif_make_tuple</fo:inline> to get a compile-time error if the number of
          arguments does not match.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20967024">ERL_NIF_TERM enif_make_tuple_from_array(ErlNifEnv* env, const ERL_NIF_TERM
        arr[], unsigned cnt)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a tuple containing the elements of array <fo:inline font-family="monospace">arr</fo:inline>
          of length <fo:inline font-family="monospace">cnt</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20970864">ERL_NIF_TERM enif_make_uint(ErlNifEnv* env, unsigned int i)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an integer term from an <fo:inline font-family="monospace">unsigned int</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20974352">ERL_NIF_TERM enif_make_uint64(ErlNifEnv* env, ErlNifUInt64 i)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an integer term from an unsigned 64-bit integer.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20977424">ERL_NIF_TERM enif_make_ulong(ErlNifEnv* env, unsigned long i)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an integer term from an <fo:inline font-family="monospace">unsigned long int</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20980768">ERL_NIF_TERM enif_make_unique_integer(ErlNifEnv
        *env, ErlNifUniqueInteger properties)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a unique integer with the same properties as specified by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:unique_integer/1</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">env</fo:inline> is the environment to create the integer in.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_NIF_UNIQUE_POSITIVE</fo:inline> and <fo:inline font-family="monospace">ERL_NIF_UNIQUE_MONOTONIC</fo:inline>
          can be passed as the second argument to change the properties of the
          integer returned. They can be combined by OR:ing the two values
          together.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">ErlNifUniqueInteger</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20987984">int enif_map_iterator_create(ErlNifEnv *env,
        ERL_NIF_TERM map, ErlNifMapIterator *iter, ErlNifMapIteratorEntry
        entry)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an iterator for the map <fo:inline font-family="monospace">map</fo:inline> by initializing the
          structure pointed to by <fo:inline font-family="monospace">iter</fo:inline>. Argument <fo:inline font-family="monospace">entry</fo:inline> determines
          the start position of the iterator: <fo:inline font-family="monospace">ERL_NIF_MAP_ITERATOR_FIRST</fo:inline>
          or <fo:inline font-family="monospace">ERL_NIF_MAP_ITERATOR_LAST</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or false if <fo:inline font-family="monospace">map</fo:inline> is not a
          map.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A map iterator is only useful during the lifetime of environment
          <fo:inline font-family="monospace">env</fo:inline> that the <fo:inline font-family="monospace">map</fo:inline> belongs to. The iterator must be
          destroyed by calling <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_map_iterator_destroy</fo:inline></fo:inline>:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ERL_NIF_TERM key, value;
ErlNifMapIterator iter;
enif_map_iterator_create(env, my_map, &amp;iter, ERL_NIF_MAP_ITERATOR_FIRST);

while (enif_map_iterator_get_pair(env, &amp;iter, &amp;key, &amp;value)) {
    do_something(key,value);
    enif_map_iterator_next(env, &amp;iter);
}
enif_map_iterator_destroy(env, &amp;iter);</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The key-value pairs of a map have no defined iteration order.
            The only guarantee is that the iteration order of a single map
            instance is preserved during the lifetime of the environment that
            the map belongs to.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp20999120">void enif_map_iterator_destroy(ErlNifEnv *env,
        ErlNifMapIterator *iter)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Destroys a map iterator created by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_map_iterator_create</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21002912">int enif_map_iterator_get_pair(ErlNifEnv *env,
        ErlNifMapIterator *iter, ERL_NIF_TERM *key, ERL_NIF_TERM
        *value)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets key and value terms at the current map iterator position.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, sets <fo:inline font-family="monospace">*key</fo:inline> and <fo:inline font-family="monospace">*value</fo:inline> and returns
          <fo:inline font-family="monospace">true</fo:inline>. Returns <fo:inline font-family="monospace">false</fo:inline> if the iterator is positioned at
          head (before first entry) or tail (beyond last entry).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21008080">int enif_map_iterator_is_head(ErlNifEnv *env,
        ErlNifMapIterator *iter)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if map iterator <fo:inline font-family="monospace">iter</fo:inline> is positioned
          before the first entry.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21011760">int enif_map_iterator_is_tail(ErlNifEnv *env,
        ErlNifMapIterator *iter)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if map iterator <fo:inline font-family="monospace">iter</fo:inline> is positioned
          after the last entry.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21015440">int enif_map_iterator_next(ErlNifEnv *env,
        ErlNifMapIterator *iter)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Increments map iterator to point to the next key-value entry.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if the iterator is now positioned at a valid
          key-value entry, or <fo:inline font-family="monospace">false</fo:inline> if the iterator is positioned at
          the tail (beyond the last entry).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21019696">int enif_map_iterator_prev(ErlNifEnv *env,
        ErlNifMapIterator *iter)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decrements map iterator to point to the previous key-value entry.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if the iterator is now positioned at a valid
          key-value entry, or <fo:inline font-family="monospace">false</fo:inline> if the iterator is positioned at
          the head (before the first entry).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21023952">int enif_monitor_process(ErlNifEnv* env, void* obj,
      const ErlNifPid* target_pid, ErlNifMonitor* mon)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts monitoring a process from a resource. When a process is
          monitored, a process exit results in a call to the provided
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">down</fo:inline></fo:inline> callback associated with the resource type.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">obj</fo:inline> is pointer to the resource to hold the monitor and
	<fo:inline font-family="monospace">*target_pid</fo:inline> identifies the local process to be monitored.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">mon</fo:inline> is not <fo:inline font-family="monospace">NULL</fo:inline>, a successful call stores the
	identity of the monitor	in the
	<fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifMonitor</fo:inline></fo:inline>
	struct pointed to by <fo:inline font-family="monospace">mon</fo:inline>. This identifier is used to refer to the
	monitor for later removal with
	<fo:inline font-style="italic"><fo:inline font-family="monospace">enif_demonitor_process</fo:inline></fo:inline>
	or compare with
	<fo:inline font-style="italic"><fo:inline font-family="monospace">enif_compare_monitors</fo:inline></fo:inline>.
	A monitor is automatically removed when it triggers or when
	the resource is deallocated.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, &lt; 0 if no <fo:inline font-family="monospace">down</fo:inline> callback is
          provided, and &gt; 0 if the process is no longer alive.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is only thread-safe when the emulator with SMP support
          is used. It can only be used in a non-SMP emulator from a NIF-calling
          thread.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21036528">ErlNifTime enif_monotonic_time(ErlNifTimeUnit time_unit)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current
          <fo:inline font-style="italic">
          Erlang monotonic time</fo:inline>. Notice that it is not uncommon with
          negative values.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">time_unit</fo:inline> is the time unit of the returned value.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">ERL_NIF_TIME_ERROR</fo:inline> if called with an invalid time
          unit argument, or if called from a thread that is not a scheduler
          thread.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifTime</fo:inline></fo:inline>
          and <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifTimeUnit</fo:inline></fo:inline>.
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21044848">ErlNifMutex *enif_mutex_create(char *name)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_mutex_create</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21048544">void enif_mutex_destroy(ErlNifMutex *mtx)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_mutex_destroy</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21052240">void enif_mutex_lock(ErlNifMutex *mtx)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_mutex_lock</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21055936">int enif_mutex_trylock(ErlNifMutex *mtx)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_mutex_trylock</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21059632">void enif_mutex_unlock(ErlNifMutex *mtx)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_mutex_unlock</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21063328">ERL_NIF_TERM enif_now_time(ErlNifEnv *env)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:now()</fo:inline></fo:inline> time stamp.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">This function is deprecated.</fo:inline></fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21067600">ErlNifResourceType *enif_open_resource_type(ErlNifEnv* env, const char*
        module_str, const char* name, ErlNifResourceDtor* dtor,
        ErlNifResourceFlags flags, ErlNifResourceFlags* tried)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates or takes over a resource type identified by the string
          <fo:inline font-family="monospace">name</fo:inline> and gives it the destructor function pointed to by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">dtor</fo:inline></fo:inline>.
          Argument <fo:inline font-family="monospace">flags</fo:inline> can have the following values:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_RT_CREATE</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Creates a new resource type that does not already exist.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_RT_TAKEOVER</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Opens an existing resource type and takes over ownership of all
            its instances. The supplied destructor <fo:inline font-family="monospace">dtor</fo:inline> is called both
            for existing instances and new instances not yet created by the
            calling NIF library.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The two flag values can be combined with bitwise OR. The resource
          type name is local to the calling module. Argument <fo:inline font-family="monospace">module_str</fo:inline>
          is not (yet) used and must be <fo:inline font-family="monospace">NULL</fo:inline>. <fo:inline font-family="monospace">dtor</fo:inline> can be
          <fo:inline font-family="monospace">NULL</fo:inline> if no destructor is needed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the function returns a pointer to the resource type and
          <fo:inline font-family="monospace">*tried</fo:inline> is set to either <fo:inline font-family="monospace">ERL_NIF_RT_CREATE</fo:inline> or
          <fo:inline font-family="monospace">ERL_NIF_RT_TAKEOVER</fo:inline> to indicate what was done. On failure,
          returns <fo:inline font-family="monospace">NULL</fo:inline> and sets <fo:inline font-family="monospace">*tried</fo:inline> to <fo:inline font-family="monospace">flags</fo:inline>.
          It is allowed to set <fo:inline font-family="monospace">tried</fo:inline> to <fo:inline font-family="monospace">NULL</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-family="monospace">enif_open_resource_type</fo:inline> is only allowed to be
          called in the two callbacks
          <fo:inline font-style="italic"><fo:inline font-family="monospace">load</fo:inline></fo:inline> and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">upgrade</fo:inline></fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">enif_open_resource_type_x</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21086512">ErlNifResourceType *enif_open_resource_type_x(ErlNifEnv* env, const char* name,
	const ErlNifResourceTypeInit* init,
        ErlNifResourceFlags flags, ErlNifResourceFlags* tried)</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_open_resource_type</fo:inline></fo:inline>
	  except it accepts additional callback functions for resource types that are
	  used together with <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_select</fo:inline></fo:inline>
	  and <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_monitor_process</fo:inline></fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">init</fo:inline> is a pointer to an
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifResourceTypeInit</fo:inline></fo:inline>
	  structure that contains the function pointers for destructor, down and stop callbacks
	  for the resource type.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21093968">int enif_port_command(ErlNifEnv* env, const
       ErlNifPort* to_port, ErlNifEnv *msg_env, ERL_NIF_TERM msg)</fo:block></fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works as <fo:inline font-style="italic">
         <fo:inline font-family="monospace">erlang:port_command/2</fo:inline></fo:inline>,
         except that it is always completely asynchronous.</fo:block>
       <fo:block space-after="0.25em" space-before="0.25em">
         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">env</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">The environment of the calling process. Must not be
           <fo:inline font-family="monospace">NULL</fo:inline>.</fo:block></fo:block-container>
         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">*to_port</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">The port ID of the receiving port. The port ID is to refer to a
           port on the local node.</fo:block></fo:block-container>
         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">msg_env</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">The environment of the message term. Can be a process-independent
           environment allocated with <fo:inline font-style="italic">
           <fo:inline font-family="monospace">enif_alloc_env</fo:inline></fo:inline> or <fo:inline font-family="monospace">NULL</fo:inline>.</fo:block></fo:block-container>
         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">msg</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">The message term to send. The same limitations apply as on the
           payload to <fo:inline font-style="italic">
           <fo:inline font-family="monospace">erlang:port_command/2</fo:inline></fo:inline>.</fo:block></fo:block-container>
       </fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using a <fo:inline font-family="monospace">msg_env</fo:inline> of <fo:inline font-family="monospace">NULL</fo:inline> is an optimization, which
         groups together calls to <fo:inline font-family="monospace">enif_alloc_env</fo:inline>, <fo:inline font-family="monospace">enif_make_copy</fo:inline>,
         <fo:inline font-family="monospace">enif_port_command</fo:inline>, and <fo:inline font-family="monospace">enif_free_env</fo:inline> into one call.
         This optimization is only useful when a majority of the terms are to
         be copied from <fo:inline font-family="monospace">env</fo:inline> to <fo:inline font-family="monospace">msg_env</fo:inline>.</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if the command is successfully sent. Returns
         <fo:inline font-family="monospace">false</fo:inline> if the command fails, for example:</fo:block>
       <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
         <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">*to_port</fo:inline> does not refer to a local port.</fo:block></fo:list-item-body></fo:list-item>
         <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The currently executing process (that is, the sender) is not
           alive.</fo:block></fo:list-item-body></fo:list-item>
         <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">msg</fo:inline> is invalid.</fo:block></fo:list-item-body></fo:list-item>
       </fo:list-block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
         <fo:inline font-family="monospace">enif_get_local_port</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21115600">void *enif_priv_data(ErlNifEnv* env)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the pointer to the private data that was set by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">load</fo:inline></fo:inline> or
          <fo:inline font-style="italic"><fo:inline font-family="monospace">upgrade</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21120032">ERL_NIF_TERM enif_raise_exception(ErlNifEnv*
        env, ERL_NIF_TERM reason)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an error exception with the term <fo:inline font-family="monospace">reason</fo:inline> to be
          returned from a NIF, and associates it with environment <fo:inline font-family="monospace">env</fo:inline>.
          Once a NIF or any function it calls invokes
          <fo:inline font-family="monospace">enif_raise_exception</fo:inline>, the runtime ensures that the exception
          it creates is raised when the NIF returns, even if the NIF attempts
          to return a non-exception term instead.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value from <fo:inline font-family="monospace">enif_raise_exception</fo:inline> can only be used
          as the return value from the NIF that invoked it (directly or
          indirectly) or be passed to <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_is_exception</fo:inline></fo:inline>, but not to any other NIF API
          function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_has_pending_exception</fo:inline></fo:inline> and
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_make_badarg</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21129104">int enif_realloc_binary(ErlNifBinary* bin, size_t size)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the size of a binary <fo:inline font-family="monospace">bin</fo:inline>. The source binary
          can be read-only, in which case it is left untouched and
          a mutable copy is allocated and assigned to <fo:inline font-family="monospace">*bin</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if memory allocation
          failed.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21134528">void enif_release_binary(ErlNifBinary* bin)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Releases a binary obtained from
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_alloc_binary</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21138400">void enif_release_resource(void* obj)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes a reference to resource object <fo:inline font-family="monospace">obj</fo:inline> obtained from
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_alloc_resource</fo:inline></fo:inline>.
          The resource object is destructed when the last reference is removed.
          Each call to <fo:inline font-family="monospace">enif_release_resource</fo:inline> must correspond to a
          previous call to <fo:inline font-family="monospace">enif_alloc_resource</fo:inline> or
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_keep_resource</fo:inline></fo:inline>.
          References made by <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_make_resource</fo:inline></fo:inline>
          can only be removed by the garbage collector.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21145840">ErlNifRWLock *enif_rwlock_create(char *name)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_rwlock_create</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21149536">void enif_rwlock_destroy(ErlNifRWLock *rwlck)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_rwlock_destroy</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21153248">void enif_rwlock_rlock(ErlNifRWLock *rwlck)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_rwlock_rlock</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21156944">void enif_rwlock_runlock(ErlNifRWLock *rwlck)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_rwlock_runlock</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21160656">void enif_rwlock_rwlock(ErlNifRWLock *rwlck)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_rwlock_rwlock</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21164352">void enif_rwlock_rwunlock(ErlNifRWLock *rwlck)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_rwlock_rwunlock</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21168064">int enif_rwlock_tryrlock(ErlNifRWLock *rwlck)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_rwlock_tryrlock</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21171776">int enif_rwlock_tryrwlock(ErlNifRWLock *rwlck)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_rwlock_tryrwlock</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21175344">ERL_NIF_TERM enif_schedule_nif(ErlNifEnv* env,
        const char* fun_name, int flags, ERL_NIF_TERM (*fp)(ErlNifEnv* env, int
        argc, const ERL_NIF_TERM argv[]), int argc, const ERL_NIF_TERM
        argv[])</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Schedules NIF <fo:inline font-family="monospace">fp</fo:inline> to execute. This function allows an
          application to break up long-running work into multiple regular NIF
          calls or to schedule a <fo:inline font-style="italic">
          dirty NIF</fo:inline> to execute on a dirty scheduler thread.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">fun_name</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides a name for the NIF that is scheduled for execution.
              If it cannot be converted to an atom, <fo:inline font-family="monospace">enif_schedule_nif</fo:inline>
              returns a <fo:inline font-family="monospace">badarg</fo:inline> exception.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">flags</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Must be set to <fo:inline font-family="monospace">0</fo:inline> for a regular NIF. If the emulator was
              built with dirty scheduler support enabled,
              <fo:inline font-family="monospace">flags</fo:inline> can be set to either
              <fo:inline font-family="monospace">ERL_NIF_DIRTY_JOB_CPU_BOUND</fo:inline> if the job is expected to be
              CPU-bound, or <fo:inline font-family="monospace">ERL_NIF_DIRTY_JOB_IO_BOUND</fo:inline> for
              jobs that will be I/O-bound. If dirty scheduler threads are not
              available in the emulator, an attempt to schedule such a job
              results in a <fo:inline font-family="monospace">notsup</fo:inline> exception.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">argc</fo:inline> and <fo:inline font-family="monospace">argv</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can either be the originals passed into the calling NIF,
              or can be values created by the calling NIF.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The calling NIF must use the return value of
          <fo:inline font-family="monospace">enif_schedule_nif</fo:inline> as its own return value.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Be aware that <fo:inline font-family="monospace">enif_schedule_nif</fo:inline>, as its name implies, only
          schedules the NIF for future execution. The calling NIF does not
          block waiting for the scheduled NIF to execute and return. This means
          that the calling NIF cannot expect to receive the scheduled NIF
          return value and use it for further operations.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21190864">int enif_select(ErlNifEnv* env, ErlNifEvent event, enum ErlNifSelectFlags mode,
	void* obj, const ErlNifPid* pid, ERL_NIF_TERM ref)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be used to receive asynchronous notifications
	  when OS-specific event objects become ready for either read or write operations.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">event</fo:inline> identifies the event object. On Unix
	  systems, the functions <fo:inline font-family="monospace">select</fo:inline>/<fo:inline font-family="monospace">poll</fo:inline> are used. The event
	  object must be a socket, pipe or other file descriptor object that
	  <fo:inline font-family="monospace">select</fo:inline>/<fo:inline font-family="monospace">poll</fo:inline> can use.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">mode</fo:inline> describes the type of events to wait for. It can be
	  <fo:inline font-family="monospace">ERL_NIF_SELECT_READ</fo:inline>, <fo:inline font-family="monospace">ERL_NIF_SELECT_WRITE</fo:inline> or a bitwise
	  OR combination to wait for both. It can also be <fo:inline font-family="monospace">ERL_NIF_SELECT_STOP</fo:inline>
	  which is described further below. When a read or write event is triggerred,
	  a notification message like this is sent to the process identified by
	  <fo:inline font-family="monospace">pid</fo:inline>:</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">{select, Obj, Ref, ready_input | ready_output}</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ready_input</fo:inline> or <fo:inline font-family="monospace">ready_output</fo:inline> indicates if the event object
	  is ready for reading or writing.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">pid</fo:inline> may be <fo:inline font-family="monospace">NULL</fo:inline> to indicate the calling process.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">obj</fo:inline> is a resource object obtained from
          <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_alloc_resource</fo:inline></fo:inline>.
	  The purpose of the resource objects is as a container of the event object
	  to manage its state and lifetime. A handle to the resource is received
	  in the notification message as <fo:inline font-family="monospace">Obj</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">ref</fo:inline> must be either a reference obtained from
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:make_ref/0</fo:inline></fo:inline>
	  or the atom <fo:inline font-family="monospace">undefined</fo:inline>. It will be passed as <fo:inline font-family="monospace">Ref</fo:inline> in the notifications.
	  If a selective <fo:inline font-family="monospace">receive</fo:inline> statement is used to wait for the notification
	  then a reference created just before the <fo:inline font-family="monospace">receive</fo:inline> will exploit a runtime
	  optimization that bypasses all earlier received messages in the queue.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The notifications are one-shot only. To receive further notifications of the same
	  type (read or write), repeated calls to <fo:inline font-family="monospace">enif_select</fo:inline> must be made
	  after receiving each notification.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use <fo:inline font-family="monospace">ERL_NIF_SELECT_STOP</fo:inline> as <fo:inline font-family="monospace">mode</fo:inline> in order to safely
	  close an event object that has been passed to <fo:inline font-family="monospace">enif_select</fo:inline>. The
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">stop</fo:inline></fo:inline> callback
	  of the resource <fo:inline font-family="monospace">obj</fo:inline> will be called when it is safe to close
	  the event object. This safe way of closing event objects must be used
	  even if all notifications have been received and no further calls to
	  <fo:inline font-family="monospace">enif_select</fo:inline> have been made.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first call to <fo:inline font-family="monospace">enif_select</fo:inline> for a specific OS <fo:inline font-family="monospace">event</fo:inline> will establish
	  a relation between the event object and the containing resource. All subsequent calls
	  for an <fo:inline font-family="monospace">event</fo:inline> must pass its containing resource as argument
	  <fo:inline font-family="monospace">obj</fo:inline>. The relation is dissolved when <fo:inline font-family="monospace">enif_select</fo:inline> has
	  been called with <fo:inline font-family="monospace">mode</fo:inline> as <fo:inline font-family="monospace">ERL_NIF_SELECT_STOP</fo:inline> and the
	  corresponding <fo:inline font-family="monospace">stop</fo:inline> callback has returned. A resource can contain
	  several event objects but one event object can only be contained within
	  one resource. A resource will not be destructed until all its contained relations
	  have been dissolved.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_monitor_process</fo:inline></fo:inline>
	  together with <fo:inline font-family="monospace">enif_select</fo:inline> to detect failing Erlang
	  processes and prevent them from causing permanent leakage of resources
	  and their contained OS event objects.</fo:block>
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a non-negative value on success where the following bits can be set:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_SELECT_STOP_CALLED</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The stop callback was called directly by <fo:inline font-family="monospace">enif_select</fo:inline>.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_SELECT_STOP_SCHEDULED</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The stop callback was scheduled to run on some other thread
	    or later by this thread.</fo:block></fo:block-container>
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a negative value if the call failed where the follwing bits can be set:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_SELECT_INVALID_EVENT</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Argument <fo:inline font-family="monospace">event</fo:inline> is not a valid OS event object.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_SELECT_FAILED</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The system call failed to add the event object to the poll set.</fo:block></fo:block-container>
        </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use bitwise AND to test for specific bits in the return vaue.
	  New significant bits may be added in future releases to give more detailed
	  information for both failed and successful calls. Do NOT use equallity tests
	  like <fo:inline font-family="monospace">==</fo:inline>, as that may cause your application to stop working.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
retval = enif_select(env, fd, ERL_NIF_SELECT_STOP, resource, ref);
if (retval &lt; 0) {
    /* handle error */
}
/* Success! */
if (retval &amp; ERL_NIF_SELECT_STOP_CALLED) {
    /* ... */
}
</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21230960">ErlNifPid *enif_self(ErlNifEnv* caller_env, ErlNifPid* pid)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initializes the pid variable <fo:inline font-family="monospace">*pid</fo:inline> to represent the
          calling process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">pid</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21235216">int enif_send(ErlNifEnv* env, ErlNifPid* to_pid,
        ErlNifEnv* msg_env, ERL_NIF_TERM msg)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a message to a process.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">env</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The environment of the calling process. Must be <fo:inline font-family="monospace">NULL</fo:inline>
            only if calling from a created thread.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">*to_pid</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The pid of the receiving process. The pid is to refer to a
            process on the local node.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">msg_env</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The environment of the message term. Must be a
            process-independent environment allocated with
            <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_alloc_env</fo:inline></fo:inline>
            or NULL.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">msg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The message term to send.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if the message is successfully sent. Returns
          <fo:inline font-family="monospace">false</fo:inline> if the send operation fails, that is:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">*to_pid</fo:inline> does not refer to an alive local process.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The currently executing process (that is, the sender) is not
           alive.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The message environment <fo:inline font-family="monospace">msg_env</fo:inline> with all its terms (including
          <fo:inline font-family="monospace">msg</fo:inline>) is invalidated by a successful call to <fo:inline font-family="monospace">enif_send</fo:inline>.
          The environment is to either be freed with
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_free_env</fo:inline></fo:inline> of cleared for reuse with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_clear_env</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">msg_env</fo:inline> is set to <fo:inline font-family="monospace">NULL</fo:inline>, the <fo:inline font-family="monospace">msg</fo:inline> term is
          copied and the original term and its environemt is still valid after
          the call.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is only thread-safe when the emulator with SMP support
          is used. It can only be used in a non-SMP emulator from a NIF-calling
          thread.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Passing <fo:inline font-family="monospace">msg_env</fo:inline> as <fo:inline font-family="monospace">NULL</fo:inline> is only supported as from
            ERTS 8.0 (Erlang/OTP 19).</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21255760">unsigned enif_sizeof_resource(void* obj)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the byte size of resource object <fo:inline font-family="monospace">obj</fo:inline> obtained by
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_alloc_resource</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21259920">int enif_snprintf(char *str, size_t size, const
        char *format, ...)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Similar to <fo:inline font-family="monospace">snprintf</fo:inline> but this format string also accepts
          <fo:inline font-family="monospace">"%T"</fo:inline>, which formats Erlang terms.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21263584">void enif_system_info(ErlNifSysInfo
        *sys_info_ptr, size_t size)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">driver_system_info</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21267344">int enif_term_to_binary(ErlNifEnv *env,
        ERL_NIF_TERM term, ErlNifBinary *bin)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allocates a new binary with <fo:inline font-style="italic">
          <fo:inline font-family="monospace">enif_alloc_binary</fo:inline></fo:inline> and stores the result of encoding
          <fo:inline font-family="monospace">term</fo:inline> according to the Erlang external term format.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> on success, or <fo:inline font-family="monospace">false</fo:inline> if the allocation
        fails.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:term_to_binary/1</fo:inline></fo:inline> and
        <fo:inline font-style="italic">
        <fo:inline font-family="monospace">enif_binary_to_term</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21275600">int enif_thread_create(char *name,ErlNifTid
        *tid,void * (*func)(void *),void *args,ErlNifThreadOpts
        *opts)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_thread_create</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21279376">void enif_thread_exit(void *resp)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_thread_exit</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21283072">int enif_thread_join(ErlNifTid, void **respp)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_thread_join</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21286784">ErlNifThreadOpts *enif_thread_opts_create(char *name)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_thread_opts_create</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21290496">void enif_thread_opts_destroy(ErlNifThreadOpts *opts)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_thread_opts_destroy</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21294384">ErlNifTid enif_thread_self(void)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_thread_self</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21298064">int enif_thread_type(void)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Determine the type of currently executing thread. A positive value
        indicates a scheduler thread while a negative value or zero indicates
        another type of thread. Currently the following specific types exist
        (which may be extended in the future):</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_THR_UNDEFINED</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Undefined thread that is not a scheduler thread.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_THR_NORMAL_SCHEDULER</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A normal scheduler thread.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_THR_DIRTY_CPU_SCHEDULER</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A dirty CPU scheduler thread.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_NIF_THR_DIRTY_IO_SCHEDULER</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A dirty I/O scheduler thread.</fo:block></fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21306336">ErlNifTime enif_time_offset(ErlNifTimeUnit time_unit)</fo:block></fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current time offset between
          <fo:inline font-style="italic">
          Erlang monotonic time</fo:inline> and
          <fo:inline font-style="italic">
          Erlang system time</fo:inline>
          converted into the <fo:inline font-family="monospace">time_unit</fo:inline> passed as argument.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">time_unit</fo:inline> is the time unit of the returned value.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">ERL_NIF_TIME_ERROR</fo:inline> if called with an invalid
          time unit argument or if called from a thread that is not a
          scheduler thread.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifTime</fo:inline></fo:inline>
          and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifTimeUnit</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21315696">void *enif_tsd_get(ErlNifTSDKey key)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_tsd_get</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21319392">int enif_tsd_key_create(char *name, ErlNifTSDKey *key)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_tsd_key_create</fo:inline></fo:inline>.</fo:block>
    </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21323264">void enif_tsd_key_destroy(ErlNifTSDKey key)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_tsd_key_destroy</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21326960">void enif_tsd_set(ErlNifTSDKey key, void *data)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_drv_tsd_set</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21330672">int enif_whereis_pid(ErlNifEnv *env,
          ERL_NIF_TERM name, ErlNifPid *pid)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Looks up a process by its registered name.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">env</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The environment of the calling process. Must be <fo:inline font-family="monospace">NULL</fo:inline>
            only if calling from a created thread.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">name</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The name of a registered process, as an atom.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">*pid</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifPid</fo:inline></fo:inline>
            in which the resolved process id is stored.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, sets <fo:inline font-family="monospace">*pid</fo:inline> to the local process registered with
          <fo:inline font-family="monospace">name</fo:inline> and returns <fo:inline font-family="monospace">true</fo:inline>. If <fo:inline font-family="monospace">name</fo:inline> is not a
          registered process, or is not an atom, <fo:inline font-family="monospace">false</fo:inline> is returned and
          <fo:inline font-family="monospace">*pid</fo:inline> is unchanged.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:whereis/1</fo:inline></fo:inline>, but restricted to processes. See
          <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_whereis_port</fo:inline></fo:inline>
          to resolve registered ports.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21344160">int enif_whereis_port(ErlNifEnv *env,
          ERL_NIF_TERM name, ErlNifPort *port)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Looks up a port by its registered name.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">env</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The environment of the calling process. Must be <fo:inline font-family="monospace">NULL</fo:inline>
            only if calling from a created thread.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">name</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The name of a registered port, as an atom.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">*port</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The <fo:inline font-style="italic"><fo:inline font-family="monospace">ErlNifPort</fo:inline></fo:inline>
            in which the resolved port id is stored.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, sets <fo:inline font-family="monospace">*port</fo:inline> to the port registered with
          <fo:inline font-family="monospace">name</fo:inline> and returns <fo:inline font-family="monospace">true</fo:inline>. If <fo:inline font-family="monospace">name</fo:inline> is not a
          registered port, or is not an atom, <fo:inline font-family="monospace">false</fo:inline> is returned and
          <fo:inline font-family="monospace">*port</fo:inline> is unchanged.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works as <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:whereis/1</fo:inline></fo:inline>, but restricted to ports. See
          <fo:inline font-style="italic"><fo:inline font-family="monospace">enif_whereis_pid</fo:inline></fo:inline>
          to resolve registered processes.</fo:block>
      </fo:block>

  

  <fo:block id="idp21357184" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
      <fo:inline font-family="monospace">erlang:load_nif/2</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp21364896" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_tracer</fo:marker>erl_tracer</fo:block>Erlang module</fo:block>
  <fo:block/>
  erl_tracer
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This behavior module implements the back end of the Erlang
      tracing system. The functions in this module are called whenever
      a trace probe is triggered. Both the <fo:inline font-family="monospace">enabled</fo:inline> and <fo:inline font-family="monospace">trace</fo:inline>
      functions are called in the context of the entity that triggered the
      trace probe.
      This means that the overhead by having the tracing enabled is
      greatly effected by how much time is spent in these functions. So, do as
      little work as possible in these functions.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All functions in this behavior must be implemented as NIFs.
        This limitation can be removed in a future releases.
        An <fo:inline font-style="italic">example tracer module NIF</fo:inline>
        implementation is provided at the end of this page.</fo:block>
    </fo:block>

    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do not send messages or issue port commands to the <fo:inline font-family="monospace">Tracee</fo:inline>
        in any of the callbacks. This is not allowed and can cause all
        sorts of strange behavior, including, but not limited to, infinite
        recursions.</fo:block>
    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_tag_call() = <fo:block/>    call | return_to | return_from | exception_from</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_tag_gc() = <fo:block/>    gc_minor_start | gc_minor_end | gc_major_start | gc_major_end</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_tag_ports() = <fo:block/>    open |<fo:block/>    closed |<fo:block/>    link |<fo:block/>    unlink |<fo:block/>    getting_linked |<fo:block/>    getting_unlinked</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_tag_procs() = <fo:block/>    spawn |<fo:block/>    spawned |<fo:block/>    exit |<fo:block/>    link |<fo:block/>    unlink |<fo:block/>    getting_linked |<fo:block/>    getting_unlinked |<fo:block/>    register |<fo:block/>    unregister</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_tag_receive() = 'receive'</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_tag_running_ports() = <fo:block/>    in | out | in_exiting | out_exiting | out_exited</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_tag_running_procs() = <fo:block/>    in | out | in_exiting | out_exiting | out_exited</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_tag_send() = send | send_to_non_existing_process</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_tag() = <fo:block/>    <fo:inline font-style="italic">trace_tag_send()</fo:inline> |<fo:block/>    <fo:inline font-style="italic">trace_tag_receive()</fo:inline> |<fo:block/>    <fo:inline font-style="italic">trace_tag_call()</fo:inline> |<fo:block/>    <fo:inline font-style="italic">trace_tag_procs()</fo:inline> |<fo:block/>    <fo:inline font-style="italic">trace_tag_ports()</fo:inline> |<fo:block/>    <fo:inline font-style="italic">trace_tag_running_procs()</fo:inline> |<fo:block/>    <fo:inline font-style="italic">trace_tag_running_ports()</fo:inline> |<fo:block/>    <fo:inline font-style="italic">trace_tag_gc()</fo:inline></fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The different trace tags that the tracer is called with.
          Each trace tag is described in detail in
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:trace/5</fo:inline></fo:inline>.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">tracee() = port() | pid() | undefined</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process or port that the trace belongs to.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trace_opts() = <fo:block/>    #{extra =&gt; term(),<fo:block/>      match_spec_result =&gt; term(),<fo:block/>      scheduler_id =&gt; integer() &gt;= 0,<fo:block/>      timestamp =&gt;<fo:block/>          timestamp | cpu_timestamp | monotonic | strict_monotonic}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The options for the tracee:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">timestamp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If set the tracer has been requested to include a
            time stamp.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">extra</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If set the tracepoint has included additional data about
            the trace event. What the additional data is depends on which
            <fo:inline font-family="monospace">TraceTag</fo:inline> has been triggered. The <fo:inline font-family="monospace">extra</fo:inline> trace data
            corresponds to the fifth element in the trace tuples described in
            <fo:inline font-style="italic">
              erlang:trace/3</fo:inline>.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">match_spec_result</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If set the tracer has been requested to include the output
            of a match specification that was run.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">scheduler_id</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">If set the scheduler id is to be included by the tracer.</fo:block></fo:block-container>
        </fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">tracer_state() = term()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The state specified when calling
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:trace(PidPortSpec,true,[{tracer,Module,TracerState}])</fo:inline></fo:inline>.
          The tracer state is an immutable value that is passed to
          <fo:inline font-family="monospace">erl_tracer</fo:inline> callbacks and is to
          contain all the data that is needed to generate the trace event.</fo:block>
      
  

  <fo:block id="idp21397040" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Callback Functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions are to be exported from an <fo:inline font-family="monospace">erl_tracer</fo:inline>
      callback module:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:enabled/3</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Mandatory</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:trace/5</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Mandatory</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:enabled_call/3</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:trace_call/5</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:enabled_garbage_collection/3</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:trace_garbage_collection/5</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:enabled_ports/3</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:trace_ports/5</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:enabled_procs/3</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:trace_procs/5</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:enabled_receive/3</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:trace_receive/5</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:enabled_running_ports/3</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:trace_running_ports/5</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:enabled_running_procs/3</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:trace_running_procs/5</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:enabled_send/3</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">
        <fo:inline font-family="monospace">Module:trace_send/5</fo:inline></fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Optional</fo:block></fo:block-container>
   </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21428336">Module:enabled(TraceTag, TracerState, Tracee) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag()</fo:inline> | trace_status</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = trace | discard | remove</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called whenever a tracepoint is triggered. It
          allows the tracer to decide whether a trace is to be generated or not.
          This check is made as early as possible to limit the amount of
          overhead associated with tracing. If <fo:inline font-family="monospace">trace</fo:inline> is returned, the
          necessary trace data is created and the trace callback of the tracer
          is called. If <fo:inline font-family="monospace">discard</fo:inline> is returned, this trace call is
          discarded and no call to trace is done.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">trace_status</fo:inline> is a special type of <fo:inline font-family="monospace">TraceTag</fo:inline>, which is
          used to check if the tracer is still to be active. It is called in
          multiple scenarios, but most significantly it is used when tracing
          is started using this tracer. If <fo:inline font-family="monospace">remove</fo:inline> is returned when the
          <fo:inline font-family="monospace">trace_status</fo:inline> is checked, the tracer is removed from the
          tracee.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called multiple times per tracepoint, so it
          is important that it is both fast and without side effects.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21438400">Module:enabled_call(TraceTag, TracerState, Tracee) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag_call()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = trace | discard | remove</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called whenever a tracepoint with trace flag
          <fo:inline font-style="italic"><fo:inline font-family="monospace">call | return_to</fo:inline></fo:inline>
          is triggered.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">enabled_call/3</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:enabled/3</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21446816">Module:enabled_garbage_collection(TraceTag, TracerState, Tracee) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag_gc()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = trace | discard | remove</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called whenever a tracepoint with trace flag
          <fo:inline font-style="italic"><fo:inline font-family="monospace">garbage_collection</fo:inline></fo:inline>
          is triggered.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">enabled_garbage_collection/3</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:enabled/3</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21455264">Module:enabled_ports(TraceTag, TracerState, Tracee) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag_ports()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = trace | discard | remove</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called whenever a tracepoint with trace flag
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ports</fo:inline></fo:inline>
          is triggered.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">enabled_ports/3</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:enabled/3</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21463680">Module:enabled_procs(TraceTag, TracerState, Tracee) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag_procs()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = trace | discard | remove</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called whenever a tracepoint with trace flag
          <fo:inline font-style="italic"><fo:inline font-family="monospace">procs</fo:inline></fo:inline>
          is triggered.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">enabled_procs/3</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:enabled/3</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21472096">Module:enabled_receive(TraceTag, TracerState, Tracee) -&gt; Result
      </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag_receive()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = trace | discard | remove</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called whenever a tracepoint with trace flag
          <fo:inline font-style="italic"><fo:inline font-family="monospace">'receive'</fo:inline></fo:inline>
          is triggered.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">enabled_receive/3</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:enabled/3</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21480512">Module:enabled_running_ports(TraceTag, TracerState, Tracee) -&gt;
        Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag_running_ports()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = trace | discard | remove</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called whenever a tracepoint with trace flag
          <fo:inline font-style="italic"><fo:inline font-family="monospace">running_ports</fo:inline></fo:inline>
          is triggered.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">enabled_running_ports/3</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:enabled/3</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21488960">Module:enabled_running_procs(TraceTag, TracerState, Tracee) -&gt;
        Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag_running_procs()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = trace | discard | remove</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called whenever a tracepoint with trace flag
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">running_procs | running</fo:inline></fo:inline>
          is triggered.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">enabled_running_procs/3</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:enabled/3</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21497568">Module:enabled_send(TraceTag, TracerState, Tracee) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag_send()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = trace | discard | remove</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called whenever a tracepoint with trace flag
          <fo:inline font-style="italic"><fo:inline font-family="monospace">send</fo:inline></fo:inline>
          is triggered.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">enabled_send/3</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:enabled/3</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21505984">Module:trace(TraceTag, TracerState, Tracee, TraceTerm,
        Opts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTerm = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = <fo:inline font-style="italic">trace_opts()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ok</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called when a tracepoint is triggered and the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:enabled/3</fo:inline></fo:inline>
          callback returned <fo:inline font-family="monospace">trace</fo:inline>. In it any side effects needed by
          the tracer are to be done. The tracepoint payload is located in
          the <fo:inline font-family="monospace">TraceTerm</fo:inline>. The content of the <fo:inline font-family="monospace">TraceTerm</fo:inline>
          depends on which <fo:inline font-family="monospace">TraceTag</fo:inline> is triggered.
          <fo:inline font-family="monospace">TraceTerm</fo:inline> corresponds to the
          fourth element in the trace tuples described in
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the trace tuple has five elements, the fifth element
          will be sent as the <fo:inline font-family="monospace">extra</fo:inline> value in the <fo:inline font-family="monospace">Opts</fo:inline> maps.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21518960">Module:trace(seq_trace, TracerState, Label,
        SeqTraceInfo, Opts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Label = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SeqTraceInfo = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = <fo:inline font-style="italic">trace_opts()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ok</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">TraceTag</fo:inline> <fo:inline font-family="monospace">seq_trace</fo:inline> is handled slightly
          differently. There is no <fo:inline font-family="monospace">Tracee</fo:inline> for <fo:inline font-family="monospace">seq_trace</fo:inline>, instead
          the <fo:inline font-family="monospace">Label</fo:inline> associated with the <fo:inline font-family="monospace">seq_trace</fo:inline> event is
          specified.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information on what <fo:inline font-family="monospace">Label</fo:inline> and <fo:inline font-family="monospace">SeqTraceInfo</fo:inline>
          can be, see <fo:inline font-style="italic">
          <fo:inline font-family="monospace">seq_trace(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21529952">Module:trace_call(TraceTag, TracerState, Tracee, TraceTerm,
          Opts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag_call()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTerm = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = <fo:inline font-style="italic">trace_opts()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ok</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called when a tracepoint is triggered and the
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">Module:enabled_call/3</fo:inline></fo:inline>
          callback returned <fo:inline font-family="monospace">trace</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">trace_call/5</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:trace/5</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21540432">Module:trace_garbage_collection(TraceTag, TracerState, Tracee,
        TraceTerm, Opts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag_gc()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTerm = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = <fo:inline font-style="italic">trace_opts()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ok</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called when a tracepoint is triggered and the
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">Module:enabled_garbage_collection/3</fo:inline></fo:inline>
          callback returned <fo:inline font-family="monospace">trace</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">trace_garbage_collection/5</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:trace/5</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21550976">Module:trace_ports(TraceTag, TracerState, Tracee, TraceTerm,
        Opts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTerm = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = <fo:inline font-style="italic">trace_opts()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ok</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called when a tracepoint is triggered and the
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">Module:enabled_ports/3</fo:inline></fo:inline>
          callback returned <fo:inline font-family="monospace">trace</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">trace_ports/5</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:trace/5</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21561440">Module:trace_procs(TraceTag, TracerState, Tracee, TraceTerm,
        Opts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTerm = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = <fo:inline font-style="italic">trace_opts()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ok</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called when a tracepoint is triggered and the
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">Module:enabled_procs/3</fo:inline></fo:inline>
          callback returned <fo:inline font-family="monospace">trace</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">trace_procs/5</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:trace/5</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21571904">Module:trace_receive(TraceTag, TracerState, Tracee, TraceTerm,
        Opts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag_receive()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTerm = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = <fo:inline font-style="italic">trace_opts()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ok</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called when a tracepoint is triggered and the
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">Module:enabled_receive/3</fo:inline></fo:inline>
          callback returned <fo:inline font-family="monospace">trace</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">trace_receive/5</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:trace/5</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21582416">Module:trace_running_ports(TraceTag, TracerState, Tracee,
        TraceTerm, Opts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag_running_ports()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTerm = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = <fo:inline font-style="italic">trace_opts()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ok</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called when a tracepoint is triggered and the
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">Module:enabled_running_ports/3</fo:inline></fo:inline>
          callback returned <fo:inline font-family="monospace">trace</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">trace_running_ports/5</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:trace/5</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21592960">Module:trace_running_procs(TraceTag, TracerState, Tracee,
        TraceTerm, Opts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag_running_procs()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTerm = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = <fo:inline font-style="italic">trace_opts()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ok</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called when a tracepoint is triggered and the
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">Module:enabled_running_procs/3</fo:inline></fo:inline>
          callback returned <fo:inline font-family="monospace">trace</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">trace_running_procs/5</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:trace/5</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp21603504">Module:trace_send(TraceTag, TracerState, Tracee, TraceTerm,
        Opts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTag = <fo:inline font-style="italic">
          trace_tag_send()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracee = <fo:inline font-style="italic">tracee()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceTerm = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = <fo:inline font-style="italic">trace_opts()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ok</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This callback is called when a tracepoint is triggered and the
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">Module:enabled_send/3</fo:inline></fo:inline>
          callback returned <fo:inline font-family="monospace">trace</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">trace_send/5</fo:inline> is undefined,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:trace/5</fo:inline></fo:inline>
          is called instead.</fo:block>
      </fo:block>
  

  <fo:block id="idp21614704" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Erl Tracer Module Example</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example, a tracer module with a NIF back end sends a
      message for each <fo:inline font-family="monospace">send</fo:inline> trace tag containing only the sender and
      receiver. Using this tracer module, a much more lightweight message
      tracer is used, which only records who sent messages to who.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is an example session using it on Linux:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ gcc -I erts-8.0/include/ -fPIC -shared -o erl_msg_tracer.so erl_msg_tracer.c
$ erl
Erlang/OTP 19 [DEVELOPMENT] [erts-8.0] [source-ed2b56b] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false]

Eshell V8.0  (abort with ^G)
1&gt; c(erl_msg_tracer), erl_msg_tracer:load().
ok
2&gt; Tracer = spawn(fun F() -&gt; receive M -&gt; io:format("~p~n",[M]), F() end end).
&lt;0.37.0&gt;
3&gt; erlang:trace(new, true, [send,{tracer, erl_msg_tracer, Tracer}]).
0
{trace,&lt;0.39.0&gt;,&lt;0.27.0&gt;}
4&gt; {ok, D} = file:open("/tmp/tmp.data",[write]).
{trace,#Port&lt;0.486&gt;,&lt;0.40.0&gt;}
{trace,&lt;0.40.0&gt;,&lt;0.21.0&gt;}
{trace,#Port&lt;0.487&gt;,&lt;0.4.0&gt;}
{trace,#Port&lt;0.488&gt;,&lt;0.4.0&gt;}
{trace,#Port&lt;0.489&gt;,&lt;0.4.0&gt;}
{trace,#Port&lt;0.490&gt;,&lt;0.4.0&gt;}
{ok,&lt;0.40.0&gt;}
{trace,&lt;0.41.0&gt;,&lt;0.27.0&gt;}
5&gt;</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_msg_tracer.erl</fo:inline>:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(erl_msg_tracer).

-export([enabled/3, trace/5, load/0]).

load() -&gt;
    erlang:load_nif("erl_msg_tracer", []).

enabled(_, _, _) -&gt;
    error.

trace(_, _, _, _, _) -&gt;
    error.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_msg_tracer.c</fo:inline>:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#include &lt;erl_nif.h&gt;

/* NIF interface declarations */
static int load(ErlNifEnv* env, void** priv_data, ERL_NIF_TERM load_info);
static int upgrade(ErlNifEnv* env, void** priv_data, void** old_priv_data, ERL_NIF_TERM load_info);
static void unload(ErlNifEnv* env, void* priv_data);

/* The NIFs: */
static ERL_NIF_TERM enabled(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);
static ERL_NIF_TERM trace(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);

static ErlNifFunc nif_funcs[] = {
    {"enabled", 3, enabled},
    {"trace", 5, trace}
};

ERL_NIF_INIT(erl_msg_tracer, nif_funcs, load, NULL, upgrade, unload)

static int load(ErlNifEnv* env, void** priv_data, ERL_NIF_TERM load_info)
{
    *priv_data = NULL;
    return 0;
}

static void unload(ErlNifEnv* env, void* priv_data)
{

}

static int upgrade(ErlNifEnv* env, void** priv_data, void** old_priv_data,
		   ERL_NIF_TERM load_info)
{
    if (*old_priv_data != NULL || *priv_data != NULL) {
	return -1; /* Don't know how to do that */
    }
    if (load(env, priv_data, load_info)) {
	return -1;
    }
    return 0;
}

/*
 * argv[0]: TraceTag
 * argv[1]: TracerState
 * argv[2]: Tracee
 */
static ERL_NIF_TERM enabled(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])
{
    ErlNifPid to_pid;
    if (enif_get_local_pid(env, argv[1], &amp;to_pid))
        if (!enif_is_process_alive(env, &amp;to_pid))
            if (enif_is_identical(enif_make_atom(env, "trace_status"), argv[0]))
                /* tracer is dead so we should remove this tracepoint */
                return enif_make_atom(env, "remove");
            else
                return enif_make_atom(env, "discard");

    /* Only generate trace for when tracer != tracee */
    if (enif_is_identical(argv[1], argv[2]))
        return enif_make_atom(env, "discard");

    /* Only trigger trace messages on 'send' */
    if (enif_is_identical(enif_make_atom(env, "send"), argv[0]))
        return enif_make_atom(env, "trace");

    /* Have to answer trace_status */
    if (enif_is_identical(enif_make_atom(env, "trace_status"), argv[0]))
        return enif_make_atom(env, "trace");

    return enif_make_atom(env, "discard");
}

/*
 * argv[0]: TraceTag, should only be 'send'
 * argv[1]: TracerState, process to send {Tracee, Recipient} to
 * argv[2]: Tracee
 * argv[3]: Message
 * argv[4]: Options, map containing Recipient
 */
static ERL_NIF_TERM trace(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])
{
    ErlNifPid to_pid;
    ERL_NIF_TERM recipient, msg;

    if (enif_get_local_pid(env, argv[1], &amp;to_pid)) {
      if (enif_get_map_value(env, argv[4], enif_make_atom(env, "extra"), &amp;recipient)) {
        msg = enif_make_tuple3(env, enif_make_atom(env, "trace"), argv[2], recipient);
        enif_send(env, &amp;to_pid, NULL, msg);
      }
    }

    return enif_make_atom(env, "ok");
}</fo:block>
  
</fo:flow>
  </fo:page-sequence>
</fo:root>
