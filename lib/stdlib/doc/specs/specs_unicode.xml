<module name="unicode">
<type>
  <name>chardata</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-chardata">chardata()</marker> = <seealso marker="#type-charlist">charlist()</seealso> | <seealso marker="#type-unicode_binary">unicode_binary()</seealso></typehead></typedecl>
</type>
<type>
  <name>charlist</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-charlist">charlist()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>maybe_improper_list(char() | <seealso marker="#type-unicode_binary">unicode_binary()</seealso> | <seealso marker="#type-charlist">charlist()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-unicode_binary">unicode_binary()</seealso> | [])</typehead></typedecl>
</type>
<type>
  <name>encoding</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-encoding">encoding()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>latin1 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>unicode |<br/><nbsp/><nbsp/><nbsp/><nbsp/>utf8 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>utf16 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{utf16, <seealso marker="#type-endian">endian()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>utf32 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{utf32, <seealso marker="#type-endian">endian()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>endian</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-endian">endian()</marker> = big | little</typehead></typedecl>
</type>
<type>
  <name>external_chardata</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-external_chardata">external_chardata()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-external_charlist">external_charlist()</seealso> | <seealso marker="#type-external_unicode_binary">external_unicode_binary()</seealso></typehead></typedecl>
</type>
<type>
  <name>external_charlist</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-external_charlist">external_charlist()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>maybe_improper_list(char() |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-external_unicode_binary">external_unicode_binary()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-external_charlist">external_charlist()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-external_unicode_binary">external_unicode_binary()</seealso> | [])</typehead></typedecl>
</type>
<type>
  <name>external_unicode_binary</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-external_unicode_binary">external_unicode_binary()</marker> = binary()</typehead></typedecl>
</type>
<type>
  <name>latin1_binary</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-latin1_binary">latin1_binary()</marker> = binary()</typehead></typedecl>
</type>
<type>
  <name>latin1_char</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-latin1_char">latin1_char()</marker> = byte()</typehead></typedecl>
</type>
<type>
  <name>latin1_chardata</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-latin1_chardata">latin1_chardata()</marker> = <seealso marker="#type-latin1_charlist">latin1_charlist()</seealso> | <seealso marker="#type-latin1_binary">latin1_binary()</seealso></typehead></typedecl>
</type>
<type>
  <name>latin1_charlist</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-latin1_charlist">latin1_charlist()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>maybe_improper_list(<seealso marker="#type-latin1_char">latin1_char()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-latin1_binary">latin1_binary()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-latin1_charlist">latin1_charlist()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-latin1_binary">latin1_binary()</seealso> | [])</typehead></typedecl>
</type>
<type>
  <name>unicode_binary</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-unicode_binary">unicode_binary()</marker> = binary()</typehead></typedecl>
</type>
<spec>
  <name>bin_is_7bit</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bin_is_7bit(Binary) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
</spec>
<spec>
  <name>bom_to_encoding</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bom_to_encoding(Bin) -&gt; {Encoding, Length}</head>
      <guard>
        <subtype><typename>Bin</typename><string>Bin = binary()</string></subtype>
        <subtype><typename>Encoding</typename><string>Encoding = <br/><nbsp/><nbsp/><nbsp/><nbsp/>latin1 | utf8 | {utf16, <seealso marker="#type-endian">endian()</seealso>} | {utf32, <seealso marker="#type-endian">endian()</seealso>}</string></subtype>
        <subtype><typename>Length</typename><string>Length = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bin</anno>
  <anno>Encoding</anno>
  <anno>Length</anno>
</spec>
<spec>
  <name>characters_to_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>characters_to_binary(Data) -&gt; Result</head>
      <guard>
        <subtype><typename>Data</typename><string>Data = <seealso marker="#type-latin1_chardata">latin1_chardata()</seealso> | <seealso marker="#type-chardata">chardata()</seealso> | <seealso marker="#type-external_chardata">external_chardata()</seealso></string></subtype>
        <subtype><typename>Result</typename><string>Result = <br/><nbsp/><nbsp/><nbsp/><nbsp/>binary() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, binary(), RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{incomplete, binary(), binary()}</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seealso marker="#type-latin1_chardata">latin1_chardata()</seealso> | <seealso marker="#type-chardata">chardata()</seealso> | <seealso marker="#type-external_chardata">external_chardata()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>RestData</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>characters_to_binary</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>characters_to_binary(Data, InEncoding) -&gt; Result</head>
      <guard>
        <subtype><typename>Data</typename><string>Data = <seealso marker="#type-latin1_chardata">latin1_chardata()</seealso> | <seealso marker="#type-chardata">chardata()</seealso> | <seealso marker="#type-external_chardata">external_chardata()</seealso></string></subtype>
        <subtype><typename>InEncoding</typename><string>InEncoding = <seealso marker="#type-encoding">encoding()</seealso></string></subtype>
        <subtype><typename>Result</typename><string>Result = <br/><nbsp/><nbsp/><nbsp/><nbsp/>binary() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, binary(), RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{incomplete, binary(), binary()}</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seealso marker="#type-latin1_chardata">latin1_chardata()</seealso> | <seealso marker="#type-chardata">chardata()</seealso> | <seealso marker="#type-external_chardata">external_chardata()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>InEncoding</anno>
  <anno>RestData</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>characters_to_binary</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>characters_to_binary(Data, InEncoding, OutEncoding) -&gt; Result</head>
      <guard>
        <subtype><typename>Data</typename><string>Data = <seealso marker="#type-latin1_chardata">latin1_chardata()</seealso> | <seealso marker="#type-chardata">chardata()</seealso> | <seealso marker="#type-external_chardata">external_chardata()</seealso></string></subtype>
        <subtype><typename>InEncoding</typename><string>InEncoding = OutEncoding = <seealso marker="#type-encoding">encoding()</seealso></string></subtype>
        <subtype><typename>OutEncoding</typename><string/></subtype>
        <subtype><typename>Result</typename><string>Result = <br/><nbsp/><nbsp/><nbsp/><nbsp/>binary() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, binary(), RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{incomplete, binary(), binary()}</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seealso marker="#type-latin1_chardata">latin1_chardata()</seealso> | <seealso marker="#type-chardata">chardata()</seealso> | <seealso marker="#type-external_chardata">external_chardata()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>InEncoding</anno>
  <anno>OutEncoding</anno>
  <anno>RestData</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>characters_to_binary_int</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>characters_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>characters_to_list(Data) -&gt; Result</head>
      <guard>
        <subtype><typename>Data</typename><string>Data = <seealso marker="#type-latin1_chardata">latin1_chardata()</seealso> | <seealso marker="#type-chardata">chardata()</seealso> | <seealso marker="#type-external_chardata">external_chardata()</seealso></string></subtype>
        <subtype><typename>Result</typename><string>Result = <br/><nbsp/><nbsp/><nbsp/><nbsp/>list() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, list(), RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{incomplete, list(), binary()}</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seealso marker="#type-latin1_chardata">latin1_chardata()</seealso> | <seealso marker="#type-chardata">chardata()</seealso> | <seealso marker="#type-external_chardata">external_chardata()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>RestData</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>characters_to_list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>characters_to_list(Data, InEncoding) -&gt; Result</head>
      <guard>
        <subtype><typename>Data</typename><string>Data = <seealso marker="#type-latin1_chardata">latin1_chardata()</seealso> | <seealso marker="#type-chardata">chardata()</seealso> | <seealso marker="#type-external_chardata">external_chardata()</seealso></string></subtype>
        <subtype><typename>InEncoding</typename><string>InEncoding = <seealso marker="#type-encoding">encoding()</seealso></string></subtype>
        <subtype><typename>Result</typename><string>Result = <br/><nbsp/><nbsp/><nbsp/><nbsp/>list() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, list(), RestData} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{incomplete, list(), binary()}</string></subtype>
        <subtype><typename>RestData</typename><string>RestData = <seealso marker="#type-latin1_chardata">latin1_chardata()</seealso> | <seealso marker="#type-chardata">chardata()</seealso> | <seealso marker="#type-external_chardata">external_chardata()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>InEncoding</anno>
  <anno>RestData</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>characters_to_list_int</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>characters_to_nfc_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>characters_to_nfc_binary(CD :: <seealso marker="#type-chardata">chardata()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-unicode_binary">unicode_binary()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seealso marker="#type-unicode_binary">unicode_binary()</seealso>, <seealso marker="#type-chardata">chardata()</seealso>}</head></clause>
  </contract>
  <anno>CD</anno>
</spec>
<spec>
  <name>characters_to_nfc_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>characters_to_nfc_list(CD :: <seealso marker="#type-chardata">chardata()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[char()] | {error, [char()], <seealso marker="#type-chardata">chardata()</seealso>}</head></clause>
  </contract>
  <anno>CD</anno>
</spec>
<spec>
  <name>characters_to_nfd_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>characters_to_nfd_binary(CD :: <seealso marker="#type-chardata">chardata()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-unicode_binary">unicode_binary()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seealso marker="#type-unicode_binary">unicode_binary()</seealso>, <seealso marker="#type-chardata">chardata()</seealso>}</head></clause>
  </contract>
  <anno>CD</anno>
</spec>
<spec>
  <name>characters_to_nfd_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>characters_to_nfd_list(CD :: <seealso marker="#type-chardata">chardata()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[char()] | {error, [char()], <seealso marker="#type-chardata">chardata()</seealso>}</head></clause>
  </contract>
  <anno>CD</anno>
</spec>
<spec>
  <name>characters_to_nfkc_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>characters_to_nfkc_binary(CD :: <seealso marker="#type-chardata">chardata()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-unicode_binary">unicode_binary()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seealso marker="#type-unicode_binary">unicode_binary()</seealso>, <seealso marker="#type-chardata">chardata()</seealso>}</head></clause>
  </contract>
  <anno>CD</anno>
</spec>
<spec>
  <name>characters_to_nfkc_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>characters_to_nfkc_list(CD :: <seealso marker="#type-chardata">chardata()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[char()] |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, [char()], <seealso marker="#type-chardata">chardata()</seealso>}</head></clause>
  </contract>
  <anno>CD</anno>
</spec>
<spec>
  <name>characters_to_nfkd_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>characters_to_nfkd_binary(CD :: <seealso marker="#type-chardata">chardata()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-unicode_binary">unicode_binary()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seealso marker="#type-unicode_binary">unicode_binary()</seealso>, <seealso marker="#type-chardata">chardata()</seealso>}</head></clause>
  </contract>
  <anno>CD</anno>
</spec>
<spec>
  <name>characters_to_nfkd_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>characters_to_nfkd_list(CD :: <seealso marker="#type-chardata">chardata()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[char()] |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, [char()], <seealso marker="#type-chardata">chardata()</seealso>}</head></clause>
  </contract>
  <anno>CD</anno>
</spec>
<spec>
  <name>encoding_to_bom</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>encoding_to_bom(InEncoding) -&gt; Bin</head>
      <guard>
        <subtype><typename>Bin</typename><string>Bin = binary()</string></subtype>
        <subtype><typename>InEncoding</typename><string>InEncoding = <seealso marker="#type-encoding">encoding()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bin</anno>
  <anno>InEncoding</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:29.</timestamp>
</module>