<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>Erlang/OTP System Documentation</fo:bookmark-title>
      <fo:bookmark internal-destination="idp428992" starting-state="hide">
        <fo:bookmark-title>Installation Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp581488" starting-state="hide">
          <fo:bookmark-title>Installing the Binary Release</fo:bookmark-title>
          <fo:bookmark internal-destination="idp577824" starting-state="hide">
            <fo:bookmark-title>Windows</fo:bookmark-title>
            <fo:bookmark internal-destination="idp561872" starting-state="hide">
              <fo:bookmark-title>Installing</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp559648" starting-state="hide">
              <fo:bookmark-title>Verifying</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp616048" starting-state="hide">
          <fo:bookmark-title>Building and Installing Erlang/OTP</fo:bookmark-title>
          <fo:bookmark internal-destination="idp615408" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp464272" starting-state="hide">
            <fo:bookmark-title>Required Utilities</fo:bookmark-title>
            <fo:bookmark internal-destination="idp461744" starting-state="hide">
              <fo:bookmark-title>Unpacking</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp552592" starting-state="hide">
              <fo:bookmark-title>Building</fo:bookmark-title>
              <fo:bookmark internal-destination="idp440480" starting-state="hide">
                <fo:bookmark-title>Building in Git</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp443760" starting-state="hide">
                <fo:bookmark-title>Building on OS X</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp444912" starting-state="hide">
              <fo:bookmark-title>Installing</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp520128" starting-state="hide">
            <fo:bookmark-title>Optional Utilities</fo:bookmark-title>
            <fo:bookmark internal-destination="idm22576" starting-state="hide">
              <fo:bookmark-title>Building</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp522832" starting-state="hide">
              <fo:bookmark-title>Building Documentation</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idm10736" starting-state="hide">
            <fo:bookmark-title>How to Build and Install Erlang/OTP</fo:bookmark-title>
            <fo:bookmark internal-destination="idp499152" starting-state="hide">
              <fo:bookmark-title>Unpacking</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp304048" starting-state="hide">
              <fo:bookmark-title>Configuring</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp310592" starting-state="hide">
              <fo:bookmark-title>Building</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp312928" starting-state="hide">
              <fo:bookmark-title>Testing</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp625056" starting-state="hide">
              <fo:bookmark-title>Installing</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp627520" starting-state="hide">
              <fo:bookmark-title>Running</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp629792" starting-state="hide">
              <fo:bookmark-title>How to Build the Documentation</fo:bookmark-title>
              <fo:bookmark internal-destination="idp572256" starting-state="hide">
                <fo:bookmark-title>Build Issues</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp577344" starting-state="hide">
              <fo:bookmark-title>How to Install the Documentation</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp600896" starting-state="hide">
              <fo:bookmark-title>Accessing the Documentation</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp606992" starting-state="hide">
              <fo:bookmark-title>How to Install the Pre-formatted Documentation</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp687936" starting-state="hide">
            <fo:bookmark-title>Advanced configuration and build of Erlang/OTP</fo:bookmark-title>
            <fo:bookmark internal-destination="idp689616" starting-state="hide">
              <fo:bookmark-title>make and $ERL_TOP</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp696112" starting-state="hide">
              <fo:bookmark-title>otp_build vs configure/make</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp701376" starting-state="hide">
              <fo:bookmark-title>Configuring</fo:bookmark-title>
              <fo:bookmark internal-destination="idp761200" starting-state="hide">
                <fo:bookmark-title>Atomic Memory Operations and the VM</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp811552" starting-state="hide">
              <fo:bookmark-title>Building</fo:bookmark-title>
              <fo:bookmark internal-destination="idp815920" starting-state="hide">
                <fo:bookmark-title>Within Git</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp827312" starting-state="hide">
                <fo:bookmark-title>OS X (Darwin)</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp833120" starting-state="hide">
                <fo:bookmark-title>Building with wxErlang</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp1583808" starting-state="hide">
                <fo:bookmark-title>Pre-built Source Release</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp1593552" starting-state="hide">
                <fo:bookmark-title>How to Build a Debug Enabled Erlang RunTime System</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1606384" starting-state="hide">
              <fo:bookmark-title>Installing</fo:bookmark-title>
              <fo:bookmark internal-destination="idp1637152" starting-state="hide">
                <fo:bookmark-title>Symbolic Links in --bindir</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1645744" starting-state="hide">
              <fo:bookmark-title>Running</fo:bookmark-title>
              <fo:bookmark internal-destination="idp1646896" starting-state="hide">
                <fo:bookmark-title>Using HiPE</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1662448" starting-state="hide">
          <fo:bookmark-title>Cross Compiling Erlang/OTP</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1694096" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1697344" starting-state="hide">
              <fo:bookmark-title>otp_build Versus configure/make</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1705936" starting-state="hide">
              <fo:bookmark-title>Cross Configuration</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1715376" starting-state="hide">
              <fo:bookmark-title>What can be Cross Compiled?</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1718320" starting-state="hide">
              <fo:bookmark-title>Compatibility</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1720624" starting-state="hide">
              <fo:bookmark-title>Patches</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1730624" starting-state="hide">
            <fo:bookmark-title>Build and Install Procedure</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1735360" starting-state="hide">
              <fo:bookmark-title>Building With configure/make Directly</fo:bookmark-title>
              <fo:bookmark internal-destination="idp1740544" starting-state="hide">
                <fo:bookmark-title>Building a Bootstrap System</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp1746640" starting-state="hide">
                <fo:bookmark-title>Cross Building the System</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp1762224" starting-state="hide">
                <fo:bookmark-title>Installing</fo:bookmark-title>
                <fo:bookmark internal-destination="idp1764592" starting-state="hide">
                  <fo:bookmark-title>Installing Using Paths Determined by configure</fo:bookmark-title>
                </fo:bookmark>
                <fo:bookmark internal-destination="idp1775456" starting-state="hide">
                  <fo:bookmark-title>Installing Manually</fo:bookmark-title>
                </fo:bookmark>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1800608" starting-state="hide">
              <fo:bookmark-title>Building With the otp_build Script</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1816384" starting-state="hide">
            <fo:bookmark-title>Building and Installing the Documentation</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1820048" starting-state="hide">
            <fo:bookmark-title>Testing the cross compiled system</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1830640" starting-state="hide">
            <fo:bookmark-title>Currently Used Configuration Variables</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1833584" starting-state="hide">
              <fo:bookmark-title>Variables for otp_build Only</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1848048" starting-state="hide">
              <fo:bookmark-title>Cross Compiler and Other Tools</fo:bookmark-title>
              <fo:bookmark internal-destination="idp1865888" starting-state="hide">
                <fo:bookmark-title>Dynamic Erlang Driver Linking</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp1873792" starting-state="hide">
                <fo:bookmark-title>Large File Support</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp1880688" starting-state="hide">
                <fo:bookmark-title>Other Tools</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1888240" starting-state="hide">
              <fo:bookmark-title>Cross System Root Locations</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1895712" starting-state="hide">
              <fo:bookmark-title>Optional Feature, and Bug Tests</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1965408" starting-state="hide">
          <fo:bookmark-title>How to Build Erlang/OTP on Windows</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1979744" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1991760" starting-state="hide">
            <fo:bookmark-title>Short Version</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2009968" starting-state="hide">
            <fo:bookmark-title>Frequently Asked Questions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2037040" starting-state="hide">
            <fo:bookmark-title>Tools you Need and Their Environment</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2113520" starting-state="hide">
            <fo:bookmark-title>The Shell Environment</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2129600" starting-state="hide">
            <fo:bookmark-title>Building and Installing</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2152320" starting-state="hide">
            <fo:bookmark-title>Development</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2181376" starting-state="hide">
            <fo:bookmark-title>Using GIT</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2188848" starting-state="hide">
          <fo:bookmark-title>Patching OTP Applications</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2193904" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2200960" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2206000" starting-state="hide">
            <fo:bookmark-title>Using otp_patch_apply</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2230976" starting-state="hide">
            <fo:bookmark-title>Sanity check</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp994176" starting-state="hide">
        <fo:bookmark-title>System Principles</fo:bookmark-title>
        <fo:bookmark internal-destination="idp989152" starting-state="hide">
          <fo:bookmark-title>System Principles</fo:bookmark-title>
          <fo:bookmark internal-destination="idp986432" starting-state="hide">
            <fo:bookmark-title>Starting the System</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp980992" starting-state="hide">
            <fo:bookmark-title>Restarting and Stopping the System</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1076464" starting-state="hide">
            <fo:bookmark-title>Boot Scripts</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1065440" starting-state="hide">
              <fo:bookmark-title>Default Boot Scripts</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1154704" starting-state="hide">
              <fo:bookmark-title>User-Defined Boot Scripts</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1147152" starting-state="hide">
            <fo:bookmark-title>Code Loading Strategy</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1047376" starting-state="hide">
            <fo:bookmark-title>File Types</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp292128" starting-state="hide">
          <fo:bookmark-title>Error Logging</fo:bookmark-title>
          <fo:bookmark internal-destination="idp651984" starting-state="hide">
            <fo:bookmark-title>Error Information From the Runtime System</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp380848" starting-state="hide">
            <fo:bookmark-title>SASL Error Logging</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp295120" starting-state="hide">
          <fo:bookmark-title>Creating and Upgrading a Target System</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1078368" starting-state="hide">
            <fo:bookmark-title>Creating a Target System</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1058416" starting-state="hide">
            <fo:bookmark-title>Installing a Target System</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1231504" starting-state="hide">
            <fo:bookmark-title>Starting a Target System</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1275840" starting-state="hide">
            <fo:bookmark-title>System Configuration Parameters</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1280864" starting-state="hide">
            <fo:bookmark-title>Differences From the Install Script</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1283936" starting-state="hide">
            <fo:bookmark-title>Creating the Next Version</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1298800" starting-state="hide">
            <fo:bookmark-title>Upgrading the Target System</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1325200" starting-state="hide">
            <fo:bookmark-title>Listing of target_system.erl</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1341120" starting-state="hide">
          <fo:bookmark-title>Upgrade when Erlang/OTP has Changed</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1345216" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1348800" starting-state="hide">
            <fo:bookmark-title>Upgrade of Core Applications</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1359424" starting-state="hide">
            <fo:bookmark-title>Applications that Still do Not Allow Code Upgrade</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1366240" starting-state="hide">
          <fo:bookmark-title>Versions</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1370320" starting-state="hide">
            <fo:bookmark-title>OTP Version</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1375056" starting-state="hide">
              <fo:bookmark-title>Retrieving Current OTP Version</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1386992" starting-state="hide">
              <fo:bookmark-title>OTP Versions Table</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1402768" starting-state="hide">
            <fo:bookmark-title>Application Version</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1405600" starting-state="hide">
            <fo:bookmark-title>Version Scheme</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1415808" starting-state="hide">
              <fo:bookmark-title>Order of Versions</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1426688" starting-state="hide">
            <fo:bookmark-title>OTP 17.0 Application Versions</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp1085824" starting-state="hide">
        <fo:bookmark-title>Embedded Systems User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp388512" starting-state="hide">
          <fo:bookmark-title>Embedded Solaris</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1014544" starting-state="hide">
            <fo:bookmark-title>Memory Use</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp491408" starting-state="hide">
            <fo:bookmark-title>Disk Space Use</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1034048" starting-state="hide">
            <fo:bookmark-title>Installing an Embedded System</fo:bookmark-title>
            <fo:bookmark internal-destination="idp859584" starting-state="hide">
              <fo:bookmark-title>Creating User and Installation Directory</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idm18576" starting-state="hide">
              <fo:bookmark-title>Installing an Embedded System</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp395664" starting-state="hide">
              <fo:bookmark-title>Configuring Automatic Start at Boot</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1105264" starting-state="hide">
              <fo:bookmark-title>Making Hardware Watchdog Available</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp398288" starting-state="hide">
              <fo:bookmark-title>Changing Permissions for Reboot</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp911168" starting-state="hide">
              <fo:bookmark-title>Setting TERM Environment Variable</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp265136" starting-state="hide">
              <fo:bookmark-title>Adding Patches</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp396784" starting-state="hide">
              <fo:bookmark-title>Installing Module os_sup in Application os_mon</fo:bookmark-title>
              <fo:bookmark internal-destination="idp936688" starting-state="hide">
                <fo:bookmark-title>Installation</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp1268224" starting-state="hide">
                <fo:bookmark-title>Testing the Application Configuration File</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp916704" starting-state="hide">
                <fo:bookmark-title>Related Documents</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp919584" starting-state="hide">
              <fo:bookmark-title>Installation Problems</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp999392" starting-state="hide">
            <fo:bookmark-title>Starting Erlang</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1008528" starting-state="hide">
            <fo:bookmark-title>Programs</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1009264" starting-state="hide">
              <fo:bookmark-title>start</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1100272" starting-state="hide">
              <fo:bookmark-title>run_erl</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp453312" starting-state="hide">
              <fo:bookmark-title>to_erl</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp457904" starting-state="hide">
              <fo:bookmark-title>start_erl</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1127440" starting-state="hide">
          <fo:bookmark-title>Windows NT</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1132864" starting-state="hide">
            <fo:bookmark-title>Memory Use</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1134320" starting-state="hide">
            <fo:bookmark-title>Disk Space Use</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1135760" starting-state="hide">
            <fo:bookmark-title>Installing an Embedded System</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1137536" starting-state="hide">
              <fo:bookmark-title>Hardware Watchdog</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1140080" starting-state="hide">
            <fo:bookmark-title>Starting Erlang</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp2270256" starting-state="hide">
        <fo:bookmark-title>Getting Started With Erlang</fo:bookmark-title>
        <fo:bookmark internal-destination="idp974736" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp970656" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1018528" starting-state="hide">
            <fo:bookmark-title>Omitted Topics</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp645856" starting-state="hide">
          <fo:bookmark-title>Sequential Programming</fo:bookmark-title>
          <fo:bookmark internal-destination="idp353696" starting-state="hide">
            <fo:bookmark-title>The Erlang Shell</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1485664" starting-state="hide">
            <fo:bookmark-title>Modules and Functions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp117120" starting-state="hide">
            <fo:bookmark-title>Atoms</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1178368" starting-state="hide">
            <fo:bookmark-title>Tuples</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1522208" starting-state="hide">
            <fo:bookmark-title>Lists</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp643984" starting-state="hide">
            <fo:bookmark-title>Maps</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2435888" starting-state="hide">
            <fo:bookmark-title>Standard Modules and Manual Pages</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2441456" starting-state="hide">
            <fo:bookmark-title>Writing Output to a Terminal</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1183824" starting-state="hide">
            <fo:bookmark-title>A Larger Example</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1204432" starting-state="hide">
            <fo:bookmark-title>Matching, Guards, and Scope of Variables</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2847024" starting-state="hide">
            <fo:bookmark-title>More About Lists</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2878800" starting-state="hide">
            <fo:bookmark-title>If and Case</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2906704" starting-state="hide">
            <fo:bookmark-title>Built-In Functions (BIFs)</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2930288" starting-state="hide">
            <fo:bookmark-title>Higher-Order Functions (Funs)</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2965152" starting-state="hide">
          <fo:bookmark-title>Concurrent Programming</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2968208" starting-state="hide">
            <fo:bookmark-title>Processes</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2984688" starting-state="hide">
            <fo:bookmark-title>Message Passing</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3025984" starting-state="hide">
            <fo:bookmark-title>Registered Process Names</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3038160" starting-state="hide">
            <fo:bookmark-title>Distributed Programming</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3072480" starting-state="hide">
            <fo:bookmark-title>A Larger Example</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3153696" starting-state="hide">
          <fo:bookmark-title>Robustness</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3159104" starting-state="hide">
            <fo:bookmark-title>Time-outs</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3173824" starting-state="hide">
            <fo:bookmark-title>Error Handling</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3198720" starting-state="hide">
            <fo:bookmark-title>The Larger Example with Robustness Added</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3219504" starting-state="hide">
          <fo:bookmark-title>Records and Macros</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3222560" starting-state="hide">
            <fo:bookmark-title>The Larger Example Divided into Several Files</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3242336" starting-state="hide">
            <fo:bookmark-title>Header Files</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3247664" starting-state="hide">
            <fo:bookmark-title>Records</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3259408" starting-state="hide">
            <fo:bookmark-title>Macros</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp3699792" starting-state="hide">
        <fo:bookmark-title>Erlang Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp3695808" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3691584" starting-state="hide">
            <fo:bookmark-title>Purpose</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3682688" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3681328" starting-state="hide">
            <fo:bookmark-title>Document Conventions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3677392" starting-state="hide">
            <fo:bookmark-title>Complete List of BIFs</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4719168" starting-state="hide">
            <fo:bookmark-title>Reserved Words</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4714480" starting-state="hide">
          <fo:bookmark-title>Character Set and Source File Encoding</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4066688" starting-state="hide">
            <fo:bookmark-title>Character Set</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2405216" starting-state="hide">
            <fo:bookmark-title>Source File Encoding</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2418704" starting-state="hide">
          <fo:bookmark-title>Data Types</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2414688" starting-state="hide">
            <fo:bookmark-title>Terms</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3483456" starting-state="hide">
            <fo:bookmark-title>Number</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1499904" starting-state="hide">
            <fo:bookmark-title>Atom</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2398992" starting-state="hide">
            <fo:bookmark-title>Bit Strings and Binaries</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3928480" starting-state="hide">
            <fo:bookmark-title>Reference</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3483008" starting-state="hide">
            <fo:bookmark-title>Fun</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3665936" starting-state="hide">
            <fo:bookmark-title>Port Identifier</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3668976" starting-state="hide">
            <fo:bookmark-title>Pid</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4722800" starting-state="hide">
            <fo:bookmark-title>Tuple</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4730288" starting-state="hide">
            <fo:bookmark-title>Map</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4740688" starting-state="hide">
            <fo:bookmark-title>List</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4771472" starting-state="hide">
            <fo:bookmark-title>String</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4776592" starting-state="hide">
            <fo:bookmark-title>Record</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4782016" starting-state="hide">
            <fo:bookmark-title>Boolean</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4786112" starting-state="hide">
            <fo:bookmark-title>Escape Sequences</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1462432" starting-state="hide">
            <fo:bookmark-title>Type Conversions</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2553696" starting-state="hide">
          <fo:bookmark-title>Pattern Matching</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3419888" starting-state="hide">
            <fo:bookmark-title>Pattern Matching</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4827840" starting-state="hide">
          <fo:bookmark-title>Modules</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4830016" starting-state="hide">
            <fo:bookmark-title>Module Syntax</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4833728" starting-state="hide">
            <fo:bookmark-title>Module Attributes</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4841312" starting-state="hide">
              <fo:bookmark-title>Pre-Defined Module Attributes</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4859776" starting-state="hide">
              <fo:bookmark-title>Behaviour Module Attribute</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4870800" starting-state="hide">
              <fo:bookmark-title>Record Definitions</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4873472" starting-state="hide">
              <fo:bookmark-title>Preprocessor</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4876176" starting-state="hide">
              <fo:bookmark-title>Setting File and Line</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4879440" starting-state="hide">
              <fo:bookmark-title>Types and function specifications</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4884016" starting-state="hide">
            <fo:bookmark-title>Comments</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4885648" starting-state="hide">
            <fo:bookmark-title>module_info/0 and module_info/1 functions</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4889328" starting-state="hide">
              <fo:bookmark-title>module_info/0</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4894896" starting-state="hide">
              <fo:bookmark-title>module_info/1</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4919008" starting-state="hide">
          <fo:bookmark-title>Functions</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4922064" starting-state="hide">
            <fo:bookmark-title>Function Declaration Syntax</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4936016" starting-state="hide">
            <fo:bookmark-title>Function Evaluation</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4954080" starting-state="hide">
            <fo:bookmark-title>Tail recursion</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4958208" starting-state="hide">
            <fo:bookmark-title>Built-In Functions (BIFs)</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4970304" starting-state="hide">
          <fo:bookmark-title>Types and Function Specifications</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4973008" starting-state="hide">
            <fo:bookmark-title>The Erlang Type Language</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4979904" starting-state="hide">
            <fo:bookmark-title>Types and their Syntax</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5089264" starting-state="hide">
            <fo:bookmark-title>Type Declarations of User-Defined Types</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5104784" starting-state="hide">
            <fo:bookmark-title>Type Information in Record Declarations</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5115376" starting-state="hide">
            <fo:bookmark-title>Specifications for Functions</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp5140048" starting-state="hide">
          <fo:bookmark-title>Expressions</fo:bookmark-title>
          <fo:bookmark internal-destination="idp5145984" starting-state="hide">
            <fo:bookmark-title>Expression Evaluation</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5151104" starting-state="hide">
            <fo:bookmark-title>Terms</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5152592" starting-state="hide">
            <fo:bookmark-title>Variables</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5170720" starting-state="hide">
            <fo:bookmark-title>Patterns</fo:bookmark-title>
            <fo:bookmark internal-destination="idp5174384" starting-state="hide">
              <fo:bookmark-title>Match Operator = in Patterns</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp5180704" starting-state="hide">
              <fo:bookmark-title>String Prefix in Patterns</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp5183536" starting-state="hide">
              <fo:bookmark-title>Expressions in Patterns</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5187872" starting-state="hide">
            <fo:bookmark-title>Match</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5195440" starting-state="hide">
            <fo:bookmark-title>Function Calls</fo:bookmark-title>
            <fo:bookmark internal-destination="idp5213424" starting-state="hide">
              <fo:bookmark-title>Local Function Names Clashing With  Auto-Imported BIFs</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5221904" starting-state="hide">
            <fo:bookmark-title>If</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5229792" starting-state="hide">
            <fo:bookmark-title>Case</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5237680" starting-state="hide">
            <fo:bookmark-title>Send</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5247664" starting-state="hide">
            <fo:bookmark-title>Receive</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5268256" starting-state="hide">
            <fo:bookmark-title>Term Comparisons</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5302224" starting-state="hide">
            <fo:bookmark-title>Arithmetic Expressions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5363136" starting-state="hide">
            <fo:bookmark-title>Boolean Expressions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5381856" starting-state="hide">
            <fo:bookmark-title>Short-Circuit Expressions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5399296" starting-state="hide">
            <fo:bookmark-title>List Operations</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5407616" starting-state="hide">
            <fo:bookmark-title>Map Expressions</fo:bookmark-title>
            <fo:bookmark internal-destination="idp5408352" starting-state="hide">
              <fo:bookmark-title>Creating Maps</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp5424400" starting-state="hide">
              <fo:bookmark-title>Updating Maps</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp5449328" starting-state="hide">
              <fo:bookmark-title>Maps in Patterns</fo:bookmark-title>
              <fo:bookmark internal-destination="idp5472480" starting-state="hide">
                <fo:bookmark-title>Matching Syntax</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp5474992" starting-state="hide">
              <fo:bookmark-title>Maps in Guards</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5481552" starting-state="hide">
            <fo:bookmark-title>Bit Syntax Expressions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5551488" starting-state="hide">
            <fo:bookmark-title>Fun Expressions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5571328" starting-state="hide">
            <fo:bookmark-title>Catch and Throw</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5590528" starting-state="hide">
            <fo:bookmark-title>Try</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5635376" starting-state="hide">
            <fo:bookmark-title>Parenthesized Expressions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5639312" starting-state="hide">
            <fo:bookmark-title>Block Expressions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5642272" starting-state="hide">
            <fo:bookmark-title>List Comprehensions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5662208" starting-state="hide">
            <fo:bookmark-title>Bit String Comprehensions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5678592" starting-state="hide">
            <fo:bookmark-title>Guard Sequences</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5746368" starting-state="hide">
            <fo:bookmark-title>Operator Precedence</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp5783376" starting-state="hide">
          <fo:bookmark-title>Preprocessor</fo:bookmark-title>
          <fo:bookmark internal-destination="idp5785872" starting-state="hide">
            <fo:bookmark-title>File Inclusion</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5805104" starting-state="hide">
            <fo:bookmark-title>Defining and Using Macros</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5821040" starting-state="hide">
            <fo:bookmark-title>Predefined Macros</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5831248" starting-state="hide">
            <fo:bookmark-title>Macros Overloading</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5839568" starting-state="hide">
            <fo:bookmark-title>Flow Control in Macros</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5856144" starting-state="hide">
            <fo:bookmark-title>-error() and -warning() directives</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5865952" starting-state="hide">
            <fo:bookmark-title>Stringifying Macro Arguments</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp5875920" starting-state="hide">
          <fo:bookmark-title>Records</fo:bookmark-title>
          <fo:bookmark internal-destination="idp5881136" starting-state="hide">
            <fo:bookmark-title>Defining Records</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5884848" starting-state="hide">
            <fo:bookmark-title>Creating Records</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5891920" starting-state="hide">
            <fo:bookmark-title>Accessing Record Fields</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5896768" starting-state="hide">
            <fo:bookmark-title>Updating Records</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5900672" starting-state="hide">
            <fo:bookmark-title>Records in Guards</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5905680" starting-state="hide">
            <fo:bookmark-title>Records in Patterns</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5908944" starting-state="hide">
            <fo:bookmark-title>Nested Records</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5913088" starting-state="hide">
            <fo:bookmark-title>Internal Representation of Records</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp5925648" starting-state="hide">
          <fo:bookmark-title>Errors and Error Handling</fo:bookmark-title>
          <fo:bookmark internal-destination="idp5928160" starting-state="hide">
            <fo:bookmark-title>Terminology</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5943456" starting-state="hide">
            <fo:bookmark-title>Exceptions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5964592" starting-state="hide">
            <fo:bookmark-title>Handling of Run-time Errors in Erlang</fo:bookmark-title>
            <fo:bookmark internal-destination="idp5965344" starting-state="hide">
              <fo:bookmark-title>Error Handling Within Processes</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp5969872" starting-state="hide">
              <fo:bookmark-title>Error Handling Between Processes</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5972752" starting-state="hide">
            <fo:bookmark-title>Exit Reasons</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6028096" starting-state="hide">
          <fo:bookmark-title>Processes</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6030592" starting-state="hide">
            <fo:bookmark-title>Processes</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6032144" starting-state="hide">
            <fo:bookmark-title>Process Creation</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6038096" starting-state="hide">
            <fo:bookmark-title>Registered Processes</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6054080" starting-state="hide">
            <fo:bookmark-title>Process Termination</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6065536" starting-state="hide">
            <fo:bookmark-title>Message Sending</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6068992" starting-state="hide">
            <fo:bookmark-title>Links</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6076816" starting-state="hide">
            <fo:bookmark-title>Error Handling</fo:bookmark-title>
            <fo:bookmark internal-destination="idp6079664" starting-state="hide">
              <fo:bookmark-title>Emitting Exit Signals</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp6084624" starting-state="hide">
              <fo:bookmark-title>Receiving Exit Signals</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6090768" starting-state="hide">
            <fo:bookmark-title>Monitors</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6101760" starting-state="hide">
            <fo:bookmark-title>Process Dictionary</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6107600" starting-state="hide">
          <fo:bookmark-title>Distributed Erlang</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6110096" starting-state="hide">
            <fo:bookmark-title>Distributed Erlang System</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6116944" starting-state="hide">
            <fo:bookmark-title>Nodes</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6125920" starting-state="hide">
            <fo:bookmark-title>Node Connections</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6132128" starting-state="hide">
            <fo:bookmark-title>epmd</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6134816" starting-state="hide">
            <fo:bookmark-title>Hidden Nodes</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6140352" starting-state="hide">
            <fo:bookmark-title>C Nodes</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6144256" starting-state="hide">
            <fo:bookmark-title>Security</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6157488" starting-state="hide">
            <fo:bookmark-title>Distribution BIFs</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6196272" starting-state="hide">
            <fo:bookmark-title>Distribution Command-Line Flags</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6215712" starting-state="hide">
            <fo:bookmark-title>Distribution Modules</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6242592" starting-state="hide">
          <fo:bookmark-title>Compilation and Code Loading</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6245744" starting-state="hide">
            <fo:bookmark-title>Compilation</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6260096" starting-state="hide">
            <fo:bookmark-title>Code Loading</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6266352" starting-state="hide">
            <fo:bookmark-title>Code Replacement</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6275856" starting-state="hide">
            <fo:bookmark-title>Running a Function When a Module is Loaded</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6292992" starting-state="hide">
          <fo:bookmark-title>Ports and Port Drivers</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6297536" starting-state="hide">
            <fo:bookmark-title>Ports</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6301712" starting-state="hide">
            <fo:bookmark-title>Port Drivers</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6307392" starting-state="hide">
            <fo:bookmark-title>Port BIFs</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp4034016" starting-state="hide">
        <fo:bookmark-title>Programming Examples</fo:bookmark-title>
        <fo:bookmark internal-destination="idp3447072" starting-state="hide">
          <fo:bookmark-title>Records</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3444544" starting-state="hide">
            <fo:bookmark-title>Records and Tuples</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3468768" starting-state="hide">
            <fo:bookmark-title>Defining a Record</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3460368" starting-state="hide">
            <fo:bookmark-title>Creating a Record</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2383136" starting-state="hide">
            <fo:bookmark-title>Accessing a Record Field</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2379744" starting-state="hide">
            <fo:bookmark-title>Updating a Record</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2377216" starting-state="hide">
            <fo:bookmark-title>Type Testing</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2374256" starting-state="hide">
            <fo:bookmark-title>Pattern Matching</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp949120" starting-state="hide">
            <fo:bookmark-title>Nested Records</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp946080" starting-state="hide">
            <fo:bookmark-title>A Longer Example</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3459680" starting-state="hide">
          <fo:bookmark-title>Funs</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2397040" starting-state="hide">
            <fo:bookmark-title>map</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2341120" starting-state="hide">
            <fo:bookmark-title>foreach</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1513216" starting-state="hide">
            <fo:bookmark-title>Syntax of Funs</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2395264" starting-state="hide">
            <fo:bookmark-title>Variable Bindings Within a Fun</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp939904" starting-state="hide">
            <fo:bookmark-title>Funs and Module Lists</fo:bookmark-title>
            <fo:bookmark internal-destination="idp876512" starting-state="hide">
              <fo:bookmark-title>map</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2283792" starting-state="hide">
              <fo:bookmark-title>any</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3887216" starting-state="hide">
              <fo:bookmark-title>all</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2259792" starting-state="hide">
              <fo:bookmark-title>foreach</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idm35488" starting-state="hide">
              <fo:bookmark-title>foldl</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idm24512" starting-state="hide">
              <fo:bookmark-title>mapfoldl</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1009648" starting-state="hide">
              <fo:bookmark-title>filter</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3897024" starting-state="hide">
              <fo:bookmark-title>takewhile</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp203856" starting-state="hide">
              <fo:bookmark-title>dropwhile</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2487936" starting-state="hide">
              <fo:bookmark-title>splitwith</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2304640" starting-state="hide">
            <fo:bookmark-title>Funs Returning Funs</fo:bookmark-title>
            <fo:bookmark internal-destination="idp2306032" starting-state="hide">
              <fo:bookmark-title>Simple Higher Order Functions</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3911664" starting-state="hide">
              <fo:bookmark-title>Infinite Lists</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3917520" starting-state="hide">
              <fo:bookmark-title>Parsing</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4021440" starting-state="hide">
          <fo:bookmark-title>List Comprehensions</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4023936" starting-state="hide">
            <fo:bookmark-title>Simple Examples</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3954208" starting-state="hide">
            <fo:bookmark-title>Quick Sort</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3963232" starting-state="hide">
            <fo:bookmark-title>Permutations</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3969456" starting-state="hide">
            <fo:bookmark-title>Pythagorean Triplets</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3978560" starting-state="hide">
            <fo:bookmark-title>Simplifications With List Comprehensions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3981280" starting-state="hide">
            <fo:bookmark-title>Variable Bindings in List Comprehensions</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3348864" starting-state="hide">
          <fo:bookmark-title>Bit Syntax</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3351360" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3361328" starting-state="hide">
              <fo:bookmark-title>Examples</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3279952" starting-state="hide">
            <fo:bookmark-title>Lexical Note</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3282624" starting-state="hide">
            <fo:bookmark-title>Segments</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3307792" starting-state="hide">
            <fo:bookmark-title>Defaults</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3314960" starting-state="hide">
            <fo:bookmark-title>Constructing Binaries and Bitstrings</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3742176" starting-state="hide">
              <fo:bookmark-title>Including Literal Strings</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3745600" starting-state="hide">
            <fo:bookmark-title>Matching Binaries</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3756320" starting-state="hide">
              <fo:bookmark-title>Getting the Rest of the Binary or Bitstring</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3760880" starting-state="hide">
            <fo:bookmark-title>Appending to a Binary</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp3496256" starting-state="hide">
        <fo:bookmark-title>Efficiency Guide </fo:bookmark-title>
        <fo:bookmark internal-destination="idp3624416" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3704512" starting-state="hide">
            <fo:bookmark-title>Purpose</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4052688" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2249936" starting-state="hide">
          <fo:bookmark-title>The Seven Myths of Erlang Performance</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3435536" starting-state="hide">
            <fo:bookmark-title>Myth: Tail-Recursive Functions are Much Faster
    Than Recursive Functions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3940928" starting-state="hide">
            <fo:bookmark-title>Myth: Operator "++" is Always Bad</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3508800" starting-state="hide">
            <fo:bookmark-title>Myth: Strings are Slow</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4049504" starting-state="hide">
            <fo:bookmark-title>Myth: Repairing a Dets File is Very Slow</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4274352" starting-state="hide">
            <fo:bookmark-title>Myth: BEAM is a Stack-Based Byte-Code Virtual Machine
    (and Therefore Slow)</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3626784" starting-state="hide">
            <fo:bookmark-title>Myth: Use "_" to Speed Up Your Program When a Variable
    is Not Used</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1465296" starting-state="hide">
            <fo:bookmark-title>Myth: A NIF Always Speeds Up Your Program</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2326512" starting-state="hide">
          <fo:bookmark-title>Common Caveats</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4046592" starting-state="hide">
            <fo:bookmark-title>Timer Module</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3420576" starting-state="hide">
            <fo:bookmark-title>list_to_atom/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3628464" starting-state="hide">
            <fo:bookmark-title>length/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3645056" starting-state="hide">
            <fo:bookmark-title>setelement/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4272880" starting-state="hide">
            <fo:bookmark-title>size/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3848432" starting-state="hide">
            <fo:bookmark-title>split_binary/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3407520" starting-state="hide">
            <fo:bookmark-title>Operator "--"</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4269648" starting-state="hide">
          <fo:bookmark-title>Constructing and Matching Binaries</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3581424" starting-state="hide">
            <fo:bookmark-title>How Binaries are Implemented</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3615936" starting-state="hide">
              <fo:bookmark-title>Refc Binaries</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3621072" starting-state="hide">
              <fo:bookmark-title>Heap Binaries</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3622672" starting-state="hide">
              <fo:bookmark-title>Sub Binaries</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3590944" starting-state="hide">
              <fo:bookmark-title>Match Context</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3594992" starting-state="hide">
            <fo:bookmark-title>Constructing Binaries</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4208432" starting-state="hide">
              <fo:bookmark-title>Circumstances That Force Copying</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4221808" starting-state="hide">
            <fo:bookmark-title>Matching Binaries</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4243136" starting-state="hide">
              <fo:bookmark-title>Option bin_opt_info</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4291392" starting-state="hide">
              <fo:bookmark-title>Unused Variables</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4294368" starting-state="hide">
            <fo:bookmark-title>Historical Note</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4299872" starting-state="hide">
          <fo:bookmark-title>List Handling</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4302688" starting-state="hide">
            <fo:bookmark-title>Creating a List</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4313728" starting-state="hide">
            <fo:bookmark-title>List Comprehensions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4323216" starting-state="hide">
            <fo:bookmark-title>Deep and Flat Lists</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4331216" starting-state="hide">
              <fo:bookmark-title>Port Example</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4337376" starting-state="hide">
              <fo:bookmark-title>Append Example</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4340576" starting-state="hide">
            <fo:bookmark-title>Recursive List Functions</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4353152" starting-state="hide">
          <fo:bookmark-title>Functions</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4355968" starting-state="hide">
            <fo:bookmark-title>Pattern Matching</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4383504" starting-state="hide">
            <fo:bookmark-title>Function Calls</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4390640" starting-state="hide">
              <fo:bookmark-title>Notes and Implementation Details</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4397200" starting-state="hide">
            <fo:bookmark-title>Memory Usage in Recursion</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4405456" starting-state="hide">
          <fo:bookmark-title>Tables and Databases</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4408272" starting-state="hide">
            <fo:bookmark-title>Ets, Dets, and Mnesia</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4409568" starting-state="hide">
              <fo:bookmark-title>Select/Match Operations</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4416416" starting-state="hide">
              <fo:bookmark-title>Deleting an Element</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4420624" starting-state="hide">
              <fo:bookmark-title>Fetching Data</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4430224" starting-state="hide">
              <fo:bookmark-title>Non-Persistent Database Storage</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4433136" starting-state="hide">
              <fo:bookmark-title>tab2list</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4446912" starting-state="hide">
              <fo:bookmark-title>Ordered_set Tables</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4455584" starting-state="hide">
            <fo:bookmark-title>Ets-Specific</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4456320" starting-state="hide">
              <fo:bookmark-title>Using Keys of Ets Table</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4468800" starting-state="hide">
            <fo:bookmark-title>Mnesia-Specific</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4469536" starting-state="hide">
              <fo:bookmark-title>Secondary Index</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4472576" starting-state="hide">
              <fo:bookmark-title>Transactions </fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4480704" starting-state="hide">
          <fo:bookmark-title>Processes</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4483520" starting-state="hide">
            <fo:bookmark-title>Creating an Erlang Process</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4493376" starting-state="hide">
              <fo:bookmark-title>Initial Heap Size</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4502512" starting-state="hide">
            <fo:bookmark-title>Process Messages</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4505104" starting-state="hide">
              <fo:bookmark-title>Constant Pool</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4509856" starting-state="hide">
              <fo:bookmark-title>Loss of Sharing</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4527232" starting-state="hide">
            <fo:bookmark-title>SMP Emulator</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4535152" starting-state="hide">
          <fo:bookmark-title>Drivers</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4538976" starting-state="hide">
            <fo:bookmark-title>Drivers and Concurrency</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4543856" starting-state="hide">
            <fo:bookmark-title>Avoiding Copying Binaries When Calling a Driver</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4552912" starting-state="hide">
            <fo:bookmark-title>Returning Small Binaries from a Driver</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4557072" starting-state="hide">
            <fo:bookmark-title>Returning Large Binaries without Copying from a Driver</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4570752" starting-state="hide">
          <fo:bookmark-title>Advanced</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4573568" starting-state="hide">
            <fo:bookmark-title>Memory</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4625824" starting-state="hide">
            <fo:bookmark-title>System Limits</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4689312" starting-state="hide">
          <fo:bookmark-title>Profiling</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4692128" starting-state="hide">
            <fo:bookmark-title>Do Not Guess About Performance - Profile</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4703888" starting-state="hide">
            <fo:bookmark-title>Large Systems</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4706256" starting-state="hide">
            <fo:bookmark-title>What to Look For</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6373808" starting-state="hide">
            <fo:bookmark-title>Tools</fo:bookmark-title>
            <fo:bookmark internal-destination="idp6375104" starting-state="hide">
              <fo:bookmark-title>fprof</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp6379536" starting-state="hide">
              <fo:bookmark-title>eprof</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp6383008" starting-state="hide">
              <fo:bookmark-title>cover</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp6387248" starting-state="hide">
              <fo:bookmark-title>cprof</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp6392128" starting-state="hide">
              <fo:bookmark-title>Tool Summary</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6438448" starting-state="hide">
            <fo:bookmark-title>Benchmarking</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6452400" starting-state="hide">
          <fo:bookmark-title>Retired Myths</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6456288" starting-state="hide">
            <fo:bookmark-title>Myth: Funs are Slow</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6459744" starting-state="hide">
            <fo:bookmark-title>Myth: List Comprehensions are Slow</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp215152" starting-state="hide">
        <fo:bookmark-title>Interoperability Tutorial</fo:bookmark-title>
        <fo:bookmark internal-destination="idp3394432" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4202608" starting-state="hide">
            <fo:bookmark-title>Purpose</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4201312" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4120976" starting-state="hide">
          <fo:bookmark-title>Overview</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4118704" starting-state="hide">
            <fo:bookmark-title>Built-In Mechanisms</fo:bookmark-title>
            <fo:bookmark internal-destination="idp2482048" starting-state="hide">
              <fo:bookmark-title>Distributed Erlang</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp4276112" starting-state="hide">
              <fo:bookmark-title>Ports and Linked-In Drivers</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1166464" starting-state="hide">
            <fo:bookmark-title>C and Java Libraries</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1037392" starting-state="hide">
              <fo:bookmark-title>Erl_Interface</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3953424" starting-state="hide">
              <fo:bookmark-title>C Nodes</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3764224" starting-state="hide">
              <fo:bookmark-title>Jinterface</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2256064" starting-state="hide">
            <fo:bookmark-title>Standard Protocols</fo:bookmark-title>
            <fo:bookmark internal-destination="idp4086000" starting-state="hide">
              <fo:bookmark-title>Sockets</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4088032" starting-state="hide">
            <fo:bookmark-title>IC</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1530528" starting-state="hide">
            <fo:bookmark-title>Old Applications</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4199792" starting-state="hide">
          <fo:bookmark-title>Problem Example</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3945920" starting-state="hide">
            <fo:bookmark-title>Description</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3524192" starting-state="hide">
          <fo:bookmark-title>Ports</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4042848" starting-state="hide">
            <fo:bookmark-title>Erlang Program</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4181376" starting-state="hide">
            <fo:bookmark-title>C Program</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3819184" starting-state="hide">
            <fo:bookmark-title>Running the Example</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3830448" starting-state="hide">
          <fo:bookmark-title>Erl_Interface</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3545168" starting-state="hide">
            <fo:bookmark-title>Erlang Program</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3560720" starting-state="hide">
            <fo:bookmark-title>C Program</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3787952" starting-state="hide">
            <fo:bookmark-title>Running the Example</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3807488" starting-state="hide">
          <fo:bookmark-title>Port Drivers</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2710464" starting-state="hide">
            <fo:bookmark-title>Erlang Program</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2727424" starting-state="hide">
            <fo:bookmark-title>C Driver</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2738720" starting-state="hide">
            <fo:bookmark-title>Running the Example</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2750528" starting-state="hide">
          <fo:bookmark-title>C Nodes</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2754272" starting-state="hide">
            <fo:bookmark-title>Erlang Program</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2763904" starting-state="hide">
            <fo:bookmark-title>C Program</fo:bookmark-title>
            <fo:bookmark internal-destination="idp2764640" starting-state="hide">
              <fo:bookmark-title>Setting Up Communication</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2784320" starting-state="hide">
              <fo:bookmark-title>Sending and Receiving Messages</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2806624" starting-state="hide">
            <fo:bookmark-title>Running the Example</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6497984" starting-state="hide">
          <fo:bookmark-title>NIFs</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6504944" starting-state="hide">
            <fo:bookmark-title>Erlang Program</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6514640" starting-state="hide">
            <fo:bookmark-title>NIF Library Code</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6529072" starting-state="hide">
            <fo:bookmark-title>Running the Example</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp7703344" starting-state="hide">
        <fo:bookmark-title>OTP Design Principles</fo:bookmark-title>
        <fo:bookmark internal-destination="idp7698352" starting-state="hide">
          <fo:bookmark-title>Overview</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7693920" starting-state="hide">
            <fo:bookmark-title>Supervision Trees</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7686416" starting-state="hide">
            <fo:bookmark-title>Behaviours</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7639200" starting-state="hide">
            <fo:bookmark-title>Applications</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7632880" starting-state="hide">
            <fo:bookmark-title>Releases</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7629456" starting-state="hide">
            <fo:bookmark-title>Release Handling</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7623072" starting-state="hide">
          <fo:bookmark-title>gen_server Behaviour</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7619408" starting-state="hide">
            <fo:bookmark-title>Client-Server Principles</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7616368" starting-state="hide">
            <fo:bookmark-title>Example</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7611696" starting-state="hide">
            <fo:bookmark-title>Starting a Gen_Server</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7571536" starting-state="hide">
            <fo:bookmark-title>Synchronous Requests - Call</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7738944" starting-state="hide">
            <fo:bookmark-title>Asynchronous Requests - Cast</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3489696" starting-state="hide">
            <fo:bookmark-title>Stopping</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3487824" starting-state="hide">
              <fo:bookmark-title>In a Supervision Tree</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3643920" starting-state="hide">
              <fo:bookmark-title>Standalone Gen_Servers</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3638048" starting-state="hide">
            <fo:bookmark-title>Handling Other Messages</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2317728" starting-state="hide">
          <fo:bookmark-title>gen_statem Behavior</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3856912" starting-state="hide">
            <fo:bookmark-title>Event-Driven State Machines</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7154768" starting-state="hide">
            <fo:bookmark-title>Callback Modes</fo:bookmark-title>
            <fo:bookmark internal-destination="idp7653968" starting-state="hide">
              <fo:bookmark-title>Choosing the Callback Mode</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7235024" starting-state="hide">
            <fo:bookmark-title>State Enter Calls</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4175472" starting-state="hide">
            <fo:bookmark-title>Actions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6539152" starting-state="hide">
            <fo:bookmark-title>Event Types</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7646704" starting-state="hide">
            <fo:bookmark-title>Example</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3714928" starting-state="hide">
            <fo:bookmark-title>Starting gen_statem</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7726880" starting-state="hide">
            <fo:bookmark-title>Handling Events</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8106944" starting-state="hide">
            <fo:bookmark-title>State Time-Outs</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8112656" starting-state="hide">
            <fo:bookmark-title>All State Events</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8119328" starting-state="hide">
            <fo:bookmark-title>One Event Handler</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8123520" starting-state="hide">
            <fo:bookmark-title>Stopping</fo:bookmark-title>
            <fo:bookmark internal-destination="idp8124544" starting-state="hide">
              <fo:bookmark-title>In a Supervision Tree</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp8132368" starting-state="hide">
              <fo:bookmark-title>Standalone gen_statem</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8136976" starting-state="hide">
            <fo:bookmark-title>Event Time-Outs</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8144896" starting-state="hide">
            <fo:bookmark-title>Generic Time-Outs</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8152640" starting-state="hide">
            <fo:bookmark-title>Erlang Timers</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8164880" starting-state="hide">
            <fo:bookmark-title>Postponing Events</fo:bookmark-title>
            <fo:bookmark internal-destination="idp8175296" starting-state="hide">
              <fo:bookmark-title>Fuzzy State Diagrams</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp8177968" starting-state="hide">
              <fo:bookmark-title>Selective Receive</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8189232" starting-state="hide">
            <fo:bookmark-title>State Entry Actions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8200256" starting-state="hide">
            <fo:bookmark-title>Self-Generated Events</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8212048" starting-state="hide">
            <fo:bookmark-title>Example Revisited</fo:bookmark-title>
            <fo:bookmark internal-destination="idp8216800" starting-state="hide">
              <fo:bookmark-title>Callback Mode: state_functions</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp8221456" starting-state="hide">
              <fo:bookmark-title>Callback Mode: handle_event_function</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8227984" starting-state="hide">
            <fo:bookmark-title>Filter the State</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8237520" starting-state="hide">
            <fo:bookmark-title>Complex State</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8257696" starting-state="hide">
            <fo:bookmark-title>Hibernation</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8274976" starting-state="hide">
          <fo:bookmark-title>gen_event Behaviour</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8279040" starting-state="hide">
            <fo:bookmark-title>Event Handling Principles</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8285296" starting-state="hide">
            <fo:bookmark-title>Example</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8290272" starting-state="hide">
            <fo:bookmark-title>Starting an Event Manager</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8297312" starting-state="hide">
            <fo:bookmark-title>Adding an Event Handler</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8307808" starting-state="hide">
            <fo:bookmark-title>Notifying about Events</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8316304" starting-state="hide">
            <fo:bookmark-title>Deleting an Event Handler</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8325728" starting-state="hide">
            <fo:bookmark-title>Stopping</fo:bookmark-title>
            <fo:bookmark internal-destination="idp8327504" starting-state="hide">
              <fo:bookmark-title>In a Supervision Tree</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp8329792" starting-state="hide">
              <fo:bookmark-title>Standalone Event Managers</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8332256" starting-state="hide">
            <fo:bookmark-title>Handling Other Messages</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8341632" starting-state="hide">
          <fo:bookmark-title>Supervisor Behaviour</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8345408" starting-state="hide">
            <fo:bookmark-title>Supervision Principles</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8348304" starting-state="hide">
            <fo:bookmark-title>Example</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8356976" starting-state="hide">
            <fo:bookmark-title>Supervisor Flags</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8364912" starting-state="hide">
            <fo:bookmark-title>Restart Strategy</fo:bookmark-title>
            <fo:bookmark internal-destination="idp8369232" starting-state="hide">
              <fo:bookmark-title>one_for_one</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp8372368" starting-state="hide">
              <fo:bookmark-title>one_for_all</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp8375600" starting-state="hide">
              <fo:bookmark-title>rest_for_one</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp8377184" starting-state="hide">
              <fo:bookmark-title>simple_one_for_one</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8379984" starting-state="hide">
            <fo:bookmark-title>Maximum Restart Intensity</fo:bookmark-title>
            <fo:bookmark internal-destination="idp8388944" starting-state="hide">
              <fo:bookmark-title>Tuning the intensity and period</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8400352" starting-state="hide">
            <fo:bookmark-title>Child Specification</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8452608" starting-state="hide">
            <fo:bookmark-title>Starting a Supervisor</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8466608" starting-state="hide">
            <fo:bookmark-title>Adding a Child Process</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8471872" starting-state="hide">
            <fo:bookmark-title>Stopping a Child Process</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8478864" starting-state="hide">
            <fo:bookmark-title>Simplified one_for_one Supervisors</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8494224" starting-state="hide">
            <fo:bookmark-title>Stopping</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8499760" starting-state="hide">
          <fo:bookmark-title>sys and proc_lib</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8506320" starting-state="hide">
            <fo:bookmark-title>Simple Debugging</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8511568" starting-state="hide">
            <fo:bookmark-title>Special Processes</fo:bookmark-title>
            <fo:bookmark internal-destination="idp8517520" starting-state="hide">
              <fo:bookmark-title>Example</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp8530096" starting-state="hide">
              <fo:bookmark-title>Starting the Process</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp8543056" starting-state="hide">
              <fo:bookmark-title>Debugging</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp8565728" starting-state="hide">
              <fo:bookmark-title>Handling System Messages</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8586864" starting-state="hide">
            <fo:bookmark-title>User-Defined Behaviours</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8618912" starting-state="hide">
          <fo:bookmark-title>Applications</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8623344" starting-state="hide">
            <fo:bookmark-title>Application Concept</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8631408" starting-state="hide">
            <fo:bookmark-title>Application Callback Module</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8646480" starting-state="hide">
            <fo:bookmark-title>Application Resource File</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8676832" starting-state="hide">
            <fo:bookmark-title>Directory Structure</fo:bookmark-title>
            <fo:bookmark internal-destination="idp8681536" starting-state="hide">
              <fo:bookmark-title>Directory Structure guidelines for a Development Environment</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp8709216" starting-state="hide">
              <fo:bookmark-title>Directory Structure for a Released System</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8727712" starting-state="hide">
            <fo:bookmark-title>Application Controller</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8731680" starting-state="hide">
            <fo:bookmark-title>Loading and Unloading Applications</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8739136" starting-state="hide">
            <fo:bookmark-title>Starting and Stopping Applications</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8749648" starting-state="hide">
            <fo:bookmark-title>Configuring an Application</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8774624" starting-state="hide">
            <fo:bookmark-title>Application Start Types</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8789136" starting-state="hide">
          <fo:bookmark-title>Included Applications</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8792208" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8800064" starting-state="hide">
            <fo:bookmark-title>Specifying Included Applications</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8803104" starting-state="hide">
            <fo:bookmark-title>Synchronizing Processes during Startup</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8828416" starting-state="hide">
          <fo:bookmark-title>Distributed Applications</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8831504" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8835808" starting-state="hide">
            <fo:bookmark-title>Specifying Distributed Applications</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8859488" starting-state="hide">
            <fo:bookmark-title>Starting and Stopping Distributed Applications</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8872176" starting-state="hide">
            <fo:bookmark-title>Failover</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8889856" starting-state="hide">
            <fo:bookmark-title>Takeover</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8909792" starting-state="hide">
          <fo:bookmark-title>Releases</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8914656" starting-state="hide">
            <fo:bookmark-title>Release Concept</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8920944" starting-state="hide">
            <fo:bookmark-title>Release Resource File</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8938048" starting-state="hide">
            <fo:bookmark-title>Generating Boot Scripts</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8950880" starting-state="hide">
            <fo:bookmark-title>Creating a Release Package</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8970896" starting-state="hide">
            <fo:bookmark-title>Directory Structure</fo:bookmark-title>
            <fo:bookmark internal-destination="idp8982560" starting-state="hide">
              <fo:bookmark-title>Disk-Less and/or Read-Only Clients</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8997360" starting-state="hide">
          <fo:bookmark-title>Release Handling</fo:bookmark-title>
          <fo:bookmark internal-destination="idp9000416" starting-state="hide">
            <fo:bookmark-title>Release Handling Principles</fo:bookmark-title>
            <fo:bookmark internal-destination="idp9006880" starting-state="hide">
              <fo:bookmark-title>Release Handling Workflow</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp9022176" starting-state="hide">
              <fo:bookmark-title>Release Handling Aspects</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9031104" starting-state="hide">
            <fo:bookmark-title>Requirements</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9041824" starting-state="hide">
            <fo:bookmark-title>Distributed Systems</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9044976" starting-state="hide">
            <fo:bookmark-title>Release Handling Instructions</fo:bookmark-title>
            <fo:bookmark internal-destination="idp9053120" starting-state="hide">
              <fo:bookmark-title>load_module</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp9055856" starting-state="hide">
              <fo:bookmark-title>update</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp9073504" starting-state="hide">
              <fo:bookmark-title>add_module and delete_module</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp9079616" starting-state="hide">
              <fo:bookmark-title>Application Instructions</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp9088704" starting-state="hide">
              <fo:bookmark-title>apply (Low-Level)</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp9092336" starting-state="hide">
              <fo:bookmark-title>restart_new_emulator (Low-Level)</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp9106640" starting-state="hide">
              <fo:bookmark-title>restart_emulator (Low-Level)</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9112448" starting-state="hide">
            <fo:bookmark-title>Application Upgrade File</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9136000" starting-state="hide">
            <fo:bookmark-title>Release Upgrade File</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9154944" starting-state="hide">
            <fo:bookmark-title>Installing a Release</fo:bookmark-title>
            <fo:bookmark internal-destination="idp9179824" starting-state="hide">
              <fo:bookmark-title>Example (continued from the previous sections)</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9215120" starting-state="hide">
            <fo:bookmark-title>Updating Application Specifications</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp9235296" starting-state="hide">
          <fo:bookmark-title>Appup Cookbook</fo:bookmark-title>
          <fo:bookmark internal-destination="idp9239312" starting-state="hide">
            <fo:bookmark-title>Changing a Functional Module</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9241600" starting-state="hide">
            <fo:bookmark-title>Changing a Residence Module</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9246704" starting-state="hide">
            <fo:bookmark-title>Changing a Callback Module</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9253136" starting-state="hide">
            <fo:bookmark-title>Changing Internal State</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9270448" starting-state="hide">
            <fo:bookmark-title>Module Dependencies</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9291376" starting-state="hide">
            <fo:bookmark-title>Changing Code for a Special Process</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9313216" starting-state="hide">
            <fo:bookmark-title>Changing a Supervisor</fo:bookmark-title>
            <fo:bookmark internal-destination="idp9315600" starting-state="hide">
              <fo:bookmark-title>Changing Properties</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp9326480" starting-state="hide">
              <fo:bookmark-title>Changing Child Specifications</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp9331968" starting-state="hide">
              <fo:bookmark-title>Adding and Deleting Child Processes</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9344064" starting-state="hide">
            <fo:bookmark-title>Adding or Deleting a Module</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9347392" starting-state="hide">
            <fo:bookmark-title>Starting or Terminating a Process</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9349632" starting-state="hide">
            <fo:bookmark-title>Adding or Removing an Application</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9353312" starting-state="hide">
            <fo:bookmark-title>Restarting an Application</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9358672" starting-state="hide">
            <fo:bookmark-title>Changing an Application Specification</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9361520" starting-state="hide">
            <fo:bookmark-title>Changing Application Configuration</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9364848" starting-state="hide">
            <fo:bookmark-title>Changing Included Applications</fo:bookmark-title>
            <fo:bookmark internal-destination="idp9378848" starting-state="hide">
              <fo:bookmark-title>Application Restart</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp9388752" starting-state="hide">
              <fo:bookmark-title>Supervisor Change</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9396304" starting-state="hide">
            <fo:bookmark-title>Changing Non-Erlang Code</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9408032" starting-state="hide">
            <fo:bookmark-title>Emulator Restart and Upgrade</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9418272" starting-state="hide">
            <fo:bookmark-title>Emulator Upgrade From Pre OTP R15</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp3532640" starting-state="hide">
        <fo:bookmark-title>OAM Principles</fo:bookmark-title>
        <fo:bookmark internal-destination="idp3710912" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3705392" starting-state="hide">
            <fo:bookmark-title>Terminology</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3766176" starting-state="hide">
            <fo:bookmark-title>Model</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1540336" starting-state="hide">
            <fo:bookmark-title>SNMP-Based OAM</fo:bookmark-title>
            <fo:bookmark internal-destination="idp2537008" starting-state="hide">
              <fo:bookmark-title>MIB Structure</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">Erlang/OTP System Documentation</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">Erlang/OTP System Documentation 9.0</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            Erlang/OTP System Documentation</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            Erlang/OTP System Documentation | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp428992" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      Installation Guide</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes how to install Erlang/OTP on UNIX and Windows.</fo:block>
  <fo:block id="idp581488" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  Installing the Binary Release</fo:marker>1.1  Installing the Binary Release</fo:block><fo:block id="idp577824" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Windows</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The system is delivered as a Windows Installer executable.
    Get it from http://www.erlang.org/download.html</fo:block>

    <fo:block id="idp561872" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Installing</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The installation procedure is automated. Double-click the
        <fo:inline font-family="monospace">.exe</fo:inline> file icon and follow the instructions.</fo:block>
    

    <fo:block id="idp559648" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Verifying</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start Erlang/OTP by double-clicking on the Erlang shortcut icon on the
          desktop.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Expect a command-line window to pop up with an output looking
	something like this:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  Erlang/OTP 17 [erts-6.0] [64-bit] [smp:2:2]

  Eshell V6.0  (abort with ^G)
  1&gt;</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Exit by entering the command <fo:inline font-family="monospace">halt()</fo:inline>.</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  2&gt; <fo:inline font-weight="bold">halt().</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This closes the Erlang/OTP shell.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    
  <fo:block id="idp616048" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  Building and Installing Erlang/OTP</fo:marker>1.2  Building and Installing Erlang/OTP</fo:block><fo:block id="idp615408" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      Introduction</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
This document describes how to build and install Erlang/OTP-20.
Erlang/OTP should be possible to build from source on any Unix/Linux system,
including OS X. You are advised to read the whole document
before attempting to build and install Erlang/OTP.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The source code can be downloaded from the official site of Erlang/OTP or GitHub.
</fo:block>
<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://www.erlang.org</fo:basic-link></fo:inline>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-weight="bold"><fo:basic-link external-destination="href">https://github.com/erlang/otp</fo:basic-link></fo:inline>

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block id="idp464272" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.2 
      Required Utilities</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
These are the tools you need in order to unpack and build Erlang/OTP.
</fo:block>

<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Please have a look at the <fo:inline font-style="italic">Known platform issues</fo:inline> chapter
 before you start.
</fo:block>
</fo:block>

<fo:block id="idp461744" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Unpacking</fo:block>



<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
GNU unzip, or a modern uncompress.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
A TAR program that understands the GNU TAR format for long filenames.

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>


<fo:block id="idp552592" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Building</fo:block>



<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
GNU <fo:inline font-family="monospace">make</fo:inline>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
Compiler -- GNU C Compiler, <fo:inline font-family="monospace">gcc</fo:inline> or the C compiler frontend for LLVM, <fo:inline font-family="monospace">clang</fo:inline>.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
Perl 5

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
GNU <fo:inline font-family="monospace">m4</fo:inline> -- If HiPE (native code) support is enabled. HiPE can be
disabled using <fo:inline font-family="monospace">--disable-hipe</fo:inline>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">ncurses</fo:inline>, <fo:inline font-family="monospace">termcap</fo:inline>, or <fo:inline font-family="monospace">termlib</fo:inline> -- The development headers and
libraries are needed, often known as <fo:inline font-family="monospace">ncurses-devel</fo:inline>. Use
<fo:inline font-family="monospace">--without-termcap</fo:inline> to build without any of these libraries. Note that
in this case only the old shell (without any line editing) can be used.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">sed</fo:inline> -- Stream Editor for basic text transformation.

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block id="idp440480" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Building in Git</fo:block>



<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
GNU <fo:inline font-family="monospace">autoconf</fo:inline> of at least version 2.59. Note that <fo:inline font-family="monospace">autoconf</fo:inline> is not
needed when building an unmodified version of the released source.

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>


<fo:block id="idp443760" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Building on OS X</fo:block>



<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
Xcode -- Download and install via the Mac App Store.
Read about <fo:inline font-style="italic">Building on a Mac</fo:inline> before proceeding.

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>




<fo:block id="idp444912" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Installing</fo:block>



<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
An <fo:inline font-family="monospace">install</fo:inline> program that can take multiple file names.

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>


<fo:block id="idp520128" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.3 
      Optional Utilities</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Some applications are automatically skipped if the dependencies aren't met.
Here is a list of utilities needed for those applications. You will
also find the utilities needed for building the documentation.
</fo:block>

<fo:block id="idm22576" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Building</fo:block>



<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OpenSSL -- The opensource toolkit for Secure Socket Layer
and Transport Layer Security.
Required for building the application <fo:inline font-family="monospace">crypto</fo:inline>.
Further, <fo:inline font-family="monospace">ssl</fo:inline> and <fo:inline font-family="monospace">ssh</fo:inline> require a working crypto application and
will also be skipped if OpenSSL is missing. The <fo:inline font-family="monospace">public_key</fo:inline>
application is available without <fo:inline font-family="monospace">crypto</fo:inline>, but the functionality
will be very limited.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The development package of OpenSSL including the header files are needed as well
as the binary command program <fo:inline font-family="monospace">openssl</fo:inline>. At least version 0.9.8 of OpenSSL is required.
Read more and download from <fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://www.openssl.org</fo:basic-link></fo:inline>.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Oracle Java SE JDK -- The Java Development Kit (Standard Edition).
Required for building the application <fo:inline font-family="monospace">jinterface</fo:inline> and parts of <fo:inline font-family="monospace">ic</fo:inline> and <fo:inline font-family="monospace">orber</fo:inline>.
At least version 1.6.0 of the JDK is required.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Download from <fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://www.oracle.com/technetwork/java/javase/downloads</fo:basic-link></fo:inline>.
We have also tested with IBM's JDK 1.6.0.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">X Windows -- Development headers and libraries are needed
to build the Erlang/OTP application <fo:inline font-family="monospace">gs</fo:inline> on Unix/Linux.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">flex</fo:inline> -- Headers and libraries are needed to build the flex
scanner for the <fo:inline font-family="monospace">megaco</fo:inline> application on Unix/Linux.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">wxWidgets -- Toolkit for GUI applications.
Required for building the <fo:inline font-family="monospace">wx</fo:inline> application. At least
version 3.0 of wxWidgets is required.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Download from <fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://sourceforge.net/projects/wxwindows/files/3.0.0/</fo:basic-link></fo:inline>
or get it from GitHub: <fo:inline font-weight="bold"><fo:basic-link external-destination="href">https://github.com/wxWidgets/wxWidgets</fo:basic-link></fo:inline>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Further instructions on wxWidgets, read <fo:inline font-style="italic">Building with wxErlang</fo:inline>.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>


<fo:block id="idp522832" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Building Documentation</fo:block>



<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">xsltproc</fo:inline> -- A command line XSLT processor.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A tool for applying XSLT stylesheets
to XML documents. Download xsltproc from
<fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://xmlsoft.org/XSLT/xsltproc2.html</fo:basic-link></fo:inline>.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">fop</fo:inline> -- Apache FOP print formatter (requires Java). Can be downloaded
from <fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://xmlgraphics.apache.org/fop</fo:basic-link></fo:inline>.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>


<fo:block id="idm10736" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.4 
      How to Build and Install Erlang/OTP</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The following instructions are for building <fo:inline font-weight="bold"><fo:basic-link external-destination="href">the released source tar ball</fo:basic-link></fo:inline>.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The variable <fo:inline font-family="monospace">$ERL_TOP</fo:inline> will be mentioned a lot of times. It refers to
the top directory in the source tree. More information about <fo:inline font-family="monospace">$ERL_TOP</fo:inline>
can be found in the <fo:inline font-style="italic">make and $ERL_TOP</fo:inline> section below. If you are
building in git you probably want to take a look at the <fo:inline font-style="italic">Building in Git</fo:inline>
section below before proceeding.
</fo:block>

<fo:block id="idp499152" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Unpacking</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Start by unpacking the Erlang/OTP distribution file with your GNU
compatible TAR program.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ tar -zxf otp_src_20.0.tar.gz    # Assuming bash/sh
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Now change directory into the base directory and set the <fo:inline font-family="monospace">$ERL_TOP</fo:inline> variable.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd otp_src_20.0
$ export ERL_TOP=`pwd`    # Assuming bash/sh
</fo:block>


<fo:block id="idp304048" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Configuring</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Run the following commands to configure the build:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./configure [ options ]
</fo:block>
<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you are building Erlang/OTP from git you will need to run <fo:inline font-family="monospace">./otp_build autoconf</fo:inline> to generate
 the configure scripts.
</fo:block>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
By default, Erlang/OTP release will be installed in <fo:inline font-family="monospace">/usr/local/{bin,lib/erlang}</fo:inline>.
If you for instance don't have the permission to install in the standard location,
 you can install Erlang/OTP somewhere else. For example, to install in
<fo:inline font-family="monospace">/opt/erlang/20.0/{bin,lib/erlang}</fo:inline>, use the <fo:inline font-family="monospace">--prefix=/opt/erlang/20.0</fo:inline> option.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
On some platforms Perl may behave strangely if certain locales are
set. If you get errors when building, try setting the LANG variable:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ export LANG=C   # Assuming bash/sh
</fo:block>


<fo:block id="idp310592" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Building</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Build the Erlang/OTP release.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ make
</fo:block>


<fo:block id="idp312928" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Testing</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Before installation you should test whether your build is working properly
by running our smoke test. The smoke test is a subset of the complete Erlang/OTP test suites.
First you will need to build and release the test suites.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ make release_tests
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
This creates an additional folder in <fo:inline font-family="monospace">$ERL_TOP/release</fo:inline> called <fo:inline font-family="monospace">tests</fo:inline>.
Now, it's time to start the smoke test.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd release/tests/test_server
$ $ERL_TOP/bin/erl -s ts install -s ts smoke_test batch -s init stop
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
To verify that everything is ok you should open <fo:inline font-family="monospace">$ERL_TOP/release/tests/test_server/index.html</fo:inline>
in your web browser and make sure that there are zero failed test cases.
</fo:block>

<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
On builds without <fo:inline font-family="monospace">crypto</fo:inline>, <fo:inline font-family="monospace">ssl</fo:inline> and <fo:inline font-family="monospace">ssh</fo:inline> there is a failed test case
 for undefined functions. Verify that the failed test case log only shows calls
 to skipped applications.
</fo:block>
</fo:block>



<fo:block id="idp625056" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Installing</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
You are now ready to install the Erlang/OTP release!
The following command will install the release on your system.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ make install
</fo:block>


<fo:block id="idp627520" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Running</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
You should now have a working release of Erlang/OTP!
Jump to <fo:inline font-style="italic">System Principles</fo:inline> for instructions on running Erlang/OTP.
</fo:block>



<fo:block id="idp629792" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">How to Build the Documentation</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Make sure you're in the top directory in the source tree.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd $ERL_TOP
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you have just built Erlang/OTP in the current source tree, you have
already ran <fo:inline font-family="monospace">configure</fo:inline> and do not need to do this again; otherwise, run
<fo:inline font-family="monospace">configure</fo:inline>.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./configure [Configure Args]
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
When building the documentation you need a full Erlang/OTP-20.0 system in
the <fo:inline font-family="monospace">$PATH</fo:inline>.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ export PATH=$ERL_TOP/bin:$PATH     # Assuming bash/sh
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
For the FOP print formatter, two steps must be taken:
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adding the location of your installation of <fo:inline font-family="monospace">fop</fo:inline> in <fo:inline font-family="monospace">$FOP_HOME</fo:inline>.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ export FOP_HOME=/path/to/fop/dir # Assuming bash/sh
</fo:block>
</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adding the <fo:inline font-family="monospace">fop</fo:inline> script (in <fo:inline font-family="monospace">$FOP_HOME</fo:inline>) to your <fo:inline font-family="monospace">$PATH</fo:inline>, either by adding <fo:inline font-family="monospace">$FOP_HOME</fo:inline> to <fo:inline font-family="monospace">$PATH</fo:inline>, or by copying the <fo:inline font-family="monospace">fop</fo:inline> script to a directory already in your <fo:inline font-family="monospace">$PATH</fo:inline>.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Build the documentation.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ make docs
</fo:block>
<fo:block id="idp572256" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Build Issues</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
We have sometimes experienced problems with Oracle's <fo:inline font-family="monospace">java</fo:inline> running out of
memory when running <fo:inline font-family="monospace">fop</fo:inline>. Increasing the amount of memory available
as follows has in our case solved the problem.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ export FOP_OPTS="-Xmx&lt;Installed amount of RAM in MB&gt;m"
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
More information can be found at
</fo:block>
<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://xmlgraphics.apache.org/fop/0.95/running.html#memory</fo:basic-link></fo:inline>.

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>




<fo:block id="idp577344" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">How to Install the Documentation</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The documentation can be installed either using the <fo:inline font-family="monospace">install-docs</fo:inline> target,
or using the <fo:inline font-family="monospace">release_docs</fo:inline> target.
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you have installed Erlang/OTP using the <fo:inline font-family="monospace">install</fo:inline> target, install
the documentation using the <fo:inline font-family="monospace">install-docs</fo:inline> target. Install locations
determined by <fo:inline font-family="monospace">configure</fo:inline> will be used. <fo:inline font-family="monospace">$DESTDIR</fo:inline> can be used the
same way as when doing <fo:inline font-family="monospace">make install</fo:inline>.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ make install-docs
</fo:block>
</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you have installed Erlang/OTP using the <fo:inline font-family="monospace">release</fo:inline> target, install
the documentation using the <fo:inline font-family="monospace">release_docs</fo:inline> target. You typically want
to use the same <fo:inline font-family="monospace">RELEASE_ROOT</fo:inline> as when invoking <fo:inline font-family="monospace">make release</fo:inline>.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ make release_docs RELEASE_ROOT=&lt;release dir&gt;
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>


<fo:block id="idp600896" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Accessing the Documentation</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
After installation you can access the documentation by
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reading man pages. Make sure that <fo:inline font-family="monospace">erl</fo:inline> is referring to the
installed version. For example <fo:inline font-family="monospace">/usr/local/bin/erl</fo:inline>.
Try viewing at the man page for Mnesia
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ erl -man mnesia
</fo:block>
</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Browsing the html pages by loading the page <fo:inline font-family="monospace">/usr/local/lib/erlang/doc/erlang/index.html</fo:inline>
or <fo:inline font-family="monospace">&lt;BaseDir&gt;/lib/erlang/doc/erlang/index.html</fo:inline> if the prefix option has been used.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>


<fo:block id="idp606992" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">How to Install the Pre-formatted Documentation</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Pre-formatted <fo:inline font-weight="bold"><fo:basic-link external-destination="href">html documentation</fo:basic-link></fo:inline> and <fo:inline font-weight="bold"><fo:basic-link external-destination="href">man pages</fo:basic-link></fo:inline> can be downloaded from
</fo:block>
<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://www.erlang.org/download.html</fo:basic-link></fo:inline>.

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Extract the html archive in the installation directory.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd &lt;ReleaseDir&gt;
$ tar -zxf otp_html_20.0.tar.gz
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
For <fo:inline font-family="monospace">erl -man &lt;page&gt;</fo:inline> to work the Unix manual pages have to be
installed in the same way, i.e.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd &lt;ReleaseDir&gt;
$ tar -zxf otp_man_20.0.tar.gz
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Where <fo:inline font-family="monospace">&lt;ReleaseDir&gt;</fo:inline> is
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">&lt;PrefixDir&gt;/lib/erlang</fo:inline> if you have installed Erlang/OTP using
<fo:inline font-family="monospace">make install</fo:inline>.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">$DESTDIR&lt;PrefixDir&gt;/lib/erlang</fo:inline> if you have installed Erlang/OTP
using <fo:inline font-family="monospace">make install DESTDIR=&lt;TmpInstallDir&gt;</fo:inline>.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">RELEASE_ROOT</fo:inline> if you have installed using
<fo:inline font-family="monospace">make release RELEASE_ROOT=&lt;ReleaseDir&gt;</fo:inline>.

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>


<fo:block id="idp687936" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.5 
      Advanced configuration and build of Erlang/OTP</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you want to tailor your Erlang/OTP build and installation, please read
on for detailed information about the individual steps.
</fo:block>

<fo:block id="idp689616" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">make and $ERL_TOP</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
All the makefiles in the entire directory tree use the environment
variable <fo:inline font-family="monospace">ERL_TOP</fo:inline> to find the absolute path of the installation. The
<fo:inline font-family="monospace">configure</fo:inline> script will figure this out and set it in the top level
Makefile (which, when building, it will pass on). However, when
developing it is sometimes convenient to be able to run make in a
subdirectory. To do this you must set the <fo:inline font-family="monospace">ERL_TOP</fo:inline> variable
before you run make.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
For example, assume your GNU make program is called <fo:inline font-family="monospace">make</fo:inline> and you
want to rebuild the application <fo:inline font-family="monospace">STDLIB</fo:inline>, then you could do:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd lib/stdlib; env ERL_TOP=&lt;Dir&gt; make
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
where <fo:inline font-family="monospace">&lt;Dir&gt;</fo:inline> would be what you find <fo:inline font-family="monospace">ERL_TOP</fo:inline> is set to in the top level
Makefile.
</fo:block>



<fo:block id="idp696112" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">otp_build vs configure/make</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Building Erlang/OTP can be done either by using the <fo:inline font-family="monospace">$ERL_TOP/otp_build</fo:inline>
script, or by invoking <fo:inline font-family="monospace">$ERL_TOP/configure</fo:inline> and <fo:inline font-family="monospace">make</fo:inline> directly. Building using
<fo:inline font-family="monospace">otp_build</fo:inline> is easier since it involves fewer steps, but the <fo:inline font-family="monospace">otp_build</fo:inline> build
procedure is not as flexible as the <fo:inline font-family="monospace">configure</fo:inline>/<fo:inline font-family="monospace">make</fo:inline> build procedure. The binary
releases for Windows that we deliver are built using <fo:inline font-family="monospace">otp_build</fo:inline>.
</fo:block>



<fo:block id="idp701376" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Configuring</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The configure script is created by the GNU autoconf utility, which
checks for system specific features and then creates a number of makefiles.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The configure script allows you to customize a number of parameters;
type <fo:inline font-family="monospace">./configure --help</fo:inline> or <fo:inline font-family="monospace">./configure --help=recursive</fo:inline> for details.
<fo:inline font-family="monospace">./configure --help=recursive</fo:inline> will give help for all <fo:inline font-family="monospace">configure</fo:inline> scripts in
all applications.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
One of the things you can specify is where Erlang/OTP should be installed. By
default Erlang/OTP will be installed in <fo:inline font-family="monospace">/usr/local/{bin,lib/erlang}</fo:inline>.
To keep the same structure but install in a different place, <fo:inline font-family="monospace">&lt;Dir&gt;</fo:inline> say,
use the <fo:inline font-family="monospace">--prefix</fo:inline> argument like this: <fo:inline font-family="monospace">./configure --prefix=&lt;Dir&gt;</fo:inline>.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Some of the available <fo:inline font-family="monospace">configure</fo:inline> options are:
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--prefix=PATH</fo:inline> - Specify installation prefix.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--enable-plain-emulator</fo:inline> - Build a threaded emulator that only
uses one scheduler. This emulator type is deprecated and will be
removed in a future release.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--disable-threads</fo:inline> - Build a non-threaded emulator. This emulator type
is deprecated and will be
removed in a future release.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--{enable,disable}-kernel-poll</fo:inline> - Kernel poll support (enabled by
default if possible)

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--{enable,disable}-hipe</fo:inline> - HiPE support (enabled by default on supported
platforms)

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--{enable,disable}-fp-exceptions</fo:inline> - Floating point exceptions (an
optimization for floating point operations). The default differs
depending on operating system and hardware platform. Note that by
enabling this you might get a seemingly working system that sometimes
fail on floating point operations.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--enable-m64-build</fo:inline> - Build 64-bit binaries using the <fo:inline font-family="monospace">-m64</fo:inline> flag to
<fo:inline font-family="monospace">(g)cc</fo:inline>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--enable-m32-build</fo:inline> - Build 32-bit binaries using the <fo:inline font-family="monospace">-m32</fo:inline> flag to
<fo:inline font-family="monospace">(g)cc</fo:inline>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--with-assumed-cache-line-size=SIZE</fo:inline> - Set assumed cache-line size in
bytes. Default is 64. Valid values are powers of two between and
including 16 and 8192. The runtime system use this value in order to
try to avoid false sharing. A too large value wastes memory. A to
small value will increase the amount of false sharing.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--{with,without}-termcap</fo:inline> - termcap (without implies that only the old
Erlang shell can be used)

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--with-javac=JAVAC</fo:inline> - Specify Java compiler to use

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--{with,without}-javac</fo:inline> - Java compiler (without implies that the
<fo:inline font-family="monospace">jinterface</fo:inline> application won't be built)

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--{enable,disable}-dynamic-ssl-lib</fo:inline> - Dynamic OpenSSL libraries

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--{enable,disable}-builtin-zlib</fo:inline> - Use the built-in source for zlib.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--{with,without}-ssl</fo:inline> - OpenSSL (without implies that the <fo:inline font-family="monospace">crypto</fo:inline>,
<fo:inline font-family="monospace">ssh</fo:inline>, and <fo:inline font-family="monospace">ssl</fo:inline> won't be built)

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--with-ssl=PATH</fo:inline> - Specify location of OpenSSL include and lib

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--with-ssl-incl=PATH</fo:inline> - Location of OpenSSL <fo:inline font-family="monospace">include</fo:inline> directory,
if different than specified by <fo:inline font-family="monospace">--with-ssl=PATH</fo:inline>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--with-ssl-rpath=yes|no|PATHS</fo:inline> - Runtime library path for OpenSSL.
Default is <fo:inline font-family="monospace">yes</fo:inline>, which equates to a number of standard locations. If
<fo:inline font-family="monospace">no</fo:inline>, then no runtime library paths will be used. Anything else should be
a comma separated list of paths.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--with-libatomic_ops=PATH</fo:inline> - Use the <fo:inline font-family="monospace">libatomic_ops</fo:inline> library for atomic
memory accesses. If <fo:inline font-family="monospace">configure</fo:inline> should inform you about no native atomic
implementation available, you typically want to try using the
<fo:inline font-family="monospace">libatomic_ops</fo:inline> library. It can be downloaded from
<fo:inline font-weight="bold"><fo:basic-link external-destination="href">https://github.com/ivmai/libatomic_ops/</fo:basic-link></fo:inline>.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--disable-smp-require-native-atomics</fo:inline> - By default <fo:inline font-family="monospace">configure</fo:inline> will
fail if an SMP runtime system is about to be built, and no implementation
for native atomic memory accesses can be found. If this happens, you are
encouraged to find a native atomic implementation that can be used, e.g.,
using <fo:inline font-family="monospace">libatomic_ops</fo:inline>, but by passing <fo:inline font-family="monospace">--disable-smp-require-native-atomics</fo:inline>
you can build using a fallback implementation based on mutexes or spinlocks.
Performance of the SMP runtime system will however suffer immensely without
an implementation for native atomic memory accesses.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--enable-static-{nifs,drivers}</fo:inline> - To allow usage of nifs and drivers on OSs
that do not support dynamic linking of libraries it is possible to statically
link nifs and drivers with the main Erlang VM binary. This is done by passing
a comma separated list to the archives that you want to statically link. e.g.
<fo:inline font-family="monospace">--enable-static-nifs=/home/$USER/my_nif.a</fo:inline>. The path has to be absolute and the
name of the archive has to be the same as the module, i.e. <fo:inline font-family="monospace">my_nif</fo:inline> in the
example above. This is also true for drivers, but then it is the driver name
that has to be the same as the filename. You also have to define
<fo:inline font-family="monospace">STATIC_ERLANG_{NIF,DRIVER}</fo:inline> when compiling the .o files for the nif/driver.
If your nif/driver depends on some other dynamic library, you now have to link
that to the Erlang VM binary. This is easily achieved by passing <fo:inline font-family="monospace">LIBS=-llibname</fo:inline>
to configure.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--without-$app</fo:inline> - By default all applications in Erlang/OTP will be included
in a release. If this is not wanted it is possible to specify that Erlang/OTP
should be compiled without one or more applications, i.e. <fo:inline font-family="monospace">--without-wx</fo:inline>. There is
no automatic dependency handling between applications. If you disable
an application that another application depends on, you also have to disable the
dependant application.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--enable-gettimeofday-as-os-system-time</fo:inline> - Force usage of <fo:inline font-family="monospace">gettimeofday()</fo:inline> for
OS system time.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--enable-prefer-elapsed-monotonic-time-during-suspend</fo:inline> - Prefer an OS monotonic
time source with elapsed time during suspend.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--disable-prefer-elapsed-monotonic-time-during-suspend</fo:inline> - Do not prefer an OS
monotonic time source with elapsed time during suspend.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--with-clock-resolution=high|low</fo:inline> - Try to find clock sources for OS system
time, and OS monotonic time with higher or lower resolution than chosen by
default. Note that both alternatives may have a negative impact on the performance
and scalability compared to the default clock sources chosen.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--disable-saved-compile-time</fo:inline> - Disable saving of compile date and time
in the emulator binary.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">--enable-dirty-schedulers</fo:inline> - Enable the <fo:inline font-weight="bold">experimental</fo:inline> dirty schedulers
functionality. Note that the dirty schedulers functionality is experimental,
and <fo:inline font-weight="bold">not supported</fo:inline>. This functionality <fo:inline font-weight="bold">will</fo:inline> be subject to backward
incompatible changes. Note that you should <fo:inline font-weight="bold">not</fo:inline> enable the dirty scheduler
functionality on production systems. It is only provided for testing.

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you or your system has special requirements please read the <fo:inline font-family="monospace">Makefile</fo:inline> for
additional configuration information.
</fo:block>

<fo:block id="idp761200" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Atomic Memory Operations and the VM</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The VM with SMP support makes quite a heavy use of atomic memory operations.
An implementation providing native atomic memory operations is therefore very
important when building Erlang/OTP. By default the VM will refuse to build
if native atomic memory operations are not available.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Erlang/OTP itself provides implementations of native atomic memory operations
that can be used when compiling with a <fo:inline font-family="monospace">gcc</fo:inline> compatible compiler for 32/64-bit
x86, 32/64-bit SPARC V9, 32-bit PowerPC, or 32-bit Tile. When compiling with
a <fo:inline font-family="monospace">gcc</fo:inline> compatible compiler for other architectures, the VM may be able to make
use of native atomic operations using the <fo:inline font-family="monospace">__atomic_*</fo:inline> builtins (may be
available when using a <fo:inline font-family="monospace">gcc</fo:inline> of at least version 4.7) and/or using the
<fo:inline font-family="monospace">__sync_*</fo:inline> builtins (may be available when using a <fo:inline font-family="monospace">gcc</fo:inline> of at least version
4.1). If only the <fo:inline font-family="monospace">gcc</fo:inline>'s <fo:inline font-family="monospace">__sync_*</fo:inline> builtins are available, the performance
will suffer. Such a configuration should only be used as a last resort. When
compiling on Windows using a MicroSoft Visual C++ compiler native atomic
memory operations are provided by Windows APIs.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Native atomic implementation in the order preferred:
</fo:block>
<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
The implementation provided by Erlang/OTP.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
The API provided by Windows.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
The implementation based on the <fo:inline font-family="monospace">gcc</fo:inline> <fo:inline font-family="monospace">__atomic_*</fo:inline> builtins.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
If none of the above are available for your architecture/compiler, you
are recommended to build and install <fo:inline font-weight="bold"><fo:basic-link external-destination="href">libatomic_ops</fo:basic-link></fo:inline> before building
Erlang/OTP. The <fo:inline font-family="monospace">libatomic_ops</fo:inline> library provides native atomic memory
operations for a variety of architectures and compilers. When building
Erlang/OTP you need to inform the build system of where the
<fo:inline font-family="monospace">libatomic_ops</fo:inline> library is installed using the
<fo:inline font-family="monospace">--with-libatomic_ops=PATH</fo:inline> <fo:inline font-family="monospace">configure</fo:inline> switch.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
As a last resort, the implementation solely based on the <fo:inline font-family="monospace">gcc</fo:inline>
<fo:inline font-family="monospace">__sync_*</fo:inline> builtins. This will however cause lots of expensive and
unnecessary memory barrier instructions to be issued. That is,
performance will suffer. The <fo:inline font-family="monospace">configure</fo:inline> script will warn at the end
of its execution if it cannot find any other alternative than this.

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>




<fo:block id="idp811552" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Building</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Building Erlang/OTP on a relatively fast computer takes approximately
5 minutes. To speed it up, you can utilize parallel make with the <fo:inline font-family="monospace">-j&lt;num_jobs&gt;</fo:inline> option.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ export MAKEFLAGS=-j8    # Assuming bash/sh
$ make
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you've upgraded the source with a patch you may need to clean up from previous
builds before the new build.
Make sure to read the <fo:inline font-style="italic">Pre-built Source Release</fo:inline> section below before doing a <fo:inline font-family="monospace">make clean</fo:inline>.
</fo:block>

<fo:block id="idp815920" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Within Git</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
When building in a Git working directory you also have to have a GNU <fo:inline font-family="monospace">autoconf</fo:inline>
of at least version 2.59 on your system, because you need to generate the
<fo:inline font-family="monospace">configure</fo:inline> scripts before you can start building.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The <fo:inline font-family="monospace">configure</fo:inline> scripts are generated by invoking <fo:inline font-family="monospace">./otp_build autoconf</fo:inline> in
the <fo:inline font-family="monospace">$ERL_TOP</fo:inline> directory. The <fo:inline font-family="monospace">configure</fo:inline> scripts also have to be regenerated
when a <fo:inline font-family="monospace">configure.in</fo:inline> or <fo:inline font-family="monospace">aclocal.m4</fo:inline> file has been modified. Note that when
checking out a branch a <fo:inline font-family="monospace">configure.in</fo:inline> or <fo:inline font-family="monospace">aclocal.m4</fo:inline> file may change
content, and you may therefore have to regenerate the <fo:inline font-family="monospace">configure</fo:inline> scripts
when checking out a branch. Regenerated <fo:inline font-family="monospace">configure</fo:inline> scripts imply that you
have to run <fo:inline font-family="monospace">configure</fo:inline> and build again.
</fo:block>

<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Running <fo:inline font-family="monospace">./otp_build autoconf</fo:inline> is <fo:inline font-weight="bold">not</fo:inline> needed when building
 an unmodified version of the released source.
</fo:block>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Other useful information can be found at our GitHub wiki:
</fo:block>
<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://wiki.github.com/erlang/otp</fo:basic-link></fo:inline>

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>


<fo:block id="idp827312" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">OS X (Darwin)</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Make sure that the command <fo:inline font-family="monospace">hostname</fo:inline> returns a valid fully qualified host
name (this is configured in <fo:inline font-family="monospace">/etc/hostconfig</fo:inline>). Otherwise you might experience
problems when running distributed systems.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you develop linked-in drivers (shared library) you need to link using
<fo:inline font-family="monospace">gcc</fo:inline> and the flags <fo:inline font-family="monospace">-bundle -flat_namespace -undefined suppress</fo:inline>. You also
include <fo:inline font-family="monospace">-fno-common</fo:inline> in <fo:inline font-family="monospace">CFLAGS</fo:inline> when compiling. Use <fo:inline font-family="monospace">.so</fo:inline> as the library
suffix.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you have Xcode 4.3, or later, you will also need to download
"Command Line Tools" via the Downloads preference pane in Xcode.
</fo:block>



<fo:block id="idp833120" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Building with wxErlang</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you want to build the <fo:inline font-family="monospace">wx</fo:inline> application, you will need to get wxWidgets-3.0
(<fo:inline font-family="monospace">wxWidgets-3.0.0.tar.bz2</fo:inline> from <fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://sourceforge.net/projects/wxwindows/files/3.0.0/</fo:basic-link></fo:inline>) or get it from github with bug fixes:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ git clone --branch WX_3_0_BRANCH git@github.com:wxWidgets/wxWidgets.git
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Be aware that the wxWidgets-3.0 is a new release of wxWidgets, it is not as
mature as the old releases and the OS X port still lags behind the other ports.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Configure and build wxWidgets (on Mavericks - 10.9):
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./configure --with-cocoa --prefix=/usr/local
or without support for old versions and with static libs
$ ./configure --with-cocoa --prefix=/usr/local --with-macosx-version-min=10.9 --disable-shared
$ make
$ sudo make install
$ export PATH=/usr/local/bin:$PATH
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Check that you got the correct wx-config
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ which wx-config &amp;&amp; wx-config --version-full
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Build Erlang/OTP
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ export PATH=/usr/local/bin:$PATH
$ cd $ERL_TOP
$ ./configure
$ make
$ sudo make install
</fo:block>


<fo:block id="idp1583808" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Pre-built Source Release</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The source release is delivered with a lot of platform independent
build results already pre-built. If you want to remove these pre-built
files, invoke <fo:inline font-family="monospace">./otp_build remove_prebuilt_files</fo:inline> from the <fo:inline font-family="monospace">$ERL_TOP</fo:inline>
directory. After you have done this, you can build exactly the same way
as before, but the build process will take a much longer time.
</fo:block>

<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Doing <fo:inline font-family="monospace">make clean</fo:inline> in an arbitrary directory of the source
 tree, may remove files needed for bootstrapping the build.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
 Doing <fo:inline font-family="monospace">./otp_build save_bootstrap</fo:inline> from the <fo:inline font-family="monospace">$ERL_TOP</fo:inline> directory before
 doing <fo:inline font-family="monospace">make clean</fo:inline> will ensure that it will be possible to build after
 doing <fo:inline font-family="monospace">make clean</fo:inline>. <fo:inline font-family="monospace">./otp_build save_bootstrap</fo:inline> will be invoked
 automatically when <fo:inline font-family="monospace">make</fo:inline> is invoked from <fo:inline font-family="monospace">$ERL_TOP</fo:inline> with either the
 <fo:inline font-family="monospace">clean</fo:inline> target, or the default target. It is also automatically invoked
 if <fo:inline font-family="monospace">./otp_build remove_prebuilt_files</fo:inline> is invoked.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
 If you need to verify the bootstrap beam files match the provided
 source files, use <fo:inline font-family="monospace">./otp_build update_primary</fo:inline> to create a new commit that
 contains differences, if any exist.
</fo:block>
</fo:block>



<fo:block id="idp1593552" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">How to Build a Debug Enabled Erlang RunTime System</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
After completing all the normal building steps described above a debug
enabled runtime system can be built. To do this you have to change
directory to <fo:inline font-family="monospace">$ERL_TOP/erts/emulator</fo:inline>.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
In this directory execute:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ make debug FLAVOR=$FLAVOR
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
where <fo:inline font-family="monospace">$FLAVOR</fo:inline> is either <fo:inline font-family="monospace">plain</fo:inline> or <fo:inline font-family="monospace">smp</fo:inline>. The flavor options will
produce a beam.debug and beam.smp.debug executable respectively. The
files are installed along side with the normal (opt) versions <fo:inline font-family="monospace">beam.smp</fo:inline>
and <fo:inline font-family="monospace">beam</fo:inline>.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
To start the debug enabled runtime system execute:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ $ERL_TOP/bin/cerl -debug
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The debug enabled runtime system features lock violation checking,
assert checking and various sanity checks to help a developer ensure
correctness. Some of these features can be enabled on a normal beam
using appropriate configure options.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
There are other types of runtime systems that can be built as well
using the similar steps just described.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ make $TYPE FLAVOR=$FLAVOR
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
where <fo:inline font-family="monospace">$TYPE</fo:inline> is <fo:inline font-family="monospace">opt</fo:inline>, <fo:inline font-family="monospace">gcov</fo:inline>, <fo:inline font-family="monospace">gprof</fo:inline>, <fo:inline font-family="monospace">debug</fo:inline>, <fo:inline font-family="monospace">valgrind</fo:inline>, or <fo:inline font-family="monospace">lcnt</fo:inline>.
These different beam types are useful for debugging and profiling
purposes.
</fo:block>





<fo:block id="idp1606384" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Installing</fo:block>



<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Staged install using <fo:inline font-weight="bold"><fo:basic-link external-destination="href">DESTDIR</fo:basic-link></fo:inline>. You can perform the install
phase in a temporary directory and later move the installation into
its correct location by use of the <fo:inline font-family="monospace">DESTDIR</fo:inline> variable:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ make DESTDIR=&lt;tmp install dir&gt; install
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The installation will be created in a location prefixed by <fo:inline font-family="monospace">$DESTDIR</fo:inline>.
It can, however, not be run from there. It needs to be moved into the
correct location before it can be run. If <fo:inline font-family="monospace">DESTDIR</fo:inline> have not been set
but <fo:inline font-family="monospace">INSTALL_PREFIX</fo:inline> has been set, <fo:inline font-family="monospace">DESTDIR</fo:inline> will be set to
<fo:inline font-family="monospace">INSTALL_PREFIX</fo:inline>. Note that <fo:inline font-family="monospace">INSTALL_PREFIX</fo:inline> in pre R13B04 was buggy
and behaved as <fo:inline font-family="monospace">EXTRA_PREFIX</fo:inline> (see below). There are lots of areas of
use for an installation procedure using <fo:inline font-family="monospace">DESTDIR</fo:inline>, e.g. when creating
a package, cross compiling, etc. Here is an example where the
installation should be located under <fo:inline font-family="monospace">/opt/local</fo:inline>:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./configure --prefix=/opt/local
$ make
$ make DESTDIR=/tmp/erlang-build install
$ cd /tmp/erlang-build/opt/local
$     # gnu-tar is used in this example
$ tar -zcf /home/me/my-erlang-build.tgz *
$ su -
Password: *****
$ cd /opt/local
$ tar -zxf /home/me/my-erlang-build.tgz
</fo:block>
</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Install using the <fo:inline font-family="monospace">release</fo:inline> target. Instead of doing <fo:inline font-family="monospace">make install</fo:inline> you
can create the installation in whatever directory you like using the
<fo:inline font-family="monospace">release</fo:inline> target and run the <fo:inline font-family="monospace">Install</fo:inline> script yourself. <fo:inline font-family="monospace">RELEASE_ROOT</fo:inline>
is used for specifying the directory where the installation should be
created. This is what by default ends up under <fo:inline font-family="monospace">/usr/local/lib/erlang</fo:inline>
if you do the install using <fo:inline font-family="monospace">make install</fo:inline>. All installation paths
provided in the <fo:inline font-family="monospace">configure</fo:inline> phase are ignored, as well as <fo:inline font-family="monospace">DESTDIR</fo:inline>,
and <fo:inline font-family="monospace">INSTALL_PREFIX</fo:inline>. If you want links from a specific <fo:inline font-family="monospace">bin</fo:inline> directory
to the installation you have to set those up yourself. An example where
Erlang/OTP should be located at <fo:inline font-family="monospace">/home/me/OTP</fo:inline>:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./configure
$ make
$ make RELEASE_ROOT=/home/me/OTP release
$ cd /home/me/OTP
$ ./Install -minimal /home/me/OTP
$ mkdir -p /home/me/bin
$ cd /home/me/bin
$ ln -s /home/me/OTP/bin/erl erl
$ ln -s /home/me/OTP/bin/erlc erlc
$ ln -s /home/me/OTP/bin/escript escript
...
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Install</fo:inline> script should currently be invoked as follows in the
directory where it resides (the top directory):
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./Install [-cross] [-minimal|-sasl] &lt;ERL_ROOT&gt;
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where:
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">-minimal</fo:inline> Creates an installation that starts up a minimal amount
of applications, i.e., only <fo:inline font-family="monospace">kernel</fo:inline> and <fo:inline font-family="monospace">stdlib</fo:inline> are started. The
minimal system is normally enough, and is what <fo:inline font-family="monospace">make install</fo:inline> uses.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">-sasl</fo:inline> Creates an installation that also starts up the <fo:inline font-family="monospace">sasl</fo:inline>
application.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">-cross</fo:inline> For cross compilation. Informs the install script that it
is run on the build machine.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">&lt;ERL_ROOT&gt;</fo:inline> - The absolute path to the Erlang installation to use
at run time. This is often the same as the current working directory,
but does not have to be. It can follow any other path through the
file system to the same directory.


</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If neither <fo:inline font-family="monospace">-minimal</fo:inline>, nor <fo:inline font-family="monospace">-sasl</fo:inline> is passed as argument you will be
prompted.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Test install using <fo:inline font-family="monospace">EXTRA_PREFIX</fo:inline>. The content of the <fo:inline font-family="monospace">EXTRA_PREFIX</fo:inline>
variable will prefix all installation paths when doing <fo:inline font-family="monospace">make install</fo:inline>.
Note that <fo:inline font-family="monospace">EXTRA_PREFIX</fo:inline> is similar to <fo:inline font-family="monospace">DESTDIR</fo:inline>, but it does <fo:inline font-weight="bold">not</fo:inline> have
the same effect as <fo:inline font-family="monospace">DESTDIR</fo:inline>. The installation can and have to be run
from the location specified by <fo:inline font-family="monospace">EXTRA_PREFIX</fo:inline>. That is, it can be useful
if you want to try the system out, running test suites, etc, before doing
the real install without <fo:inline font-family="monospace">EXTRA_PREFIX</fo:inline>.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block id="idp1637152" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Symbolic Links in --bindir</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
When doing <fo:inline font-family="monospace">make install</fo:inline> and the default installation prefix is used,
relative symbolic links will be created from <fo:inline font-family="monospace">/usr/local/bin</fo:inline> to all public
Erlang/OTP executables in <fo:inline font-family="monospace">/usr/local/lib/erlang/bin</fo:inline>. The installation phase
will try to create relative symbolic links as long as <fo:inline font-family="monospace">--bindir</fo:inline> and the
Erlang bin directory, located under <fo:inline font-family="monospace">--libdir</fo:inline>, both have <fo:inline font-family="monospace">--exec-prefix</fo:inline> as
prefix. Where <fo:inline font-family="monospace">--exec-prefix</fo:inline> defaults to <fo:inline font-family="monospace">--prefix</fo:inline>. <fo:inline font-family="monospace">--prefix</fo:inline>,
<fo:inline font-family="monospace">--exec-prefix</fo:inline>, <fo:inline font-family="monospace">--bindir</fo:inline>, and <fo:inline font-family="monospace">--libdir</fo:inline> are all arguments that can be
passed to <fo:inline font-family="monospace">configure</fo:inline>. One can force relative, or absolute links by passing
<fo:inline font-family="monospace">BINDIR_SYMLINKS=relative|absolute</fo:inline> as arguments to <fo:inline font-family="monospace">make</fo:inline> during the install
phase. Note that such a request might cause a failure if the request cannot
be satisfied.
</fo:block>





<fo:block id="idp1645744" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Running</fo:block>



<fo:block id="idp1646896" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Using HiPE</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
HiPE supports the following system configurations:
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">x86: All 32-bit and 64-bit mode processors should work.
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Linux: Fedora Core is supported. Both 32-bit and 64-bit modes are
supported.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">NPTL glibc is strongly preferred, or a LinuxThreads
glibc configured for "floating stacks". Old non-floating
stacks glibcs have a fundamental problem that makes HiPE
support and threads support mutually exclusive.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Solaris: Solaris 10 (32-bit and 64-bit) and 9 (32-bit) are supported.
The build requires a version of the GNU C compiler (gcc)
that has been configured to use the GNU assembler (gas).
Sun's x86 assembler is emphatically <fo:inline font-weight="bold">not</fo:inline> supported.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">FreeBSD: FreeBSD 6.1 and 6.2 in 32-bit and 64-bit modes should work.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OS X/Darwin: Darwin 9.8.0 in 32-bit mode should work.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">PowerPC: All 32-bit 6xx/7xx(G3)/74xx(G4) processors should work. 32-bit
mode on 970 (G5) and POWER5 processors should work.
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
Linux (Yellow Dog) and OS X 10.4 are supported.


</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">SPARC: All UltraSPARC processors running 32-bit user code should work.
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Solaris 9 is supported. The build requires a <fo:inline font-family="monospace">gcc</fo:inline> that has been
configured to use Sun's assembler and linker. Using the GNU assembler
but Sun's linker has been known to cause problems.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Linux (Aurora) is supported.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ARM: ARMv5TE (i.e. XScale) processors should work. Both big-endian and
little-endian modes are supported.
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
Linux is supported.

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
HiPE is automatically enabled on the following systems:
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
x86 in 32-bit mode: Linux, Solaris, FreeBSD

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
x86 in 64-bit mode: Linux, Solaris, FreeBSD

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
PowerPC: Linux, Mac OSX

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
SPARC: Linux

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
ARM: Linux

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
On other supported systems, see <fo:inline font-style="italic">Advanced Configure</fo:inline> on how to enable HiPE.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you are running on a platform supporting HiPE and if you have not disabled
HiPE, you can compile a module into native code like this from the Erlang
shell:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; c(Module, native).
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
or
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; c(Module, [native|OtherOptions]).
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Using the erlc program, write like this
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ erlc +native Module.erl
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The native code will be placed into the beam file and automatically loaded
when the beam file is loaded.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
To add hipe options, write like this from the Erlang shell:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; c(Module, [native,{hipe,HipeOptions}|MoreOptions]).
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Use <fo:inline font-family="monospace">hipe:help_options/0</fo:inline> to print out the available options.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; hipe:help_options().
</fo:block>




<fo:block id="idp1662448" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.3  Cross Compiling Erlang/OTP</fo:marker>1.3  Cross Compiling Erlang/OTP</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Table of Contents</fo:inline></fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">Introduction</fo:inline>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">otp_build Versus configure/make</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">Cross Configuration</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">What can be Cross Compiled?</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">Compatibility</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">Patches</fo:inline>
    </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">Build and Install Procedure</fo:inline>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">Building With configure/make Directly</fo:inline>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:inline font-style="italic">Building a Bootstrap System</fo:inline>
        </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:inline font-style="italic">Cross Building the System</fo:inline>
        </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:inline font-style="italic">Installing</fo:inline>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:inline font-style="italic">Installing Using Paths Determined by configure</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:inline font-style="italic">Installing Manually</fo:inline>
        </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">Building With the otp_build Script</fo:inline>
    </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">Building and Installing the Documentation</fo:inline>
    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">Testing the cross compiled system</fo:inline>
    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">Currently Used Configuration Variables</fo:inline>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">Variables for otp_build Only</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">Cross Compiler and Other Tools</fo:inline>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:inline font-style="italic">Dynamic Erlang Driver Linking</fo:inline>
        </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:inline font-style="italic">Large File Support</fo:inline>
        </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:inline font-style="italic">Other Tools</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">Cross System Root Locations</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">Optional Feature, and Bug Tests</fo:inline>
    </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
  </fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block id="idp1694096" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.1 
      Introduction</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
This document describes how to cross compile Erlang/OTP-20. 
You are advised to read the whole document before attempting to cross
compile Erlang/OTP. However, before reading this document, you should read
the <fo:inline font-style="italic">$ERL_TOP/HOWTO/INSTALL.md</fo:inline> document which describes building and installing
Erlang/OTP in general. <fo:inline font-family="monospace">$ERL_TOP</fo:inline> is the top directory in the source tree.
</fo:block>

<fo:block id="idp1697344" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">otp_build Versus configure/make</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Building Erlang/OTP can be done either by using the <fo:inline font-family="monospace">$ERL_TOP/otp_build</fo:inline>
script, or by invoking <fo:inline font-family="monospace">$ERL_TOP/configure</fo:inline> and <fo:inline font-family="monospace">make</fo:inline> directly. Building using
<fo:inline font-family="monospace">otp_build</fo:inline> is easier since it involves fewer steps, but the <fo:inline font-family="monospace">otp_build</fo:inline> build
procedure is not as flexible as the <fo:inline font-family="monospace">configure</fo:inline>/<fo:inline font-family="monospace">make</fo:inline> build procedure. Note
that <fo:inline font-family="monospace">otp_build configure</fo:inline> will produce a default configuration that differs
from what <fo:inline font-family="monospace">configure</fo:inline> will produce by default. For example, currently
<fo:inline font-family="monospace">--disable-dynamic-ssl-lib</fo:inline> is added to the <fo:inline font-family="monospace">configure</fo:inline> command line arguments
unless <fo:inline font-family="monospace">--enable-dynamic-ssl-lib</fo:inline> has been explicitly passed. The binary
releases that we deliver are built using <fo:inline font-family="monospace">otp_build</fo:inline>.  The defaults used by
<fo:inline font-family="monospace">otp_build configure</fo:inline> may change at any time without prior notice.
</fo:block>



<fo:block id="idp1705936" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Cross Configuration</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The <fo:inline font-family="monospace">$ERL_TOP/xcomp/erl-xcomp.conf.template</fo:inline> file contains all available cross
configuration variables and can be used as a template when creating a cross
compilation configuration. All <fo:inline font-style="italic">cross configuration variables</fo:inline> are also
listed at the end of this document. For examples of working cross
configurations see the <fo:inline font-family="monospace">$ERL_TOP/xcomp/erl-xcomp-TileraMDE2.0-tilepro.conf</fo:inline>
file and the <fo:inline font-family="monospace">$ERL_TOP/xcomp/erl-xcomp-x86_64-saf-linux-gnu.conf</fo:inline> file. If the
default behavior of a variable is satisfactory, the variable does not need to
be set. However, the <fo:inline font-family="monospace">configure</fo:inline> script will issue a warning when a default
value is used. When a variable has been set, no warning will be issued.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
A cross configuration file can be passed to <fo:inline font-family="monospace">otp_build configure</fo:inline> using the
<fo:inline font-family="monospace">--xcomp-conf</fo:inline> command line argument. Note that <fo:inline font-family="monospace">configure</fo:inline> does not accept
this command line argument. When using the <fo:inline font-family="monospace">configure</fo:inline> script directly, pass
the configuration variables as arguments to <fo:inline font-family="monospace">configure</fo:inline> using a
<fo:inline font-family="monospace">&lt;VARIABLE&gt;=&lt;VALUE&gt;</fo:inline> syntax. Variables can also be passed as environment
variables to <fo:inline font-family="monospace">configure</fo:inline>. However, if you pass the configuration in the
environment, make sure to unset all of these environment variables before
invoking <fo:inline font-family="monospace">make</fo:inline>; otherwise, the environment variables might set make variables
in some applications, or parts of some applications, and you may end up with
an erroneously configured build. 
</fo:block>



<fo:block id="idp1715376" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">What can be Cross Compiled?</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
All Erlang/OTP applications except the <fo:inline font-family="monospace">wx</fo:inline> application can be cross compiled.
The build of the <fo:inline font-family="monospace">wx</fo:inline> driver will currently be automatically disabled when
cross compiling.
</fo:block>



<fo:block id="idp1718320" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Compatibility</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The build system, including cross compilation configuration variables used,
may be subject to non backward compatible changes without prior notice.
Current cross build system has been tested when cross compiling some Linux/GNU
systems, but has only been partly tested for more esoteric platforms. The
VxWorks example file is highly dependent on our environment and is here more
or less only for internal use.
</fo:block>



<fo:block id="idp1720624" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Patches</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Please submit any patches for cross compiling in a way consistent with this
system. All input is welcome as we have a very limited set of cross compiling
environments to test with. If a new configuration variable is needed, add it
to <fo:inline font-family="monospace">$ERL_TOP/xcomp/erl-xcomp.conf.template</fo:inline>, and use it in <fo:inline font-family="monospace">configure.in</fo:inline>.
Other files that might need to be updated are:
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">$ERL_TOP/xcomp/erl-xcomp-vars.sh</fo:inline>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">$ERL_TOP/erl-build-tool-vars.sh</fo:inline>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">$ERL_TOP/erts/aclocal.m4</fo:inline>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">$ERL_TOP/xcomp/README.md</fo:inline>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">$ERL_TOP/xcomp/erl-xcomp-*.conf</fo:inline>

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Note that this might be an incomplete list of files that need to be updated.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
General information on how to submit patches can be found at:
  <fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://wiki.github.com/erlang/otp/submitting-patches</fo:basic-link></fo:inline>
</fo:block>



<fo:block id="idp1730624" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.2 
      Build and Install Procedure</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you are building in Git, you want to read the <fo:inline font-style="italic">Building in Git</fo:inline> section
of <fo:inline font-style="italic">$ERL_TOP/HOWTO/INSTALL.md</fo:inline> before proceeding.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
We will first go through the <fo:inline font-family="monospace">configure</fo:inline>/<fo:inline font-family="monospace">make</fo:inline> build procedure which people
probably are most familiar with.
</fo:block>

<fo:block id="idp1735360" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Building With configure/make Directly</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (1)
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Change directory into the top directory of the Erlang/OTP source tree.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd $ERL_TOP
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
In order to compile Erlang code, a small Erlang bootstrap system has to be
built, or an Erlang/OTP system of the same release as the one being built
has to be provided in the <fo:inline font-family="monospace">$PATH</fo:inline>. The Erlang/OTP for the target system will
be built using this Erlang system, together with the cross compilation tools
provided.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you want to build using a compatible Erlang/OTP system in the <fo:inline font-family="monospace">$PATH</fo:inline>,
jump to (3).
</fo:block>

<fo:block id="idp1740544" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Building a Bootstrap System</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (2)
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./configure --enable-bootstrap-only
$ make
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The <fo:inline font-family="monospace">--enable-bootstrap-only</fo:inline> argument to <fo:inline font-family="monospace">configure</fo:inline> isn't strictly necessary,
but will speed things up. It will only run <fo:inline font-family="monospace">configure</fo:inline> in applications
necessary for the bootstrap, and will disable a lot of things not needed by
the bootstrap system. If you run <fo:inline font-family="monospace">configure</fo:inline> without <fo:inline font-family="monospace">--enable-boostrap-only</fo:inline>
you also have to run make as <fo:inline font-family="monospace">make bootstrap</fo:inline>; otherwise, the whole system will
be built.
</fo:block>



<fo:block id="idp1746640" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Cross Building the System</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (3)
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./configure --host=&lt;HOST&gt; --build=&lt;BUILD&gt; [Other Config Args]
$ make
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
<fo:inline font-family="monospace">&lt;HOST&gt;</fo:inline> is the host/target system that you build for. It does not have to be
a full <fo:inline font-family="monospace">CPU-VENDOR-OS</fo:inline> triplet, but can be. The full <fo:inline font-family="monospace">CPU-VENDOR-OS</fo:inline> triplet
will be created by executing <fo:inline font-family="monospace">$ERL_TOP/erts/autoconf/config.sub &lt;HOST&gt;</fo:inline>. If
<fo:inline font-family="monospace">config.sub</fo:inline> fails, you need to be more specific.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
<fo:inline font-family="monospace">&lt;BUILD&gt;</fo:inline> should equal the <fo:inline font-family="monospace">CPU-VENDOR-OS</fo:inline> triplet of the system that you
build on. If you execute <fo:inline font-family="monospace">$ERL_TOP/erts/autoconf/config.guess</fo:inline>, it will in
most cases print the triplet you want to use for this.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Pass the cross compilation variables as command line arguments to <fo:inline font-family="monospace">configure</fo:inline>
using a <fo:inline font-family="monospace">&lt;VARIABLE&gt;=&lt;VALUE&gt;</fo:inline> syntax.
</fo:block>

<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
You can <fo:inline font-weight="bold">not</fo:inline> pass a configuration file using the <fo:inline font-family="monospace">--xcomp-conf</fo:inline>
 argument when you invoke <fo:inline font-family="monospace">configure</fo:inline> directly. The <fo:inline font-family="monospace">--xcomp-conf</fo:inline> argument
 can only be passed to <fo:inline font-family="monospace">otp_build configure</fo:inline>.
</fo:block>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
<fo:inline font-family="monospace">make</fo:inline> will verify that the Erlang/OTP system used when building is of the
same release as the system being built, and will fail if this is not the case.
It is possible, however not recommended, to force the cross compilation even
though the wrong Erlang/OTP system is used. This by invoking <fo:inline font-family="monospace">make</fo:inline> like this:
<fo:inline font-family="monospace">make ERL_XCOMP_FORCE_DIFFERENT_OTP=yes</fo:inline>.
</fo:block>

<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Invoking <fo:inline font-family="monospace">make ERL_XCOMP_FORCE_DIFFERENT_OTP=yes</fo:inline> might fail,
 silently produce suboptimal code, or silently produce erroneous code.
</fo:block>
</fo:block>



<fo:block id="idp1762224" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Installing</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
You can either install using the installation paths determined by <fo:inline font-family="monospace">configure</fo:inline>
(4), or install manually using (5).
</fo:block>

<fo:block id="idp1764592" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Installing Using Paths Determined by configure</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (4)
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ make install DESTDIR=&lt;TEMPORARY_PREFIX&gt;
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
<fo:inline font-family="monospace">make install</fo:inline> will install at a location specified when doing <fo:inline font-family="monospace">configure</fo:inline>.
<fo:inline font-family="monospace">configure</fo:inline> arguments specifying where the installation should reside are for
example: <fo:inline font-family="monospace">--prefix</fo:inline>, <fo:inline font-family="monospace">--exec-prefix</fo:inline>, <fo:inline font-family="monospace">--libdir</fo:inline>, <fo:inline font-family="monospace">--bindir</fo:inline>, etc. By default
it will install under <fo:inline font-family="monospace">/usr/local</fo:inline>. You typically do not want to install your
cross build under <fo:inline font-family="monospace">/usr/local</fo:inline> on your build machine. Using <fo:inline font-weight="bold"><fo:basic-link external-destination="href">DESTDIR</fo:basic-link></fo:inline>
will cause the installation paths to be prefixed by <fo:inline font-family="monospace">$DESTDIR</fo:inline>. This makes it
possible to install and package the installation on the build machine without
having to place the installation in the same directory on the build machine as
it should be executed from on the target machine.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
When <fo:inline font-family="monospace">make install</fo:inline> has finished, change directory into <fo:inline font-family="monospace">$DESTDIR</fo:inline>, package
the system, move it to the target machine, and unpack it. Note that the
installation will only be working on the target machine at the location
determined by <fo:inline font-family="monospace">configure</fo:inline>.
</fo:block>



<fo:block id="idp1775456" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Installing Manually</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (5)
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ make release RELEASE_ROOT=&lt;RELEASE_DIR&gt;
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
<fo:inline font-family="monospace">make release</fo:inline> will copy what you have built for the target machine to
<fo:inline font-family="monospace">&lt;RELEASE_DIR&gt;</fo:inline>. The <fo:inline font-family="monospace">Install</fo:inline> script will not be run. The content of
<fo:inline font-family="monospace">&lt;RELEASE_DIR&gt;</fo:inline> is what by default ends up in <fo:inline font-family="monospace">/usr/local/lib/erlang</fo:inline>.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The <fo:inline font-family="monospace">Install</fo:inline> script used when installing Erlang/OTP requires common Unix
tools such as <fo:inline font-family="monospace">sed</fo:inline> to be present in your <fo:inline font-family="monospace">$PATH</fo:inline>. If your target system
does not have such tools, you need to run the <fo:inline font-family="monospace">Install</fo:inline> script on your
build machine before packaging Erlang/OTP. The <fo:inline font-family="monospace">Install</fo:inline> script should
currently be invoked as follows in the directory where it resides
(the top directory):
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./Install [-cross] [-minimal|-sasl] &lt;ERL_ROOT&gt;
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
where:
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">-minimal</fo:inline> Creates an installation that starts up a minimal amount
of applications, i.e., only <fo:inline font-family="monospace">kernel</fo:inline> and <fo:inline font-family="monospace">stdlib</fo:inline> are started. The
minimal system is normally enough, and is what <fo:inline font-family="monospace">make install</fo:inline> uses.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">-sasl</fo:inline> Creates an installation that also starts up the <fo:inline font-family="monospace">sasl</fo:inline>
application.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">-cross</fo:inline> For cross compilation. Informs the install script that it
is run on the build machine.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">&lt;ERL_ROOT&gt;</fo:inline> - The absolute path to the Erlang installation to use
at run time. This is often the same as the current working directory,
but does not have to be. It can follow any other path through the file
system to the same directory.

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If neither <fo:inline font-family="monospace">-minimal</fo:inline>, nor <fo:inline font-family="monospace">-sasl</fo:inline> is passed as argument you will be
prompted.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
You can now either do:
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (6)
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decide where the installation should be located on the target machine,
run the <fo:inline font-family="monospace">Install</fo:inline> script on the build machine, and package the installed
installation. The installation just need to be unpacked at the right
location on the target machine:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd &lt;RELEASE_DIR&gt;
$ ./Install -cross [-minimal|-sasl] &lt;ABSOLUTE_INSTALL_DIR_ON_TARGET&gt;
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
or:
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (7)
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Package the installation in <fo:inline font-family="monospace">&lt;RELEASE_DIR&gt;</fo:inline>, place it wherever you want
on your target machine, and run the <fo:inline font-family="monospace">Install</fo:inline> script on your target
machine:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd &lt;ABSOLUTE_INSTALL_DIR_ON_TARGET&gt;
$ ./Install [-minimal|-sasl] &lt;ABSOLUTE_INSTALL_DIR_ON_TARGET&gt;
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>






<fo:block id="idp1800608" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Building With the otp_build Script</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (8)
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd $ERL_TOP
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (9)
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./otp_build configure --xcomp-conf=&lt;FILE&gt; [Other Config Args]
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
alternatively:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./otp_build configure --host=&lt;HOST&gt; --build=&lt;BUILD&gt; [Other Config Args]
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you have your cross compilation configuration in a file, pass it using the
<fo:inline font-family="monospace">--xcomp-conf=&lt;FILE&gt;</fo:inline> command line argument. If not, pass <fo:inline font-family="monospace">--host=&lt;HOST&gt;</fo:inline>,
<fo:inline font-family="monospace">--build=&lt;BUILD&gt;</fo:inline>, and the configuration variables using a <fo:inline font-family="monospace">&lt;VARIABLE&gt;=&lt;VALUE&gt;</fo:inline>
syntax on the command line  (same as in (3)). Note that <fo:inline font-family="monospace">&lt;HOST&gt;</fo:inline> and <fo:inline font-family="monospace">&lt;BUILD&gt;</fo:inline>
have to be passed one way or the other; either by using <fo:inline font-family="monospace">erl_xcomp_host=&lt;HOST&gt;</fo:inline>
and <fo:inline font-family="monospace">erl_xcomp_build=&lt;BUILD&gt;</fo:inline> in the configuration file, or by using the
<fo:inline font-family="monospace">--host=&lt;HOST&gt;</fo:inline>, and <fo:inline font-family="monospace">--build=&lt;BUILD&gt;</fo:inline> command line arguments.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
<fo:inline font-family="monospace">otp_build configure</fo:inline> will configure both for the boostrap system on the
build machine and the cross host system.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (10)
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./otp_build boot -a
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
<fo:inline font-family="monospace">otp_build boot -a</fo:inline> will first build a bootstrap system for the build machine
and then do the cross build of the system.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (11)
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./otp_build release -a &lt;RELEASE_DIR&gt;
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
<fo:inline font-family="monospace">otp_build release -a</fo:inline> will do the same as (5), and you will after this have
to do a manual install either by doing (6), or (7).
</fo:block>



<fo:block id="idp1816384" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.3 
      Building and Installing the Documentation</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
After the system has been cross built you can build and install the
documentation the same way as after a native build of the system. See the
<fo:inline font-style="italic">How to Build the Documentation</fo:inline> section in the <fo:inline font-style="italic">$ERL_TOP/HOWTO/INSTALL.md</fo:inline>
document for information on how to build the documentation.
</fo:block>

<fo:block id="idp1820048" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.4 
      Testing the cross compiled system</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Some of the tests that come with erlang use native code to test. This means
that when cross compiling erlang you also have to cross compile test suites
in order to run tests on the target host. To do this you first have to release
the tests as usual.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ make release_tests
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
or
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./otp_build tests
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The tests will be released into <fo:inline font-family="monospace">$ERL_TOP/release/tests</fo:inline>. After releasing the
tests you have to install the tests on the build machine. You supply the same
xcomp file as to <fo:inline font-family="monospace">./otp_build</fo:inline> in (9).
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd $ERL_TOP/release/tests/test_server/
$ $ERL_TOP/bootstrap/bin/erl -eval 'ts:install([{xcomp,"&lt;FILE&gt;"}])' -s ts compile_testcases -s init stop
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
You should get a lot of printouts as the testcases are compiled. Once done you
should copy the entire <fo:inline font-family="monospace">$ERL_TOP/release/tests</fo:inline> folder to the cross host system.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Then go to the cross host system and setup the erlang installed in (4) or (5)
to be in your <fo:inline font-family="monospace">$PATH</fo:inline>. Then go to what previously was
<fo:inline font-family="monospace">$ERL_TOP/release/tests/test_server</fo:inline> and issue the following command.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ erl -s ts install -s ts run all_tests -s init stop
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The configure should be skipped and all tests should hopefully pass. For more
details about how to use ts run <fo:inline font-family="monospace">erl -s ts help -s init stop</fo:inline>
</fo:block>

<fo:block id="idp1830640" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.5 
      Currently Used Configuration Variables</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Note that you cannot define arbitrary variables in a cross compilation
configuration file. Only the ones listed below will be guaranteed to be
visible throughout the whole execution of all <fo:inline font-family="monospace">configure</fo:inline> scripts. Other
variables needs to be defined as arguments to <fo:inline font-family="monospace">configure</fo:inline> or exported in
the environment.
</fo:block>

<fo:block id="idp1833584" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Variables for otp_build Only</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Variables in this section are only used, when configuring Erlang/OTP for
cross compilation using <fo:inline font-family="monospace">$ERL_TOP/otp_build configure</fo:inline>.
</fo:block>

<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
These variables currently have <fo:inline font-weight="bold">no</fo:inline> effect if you configure using
 the <fo:inline font-family="monospace">configure</fo:inline> script directly.
</fo:block>
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_build</fo:inline> - The build system used. This value will be passed as
<fo:inline font-family="monospace">--build=$erl_xcomp_build</fo:inline> argument to the <fo:inline font-family="monospace">configure</fo:inline> script. It does
not have to be a full <fo:inline font-family="monospace">CPU-VENDOR-OS</fo:inline> triplet, but can be. The full
<fo:inline font-family="monospace">CPU-VENDOR-OS</fo:inline> triplet will be created by
<fo:inline font-family="monospace">$ERL_TOP/erts/autoconf/config.sub $erl_xcomp_build</fo:inline>. If set to <fo:inline font-family="monospace">guess</fo:inline>,
the build system will be guessed using
<fo:inline font-family="monospace">$ERL_TOP/erts/autoconf/config.guess</fo:inline>.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_host</fo:inline> - Cross host/target system to build for. This value will
be passed as <fo:inline font-family="monospace">--host=$erl_xcomp_host</fo:inline> argument to the <fo:inline font-family="monospace">configure</fo:inline> script.
It does not have to be a full <fo:inline font-family="monospace">CPU-VENDOR-OS</fo:inline> triplet, but can be. The
full <fo:inline font-family="monospace">CPU-VENDOR-OS</fo:inline> triplet will be created by
<fo:inline font-family="monospace">$ERL_TOP/erts/autoconf/config.sub $erl_xcomp_host</fo:inline>.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_configure_flags</fo:inline> - Extra configure flags to pass to the
<fo:inline font-family="monospace">configure</fo:inline> script.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>


<fo:block id="idp1848048" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Cross Compiler and Other Tools</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If the cross compilation tools are prefixed by <fo:inline font-family="monospace">&lt;HOST&gt;-</fo:inline> you probably do
not need to set these variables (where <fo:inline font-family="monospace">&lt;HOST&gt;</fo:inline> is what has been passed as
<fo:inline font-family="monospace">--host=&lt;HOST&gt;</fo:inline> argument to <fo:inline font-family="monospace">configure</fo:inline>).
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
All variables in this section can also be used when native compiling.
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CC</fo:inline> - C compiler.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CFLAGS</fo:inline> - C compiler flags.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">STATIC_CFLAGS</fo:inline> - Static C compiler flags.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CFLAG_RUNTIME_LIBRARY_PATH</fo:inline> - This flag should set runtime library
search path for the shared libraries. Note that this actually is a
linker flag, but it needs to be passed via the compiler.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CPP</fo:inline> - C pre-processor.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CPPFLAGS</fo:inline> - C pre-processor flags.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CXX</fo:inline> - C++ compiler.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CXXFLAGS</fo:inline> - C++ compiler flags.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">LD</fo:inline> - Linker.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">LDFLAGS</fo:inline> - Linker flags.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">LIBS</fo:inline> - Libraries.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block id="idp1865888" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Dynamic Erlang Driver Linking</fo:block>



<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Either set all or none of the <fo:inline font-family="monospace">DED_LD*</fo:inline> variables.
</fo:block>
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">DED_LD</fo:inline> - Linker for Dynamically loaded Erlang Drivers.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">DED_LDFLAGS</fo:inline> - Linker flags to use with <fo:inline font-family="monospace">DED_LD</fo:inline>.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">DED_LD_FLAG_RUNTIME_LIBRARY_PATH</fo:inline> - This flag should set runtime library
search path for shared libraries when linking with <fo:inline font-family="monospace">DED_LD</fo:inline>.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>


<fo:block id="idp1873792" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Large File Support</fo:block>



<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Either set all or none of the <fo:inline font-family="monospace">LFS_*</fo:inline> variables.
</fo:block>
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">LFS_CFLAGS</fo:inline> - Large file support C compiler flags.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">LFS_LDFLAGS</fo:inline> - Large file support linker flags.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">LFS_LIBS</fo:inline> - Large file support libraries.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>


<fo:block id="idp1880688" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Other Tools</fo:block>



<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RANLIB</fo:inline> - <fo:inline font-family="monospace">ranlib</fo:inline> archive index tool.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">AR</fo:inline> - <fo:inline font-family="monospace">ar</fo:inline> archiving tool.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GETCONF</fo:inline> - <fo:inline font-family="monospace">getconf</fo:inline> system configuration inspection tool. <fo:inline font-family="monospace">getconf</fo:inline> is
currently used for finding out large file support flags to use, and
on Linux systems for finding out if we have an NPTL thread library or
not.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>




<fo:block id="idp1888240" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Cross System Root Locations</fo:block>



<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_sysroot</fo:inline> - The absolute path to the system root of the cross
compilation environment. Currently, the <fo:inline font-family="monospace">crypto</fo:inline>, <fo:inline font-family="monospace">odbc</fo:inline>, <fo:inline font-family="monospace">ssh</fo:inline> and
<fo:inline font-family="monospace">ssl</fo:inline> applications need the system root. These applications will be
skipped if the system root has not been set. The system root might be
needed for other things too. If this is the case and the system root
has not been set, <fo:inline font-family="monospace">configure</fo:inline> will fail and request you to set it.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_isysroot</fo:inline> - The absolute path to the system root for includes
of the cross compilation environment. If not set, this value defaults
to <fo:inline font-family="monospace">$erl_xcomp_sysroot</fo:inline>, i.e., only set this value if the include system
root path is not the same as the system root path.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>


<fo:block id="idp1895712" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Optional Feature, and Bug Tests</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
These tests cannot (always) be done automatically when cross compiling. You
usually do not need to set these variables.
</fo:block>

<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Setting these variables wrong may cause hard to detect
 runtime errors. If you need to change these values, <fo:inline font-weight="bold">really</fo:inline> make sure
 that the values are correct.
</fo:block>
</fo:block>

<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Some of these values will override results of tests performed
 by <fo:inline font-family="monospace">configure</fo:inline>, and some will not be used until <fo:inline font-family="monospace">configure</fo:inline> is sure that
 it cannot figure the result out.
</fo:block>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The <fo:inline font-family="monospace">configure</fo:inline> script will issue a warning when a default value is used.
When a variable has been set, no warning will be issued.
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_after_morecore_hook</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. Defaults to <fo:inline font-family="monospace">no</fo:inline>. If <fo:inline font-family="monospace">yes</fo:inline>,
the target system must have a working <fo:inline font-family="monospace">__after_morecore_hook</fo:inline> that can be
used for tracking used <fo:inline font-family="monospace">malloc()</fo:inline> implementations core memory usage.
This is currently only used by unsupported features.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_bigendian</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. No default. If <fo:inline font-family="monospace">yes</fo:inline>, the target system
must be big endian. If <fo:inline font-family="monospace">no</fo:inline>, little endian. This can often be
automatically detected, but not always. If not automatically detected,
<fo:inline font-family="monospace">configure</fo:inline> will fail unless this variable is set. Since no default
value is used, <fo:inline font-family="monospace">configure</fo:inline> will try to figure this out automatically.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_double_middle</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. Defaults to <fo:inline font-family="monospace">no</fo:inline>. 
If <fo:inline font-family="monospace">yes</fo:inline>, the target system must have doubles in "middle-endian" format. If
<fo:inline font-family="monospace">no</fo:inline>, it has "regular" endianness. 	
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_clock_gettime_cpu_time</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. Defaults to <fo:inline font-family="monospace">no</fo:inline>. If <fo:inline font-family="monospace">yes</fo:inline>,
the target system must have a working <fo:inline font-family="monospace">clock_gettime()</fo:inline> implementation
that can be used for retrieving process CPU time.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_getaddrinfo</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. Defaults to <fo:inline font-family="monospace">no</fo:inline>. If <fo:inline font-family="monospace">yes</fo:inline>, the target
system must have a working <fo:inline font-family="monospace">getaddrinfo()</fo:inline> implementation that can
handle both IPv4 and IPv6.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_gethrvtime_procfs_ioctl</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. Defaults to <fo:inline font-family="monospace">no</fo:inline>. If <fo:inline font-family="monospace">yes</fo:inline>,
the target system must have a working <fo:inline font-family="monospace">gethrvtime()</fo:inline> implementation and
is used with procfs <fo:inline font-family="monospace">ioctl()</fo:inline>.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_dlsym_brk_wrappers</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. Defaults to <fo:inline font-family="monospace">no</fo:inline>. If <fo:inline font-family="monospace">yes</fo:inline>, the
target system must have a working <fo:inline font-family="monospace">dlsym(RTLD_NEXT, &lt;S&gt;)</fo:inline> implementation
that can be used on <fo:inline font-family="monospace">brk</fo:inline> and <fo:inline font-family="monospace">sbrk</fo:inline> symbols used by the <fo:inline font-family="monospace">malloc()</fo:inline>
implementation in use, and by this track the <fo:inline font-family="monospace">malloc()</fo:inline> implementations
core memory usage. This is currently only used by unsupported features.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_kqueue</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. Defaults to <fo:inline font-family="monospace">no</fo:inline>. If <fo:inline font-family="monospace">yes</fo:inline>, the target
system must have a working <fo:inline font-family="monospace">kqueue()</fo:inline> implementation that returns a file
descriptor which can be used by <fo:inline font-family="monospace">poll()</fo:inline> and/or <fo:inline font-family="monospace">select()</fo:inline>. If <fo:inline font-family="monospace">no</fo:inline> and
the target system has not got <fo:inline font-family="monospace">epoll()</fo:inline> or <fo:inline font-family="monospace">/dev/poll</fo:inline>, the kernel-poll
feature will be disabled.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_linux_clock_gettime_correction</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. Defaults to <fo:inline font-family="monospace">yes</fo:inline> on
Linux; otherwise, <fo:inline font-family="monospace">no</fo:inline>. If <fo:inline font-family="monospace">yes</fo:inline>, <fo:inline font-family="monospace">clock_gettime(CLOCK_MONOTONIC, _)</fo:inline> on
the target system must work. This variable is recommended to be set to
<fo:inline font-family="monospace">no</fo:inline> on Linux systems with kernel versions less than 2.6.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_linux_nptl</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. Defaults to <fo:inline font-family="monospace">yes</fo:inline> on Linux; otherwise,
<fo:inline font-family="monospace">no</fo:inline>. If <fo:inline font-family="monospace">yes</fo:inline>, the target system must have NPTL (Native POSIX Thread
Library). Older Linux systems have LinuxThreads instead of NPTL (Linux
kernel versions typically less than 2.6).
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_linux_usable_sigaltstack</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. Defaults to <fo:inline font-family="monospace">yes</fo:inline> on Linux;
otherwise, <fo:inline font-family="monospace">no</fo:inline>. If <fo:inline font-family="monospace">yes</fo:inline>, <fo:inline font-family="monospace">sigaltstack()</fo:inline> must be usable on the target
system. <fo:inline font-family="monospace">sigaltstack()</fo:inline> on Linux kernel versions less than 2.4 are
broken.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_linux_usable_sigusrx</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. Defaults to <fo:inline font-family="monospace">yes</fo:inline>. If <fo:inline font-family="monospace">yes</fo:inline>,
the <fo:inline font-family="monospace">SIGUSR1</fo:inline> and <fo:inline font-family="monospace">SIGUSR2</fo:inline> signals must be usable by the ERTS. Old
LinuxThreads thread libraries (Linux kernel versions typically less than
2.2) used these signals and made them unusable by the ERTS.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_poll</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. Defaults to <fo:inline font-family="monospace">no</fo:inline> on Darwin/MacOSX; otherwise,
<fo:inline font-family="monospace">yes</fo:inline>. If <fo:inline font-family="monospace">yes</fo:inline>, the target system must have a working <fo:inline font-family="monospace">poll()</fo:inline>
implementation that also can handle devices. If <fo:inline font-family="monospace">no</fo:inline>, <fo:inline font-family="monospace">select()</fo:inline> will be
used instead of <fo:inline font-family="monospace">poll()</fo:inline>.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_putenv_copy</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. Defaults to <fo:inline font-family="monospace">no</fo:inline>. If <fo:inline font-family="monospace">yes</fo:inline>, the target
system must have a <fo:inline font-family="monospace">putenv()</fo:inline> implementation that stores a copy of the
key/value pair.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_reliable_fpe</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. Defaults to <fo:inline font-family="monospace">no</fo:inline>. If <fo:inline font-family="monospace">yes</fo:inline>, the target
system must have reliable floating point exceptions.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xcomp_posix_memalign</fo:inline> - <fo:inline font-family="monospace">yes|no</fo:inline>. Defaults to <fo:inline font-family="monospace">yes</fo:inline> if <fo:inline font-family="monospace">posix_memalign</fo:inline>
system call exists; otherwise <fo:inline font-family="monospace">no</fo:inline>. If <fo:inline font-family="monospace">yes</fo:inline>, the target system must have a
<fo:inline font-family="monospace">posix_memalign</fo:inline> implementation that accepts larger than page size
alignment.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>


<fo:block id="idp1965408" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.4  How to Build Erlang/OTP on Windows</fo:marker>1.4  How to Build Erlang/OTP on Windows</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Table of Contents</fo:inline></fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">Introduction</fo:inline>
    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">Short Version</fo:inline>
    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">Frequently Asked Questions</fo:inline>
    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">Tools you Need and Their Environment</fo:inline>
    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">The Shell Environment</fo:inline>
    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">Building and Installing</fo:inline>
    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">Development</fo:inline>
    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">Using GIT</fo:inline>
  </fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block id="idp1979744" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.1 
      Introduction</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
This section describes how to build the Erlang emulator and the OTP 
libraries on Windows. Note that the Windows binary releases are still 
a preferred alternative if one does not have Microsoft’s development 
tools and/or don’t want to install Cygwin, MSYS or MSYS2.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The instructions apply to versions of Windows supporting the Cygwin 
emulated gnuish environment or the MSYS or MSYS2 ditto. We’ve built on 
the following platforms: Windows 2012, Windows 7, Windows 8 and Windows 10. 
It’s probably possible to build on older platforms too, but you might 
not be able to install the appropriate Microsoft SDK, Visual Studio or 
OpenSSL, in which case you will need to go back to earlier compilers etc.<fo:block/>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The procedure described uses either Cygwin, MSYS or MSYS2 as a build 
environment. You run the bash shell in Cygwin/MSYS/MSYS2 and use the gnu 
make/configure/autoconf etc to do the build. The emulator C-source code 
is, however, mostly compiled with Microsoft Visual C++™, producing a 
native Windows binary. This is the same procedure as we use to build the 
pre-built binaries. Why we use VC++ and not gcc is explained further in 
the FAQ section. 
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you are not familiar with Cygwin, MSYS, MSYS2 or a Unix environment, 
you’ll probably need to read up a bit on how that works. There are plenty of 
documentation about this online.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
These instructions apply for both 32-bit and 64-bit Windows. Note that even 
if you build a 64-bit version of Erlang, most of the directories and files 
involved are still named win32. Some occurances of the name win64 are 
however present. The installation file for a 64-bit Windows version of 
Erlang, for example, is <fo:inline font-family="monospace">otp_win64_20.exe</fo:inline>.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you feel comfortable with the environment and build
system, and have all the necessary tools, you have a great opportunity
to make the Erlang/OTP distribution for Windows better. Please submit
any suggestions to our <fo:inline font-weight="bold"><fo:basic-link external-destination="href">JIRA</fo:basic-link></fo:inline> and patches to our <fo:inline font-weight="bold"><fo:basic-link external-destination="href">git project</fo:basic-link></fo:inline> to let
them find their way into the next version of Erlang. If making changes
to the build system (like makefiles etc) please bear in mind that the
same makefiles are used on Unix/VxWorks, so that your changes
don't break other platforms. That of course goes for C-code too; system
specific code resides in the <fo:inline font-family="monospace">$ERL_TOP/erts/emulator/sys/win32</fo:inline> and
<fo:inline font-family="monospace">$ERL_TOP/erts/etc/win32</fo:inline> directories mostly. The
<fo:inline font-family="monospace">$ERL_TOP/erts/emulator/beam</fo:inline> directory is for common code.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
We've used this build procedure for a couple of
releases, and it has worked fine for us. Still, there might be all
sorts of troubles on different machines and with different
setups. We'll try to give hints wherever we've encountered difficulties,
but please share your experiences by using the <fo:inline font-weight="bold"><fo:basic-link external-destination="href">erlang-questions</fo:basic-link></fo:inline>
mailing list. We cannot, of course, help everyone with all
their issues, so please try to solve such issues and submit
solutions/workarounds.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Lets go then! We’ll start with a short version of the setup procedure, 
followed by some FAQ, and then we’ll go into more details of the setup. 
</fo:block>

<fo:block id="idp1991760" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.2 
      Short Version</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
In the following sections, we've described as much as we could about the 
installation of the tools needed. Once the tools are installed, building 
is quite easy. We have also tried to make these instructions understandable 
for people with limited Unix experience. Cygwin/MSYS/MSYS2 is a whole new 
environment to some Windows users, why careful explanation of environment 
variables etc seemed to be in place. 
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
This is the short story though, for the experienced and impatient:
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get and install complete Cygwin (latest), complete MinGW with MSYS or 
complete MSYS2
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Install Visual Studio 12.0 (2013)
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Install Microsofts Windows SDK 8.1 
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get and install Sun's JDK 1.6.0 or later
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get and install NSIS 2.01 or later (up to 2.46 tried and working)
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get, build and install OpenSSL 0.9.8r or later (up to 1.0.2d
tried &amp; working) with static libs.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get the Erlang source distribution (from
<fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://www.erlang.org/download.html</fo:basic-link></fo:inline>) and unpack with 
Cygwin's/MSYS's/MSYS2's <fo:inline font-family="monospace">tar</fo:inline>.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set <fo:inline font-family="monospace">ERL_TOP</fo:inline> to where you unpacked the source distribution
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ cd $ERL_TOP</fo:inline>
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Modify PATH and other environment variables so that all these tools
are runnable from a bash shell. Still standing in <fo:inline font-family="monospace">$ERL_TOP</fo:inline>, issue
the following commands (for 32-bit Windows, remove the x64 from the 
first row and change <fo:inline font-family="monospace">otp_win64_20</fo:inline> to <fo:inline font-family="monospace">otp_win32_20</fo:inline> on
the last row):
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ eval `./otp_build env_win32 x64`
$ ./otp_build autoconf
$ ./otp_build configure
$ ./otp_build boot -a
$ ./otp_build release -a
$ ./otp_build installer_win32
$ release/win32/otp_win64_20 /S
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Voila! <fo:inline font-family="monospace">Start-&gt;Programs-&gt;Erlang OTP 20-&gt;Erlang</fo:inline> starts the Erlang
Windows shell.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block id="idp2009968" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.3 
      Frequently Asked Questions</fo:block>



<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Q: So, now I can build Erlang using GCC on Windows?
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A: No, unfortunately not. You'll need Microsoft's Visual C++
still. A Bourne-shell script (cc.sh) wraps the Visual C++ compiler
and runs it from within the Cygwin environment. All other tools
needed to build Erlang are free-ware/open source, but not the C
compiler. The Windows SDK is however enough to build Erlang, you
do not need to buy Visual C++, just download the SDK (SDK version
8.1 == Visual studio 2013).
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Q: Why haven't you got rid of VC++ then, you ******?
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A: Well, partly because it's a good compiler - really! Actually it's
been possible in late R11-releases to build using mingw instead of
visual C++ (you might see the remnants of that in some scripts and
directories). Unfortunately the development of the SMP version for
Windows broke the mingw build and we chose to focus on the VC++ build
as the performance has been much better in the VC++ versions. The
mingw build will possibly be back, but as long as VC++ gives better
performance, the commercial build will be a VC++ one.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Q: OK, you need VC++, but now you've started to demand a quite recent
(and expensive) version of Visual Studio. Why?
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A: Well, it's not expensive, it's free (as in free beer). Just
download and install the latest Windows SDK from Microsoft and all
the tools you need are there. The included debugger (WinDbg) is
also quite usable. That's what I used when porting Erlang to 64bit
Windows. Another reason to use later Microsoft compilers is 
DLL compatibility. DLL's using a new version of the standard
library might not load if the VM is compiled with an old VC++
version. So we should aim to use the latest freely available SDK
and compiler.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Q: Can/will I build a Cygwin binary with the procedure you describe?
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A: No, the result will be a pure Windows binary, and as far as I know,
it's not possible to make a Cygwin binary yet. That is of course
something desirable, but there are still some problems with the
dynamic linking (dynamic Erlang driver loading) as well as the TCP/IP
emulation in Cygwin, which, I'm sure of, will improve, but still has
some problems. Fixing those problems might be easy or might be hard.
I suggest you try yourself and share your experience. No one would be
happier if a simple <fo:inline font-family="monospace">./configure &amp;&amp; make</fo:inline> would produce a fully fledged
Cygwin binary. 
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Q: Hah, I saw you, you used GCC even though you said you didn't!
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A: OK, I admit, one of the files is compiled using Cygwin's or
MinGW's GCC and the resulting object code is then converted to MS
VC++ compatible coff using a small C hack. It's because that
particular file, <fo:inline font-family="monospace">beam_emu.c</fo:inline> benefits immensely from being able
to use the GCC labels-as-values extension, which boosts emulator
performance by up to 50%. That does unfortunately not (yet) mean
that all of OTP could be compiled using GCC. That particular
source code does not do anything system specific and actually is
adopted to the fact that GCC is used to compile it on Windows.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Q: So now there's a MS VC++ project file somewhere and I can build OTP
using the nifty VC++ GUI?
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A: No, never. The hassle of keeping the project files up to date and
do all the steps that constitute an OTP build from within the VC++ GUI
is simply not worth it, maybe even impossible. A VC++ project
file for Erlang/OTP will never happen.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Q: So how does it all work then?
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A: Cygwin, MSYS or MSYS2 is the environment, which closely resembles the
environment found on any Unix machine. It's almost like you had a
virtual Unix machine inside Windows. Configure, given certain
parameters, then creates makefiles that are used by the
environment's gnu-make to built the system. Most of the actual
compilers etc are not, however, Cygwin/MSYS/MSYS2 tools, so we've written
a couple of wrappers (Bourne-shell scripts), which reside in
<fo:inline font-family="monospace">$ERL_TOP/etc/win32/cygwin_tools</fo:inline> and
<fo:inline font-family="monospace">$ERL_TOP/etc/win32/msys_tools</fo:inline>. They all do conversion of
parameters and switches common in the Unix environment to fit the
native Windows tools. Most notable is of course the paths, which
in Cygwin/MSYS/MSYS2 are Unix-like paths with "forward slashes" (/) and
no drive letters. The Cygwin specific command <fo:inline font-family="monospace">cygpath</fo:inline> is used
for most of the path conversions in a Cygwin environment. Other
tools are used (when needed) in the corresponding MSYS and MSYS2
environment. Luckily most compilers accept forward slashes instead
of backslashes as path separators, but one still have to get the drive
letters etc right, though. The wrapper scripts are not general in
the sense that, for example, cc.sh would understand and translate
every possible gcc option and pass correct options to
cl.exe. The principle is that the scripts are powerful enough to
allow building of Erlang/OTP, no more, no less. They might need
extensions to cope with changes during the development of Erlang, and
that's one of the reasons we made them into shell-scripts and not
Perl-scripts. We believe they are easier to understand and change
that way.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In <fo:inline font-family="monospace">$ERL_TOP</fo:inline>, there is a script called <fo:inline font-family="monospace">otp_build</fo:inline>. That script handles
the hassle of giving all the right parameters to <fo:inline font-family="monospace">configure</fo:inline>/<fo:inline font-family="monospace">make</fo:inline> and
also helps you set up the correct environment variables to work with
the Erlang source under Cygwin/MSYS/MSYS2.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Q: You use and need Cygwin, but then you haven't taken the time to
port Erlang to the Cygwin environment but instead focus on your
commercial release, is that really ethical?
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A: No, not really, but see this as a step in the right direction. 
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Q: Can I build something that looks exactly as the commercial release?
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A: Yes, we use the exact same build procedure.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Q: Which version of Cygwin/MSYS/MSYS2 and other tools do you use then?
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A: For Cygwin, MSYS and MSYS2 alike, we try to use the latest releases
available when building. What versions you use shouldn't really
matter. We try to include workarounds for the bugs we've found in
different Cygwin/MSYS/MSYS2 releases. Please help us add workarounds
for new Cygwin/MSYS/MSYS2-related bugs as soon as you encounter
them. Also please do submit bug reports to the appropriate Cygwin, MSYS
and/or MSYS2 developers. The GCC we used for 20 was version
4.8.1 (MinGW 32bit) and 4.8.5 (MSYS2 64bit). We used  VC++ 12.0 
(i.e. Visual studio 2013), Sun's JDK 1.6.0_45 (32bit) and Sun's
JDK 1.7.0_1 (64bit), NSIS 2.46, and Win32 OpenSSL 1.0.2d. Please
read the next section for details on what you need.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Q: Can you help me setup X in Cygwin/MSYS/MSYS2?
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A: No, unfortunately we haven't got time to help with Cygwin/MSYS/MSYS2 
related user problems, please read related websites, newsgroups and
mailing lists.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block id="idp2037040" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.4 
      Tools you Need and Their Environment</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
You need some tools to be able to build Erlang/OTP on Windows. Most
notably you'll need Cygwin, MSYS or MSYS2, Visual Studio and Microsofts 
Windows SDK, but you might also want a Java compiler, the NSIS install 
system and OpenSSL. Well, here's some information about the different 
tools:
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Cygwin, the very latest is usually best. Get all the development
tools and of course all the basic ditto. Make sure to get jar and 
also make sure <fo:inline font-weight="bold">not</fo:inline> to install a Cygwin'ish Java, since the Cygwin 
jar command is used but Sun's Java compiler and virtual machine.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you are going to build a 64bit Windows version, you should make
sure to get MinGW's 64bit gcc installed with Cygwin. It's in one of
the development packages.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">URL: <fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://www.cygwin.com</fo:basic-link></fo:inline>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get the installer from the website and use it to install
Cygwin. Be sure to have fair privileges. If you're on an NT domain you
should consider running <fo:inline font-family="monospace">mkpasswd -d</fo:inline> and <fo:inline font-family="monospace">mkgroup -d</fo:inline> after the
installation to get the user databases correct. See their respective
manual pages.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When you start your first bash shell, you will get an awful prompt. You
might also have a <fo:inline font-family="monospace">PATH</fo:inline> environment variable that contains backslashes
and such. Edit <fo:inline font-family="monospace">$HOME/.profile</fo:inline> and <fo:inline font-family="monospace">$HOME/.bashrc</fo:inline> to set fair prompts
and a correct PATH. Also do an <fo:inline font-family="monospace">export SHELL</fo:inline> in <fo:inline font-family="monospace">.profile</fo:inline>. For some
non-obvious reason the environment variable <fo:inline font-family="monospace">$SHELL</fo:inline> is not exported in
bash. Also note that <fo:inline font-family="monospace">.profile</fo:inline> is run at login time and <fo:inline font-family="monospace">.bashrc</fo:inline> when
sub shells are created. You'll need to explicitly source <fo:inline font-family="monospace">.bashrc</fo:inline> from
<fo:inline font-family="monospace">.profile</fo:inline> if you want the commands there to be run at login time (like
setting up aliases, shell functions and the like). You can for example 
do like this at the end of <fo:inline font-family="monospace">.profile</fo:inline>:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ENV=$HOME/.bashrc
export ENV
. $ENV
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You might also want to setup X-windows (XFree86). That might be as easy 
as running startx from the command prompt and it might be much harder. 
Use Google to find help.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you don't use X-windows, you might want to setup the Windows
console window by selecting properties in the console system menu
(upper left corner of the window, the Cygwin icon in the title
bar). Especially setting a larger screen buffer size (lines) is useful
as it gets you a scrollbar so you can see whatever error messages
that might appear.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are a few other shells available, but in all examples below we assume
that you use bash.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Alternatively you download MinGW and MSYS. You'll find the latest
installer at:
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">URL: <fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://sourceforge.net/projects/mingw/files/Installer/mingw-get-inst/</fo:basic-link></fo:inline>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Make sure to install the basic dev tools, but avoid the MinGW autoconf and
install the msys one instead.<fo:block/>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To be able to build the 64bit VM, you will also need the 64bit
MinGW compiler from:
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">URL: <fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://sourceforge.net/projects/mingw-w64/files/latest/download?source=files</fo:basic-link></fo:inline>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We've tried up to 1.0, but the latest version should do. Make sure you 
download the <fo:inline font-family="monospace">mingw-w64-bin_i686-mingw_&lt;something&gt;.zip</fo:inline>, not a linux
version. You unzip the package on top of your MinGW installation
(<fo:inline font-family="monospace">c:\MinGW</fo:inline>) and that's it.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A third alternative is to download and install MSYS2 from:
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">URL: <fo:inline font-weight="bold"><fo:basic-link external-destination="href">https://msys2.github.io/</fo:basic-link></fo:inline>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When you've followed the instructions there, you also need to install 
these packages: autoconf, make, perl, and tar. You do so by running 
the following in the msys console:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
pacman -S msys/autoconf msys/make msys/perl msys/tar 
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You also need a gcc. If you installed the 64 bit MSYS2 you run:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mingw64/mingw-w64-x86_64-gcc
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And for 32 bit MSYS2:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
pacman -S mingw32/mingw-w64-i686-gcc
pacman -S mingw-w64-i686-editrights
</fo:block>
</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Visual Studio 2013 (Visual Studio 12.0). Download and run the web 
installer from: 
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
https://www.visualstudio.com/
</fo:block>
</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Microsofts Windows SDK version 8.1 (corresponding to VC++ 12.0 and
Visual Studio 2013). You'll find it here:
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">URL: <fo:inline font-weight="bold"><fo:basic-link external-destination="href">https://msdn.microsoft.com/en-us/windows/desktop/bg162891.aspx</fo:basic-link></fo:inline>
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To help setup the environment, there is a bat file, 
<fo:inline font-family="monospace">%PROGRAMFILES%\Mirosoft Visual Studio 12.0\VC\vcvarsall.bat</fo:inline>, 
that set's the appropriate
environment for a Windows command prompt. This is not appropriate
for bash, so you'll need to convert it to bash-style environments
by editing your <fo:inline font-family="monospace">.bash_profile</fo:inline>. In my case, where the SDK is
installed in the default directory and <fo:inline font-family="monospace">%PROGRAMFILES%</fo:inline> is
<fo:inline font-family="monospace">C:\Program Files</fo:inline>, the commands for setting up a 32bit build
environment (on a 64bit or 32bit machine) look like this (in Cygwin):
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
# Some common paths
C_DRV=/cygdrive/c
PRG_FLS=$C_DRV/Program\ Files

# nsis
NSIS_BIN=$PRG_FLS/NSIS
# java
JAVA_BIN=$PROGRAMFILES/Java/jdk1.7.0_02/bin

##
## MS SDK
##

CYGWIN=nowinsymlinks 

VISUAL_STUDIO_ROOT=$PRG_FLS/Microsoft\ Visual\ Studio\ 12.0
WIN_VISUAL_STUDIO_ROOT="C:\\Program Files\\Microsoft Visual Studio 12.0"
SDK=$PRG_FLS/Windows\ Kits/8.1
WIN_SDK="C:\\Program Files\\Windows Kits\\8.1"

PATH="$NSIS_BIN:\
$VISUAL_STUDIO_ROOT/VC/bin:\
$VISUAL_STUDIO_ROOT/VC/vcpackages:\
$VISUAL_STUDIO_ROOT/Common7/IDE:\
$VISUAL_STUDIO_ROOT/Common7/Tools:\
$SDK/bin/x86
/usr/local/bin:/usr/bin:/bin:\
/cygdrive/c/WINDOWS/system32:/cygdrive/c/WINDOWS:\
/cygdrive/c/WINDOWS/system32/Wbem:\
$JAVA_BIN"

LIBPATH="$WIN_VISUAL_STUDIO_ROOT\\VC\\lib"

LIB="$WIN_VISUAL_STUDIO_ROOT\\VC\\lib\\;$WIN_SDK\\lib\\winv6.3\\um\\x86"

INCLUDE="$WIN_VISUAL_STUDIO_ROOT\\VC\\include\\;$WIN_SDK\\include\\shared\\;\
$WIN_SDK\\include\\um;$WIN_SDK\\include\\winrt\\;$WIN_SDK\\include\\um\\gl"

export CYGWIN PATH LIBPATH LIB INCLUDE
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you're using MinGW's MSYS instead, you need to change the <fo:inline font-family="monospace">C_DRV</fo:inline> setting, 
which would read:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
C_DRV=/c
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">and you also need to change the PATH environment variable to: 
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
MINGW_BIN=/c/MinGW/bin


PATH="$NSIS_BIN:\
$VISUAL_STUDIO_ROOT/VC/bin:\
$VISUAL_STUDIO_ROOT/VC/vcpackages:\
$VISUAL_STUDIO_ROOT/Common7/IDE:\
$VISUAL_STUDIO_ROOT/Common7/Tools:\
$SDK/bin/x86:/usr/local/bin:\
$MINGW_BIN:\
/bin:/c/Windows/system32:/c/Windows:\
/c/Windows/System32/Wbem:\
$JAVA_BIN"
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For MSYS2 you use the same <fo:inline font-family="monospace">C_DRV</fo:inline> and PATH as for MSYS, only update the <fo:inline font-family="monospace">MINGW_BIN</fo:inline>:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
MINGW_BIN=/mingw32/bin
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you are building a 64 bit version of Erlang, you should set up 
PATHs etc a little differently. We have two templates to make things 
work in both Cygwin and MSYS but needs editing to work with MSYS2 (see the 
comments in the script). 
The following one is for 32 bits:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
make_winpath()
{ 
    P=$1
    if [ "$IN_CYGWIN" = "true" ]; then
        cygpath -d "$P"
    else
        (cd "$P" &amp;&amp; /bin/cmd //C "for %i in (".") do @echo %~fsi")
    fi
}

make_upath()
{
    P=$1
    if [ "$IN_CYGWIN" = "true" ]; then
        cygpath "$P"
    else
        echo "$P" | /bin/sed 's,^\([a-zA-Z]\):\\,/\L\1/,;s,\\,/,g'
    fi
}

# Some common paths
if [ -x /usr/bin/msys-?.0.dll ]; then
  # Without this the path conversion won't work
  COMSPEC='C:\Windows\System32\cmd.exe'
  MSYSTEM=MINGW32  # Comment out this line if in MSYS2
  export MSYSTEM COMSPEC
  # For MSYS2: Change /mingw/bin to the msys bin dir on the line below
  PATH=/usr/local/bin:/mingw/bin:/bin:/c/Windows/system32:\
  /c/Windows:/c/Windows/System32/Wbem
  C_DRV=/c
  IN_CYGWIN=false
else
  PATH=/ldisk/overrides:/usr/local/bin:/usr/bin:/bin:\
  /usr/X11R6/bin:/cygdrive/c/windows/system32:\
  /cygdrive/c/windows:/cygdrive/c/windows/system32/Wbem
  C_DRV=/cygdrive/c
  IN_CYGWIN=true
fi

obe_otp_gcc_vsn_map="
    .*=&gt;default 
"   
obe_otp_64_gcc_vsn_map="
    .*=&gt;default
"
# Program Files 
PRG_FLS=$C_DRV/Program\ Files

# Visual Studio
VISUAL_STUDIO_ROOT=$PRG_FLS/Microsoft\ Visual\ Studio\ 12.0
WIN_VISUAL_STUDIO_ROOT="C:\\Program Files\\Microsoft Visual Studio 12.0"

# SDK
SDK=$PRG_FLS/Windows\ Kits/8.1
WIN_SDK="C:\\Program Files\\Windows Kits\\8.1"

# NSIS
NSIS_BIN=$PROGRAMFILES/NSIS

# Java 
JAVA_BIN=$PROGRAMFILES/Java/jdk1.7.0_02/bin

## The PATH variable should be Cygwin'ish
VCPATH=
$VISUAL_STUDIO_ROOT/VC/bin:\
$VISUAL_STUDIO_ROOT/VC/vcpackages:\
$VISUAL_STUDIO_ROOT/Common7/IDE:\
$VISUAL_STUDIO_ROOT/Common7/Tools:\
$SDK/bin/x86

## Microsoft SDK libs
LIBPATH=$WIN_VISUAL_STUDIO_ROOT\\VC\\lib

LIB=$WIN_VISUAL_STUDIO_ROOT\\VC\\lib\\;$WIN_KITS\\lib\\winv6.3\\um\\x86

INCLUDE=$WIN_VISUAL_STUDIO_ROOT\\VC\\include\\;\
$WIN_KITS\\include\\shared\\;$WIN_KITS\\include\\um;\
$WIN_KITS\\include\\winrt\\;$WIN_KITS\\include\\um\\gl

# Put nsis, c compiler and java in path
export PATH=$VCPATH:$PATH:$JAVA_BIN:$NSIS_BIN

# Make sure LIB and INCLUDE is available for others
export LIBPATH LIB INCLUDE
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first part of the 64 bit template is identical to the 32 bit one, 
but there are some environment variable differences: 
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
# Program Files
PRG_FLS64=$C_DRV/Program\ Files
PRG_FLS32=$C_DRV/Program\ Files\ \(x86\)

# Visual Studio
VISUAL_STUDIO_ROOT=$PRG_FLS32/Microsoft\ Visual\ Studio\ 12.0
WIN_VISUAL_STUDIO_ROOT="C:\\Program Files (x86)\\Microsoft Visual Studio 12.0"

# SDK
SDK=$PRG_FLS32/Windows\ Kits/8.1
WIN_SDK="C:\\Program Files (x86)\\Windows Kits\\8.1"

# NSIS
NSIS_BIN=$PROGRAMFILES/NSIS
# Java 
JAVA_BIN=$PROGRAMFILES/Java/jdk1.7.0_02/bin

## The PATH variable should be Cygwin'ish
VCPATH=
$VISUAL_STUDIO_ROOT/VC/bin/amd64:\
$VISUAL_STUDIO_ROOT/VC/vcpackages:\
$VISUAL_STUDIO_ROOT/Common7/IDE:\
$VISUAL_STUDIO_ROOT/Common7/Tools:\
$SDK/bin/x86

## Microsoft SDK libs
LIBPATH=$WIN_VISUAL_STUDIO_ROOT\\VC\\lib\\amd64

LIB=$WIN_VISUAL_STUDIO_ROOT\\VC\\lib\\amd64\\;\
$WIN_KITS\\lib\\winv6.3\\um\\x64

INCLUDE=$WIN_VISUAL_STUDIO_ROOT\\VC\\include\\;\
$WIN_KITS\\include\\shared\\;$WIN_KITS\\include\\um;\
$WIN_KITS\\include\\winrt\\;$WIN_KITS\\include\\um\\gl

# Put nsis, c compiler and java in path
export PATH=$VCPATH:$PATH:$JAVA_BIN:$NSIS_BIN

# Make sure LIB and INCLUDE is available for others
export LIBPATH LIB INCLUDE
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Make sure to set the PATH so that NSIS and Microsoft SDK is found 
before the MSYS/Cygwin tools and that Java is last in the PATH.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Make a simple hello world and try to compile it with the <fo:inline font-family="monospace">cl</fo:inline> 
command from within bash. If that does not work, your environment 
needs fixing. Remember, there should be
no backslashes in your path environment variable in Cygwin bash,
but LIB and INCLUDE should contain Windows style paths with
semicolon, drive letters and backslashes.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sun's Java JDK 1.6.0 or later. Our Java code (jinterface, ic) is
written for JDK 1.6.0. Get it for Windows and install it, the JRE is
not enough. If you don't care about Java, you can skip this step. The
result will be that jinterface is not built.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">URL: <fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://java.sun.com</fo:basic-link></fo:inline>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Add javac <fo:inline font-weight="bold">LAST</fo:inline> to your path environment in bash, in my case this means:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
`PATH="$PATH:/cygdrive/c/Program Files/Java/jdk1.7.0_02/bin"`
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No <fo:inline font-family="monospace">CLASSPATH</fo:inline> or anything is needed. Type <fo:inline font-family="monospace">javac</fo:inline> in the bash prompt
and you should get a list of available Java options. Make sure, e.g by
typing <fo:inline font-family="monospace">type java</fo:inline>, that you use the Java you installed. Note however that
Cygwin's/MinGW's/MSYS2's <fo:inline font-family="monospace">jar.exe</fo:inline> is used. That's why the JDK bin-directory should be
added last in the <fo:inline font-family="monospace">PATH</fo:inline>.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Nullsoft NSIS installer system. You need this to build the self
installing package. It's a free open source installer that's much
nicer to use than the commercial Wise and Install shield
installers. This is the installer we use for commercial releases as
well.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">URL: <fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://nsis.sourceforge.net/download</fo:basic-link></fo:inline>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Install the lot, especially the modern user interface components, as
it's definitely needed. Put <fo:inline font-family="monospace">makensis</fo:inline> in your path, in my case:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
PATH=/cygdrive/c/Program\ Files/NSIS:$PATH
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Type makensis at the bash prompt and you should get a list of options
if everything is OK.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OpenSSL. This is if you want the SSL and crypto applications to
compile (and run). There are prebuilt binaries, which you can just 
download and install, available here:
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">URL: <fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://openssl.org/community/binaries.html</fo:basic-link></fo:inline>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We would recommend using 1.0.2d. 
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Building with wxWidgets. Download wxWidgets-3.0.3 or higher.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Install or unpack it to the pgm folder:
Cygwin: 
<fo:inline font-family="monospace">DRIVE:/PATH/cygwin/opt/local/pgm</fo:inline>
MSYS:
<fo:inline font-family="monospace">DRIVE:/PATH/MinGW/msys/1.0/opt/local/pgm</fo:inline>
MSYS2:
<fo:inline font-family="monospace">DRIVE:/PATH/msys&lt;32/64&gt;/opt/local/pgm</fo:inline>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">wxUSE_POSTSCRIPT</fo:inline> isn't enabled in  <fo:inline font-family="monospace">&lt;path\to\pgm&gt;\wxMSW-3.0.3\include\wx\msw\setup.h</fo:inline>,
enable it.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">build: From a command prompt with the VC tools available (See the
instructions for OpenSSL build above for help on starting the
proper command prompt in RELEASE mode):
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
C:\...\&gt; cd &lt;path\to\pgm&gt;\wxMSW-3.0.3\build\msw
C:\...\&gt; nmake BUILD=release SHARED=0 DIR_SUFFIX_CPU= -f makefile.vc
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Or - if building a 64bit version:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
C:\...\&gt; cd &lt;path\to\pgm&gt;\wxMSW-3.0.3\build\msw
C:\...\&gt; nmake TARGET_CPU=amd64 BUILD=release SHARED=0 DIR_SUFFIX_CPU= -f makefile.vc
</fo:block>
</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get the Erlang source distribution (from <fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://www.erlang.org/download.html</fo:basic-link></fo:inline>).
The same as for Unix platforms. Preferably use tar from within Cygwin, MSYS or MSYS2 to
unpack the source tar.gz (<fo:inline font-family="monospace">tar zxf otp_src_20.tar.gz</fo:inline>).
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set the environment <fo:inline font-family="monospace">ERL_TOP</fo:inline> to point to the root directory of the
source distribution. Let's say I stood in <fo:inline font-family="monospace">$HOME/src</fo:inline> and unpacked
<fo:inline font-family="monospace">otp_src_20.tar.gz</fo:inline>, I then add the following to <fo:inline font-family="monospace">.profile</fo:inline>:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ERL_TOP=$HOME/src/otp_src_20
export $ERL_TOP
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block id="idp2113520" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.5 
      The Shell Environment</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
So, if you have followed the instructions above, when you start a bash
shell, you should have an INCLUDE environment with a Windows style
path, a LIB environment variable also in Windows style, and finally a
PATH that let's you reach cl, makensis, javac etc from the
command prompt (use <fo:inline font-family="monospace">which cl</fo:inline> etc to verify from bash).
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
You should also have an <fo:inline font-family="monospace">ERL_TOP</fo:inline> environment variable that is <fo:inline font-weight="bold">Cygwin
style</fo:inline>, and points to a directory containing, among other files, the
script <fo:inline font-family="monospace">otp_build</fo:inline>.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
A final massage of the environment is needed, and that is done by
the script <fo:inline font-family="monospace">$ERL_TOP/otp_build</fo:inline>. Start bash and do the following, note
the "back-ticks" (`), can be quite hard to get on some keyboards, but
pressing the back-tick key followed by the space bar might do it...
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd $ERL_TOP
$ eval `./otp_build env_win32`
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you're unable to produce back-ticks on your keyboard, you can use
the ksh variant:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd $ERL_TOP
$ eval $(./otp_build env_win32)
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you are building a 64 bit version, you supply <fo:inline font-family="monospace">otp_build</fo:inline> with an architecture parameter:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd $ERL_TOP
$ eval `./otp_build env_win32 x64`
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
This should do the final touch to the environment and building should
be easy after this. You could run <fo:inline font-family="monospace">./otp_build env_win32</fo:inline> without
<fo:inline font-family="monospace">eval</fo:inline> just to see what it does, and to see that the environment it
sets seems OK. The path is cleaned of spaces if possible (using DOS
style short names instead), the variables <fo:inline font-family="monospace">OVERRIDE_TARGET</fo:inline>, <fo:inline font-family="monospace">CC</fo:inline>, <fo:inline font-family="monospace">CXX</fo:inline>,
<fo:inline font-family="monospace">AR</fo:inline> and <fo:inline font-family="monospace">RANLIB</fo:inline> are set to their respective wrappers and the directories
<fo:inline font-family="monospace">$ERL_TOP/erts/etc/win32/&lt;cygwin/msys&gt;_tools/vc</fo:inline> and
<fo:inline font-family="monospace">$ERL_TOP/erts/etc/win32/&lt;cygwin/msys&gt;_tool</fo:inline> are added first in the PATH.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Now you can check which erlc you have by writing <fo:inline font-family="monospace">type erlc</fo:inline> in your shell. 
It should reside in <fo:inline font-family="monospace">$ERL_TOP/erts/etc/win32/cygwin_tools</fo:inline>
or <fo:inline font-family="monospace">$ERL_TOP/erts/etc/win32/msys_tools</fo:inline>.
</fo:block>

<fo:block id="idp2129600" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.6 
      Building and Installing</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Building is easiest using the <fo:inline font-family="monospace">otp_build</fo:inline> script: 
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./otp_build autoconf # Ignore the warning blob about versions of autoconf
$ ./otp_build configure &lt;optional configure options&gt;
$ ./otp_build boot -a
$ ./otp_build release -a &lt;installation directory&gt;
$ ./otp_build installer_win32 &lt;installation directory&gt; # optional
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Now you will have a file called <fo:inline font-family="monospace">otp_win32_20.exe</fo:inline> or <fo:inline font-family="monospace">otp_win64_20.exe</fo:inline> 
in the <fo:inline font-family="monospace">&lt;installation directory&gt;</fo:inline>, i.e. <fo:inline font-family="monospace">$ERL_TOP/release/win32</fo:inline>.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Lets get into more detail:
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ ./otp_build autoconf</fo:inline> - This step rebuilds the configure scripts
to work correctly in your environment. In an ideal world, this
would not be needed, but alas, we have encountered several
incompatibilities between our distributed configure scripts (generated
on a Linux platform) and the Cygwin/MSYS/MSYS2 environment over the
years. Running autoconf in Cygwin/MSYS/MSYS2 ensures that the configure 
scripts are generated in a compatible way and that they will work well
in the next step.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ ./otp_build configure</fo:inline> - This runs the newly generated configure
scripts with options making configure behave nicely. The target machine
type is plainly <fo:inline font-family="monospace">win32</fo:inline>, so a lot of the configure-scripts recognize
this awkward target name and behave accordingly. The CC variable also
makes the compiler be <fo:inline font-family="monospace">cc.sh</fo:inline>, which wraps MSVC++, so all configure
tests regarding the C compiler gets to run the right compiler. A lot of
the tests are not needed on Windows, but we thought it best to run the
whole configure anyway.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ ./otp_build boot -a</fo:inline> - This uses the bootstrap directory (shipped
with the source, <fo:inline font-family="monospace">$ERL_TOP/bootstrap</fo:inline>) to build a complete OTP
system. When this is done you can run erl from within the source tree; 
just type <fo:inline font-family="monospace">$ERL_TOP/bin/erl</fo:inline> and you whould have the prompt. 
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ ./otp_build release -a</fo:inline> - Builds a commercial release tree from the
source tree. The default is to put it in <fo:inline font-family="monospace">$ERL_TOP/release/win32</fo:inline>. You can
give any directory as parameter (Cygwin style), but it doesn't really
matter if you're going to build a self extracting installer too. 
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ ./otp_build installer_win32</fo:inline> - Creates the self extracting installer executable. 
The executable <fo:inline font-family="monospace">otp_win32_20.exe</fo:inline> or <fo:inline font-family="monospace">otp_win64_20.exe</fo:inline> will be placed
in the top directory of the release created in the previous step. If
no release directory is specified, the release is expected to have
been built to <fo:inline font-family="monospace">$ERL_TOP/release/win32</fo:inline>, which also will be the place
where the installer executable will be placed. If you specified some
other directory for the release (i.e. <fo:inline font-family="monospace">./otp_build release -a
/tmp/erl_release</fo:inline>), you're expected to give the same parameter here,
(i.e. <fo:inline font-family="monospace">./otp_build installer_win32 /tmp/erl_release</fo:inline>). You need to have
a full NSIS installation and <fo:inline font-family="monospace">makensis.exe</fo:inline> in your path for this to
work. Once you have created the installer, you can run it to
install Erlang/OTP in the regular way, just run the executable and
follow the steps in the installation wizard. To get all default settings
in the installation without any questions asked, you run the executable
with the parameter <fo:inline font-family="monospace">/S</fo:inline> (capital S) like in:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd $ERL_TOP
$ release/win32/otp_win32_20 /S
...
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd $ERL_TOP
$ release/win32/otp_win64_20 /S
...
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">and after a while Erlang/OTP-20 will have been installed in
<fo:inline font-family="monospace">C:\Program Files\erl9.0\</fo:inline>, with shortcuts in the menu etc.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block id="idp2152320" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.7 
      Development</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Once the system is built, you might want to change it. Having a test
release in some nice directory might be useful, but you can also run
Erlang from within the source tree. The target <fo:inline font-family="monospace">local_setup</fo:inline>, makes
the program <fo:inline font-family="monospace">$ERL_TOP/bin/erl.exe</fo:inline> usable and it also uses all the OTP
libraries in the source tree.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you hack the emulator, you can build the emulator executable
by standing in <fo:inline font-family="monospace">$ERL_TOP/erts/emulator</fo:inline> and do a simple
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ make opt
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Note that you need to have run <fo:inline font-family="monospace">(cd $ERL_TOP &amp;&amp; eval `./otp_build env_win32`)</fo:inline>
in the particular shell before building anything on Windows. After
doing a make opt you can test your result by running <fo:inline font-family="monospace">$ERL_TOP/bin/erl</fo:inline>.
If you want to copy the result to a release directory (say
<fo:inline font-family="monospace">/tmp/erl_release</fo:inline>), you do this (still in  <fo:inline font-family="monospace">$ERL_TOP/erts/emulator</fo:inline>)
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ make TESTROOT=/tmp/erl_release release
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
That will copy the emulator executables.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
To make a debug build of the emulator, you need to recompile both
<fo:inline font-family="monospace">beam.dll</fo:inline> (the actual runtime system) and <fo:inline font-family="monospace">erlexec.dll</fo:inline>. Do like this
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd $ERL_TOP
$ rm bin/win32/erlexec.dll
$ cd erts/emulator
$ make debug
$ cd ../etc
$ make debug
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
and sometimes
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd $ERL_TOP
$ make local_setup
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
So now when you run <fo:inline font-family="monospace">$ERL_TOP/erl.exe</fo:inline>, you should have a debug compiled
emulator, which you will see if you do a:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; erlang:system_info(system_version).
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
in the erlang shell. If the returned string contains <fo:inline font-family="monospace">[debug]</fo:inline>, you
got a debug compiled emulator.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
To hack the erlang libraries, you simply do a <fo:inline font-family="monospace">make opt</fo:inline> in the
specific "applications" directory, like:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd $ERL_TOP/lib/stdlib
$ make opt
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
or even in the source directory...
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd $ERL_TOP/lib/stdlib/src
$ make opt
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Note that you're expected to have a fresh Erlang in your path when
doing this, preferably the plain 20 you have built in the previous
steps. You could also add <fo:inline font-family="monospace">$ERL_TOP/bootstrap/bin</fo:inline> to your <fo:inline font-family="monospace">PATH</fo:inline> before
rebuilding specific libraries. That would give you a good enough
Erlang system to compile any OTP erlang code.  Setting up the path
correctly is a little bit tricky. You still need to have
<fo:inline font-family="monospace">$ERL_TOP/erts/etc/win32/cygwin_tools/vc</fo:inline> and
<fo:inline font-family="monospace">$ERL_TOP/erts/etc/win32/cygwin_tools</fo:inline> <fo:inline font-weight="bold">before</fo:inline> the actual emulator
in the path. A typical setting of the path for using the bootstrap
compiler would be:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ export PATH=$ERL_TOP/erts/etc/win32/cygwin_tools/vc\
:$ERL_TOP/erts/etc/win32/cygwin_tools:$ERL_TOP/bootstrap/bin:$PATH
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
That should make it possible to rebuild any library without hassle...
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you want to copy a library (an application) newly built, to a
release area, you do like with the emulator:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cd $ERL_TOP/lib/stdlib
$ make TESTROOT=/tmp/erlang_release release
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Remember that:
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Windows specific C-code goes in the <fo:inline font-family="monospace">$ERL_TOP/erts/emulator/sys/win32</fo:inline>,
<fo:inline font-family="monospace">$ERL_TOP/erts/emulator/drivers/win32</fo:inline> or <fo:inline font-family="monospace">$ERL_TOP/erts/etc/win32</fo:inline>.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Windows specific erlang code should be used conditionally and the
host OS tested in <fo:inline font-weight="bold">runtime</fo:inline>, the exactly same beam files should be
distributed for every platform! So write code like:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
case os:type() of
    {win32,_} -&gt;
        do_windows_specific();
    Other -&gt;
        do_fallback_or_exit()
end,
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
That's basically all you need to get going.
</fo:block>

<fo:block id="idp2181376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.8 
      Using GIT</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
You might want to check out versions of the source code from GitHUB. That is possible directly in Cygwin, but not in MSYS. There is a project MsysGIT:
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
URL:<fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://code.google.com/p/msysgit/</fo:basic-link></fo:inline>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
that makes a nice Git port. The msys prompt you get from MsysGIT is
however not compatible with the full version from MinGW, so you will
need to check out files using MsysGIT's command prompt and then switch
to a common MSYS command prompt for building. Also all test suites
cannot be built as MsysGIT/MSYS does not handle symbolic links. 
</fo:block>


<fo:block id="idp2188848" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.5  Patching OTP Applications</fo:marker>1.5  Patching OTP Applications</fo:block><fo:block id="idp2193904" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.1 
      Introduction</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
This document describes the process of patching an existing OTP
installation with one or more Erlang/OTP applications of newer versions
than already installed. The tool <fo:inline font-family="monospace">otp_patch_apply</fo:inline> is available for this
specific purpose. It resides in the top directory of the Erlang/OTP
source tree.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The <fo:inline font-family="monospace">otp_patch_apply</fo:inline> tool utilizes the <fo:inline font-style="italic">runtime_dependencies</fo:inline> tag in
the <fo:inline font-style="italic">application resource file</fo:inline>. This information is used to determine
if the patch can be installed in the given Erlang/OTP installation
directory.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Read more about the <fo:inline font-style="italic">version handling</fo:inline> introduced in Erlang/OTP release
17, which also describes how to determine if an installation includes one
or more patched applications.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you want to apply patches of multiple OTP applications that resides
in different OTP versions, you have to apply these patches in multiple
steps. It is only possible to apply multiple OTP applications from the
same OTP version at once.
</fo:block>

<fo:block id="idp2200960" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.2 
      Prerequisites</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
It's assumed that the reader is familiar with
<fo:inline font-style="italic">building and installing Erlang/OTP</fo:inline>. To be able to patch an
application, the following must exist:
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang/OTP installation.
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang/OTP source tree containing the updated applications that
you want to patch into the existing Erlang/OTP installation.
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block id="idp2206000" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.3 
      Using otp_patch_apply</fo:block>



<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Patching applications is a one-way process.
 Create a backup of your OTP installation directory before
 proceeding.
</fo:block>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
First of all, build the OTP source tree at <fo:inline font-family="monospace">$ERL_TOP</fo:inline> containing
the updated applications.
</fo:block>

<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Before applying a patch you need to do a <fo:inline font-weight="bold">full</fo:inline> build
 of OTP in the source directory.
</fo:block>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you are building in <fo:inline font-family="monospace">git</fo:inline> you first need to generate the
<fo:inline font-family="monospace">configure</fo:inline> scripts:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./otp_build autoconf
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Configure and build all applications in OTP:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ configure
$ make
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
or
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ./otp_build configure
$ ./otp_build boot -a
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If you have installed documentation in the OTP installation, also
build the documentation:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ make docs
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
After the successful build it's time to patch. The source tree directory,
the directory of the installation and the applications to patch are given
as arguments to <fo:inline font-family="monospace">otp_patch_apply</fo:inline>. The dependencies of each application
are validated against the applications in the installation and the other
applications given as arguments. If a dependency error is detected, the
script will be aborted.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The <fo:inline font-family="monospace">otp_patch_apply</fo:inline> syntax:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ otp_patch_apply -s &lt;Dir&gt; -i &lt;Dir&gt; [-l &lt;Dir&gt;] [-c] [-f] [-h] \
      [-n] [-v] &lt;App1&gt; [... &lt;AppN&gt;]

-s &lt;Dir&gt;  -- OTP source directory that contains build results.
-i &lt;Dir&gt;  -- OTP installation directory to patch.
-l &lt;Dir&gt;  -- Alternative OTP source library directory path(s)
             containing build results of OTP applications.
             Multiple paths should be colon separated.
-c        -- Cleanup (remove) old versions of applications
             patched in the installation.
-f        -- Force patch of application(s) even though
             dependencies are not fulfilled (should only be
             considered in a test environment).
-h        -- Print help then exit.
-n        -- Do not install documentation.
-v        -- Print version then exit.
&lt;AppX&gt;    -- Application to patch.

Environment Variable:
  ERL_LIBS  -- Alternative OTP source library directory path(s)
               containing build results of OTP applications.
               Multiple paths should be colon separated.
</fo:block>
<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The complete build environment is required while running
 <fo:inline font-family="monospace">otp_patch_apply</fo:inline>.
</fo:block>
</fo:block>

<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
All source directories identified by <fo:inline font-family="monospace">-s</fo:inline> and <fo:inline font-family="monospace">-l</fo:inline> should
 contain build results of OTP applications.
</fo:block>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
For example, if the user wants to install patched versions of <fo:inline font-family="monospace">mnesia</fo:inline>
and <fo:inline font-family="monospace">ssl</fo:inline> built in <fo:inline font-family="monospace">/home/me/git/otp</fo:inline> into the OTP installation
located in <fo:inline font-family="monospace">/opt/erlang/my_otp</fo:inline> type
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ otp_patch_apply -s /home/me/git/otp -i /opt/erlang/my_otp \
  mnesia ssl
</fo:block>
<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
If the list of applications contains core applications,
 i.e <fo:inline font-family="monospace">erts</fo:inline>, <fo:inline font-family="monospace">kernel</fo:inline>, <fo:inline font-family="monospace">stdlib</fo:inline> or <fo:inline font-family="monospace">sasl</fo:inline>, the <fo:inline font-family="monospace">Install</fo:inline> script in
 the patched Erlang/OTP installation must be rerun.
</fo:block>
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The patched applications are appended to the list of installed
applications. Take a look at
<fo:inline font-family="monospace">&lt;InstallDir&gt;/releases/OTP-REL/installed_application_versions</fo:inline>.
</fo:block>

<fo:block id="idp2230976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.4 
      Sanity check</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The application dependencies can be checked using the Erlang shell.
Application dependencies are verified among installed applications by
<fo:inline font-family="monospace">otp_patch_apply</fo:inline>, but these are not necessarily those actually loaded.
By calling <fo:inline font-family="monospace">system_information:sanity_check()</fo:inline> one can validate
dependencies among applications actually loaded.
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; system_information:sanity_check().
    ok
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Please take a look at the reference of <fo:inline font-style="italic">sanity_check()</fo:inline> for more
information.
</fo:block>

<fo:block id="idp994176" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      System Principles</fo:block><fo:block id="idp989152" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">2.1  System Principles</fo:marker>2.1  System Principles</fo:block><fo:block id="idp986432" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.1.1 
      Starting the System</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang runtime system is started with command <fo:inline font-family="monospace">erl</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl</fo:inline>
Erlang/OTP 17 [erts-6.0] [hipe] [smp:8:8]

Eshell V6.0  (abort with ^G)
1&gt; </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl</fo:inline> understands a number of command-line arguments, see
      the <fo:inline font-style="italic">erl(1)</fo:inline>  manual page in
      ERTS. Some of them are also described in this chapter.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Application programs can access the values of the command-line
      arguments by calling the function <fo:inline font-family="monospace">init:get_argument(Key)</fo:inline>
      or <fo:inline font-family="monospace">init:get_arguments()</fo:inline>. See the
      <fo:inline font-style="italic">init(3)</fo:inline> manual page in
      ERTS.</fo:block>
  <fo:block id="idp980992" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.1.2 
      Restarting and Stopping the System</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime system is halted by calling <fo:inline font-family="monospace">halt/0,1</fo:inline>. For
      details, see the <fo:inline font-style="italic">erlang(3)</fo:inline>
      manual page in ERTS.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">init</fo:inline> contains functions for restarting,
      rebooting, and stopping the runtime system:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
init:restart()
init:reboot()
init:stop()</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see the <fo:inline font-style="italic">init(3)</fo:inline>
      manual page in ERTS.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime system terminates if the Erlang shell is
      terminated.</fo:block>
  <fo:block id="idp1076464" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.1.3 
      Boot Scripts</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime system is started using a <fo:inline font-weight="bold">boot script</fo:inline>.
      The boot script contains instructions on which code to load and
      which processes and applications to start.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A boot script file has the extension <fo:inline font-family="monospace">.script</fo:inline>.
      The runtime system uses a binary version of the script. This
      <fo:inline font-weight="bold">binary boot script</fo:inline> file has the extension <fo:inline font-family="monospace">.boot</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Which boot script to use is specified by the command-line flag
      <fo:inline font-family="monospace">-boot</fo:inline>. The extension <fo:inline font-family="monospace">.boot</fo:inline> is to be omitted.
      For example, using the boot script <fo:inline font-family="monospace">start_all.boot</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -boot start_all</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no boot script is specified, it defaults to
      <fo:inline font-family="monospace">ROOT/bin/start</fo:inline>, see <fo:inline font-style="italic">
      Default Boot Scripts</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The command-line flag <fo:inline font-family="monospace">-init_debug</fo:inline> makes the <fo:inline font-family="monospace">init</fo:inline>
      process write some debug information while interpreting the boot
      script:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -init_debug</fo:inline>
{progress,preloaded}
{progress,kernel_load_completed}
{progress,modules_loaded}
{start,heart}
{start,error_logger}
...</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a detailed description of the syntax and contents of the
    boot script, see the <fo:inline font-family="monospace">script(4)</fo:inline> manual page in SASL.</fo:block>

    <fo:block id="idp1065440" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Default Boot Scripts</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang/OTP comes with these boot scripts:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">start_clean.boot</fo:inline> - Loads the code for and starts
	the applications Kernel and STDLIB.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">start_sasl.boot</fo:inline> - Loads the code for and starts
	the applications Kernel, STDLIB, and
	SASL).</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_dot_erlang.boot</fo:inline> - Loads the code for and
	starts the applications Kernel and STDLIB.
	Skips loading the file <fo:inline font-family="monospace">.erlang</fo:inline>. Useful for scripts and
	other tools that are to behave the same irrespective of user
	preferences.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Which of <fo:inline font-family="monospace">start_clean</fo:inline> and <fo:inline font-family="monospace">start_sasl</fo:inline> to use as
        default is decided by the user when installing Erlang/OTP using
        <fo:inline font-family="monospace">Install</fo:inline>. The user is asked "Do you want to use a minimal
        system startup instead of the SASL startup". If the answer is
        yes, then <fo:inline font-family="monospace">start_clean</fo:inline> is used, otherwise
        <fo:inline font-family="monospace">start_sasl</fo:inline> is used. A copy of the selected boot script is
	made, named <fo:inline font-family="monospace">start.boot</fo:inline> and placed in directory
        <fo:inline font-family="monospace">ROOT/bin</fo:inline>.</fo:block>
    

    <fo:block id="idp1154704" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">User-Defined Boot Scripts</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is sometimes useful or necessary to create a user-defined
        boot script. This is true especially when running Erlang in
        embedded mode, see <fo:inline font-style="italic">
        Code Loading Strategy</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A boot script can be written manually. However, it is
        recommended to create a boot script by generating it from a
        release resource file <fo:inline font-family="monospace">Name.rel</fo:inline>, using the function
        <fo:inline font-family="monospace">systools:make_script/1,2</fo:inline>. This requires that the source
        code is structured as applications according to the OTP design
        principles. (The program does not have to be started in terms of
        OTP applications, but can be plain Erlang).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information about <fo:inline font-family="monospace">.rel</fo:inline> files, see
        <fo:inline font-style="italic">
        OTP Design Principles</fo:inline> and the
        <fo:inline font-style="italic">rel(4)</fo:inline> manual page in
	SASL.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The binary boot script file <fo:inline font-family="monospace">Name.boot</fo:inline> is generated from
        the boot script file <fo:inline font-family="monospace">Name.script</fo:inline>, using the function
        <fo:inline font-family="monospace">systools:script2boot(File)</fo:inline>.</fo:block>
    
  <fo:block id="idp1147152" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.1.4 
      Code Loading Strategy</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime system can be started in either <fo:inline font-weight="bold">embedded</fo:inline> or
      <fo:inline font-weight="bold">interactive</fo:inline> mode. Which one is decided by the
      command-line flag <fo:inline font-family="monospace">-mode</fo:inline>.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -mode embedded</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default mode is <fo:inline font-family="monospace">interactive</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The mode properties are as follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>In embedded mode, all code is loaded during system startup
       according to the boot script. (Code can also be loaded later
       by explicitly ordering the code server to do so.)</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>In interactive mode, the code is dynamically loaded when first
       referenced. When a call to a function in a module is made, and
       the module is not loaded, the code server searches the code path
       and loads the module into the system.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initially, the code path consists of the current
      working directory and all object code directories under
      <fo:inline font-family="monospace">ROOT/lib</fo:inline>, where <fo:inline font-family="monospace">ROOT</fo:inline> is the installation directory
      of Erlang/OTP. Directories can be named <fo:inline font-family="monospace">Name[-Vsn]</fo:inline>. The
      code server, by default, chooses the directory with
      the highest version number among those which have the same
      <fo:inline font-family="monospace">Name</fo:inline>. The <fo:inline font-family="monospace">-Vsn</fo:inline> suffix is optional. If an
      <fo:inline font-family="monospace">ebin</fo:inline> directory exists under the <fo:inline font-family="monospace">Name[-Vsn]</fo:inline>
      directory, this directory is added to the code path.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code path can be extended by using the command-line flags
      <fo:inline font-family="monospace">-pa Directories</fo:inline> and <fo:inline font-family="monospace">-pz Directories</fo:inline>. These add
      <fo:inline font-family="monospace">Directories</fo:inline> to the head or the end of the code path,
      respectively. Example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -pa /home/arne/mycode</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code server module <fo:inline font-family="monospace">code</fo:inline> contains a number of
      functions for modifying and checking the search path, see the
      <fo:inline font-family="monospace">code(3)</fo:inline> manual page in Kernel.</fo:block>
  <fo:block id="idp1047376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.1.5 
      File Types</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following file types are defined in Erlang/OTP:</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">File Type</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">File Name/Extension</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Documented in</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Module</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">.erl</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">
          <fo:inline font-style="italic">
          Erlang Reference Manual</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Include file</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">.hrl</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">
          <fo:inline font-style="italic">
          Erlang Reference Manual</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Release resource file</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">.rel</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">
          <fo:inline font-style="italic">rel(4)</fo:inline>
          manual page in SASL</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Application resource file</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">.app</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">
          <fo:inline font-style="italic">app(4)</fo:inline>
          manual page in Kernel</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Boot script</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">.script</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">
          <fo:inline font-style="italic">script(4)</fo:inline>
          manual page in SASL</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Binary boot script</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">.boot</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">-</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Configuration file</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">.config</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">
          <fo:inline font-style="italic">config(4)</fo:inline>
          manual page in Kernel</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Application upgrade file</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">.appup</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">
          <fo:inline font-style="italic">appup(4)</fo:inline>
          manual page in SASL</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Release upgrade file</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">relup</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">
          <fo:inline font-style="italic">relup(4)</fo:inline>
          manual page in SASL</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        1.1:
         
        File Types</fo:block>
  <fo:block id="idp292128" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">2.2  Error Logging</fo:marker>2.2  Error Logging</fo:block><fo:block id="idp651984" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.2.1 
      Error Information From the Runtime System</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Error information from the runtime system, that is, information
      about a process terminating because of an uncaught error exception,
      is by default written to terminal (tty):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
=ERROR REPORT==== 9-Dec-2003::13:25:02 ===
Error in process &lt;0.27.0&gt; with exit value: {{badmatch,[1,2,3]},[{m,f,1},{shell,eval_loop,2}]}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The error information is handled by the <fo:inline font-weight="bold">error logger</fo:inline>, a
      system process registered as <fo:inline font-family="monospace">error_logger</fo:inline>. This process
      receives all error messages from the Erlang runtime system as
      well as from the standard behaviours and different Erlang/OTP
      applications.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The exit reasons (such as <fo:inline font-family="monospace">badarg</fo:inline>) used by
      the runtime system are described in
      <fo:inline font-style="italic">
      Errors and Error Handling</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about the process <fo:inline font-family="monospace">error_logger</fo:inline> and its user
      interface (with the same name), see the
      <fo:inline font-style="italic">error_logger(3)</fo:inline>
      manual page in Kernel. The system can be configured so that
      error information
      is written to file or to tty, or both. In addition, user-defined
      applications can send and format error information using
      <fo:inline font-family="monospace">error_logger</fo:inline>.</fo:block>
  <fo:block id="idp380848" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.2.2 
      SASL Error Logging</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The standard behaviours (<fo:inline font-family="monospace">supervisor</fo:inline>, <fo:inline font-family="monospace">gen_server</fo:inline>,
      and so on) send progress and error information to <fo:inline font-family="monospace">error_logger</fo:inline>.
      If the SASL application is started, this information is
      written to tty as well. For more information, see
      <fo:inline font-style="italic">SASL Error Logging</fo:inline>
      in the SASL User's Guide.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -boot start_sasl</fo:inline>
Erlang (BEAM) emulator version 5.4.13 [hipe] [threads:0] [kernel-poll]


=PROGRESS REPORT==== 31-Mar-2006::12:45:58 ===
          supervisor: {local,sasl_safe_sup}
             started: [{pid,&lt;0.33.0&gt;},
                       {name,alarm_handler},
                       {mfa,{alarm_handler,start_link,[]}},
                       {restart_type,permanent},
                       {shutdown,2000},
                       {child_type,worker}]

=PROGRESS REPORT==== 31-Mar-2006::12:45:58 ===
          supervisor: {local,sasl_safe_sup}
             started: [{pid,&lt;0.34.0&gt;},
                       {name,overload},
                       {mfa,{overload,start_link,[]}},
                       {restart_type,permanent},
                       {shutdown,2000},
                       {child_type,worker}]

=PROGRESS REPORT==== 31-Mar-2006::12:45:58 ===
          supervisor: {local,sasl_sup}
             started: [{pid,&lt;0.32.0&gt;},
                       {name,sasl_safe_sup},
                       {mfa,{supervisor,
                                start_link,
                                [{local,sasl_safe_sup},sasl,safe]}},
                       {restart_type,permanent},
                       {shutdown,infinity},
                       {child_type,supervisor}]

=PROGRESS REPORT==== 31-Mar-2006::12:45:58 ===
          supervisor: {local,sasl_sup}
             started: [{pid,&lt;0.35.0&gt;},
                       {name,release_handler},
                       {mfa,{release_handler,start_link,[]}},
                       {restart_type,permanent},
                       {shutdown,2000},
                       {child_type,worker}]

=PROGRESS REPORT==== 31-Mar-2006::12:45:58 ===
         application: sasl
          started_at: nonode@nohost
Eshell V5.4.13  (abort with ^G)
1&gt; </fo:block>
  <fo:block id="idp295120" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">2.3  Creating and Upgrading a Target System</fo:marker>2.3  Creating and Upgrading a Target System</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When creating a system using Erlang/OTP, the simplest way is
      to install Erlang/OTP somewhere, install the application-specific
      code somewhere else, and then start the Erlang runtime system,
      making sure the code path includes the application-specific code.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is often not desirable to use an Erlang/OTP system as is. A
      developer can create new Erlang/OTP-compliant applications for a
      particular purpose, and several original Erlang/OTP applications
      can be irrelevant for the purpose in question. Thus, there is a
      need to be able to create a new system based on a given
      Erlang/OTP system, where dispensable applications are removed
      and new applications are included. Documentation and
      source code is irrelevant and is therefore not included in the
      new system.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This chapter is about creating such a system, which is called a
      <fo:inline font-weight="bold">target system</fo:inline>.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following sections deal with target systems
      with different requirements of functionality:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-weight="bold">basic target system</fo:inline> that can be started by
       calling the ordinary <fo:inline font-family="monospace">erl</fo:inline> script.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-weight="bold">simple target system</fo:inline> where also code
       replacement in runtime can be performed.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>An <fo:inline font-weight="bold">embedded target system</fo:inline> where there is also
       support for logging output from the system to file for later
       inspection, and where the system can be started automatically
       at boot time.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here is only considered the case when Erlang/OTP is running on a
      UNIX system.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">sasl</fo:inline> application includes the example Erlang
      module <fo:inline font-family="monospace">target_system.erl</fo:inline>, which contains functions for
      creating and installing a target system. This module is used in
      the following examples. The source code of the module is listed
      in <fo:inline font-style="italic">
      Listing of target_system.erl</fo:inline></fo:block><fo:block id="idp1078368" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.3.1 
      Creating a Target System</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that you have a working Erlang/OTP system structured
      according to the OTP design principles.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1.</fo:inline> Create a <fo:inline font-family="monospace">.rel</fo:inline> file (see the
      <fo:inline font-style="italic">rel(4)</fo:inline> manual page in
      SASL), which specifies the ERTS version and lists
      all applications that are to be included in the new basic target
      system. An example is the following <fo:inline font-family="monospace">mysystem.rel</fo:inline> file:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% mysystem.rel
{release,
 {"MYSYSTEM", "FIRST"},
 {erts, "5.10.4"},
 [{kernel, "2.16.4"},
  {stdlib, "1.19.4"},
  {sasl, "2.3.4"},
  {pea, "1.0"}]}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The listed applications are not only original Erlang/OTP
      applications but possibly also new applications that you have
      written (here exemplified by the application Pea (<fo:inline font-family="monospace">pea</fo:inline>)).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2.</fo:inline> Start Erlang/OTP from the directory where
      the <fo:inline font-family="monospace">mysystem.rel</fo:inline> file resides:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
os&gt; <fo:inline font-weight="bold">erl -pa /home/user/target_system/myapps/pea-1.0/ebin</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here also the path to the <fo:inline font-family="monospace">pea-1.0</fo:inline> ebin directory is
      provided.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 3.</fo:inline> Create the target system:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">target_system:create("mysystem").</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">target_system:create/1</fo:inline> performs the
      following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Reads the file <fo:inline font-family="monospace">mysystem.rel</fo:inline> and creates a new file
      <fo:inline font-family="monospace">plain.rel</fo:inline> that is identical to the former, except that it
       only lists the Kernel and STDLIB applications.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>From the files <fo:inline font-family="monospace">mysystem.rel</fo:inline> and <fo:inline font-family="monospace">plain.rel</fo:inline>
       creates the files <fo:inline font-family="monospace">mysystem.script</fo:inline>,
      <fo:inline font-family="monospace">mysystem.boot</fo:inline>, <fo:inline font-family="monospace">plain.script</fo:inline>, and
      <fo:inline font-family="monospace">plain.boot</fo:inline> through a call to
      <fo:inline font-family="monospace">systools:make_script/2</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates the file <fo:inline font-family="monospace">mysystem.tar.gz</fo:inline> by a call to
          <fo:inline font-family="monospace">systools:make_tar/2</fo:inline>. That file has the following
          contents:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erts-5.10.4/bin/
releases/FIRST/start.boot
releases/FIRST/mysystem.rel
releases/mysystem.rel
lib/kernel-2.16.4/
lib/stdlib-1.19.4/
lib/sasl-2.3.4/
lib/pea-1.0/</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file <fo:inline font-family="monospace">releases/FIRST/start.boot</fo:inline> is a copy of our
          <fo:inline font-family="monospace">mysystem.boot</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The release resource file <fo:inline font-family="monospace">mysystem.rel</fo:inline> is duplicated
          in the tar file. Originally, this file was only stored in
          the <fo:inline font-family="monospace">releases</fo:inline> directory to make it possible
          for the <fo:inline font-family="monospace">release_handler</fo:inline> to extract this file
          separately. After unpacking the tar
          file, <fo:inline font-family="monospace">release_handler</fo:inline> would automatically copy the
          file to <fo:inline font-family="monospace">releases/FIRST</fo:inline>. However, sometimes the tar
          file is unpacked without involving
          the <fo:inline font-family="monospace">release_handler</fo:inline> (for example, when unpacking the
          first target system). The file is therefore now instead
          duplicated in the tar file so no manual copying is
          needed.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Creates the temporary directory <fo:inline font-family="monospace">tmp</fo:inline> and extracts
      the tar file <fo:inline font-family="monospace">mysystem.tar.gz</fo:inline> into that directory.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Deletes the files <fo:inline font-family="monospace">erl</fo:inline> and <fo:inline font-family="monospace">start</fo:inline> from
      <fo:inline font-family="monospace">tmp/erts-5.10.4/bin</fo:inline>. These files are created again from
      source when installing the release.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Creates the directory <fo:inline font-family="monospace">tmp/bin</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Copies the previously created file <fo:inline font-family="monospace">plain.boot</fo:inline> to
      <fo:inline font-family="monospace">tmp/bin/start.boot</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Copies the files <fo:inline font-family="monospace">epmd</fo:inline>, <fo:inline font-family="monospace">run_erl</fo:inline>, and
      <fo:inline font-family="monospace">to_erl</fo:inline> from the directory <fo:inline font-family="monospace">tmp/erts-5.10.4/bin</fo:inline> to
       the directory <fo:inline font-family="monospace">tmp/bin</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Creates the directory <fo:inline font-family="monospace">tmp/log</fo:inline>, which is used
       if the system is started as embedded with the <fo:inline font-family="monospace">bin/start</fo:inline>
       script.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Creates the file <fo:inline font-family="monospace">tmp/releases/start_erl.data</fo:inline> with
       the contents "5.10.4 FIRST". This file is to be passed as data
       file to the <fo:inline font-family="monospace">start_erl</fo:inline> script.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Recreates the file <fo:inline font-family="monospace">mysystem.tar.gz</fo:inline> from the directories
       in the directory <fo:inline font-family="monospace">tmp</fo:inline> and removes <fo:inline font-family="monospace">tmp</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1058416" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.3.2 
      Installing a Target System</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 4.</fo:inline> Install the created target system in a
      suitable directory.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">target_system:install("mysystem", "/usr/local/erl-target").</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">target_system:install/2</fo:inline> performs the following:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Extracts the tar file <fo:inline font-family="monospace">mysystem.tar.gz</fo:inline> into the target
       directory <fo:inline font-family="monospace">/usr/local/erl-target</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>In the target directory reads the file
      <fo:inline font-family="monospace">releases/start_erl.data</fo:inline> to find the Erlang runtime system
       version ("5.10.4").</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Substitutes <fo:inline font-family="monospace">%FINAL_ROOTDIR%</fo:inline> and <fo:inline font-family="monospace">%EMU%</fo:inline> for
      <fo:inline font-family="monospace">/usr/local/erl-target</fo:inline> and <fo:inline font-family="monospace">beam</fo:inline>, respectively, in
       the files <fo:inline font-family="monospace">erl.src</fo:inline>, <fo:inline font-family="monospace">start.src</fo:inline>, and
      <fo:inline font-family="monospace">start_erl.src</fo:inline> of the target <fo:inline font-family="monospace">erts-5.10.4/bin</fo:inline>
       directory, and puts the resulting files <fo:inline font-family="monospace">erl</fo:inline>,
      <fo:inline font-family="monospace">start</fo:inline>, and <fo:inline font-family="monospace">run_erl</fo:inline> in the target <fo:inline font-family="monospace">bin</fo:inline>
       directory.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Finally the target <fo:inline font-family="monospace">releases/RELEASES</fo:inline> file is created
       from data in the file <fo:inline font-family="monospace">releases/mysystem.rel</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1231504" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.3.3 
      Starting a Target System</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now we have a target system that can be started in various ways.
      We start it as a <fo:inline font-weight="bold">basic target system</fo:inline> by invoking:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
os&gt; <fo:inline font-weight="bold">/usr/local/erl-target/bin/erl</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here only the Kernel and STDLIB applications are
      started, that is, the system is started as an ordinary development
      system. Only two files are needed for all this to work:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bin/erl</fo:inline> (obtained from
	<fo:inline font-family="monospace">erts-5.10.4/bin/erl.src</fo:inline>)</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bin/start.boot</fo:inline> (a copy of
	<fo:inline font-family="monospace">plain.boot</fo:inline>)</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We can also start a distributed system (requires <fo:inline font-family="monospace">bin/epmd</fo:inline>).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To start all applications specified in the original
      <fo:inline font-family="monospace">mysystem.rel</fo:inline> file, use flag <fo:inline font-family="monospace">-boot</fo:inline> as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
os&gt; <fo:inline font-weight="bold">/usr/local/erl-target/bin/erl -boot /usr/local/erl-target/releases/FIRST/start</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We start a <fo:inline font-weight="bold">simple target system</fo:inline> as above. The only
      difference is that also the file <fo:inline font-family="monospace">releases/RELEASES</fo:inline> is
      present for code replacement in runtime to work.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To start an <fo:inline font-weight="bold">embedded target system</fo:inline>, the shell script
      <fo:inline font-family="monospace">bin/start</fo:inline> is used. The script calls
      <fo:inline font-family="monospace">bin/run_erl</fo:inline>, which in turn calls <fo:inline font-family="monospace">bin/start_erl</fo:inline>
      (roughly, <fo:inline font-family="monospace">start_erl</fo:inline> is an embedded variant of
      <fo:inline font-family="monospace">erl</fo:inline>).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The shell script <fo:inline font-family="monospace">start</fo:inline>, which is generated from
      erts-5.10.4/bin/start.src during installation, is only an
      example. Edit it to suite your needs. Typically it is
      executed when the UNIX system boots.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">run_erl</fo:inline> is a wrapper that provides logging of output from
      the runtime system to file. It also provides a simple mechanism
      for attaching to the Erlang shell (<fo:inline font-family="monospace">to_erl</fo:inline>).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">start_erl</fo:inline> requires:</fo:block>
     <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The root directory (<fo:inline font-family="monospace">"/usr/local/erl-target"</fo:inline>)</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The releases directory
	(<fo:inline font-family="monospace">"/usr/local/erl-target/releases"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The location of the file <fo:inline font-family="monospace">start_erl.data</fo:inline></fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It performs the following:</fo:block>
     <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Reads the runtime system version (<fo:inline font-family="monospace">"5.10.4"</fo:inline>) and
	release version (<fo:inline font-family="monospace">"FIRST"</fo:inline>) from the file
	<fo:inline font-family="monospace">start_erl.data</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Starts the runtime system of the version found.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Provides the flag <fo:inline font-family="monospace">-boot</fo:inline> specifying the boot
	file of the release version found
	(<fo:inline font-family="monospace">"releases/FIRST/start.boot"</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">start_erl</fo:inline> also assumes that there is <fo:inline font-family="monospace">sys.config</fo:inline>
      in the release version directory (<fo:inline font-family="monospace">"releases/FIRST/sys.config"</fo:inline>).
      That is the topic of the next section.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">start_erl</fo:inline> shell script is normally not to be
      altered by the user.</fo:block>
  <fo:block id="idp1275840" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.3.4 
      System Configuration Parameters</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As was mentioned in the previous section, <fo:inline font-family="monospace">start_erl</fo:inline>
      requires a <fo:inline font-family="monospace">sys.config</fo:inline> in the release version directory
      (<fo:inline font-family="monospace">"releases/FIRST/sys.config"</fo:inline>). If there is no such
      file, the system start fails. Such a file must therefore
      also be added.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you have system configuration data that is neither
      file-location-dependent nor site-dependent, it can be convenient
      to create <fo:inline font-family="monospace">sys.config</fo:inline> early, so it becomes part of
      the target system tar file created by
      <fo:inline font-family="monospace">target_system:create/1</fo:inline>. In fact, if you in the
      current directory create not only the file <fo:inline font-family="monospace">mysystem.rel</fo:inline>,
      but also file <fo:inline font-family="monospace">sys.config</fo:inline>, the latter file is tacitly
      put in the appropriate directory.</fo:block>
  <fo:block id="idp1280864" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.3.5 
      Differences From the Install Script</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The previous <fo:inline font-family="monospace">install/2</fo:inline> procedure differs somewhat from that
      of the ordinary <fo:inline font-family="monospace">Install</fo:inline> shell script. In fact, <fo:inline font-family="monospace">create/1</fo:inline>
      makes the release package as complete as possible, and leave to the
      <fo:inline font-family="monospace">install/2</fo:inline> procedure to finish by only considering
      location-dependent files.</fo:block>
  <fo:block id="idp1283936" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.3.6 
      Creating the Next Version</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example the Pea application has been changed, and
      so are the applications ERTS, Kernel, STDLIB
      and SASL.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1.</fo:inline> Create the file <fo:inline font-family="monospace">.rel</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% mysystem2.rel
{release,
 {"MYSYSTEM", "SECOND"},
 {erts, "6.0"},
 [{kernel, "3.0"},
  {stdlib, "2.0"},
  {sasl, "2.4"},
  {pea, "2.0"}]}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2.</fo:inline> Create the application upgrade file (see the
      <fo:inline font-style="italic">appup(4)</fo:inline> manual page in
      SASL) for Pea, for example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% pea.appup
{"2.0",
 [{"1.0",[{load_module,pea_lib}]}],
 [{"1.0",[{load_module,pea_lib}]}]}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 3.</fo:inline> From the directory where the file
      <fo:inline font-family="monospace">mysystem2.rel</fo:inline> resides, start the Erlang/OTP system,
      giving the path to the new version of Pea:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
os&gt; <fo:inline font-weight="bold">erl -pa /home/user/target_system/myapps/pea-2.0/ebin</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 4.</fo:inline> Create the release upgrade file (see the
      <fo:inline font-style="italic">relup(4)</fo:inline> manual page in
      SASL):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">systools:make_relup("mysystem2",["mysystem"],["mysystem"],
    [{path,["/home/user/target_system/myapps/pea-1.0/ebin",
    "/my/old/erlang/lib/*/ebin"]}]).</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here <fo:inline font-family="monospace">"mysystem"</fo:inline> is the base release and
      <fo:inline font-family="monospace">"mysystem2"</fo:inline> is the release to upgrade to.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">path</fo:inline> option is used for pointing out the
      old version of all applications. (The new versions are already
      in the code path - assuming of course that the Erlang node on
      which this is executed is running the correct version of
      Erlang/OTP.)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 5.</fo:inline> Create the new release:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">target_system:create("mysystem2").</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Given that the file <fo:inline font-family="monospace">relup</fo:inline> generated in Step 4 is
      now located in the current directory, it is automatically
      included in the release package.</fo:block>
  <fo:block id="idp1298800" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.3.7 
      Upgrading the Target System</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This part is done on the target node, and for this example we
      want the node to be running as an embedded system with the
      <fo:inline font-family="monospace">-heart</fo:inline> option, allowing automatic restart of the node.
      For more information, see  <fo:inline font-style="italic">
      Starting a Target System</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We add <fo:inline font-family="monospace">-heart</fo:inline> to <fo:inline font-family="monospace">bin/start</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#!/bin/sh
ROOTDIR=/usr/local/erl-target/

if [ -z "$RELDIR" ]
then
   RELDIR=$ROOTDIR/releases
fi

START_ERL_DATA=${1:-$RELDIR/start_erl.data}

$ROOTDIR/bin/run_erl -daemon /tmp/ $ROOTDIR/log "exec $ROOTDIR/bin/start_erl $ROOTDIR\
$RELDIR $START_ERL_DATA -heart</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We use the simplest possible <fo:inline font-family="monospace">sys.config</fo:inline>, which we
      store in <fo:inline font-family="monospace">releases/FIRST</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% sys.config
[].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Finally, to prepare the upgrade, we must put the new
      release package in the <fo:inline font-family="monospace">releases</fo:inline> directory of the first
      target system:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
os&gt; <fo:inline font-weight="bold">cp mysystem2.tar.gz /usr/local/erl-target/releases</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assuming that the node has been started as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
os&gt; <fo:inline font-weight="bold">/usr/local/erl-target/bin/start</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It can be accessed as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
os&gt; <fo:inline font-weight="bold">/usr/local/erl-target/bin/to_erl /tmp/erlang.pipe.1</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Logs can be found in
      <fo:inline font-family="monospace">/usr/local/erl-target/log</fo:inline>. This directory is specified as
      an argument to <fo:inline font-family="monospace">run_erl</fo:inline>in the start script listed above.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      <fo:inline font-weight="bold">Step 1.</fo:inline> Unpack the release:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">{ok,Vsn} = release_handler:unpack_release("mysystem2").</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      <fo:inline font-weight="bold">Step 2.</fo:inline> Install the release:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">release_handler:install_release(Vsn).</fo:inline>
{continue_after_restart,"FIRST",[]}
heart: Tue Apr  1 12:15:10 2014: Erlang has closed.
heart: Tue Apr  1 12:15:11 2014: Executed "/usr/local/erl-target/bin/start /usr/local/erl-target/releases/new_start_erl.data" -&gt; 0. Terminating.
[End]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The above return value and output after the call to
      <fo:inline font-family="monospace">release_handler:install_release/1</fo:inline> means that the
      <fo:inline font-family="monospace">release_handler</fo:inline> has restarted the node by using
      <fo:inline font-family="monospace">heart</fo:inline>. This is always done when the upgrade involves
      a change of the applications ERTS, Kernel,
      STDLIB, or SASL. For more information, see
      <fo:inline font-style="italic">
      Upgrade when Erlang/OTP has Changed</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The node is accessible through a new pipe:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
os&gt; <fo:inline font-weight="bold">/usr/local/erl-target/bin/to_erl /tmp/erlang.pipe.2</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Check which releases there are in the system:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">release_handler:which_releases().</fo:inline>
[{"MYSYSTEM","SECOND",
  ["kernel-3.0","stdlib-2.0","sasl-2.4","pea-2.0"],
  current},
 {"MYSYSTEM","FIRST",
  ["kernel-2.16.4","stdlib-1.19.4","sasl-2.3.4","pea-1.0"],
  permanent}]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Our new release, "SECOND", is now the current release, but we
      can also see that our "FIRST" release is still permanent. This
      means that if the node would be restarted now, it
      would come up running the "FIRST" release again.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      <fo:inline font-weight="bold">Step 3.</fo:inline> Make the new release permanent:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">release_handler:make_permanent("SECOND").</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Check the releases again:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; <fo:inline font-weight="bold">release_handler:which_releases().</fo:inline>
[{"MYSYSTEM","SECOND",
  ["kernel-3.0","stdlib-2.0","sasl-2.4","pea-2.0"],
  permanent},
 {"MYSYSTEM","FIRST",
  ["kernel-2.16.4","stdlib-1.19.4","sasl-2.3.4","pea-1.0"],
  old}]</fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
    We see that the new release version is <fo:inline font-family="monospace">permanent</fo:inline>, so
    it would be safe to restart the node.</fo:block>
  <fo:block id="idp1325200" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.3.8 
      Listing of target_system.erl</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module can also be found in the <fo:inline font-family="monospace">examples</fo:inline> directory
      of the SASL application.</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-module(target_system).
-export([create/1, create/2, install/2]).

%% Note: RelFileName below is the *stem* without trailing .rel,
%% .script etc.
%%

%% create(RelFileName)
%%
create(RelFileName) -&gt;
    create(RelFileName,[]).

create(RelFileName,SystoolsOpts) -&gt;
    RelFile = RelFileName ++ ".rel", 
    Dir = filename:dirname(RelFileName),
    PlainRelFileName = filename:join(Dir,"plain"),
    PlainRelFile = PlainRelFileName ++ ".rel",
    io:fwrite("Reading file: ~tp ...~n", [RelFile]),
    {ok, [RelSpec]} = file:consult(RelFile),
    io:fwrite("Creating file: ~tp from ~tp ...~n",
              [PlainRelFile, RelFile]),
    {release,
     {RelName, RelVsn},
     {erts, ErtsVsn},
     AppVsns} = RelSpec,
    PlainRelSpec = {release, 
                    {RelName, RelVsn},
                    {erts, ErtsVsn},
                    lists:filter(fun({kernel, _}) -&gt; 
                                         true;
                                    ({stdlib, _}) -&gt;
                                         true;
                                    (_) -&gt;
                                         false
                                 end, AppVsns)
                   },
    {ok, Fd} = file:open(PlainRelFile, [write]),
    io:fwrite(Fd, "~p.~n", [PlainRelSpec]),
    file:close(Fd),

    io:fwrite("Making \"~ts.script\" and \"~ts.boot\" files ...~n",
	      [PlainRelFileName,PlainRelFileName]),
    make_script(PlainRelFileName,SystoolsOpts),

    io:fwrite("Making \"~ts.script\" and \"~ts.boot\" files ...~n",
              [RelFileName, RelFileName]),
    make_script(RelFileName,SystoolsOpts),

    TarFileName = RelFileName ++ ".tar.gz",
    io:fwrite("Creating tar file ~tp ...~n", [TarFileName]),
    make_tar(RelFileName,SystoolsOpts),

    TmpDir = filename:join(Dir,"tmp"),
    io:fwrite("Creating directory ~tp ...~n",[TmpDir]),
    file:make_dir(TmpDir), 

    io:fwrite("Extracting ~tp into directory ~tp ...~n", [TarFileName,TmpDir]),
    extract_tar(TarFileName, TmpDir),

    TmpBinDir = filename:join([TmpDir, "bin"]),
    ErtsBinDir = filename:join([TmpDir, "erts-" ++ ErtsVsn, "bin"]),
    io:fwrite("Deleting \"erl\" and \"start\" in directory ~tp ...~n",
              [ErtsBinDir]),
    file:delete(filename:join([ErtsBinDir, "erl"])),
    file:delete(filename:join([ErtsBinDir, "start"])),

    io:fwrite("Creating temporary directory ~tp ...~n", [TmpBinDir]),
    file:make_dir(TmpBinDir),

    io:fwrite("Copying file \"~ts.boot\" to ~tp ...~n",
              [PlainRelFileName, filename:join([TmpBinDir, "start.boot"])]),
    copy_file(PlainRelFileName++".boot",filename:join([TmpBinDir, "start.boot"])),

    io:fwrite("Copying files \"epmd\", \"run_erl\" and \"to_erl\" from \n"
              "~tp to ~tp ...~n",
              [ErtsBinDir, TmpBinDir]),
    copy_file(filename:join([ErtsBinDir, "epmd"]), 
              filename:join([TmpBinDir, "epmd"]), [preserve]),
    copy_file(filename:join([ErtsBinDir, "run_erl"]), 
              filename:join([TmpBinDir, "run_erl"]), [preserve]),
    copy_file(filename:join([ErtsBinDir, "to_erl"]), 
              filename:join([TmpBinDir, "to_erl"]), [preserve]),

    %% This is needed if 'start' script created from 'start.src' shall
    %% be used as it points out this directory as log dir for 'run_erl'
    TmpLogDir = filename:join([TmpDir, "log"]),
    io:fwrite("Creating temporary directory ~tp ...~n", [TmpLogDir]),
    ok = file:make_dir(TmpLogDir),

    StartErlDataFile = filename:join([TmpDir, "releases", "start_erl.data"]),
    io:fwrite("Creating ~tp ...~n", [StartErlDataFile]),
    StartErlData = io_lib:fwrite("~s ~s~n", [ErtsVsn, RelVsn]),
    write_file(StartErlDataFile, StartErlData),
    
    io:fwrite("Recreating tar file ~tp from contents in directory ~tp ...~n",
	      [TarFileName,TmpDir]),
    {ok, Tar} = erl_tar:open(TarFileName, [write, compressed]),
    %% {ok, Cwd} = file:get_cwd(),
    %% file:set_cwd("tmp"),
    ErtsDir = "erts-"++ErtsVsn,
    erl_tar:add(Tar, filename:join(TmpDir,"bin"), "bin", []),
    erl_tar:add(Tar, filename:join(TmpDir,ErtsDir), ErtsDir, []),
    erl_tar:add(Tar, filename:join(TmpDir,"releases"), "releases", []),
    erl_tar:add(Tar, filename:join(TmpDir,"lib"), "lib", []),
    erl_tar:add(Tar, filename:join(TmpDir,"log"), "log", []),
    erl_tar:close(Tar),
    %% file:set_cwd(Cwd),
    io:fwrite("Removing directory ~tp ...~n",[TmpDir]),
    remove_dir_tree(TmpDir),
    ok.


install(RelFileName, RootDir) -&gt;
    TarFile = RelFileName ++ ".tar.gz", 
    io:fwrite("Extracting ~tp ...~n", [TarFile]),
    extract_tar(TarFile, RootDir),
    StartErlDataFile = filename:join([RootDir, "releases", "start_erl.data"]),
    {ok, StartErlData} = read_txt_file(StartErlDataFile),
    [ErlVsn, _RelVsn| _] = string:tokens(StartErlData, " \n"),
    ErtsBinDir = filename:join([RootDir, "erts-" ++ ErlVsn, "bin"]),
    BinDir = filename:join([RootDir, "bin"]),
    io:fwrite("Substituting in erl.src, start.src and start_erl.src to "
              "form erl, start and start_erl ...\n"),
    subst_src_scripts(["erl", "start", "start_erl"], ErtsBinDir, BinDir, 
                      [{"FINAL_ROOTDIR", RootDir}, {"EMU", "beam"}],
                      [preserve]),
    %%! Workaround for pre OTP 17.0: start.src and start_erl.src did
    %%! not have correct permissions, so the above 'preserve' option did not help
    ok = file:change_mode(filename:join(BinDir,"start"),8#0755),
    ok = file:change_mode(filename:join(BinDir,"start_erl"),8#0755),

    io:fwrite("Creating the RELEASES file ...\n"),
    create_RELEASES(RootDir, filename:join([RootDir, "releases",
					    filename:basename(RelFileName)])).

%% LOCALS 

%% make_script(RelFileName,Opts)
%%
make_script(RelFileName,Opts) -&gt;
    systools:make_script(RelFileName, [no_module_tests,
				       {outdir,filename:dirname(RelFileName)}
				       |Opts]).

%% make_tar(RelFileName,Opts)
%%
make_tar(RelFileName,Opts) -&gt;
    RootDir = code:root_dir(),
    systools:make_tar(RelFileName, [{erts, RootDir},
				    {outdir,filename:dirname(RelFileName)}
				    |Opts]).

%% extract_tar(TarFile, DestDir)
%%
extract_tar(TarFile, DestDir) -&gt;
    erl_tar:extract(TarFile, [{cwd, DestDir}, compressed]).

create_RELEASES(DestDir, RelFileName) -&gt;
    release_handler:create_RELEASES(DestDir, RelFileName ++ ".rel").

subst_src_scripts(Scripts, SrcDir, DestDir, Vars, Opts) -&gt; 
    lists:foreach(fun(Script) -&gt;
                          subst_src_script(Script, SrcDir, DestDir, 
                                           Vars, Opts)
                  end, Scripts).

subst_src_script(Script, SrcDir, DestDir, Vars, Opts) -&gt; 
    subst_file(filename:join([SrcDir, Script ++ ".src"]),
               filename:join([DestDir, Script]),
               Vars, Opts).

subst_file(Src, Dest, Vars, Opts) -&gt;
    {ok, Conts} = read_txt_file(Src),
    NConts = subst(Conts, Vars),
    write_file(Dest, NConts),
    case lists:member(preserve, Opts) of
        true -&gt;
            {ok, FileInfo} = file:read_file_info(Src),
            file:write_file_info(Dest, FileInfo);
        false -&gt;
            ok
    end.

%% subst(Str, Vars)
%% Vars = [{Var, Val}]
%% Var = Val = string()
%% Substitute all occurrences of %Var% for Val in Str, using the list
%% of variables in Vars.
%%
subst(Str, Vars) -&gt;
    subst(Str, Vars, []).

subst([$%, C| Rest], Vars, Result) when $A =&lt; C, C =&lt; $Z -&gt;
    subst_var([C| Rest], Vars, Result, []);
subst([$%, C| Rest], Vars, Result) when $a =&lt; C, C =&lt; $z -&gt;
    subst_var([C| Rest], Vars, Result, []);
subst([$%, C| Rest], Vars, Result) when  C == $_ -&gt;
    subst_var([C| Rest], Vars, Result, []);
subst([C| Rest], Vars, Result) -&gt;
    subst(Rest, Vars, [C| Result]);
subst([], _Vars, Result) -&gt;
    lists:reverse(Result).

subst_var([$%| Rest], Vars, Result, VarAcc) -&gt;
    Key = lists:reverse(VarAcc),
    case lists:keysearch(Key, 1, Vars) of
        {value, {Key, Value}} -&gt;
            subst(Rest, Vars, lists:reverse(Value, Result));
        false -&gt;
            subst(Rest, Vars, [$%| VarAcc ++ [$%| Result]])
    end;
subst_var([C| Rest], Vars, Result, VarAcc) -&gt;
    subst_var(Rest, Vars, Result, [C| VarAcc]);
subst_var([], Vars, Result, VarAcc) -&gt;
    subst([], Vars, [VarAcc ++ [$%| Result]]).

copy_file(Src, Dest) -&gt;
    copy_file(Src, Dest, []).

copy_file(Src, Dest, Opts) -&gt;
    {ok,_} = file:copy(Src, Dest),
    case lists:member(preserve, Opts) of
        true -&gt;
            {ok, FileInfo} = file:read_file_info(Src),
            file:write_file_info(Dest, FileInfo);
        false -&gt;
            ok
    end.
       
write_file(FName, Conts) -&gt;
    Enc = file:native_name_encoding(),
    {ok, Fd} = file:open(FName, [write]),
    file:write(Fd, unicode:characters_to_binary(Conts,Enc,Enc)),
    file:close(Fd).

read_txt_file(File) -&gt;
    {ok, Bin} = file:read_file(File),
    {ok, binary_to_list(Bin)}.

remove_dir_tree(Dir) -&gt;
    remove_all_files(".", [Dir]).

remove_all_files(Dir, Files) -&gt;
    lists:foreach(fun(File) -&gt;
                          FilePath = filename:join([Dir, File]),
                          case filelib:is_dir(FilePath) of
                              true -&gt;
                                  {ok, DirFiles} = file:list_dir(FilePath), 
                                  remove_all_files(FilePath, DirFiles),
                                  file:del_dir(FilePath);
                              _ -&gt;
                                  file:delete(FilePath)
                          end
                  end, Files).</fo:block>  <fo:block id="idp1341120" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">2.4  Upgrade when Erlang/OTP has Changed</fo:marker>2.4  Upgrade when Erlang/OTP has Changed</fo:block><fo:block id="idp1345216" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.4.1 
      Introduction</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As of Erlang/OTP 17, most applications deliver a valid
      application upgrade file (<fo:inline font-family="monospace">appup</fo:inline>). In earlier releases, a
      majority of the applications in Erlang/OTP did not support
      upgrade. Many of the applications use the
      <fo:inline font-family="monospace">restart_application</fo:inline> instruction. These are applications
      for which it is not crucial to support real soft upgrade, for
      example, tools and library applications. The
      <fo:inline font-family="monospace">restart_application</fo:inline> instruction
      ensures that all modules in the application are reloaded and
      thereby running the new code.</fo:block>
  <fo:block id="idp1348800" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.4.2 
      Upgrade of Core Applications</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The core applications ERTS, Kernel, STDLIB,
      and SASL never allow real soft upgrade, but require the
      Erlang emulator to be restarted. This is indicated to the
      <fo:inline font-family="monospace">release_handler</fo:inline> by the upgrade instruction
      <fo:inline font-family="monospace">restart_new_emulator</fo:inline>. This instruction is always the
      very first instruction executed, and it restarts the
      emulator with the new versions of the above mentioned core
      applications and the old versions of all other applications.
      When the node is back up, all other upgrade instructions are
      executed, making sure each application is finally running its
      new version.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It might seem strange to do a two-step upgrade instead of
      just restarting the emulator with the new version of all
      applications. The reason for this design decision is to allow
      <fo:inline font-family="monospace">code_change</fo:inline> functions to have side effects, for example,
      changing data on disk. It also guarantees that the upgrade
      mechanism for non-core applications does not differ depending
      on whether or not core applications are changed at the same time.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If, however, the more brutal variant is preferred, the
      the release upgrade file can be handwritten using only the
      single upgrade instruction <fo:inline font-family="monospace">restart_emulator</fo:inline>. This
      instruction, in contrast to <fo:inline font-family="monospace">restart_new_emulator</fo:inline>,
      causes the emulator to restart with the new versions of
      <fo:inline font-weight="bold">all</fo:inline> applications.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Note:</fo:inline> If other instructions are included before
      <fo:inline font-family="monospace">restart_emulator</fo:inline> in the handwritten <fo:inline font-family="monospace">relup</fo:inline> file,
      they are executed in the old emulator. This is a big risk
      since there is no guarantee that new beam code can be loaded
      into the old emulator. Adding instructions after
      <fo:inline font-family="monospace">restart_emulator</fo:inline> has no effect as the
      <fo:inline font-family="monospace">release_handler</fo:inline> will not execute them.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about the release upgrade file, see the
      <fo:inline font-style="italic">relup(4)</fo:inline> manual page
      in SASL.
      For more information about upgrade instructions, see the
      <fo:inline font-style="italic">appup(4)</fo:inline> manual page
      in SASL.</fo:block>
  <fo:block id="idp1359424" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.4.3 
      Applications that Still do Not Allow Code Upgrade</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A few applications, such as HiPE, do not support upgrade.
      This is indicated by an application upgrade file containing only
      <fo:inline font-family="monospace">{Vsn,[],[]}</fo:inline>. Any attempt at creating a release upgrade file
      with such input fails. The only way to force an upgrade involving
      applications like this is to
      handwrite the file <fo:inline font-family="monospace">relup</fo:inline>, preferably as described above
      with only the <fo:inline font-family="monospace">restart_emulator</fo:inline> instruction.</fo:block>
  <fo:block id="idp1366240" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">2.5  Versions</fo:marker>2.5  Versions</fo:block><fo:block id="idp1370320" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.5.1 
      OTP Version</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As of OTP release 17, the OTP release number corresponds to
    the major part of the OTP version. The OTP version as a concept was
    introduced in OTP 17. The version scheme used is described in detail in
    <fo:inline font-style="italic">Version Scheme</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OTP of a specific version is a set of applications of specific
    versions. The application versions identified by an OTP version
    corresponds to application versions that have been tested together
    by the Erlang/OTP team at Ericsson AB. An OTP system can, however, be
    put together with applications from different OTP versions. Such a
    combination of application versions has not been tested by the
    Erlang/OTP team. It is therefore <fo:inline font-weight="bold">always preferred to use OTP
    applications from one single OTP version</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Release candidates have an <fo:inline font-family="monospace">-rc&lt;N&gt;</fo:inline>
    suffix. The suffix <fo:inline font-family="monospace">-rc0</fo:inline> is used during development up to
    the first release candidate.</fo:block>

    <fo:block id="idp1375056" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Retrieving Current OTP Version</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In an OTP source code tree, the OTP version can be read from
      the text file <fo:inline font-family="monospace">&lt;OTP source root&gt;/OTP_VERSION</fo:inline>. The
      absolute path to the file can be constructed by calling
      <fo:inline font-family="monospace">filename:join([</fo:inline><fo:inline font-style="italic"><fo:inline font-family="monospace">code:root_dir()</fo:inline></fo:inline><fo:inline font-family="monospace">, "OTP_VERSION"])</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In an installed OTP development system, the OTP version can be read
      from the text file <fo:inline font-family="monospace">&lt;OTP installation root&gt;/releases/&lt;OTP release number&gt;/OTP_VERSION</fo:inline>.
      The absolute path to the file can by constructed by calling
      <fo:inline font-family="monospace">filename:join([</fo:inline><fo:inline font-style="italic"><fo:inline font-family="monospace">code:root_dir()</fo:inline></fo:inline><fo:inline font-family="monospace">, "releases", </fo:inline><fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:system_info(otp_release)</fo:inline></fo:inline><fo:inline font-family="monospace">, "OTP_VERSION"]).</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the version read from the <fo:inline font-family="monospace">OTP_VERSION</fo:inline> file in a
      development system has a <fo:inline font-family="monospace">**</fo:inline> suffix, the system has been
      patched using the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">otp_patch_apply</fo:inline></fo:inline>
      tool. In this case, the system consists of application
      versions from multiple OTP versions. The version preceding the <fo:inline font-family="monospace">**</fo:inline>
      suffix corresponds to the OTP version of the base system that
      has been patched. Notice that if a development system is updated by
      other means than <fo:inline font-family="monospace">otp_patch_apply</fo:inline>, the file <fo:inline font-family="monospace">OTP_VERSION</fo:inline>
      can identify an incorrect OTP version.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No <fo:inline font-family="monospace">OTP_VERSION</fo:inline> file is placed in a
      <fo:inline font-style="italic">target system</fo:inline> created
      by OTP tools. This since one easily can create a target system
      where it is hard to even determine the base OTP version. You can,
      however, place such a file there if you know the OTP version.</fo:block>
    

    <fo:block id="idp1386992" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">OTP Versions Table</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The text file <fo:inline font-family="monospace">&lt;OTP source root&gt;/otp_versions.table</fo:inline>,
      which is part of the source code, contains information about all
      OTP versions from OTP 17.0 up to the current OTP version. Each line
      contains information about application versions that are part of a
      specific OTP version, and has the following format:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;OtpVersion&gt; : &lt;ChangedAppVersions&gt; # &lt;UnchangedAppVersions&gt; :</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">&lt;OtpVersion&gt;</fo:inline> has the format <fo:inline font-family="monospace">OTP-&lt;VSN&gt;</fo:inline>,
      that is, the same as the git tag used to identify the source.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">&lt;ChangedAppVersions&gt;</fo:inline> and
      <fo:inline font-family="monospace">&lt;UnchangedAppVersions&gt;</fo:inline> are space-separated lists of
      application versions and has the format
      <fo:inline font-family="monospace">&lt;application&gt;-&lt;vsn&gt;</fo:inline>.</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;ChangedAppVersions&gt;</fo:inline> corresponds to changed
	applications with new version numbers in this OTP version.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;UnchangedAppVersions&gt;</fo:inline> corresponds to unchanged
	application versions in this OTP version.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Both of them can be empty, but not at the same time.
      If <fo:inline font-family="monospace">&lt;ChangedAppVersions&gt;</fo:inline> is empty, no changes have
      been made that change the build result of any application. This could,
      for example, be a pure bug fix of the build system. The order of lines
      is undefined. All white-space characters in this file are either space
      (character 32) or line-break (character 10).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By using ordinary UNIX tools like <fo:inline font-family="monospace">sed</fo:inline> and <fo:inline font-family="monospace">grep</fo:inline> one
      can easily find answers to various questions like:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Which OTP versions are <fo:inline font-family="monospace">kernel-3.0</fo:inline> part of?</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ grep ' kernel-3\.0 ' otp_versions.table</fo:inline> </fo:block></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In which OTP version was <fo:inline font-family="monospace">kernel-3.0</fo:inline> introduced?</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ sed 's/#.*//;/ kernel-3\.0 /!d' otp_versions.table</fo:inline>
	</fo:block></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The above commands give a bit more information than the exact
      answers, but adequate information when manually searching for answers
      to these questions.</fo:block>
      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The format of the <fo:inline font-family="monospace">otp_versions.table</fo:inline> might be
      subject to changes during the OTP 17 release.</fo:block></fo:block>
    
  <fo:block id="idp1402768" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.5.2 
      Application Version</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As of OTP 17.0 application versions use the same
    <fo:inline font-style="italic">version scheme</fo:inline> as the
    OTP version. Application versions part of a release candidate will
    however not have an <fo:inline font-family="monospace">-rc&lt;N&gt;</fo:inline> suffix as the OTP version.
    Also note that a major increment in an application version does not
    necessarily imply a major increment of the OTP version. This depends
    on whether the major change in the application is considered as a
    major change for OTP as a whole or not.</fo:block>
  <fo:block id="idp1405600" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.5.3 
      Version Scheme</fo:block>
    
    
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The version scheme was changed as of OTP 17.0. This implies
    that application versions used prior to OTP 17.0 do not adhere to this
    version scheme. <fo:inline font-style="italic">A list of
    application versions used in OTP 17.0</fo:inline> is included at the
    end of this section</fo:block></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the normal case, a version is constructed as
    <fo:inline font-family="monospace">&lt;Major&gt;.&lt;Minor&gt;.&lt;Patch&gt;</fo:inline>,
    where <fo:inline font-family="monospace">&lt;Major&gt;</fo:inline> is the most significant part.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, more dot-separated parts than this can exist.
    The dot-separated parts consist of non-negative integers. If
    all parts less significant than <fo:inline font-family="monospace">&lt;Minor&gt;</fo:inline> equals
    <fo:inline font-family="monospace">0</fo:inline>, they are omitted. The three normal parts
    <fo:inline font-family="monospace">&lt;Major&gt;.&lt;Minor&gt;.&lt;Patch&gt;</fo:inline> are changed as
    follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;Major&gt;</fo:inline> - Increases when major changes,
      including incompatibilities, are made.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;Minor&gt;</fo:inline> - Increases when new
      functionality is added.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">&lt;Patch&gt;</fo:inline> - Increases when pure bug fixes
      are made.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a part in the version number increases, all less significant
    parts are set to <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application version or an OTP version identifies source code
    versions. That is, it implies nothing about how the application
    or OTP has been built.</fo:block>

    <fo:block id="idp1415808" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Order of Versions</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Version numbers in general are only partially ordered. However,
      normal version numbers (with three parts) as of OTP 17.0 have a total
      or linear order. This applies both to normal OTP versions and
      normal application versions.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When comparing two version numbers that have an order, one
      compare each part as ordinary integers from the most
      significant part to less significant parts. The order is
      defined by the first parts of the same significance that
      differ. An OTP version with a larger version includes all
      changes that are part of a smaller OTP version. The same
      goes for application versions.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In general, versions can have more than three parts.
      The versions are then only partially ordered. Such
      versions are only used in exceptional cases. When an extra
      part (out of the normal three parts) is added to a version number,
      a new branch of versions is made. The new branch has a linear
      order against the base version. However, versions on different
      branches have no order, and therefore one can only conclude
      that they all include what is included in their
      closest common ancestor. When branching multiple times from the
      same base version, <fo:inline font-family="monospace">0</fo:inline> parts are added between the base
      version and the least significant <fo:inline font-family="monospace">1</fo:inline> part until a unique
      version is found. Versions that have an order can be compared
      as described in the previous paragraph.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An example of branched versions: The version <fo:inline font-family="monospace">6.0.2.1</fo:inline>
      is a branched version from the base version <fo:inline font-family="monospace">6.0.2</fo:inline>.
      Versions on the form <fo:inline font-family="monospace">6.0.2.&lt;X&gt;</fo:inline> can be compared
      with normal versions smaller than or equal to <fo:inline font-family="monospace">6.0.2</fo:inline>,
      and other versions on the form <fo:inline font-family="monospace">6.0.2.&lt;X&gt;</fo:inline>. The
      version <fo:inline font-family="monospace">6.0.2.1</fo:inline> will include all changes in
      <fo:inline font-family="monospace">6.0.2</fo:inline>. However, <fo:inline font-family="monospace">6.0.3</fo:inline> will most likely
      <fo:inline font-weight="bold">not</fo:inline> include all changes in <fo:inline font-family="monospace">6.0.2.1</fo:inline> (note that
      these versions have no order). A second branched version from the base
      version <fo:inline font-family="monospace">6.0.2</fo:inline> will be version <fo:inline font-family="monospace">6.0.2.0.1</fo:inline>, and a
      third branched version will be <fo:inline font-family="monospace">6.0.2.0.0.1</fo:inline>.</fo:block>
    
  <fo:block id="idp1426688" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">2.5.4 
      OTP 17.0 Application Versions</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following list details the application versions that
    were part of OTP 17.0. If
    the normal part of an application version number compares
    as smaller than the corresponding application version in the list,
    the version number does not adhere to the version scheme introduced
    in OTP 17.0 and is to be considered as not having an order against
    versions used as of OTP 17.0.</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">asn1-3.0</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">common_test-1.8</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">compiler-5.0</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">cosEvent-2.1.15</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">cosEventDomain-1.1.14</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">cosFileTransfer-1.1.16</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">cosNotification-1.1.21</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">cosProperty-1.1.17</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">cosTime-1.1.14</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">cosTransactions-1.2.14</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">crypto-3.3</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">debugger-4.0</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">dialyzer-2.7</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">diameter-1.6</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">edoc-0.7.13</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eldap-1.0.3</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">erl_docgen-0.3.5</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">erl_interface-3.7.16</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">erts-6.0</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">et-1.5</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eunit-2.2.7</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">gs-1.5.16</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">hipe-3.10.3</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ic-4.3.5</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">inets-5.10</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">jinterface-1.5.9</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">kernel-3.0</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">megaco-3.17.1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mnesia-4.12</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">observer-2.0</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">odbc-2.10.20</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">orber-3.6.27</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">os_mon-2.2.15</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ose-1.0</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">otp_mibs-1.0.9</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">parsetools-2.0.11</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">percept-0.8.9</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">public_key-0.22</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reltool-0.6.5</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">runtime_tools-1.8.14</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">sasl-2.4</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">snmp-4.25.1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ssh-3.0.1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ssl-5.3.4</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">stdlib-2.0</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">syntax_tools-1.6.14</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">test_server-3.7</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">tools-2.6.14</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">typer-0.9.6</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">webtool-0.8.10</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">wx-1.2</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">xmerl-1.3.7</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1085824" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">3   
      Embedded Systems User's Guide</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the issues that are specific
      for running Erlang on an embedded system.
      It describes the differences in installing and starting
      Erlang compared to how it is done for a non-embedded system.</fo:block>
      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a supplementary section. You also need to
      read Section 1 Installation Guide.</fo:block></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is also target architecture-specific information in
      the top-level README file of the Erlang distribution.</fo:block>
  <fo:block id="idp388512" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">3.1  Embedded Solaris</fo:marker>3.1  Embedded Solaris</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the operating system-specific parts
  of OTP that relate to Solaris.</fo:block><fo:block id="idp1014544" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">3.1.1 
      Memory Use</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Solaris takes about 17 MB of RAM on a system with 64 MB of
      total RAM. This leaves about 47 MB for the applications. If
      the system uses swapping, these figures cannot be improved
      because unnecessary daemon processes are swapped out. However,
      if swapping is disabled, or if the swap space is of limited
      resource in the system, it becomes necessary to kill off
      unnecessary daemon processes.</fo:block>
  <fo:block id="idp491408" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">3.1.2 
      Disk Space Use</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The disk space required by Solaris can be minimized by using the
      Core User support installation. It requires about 80 MB of
      disk space. This installs only the minimum software required to
      boot and run Solaris. The disk space can be further reduced by
      deleting unnecessary individual files. However, unless disk
      space is a critical resource the effort required and the risks
      involved cannot be justified.</fo:block>
  <fo:block id="idp1034048" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">3.1.3 
      Installing an Embedded System</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section is about installing an embedded system.
      The following topics are considered:
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Creating user and installation directory</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Installing an embedded system</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Configuring automatic start at boot</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Making a hardware watchdog available</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Changing permission for reboot</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Setting TERM environment variable</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Adding patches</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Installing module os_sup in application os_mon</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Several of the procedures in this section require expert
      knowledge of the Solaris operating system. For most of them
      super user privilege is needed.</fo:block>

    <fo:block id="idp859584" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Creating User and Installation Directory</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is recommended that the embedded environment is run by an
        ordinary user, that is, a user who does not have super user
        privileges.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this section, it is assumed that the username is
        <fo:inline font-family="monospace">otpuser</fo:inline> and that the home directory of that user is:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        /export/home/otpuser</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also assumed that in the home directory of
        <fo:inline font-family="monospace">otpuser</fo:inline>, there is a directory named <fo:inline font-family="monospace">otp</fo:inline>, the
        full path of which is:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        /export/home/otpuser/otp</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This directory is the <fo:inline font-weight="bold">installation directory</fo:inline> of the
        embedded environment.</fo:block>
    

    <fo:block id="idm18576" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Installing an Embedded System</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The procedure for installing an embedded system
        is the same as for an ordinary system (see
	Installation Guide), except for the following:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The (compressed) tape archive file is to be extracted in
	the installation directory defined above.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>It is not needed to link the start script to a standard
	directory like <fo:inline font-family="monospace">/usr/local/bin</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp395664" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Configuring Automatic Start at Boot</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A true embedded system must start when the system boots.
        This section accounts for the necessary configurations
        needed to achieve that.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The embedded system and all the applications start
        automatically if the script file shown below is added to
        directory <fo:inline font-family="monospace">/etc/rc3.d</fo:inline>. The file must be owned and
        readable by <fo:inline font-family="monospace">root</fo:inline>. Its name cannot be arbitrarily
        assigned; the following name is recommended:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        S75otp.system</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more details on initialization (and termination)
        scripts, and naming thereof, see the Solaris documentation.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#!/bin/sh
#  
#  File name:  S75otp.system
#  Purpose:    Automatically starts Erlang and applications when the 
#              system starts
#  Author:     janne@erlang.ericsson.se
#  Resides in: /etc/rc3.d
#

if [ ! -d /usr/bin ]
then                    # /usr not mounted
        exit
fi

killproc() {            # kill the named process(es)
        pid=`/usr/bin/ps -e |
             /usr/bin/grep -w $1 |
             /usr/bin/sed -e 's/^  *//' -e 's/ .*//'`
        [ "$pid" != "" ] &amp;&amp; kill $pid
}

# Start/stop processes required for Erlang

case "$1" in
'start')
        # Start the Erlang emulator
        #
        su - otpuser -c "/export/home/otpuser/otp/bin/start" &amp;
        ;;
'stop')
        killproc beam
        ;;
*)
        echo "Usage: $0 { start | stop }"
        ;;
esac</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">File <fo:inline font-family="monospace">/export/home/otpuser/otp/bin/start</fo:inline> referred to
        in the above script is precisely the <fo:inline font-family="monospace">start</fo:inline> script
        described in <fo:inline font-weight="bold">Starting Erlang</fo:inline>. The
        script variable <fo:inline font-family="monospace">OTP_ROOT</fo:inline> in that <fo:inline font-family="monospace">start</fo:inline> script
        corresponds to the following example path used in this
	section:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        /export/home/otpuser/otp</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">start</fo:inline> script is to be edited accordingly.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use of the <fo:inline font-family="monospace">killproc</fo:inline> procedure in the above script can
        be combined with a call to <fo:inline font-family="monospace">erl_call</fo:inline>, for example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        $SOME_PATH/erl_call -n Node init stop</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To take Erlang down gracefully, see the <fo:inline font-family="monospace">erl_call(1)</fo:inline>
        manual page in <fo:inline font-family="monospace">erl_interface</fo:inline> for details on the use
	of <fo:inline font-family="monospace">erl_call</fo:inline>. However,
	that requires that Erlang runs as a distributed node, which is
        not always the case.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">killproc</fo:inline> procedure is not to be removed. The
        purpose is here to move from run level 3 (multi-user mode with
        networking resources) to run level 2 (multi-user mode without
        such resources), in which Erlang is not to run.</fo:block>
    

    <fo:block id="idp1105264" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Making Hardware Watchdog Available</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For Solaris running on VME boards from Force Computers,
        the onboard hardware watchdog can be activated,
	provided a VME bus driver is added to the operating system
        (see also Installation Problems).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also the <fo:inline font-family="monospace">heart(3)</fo:inline> manual page in Kernel.</fo:block>
    

    <fo:block id="idp398288" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Changing Permissions for Reboot</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">HEART_COMMAND</fo:inline> environment variable is to be set
        in the <fo:inline font-family="monospace">start</fo:inline> script in
	<fo:inline font-weight="bold">Starting Erlang</fo:inline>, and if the value is to be set to the
        path of the Solaris <fo:inline font-family="monospace">reboot</fo:inline> command, that is:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        HEART_COMMAND=/usr/sbin/reboot</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">then the ownership and file permissions for
      <fo:inline font-family="monospace">/usr/sbin/reboot</fo:inline> must be changed as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        chown 0 /usr/sbin/reboot
        chmod 4755 /usr/sbin/reboot</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also the <fo:inline font-family="monospace">heart(3)</fo:inline> manual page in Kernel.</fo:block>
    

    <fo:block id="idp911168" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Setting TERM Environment Variable</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the Erlang runtime system is automatically started from
        the <fo:inline font-family="monospace">S75otp.system</fo:inline> script, the <fo:inline font-family="monospace">TERM</fo:inline> environment
        variable must be set. The following is a minimal setting:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        TERM=sun</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is to be added to the <fo:inline font-family="monospace">start</fo:inline> script.</fo:block>
    

    <fo:block id="idp265136" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Adding Patches</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For proper functioning of flushing file system data to disk on
        Solaris 2.5.1, the version-specific patch with number
        103640-02 must be added to the operating system. Other
	patches might be needed, see the release README file
        <fo:inline font-family="monospace">&lt;ERL_INSTALL_DIR&gt;/README</fo:inline>.</fo:block>
    

    <fo:block id="idp396784" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Installing Module os_sup in Application os_mon</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following four installation procedures require super user
        privilege:</fo:block>

	<fo:block id="idp936688" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Installation</fo:block>
	  
	  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Make a copy of the Solaris standard configuration
	    file for <fo:inline font-family="monospace">syslogd</fo:inline>:</fo:inline>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Make a copy of the Solaris standard configuration
	      file for <fo:inline font-family="monospace">syslogd</fo:inline>. This file is usually named
	      <fo:inline font-family="monospace">syslog.conf</fo:inline> and found in directory <fo:inline font-family="monospace">/etc</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The filename of the copy must be <fo:inline font-family="monospace">syslog.conf.ORIG</fo:inline>.
	      The directory location is optional; usually it is <fo:inline font-family="monospace">/etc</fo:inline>.
	      A simple way to do this is to issue the following command:
	      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
cp /etc/syslog.conf /etc/syslog.conf.ORIG</fo:block>
              </fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
	    </fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Make an Erlang-specific configuration file for
	    <fo:inline font-family="monospace">syslogd</fo:inline>:</fo:inline>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Make an edited copy of the backup copy previously
	      made.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The filename must be <fo:inline font-family="monospace">syslog.conf.OTP</fo:inline>. The
	      path must be the same as the backup copy.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The format of the configuration file is found in the
	      <fo:inline font-family="monospace">syslog.conf(5)</fo:inline> manual page, by issuing the command
	      <fo:inline font-family="monospace">man syslog.conf</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Usually a line is added that is to state:
	      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Which types of information that is to be
		supervised by Erlang</fo:block></fo:list-item-body></fo:list-item>
		<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The name of the file (actually a named pipe) that
		is to receive the information</fo:block></fo:list-item-body></fo:list-item>
	      </fo:list-block>
	      </fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If, for example, only information originating from
	      the UNIX kernel is to be supervised, the line is to
	      begin with <fo:inline font-family="monospace">kern.LEVEL</fo:inline>. For the possible
	      values of <fo:inline font-family="monospace">LEVEL</fo:inline>, see <fo:inline font-family="monospace">syslog.conf(5)</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>After at least one tab-character, the line added is to
	      contain the full name of the named pipe where <fo:inline font-family="monospace">syslogd</fo:inline>
	      writes its information. The path must be the same as for the
	      files <fo:inline font-family="monospace">syslog.conf.ORIG</fo:inline> and <fo:inline font-family="monospace">syslog.conf.OTP</fo:inline>.
	      The filename must be <fo:inline font-family="monospace">syslog.otp</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If the directory for the files <fo:inline font-family="monospace">syslog.conf.ORIG</fo:inline>
	      and <fo:inline font-family="monospace">syslog.conf.OTP</fo:inline> is <fo:inline font-family="monospace">/etc</fo:inline>, the line in
	      <fo:inline font-family="monospace">syslog.conf.OTP</fo:inline> is as follows:
	      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
kern.LEVEL                /etc/syslog.otp</fo:block>
	      </fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
	    </fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Check the file privileges of the configuration
	    files:</fo:inline>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The configuration files is to have <fo:inline font-family="monospace">rw-r--r--</fo:inline>
	      file privileges and be owned by root.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A simple way to do this is to issue these commands:
	      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
chmod 644 /etc/syslog.conf
chmod 644 /etc/syslog.conf.ORIG
chmod 644 /etc/syslog.conf.OTP</fo:block>
	      </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Notice that if the files <fo:inline font-family="monospace">syslog.conf.ORIG</fo:inline> and
	      <fo:inline font-family="monospace">syslog.conf.OTP</fo:inline> are not in directory <fo:inline font-family="monospace">/etc</fo:inline>,
	      the file path in the second and third command must be
	      modified.</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
	    </fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Modify file privileges and ownership of the
	    <fo:inline font-family="monospace">mod_syslog</fo:inline> utility:</fo:inline>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The file privileges and ownership of the
	      <fo:inline font-family="monospace">mod_syslog</fo:inline> utility must be modified.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The full name of the binary executable file is
	      derived from the position of application <fo:inline font-family="monospace">os_mon</fo:inline>
	      in the file system by adding
	      <fo:inline font-family="monospace">/priv/bin/mod_syslog</fo:inline>. The generic full name
	      of the binary executable file is thus:</fo:block>
	      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;OTP_ROOT&gt;/lib/os_mon-&lt;REV&gt;/priv/bin/mod_syslog</fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> If the path to <fo:inline font-family="monospace">otp-root</fo:inline> is
	      <fo:inline font-family="monospace">/usr/otp</fo:inline>, then the path to the <fo:inline font-family="monospace">os_mon</fo:inline>
	      application is <fo:inline font-family="monospace">/usr/otp/lib/os_mon-1.0</fo:inline>
	      (assuming revision 1.0) and the full name of the
	      binary executable file is
	      <fo:inline font-family="monospace">/usr/otp/lib/os_mon-1.0/priv/bin/mod_syslog</fo:inline>.</fo:block>
	      </fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The binary executable file must be owned by root,
	      have <fo:inline font-family="monospace">rwsr-xr-x</fo:inline> file privileges, in particular
	      the <fo:inline font-family="monospace">setuid</fo:inline> bit of the user must be set.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A simple way to do this is to issue the following
	      commands:</fo:block>
	      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
cd &lt;OTP_ROOT&gt;/lib/os_mon-&lt;REV&gt;/priv/bin/mod_syslog
chmod 4755 mod_syslog
chown root mod_syslog</fo:block>
	    </fo:block></fo:list-item-body></fo:list-item>
	  </fo:list-block>
	</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp1268224" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Testing the Application Configuration File</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following procedure does not require root privilege:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Ensure that the configuration parameters for the
	<fo:inline font-family="monospace">os_sup</fo:inline> module in the <fo:inline font-family="monospace">os_mon</fo:inline> application
	are correct.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Browse the application configuration file (do
	<fo:inline font-weight="bold">not</fo:inline> edit it). The full name of the application
	configuration file is derived from the position of the
	<fo:inline font-family="monospace">os_mon</fo:inline> application in the file system by adding
	<fo:inline font-family="monospace">/ebin/os_mon.app</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The generic full name of the file is thus:</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;OTP_ROOT&gt;/lib/os_mon-&lt;REV&gt;/ebin/os_mon.app.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> If the path to <fo:inline font-family="monospace">otp-root</fo:inline> is
	<fo:inline font-family="monospace">/usr/otp</fo:inline>, then the path to the <fo:inline font-family="monospace">os_mon</fo:inline> application
	is <fo:inline font-family="monospace">/usr/otp/lib/os_mon-1.0 </fo:inline> (assuming revision 1.0) and
	the full name of the binary executable file is
	<fo:inline font-family="monospace">/usr/otp/lib/os_mon-1.0/ebin/os_mon.app</fo:inline>.</fo:block>
	</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Ensure that the following configuration parameters have
	correct values:</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>

	<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="before" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Parameter</fo:inline></fo:block></fo:table-cell>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="before" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Function</fo:inline></fo:block></fo:table-cell>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="before" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Standard value</fo:inline></fo:block></fo:table-cell>
          </fo:table-row><fo:table-row>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">start_os_sup</fo:inline></fo:block></fo:table-cell>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Specifies if <fo:inline font-family="monospace">os_sup</fo:inline>
	    is to be started or not.</fo:block></fo:table-cell>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">true</fo:inline> for the
	    first instance on the hardware; <fo:inline font-family="monospace">false</fo:inline> for the
	    other instances</fo:block></fo:table-cell>
          </fo:table-row><fo:table-row>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">os_sup_own</fo:inline></fo:block></fo:table-cell>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">The directory for
	    (1) back-up copy and (2) Erlang-specific configuration
	    file for <fo:inline font-family="monospace">syslogd</fo:inline></fo:block></fo:table-cell>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">"/etc"</fo:inline></fo:block></fo:table-cell>
          </fo:table-row><fo:table-row>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">os_sup_syslogconf</fo:inline></fo:block></fo:table-cell>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">The full name for the
	    Solaris standard configuration file for <fo:inline font-family="monospace">syslogd</fo:inline></fo:block></fo:table-cell>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">"/etc/syslog.conf"</fo:inline></fo:block></fo:table-cell>
          </fo:table-row><fo:table-row>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">error_tag</fo:inline></fo:block></fo:table-cell>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">The tag for the
	    messages that are sent to the error logger in the Erlang
	    runtime system</fo:block></fo:table-cell>
            <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">std_error</fo:inline></fo:block></fo:table-cell>
          </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        1.1:
         
        Configuration Parameters</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the values listed in <fo:inline font-family="monospace">os_mon.app</fo:inline> do not suit
          your needs, do <fo:inline font-weight="bold">not</fo:inline> edit that file. Instead
          <fo:inline font-weight="bold">override</fo:inline> the values in a <fo:inline font-weight="bold">system configuration
	  file</fo:inline>, the full pathname of which is given
          on the command line to <fo:inline font-family="monospace">erl</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> Contents of an application configuration
	  file:</fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          [{os_mon, [{start_os_sup, true}, {os_sup_own, "/etc"}, 
          {os_sup_syslogconf, "/etc/syslog.conf"}, {os_sup_errortag, std_error}]}].</fo:block>
    

    <fo:block id="idp916704" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Related Documents</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See the <fo:inline font-family="monospace">os_mon(3)</fo:inline> application,
      the <fo:inline font-family="monospace">application(3)</fo:inline> manual page in Kernel,
      and the <fo:inline font-family="monospace">erl(1)</fo:inline> manual page in ERTS.</fo:block>
    
  

  <fo:block id="idp919584" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Installation Problems</fo:block>
    
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The hardware watchdog timer, which is controlled by the
        <fo:inline font-family="monospace">heart</fo:inline> port program, requires package <fo:inline font-family="monospace">FORCEvme</fo:inline>,
        which contains the VME bus driver, to be
        installed. However, this driver can clash with the Sun
        <fo:inline font-family="monospace">mcp</fo:inline> driver and cause the system to refuse to
        boot. To cure this problem, the following lines are
	to be added to <fo:inline font-family="monospace">/etc/system</fo:inline>:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">exclude: drv/mcp</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">exclude: drv/mcpzsa</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">exclude: drv/mcpp</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is recommended to add these lines to avoid a clash.
	The clash can make it impossible to boot the system.</fo:block>
      </fo:block>
    
  <fo:block id="idp999392" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">3.1.4 
      Starting Erlang</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes how an embedded system is started. Four
      programs are involved and they normally reside in the directory
      <fo:inline font-family="monospace">&lt;ERL_INSTALL_DIR&gt;/bin</fo:inline>. The only exception is
      the <fo:inline font-family="monospace">start</fo:inline> program, which can be located anywhere, and
      is also the only program that must be modified by the user.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In an embedded system, there is usually no interactive shell.
      However, an operator can attach to the Erlang
      system by command <fo:inline font-family="monospace">to_erl</fo:inline>. The operator is then
      connected to the Erlang shell and can give ordinary Erlang
      commands. All interaction with the system through this shell is
      logged in a special directory.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Basically, the procedure is as follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">start</fo:inline> program is called when the machine
      is started.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>It calls <fo:inline font-family="monospace">run_erl</fo:inline>, which sets up things so the
      operator can attach to the system.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>It calls <fo:inline font-family="monospace">start_erl</fo:inline>, which calls the correct
      version of <fo:inline font-family="monospace">erlexec</fo:inline> (which is located in
      <fo:inline font-family="monospace">&lt;ERL_INSTALL_DIR&gt;/erts-EVsn/bin</fo:inline>) with the
      correct <fo:inline font-family="monospace">boot</fo:inline> and <fo:inline font-family="monospace">config</fo:inline> files.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1008528" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">3.1.5 
      Programs</fo:block>
    
    <fo:block id="idp1009264" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">start</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This program is called when the machine is started. It can
        be modified or rewritten to suit a special system. By
        default, it must be called <fo:inline font-family="monospace">start</fo:inline> and reside in
        <fo:inline font-family="monospace">&lt;ERL_INSTALL_DIR&gt;/bin</fo:inline>. Another start
	program can be used, by using configuration parameter
	<fo:inline font-family="monospace">start_prg</fo:inline> in application SASL.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The start program must call <fo:inline font-family="monospace">run_erl</fo:inline> as shown below.
        It must also take an optional parameter, which defaults to
        <fo:inline font-family="monospace">&lt;ERL_INSTALL_DIR&gt;/releases/start_erl.data</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This program is to set static parameters and environment
        variables such as <fo:inline font-family="monospace">-sname Name</fo:inline> and <fo:inline font-family="monospace">HEART_COMMAND</fo:inline>
        to reboot the machine.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">&lt;RELDIR&gt;</fo:inline> directory is where new release
        packets are installed, and where the release handler keeps
	information about releases. For more information, see the
	<fo:inline font-family="monospace">release_handler(3)</fo:inline> manual page in SASL.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following script illustrates the default behaviour of the
        program:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#!/bin/sh
# Usage: start [DataFile]
#
ROOTDIR=/usr/local/otp

if [ -z "$RELDIR" ]
then
   RELDIR=$ROOTDIR/releases
fi

START_ERL_DATA=${1:-$RELDIR/start_erl.data}

$ROOTDIR/bin/run_erl /tmp/ $ROOTDIR/log "exec $ROOTDIR/bin/start_erl \ 
                     $ROOTDIR $RELDIR $START_ERL_DATA" &gt; /dev/null 2&gt;&amp;1 &amp;</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following script illustrates a modification where the node
        is given the name <fo:inline font-family="monospace">cp1</fo:inline>, and where the environment variables
        <fo:inline font-family="monospace">HEART_COMMAND</fo:inline> and <fo:inline font-family="monospace">TERM</fo:inline> have been added to the
        previous script:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#!/bin/sh
# Usage: start [DataFile]
#
HEART_COMMAND=/usr/sbin/reboot
TERM=sun
export HEART_COMMAND TERM

ROOTDIR=/usr/local/otp

if [ -z "$RELDIR" ]
then
   RELDIR=$ROOTDIR/releases
fi

START_ERL_DATA=${1:-$RELDIR/start_erl.data}

$ROOTDIR/bin/run_erl /tmp/ $ROOTDIR/log "exec $ROOTDIR/bin/start_erl \ 
      $ROOTDIR $RELDIR $START_ERL_DATA -heart -sname cp1" &gt; /dev/null 2&gt;&amp;1 &amp;</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a diskless and/or read-only client node is about to start,
        file <fo:inline font-family="monospace">start_erl.data</fo:inline> is located in the client directory at
        the master node. Thus, the <fo:inline font-family="monospace">START_ERL_DATA</fo:inline> line is to look
        like:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
CLIENTDIR=$ROOTDIR/clients/clientname
START_ERL_DATA=${1:-$CLIENTDIR/bin/start_erl.data}</fo:block>
    

    <fo:block id="idp1100272" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">run_erl</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This program is used to start the emulator, but you will not
        be connected to the shell. <fo:inline font-family="monospace">to_erl</fo:inline> is used to connect to
        the Erlang shell.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Usage: run_erl pipe_dir/ log_dir "exec command [parameters ...]"</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here:</fo:block>
     <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pipe_dir/</fo:inline> is to be <fo:inline font-family="monospace">/tmp/</fo:inline> (<fo:inline font-family="monospace">to_erl</fo:inline>
       uses this name by default).</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">log_dir</fo:inline> is where the log files are written.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">command [parameters]</fo:inline> is executed.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Everything written to <fo:inline font-family="monospace">stdin</fo:inline> and <fo:inline font-family="monospace">stdout</fo:inline>
       is logged in <fo:inline font-family="monospace">log_dir</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Log files are written in <fo:inline font-family="monospace">log_dir</fo:inline>. Each log file
       has a name of the form <fo:inline font-family="monospace">erlang.log.N</fo:inline>, where N is a
       generation number, ranging from 1 to 5. Each log file holds up
       to 100 kB text. As time goes by, the following log files are
       found in the log file directory:</fo:block>
       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erlang.log.1
erlang.log.1, erlang.log.2
erlang.log.1, erlang.log.2, erlang.log.3
erlang.log.1, erlang.log.2, erlang.log.3, erlang.log.4
erlang.log.2, erlang.log.3, erlang.log.4, erlang.log.5
erlang.log.3, erlang.log.4, erlang.log.5, erlang.log.1
...</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The most recent log file is the rightmost in each row. That
      is, the most recent file is the one with the highest number, or
      if there are already four files, the one before the skip.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a log file is opened (for appending or created), a time
        stamp is written to the file. If nothing has been written to
        the log files for 15 minutes, a record is inserted that says
        that we are still alive.</fo:block>
    

    <fo:block id="idp453312" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">to_erl</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This program is used to attach to a running Erlang runtime
        system, started with <fo:inline font-family="monospace">run_erl</fo:inline>.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Usage: to_erl [pipe_name | pipe_dir]</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here <fo:inline font-family="monospace">pipe_name</fo:inline> defaults to <fo:inline font-family="monospace">/tmp/erlang.pipe.N</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To disconnect from the shell without exiting the Erlang
        system, type <fo:inline font-family="monospace">Ctrl-D</fo:inline>.</fo:block>
    

    <fo:block id="idp457904" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">start_erl</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This program starts the Erlang emulator with parameters
        <fo:inline font-family="monospace">-boot</fo:inline> and <fo:inline font-family="monospace">-config</fo:inline> set. It reads data about
        where these files are located from a file named
        <fo:inline font-family="monospace">start_erl.data</fo:inline>, which is located in
	<fo:inline font-family="monospace">&lt;RELDIR&gt;</fo:inline>.
        Each new release introduces a new data file. This file is
        automatically generated by the release handler in Erlang.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following script illustrates the behaviour of the program:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#!/bin/sh
#
# This program is called by run_erl. It starts
# the Erlang emulator and sets -boot and -config parameters.
# It should only be used at an embedded target system.
#
# Usage: start_erl RootDir RelDir DataFile [ErlFlags ...]
#
ROOTDIR=$1
shift
RELDIR=$1
shift
DataFile=$1
shift

ERTS_VSN=`awk '{print $1}' $DataFile`
VSN=`awk '{print $2}' $DataFile`

BINDIR=$ROOTDIR/erts-$ERTS_VSN/bin
EMU=beam
PROGNAME=`echo $0 | sed 's/.*\///'`
export EMU
export ROOTDIR
export BINDIR
export PROGNAME
export RELDIR

exec $BINDIR/erlexec -boot $RELDIR/$VSN/start -config $RELDIR/$VSN/sys $*</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a diskless and/or read-only client node with the
        SASL configuration parameter <fo:inline font-family="monospace">static_emulator</fo:inline> set
        to <fo:inline font-family="monospace">true</fo:inline> is about to start, the <fo:inline font-family="monospace">-boot</fo:inline> and
        <fo:inline font-family="monospace">-config</fo:inline> flags must be changed.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As such a client cannot
        read a new <fo:inline font-family="monospace">start_erl.data</fo:inline> file (the file cannot
        be changed dynamically). The boot and config files are
        always fetched from the same place (but with new contents if
        a new release has been installed).</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">release_handler</fo:inline>
        copies these files to the <fo:inline font-family="monospace">bin</fo:inline> directory in the client
        directory at the master nodes whenever a new release is made
        permanent.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assuming the same <fo:inline font-family="monospace">CLIENTDIR</fo:inline> as above, the last line
        is to look like:</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
exec $BINDIR/erlexec -boot $CLIENTDIR/bin/start \ 
     -config $CLIENTDIR/bin/sys $*</fo:block>
    
  <fo:block id="idp1127440" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">3.2  Windows NT</fo:marker>3.2  Windows NT</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the operating system-specific parts of OTP
    that relate to Windows NT.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A normal installation of Windows NT 4.0, with Service Pack 4 or
    later, is required for an embedded Windows NT running OTP.</fo:block><fo:block id="idp1132864" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">3.2.1 
      Memory Use</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">RAM memory of 96 MB is recommended to run OTP on Windows NT.
      A system with less than 64 MB of RAM is not recommended.</fo:block>
  <fo:block id="idp1134320" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">3.2.2 
      Disk Space Use</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A minimum Windows NT installation with networking needs 250 MB,
      and an extra 130 MB for the swap file.</fo:block>
  <fo:block id="idp1135760" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">3.2.3 
      Installing an Embedded System</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normal Windows NT installation is performed. No additional
      application programs are needed, such as Internet Explorer or
      web server. Networking with TCP/IP is required.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Service Pack 4 or later must be installed.</fo:block>

    <fo:block id="idp1137536" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Hardware Watchdog</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For Windows NT running on standard PCs with ISA and/or PCI bus,
        an extension card with a hardware watchdog can be installed.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see the <fo:inline font-family="monospace">heart(3)</fo:inline> manual page in
        Kernel.</fo:block>
    
  <fo:block id="idp1140080" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">3.2.4 
      Starting Erlang</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On an embedded system, the <fo:inline font-family="monospace">erlsrv</fo:inline> module is to be used
      to install the Erlang process as a Windows system service.
      This service can start after Windows NT has booted.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see the <fo:inline font-family="monospace">erlsrv</fo:inline> manual page
      in ERTS.</fo:block>
  <fo:block id="idp2270256" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">4   
      Getting Started With Erlang</fo:block><fo:block id="idp974736" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">4.1  Introduction</fo:marker>4.1  Introduction</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section is a quick start tutorial to get you started with Erlang.
      Everything in this section is true, but only part of the truth. For example,
      only the simplest form of the syntax is shown, not all esoteric forms.
      Also, parts that are greatly simplified are indicated with *manual*.
      This means that a lot more information on the subject is to be found in
      the Erlang book or in
      <fo:inline font-style="italic">
      Erlang Reference Manual</fo:inline>.</fo:block><fo:block id="idp970656" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.1.1 
      Prerequisites</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reader of this section is assumed to be familiar with the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Computers in general</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Basics on how computers are programmed</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

  <fo:block id="idp1018528" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.1.2 
      Omitted Topics</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following topics are not treated in this section:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>References.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Local error handling (catch/throw).</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Single direction links (monitor).</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Handling of binary data (binaries / bit syntax).</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>List comprehensions.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>How to communicate with the outside world and software
        written in other languages (ports);
        this is described in
        <fo:inline font-style="italic">
        Interoperability Tutorial</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Erlang libraries (for example, file handling).</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>OTP and (in consequence) the Mnesia database.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Hash tables for Erlang terms (ETS).</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Changing code in running systems.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp645856" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">4.2  Sequential Programming</fo:marker>4.2  Sequential Programming</fo:block><fo:block id="idp353696" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.2.1 
      The Erlang Shell</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Most operating systems have a command interpreter or shell, UNIX
      and Linux have many, Windows has the command prompt. Erlang has
      its own shell where bits of Erlang code can be written directly,
      and be evaluated to see what happens
      (see the <fo:inline font-style="italic">shell(3)</fo:inline>
      manual page in STDLIB).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start
      the Erlang shell (in Linux or UNIX) by starting a shell or
      command interpreter in your operating system and typing
      <fo:inline font-family="monospace">erl</fo:inline>. You will see something like this.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl</fo:inline>
Erlang R15B (erts-5.9.1) [source] [smp:8:8] [rq:8] [async-threads:0] [hipe] [kernel-poll:false]

Eshell V5.9.1  (abort with ^G)
1&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Type "2 + 5." in the shell and then press Enter (carriage return).
    Notice that you tell the shell you are done entering code by finishing
    with a full stop "." and a carriage return.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">2 + 5.</fo:inline>
7
2&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As shown, the Erlang shell numbers the lines that
      can be entered, (as 1&gt; 2&gt;) and that it correctly says
      that 2 + 5 is 7. If you make writing mistakes in the shell,
      you can delete with the backspace key, as in most shells.
      There are many more editing commands in the shell
      (see <fo:inline font-style="italic">tty - A command line interface</fo:inline> in ERTS User's Guide).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(Notice that many line numbers given by the shell in the
      following examples are out of sequence. This is because this
      tutorial was written and code-tested in separate sessions).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here is a bit more complex calculation:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">(42 + 77) * 66 / 3.</fo:inline>
2618.0</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice the use of brackets, the multiplication operator "*",
      and the division operator "/", as in normal arithmetic (see
      <fo:inline font-style="italic">Expressions</fo:inline>).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Press Control-C to shut down the Erlang system and the Erlang
      shell.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following output is shown:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
BREAK: (a)bort (c)ontinue (p)roc info (i)nfo (l)oaded
       (v)ersion (k)ill (D)b-tables (d)istribution
<fo:inline font-weight="bold">a</fo:inline>
%</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Type "a" to leave the Erlang system.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another way to shut down the Erlang system is by entering
      <fo:inline font-family="monospace">halt()</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; <fo:inline font-weight="bold">halt().</fo:inline>
% </fo:block>
  <fo:block id="idp1485664" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.2.2 
      Modules and Functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A programming language is not much use if you only can run code
      from the shell. So here is a small Erlang program. Enter it into
      a file named <fo:inline font-family="monospace">tut.erl</fo:inline> using a suitable
      text editor. The file name <fo:inline font-family="monospace">tut.erl</fo:inline> is important, and also
      that it is in the same directory as the one where you started
      <fo:inline font-family="monospace">erl</fo:inline>). If you are lucky your editor has an Erlang mode
      that makes it easier for you to enter and format your code
      nicely (see <fo:inline font-style="italic">The Erlang mode for
      Emacs</fo:inline> in Tools User's Guide), but you can manage
      perfectly well without. Here is the code to enter:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut).
-export([double/1]).

double(X) -&gt;
    2 * X.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is not hard to guess that this program doubles the value of
      numbers. The first two lines of the code are described later.
      Let us compile the program. This can be done in an Erlang shell
      as follows, where <fo:inline font-family="monospace">c</fo:inline> means compile:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; <fo:inline font-weight="bold">c(tut).</fo:inline>
{ok,tut}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">{ok,tut}</fo:inline> means that the compilation is OK. If it
      says "error" it means that there is some mistake in the text
      that you entered. Additional error messages gives an idea to
      what is wrong so you can modify the text and then try to compile
      the program again.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now run the program:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
4&gt; <fo:inline font-weight="bold">tut:double(10).</fo:inline>
20</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As expected, double of 10 is 20.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now let us get back to the first two lines of the code. Erlang
      programs are
      written in files. Each file contains an Erlang
      <fo:inline font-weight="bold">module</fo:inline>. The first line of code in the module is
      the module name (see
      <fo:inline font-style="italic">Modules</fo:inline>):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, the module is called <fo:inline font-weight="bold">tut</fo:inline>. Notice
      the full stop "." at the end of the line. The files which are
      used to store
      the module must have the same name as the module but with
      the extension ".erl". In this case the file name is <fo:inline font-family="monospace">tut.erl</fo:inline>.
      When using a function in another module, the syntax
      <fo:inline font-family="monospace">module_name:function_name(arguments)</fo:inline> is used. So the
      following means call function <fo:inline font-family="monospace">double</fo:inline> in module <fo:inline font-family="monospace">tut</fo:inline>
      with argument "10".</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
4&gt; <fo:inline font-weight="bold">tut:double(10).</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second line says that the module <fo:inline font-family="monospace">tut</fo:inline> contains a
      function called <fo:inline font-family="monospace">double</fo:inline>, which takes one argument
      (<fo:inline font-family="monospace">X</fo:inline> in our example):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-export([double/1]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second line also says that this function can be called from
      outside the module <fo:inline font-family="monospace">tut</fo:inline>. More about this later. Again,
      notice the "." at the end of the line.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now for a more complicated example, the factorial of a number.
      For example, the factorial of 4 is 4 * 3 * 2 * 1, which equals 24.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enter the following code in a file named <fo:inline font-family="monospace">tut1.erl</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut1).
-export([fac/1]).

fac(1) -&gt;
    1;
fac(N) -&gt;
    N * fac(N - 1).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">So this is a module, called <fo:inline font-family="monospace">tut1</fo:inline> that contains a
      function called <fo:inline font-family="monospace">fac&gt;</fo:inline>, which takes one argument,
      <fo:inline font-family="monospace">N</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first part says that the factorial of 1 is 1.:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
fac(1) -&gt;
    1;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this part ends with a semicolon ";" that indicates
      that there is more of the function <fo:inline font-family="monospace">fac&gt;</fo:inline> to come.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second part says that the factorial of N is N multiplied
      by the factorial of N - 1:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
fac(N) -&gt;
    N * fac(N - 1).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this part ends with a "." saying that there are
      no more parts of this function.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compile the file:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
5&gt; <fo:inline font-weight="bold">c(tut1).</fo:inline>
{ok,tut1}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And now calculate the factorial of 4.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
6&gt; <fo:inline font-weight="bold">tut1:fac(4).</fo:inline>
24</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here the function <fo:inline font-family="monospace">fac&gt;</fo:inline> in module <fo:inline font-family="monospace">tut1</fo:inline> is called
      with argument <fo:inline font-family="monospace">4</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A function can have many arguments. Let us expand the module
      <fo:inline font-family="monospace">tut1</fo:inline> with the function to multiply two numbers:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut1).
-export([fac/1, mult/2]).

fac(1) -&gt;
    1;
fac(N) -&gt;
    N * fac(N - 1).

mult(X, Y) -&gt;
    X * Y.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that it is also required to expand the <fo:inline font-family="monospace">-export</fo:inline> line
      with the information that there is another function <fo:inline font-family="monospace">mult</fo:inline>
      with two arguments.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compile:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
7&gt; <fo:inline font-weight="bold">c(tut1).</fo:inline>
{ok,tut1}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Try out the new function <fo:inline font-family="monospace">mult</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
8&gt; <fo:inline font-weight="bold">tut1:mult(3,4).</fo:inline>
12</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example the numbers are integers and the arguments
      in the functions in the code <fo:inline font-family="monospace">N</fo:inline>, <fo:inline font-family="monospace">X</fo:inline>, and <fo:inline font-family="monospace">Y</fo:inline> are
      called variables. Variables must start with a capital letter
      (see
      <fo:inline font-style="italic">Variables</fo:inline>).
      Examples of variables are
      <fo:inline font-family="monospace">Number</fo:inline>, <fo:inline font-family="monospace">ShoeSize</fo:inline>, and <fo:inline font-family="monospace">Age</fo:inline>.</fo:block>
  <fo:block id="idp117120" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.2.3 
      Atoms</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Atom is another data type in Erlang. Atoms start with a small
      letter (see
      <fo:inline font-style="italic">Atom</fo:inline>),
      for example, <fo:inline font-family="monospace">charles</fo:inline>,
      <fo:inline font-family="monospace">centimeter</fo:inline>, and <fo:inline font-family="monospace">inch</fo:inline>. Atoms are simply names, nothing
      else. They are not like variables, which can have a value.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enter the next program in a file named <fo:inline font-family="monospace">tut2.erl</fo:inline>). It can be
      useful for converting from inches to centimeters and conversely:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut2).
-export([convert/2]).

convert(M, inch) -&gt;
    M / 2.54;

convert(N, centimeter) -&gt;
    N * 2.54.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compile:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
9&gt; <fo:inline font-weight="bold">c(tut2).</fo:inline>
{ok,tut2}
</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Test:</fo:block>
 <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
10&gt; <fo:inline font-weight="bold">tut2:convert(3, inch).</fo:inline>
1.1811023622047243
11&gt; <fo:inline font-weight="bold">tut2:convert(7, centimeter).</fo:inline>
17.78</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice the introduction of decimals (floating point numbers)
      without any explanation. Hopefully you can cope with that.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us see what happens if something other than <fo:inline font-family="monospace">centimeter</fo:inline> or
      <fo:inline font-family="monospace">inch</fo:inline> is entered in the <fo:inline font-family="monospace">convert</fo:inline> function:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
12&gt; <fo:inline font-weight="bold">tut2:convert(3, miles).</fo:inline>
** exception error: no function clause matching tut2:convert(3,miles) (tut2.erl, line 4)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The two parts of the <fo:inline font-family="monospace">convert</fo:inline> function are called its
      clauses. As shown, <fo:inline font-family="monospace">miles</fo:inline> is not part of either of
      the clauses. The Erlang system cannot <fo:inline font-weight="bold">match</fo:inline> either of
      the clauses so an error message <fo:inline font-family="monospace">function_clause</fo:inline> is returned.
      The shell formats the error message nicely, but the error tuple
      is saved in the shell's history list and can be output by the shell
      command <fo:inline font-family="monospace">v/1</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
13&gt; <fo:inline font-weight="bold">v(12).</fo:inline>
{'EXIT',{function_clause,[{tut2,convert,
                                [3,miles],
                                [{file,"tut2.erl"},{line,4}]},
                          {erl_eval,do_apply,5,[{file,"erl_eval.erl"},{line,482}]},
                          {shell,exprs,7,[{file,"shell.erl"},{line,666}]},
                          {shell,eval_exprs,7,[{file,"shell.erl"},{line,621}]},
                          {shell,eval_loop,3,[{file,"shell.erl"},{line,606}]}]}}</fo:block>

  <fo:block id="idp1178368" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.2.4 
      Tuples</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now the <fo:inline font-family="monospace">tut2</fo:inline> program is hardly good programming style.
      Consider:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
tut2:convert(3, inch).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Does this mean that 3 is in inches? Or does it mean that 3 is
      in centimeters
      and is to be converted to inches? Erlang has a way to group
      things together to make things more understandable. These are called
      <fo:inline font-weight="bold">tuples</fo:inline> and are surrounded by curly brackets, "{" and "}".</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">So, <fo:inline font-family="monospace">{inch,3}</fo:inline> denotes 3 inches and
      <fo:inline font-family="monospace">{centimeter,5}</fo:inline> denotes 5 centimeters. Now let us write a
      new program that converts centimeters to inches and conversely.
      Enter the following code in a file called <fo:inline font-family="monospace">tut3.erl</fo:inline>):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut3).
-export([convert_length/1]).

convert_length({centimeter, X}) -&gt;
    {inch, X / 2.54};
convert_length({inch, Y}) -&gt;
    {centimeter, Y * 2.54}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compile and test:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
14&gt; <fo:inline font-weight="bold">c(tut3).</fo:inline>
{ok,tut3}
15&gt; <fo:inline font-weight="bold">tut3:convert_length({inch, 5}).</fo:inline>
{centimeter,12.7}
16&gt; <fo:inline font-weight="bold">tut3:convert_length(tut3:convert_length({inch, 5})).</fo:inline>
{inch,5.0}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice on line 16 that 5 inches is converted to centimeters and back
      again and reassuringly get back to the original value. That is,
      the argument to a function can be the result of another function.
      Consider how line 16 (above) works.
      The argument given to the function <fo:inline font-family="monospace">{inch,5}</fo:inline> is first
      matched against the first head clause of <fo:inline font-family="monospace">convert_length</fo:inline>,
      that is, <fo:inline font-family="monospace">convert_length({centimeter,X})</fo:inline>. It can be seen
      that <fo:inline font-family="monospace">{centimeter,X}</fo:inline> does not match <fo:inline font-family="monospace">{inch,5}</fo:inline>
      (the head is the bit before the "-&gt;"). This having failed,
      let us try
      the head of the next clause that is, <fo:inline font-family="monospace">convert_length({inch,Y})</fo:inline>.
      This matches, and <fo:inline font-family="monospace">Y</fo:inline> gets the value 5.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tuples can have more than two parts, in fact
      as many parts as you want, and contain any valid Erlang
      <fo:inline font-weight="bold">term</fo:inline>. For example, to represent the temperature of
      various cities of the world:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{moscow, {c, -10}}
{cape_town, {f, 70}}
{paris, {f, 28}}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tuples have a fixed number of items in them. Each item in a
      tuple is called an <fo:inline font-weight="bold">element</fo:inline>. In the tuple
      <fo:inline font-family="monospace">{moscow,{c,-10}}</fo:inline>, element 1 is <fo:inline font-family="monospace">moscow</fo:inline> and element
      2 is <fo:inline font-family="monospace">{c,-10}</fo:inline>. Here <fo:inline font-family="monospace">c</fo:inline> represents Celsius and
      <fo:inline font-family="monospace">f</fo:inline> Fahrenheit.</fo:block>
  <fo:block id="idp1522208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.2.5 
      Lists</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Whereas tuples group things together, it is also needed to
      represent lists of things. Lists in Erlang are surrounded by
      square brackets, "[" and "]". For example, a list of the
      temperatures of various cities in the world can be:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{moscow, {c, -10}}, {cape_town, {f, 70}}, {stockholm, {c, -4}},
 {paris, {f, 28}}, {london, {f, 36}}]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this list was so long that it did not fit on one line.
      This does not matter, Erlang allows line breaks at all "sensible
      places" but not, for example, in the middle of atoms, integers,
       and others.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A useful way of looking at parts of lists, is by using "|".
      This is best explained by an example using the shell:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
17&gt; <fo:inline font-weight="bold">[First |TheRest] = [1,2,3,4,5].</fo:inline>
[1,2,3,4,5]
18&gt; <fo:inline font-weight="bold">First.</fo:inline>
1
19&gt; <fo:inline font-weight="bold">TheRest.</fo:inline>
[2,3,4,5]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To separate the first elements of the list from the rest of the
      list, <fo:inline font-family="monospace">|</fo:inline> is used. <fo:inline font-family="monospace">First</fo:inline> has got value 1 and
      <fo:inline font-family="monospace">TheRest</fo:inline> has got the value [2,3,4,5].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
20&gt; <fo:inline font-weight="bold">[E1, E2 | R] = [1,2,3,4,5,6,7].</fo:inline>
[1,2,3,4,5,6,7]
21&gt; <fo:inline font-weight="bold">E1.</fo:inline>
1
22&gt; <fo:inline font-weight="bold">E2.</fo:inline>
2
23&gt; <fo:inline font-weight="bold">R.</fo:inline>
[3,4,5,6,7]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here you see the use of <fo:inline font-family="monospace">|</fo:inline> to get the first two elements from
      the list. If you try to get more elements from the list
      than there are elements in the list, an error is returned. Notice
      also the special case of the list with no elements, []:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
24&gt; <fo:inline font-weight="bold">[A, B | C] = [1, 2].</fo:inline>
[1,2]
25&gt; <fo:inline font-weight="bold">A.</fo:inline>
1
26&gt; <fo:inline font-weight="bold">B.</fo:inline>
2
27&gt; <fo:inline font-weight="bold">C.</fo:inline>
[]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the previous examples, new variable names are used, instead of
      reusing the old ones: <fo:inline font-family="monospace">First</fo:inline>, <fo:inline font-family="monospace">TheRest</fo:inline>, <fo:inline font-family="monospace">E1</fo:inline>,
      <fo:inline font-family="monospace">E2</fo:inline>, <fo:inline font-family="monospace">R</fo:inline>, <fo:inline font-family="monospace">A</fo:inline>, <fo:inline font-family="monospace">B</fo:inline>, and <fo:inline font-family="monospace">C</fo:inline>. The reason
      for this is that a variable can only be given a value once in its
      context (scope). More about this later.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows how to find the length of a list.
     Enter the following code in a file named <fo:inline font-family="monospace">tut4.erl</fo:inline>):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut4).

-export([list_length/1]).

list_length([]) -&gt;
    0;    
list_length([First | Rest]) -&gt;
    1 + list_length(Rest).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compile and test:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
28&gt; <fo:inline font-weight="bold">c(tut4).</fo:inline>
{ok,tut4}
29&gt; <fo:inline font-weight="bold">tut4:list_length([1,2,3,4,5,6,7]).</fo:inline>
7</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Explanation:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
list_length([]) -&gt;
    0;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The length of an empty list is obviously 0.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
list_length([First | Rest]) -&gt;
    1 + list_length(Rest).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The length of a list with the first element <fo:inline font-family="monospace">First</fo:inline> and
      the remaining elements <fo:inline font-family="monospace">Rest</fo:inline> is 1 + the length of
      <fo:inline font-family="monospace">Rest</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(Advanced readers only: This is not tail recursive, there is a
      better way to write this function.)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In general, tuples are used where "records"
      or "structs" are used in other languages. Also, lists are used when
      representing things with varying sizes, that is, where
      linked lists are used in other languages.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang does not have a string data type. Instead, strings can be
      represented by lists of Unicode characters. This implies for example that
      the list <fo:inline font-family="monospace">[97,98,99]</fo:inline> is equivalent to "abc". The Erlang shell is
      "clever" and guesses what list you  mean and outputs it
      in what it thinks is the most appropriate form, for example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
30&gt; <fo:inline font-weight="bold">[97,98,99].</fo:inline>
"abc"</fo:block>
  <fo:block id="idp643984" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.2.6 
      Maps</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maps are a set of key to value associations. These associations
      are encapsulated with "#{" and "}". To create an association
      from "key" to value 42:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; #{ "key" =&gt; 42 }.
#{"key" =&gt; 42}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us jump straight into the deep end with an example using some
      interesting features.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows how to calculate alpha blending
      using maps to reference color and alpha channels. Enter the code
      in a file named <fo:inline font-family="monospace">color.erl</fo:inline>):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(color).

-export([new/4, blend/2]).

-define(is_channel(V), (is_float(V) andalso V &gt;= 0.0 andalso V =&lt; 1.0)).

new(R,G,B,A) when ?is_channel(R), ?is_channel(G),
                  ?is_channel(B), ?is_channel(A) -&gt;
    #{red =&gt; R, green =&gt; G, blue =&gt; B, alpha =&gt; A}.

blend(Src,Dst) -&gt;
    blend(Src,Dst,alpha(Src,Dst)).

blend(Src,Dst,Alpha) when Alpha &gt; 0.0 -&gt;
    Dst#{
        red   := red(Src,Dst) / Alpha,
        green := green(Src,Dst) / Alpha,
        blue  := blue(Src,Dst) / Alpha,
        alpha := Alpha
    };
blend(_,Dst,_) -&gt;
    Dst#{
        red   := 0.0,
        green := 0.0,
        blue  := 0.0,
        alpha := 0.0
    }.

alpha(#{alpha := SA}, #{alpha := DA}) -&gt;
    SA + DA*(1.0 - SA).

red(#{red := SV, alpha := SA}, #{red := DV, alpha := DA}) -&gt;
    SV*SA + DV*DA*(1.0 - SA).
green(#{green := SV, alpha := SA}, #{green := DV, alpha := DA}) -&gt;
    SV*SA + DV*DA*(1.0 - SA).
blue(#{blue := SV, alpha := SA}, #{blue := DV, alpha := DA}) -&gt;
    SV*SA + DV*DA*(1.0 - SA).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compile and test:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">c(color).</fo:inline>
{ok,color}
&gt; <fo:inline font-weight="bold">C1 = color:new(0.3,0.4,0.5,1.0).</fo:inline>
#{alpha =&gt; 1.0,blue =&gt; 0.5,green =&gt; 0.4,red =&gt; 0.3}
&gt; <fo:inline font-weight="bold">C2 = color:new(1.0,0.8,0.1,0.3).</fo:inline>
#{alpha =&gt; 0.3,blue =&gt; 0.1,green =&gt; 0.8,red =&gt; 1.0}
&gt; <fo:inline font-weight="bold">color:blend(C1,C2).</fo:inline>
#{alpha =&gt; 1.0,blue =&gt; 0.5,green =&gt; 0.4,red =&gt; 0.3}
&gt; <fo:inline font-weight="bold">color:blend(C2,C1).</fo:inline>
#{alpha =&gt; 1.0,blue =&gt; 0.38,green =&gt; 0.52,red =&gt; 0.51}
</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This example warrants some explanation:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-define(is_channel(V), (is_float(V) andalso V &gt;= 0.0 andalso V =&lt; 1.0)).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First a macro <fo:inline font-family="monospace">is_channel</fo:inline> is defined to help with the
      guard tests. This is only here for convenience and to reduce
      syntax cluttering. For more information about macros, see
      <fo:inline font-style="italic">
      The Preprocessor</fo:inline>.
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
new(R,G,B,A) when ?is_channel(R), ?is_channel(G),
                  ?is_channel(B), ?is_channel(A) -&gt;
    #{red =&gt; R, green =&gt; G, blue =&gt; B, alpha =&gt; A}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">new/4</fo:inline> creates a new map term and lets the keys
      <fo:inline font-family="monospace">red</fo:inline>, <fo:inline font-family="monospace">green</fo:inline>, <fo:inline font-family="monospace">blue</fo:inline>, and <fo:inline font-family="monospace">alpha</fo:inline> be
      associated with an initial value. In this case, only float
      values between and including 0.0 and 1.0 are allowed, as ensured
      by the <fo:inline font-family="monospace">?is_channel/1</fo:inline> macro for each argument. Only the
      <fo:inline font-family="monospace">=&gt;</fo:inline> operator is allowed when creating a new map.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By calling <fo:inline font-family="monospace">blend/2</fo:inline> on any color term created by
      <fo:inline font-family="monospace">new/4</fo:inline>, the resulting color can be calculated as
      determined by the two map terms.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first thing <fo:inline font-family="monospace">blend/2</fo:inline> does is to calculate the
      resulting alpha channel:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
alpha(#{alpha := SA}, #{alpha := DA}) -&gt;
    SA + DA*(1.0 - SA).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value associated with key <fo:inline font-family="monospace">alpha</fo:inline> is fetched for both
      arguments using the <fo:inline font-family="monospace">:=</fo:inline> operator. The other keys in the
      map are ignored, only the key <fo:inline font-family="monospace">alpha</fo:inline> is required and
      checked for.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is also the case for functions <fo:inline font-family="monospace">red/2</fo:inline>,
      <fo:inline font-family="monospace">blue/2</fo:inline>, and <fo:inline font-family="monospace">green/2</fo:inline>.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
red(#{red := SV, alpha := SA}, #{red := DV, alpha := DA}) -&gt;
    SV*SA + DV*DA*(1.0 - SA).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The difference here is that a check is made for two keys in
      each map argument. The other keys are ignored.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Finally, let us return the resulting color in <fo:inline font-family="monospace">blend/3</fo:inline>:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
blend(Src,Dst,Alpha) when Alpha &gt; 0.0 -&gt;
    Dst#{
        red   := red(Src,Dst) / Alpha,
        green := green(Src,Dst) / Alpha,
        blue  := blue(Src,Dst) / Alpha,
        alpha := Alpha
    };</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Dst</fo:inline> map is updated with new channel values. The
      syntax for updating an existing key with a new value is with the
      <fo:inline font-family="monospace">:=</fo:inline> operator.
    </fo:block>
  <fo:block id="idp2435888" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.2.7 
      Standard Modules and Manual Pages</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang has many standard modules to help you do things. For
      example, the module <fo:inline font-family="monospace">io</fo:inline> contains many functions that help
      in doing formatted input/output. To look up information about
      standard modules, the command <fo:inline font-family="monospace">erl -man</fo:inline> can be used at the
      operating shell or command prompt (the same place as you started
      <fo:inline font-family="monospace">erl</fo:inline>). Try the operating system shell command:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -man io</fo:inline>
ERLANG MODULE DEFINITION                                    io(3)

MODULE
     io - Standard I/O Server Interface Functions

DESCRIPTION
     This module provides an  interface  to  standard  Erlang  IO
     servers. The output functions all return ok if they are suc-
     ...</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If this does not work on your system, the documentation is
      included as HTML in the Erlang/OTP release. You can also read
      the documentation as HTML or download it as PDF from either of
      the sites www.erlang.se (commercial Erlang) or www.erlang.org
      (open source). For example, for Erlang/OTP release R9B:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
http://www.erlang.org/doc/r9b/doc/index.html</fo:block>
  <fo:block id="idp2441456" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.2.8 
      Writing Output to a Terminal</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is nice to be able to do formatted output in examples, so
      the next example shows a simple way to use the <fo:inline font-family="monospace">io:format</fo:inline>
      function. Like all other exported functions, you can test the
      <fo:inline font-family="monospace">io:format</fo:inline> function in the shell:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
31&gt; <fo:inline font-weight="bold">io:format("hello world~n", []).</fo:inline>
hello world
ok
32&gt; <fo:inline font-weight="bold">io:format("this outputs one Erlang term: ~w~n", [hello]).</fo:inline>
this outputs one Erlang term: hello
ok
33&gt; <fo:inline font-weight="bold">io:format("this outputs two Erlang terms: ~w~w~n", [hello, world]).</fo:inline>
this outputs two Erlang terms: helloworld
ok
34&gt; <fo:inline font-weight="bold">io:format("this outputs two Erlang terms: ~w ~w~n", [hello, world]).</fo:inline>
this outputs two Erlang terms: hello world
ok</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">format/2</fo:inline> (that is, <fo:inline font-family="monospace">format</fo:inline> with two
      arguments) takes two lists. The first one is nearly always a list
      written between " ". This list is printed out as it is,
      except that each ~w is replaced by a term taken in order from
      the second list. Each ~n is replaced by a new line.
      The <fo:inline font-family="monospace">io:format/2</fo:inline> function itself returns the atom <fo:inline font-family="monospace">ok</fo:inline>
      if everything goes as planned. Like other functions in Erlang, it
      crashes if an error occurs. This is not a fault in Erlang, it is
      a deliberate policy. Erlang has sophisticated mechanisms to
      handle errors which are shown later. As an exercise, try to
      make <fo:inline font-family="monospace">io:format</fo:inline> crash, it should not be difficult. But
      notice that although <fo:inline font-family="monospace">io:format</fo:inline> crashes, the Erlang shell
      itself does not crash.</fo:block>
  <fo:block id="idp1183824" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.2.9 
      A Larger Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now for a larger example to consolidate what you have learnt so
      far. Assume that you have a list of temperature readings from a number
      of cities in the world. Some of them are in Celsius
      and some in Fahrenheit (as in the previous list). First let us
      convert them all to Celsius, then let us print the data neatly.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% This module is in file tut5.erl

-module(tut5).
-export([format_temps/1]).

%% Only this function is exported
format_temps([])-&gt;                        % No output for an empty list
    ok;
format_temps([City | Rest]) -&gt;
    print_temp(convert_to_celsius(City)),
    format_temps(Rest).

convert_to_celsius({Name, {c, Temp}}) -&gt;  % No conversion needed
    {Name, {c, Temp}};
convert_to_celsius({Name, {f, Temp}}) -&gt;  % Do the conversion
    {Name, {c, (Temp - 32) * 5 / 9}}.

print_temp({Name, {c, Temp}}) -&gt;
    io:format("~-15w ~w c~n", [Name, Temp]).</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
35&gt; <fo:inline font-weight="bold">c(tut5).</fo:inline>
{ok,tut5}
36&gt; <fo:inline font-weight="bold">tut5:format_temps([{moscow, {c, -10}}, {cape_town, {f, 70}},</fo:inline>
<fo:inline font-weight="bold">{stockholm, {c, -4}}, {paris, {f, 28}}, {london, {f, 36}}]).</fo:inline>
moscow          -10 c
cape_town       21.11111111111111 c
stockholm       -4 c
paris           -2.2222222222222223 c
london          2.2222222222222223 c
ok</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before looking at how this program works, notice that
      a few comments are added to the code. A comment starts with a
      %-character and goes on to the end of the line. Notice also that
      the <fo:inline font-family="monospace">-export([format_temps/1]).</fo:inline> line only includes
      the function <fo:inline font-family="monospace">format_temps/1</fo:inline>. The other functions are
      <fo:inline font-weight="bold">local</fo:inline> functions, that is, they are not visible from outside
      the module <fo:inline font-family="monospace">tut5</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice also that when testing the program from the shell,
      the input is spread over two lines as the line was too long.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">format_temps</fo:inline> is called the first time, <fo:inline font-family="monospace">City</fo:inline>
      gets the value <fo:inline font-family="monospace">{moscow,{c,-10}}</fo:inline> and <fo:inline font-family="monospace">Rest</fo:inline> is
      the rest of the list. So the function
      <fo:inline font-family="monospace">print_temp(convert_to_celsius({moscow,{c,-10}}))</fo:inline> is called.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here is a function call as
      <fo:inline font-family="monospace">convert_to_celsius({moscow,{c,-10}})</fo:inline> as the argument to
      the function <fo:inline font-family="monospace">print_temp</fo:inline>. When function calls are <fo:inline font-weight="bold">nested</fo:inline>
      like this, they execute (evaluate) from the inside out.
      That is, first <fo:inline font-family="monospace">convert_to_celsius({moscow,{c,-10}})</fo:inline> is evaluated,
      which gives the value <fo:inline font-family="monospace">{moscow,{c,-10}}</fo:inline> as the temperature
      is already in Celsius. Then <fo:inline font-family="monospace">print_temp({moscow,{c,-10}})</fo:inline>
      is evaluated.
      The function <fo:inline font-family="monospace">convert_to_celsius</fo:inline> works in a similar way to
      the <fo:inline font-family="monospace">convert_length</fo:inline> function in the previous example.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">print_temp</fo:inline> simply calls <fo:inline font-family="monospace">io:format</fo:inline> in a similar way
      to what has been described above. Notice that ~-15w says to print
      the "term" with a field length (width) of 15 and left justify it.
      (see the <fo:inline font-style="italic">io(3)</fo:inline>) manual page in STDLIB.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now <fo:inline font-family="monospace">format_temps(Rest)</fo:inline> is called with the rest of the list
      as an argument. This way of doing things is similar to the loop
      constructs in other languages. (Yes, this is recursion, but do not
      let that worry you.) So the same <fo:inline font-family="monospace">format_temps</fo:inline> function is
      called again, this time <fo:inline font-family="monospace">City</fo:inline> gets the value
      <fo:inline font-family="monospace">{cape_town,{f,70}}</fo:inline> and the same procedure is repeated as
      before. This is done until the list becomes empty, that is [],
      which causes the first clause <fo:inline font-family="monospace">format_temps([])</fo:inline> to match.
      This simply returns (results in) the atom <fo:inline font-family="monospace">ok</fo:inline>, so
      the program ends.</fo:block>
  <fo:block id="idp1204432" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.2.10 
      Matching, Guards, and Scope of Variables</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It can be useful to find the maximum and minimum temperature
      in lists like this. Before extending the program to do this,
      let us look at functions for finding the maximum value of
      the elements in a list:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut6).
-export([list_max/1]).

list_max([Head|Rest]) -&gt;
   list_max(Rest, Head).

list_max([], Res) -&gt;
    Res;
list_max([Head|Rest], Result_so_far) when Head &gt; Result_so_far -&gt;
    list_max(Rest, Head);
list_max([Head|Rest], Result_so_far)  -&gt;
    list_max(Rest, Result_so_far).</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
37&gt; <fo:inline font-weight="bold">c(tut6).</fo:inline>
{ok,tut6}
38&gt; <fo:inline font-weight="bold">tut6:list_max([1,2,3,4,5,7,4,3,2,1]).</fo:inline>
7</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First notice that two functions have the same name,
      <fo:inline font-family="monospace">list_max</fo:inline>. However, each of these takes a different number
      of arguments (parameters). In Erlang these are regarded as
      completely different functions. Where you need to distinguish
      between these functions, you write Name/Arity, where
      Name is the function name and Arity is
      the number of arguments, in this case <fo:inline font-family="monospace">list_max/1</fo:inline> and
      <fo:inline font-family="monospace">list_max/2</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example you walk through a list "carrying" a
      value, in this case <fo:inline font-family="monospace">Result_so_far</fo:inline>.
      <fo:inline font-family="monospace">list_max/1</fo:inline> simply assumes that the max value of the list
      is the head of the list and calls <fo:inline font-family="monospace">list_max/2</fo:inline> with the rest
      of the list and the value of the head of the list. In the above
      this would be <fo:inline font-family="monospace">list_max([2,3,4,5,7,4,3,2,1],1)</fo:inline>. If you tried
      to use <fo:inline font-family="monospace">list_max/1</fo:inline> with an empty list or tried to use it
      with something that is not a list at all, you would cause an error.
      Notice that the Erlang philosophy is not to handle errors of this
      type in the function they occur, but to do so elsewhere. More
      about this later.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In <fo:inline font-family="monospace">list_max/2</fo:inline>, you walk down the list and use <fo:inline font-family="monospace">Head</fo:inline>
      instead of <fo:inline font-family="monospace">Result_so_far</fo:inline> when <fo:inline font-family="monospace">Head</fo:inline> &gt;
      <fo:inline font-family="monospace">Result_so_far</fo:inline>. <fo:inline font-family="monospace">when</fo:inline> is a special word used before
      the -&gt; in the function to say that you only use this part
      of the function if the test that follows is true. A test
      of this type is called <fo:inline font-weight="bold">guard</fo:inline>. If the guard is false (that is,
      the guard fails), the next part of the function is tried. In this
      case, if <fo:inline font-family="monospace">Head</fo:inline> is not greater than <fo:inline font-family="monospace">Result_so_far</fo:inline>, then
      it must be smaller or equal to it. This means that a guard on
      the next part of the function is not needed.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some useful operators in guards are:
    </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>&lt; less than</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>&gt; greater than</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>== equal</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>&gt;= greater or equal</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>=&lt; less or equal</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>/= not equal</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(see <fo:inline font-style="italic">Guard Sequences</fo:inline>).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To change the above program to one that works out the minimum
      value of the element in a list, you only need to
      write &lt; instead of &gt;. (But it would be wise to change
      the name of the function to <fo:inline font-family="monospace">list_min</fo:inline>.)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Earlier it was mentioned that a variable can only be
      given a value once in its scope. In the above you see
      that <fo:inline font-family="monospace">Result_so_far</fo:inline> is given several values. This is
      OK since every time you call <fo:inline font-family="monospace">list_max/2</fo:inline> you create a new
      scope and one can regard <fo:inline font-family="monospace">Result_so_far</fo:inline> as a
      different variable in each scope.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another way of creating and giving a variable a value is by using
      the match operator = . So if you write <fo:inline font-family="monospace">M = 5</fo:inline>, a variable
      called <fo:inline font-family="monospace">M</fo:inline> is created with the value 5. If, in
      the same scope, you then write <fo:inline font-family="monospace">M = 6</fo:inline>, an error is returned. Try
      this out in the shell:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
39&gt; <fo:inline font-weight="bold">M = 5.</fo:inline>
5
40&gt; <fo:inline font-weight="bold">M = 6.</fo:inline>
** exception error: no match of right hand side value 6
41&gt; <fo:inline font-weight="bold">M = M + 1.</fo:inline>
** exception error: no match of right hand side value 6
42&gt; <fo:inline font-weight="bold">N = M + 1.</fo:inline>
6</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The use of the match operator is particularly useful for pulling
      apart Erlang terms and creating new ones.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
43&gt; <fo:inline font-weight="bold">{X, Y} = {paris, {f, 28}}.</fo:inline>
{paris,{f,28}}
44&gt; <fo:inline font-weight="bold">X.</fo:inline>
paris
45&gt; <fo:inline font-weight="bold">Y.</fo:inline>
{f,28}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here <fo:inline font-family="monospace">X</fo:inline> gets the value <fo:inline font-family="monospace">paris</fo:inline> and
      <fo:inline font-family="monospace">Y</fo:inline><fo:inline font-family="monospace">{f,28}</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you try to do the same again with another city,
      an error is returned:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
46&gt; <fo:inline font-weight="bold">{X, Y} = {london, {f, 36}}.</fo:inline>
** exception error: no match of right hand side value {london,{f,36}}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Variables can also be used to improve the readability of
      programs. For example, in function <fo:inline font-family="monospace">list_max/2</fo:inline> above,
      you can write:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
list_max([Head|Rest], Result_so_far) when Head &gt; Result_so_far -&gt;
    New_result_far = Head,
    list_max(Rest, New_result_far);</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is possibly a little clearer.</fo:block>
  <fo:block id="idp2847024" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.2.11 
      More About Lists</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Remember that the | operator can be used to get the head of a
      list:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
47&gt; <fo:inline font-weight="bold">[M1|T1] = [paris, london, rome].</fo:inline>
[paris,london,rome]
48&gt; <fo:inline font-weight="bold">M1.</fo:inline>
paris
49&gt; <fo:inline font-weight="bold">T1.</fo:inline>
[london,rome]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The | operator can also be used to add a head to a list:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
50&gt; <fo:inline font-weight="bold">L1 = [madrid | T1].</fo:inline>
[madrid,london,rome]
51&gt; <fo:inline font-weight="bold">L1.</fo:inline>
[madrid,london,rome]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now an example of this when working with lists - reversing
      the order of a list:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut8).

-export([reverse/1]).

reverse(List) -&gt;
    reverse(List, []).

reverse([Head | Rest], Reversed_List) -&gt;
    reverse(Rest, [Head | Reversed_List]);
reverse([], Reversed_List) -&gt;
    Reversed_List.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
52&gt; <fo:inline font-weight="bold">c(tut8).</fo:inline>
{ok,tut8}
53&gt; <fo:inline font-weight="bold">tut8:reverse([1,2,3]).</fo:inline>
[3,2,1]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Consider how <fo:inline font-family="monospace">Reversed_List</fo:inline> is built. It starts as [],
      then successively the heads are taken off of the list to be reversed
      and added to the the <fo:inline font-family="monospace">Reversed_List</fo:inline>, as shown in
      the following:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
reverse([1|2,3], []) =&gt;
    reverse([2,3], [1|[]])

reverse([2|3], [1]) =&gt;
    reverse([3], [2|[1])

reverse([3|[]], [2,1]) =&gt;
    reverse([], [3|[2,1]])

reverse([], [3,2,1]) =&gt;
    [3,2,1]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">lists</fo:inline> contains many functions for
      manipulating lists, for example, for reversing them. So before
      writing a list-manipulating function it is a good idea to check
      if one not already is written for you
      (see the <fo:inline font-style="italic">lists(3)</fo:inline>
      manual page in STDLIB).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now let us get back to the cities and temperatures, but take a more
      structured approach this time. First let us convert the whole list
      to Celsius as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut7).
-export([format_temps/1]).

format_temps(List_of_cities) -&gt;
    convert_list_to_c(List_of_cities).

convert_list_to_c([{Name, {f, F}} | Rest]) -&gt;
    Converted_City = {Name, {c, (F -32)* 5 / 9}},
    [Converted_City | convert_list_to_c(Rest)];

convert_list_to_c([City | Rest]) -&gt;
    [City | convert_list_to_c(Rest)];

convert_list_to_c([]) -&gt;
    [].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Test the function:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
54&gt; <fo:inline font-weight="bold">c(tut7).</fo:inline>
{ok, tut7}.
55&gt; <fo:inline font-weight="bold">tut7:format_temps([{moscow, {c, -10}}, {cape_town, {f, 70}},</fo:inline>
<fo:inline font-weight="bold">{stockholm, {c, -4}}, {paris, {f, 28}}, {london, {f, 36}}]).</fo:inline>
[{moscow,{c,-10}},
 {cape_town,{c,21.11111111111111}},
 {stockholm,{c,-4}},
 {paris,{c,-2.2222222222222223}},
 {london,{c,2.2222222222222223}}]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Explanation:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
format_temps(List_of_cities) -&gt;
    convert_list_to_c(List_of_cities).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here <fo:inline font-family="monospace">format_temps/1</fo:inline> calls
      <fo:inline font-family="monospace">convert_list_to_c/1</fo:inline>. <fo:inline font-family="monospace">convert_list_to_c/1</fo:inline> takes off
      the head of the <fo:inline font-family="monospace">List_of_cities</fo:inline>, converts it to Celsius if
      needed. The | operator is used to add the (maybe) converted
      to the converted rest of the list:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[Converted_City | convert_list_to_c(Rest)];</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[City | convert_list_to_c(Rest)];</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is done until the end of the list is reached, that is,
      the list is empty:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
convert_list_to_c([]) -&gt;
    [].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now when the list is converted, a function to print it is added:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut7).
-export([format_temps/1]).

format_temps(List_of_cities) -&gt;
    Converted_List = convert_list_to_c(List_of_cities),
    print_temp(Converted_List).

convert_list_to_c([{Name, {f, F}} | Rest]) -&gt;
    Converted_City = {Name, {c, (F -32)* 5 / 9}},
    [Converted_City | convert_list_to_c(Rest)];

convert_list_to_c([City | Rest]) -&gt;
    [City | convert_list_to_c(Rest)];

convert_list_to_c([]) -&gt;
    [].

print_temp([{Name, {c, Temp}} | Rest]) -&gt;
    io:format("~-15w ~w c~n", [Name, Temp]),
    print_temp(Rest);
print_temp([]) -&gt;
    ok.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
56&gt; <fo:inline font-weight="bold">c(tut7).</fo:inline>
{ok,tut7}
57&gt; <fo:inline font-weight="bold">tut7:format_temps([{moscow, {c, -10}}, {cape_town, {f, 70}},</fo:inline>
<fo:inline font-weight="bold">{stockholm, {c, -4}}, {paris, {f, 28}}, {london, {f, 36}}]).</fo:inline>
moscow          -10 c
cape_town       21.11111111111111 c
stockholm       -4 c
paris           -2.2222222222222223 c
london          2.2222222222222223 c
ok</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now a function has to be added to find the cities with
      the maximum and minimum temperatures. The following program is not
      the most efficient way of doing this as you walk through the list
      of cities four times. But it is better to first strive for
      clarity and correctness and to make programs efficient only if
      needed.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut7).
-export([format_temps/1]).

format_temps(List_of_cities) -&gt;
    Converted_List = convert_list_to_c(List_of_cities),
    print_temp(Converted_List),
    {Max_city, Min_city} = find_max_and_min(Converted_List),
    print_max_and_min(Max_city, Min_city).

convert_list_to_c([{Name, {f, Temp}} | Rest]) -&gt;
    Converted_City = {Name, {c, (Temp -32)* 5 / 9}},
    [Converted_City | convert_list_to_c(Rest)];

convert_list_to_c([City | Rest]) -&gt;
    [City | convert_list_to_c(Rest)];

convert_list_to_c([]) -&gt;
    [].

print_temp([{Name, {c, Temp}} | Rest]) -&gt;
    io:format("~-15w ~w c~n", [Name, Temp]),
    print_temp(Rest);
print_temp([]) -&gt;
    ok.

find_max_and_min([City | Rest]) -&gt;
    find_max_and_min(Rest, City, City).

find_max_and_min([{Name, {c, Temp}} | Rest], 
         {Max_Name, {c, Max_Temp}}, 
         {Min_Name, {c, Min_Temp}}) -&gt;
    if 
        Temp &gt; Max_Temp -&gt;
            Max_City = {Name, {c, Temp}};           % Change
        true -&gt; 
            Max_City = {Max_Name, {c, Max_Temp}} % Unchanged
    end,
    if
         Temp &lt; Min_Temp -&gt;
            Min_City = {Name, {c, Temp}};           % Change
        true -&gt; 
            Min_City = {Min_Name, {c, Min_Temp}} % Unchanged
    end,
    find_max_and_min(Rest, Max_City, Min_City);

find_max_and_min([], Max_City, Min_City) -&gt;
    {Max_City, Min_City}.

print_max_and_min({Max_name, {c, Max_temp}}, {Min_name, {c, Min_temp}}) -&gt;
    io:format("Max temperature was ~w c in ~w~n", [Max_temp, Max_name]),
    io:format("Min temperature was ~w c in ~w~n", [Min_temp, Min_name]).</fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
58&gt; <fo:inline font-weight="bold">c(tut7).</fo:inline>
{ok, tut7}
59&gt; <fo:inline font-weight="bold">tut7:format_temps([{moscow, {c, -10}}, {cape_town, {f, 70}},</fo:inline>
<fo:inline font-weight="bold">{stockholm, {c, -4}}, {paris, {f, 28}}, {london, {f, 36}}]).</fo:inline>
moscow          -10 c
cape_town       21.11111111111111 c
stockholm       -4 c
paris           -2.2222222222222223 c
london          2.2222222222222223 c
Max temperature was 21.11111111111111 c in cape_town
Min temperature was -10 c in moscow
ok</fo:block>
  <fo:block id="idp2878800" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.2.12 
      If and Case</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">find_max_and_min</fo:inline> works out the maximum and
      minimum temperature. A new construct, <fo:inline font-family="monospace">if</fo:inline>, is introduced here.
      If works as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
if
    Condition 1 -&gt;
        Action 1;
    Condition 2 -&gt;
        Action 2;
    Condition 3 -&gt;
        Action 3;
    Condition 4 -&gt;
        Action 4
end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that there is no ";" before <fo:inline font-family="monospace">end</fo:inline>. Conditions do
      the same as guards, that is, tests that succeed or fail. Erlang
      starts at the top
      and tests until it finds a condition that succeeds. Then it evaluates
      (performs) the action following the condition and ignores all
      other conditions and actions before the <fo:inline font-family="monospace">end</fo:inline>. If no
      condition matches, a run-time failure occurs. A condition
      that always succeeds is the atom <fo:inline font-family="monospace">true</fo:inline>. This is
      often used last in an <fo:inline font-family="monospace">if</fo:inline>, meaning, do the action following
      the <fo:inline font-family="monospace">true</fo:inline> if all other conditions have failed.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is a short program to show the workings of
      <fo:inline font-family="monospace">if</fo:inline>.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut9).
-export([test_if/2]).

test_if(A, B) -&gt;
    if 
        A == 5 -&gt;
            io:format("A == 5~n", []),
            a_equals_5;
        B == 6 -&gt;
            io:format("B == 6~n", []),
            b_equals_6;
        A == 2, B == 3 -&gt;                      %That is A equals 2 and B equals 3
            io:format("A == 2, B == 3~n", []),
            a_equals_2_b_equals_3;
        A == 1 ; B == 7 -&gt;                     %That is A equals 1 or B equals 7
            io:format("A == 1 ; B == 7~n", []),
            a_equals_1_or_b_equals_7
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Testing this program gives:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
60&gt; <fo:inline font-weight="bold">c(tut9).</fo:inline>
{ok,tut9}
61&gt; <fo:inline font-weight="bold">tut9:test_if(5,33).</fo:inline>
A == 5
a_equals_5
62&gt; <fo:inline font-weight="bold">tut9:test_if(33,6).</fo:inline>
B == 6
b_equals_6
63&gt; <fo:inline font-weight="bold">tut9:test_if(2, 3).</fo:inline>
A == 2, B == 3
a_equals_2_b_equals_3
64&gt; <fo:inline font-weight="bold">tut9:test_if(1, 33).</fo:inline>
A == 1 ; B == 7
a_equals_1_or_b_equals_7
65&gt; <fo:inline font-weight="bold">tut9:test_if(33, 7).</fo:inline>
A == 1 ; B == 7
a_equals_1_or_b_equals_7
66&gt; <fo:inline font-weight="bold">tut9:test_if(33, 33).</fo:inline>
** exception error: no true branch found when evaluating an if expression
     in function  tut9:test_if/2 (tut9.erl, line 5)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-family="monospace">tut9:test_if(33,33)</fo:inline> does not cause any
      condition to succeed. This leads to the run time error
      <fo:inline font-family="monospace">if_clause</fo:inline>, here nicely formatted by the shell. See
      <fo:inline font-style="italic">Guard Sequences</fo:inline>
      for details of the many guard tests available.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">case</fo:inline> is another construct in Erlang. Recall that the
      <fo:inline font-family="monospace">convert_length</fo:inline> function was written as:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
convert_length({centimeter, X}) -&gt;
    {inch, X / 2.54};
convert_length({inch, Y}) -&gt;
    {centimeter, Y * 2.54}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same program can also be written as:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut10).
-export([convert_length/1]).

convert_length(Length) -&gt;
    case Length of
        {centimeter, X} -&gt;
            {inch, X / 2.54};
        {inch, Y} -&gt;
            {centimeter, Y * 2.54}
    end.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
67&gt; <fo:inline font-weight="bold">c(tut10).</fo:inline>
{ok,tut10}
68&gt; <fo:inline font-weight="bold">tut10:convert_length({inch, 6}).</fo:inline>
{centimeter,15.24}
69&gt; <fo:inline font-weight="bold">tut10:convert_length({centimeter, 2.5}).</fo:inline>
{inch,0.984251968503937}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Both <fo:inline font-family="monospace">case</fo:inline> and <fo:inline font-family="monospace">if</fo:inline> have <fo:inline font-weight="bold">return values</fo:inline>, that is,
      in the above example <fo:inline font-family="monospace">case</fo:inline> returned
      either <fo:inline font-family="monospace">{inch,X/2.54}</fo:inline> or <fo:inline font-family="monospace">{centimeter,Y*2.54}</fo:inline>.
      The behaviour of <fo:inline font-family="monospace">case</fo:inline> can also be modified by using guards.
      The following example clarifies this. It
      tells us the length of a month, given the year.
      The year must be known, since February has 29 days in a leap year.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut11).
-export([month_length/2]).

month_length(Year, Month) -&gt;
    %% All years divisible by 400 are leap
    %% Years divisible by 100 are not leap (except the 400 rule above)
    %% Years divisible by 4 are leap (except the 100 rule above)
    Leap = if
        trunc(Year / 400) * 400 == Year -&gt;
            leap;
        trunc(Year / 100) * 100 == Year -&gt;
            not_leap;
        trunc(Year / 4) * 4 == Year -&gt;
            leap;
        true -&gt;
            not_leap
    end,  
    case Month of
        sep -&gt; 30;
        apr -&gt; 30;
        jun -&gt; 30;
        nov -&gt; 30;
        feb when Leap == leap -&gt; 29;
        feb -&gt; 28;
        jan -&gt; 31;
        mar -&gt; 31;
        may -&gt; 31;
        jul -&gt; 31;
        aug -&gt; 31;
        oct -&gt; 31;
        dec -&gt; 31
    end.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
70&gt; <fo:inline font-weight="bold">c(tut11).</fo:inline>
{ok,tut11}
71&gt; <fo:inline font-weight="bold">tut11:month_length(2004, feb).</fo:inline>
29
72&gt; <fo:inline font-weight="bold">tut11:month_length(2003, feb).</fo:inline>
28
73&gt; <fo:inline font-weight="bold">tut11:month_length(1947, aug).</fo:inline>
31</fo:block>
  <fo:block id="idp2906704" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.2.13 
      Built-In Functions (BIFs)</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">BIFs are functions that for some reason are
      built-in to the Erlang virtual machine. BIFs often implement
      functionality that is impossible or is too
      inefficient to implement in Erlang. Some BIFs can be called
      using the function name only but they are by default belonging
      to the <fo:inline font-family="monospace">erlang</fo:inline> module. For example, the call to the
      BIF <fo:inline font-family="monospace">trunc</fo:inline>
      below is equivalent to a call to <fo:inline font-family="monospace">erlang:trunc</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As shown, first it is checked if a year is leap. If a
      year is divisible by 400, it is a leap year. To determine this,
      first divide the year by 400 and use the BIF
      <fo:inline font-family="monospace">trunc</fo:inline> (more about this later) to cut off any decimals. Then
      multiply by 400 again and see if the same value is returned again.
      For example, year 2004:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2004 / 400 = 5.01
trunc(5.01) = 5
5 * 400 = 2000</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">2000 is not the same as 2004, so 2004 is not divisible by 400.
    Year 2000:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2000 / 400 = 5.0
trunc(5.0) = 5
5 * 400 = 2000</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">That is, a leap year. The next two <fo:inline font-family="monospace">trunc</fo:inline>-tests evaluate
      if the year is divisible by 100 or 4 in the same way. The first
      <fo:inline font-family="monospace">if</fo:inline> returns <fo:inline font-family="monospace">leap</fo:inline> or <fo:inline font-family="monospace">not_leap</fo:inline>, which lands up
      in the variable <fo:inline font-family="monospace">Leap</fo:inline>. This variable is used in the guard
      for <fo:inline font-family="monospace">feb</fo:inline> in the following <fo:inline font-family="monospace">case</fo:inline> that tells us how
      long the month is.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This example showed the use of <fo:inline font-family="monospace">trunc</fo:inline>. It is easier
      to use the Erlang operator <fo:inline font-family="monospace">rem</fo:inline> that gives the remainder
      after division, for example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
74&gt; <fo:inline font-weight="bold">2004 rem 400.</fo:inline>
4</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">So instead of writing:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
trunc(Year / 400) * 400 == Year -&gt;
    leap;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">it can be written:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Year rem 400 == 0 -&gt;
    leap;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are many other BIFs such as
      <fo:inline font-family="monospace">trunc</fo:inline>. Only a few BIFs can be used in guards,
      and you cannot use functions you have defined yourself in guards.
      (see
      <fo:inline font-style="italic">Guard Sequences</fo:inline>)
      (For advanced readers: This is to ensure that guards do not have side
      effects.) Let us play with a few of these functions in the shell:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
75&gt; <fo:inline font-weight="bold">trunc(5.6).</fo:inline>
5
76&gt; <fo:inline font-weight="bold">round(5.6).</fo:inline>
6
77&gt; <fo:inline font-weight="bold">length([a,b,c,d]).</fo:inline>
4
78&gt; <fo:inline font-weight="bold">float(5).</fo:inline>
5.0
79&gt; <fo:inline font-weight="bold">is_atom(hello).</fo:inline>
true
80&gt; <fo:inline font-weight="bold">is_atom("hello").</fo:inline>
false
81&gt; <fo:inline font-weight="bold">is_tuple({paris, {c, 30}}).</fo:inline>
true
82&gt; <fo:inline font-weight="bold">is_tuple([paris, {c, 30}]).</fo:inline>
false</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All of these can be used in guards. Now for some BIFs that cannot be
      used in guards:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
83&gt; <fo:inline font-weight="bold">atom_to_list(hello).</fo:inline>
"hello"
84&gt; <fo:inline font-weight="bold">list_to_atom("goodbye").</fo:inline>
goodbye
85&gt; <fo:inline font-weight="bold">integer_to_list(22).</fo:inline>
"22"</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These three BIFs do conversions that would be difficult (or
      impossible) to do in Erlang.</fo:block>
  <fo:block id="idp2930288" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.2.14 
      Higher-Order Functions (Funs)</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang, like most modern functional programming languages, has
      higher-order functions. Here is an example using the shell:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
86&gt; <fo:inline font-weight="bold">Xf = fun(X) -&gt; X * 2 end.</fo:inline>
#Fun&lt;erl_eval.5.123085357&gt;
87&gt; <fo:inline font-weight="bold">Xf(5).</fo:inline>
10</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here is defined a function that doubles
      the value of a number and assigned this function to a variable. Thus
      <fo:inline font-family="monospace">Xf(5)</fo:inline> returns value 10. Two useful functions when
      working with lists are <fo:inline font-family="monospace">foreach</fo:inline> and <fo:inline font-family="monospace">map</fo:inline>, which are
      defined as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
foreach(Fun, [First|Rest]) -&gt;
    Fun(First),
    foreach(Fun, Rest);
foreach(Fun, []) -&gt;
    ok.

map(Fun, [First|Rest]) -&gt; 
    [Fun(First)|map(Fun,Rest)];
map(Fun, []) -&gt; 
    [].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These two functions are provided in the standard module
      <fo:inline font-family="monospace">lists</fo:inline>. <fo:inline font-family="monospace">foreach</fo:inline> takes a list and applies a fun to
      every element in the list. <fo:inline font-family="monospace">map</fo:inline> creates a new list by
      applying a fun to every element in a list. Going back to
      the shell, <fo:inline font-family="monospace">map</fo:inline> is used and a fun to add 3 to
      every element of a list:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
88&gt; <fo:inline font-weight="bold">Add_3 = fun(X) -&gt; X + 3 end.</fo:inline>
#Fun&lt;erl_eval.5.123085357&gt;
89&gt; <fo:inline font-weight="bold">lists:map(Add_3, [1,2,3]).</fo:inline>
[4,5,6]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us (again) print the temperatures in a list of cities:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
90&gt; <fo:inline font-weight="bold">Print_City = fun({City, {X, Temp}}) -&gt; io:format("~-15w ~w ~w~n",</fo:inline>
<fo:inline font-weight="bold">[City, X, Temp]) end.</fo:inline>
#Fun&lt;erl_eval.5.123085357&gt;
91&gt; <fo:inline font-weight="bold">lists:foreach(Print_City, [{moscow, {c, -10}}, {cape_town, {f, 70}},</fo:inline>
<fo:inline font-weight="bold">{stockholm, {c, -4}}, {paris, {f, 28}}, {london, {f, 36}}]).</fo:inline>
moscow          c -10
cape_town       f 70
stockholm       c -4
paris           f 28
london          f 36
ok</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us now define a fun that can be used to go through a list
      of cities and temperatures and transform them all to Celsius.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut13).

-export([convert_list_to_c/1]).

convert_to_c({Name, {f, Temp}}) -&gt;
    {Name, {c, trunc((Temp - 32) * 5 / 9)}};
convert_to_c({Name, {c, Temp}}) -&gt;
    {Name, {c, Temp}}.

convert_list_to_c(List) -&gt;
    lists:map(fun convert_to_c/1, List).</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
92&gt; <fo:inline font-weight="bold">tut13:convert_list_to_c([{moscow, {c, -10}}, {cape_town, {f, 70}},</fo:inline>
<fo:inline font-weight="bold">{stockholm, {c, -4}}, {paris, {f, 28}}, {london, {f, 36}}]).</fo:inline>
[{moscow,{c,-10}},
 {cape_town,{c,21}},
 {stockholm,{c,-4}},
 {paris,{c,-2}},
 {london,{c,2}}]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">convert_to_c</fo:inline> function is the same as before, but here
      it is used as a fun:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
lists:map(fun convert_to_c/1, List)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a function defined elsewhere is used as a fun, it can be referred
      to as <fo:inline font-family="monospace">Function/Arity</fo:inline> (remember that <fo:inline font-family="monospace">Arity</fo:inline> =
      number of arguments). So in the <fo:inline font-family="monospace">map</fo:inline>-call
      <fo:inline font-family="monospace">lists:map(fun convert_to_c/1, List)</fo:inline> is written. As shown,
      <fo:inline font-family="monospace">convert_list_to_c</fo:inline> becomes much shorter and easier to
      understand.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The standard module <fo:inline font-family="monospace">lists</fo:inline> also contains a function
      <fo:inline font-family="monospace">sort(Fun, List)</fo:inline> where <fo:inline font-family="monospace">Fun</fo:inline> is a fun with two
      arguments. This fun returns <fo:inline font-family="monospace">true</fo:inline> if the first
      argument is less than the second argument, or else <fo:inline font-family="monospace">false</fo:inline>.
      Sorting is added to the <fo:inline font-family="monospace">convert_list_to_c</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut13).

-export([convert_list_to_c/1]).

convert_to_c({Name, {f, Temp}}) -&gt;
    {Name, {c, trunc((Temp - 32) * 5 / 9)}};
convert_to_c({Name, {c, Temp}}) -&gt;
    {Name, {c, Temp}}.

convert_list_to_c(List) -&gt;
    New_list = lists:map(fun convert_to_c/1, List),
    lists:sort(fun({_, {c, Temp1}}, {_, {c, Temp2}}) -&gt;
                       Temp1 &lt; Temp2 end, New_list).</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
93&gt; <fo:inline font-weight="bold">c(tut13).</fo:inline>
{ok,tut13}
94&gt; <fo:inline font-weight="bold">tut13:convert_list_to_c([{moscow, {c, -10}}, {cape_town, {f, 70}},</fo:inline>
<fo:inline font-weight="bold">{stockholm, {c, -4}}, {paris, {f, 28}}, {london, {f, 36}}]).</fo:inline>
[{moscow,{c,-10}},
 {stockholm,{c,-4}},
 {paris,{c,-2}},
 {london,{c,2}},
 {cape_town,{c,21}}]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In <fo:inline font-family="monospace">sort</fo:inline> the fun is used:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
fun({_, {c, Temp1}}, {_, {c, Temp2}}) -&gt; Temp1 &lt; Temp2 end,</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here the concept of an <fo:inline font-weight="bold">anonymous variable</fo:inline>
      "_" is introduced. This is simply shorthand for a variable that
      gets a value, but the value is ignored. This can be used
      anywhere suitable, not just in funs. <fo:inline font-family="monospace">Temp1 &lt; Temp2</fo:inline>
      returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Temp1</fo:inline> is less than <fo:inline font-family="monospace">Temp2</fo:inline>.</fo:block>
  <fo:block id="idp2965152" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">4.3  Concurrent Programming</fo:marker>4.3  Concurrent Programming</fo:block><fo:block id="idp2968208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.3.1 
      Processes</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One of the main reasons for using Erlang instead of other
      functional languages is Erlang's ability to handle concurrency
      and distributed programming. By concurrency is meant programs
      that can handle several threads of execution at the same time.
      For example, modern operating systems allow you to use a
      word processor, a spreadsheet, a mail client, and a print job all
      running at the same time. Each processor (CPU) in
      the system is probably only handling one thread (or job) at a
      time, but it swaps between the jobs at such a rate that it gives
      the illusion of running them all at the same time. It is easy to
      create parallel threads of execution in an Erlang program and
      to allow these threads to communicate with each other. In
      Erlang, each thread of execution is called a <fo:inline font-weight="bold">process</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(Aside: the term "process" is usually used when the threads of
      execution share no data with each other and the term "thread"
      when they share data in some way. Threads of execution in Erlang
      share no data, that is why they are called processes).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang BIF <fo:inline font-family="monospace">spawn</fo:inline> is used to create a new process:
      <fo:inline font-family="monospace">spawn(Module, Exported_Function, List of Arguments)</fo:inline>.
      Consider the following module:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut14).

-export([start/0, say_something/2]).

say_something(What, 0) -&gt;
    done;
say_something(What, Times) -&gt;
    io:format("~p~n", [What]),
    say_something(What, Times - 1).

start() -&gt;
    spawn(tut14, say_something, [hello, 3]),
    spawn(tut14, say_something, [goodbye, 3]).</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
5&gt; <fo:inline font-weight="bold">c(tut14).</fo:inline>
{ok,tut14}
6&gt; <fo:inline font-weight="bold">tut14:say_something(hello, 3).</fo:inline>
hello
hello
hello
done</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As shown, the function <fo:inline font-family="monospace">say_something</fo:inline> writes its first
      argument the number of times specified by second argument.
      The function <fo:inline font-family="monospace">start</fo:inline> starts two Erlang processes,
      one that writes "hello" three times and one that writes
      "goodbye" three times. Both processes use the function
      <fo:inline font-family="monospace">say_something</fo:inline>. Notice that a function used in this way by
      <fo:inline font-family="monospace">spawn</fo:inline>, to start a process, must be exported from the module
      (that is, in the <fo:inline font-family="monospace">-export</fo:inline> at the start of the module).</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
9&gt; <fo:inline font-weight="bold">tut14:start().</fo:inline>
hello
goodbye
&lt;0.63.0&gt;
hello
goodbye
hello
goodbye</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that it did not write "hello" three times and then
      "goodbye" three times. Instead, the first process wrote a "hello",
      the second a "goodbye", the first another "hello" and so forth.
      But where did the &lt;0.63.0&gt; come from? The return value of a
      function is the return value of the last "thing" in
      the function. The last thing in the function <fo:inline font-family="monospace">start</fo:inline> is</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
spawn(tut14, say_something, [goodbye, 3]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">spawn</fo:inline> returns a <fo:inline font-weight="bold">process identifier</fo:inline>, or
      <fo:inline font-weight="bold">pid</fo:inline>, which uniquely identifies the process. So &lt;0.63.0&gt;
      is the pid of the <fo:inline font-family="monospace">spawn</fo:inline> function call above.
      The next example shows how to use pids.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice also that ~p is used instead of ~w in
      <fo:inline font-family="monospace">io:format</fo:inline>. To quote the manual: "~p Writes the data with
      standard syntax in the same way as ~w, but breaks terms whose
      printed representation is longer than one line into many lines
      and indents each line sensibly. It also tries to detect lists of
      printable characters and to output these as strings".</fo:block>
  <fo:block id="idp2984688" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.3.2 
      Message Passing</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following example two processes are created and
    they send messages to each other a number of times.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut15).

-export([start/0, ping/2, pong/0]).

ping(0, Pong_PID) -&gt;
    Pong_PID ! finished,
    io:format("ping finished~n", []);

ping(N, Pong_PID) -&gt;
    Pong_PID ! {ping, self()},
    receive
        pong -&gt;
            io:format("Ping received pong~n", [])
    end,
    ping(N - 1, Pong_PID).

pong() -&gt;
    receive
        finished -&gt;
            io:format("Pong finished~n", []);
        {ping, Ping_PID} -&gt;
            io:format("Pong received ping~n", []),
            Ping_PID ! pong,
            pong()
    end.

start() -&gt;
    Pong_PID = spawn(tut15, pong, []),
    spawn(tut15, ping, [3, Pong_PID]).</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">c(tut15).</fo:inline>
{ok,tut15}
2&gt; <fo:inline font-weight="bold">tut15: start().</fo:inline>
&lt;0.36.0&gt;
Pong received ping
Ping received pong
Pong received ping
Ping received pong
Pong received ping
Ping received pong
ping finished
Pong finished</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">start</fo:inline> first creates a process,
      let us call it "pong":</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Pong_PID = spawn(tut15, pong, [])</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This process executes <fo:inline font-family="monospace">tut15:pong()</fo:inline>. <fo:inline font-family="monospace">Pong_PID</fo:inline> is
      the process identity of the "pong" process. The function
      <fo:inline font-family="monospace">start</fo:inline> now creates another process "ping":</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
spawn(tut15, ping, [3, Pong_PID]),</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This process executes:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
tut15:ping(3, Pong_PID)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">&lt;0.36.0&gt; is the return value from the <fo:inline font-family="monospace">start</fo:inline> function.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process "pong" now does:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
receive
    finished -&gt;
        io:format("Pong finished~n", []);
    {ping, Ping_PID} -&gt;
        io:format("Pong received ping~n", []),
        Ping_PID ! pong,
        pong()
end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">receive</fo:inline> construct is used to allow processes to wait
      for messages from other processes. It has the following format:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
receive
   pattern1 -&gt;
       actions1;
   pattern2 -&gt;
       actions2;
   ....
   patternN
       actionsN
end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice there is no ";" before the <fo:inline font-family="monospace">end</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Messages between Erlang processes are simply valid Erlang terms.
      That is, they can be lists, tuples, integers, atoms, pids,
      and so on.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each process has its own input queue for messages it receives.
      New messages received are put at the end of the queue. When a
      process executes a <fo:inline font-family="monospace">receive</fo:inline>, the first message in the queue
      is matched against the first pattern in the <fo:inline font-family="monospace">receive</fo:inline>. If
      this matches, the message is removed from the queue and
      the actions corresponding to the pattern are executed.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, if the first pattern does not match, the second pattern
      is tested. If this matches, the message is removed from the queue
      and the actions corresponding to the second pattern are executed.
      If the second pattern does not match, the third is tried and so on
      until there are no more patterns to test. If there are no more
      patterns to test, the first message is kept in the queue and
      the second message is tried instead. If this matches any pattern,
      the appropriate actions are executed and the second message is
      removed from the queue (keeping the first message and any other
      messages in the queue). If the second message does not match,
      the third message is tried, and so on, until the end of
      the queue is reached. If the end of the queue is reached,
      the process blocks
      (stops execution) and waits until a new message is received and
      this procedure is repeated.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang implementation is "clever" and minimizes
      the number of times each message is tested against the patterns
      in each <fo:inline font-family="monospace">receive</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now back to the ping pong example.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"Pong" is waiting for messages. If the atom <fo:inline font-family="monospace">finished</fo:inline> is
      received, "pong" writes "Pong finished" to the output and, as it
      has nothing more to do, terminates. If it receives a message with
      the format:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{ping, Ping_PID}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">it writes "Pong received ping" to the output and sends the atom
      <fo:inline font-family="monospace">pong</fo:inline> to the process "ping":</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Ping_PID ! pong</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice how the operator "!" is used to send messages. The syntax
      of "!" is:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Pid ! Message</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">That is, <fo:inline font-family="monospace">Message</fo:inline> (any Erlang term) is sent to the process
      with identity <fo:inline font-family="monospace">Pid</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After sending the message <fo:inline font-family="monospace">pong</fo:inline> to the process "ping",
      "pong" calls the <fo:inline font-family="monospace">pong</fo:inline> function again, which causes it to
      get back to the <fo:inline font-family="monospace">receive</fo:inline> again and wait for another message.</fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now let us look at the process "ping". Recall that it was started
      by executing:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
tut15:ping(3, Pong_PID)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Looking at the function <fo:inline font-family="monospace">ping/2</fo:inline>, the second
      clause of <fo:inline font-family="monospace">ping/2</fo:inline> is executed since the value of the first
      argument is 3 (not 0) (first clause head is
      <fo:inline font-family="monospace">ping(0,Pong_PID)</fo:inline>, second clause head is
      <fo:inline font-family="monospace">ping(N,Pong_PID)</fo:inline>, so <fo:inline font-family="monospace">N</fo:inline> becomes 3).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second clause sends a message to "pong":</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Pong_PID ! {ping, self()},</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">self()</fo:inline> returns the pid of the process that executes
      <fo:inline font-family="monospace">self()</fo:inline>, in this case the pid of "ping". (Recall the code
      for "pong", this lands up in the variable <fo:inline font-family="monospace">Ping_PID</fo:inline> in
      the <fo:inline font-family="monospace">receive</fo:inline> previously explained.)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"Ping" now waits for a reply from "pong":</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
receive
    pong -&gt;
        io:format("Ping received pong~n", [])
end,</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It writes "Ping received pong" when this reply arrives, after
      which "ping" calls the <fo:inline font-family="monospace">ping</fo:inline> function again.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ping(N - 1, Pong_PID)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">N-1</fo:inline> causes the first argument to be decremented until it
      becomes 0. When this occurs, the first clause of <fo:inline font-family="monospace">ping/2</fo:inline>
      is executed:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ping(0, Pong_PID) -&gt;
    Pong_PID !  finished,
    io:format("ping finished~n", []);</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The atom <fo:inline font-family="monospace">finished</fo:inline> is sent to "pong" (causing it to
      terminate as described above) and "ping finished" is written to
      the output. "Ping" then terminates as it has nothing left
      to do.</fo:block>
  <fo:block id="idp3025984" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.3.3 
      Registered Process Names</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the above example, "pong" was first created to be able
      to give the identity of "pong" when "ping" was started. That is, in
      some way "ping" must be able to know the identity of "pong" to be
      able to send a message to it. Sometimes processes
      which need to know each other's identities are started
      independently of each other. Erlang thus provides a mechanism for
      processes to be given names so that these names can be used as
      identities instead of pids. This is done by using
      the <fo:inline font-family="monospace">register</fo:inline> BIF:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
register(some_atom, Pid)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us now rewrite the ping pong example using this and give
      the name <fo:inline font-family="monospace">pong</fo:inline> to the "pong" process:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut16).

-export([start/0, ping/1, pong/0]).

ping(0) -&gt;
    pong ! finished,
    io:format("ping finished~n", []);

ping(N) -&gt;
    pong ! {ping, self()},
    receive
        pong -&gt;
            io:format("Ping received pong~n", [])
    end,
    ping(N - 1).

pong() -&gt;
    receive
        finished -&gt;
            io:format("Pong finished~n", []);
        {ping, Ping_PID} -&gt;
            io:format("Pong received ping~n", []),
            Ping_PID ! pong,
            pong()
    end.

start() -&gt;
    register(pong, spawn(tut16, pong, [])),
    spawn(tut16, ping, [3]).</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">c(tut16).</fo:inline>
{ok, tut16}
3&gt; <fo:inline font-weight="bold">tut16:start().</fo:inline>
&lt;0.38.0&gt;
Pong received ping
Ping received pong
Pong received ping
Ping received pong
Pong received ping
Ping received pong
ping finished
Pong finished</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here the <fo:inline font-family="monospace">start/0</fo:inline> function,</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
register(pong, spawn(tut16, pong, [])),</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">both spawns the "pong" process and gives it the name <fo:inline font-family="monospace">pong</fo:inline>.
      In the "ping" process, messages can be sent to <fo:inline font-family="monospace">pong</fo:inline> by:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
pong ! {ping, self()},</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ping/2</fo:inline> now becomes <fo:inline font-family="monospace">ping/1</fo:inline> as
      the argument <fo:inline font-family="monospace">Pong_PID</fo:inline> is not needed.</fo:block>
  <fo:block id="idp3038160" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.3.4 
      Distributed Programming</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us rewrite the ping pong program with "ping" and "pong"
      on different computers. First a few things
      are needed to set up to get this to work. The distributed Erlang
      implementation provides a very basic authentication mechanism to prevent
      unintentional access to an Erlang system on another computer.
      Erlang systems which talk to each other must have
      the same <fo:inline font-weight="bold">magic cookie</fo:inline>. The easiest way to achieve this
      is by having a file called <fo:inline font-family="monospace">.erlang.cookie</fo:inline> in your home
      directory on all machines on which you are going to run
      Erlang systems communicating with each other:
     </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>On Windows systems the home directory is the directory
	pointed out by the environment variable $HOME - you may need
        to set this.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block> On Linux or UNIX
        you can safely ignore this and simply create a file called
        <fo:inline font-family="monospace">.erlang.cookie</fo:inline> in the directory you get to after executing
        the command <fo:inline font-family="monospace">cd</fo:inline> without any argument.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">.erlang.cookie</fo:inline> file is to contain a line with
      the same atom. For example, on Linux or UNIX, in the OS shell:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ <fo:inline font-weight="bold">cd</fo:inline>
$ <fo:inline font-weight="bold">cat &gt; .erlang.cookie</fo:inline>
this_is_very_secret
$ <fo:inline font-weight="bold">chmod 400 .erlang.cookie</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">chmod</fo:inline> above makes the <fo:inline font-family="monospace">.erlang.cookie</fo:inline> file
      accessible only by the owner of the file. This is a requirement.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When you start an Erlang system that is going to talk to other
      Erlang systems, you must give it a name, for example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ <fo:inline font-weight="bold">erl -sname my_name</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We will see more details of this later. If you want to
      experiment with distributed Erlang, but you only have one
      computer to work on, you can start two separate Erlang systems on
      the same computer but give them different names. Each Erlang
      system running on a computer is called an <fo:inline font-weight="bold">Erlang node</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(Note: <fo:inline font-family="monospace">erl -sname</fo:inline> assumes that all nodes are in the same
      IP domain and we can use only the first component of the IP
      address, if we want to use nodes in different domains we use
      <fo:inline font-family="monospace">-name</fo:inline> instead, but then all IP address must be given in
      full.)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here is the ping pong example modified to run on two separate
      nodes:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut17).

-export([start_ping/1, start_pong/0,  ping/2, pong/0]).

ping(0, Pong_Node) -&gt;
    {pong, Pong_Node} ! finished,
    io:format("ping finished~n", []);

ping(N, Pong_Node) -&gt;
    {pong, Pong_Node} ! {ping, self()},
    receive
        pong -&gt;
            io:format("Ping received pong~n", [])
    end,
    ping(N - 1, Pong_Node).

pong() -&gt;
    receive
        finished -&gt;
            io:format("Pong finished~n", []);
        {ping, Ping_PID} -&gt;
            io:format("Pong received ping~n", []),
            Ping_PID ! pong,
            pong()
    end.

start_pong() -&gt;
    register(pong, spawn(tut17, pong, [])).

start_ping(Pong_Node) -&gt;
    spawn(tut17, ping, [3, Pong_Node]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us assume there are two computers called gollum and kosken.
      First a node is started on kosken, called ping, and then a node on gollum,
      called pong.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On kosken (on a Linux/UNIX system):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
kosken&gt; <fo:inline font-weight="bold">erl -sname ping</fo:inline>
Erlang (BEAM) emulator version 5.2.3.7 [hipe] [threads:0]

Eshell V5.2.3.7  (abort with ^G)
(ping@kosken)1&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On gollum:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
gollum&gt; <fo:inline font-weight="bold">erl -sname pong</fo:inline>
Erlang (BEAM) emulator version 5.2.3.7 [hipe] [threads:0]

Eshell V5.2.3.7  (abort with ^G)
(pong@gollum)1&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now the "pong" process on gollum is started:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(pong@gollum)1&gt; <fo:inline font-weight="bold">tut17:start_pong().</fo:inline>
true</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And the "ping" process on kosken is started (from the code above you
      can see that a parameter of the <fo:inline font-family="monospace">start_ping</fo:inline> function is
      the node name of the Erlang system where "pong" is running):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(ping@kosken)1&gt; <fo:inline font-weight="bold">tut17:start_ping(pong@gollum).</fo:inline>
&lt;0.37.0&gt;
Ping received pong
Ping received pong 
Ping received pong
ping finished</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As shown, the ping pong program has run. On the "pong" side:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(pong@gollum)2&gt;
Pong received ping                 
Pong received ping                 
Pong received ping                 
Pong finished                      
(pong@gollum)2&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Looking at the <fo:inline font-family="monospace">tut17</fo:inline> code, you see that the <fo:inline font-family="monospace">pong</fo:inline>
      function itself is unchanged, the following lines work in the same way
      irrespective of on which node the "ping" process is executes:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{ping, Ping_PID} -&gt;
    io:format("Pong received ping~n", []),
    Ping_PID ! pong,</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, Erlang pids contain information about
      where the process executes. So if you know the pid of a process,
      the "!" operator can be used to send it a message disregarding
      if the process is on the same node or on a different node.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A difference is how messages are sent to a registered process on
      another node:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{pong, Pong_Node} ! {ping, self()},</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A tuple <fo:inline font-family="monospace">{registered_name,node_name}</fo:inline> is used instead of
      just the <fo:inline font-family="monospace">registered_name</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the previous example, "ping" and "pong" were started from
      the shells of two separate Erlang nodes. <fo:inline font-family="monospace">spawn</fo:inline> can also be
      used to start processes in other nodes.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The next example is the ping pong program, yet again,
      but this time "ping" is started in another node:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut18).

-export([start/1,  ping/2, pong/0]).

ping(0, Pong_Node) -&gt;
    {pong, Pong_Node} ! finished,
    io:format("ping finished~n", []);

ping(N, Pong_Node) -&gt;
    {pong, Pong_Node} ! {ping, self()},
    receive
        pong -&gt;
            io:format("Ping received pong~n", [])
    end,
    ping(N - 1, Pong_Node).

pong() -&gt;
    receive
        finished -&gt;
            io:format("Pong finished~n", []);
        {ping, Ping_PID} -&gt;
            io:format("Pong received ping~n", []),
            Ping_PID ! pong,
            pong()
    end.

start(Ping_Node) -&gt;
    register(pong, spawn(tut18, pong, [])),
    spawn(Ping_Node, tut18, ping, [3, node()]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assuming an Erlang system called ping (but not the "ping"
      process) has already been started on kosken, then on gollum this is done:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(pong@gollum)1&gt; <fo:inline font-weight="bold">tut18:start(ping@kosken).</fo:inline>
&lt;3934.39.0&gt;
Pong received ping
Ping received pong
Pong received ping
Ping received pong
Pong received ping
Ping received pong
Pong finished
ping finished</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that all the output is received on gollum. This is because
      the I/O
      system finds out where the process is spawned from and sends all
      output there.</fo:block>
  <fo:block id="idp3072480" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.3.5 
      A Larger Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now for a larger example with a simple
      "messenger". The messenger is a program that allows users to log
      in on different nodes and send simple messages to each other.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before starting, notice the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This example only shows the message passing logic - no
          attempt has been made to provide a nice graphical user
          interface, although this can also be done in Erlang.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This sort of problem can be solved easier by use of
          the facilities in OTP, which also provide methods for
          updating code on the fly and so on (see
	  <fo:inline font-style="italic">
          OTP Design Principles</fo:inline>).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first program contains some inadequacies
          regarding handling of nodes which disappear.
          These are corrected in a later version of the program.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The messenger is set up by allowing "clients" to connect to
      a central server and say who and where they are. That is, a user
      does not need to know the name of the Erlang node where another user
      is located to send a message.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">File <fo:inline font-family="monospace">messenger.erl</fo:inline>:</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%%% Message passing utility.  
%%% User interface:
%%% logon(Name)
%%%     One user at a time can log in from each Erlang node in the
%%%     system messenger: and choose a suitable Name. If the Name
%%%     is already logged in at another node or if someone else is
%%%     already logged in at the same node, login will be rejected
%%%     with a suitable error message.
%%% logoff()
%%%     Logs off anybody at that node
%%% message(ToName, Message)
%%%     sends Message to ToName. Error messages if the user of this 
%%%     function is not logged on or if ToName is not logged on at
%%%     any node.
%%%
%%% One node in the network of Erlang nodes runs a server which maintains
%%% data about the logged on users. The server is registered as "messenger"
%%% Each node where there is a user logged on runs a client process registered
%%% as "mess_client" 
%%%
%%% Protocol between the client processes and the server
%%% ----------------------------------------------------
%%% 
%%% To server: {ClientPid, logon, UserName}
%%% Reply {messenger, stop, user_exists_at_other_node} stops the client
%%% Reply {messenger, logged_on} logon was successful
%%%
%%% To server: {ClientPid, logoff}
%%% Reply: {messenger, logged_off}
%%%
%%% To server: {ClientPid, logoff}
%%% Reply: no reply
%%%
%%% To server: {ClientPid, message_to, ToName, Message} send a message
%%% Reply: {messenger, stop, you_are_not_logged_on} stops the client
%%% Reply: {messenger, receiver_not_found} no user with this name logged on
%%% Reply: {messenger, sent} Message has been sent (but no guarantee)
%%%
%%% To client: {message_from, Name, Message},
%%%
%%% Protocol between the "commands" and the client
%%% ----------------------------------------------
%%%
%%% Started: messenger:client(Server_Node, Name)
%%% To client: logoff
%%% To client: {message_to, ToName, Message}
%%%
%%% Configuration: change the server_node() function to return the
%%% name of the node where the messenger server runs

-module(messenger).
-export([start_server/0, server/1, logon/1, logoff/0, message/2, client/2]).

%%% Change the function below to return the name of the node where the
%%% messenger server runs
server_node() -&gt;
    messenger@bill.

%%% This is the server process for the "messenger"
%%% the user list has the format [{ClientPid1, Name1},{ClientPid22, Name2},...]
server(User_List) -&gt;
    receive
        {From, logon, Name} -&gt;
            New_User_List = server_logon(From, Name, User_List),
            server(New_User_List);
        {From, logoff} -&gt;
            New_User_List = server_logoff(From, User_List),
            server(New_User_List);
        {From, message_to, To, Message} -&gt;
            server_transfer(From, To, Message, User_List),
            io:format("list is now: ~p~n", [User_List]),
            server(User_List)
    end.

%%% Start the server
start_server() -&gt;
    register(messenger, spawn(messenger, server, [[]])).


%%% Server adds a new user to the user list
server_logon(From, Name, User_List) -&gt;
    %% check if logged on anywhere else
    case lists:keymember(Name, 2, User_List) of
        true -&gt;
            From ! {messenger, stop, user_exists_at_other_node},  %reject logon
            User_List;
        false -&gt;
            From ! {messenger, logged_on},
            [{From, Name} | User_List]        %add user to the list
    end.

%%% Server deletes a user from the user list
server_logoff(From, User_List) -&gt;
    lists:keydelete(From, 1, User_List).


%%% Server transfers a message between user
server_transfer(From, To, Message, User_List) -&gt;
    %% check that the user is logged on and who he is
    case lists:keysearch(From, 1, User_List) of
        false -&gt;
            From ! {messenger, stop, you_are_not_logged_on};
        {value, {From, Name}} -&gt;
            server_transfer(From, Name, To, Message, User_List)
    end.
%%% If the user exists, send the message
server_transfer(From, Name, To, Message, User_List) -&gt;
    %% Find the receiver and send the message
    case lists:keysearch(To, 2, User_List) of
        false -&gt;
            From ! {messenger, receiver_not_found};
        {value, {ToPid, To}} -&gt;
            ToPid ! {message_from, Name, Message}, 
            From ! {messenger, sent} 
    end.


%%% User Commands
logon(Name) -&gt;
    case whereis(mess_client) of 
        undefined -&gt;
            register(mess_client, 
                     spawn(messenger, client, [server_node(), Name]));
        _ -&gt; already_logged_on
    end.

logoff() -&gt;
    mess_client ! logoff.

message(ToName, Message) -&gt;
    case whereis(mess_client) of % Test if the client is running
        undefined -&gt;
            not_logged_on;
        _ -&gt; mess_client ! {message_to, ToName, Message},
             ok
end.


%%% The client process which runs on each server node
client(Server_Node, Name) -&gt;
    {messenger, Server_Node} ! {self(), logon, Name},
    await_result(),
    client(Server_Node).

client(Server_Node) -&gt;
    receive
        logoff -&gt;
            {messenger, Server_Node} ! {self(), logoff},
            exit(normal);
        {message_to, ToName, Message} -&gt;
            {messenger, Server_Node} ! {self(), message_to, ToName, Message},
            await_result();
        {message_from, FromName, Message} -&gt;
            io:format("Message from ~p: ~p~n", [FromName, Message])
    end,
    client(Server_Node).

%%% wait for a response from the server
await_result() -&gt;
    receive
        {messenger, stop, Why} -&gt; % Stop the client 
            io:format("~p~n", [Why]),
            exit(normal);
        {messenger, What} -&gt;  % Normal response
            io:format("~p~n", [What])
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To use this program, you need to:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Configure the <fo:inline font-family="monospace">server_node()</fo:inline> function.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Copy the compiled code (<fo:inline font-family="monospace">messenger.beam</fo:inline>) to
       the directory on each computer where you start Erlang.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following example using this program,
      nodes are started on four different computers. If you do not have that
      many machines available on your network, you can start
      several nodes on the same machine.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Four Erlang nodes are started up: messenger@super, c1@bilbo,
      c2@kosken, c3@gollum.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First the server at messenger@super is started up:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(messenger@super)1&gt; <fo:inline font-weight="bold">messenger:start_server().</fo:inline>
true</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now Peter logs on at c1@bilbo:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(c1@bilbo)1&gt; <fo:inline font-weight="bold">messenger:logon(peter).</fo:inline>
true
logged_on</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">James logs on at c2@kosken:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(c2@kosken)1&gt; <fo:inline font-weight="bold">messenger:logon(james).</fo:inline>
true
logged_on</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And Fred logs on at c3@gollum:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(c3@gollum)1&gt; <fo:inline font-weight="bold">messenger:logon(fred).</fo:inline>
true
logged_on</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now Peter sends Fred a message:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(c1@bilbo)2&gt; <fo:inline font-weight="bold">messenger:message(fred, "hello").</fo:inline>
ok
sent</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Fred receives the message and sends a message to Peter and
      logs off:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Message from peter: "hello"
(c3@gollum)2&gt; <fo:inline font-weight="bold">messenger:message(peter, "go away, I'm busy").</fo:inline>
ok
sent
(c3@gollum)3&gt; <fo:inline font-weight="bold">messenger:logoff().</fo:inline>
logoff</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">James now tries to send a message to Fred:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(c2@kosken)2&gt; <fo:inline font-weight="bold">messenger:message(fred, "peter doesn't like you").</fo:inline>
ok
receiver_not_found</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">But this fails as Fred has already logged off.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First let us look at some of the new concepts that have
       been introduced.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two versions of the <fo:inline font-family="monospace">server_transfer</fo:inline> function:
      one with four arguments (<fo:inline font-family="monospace">server_transfer/4</fo:inline>) and one with
      five (<fo:inline font-family="monospace">server_transfer/5</fo:inline>). These are regarded by Erlang as
      two separate functions.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice how to write the <fo:inline font-family="monospace">server</fo:inline> function so that it calls
      itself, through <fo:inline font-family="monospace">server(User_List)</fo:inline>, and thus creates a loop.
      The Erlang compiler is "clever" and optimizes the code so that
      this really is a sort of loop and not a proper function call. But
      this only works if there is no code after the call. Otherwise,
      the compiler expects the call to return and make a proper
      function call. This would result in the process getting bigger
      and bigger for every loop.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Functions in the <fo:inline font-family="monospace">lists</fo:inline> module are used. This is a very
      useful module and a study of the manual page is recommended
      (<fo:inline font-family="monospace">erl -man lists</fo:inline>).
      <fo:inline font-family="monospace">lists:keymember(Key,Position,Lists)</fo:inline> looks through a list
      of tuples and looks at <fo:inline font-family="monospace">Position</fo:inline> in each tuple to see if it
      is the same as <fo:inline font-family="monospace">Key</fo:inline>. The first element is position 1. If it
      finds a tuple where the element at <fo:inline font-family="monospace">Position</fo:inline> is the same as
      <fo:inline font-family="monospace">Key</fo:inline>, it returns <fo:inline font-family="monospace">true</fo:inline>, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; <fo:inline font-weight="bold">lists:keymember(a, 2, [{x,y,z},{b,b,b},{b,a,c},{q,r,s}]).</fo:inline>
true
4&gt; <fo:inline font-weight="bold">lists:keymember(p, 2, [{x,y,z},{b,b,b},{b,a,c},{q,r,s}]).</fo:inline>
false</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">lists:keydelete</fo:inline> works in the same way but deletes
      the first tuple found (if any) and returns the remaining list:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
5&gt; <fo:inline font-weight="bold">lists:keydelete(a, 2, [{x,y,z},{b,b,b},{b,a,c},{q,r,s}]).</fo:inline>
[{x,y,z},{b,b,b},{q,r,s}]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">lists:keysearch</fo:inline> is like <fo:inline font-family="monospace">lists:keymember</fo:inline>, but it
      returns <fo:inline font-family="monospace">{value,Tuple_Found}</fo:inline> or the atom <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are many very useful functions in the <fo:inline font-family="monospace">lists</fo:inline>
      module.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang process (conceptually) runs until it does a
      <fo:inline font-family="monospace">receive</fo:inline> and there is no message which it wants to receive
      in the message queue. "conceptually" is used here because the Erlang
      system shares the CPU time between the active processes in
      the system.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process terminates when there is nothing more for it to do,
      that is, the last function it calls simply returns and does not call
      another function. Another way for a process to terminate is for
      it to call <fo:inline font-family="monospace">exit/1</fo:inline>. The argument to <fo:inline font-family="monospace">exit/1</fo:inline> has a
      special meaning, which is discussed later. In this example,
      <fo:inline font-family="monospace">exit(normal)</fo:inline> is done, which has the same effect as a
      process running out of functions to call.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The BIF <fo:inline font-family="monospace">whereis(RegisteredName)</fo:inline> checks if a registered
      process of name <fo:inline font-family="monospace">RegisteredName</fo:inline> exists. If it exists, the pid of
      that process is returned. If it does not exist, the atom
      <fo:inline font-family="monospace">undefined</fo:inline> is returned.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You should by now be able to understand most of the code in the
      messenger-module. Let us study one case in detail: a message is
      sent from one user to another.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first user "sends" the message in the example above by:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
messenger:message(fred, "hello")</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After testing that the client process exists:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
whereis(mess_client) </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And a message is sent to <fo:inline font-family="monospace">mess_client</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mess_client ! {message_to, fred, "hello"}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The client sends the message to the server by:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{messenger, messenger@super} ! {self(), message_to, fred, "hello"},</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And waits for a reply from the server.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The server receives this message and calls:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
server_transfer(From, fred, "hello", User_List),</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This checks that the pid <fo:inline font-family="monospace">From</fo:inline> is in the <fo:inline font-family="monospace">User_List</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
lists:keysearch(From, 1, User_List) </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">keysearch</fo:inline> returns the atom <fo:inline font-family="monospace">false</fo:inline>, some
      error has occurred and the server sends back the message:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
From ! {messenger, stop, you_are_not_logged_on}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is received by the client, which in turn does
      <fo:inline font-family="monospace">exit(normal)</fo:inline> and terminates. If <fo:inline font-family="monospace">keysearch</fo:inline> returns
      <fo:inline font-family="monospace">{value,{From,Name}}</fo:inline> it is certain that the user is logged on and
      that his name (peter) is in variable <fo:inline font-family="monospace">Name</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us now call:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
server_transfer(From, peter, fred, "hello", User_List)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that as this is <fo:inline font-family="monospace">server_transfer/5</fo:inline>, it is not the same
      as the previous function <fo:inline font-family="monospace">server_transfer/4</fo:inline>. Another
      <fo:inline font-family="monospace">keysearch</fo:inline> is done on <fo:inline font-family="monospace">User_List</fo:inline> to find the pid of
      the client corresponding to fred:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
lists:keysearch(fred, 2, User_List)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This time argument 2 is used, which is the second element in
      the tuple. If this returns the atom <fo:inline font-family="monospace">false</fo:inline>,
      fred is not logged on and the following message is sent:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
From ! {messenger, receiver_not_found};</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is received by the client.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> If <fo:inline font-family="monospace">keysearch</fo:inline> returns:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{value, {ToPid, fred}}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following message is sent to fred's client:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ToPid ! {message_from, peter, "hello"}, </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following message is sent to peter's client:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
From ! {messenger, sent} </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Fred's client receives the message and prints it:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{message_from, peter, "hello"} -&gt;
    io:format("Message from ~p: ~p~n", [peter, "hello"])</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Peter's client receives the message in
      the <fo:inline font-family="monospace">await_result</fo:inline> function.</fo:block>
  <fo:block id="idp3153696" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">4.4  Robustness</fo:marker>4.4  Robustness</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Several things are wrong with the messenger example in
    <fo:inline font-style="italic">A Larger Example</fo:inline>.
    For example, if a node where a user is logged
    on goes down without doing a logoff, the user remains in
    the server's <fo:inline font-family="monospace">User_List</fo:inline>, but the client disappears. This
    makes it impossible for the user to log on again as the server
    thinks the user already is logged on.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Or what happens if the server goes down in the middle of sending a
    message, leaving the sending client hanging forever in
    the <fo:inline font-family="monospace">await_result</fo:inline> function?</fo:block><fo:block id="idp3159104" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.4.1 
      Time-outs</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before improving the messenger program, let us look at some
      general principles, using the ping pong program as an example.
      Recall that when "ping" finishes, it tells "pong" that it has
      done so by sending the atom <fo:inline font-family="monospace">finished</fo:inline> as a message to "pong"
      so that "pong" can also finish. Another way to let "pong"
      finish is to make "pong" exit if it does not receive a message
      from ping within a certain time. This can be done by adding a
      <fo:inline font-weight="bold">time-out</fo:inline> to <fo:inline font-family="monospace">pong</fo:inline> as shown in the following example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut19).

-export([start_ping/1, start_pong/0,  ping/2, pong/0]).

ping(0, Pong_Node) -&gt;
    io:format("ping finished~n", []);

ping(N, Pong_Node) -&gt;
    {pong, Pong_Node} ! {ping, self()},
    receive
        pong -&gt;
            io:format("Ping received pong~n", [])
    end,
    ping(N - 1, Pong_Node).

pong() -&gt;
    receive
        {ping, Ping_PID} -&gt;
            io:format("Pong received ping~n", []),
            Ping_PID ! pong,
            pong()
    after 5000 -&gt;
            io:format("Pong timed out~n", [])
    end.

start_pong() -&gt;
    register(pong, spawn(tut19, pong, [])).

start_ping(Pong_Node) -&gt;
    spawn(tut19, ping, [3, Pong_Node]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After this is compiled and the file <fo:inline font-family="monospace">tut19.beam</fo:inline>
      is copied to the necessary directories, the following is seen
     on (pong@kosken): </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(pong@kosken)1&gt; <fo:inline font-weight="bold">tut19:start_pong().</fo:inline>
true
Pong received ping
Pong received ping
Pong received ping
Pong timed out</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And the following is seen on (ping@gollum):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(ping@gollum)1&gt; <fo:inline font-weight="bold">tut19:start_ping(pong@kosken).</fo:inline>
&lt;0.36.0&gt;
Ping received pong
Ping received pong
Ping received pong
ping finished   </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time-out is set in:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
pong() -&gt;
    receive
        {ping, Ping_PID} -&gt;
            io:format("Pong received ping~n", []),
            Ping_PID ! pong,
            pong()
    after 5000 -&gt;
            io:format("Pong timed out~n", [])
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time-out (<fo:inline font-family="monospace">after 5000</fo:inline>) is started when
      <fo:inline font-family="monospace">receive</fo:inline> is entered.
      The time-out is canceled if <fo:inline font-family="monospace">{ping,Ping_PID}</fo:inline>
      is received. If <fo:inline font-family="monospace">{ping,Ping_PID}</fo:inline> is not received,
      the actions following the time-out are done after 5000
      milliseconds. <fo:inline font-family="monospace">after</fo:inline> must be last in the <fo:inline font-family="monospace">receive</fo:inline>,
      that is, preceded by all other message reception specifications in
      the <fo:inline font-family="monospace">receive</fo:inline>. It is also possible to call a function that
      returned an integer for the time-out:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
after pong_timeout() -&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In general, there are better ways than using time-outs to
      supervise parts of a distributed Erlang system. Time-outs are
      usually appropriate to supervise external events, for example, if
      you have expected a message from some external system within a
      specified time. For example, a time-out can be used to log a user
      out of the messenger system if they have not accessed it for,
      say, ten minutes.</fo:block>
  <fo:block id="idp3173824" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.4.2 
      Error Handling</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before going into details of the supervision and error handling
      in an Erlang system, let us see how Erlang processes terminate,
      or in Erlang terminology, <fo:inline font-weight="bold">exit</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process which executes <fo:inline font-family="monospace">exit(normal)</fo:inline> or simply runs out
      of things to do has a <fo:inline font-weight="bold">normal</fo:inline> exit.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process which encounters a runtime error (for example, divide by zero,
      bad match, trying to call a function that does not exist and so on)
      exits with an error, that is, has an <fo:inline font-weight="bold">abnormal</fo:inline> exit. A
      process which executes
      <fo:inline font-style="italic">exit(Reason)</fo:inline>
      where <fo:inline font-family="monospace">Reason</fo:inline> is any Erlang term except the atom
      <fo:inline font-family="monospace">normal</fo:inline>, also has an abnormal exit.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang process can set up links to other Erlang processes. If
      a process calls
      <fo:inline font-style="italic">link(Other_Pid)</fo:inline>
      it sets up a bidirectional link between itself and the process
      called <fo:inline font-family="monospace">Other_Pid</fo:inline>. When a process terminates, it sends
      something called a <fo:inline font-weight="bold">signal</fo:inline> to all the processes it has
      links to.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The signal carries information about the pid it was sent from and
      the exit reason.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default behaviour of a process that receives a normal exit
      is to ignore the signal.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default behaviour in the two other cases (that is, abnormal exit)
      above is to:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Bypass all messages to the receiving process.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Kill the receiving process.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Propagate the same error signal to the links of the
      killed process.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this way you can connect all processes in a
      transaction together using links. If one of the processes
      exits abnormally, all the processes in the transaction are
      killed. As it is often wanted to create a process and link to it at
      the same time, there is a special BIF,
      <fo:inline font-style="italic">spawn_link</fo:inline>
      that does the same as <fo:inline font-family="monospace">spawn</fo:inline>, but also creates a link to
      the spawned process.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now an example of the ping pong example using links to terminate
      "pong":</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut20).

-export([start/1,  ping/2, pong/0]).

ping(N, Pong_Pid) -&gt;
    link(Pong_Pid),
    ping1(N, Pong_Pid).

ping1(0, _) -&gt;
    exit(ping);

ping1(N, Pong_Pid) -&gt;
    Pong_Pid ! {ping, self()},
    receive
        pong -&gt;
            io:format("Ping received pong~n", [])
    end,
    ping1(N - 1, Pong_Pid).

pong() -&gt;
    receive
        {ping, Ping_PID} -&gt;
            io:format("Pong received ping~n", []),
            Ping_PID ! pong,
            pong()
    end.

start(Ping_Node) -&gt;
    PongPID = spawn(tut20, pong, []),
    spawn(Ping_Node, tut20, ping, [3, PongPID]).</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(s1@bill)3&gt; <fo:inline font-weight="bold">tut20:start(s2@kosken).</fo:inline>
Pong received ping
&lt;3820.41.0&gt;
Ping received pong
Pong received ping
Ping received pong
Pong received ping
Ping received pong</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a slight modification of the ping pong program where both
      processes are spawned from the same <fo:inline font-family="monospace">start/1</fo:inline> function,
      and the "ping" process can be spawned on a separate node. Notice
      the use of the <fo:inline font-family="monospace">link</fo:inline> BIF. "Ping" calls
      <fo:inline font-family="monospace">exit(ping)</fo:inline> when it finishes and this causes an exit
      signal to be sent to "pong", which also terminates.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to modify the default behaviour of a process so
      that it does not get killed when it receives abnormal exit
      signals. Instead, all signals are turned into normal messages on
      the format <fo:inline font-family="monospace">{'EXIT',FromPID,Reason}</fo:inline> and added to the end of
      the receiving process' message queue. This behaviour is set by:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
process_flag(trap_exit, true)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are several other process flags, see
      <fo:inline font-style="italic">erlang(3)</fo:inline>.
      Changing the default behaviour of a process in this way is
      usually not done in standard user programs, but is left to
      the supervisory programs in OTP.
      However, the ping pong program is modified to illustrate exit
      trapping.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(tut21).

-export([start/1,  ping/2, pong/0]).

ping(N, Pong_Pid) -&gt;
    link(Pong_Pid), 
    ping1(N, Pong_Pid).

ping1(0, _) -&gt;
    exit(ping);

ping1(N, Pong_Pid) -&gt;
    Pong_Pid ! {ping, self()},
    receive
        pong -&gt;
            io:format("Ping received pong~n", [])
    end,
    ping1(N - 1, Pong_Pid).

pong() -&gt;
    process_flag(trap_exit, true), 
    pong1().

pong1() -&gt;
    receive
        {ping, Ping_PID} -&gt;
            io:format("Pong received ping~n", []),
            Ping_PID ! pong,
            pong1();
        {'EXIT', From, Reason} -&gt;
            io:format("pong exiting, got ~p~n", [{'EXIT', From, Reason}])
    end.

start(Ping_Node) -&gt;
    PongPID = spawn(tut21, pong, []),
    spawn(Ping_Node, tut21, ping, [3, PongPID]).</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(s1@bill)1&gt; <fo:inline font-weight="bold">tut21:start(s2@gollum).</fo:inline>
&lt;3820.39.0&gt;
Pong received ping
Ping received pong
Pong received ping
Ping received pong
Pong received ping
Ping received pong
pong exiting, got {'EXIT',&lt;3820.39.0&gt;,ping}</fo:block>
  <fo:block id="idp3198720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.4.3 
      The Larger Example with Robustness Added</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us return to the messenger program and add changes to
      make it more robust:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%%% Message passing utility.  
%%% User interface:
%%% login(Name)
%%%     One user at a time can log in from each Erlang node in the
%%%     system messenger: and choose a suitable Name. If the Name
%%%     is already logged in at another node or if someone else is
%%%     already logged in at the same node, login will be rejected
%%%     with a suitable error message.
%%% logoff()
%%%     Logs off anybody at that node
%%% message(ToName, Message)
%%%     sends Message to ToName. Error messages if the user of this 
%%%     function is not logged on or if ToName is not logged on at
%%%     any node.
%%%
%%% One node in the network of Erlang nodes runs a server which maintains
%%% data about the logged on users. The server is registered as "messenger"
%%% Each node where there is a user logged on runs a client process registered
%%% as "mess_client" 
%%%
%%% Protocol between the client processes and the server
%%% ----------------------------------------------------
%%% 
%%% To server: {ClientPid, logon, UserName}
%%% Reply {messenger, stop, user_exists_at_other_node} stops the client
%%% Reply {messenger, logged_on} logon was successful
%%%
%%% When the client terminates for some reason
%%% To server: {'EXIT', ClientPid, Reason}
%%%
%%% To server: {ClientPid, message_to, ToName, Message} send a message
%%% Reply: {messenger, stop, you_are_not_logged_on} stops the client
%%% Reply: {messenger, receiver_not_found} no user with this name logged on
%%% Reply: {messenger, sent} Message has been sent (but no guarantee)
%%%
%%% To client: {message_from, Name, Message},
%%%
%%% Protocol between the "commands" and the client
%%% ---------------------------------------------- 
%%%
%%% Started: messenger:client(Server_Node, Name)
%%% To client: logoff
%%% To client: {message_to, ToName, Message}
%%%
%%% Configuration: change the server_node() function to return the
%%% name of the node where the messenger server runs

-module(messenger).
-export([start_server/0, server/0, 
         logon/1, logoff/0, message/2, client/2]).

%%% Change the function below to return the name of the node where the
%%% messenger server runs
server_node() -&gt;
    messenger@super.

%%% This is the server process for the "messenger"
%%% the user list has the format [{ClientPid1, Name1},{ClientPid22, Name2},...]
server() -&gt;
    process_flag(trap_exit, true),
    server([]).

server(User_List) -&gt;
    receive
        {From, logon, Name} -&gt;
            New_User_List = server_logon(From, Name, User_List),
            server(New_User_List);
        {'EXIT', From, _} -&gt;
            New_User_List = server_logoff(From, User_List),
            server(New_User_List);
        {From, message_to, To, Message} -&gt;
            server_transfer(From, To, Message, User_List),
            io:format("list is now: ~p~n", [User_List]),
            server(User_List)
    end.

%%% Start the server
start_server() -&gt;
    register(messenger, spawn(messenger, server, [])).

%%% Server adds a new user to the user list
server_logon(From, Name, User_List) -&gt;
    %% check if logged on anywhere else
    case lists:keymember(Name, 2, User_List) of
        true -&gt;
            From ! {messenger, stop, user_exists_at_other_node},  %reject logon
            User_List;
        false -&gt;
            From ! {messenger, logged_on},
            link(From),
            [{From, Name} | User_List]        %add user to the list
    end.

%%% Server deletes a user from the user list
server_logoff(From, User_List) -&gt;
    lists:keydelete(From, 1, User_List).


%%% Server transfers a message between user
server_transfer(From, To, Message, User_List) -&gt;
    %% check that the user is logged on and who he is
    case lists:keysearch(From, 1, User_List) of
        false -&gt;
            From ! {messenger, stop, you_are_not_logged_on};
        {value, {_, Name}} -&gt;
            server_transfer(From, Name, To, Message, User_List)
    end.

%%% If the user exists, send the message
server_transfer(From, Name, To, Message, User_List) -&gt;
    %% Find the receiver and send the message
    case lists:keysearch(To, 2, User_List) of
        false -&gt;
            From ! {messenger, receiver_not_found};
        {value, {ToPid, To}} -&gt;
            ToPid ! {message_from, Name, Message}, 
            From ! {messenger, sent} 
    end.

%%% User Commands
logon(Name) -&gt;
    case whereis(mess_client) of 
        undefined -&gt;
            register(mess_client, 
                     spawn(messenger, client, [server_node(), Name]));
        _ -&gt; already_logged_on
    end.

logoff() -&gt;
    mess_client ! logoff.

message(ToName, Message) -&gt;
    case whereis(mess_client) of % Test if the client is running
        undefined -&gt;
            not_logged_on;
        _ -&gt; mess_client ! {message_to, ToName, Message},
             ok
end.

%%% The client process which runs on each user node
client(Server_Node, Name) -&gt;
    {messenger, Server_Node} ! {self(), logon, Name},
    await_result(),
    client(Server_Node).

client(Server_Node) -&gt;
    receive
        logoff -&gt;
            exit(normal);
        {message_to, ToName, Message} -&gt;
            {messenger, Server_Node} ! {self(), message_to, ToName, Message},
            await_result();
        {message_from, FromName, Message} -&gt;
            io:format("Message from ~p: ~p~n", [FromName, Message])
    end,
    client(Server_Node).

%%% wait for a response from the server
await_result() -&gt;
    receive
        {messenger, stop, Why} -&gt; % Stop the client 
            io:format("~p~n", [Why]),
            exit(normal);
        {messenger, What} -&gt;  % Normal response
            io:format("~p~n", [What])
    after 5000 -&gt;
            io:format("No response from server~n", []),
            exit(timeout)
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following changes are added:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The messenger server traps exits. If it receives an exit signal,
      <fo:inline font-family="monospace">{'EXIT',From,Reason}</fo:inline>, this means that a client process has
      terminated or is unreachable for one of the following reasons:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The user has logged off (the "logoff"
       message is removed).</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The network connection to the client is broken.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The node on which the client process resides has gone down.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The client processes has done some illegal operation.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an exit signal is received as above, the tuple
      <fo:inline font-family="monospace">{From,Name}</fo:inline> is deleted from the servers <fo:inline font-family="monospace">User_List</fo:inline> using
      the <fo:inline font-family="monospace">server_logoff</fo:inline> function. If the node on which the server
      runs goes down, an exit signal (automatically generated by
      the system) is sent to all of the client processes:
      <fo:inline font-family="monospace">{'EXIT',MessengerPID,noconnection}</fo:inline> causing all the client
      processes to terminate.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, a time-out of five seconds has been introduced in
      the <fo:inline font-family="monospace">await_result</fo:inline> function. That is, if the server does not
      reply within five seconds (5000 ms), the client terminates. This
      is only needed in the logon sequence before the client and the
      server are linked.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An interesting case is if the client terminates before
      the server links to it. This is taken care of because linking to a
      non-existent process causes an exit signal,
      <fo:inline font-family="monospace">{'EXIT',From,noproc}</fo:inline>, to be automatically generated. This is
      as if the process terminated immediately after the link operation.</fo:block>
  <fo:block id="idp3219504" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">4.5  Records and Macros</fo:marker>4.5  Records and Macros</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Larger programs are usually written as a collection of files with
    a well-defined interface between the various parts.</fo:block><fo:block id="idp3222560" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.5.1 
      The Larger Example Divided into Several Files</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To illustrate this, the messenger example from
      the previous section is divided into the following five files:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mess_config.hrl</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Header file for configuration data</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mess_interface.hrl</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Interface definitions between the client and the messenger</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">user_interface.erl</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Functions for the user interface</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mess_client.erl</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Functions for the client side of the messenger</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mess_server.erl</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Functions for the server side of the messenger</fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">While doing this, the message passing interface between the shell,
      the client, and the server is cleaned up and is defined
      using <fo:inline font-weight="bold">records</fo:inline>. Also, <fo:inline font-weight="bold">macros</fo:inline> are introduced:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%%%----FILE mess_config.hrl----

%%% Configure the location of the server node,
-define(server_node, messenger@super).

%%%----END FILE----</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%%%----FILE mess_interface.hrl----

%%% Message interface between client and server and client shell for
%%% messenger program 

%%%Messages from Client to server received in server/1 function.
-record(logon,{client_pid, username}).
-record(message,{client_pid, to_name, message}).
%%% {'EXIT', ClientPid, Reason}  (client terminated or unreachable.

%%% Messages from Server to Client, received in await_result/0 function 
-record(abort_client,{message}).
%%% Messages are: user_exists_at_other_node, 
%%%               you_are_not_logged_on
-record(server_reply,{message}).
%%% Messages are: logged_on
%%%               receiver_not_found
%%%               sent  (Message has been sent (no guarantee)
%%% Messages from Server to Client received in client/1 function
-record(message_from,{from_name, message}).

%%% Messages from shell to Client received in client/1 function
%%% spawn(mess_client, client, [server_node(), Name])
-record(message_to,{to_name, message}).
%%% logoff

%%%----END FILE----</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%%%----FILE user_interface.erl----

%%% User interface to the messenger program
%%% login(Name)
%%%     One user at a time can log in from each Erlang node in the
%%%     system messenger: and choose a suitable Name. If the Name
%%%     is already logged in at another node or if someone else is
%%%     already logged in at the same node, login will be rejected
%%%     with a suitable error message.

%%% logoff()
%%%     Logs off anybody at that node

%%% message(ToName, Message)
%%%     sends Message to ToName. Error messages if the user of this 
%%%     function is not logged on or if ToName is not logged on at
%%%     any node.

-module(user_interface).
-export([logon/1, logoff/0, message/2]).
-include("mess_interface.hrl").
-include("mess_config.hrl").

logon(Name) -&gt;
    case whereis(mess_client) of 
        undefined -&gt;
            register(mess_client, 
                     spawn(mess_client, client, [?server_node, Name]));
        _ -&gt; already_logged_on
    end.

logoff() -&gt;
    mess_client ! logoff.

message(ToName, Message) -&gt;
    case whereis(mess_client) of % Test if the client is running
        undefined -&gt;
            not_logged_on;
        _ -&gt; mess_client ! #message_to{to_name=ToName, message=Message},
             ok
end.

%%%----END FILE----</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%%%----FILE mess_client.erl----

%%% The client process which runs on each user node

-module(mess_client).
-export([client/2]).
-include("mess_interface.hrl").

client(Server_Node, Name) -&gt;
    {messenger, Server_Node} ! #logon{client_pid=self(), username=Name},
    await_result(),
    client(Server_Node).

client(Server_Node) -&gt;
    receive
        logoff -&gt;
            exit(normal);
        #message_to{to_name=ToName, message=Message} -&gt;
            {messenger, Server_Node} ! 
                #message{client_pid=self(), to_name=ToName, message=Message},
            await_result();
        {message_from, FromName, Message} -&gt;
            io:format("Message from ~p: ~p~n", [FromName, Message])
    end,
    client(Server_Node).

%%% wait for a response from the server
await_result() -&gt;
    receive
        #abort_client{message=Why} -&gt;
            io:format("~p~n", [Why]),
            exit(normal);
        #server_reply{message=What} -&gt;
            io:format("~p~n", [What])
    after 5000 -&gt;
            io:format("No response from server~n", []),
            exit(timeout)
    end.

%%%----END FILE---</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%%%----FILE mess_server.erl----

%%% This is the server process of the messenger service

-module(mess_server).
-export([start_server/0, server/0]).
-include("mess_interface.hrl").

server() -&gt;
    process_flag(trap_exit, true),
    server([]).

%%% the user list has the format [{ClientPid1, Name1},{ClientPid22, Name2},...]
server(User_List) -&gt;
    io:format("User list = ~p~n", [User_List]),
    receive
        #logon{client_pid=From, username=Name} -&gt;
            New_User_List = server_logon(From, Name, User_List),
            server(New_User_List);
        {'EXIT', From, _} -&gt;
            New_User_List = server_logoff(From, User_List),
            server(New_User_List);
        #message{client_pid=From, to_name=To, message=Message} -&gt;
            server_transfer(From, To, Message, User_List),
            server(User_List)
    end.

%%% Start the server
start_server() -&gt;
    register(messenger, spawn(?MODULE, server, [])).

%%% Server adds a new user to the user list
server_logon(From, Name, User_List) -&gt;
    %% check if logged on anywhere else
    case lists:keymember(Name, 2, User_List) of
        true -&gt;
            From ! #abort_client{message=user_exists_at_other_node},
            User_List;
        false -&gt;
            From ! #server_reply{message=logged_on},
            link(From),
            [{From, Name} | User_List]        %add user to the list
    end.

%%% Server deletes a user from the user list
server_logoff(From, User_List) -&gt;
    lists:keydelete(From, 1, User_List).

%%% Server transfers a message between user
server_transfer(From, To, Message, User_List) -&gt;
    %% check that the user is logged on and who he is
    case lists:keysearch(From, 1, User_List) of
        false -&gt;
            From ! #abort_client{message=you_are_not_logged_on};
        {value, {_, Name}} -&gt;
            server_transfer(From, Name, To, Message, User_List)
    end.
%%% If the user exists, send the message
server_transfer(From, Name, To, Message, User_List) -&gt;
    %% Find the receiver and send the message
    case lists:keysearch(To, 2, User_List) of
        false -&gt;
            From ! #server_reply{message=receiver_not_found};
        {value, {ToPid, To}} -&gt;
            ToPid ! #message_from{from_name=Name, message=Message}, 
            From !  #server_reply{message=sent} 
    end.

%%%----END FILE---</fo:block>
  <fo:block id="idp3242336" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.5.2 
      Header Files</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As shown above, some files have extension <fo:inline font-family="monospace">.hrl</fo:inline>. These
      are header files that are included in the <fo:inline font-family="monospace">.erl</fo:inline> files by:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-include("File_Name").</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">for example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-include("mess_interface.hrl").</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the case above the file is fetched from the same directory as
      all the other files in the messenger example. (*manual*).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">.hrl files can contain any valid Erlang code but are most often
      used for record and macro definitions.</fo:block>
  <fo:block id="idp3247664" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.5.3 
      Records</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A record is defined as:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record(name_of_record,{field_name1, field_name2, field_name3, ......}).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record(message_to,{to_name, message}).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is equivalent to:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{message_to, To_Name, Message}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creating a record is best illustrated by an example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#message_to{message="hello", to_name=fred)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This creates:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{message_to, fred, "hello"}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that you do not have to worry about the order you assign
      values to the various parts of the records when you create it.
      The advantage of using records is that by placing their
      definitions in header files you can conveniently define
      interfaces that are easy to change. For example, if you want to
      add a new field to the record, you only have to change
      the code where the new field is used and not at every place
      the record is referred to. If you leave out a field when creating
      a record, it gets the value of the atom <fo:inline font-family="monospace">undefined</fo:inline>. (*manual*)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Pattern matching with records is very similar to creating
      records. For example, inside a <fo:inline font-family="monospace">case</fo:inline> or <fo:inline font-family="monospace">receive</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#message_to{to_name=ToName, message=Message} -&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the same as:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{message_to, ToName, Message}</fo:block>
  <fo:block id="idp3259408" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">4.5.4 
      Macros</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another thing that has been added to the messenger is a macro.
      The file <fo:inline font-family="monospace">mess_config.hrl</fo:inline> contains the definition:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%%% Configure the location of the server node,
-define(server_node, messenger@super).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This file is included in <fo:inline font-family="monospace">mess_server.erl</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-include("mess_config.hrl").</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Every occurrence of <fo:inline font-family="monospace">?server_node</fo:inline> in <fo:inline font-family="monospace">mess_server.erl</fo:inline>
      is now replaced by <fo:inline font-family="monospace">messenger@super</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A macro is also used when spawning the server process:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
spawn(?MODULE, server, [])</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a standard macro (that is, defined by the system, not by
      the user). <fo:inline font-family="monospace">?MODULE</fo:inline> is always replaced by the name of the
      current module (that is, the <fo:inline font-family="monospace">-module</fo:inline> definition near the start
      of the file). There are more advanced ways of using macros with,
      for example, parameters (*manual*).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The three Erlang (<fo:inline font-family="monospace">.erl</fo:inline>) files in the messenger example are
      individually compiled into object code file (<fo:inline font-family="monospace">.beam</fo:inline>).
      The Erlang system loads and links these files into the system
      when they are referred to during execution of the code. In this
      case, they are simply put in our current working directory
      (that is, the place you have done "cd" to).
      There are ways of putting the <fo:inline font-family="monospace">.beam</fo:inline> files in other
      directories.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the messenger example, no assumptions have been made about
      what the message being sent is. It can be any valid Erlang term.</fo:block>
  <fo:block id="idp3699792" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">5   
      Erlang Reference Manual</fo:block><fo:block id="idp3695808" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">5.1  Introduction</fo:marker>5.1  Introduction</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section is the Erlang reference manual. It describes the
    Erlang programming language. </fo:block><fo:block id="idp3691584" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.1.1 
      Purpose</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The focus of the Erlang reference manual is on the language itself,
      not the implementation of it. The language constructs are described in
      text and with examples rather than formally specified. This is
      to make the manual more readable.
      The Erlang reference manual is not intended as a tutorial.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Information about implementation of Erlang can, for example, be found,
      in the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
      System Principles</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starting and stopping, boot scripts, code loading,
      <fo:inline font-style="italic">
      error logging</fo:inline>,
      <fo:inline font-style="italic">
      creating target systems</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
      Efficiency Guide</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Memory consumption, system limits</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ERTS User's Guide</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">Crash dumps</fo:inline>,
      <fo:inline font-style="italic">drivers</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp3682688" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.1.2 
      Prerequisites</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that the reader has done some programming and
      is familiar with concepts such as data types and programming
      language syntax.</fo:block>
  <fo:block id="idp3681328" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.1.3 
      Document Conventions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this section, the following terminology is used:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-weight="bold">sequence</fo:inline> is one or more items. For example, a
       clause body consists of a sequence of expressions. This
       means that there must be at least one expression.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-weight="bold">list</fo:inline> is any number of items. For example,
       an argument list can consist of zero, one, or more arguments.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a feature has been added in R13A or later,
    this is mentioned in the text.</fo:block>
  <fo:block id="idp3677392" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.1.4 
      Complete List of BIFs</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a complete list of BIFs, their arguments and return values,
      see <fo:inline font-style="italic">erlang(3)</fo:inline>
      manual page in ERTS.</fo:block>
  <fo:block id="idp4719168" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.1.5 
      Reserved Words</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following are reserved words in Erlang:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">after and andalso band begin bnot bor bsl bsr bxor case catch
      cond div end fun if let not of or orelse receive rem try
      when xor</fo:inline></fo:block>
  <fo:block id="idp4714480" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">5.2  Character Set and Source File Encoding</fo:marker>5.2  Character Set and Source File Encoding</fo:block><fo:block id="idp4066688" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.2.1 
      Character Set</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The syntax of Erlang tokens allow the use of the full
    ISO-8859-1 (Latin-1) character set. This is noticeable in the
    following ways:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All the Latin-1 printable characters can be used and are
          shown without the escape backslash convention.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Atoms and variables can use all Latin-1 letters.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Octal</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Decimal</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"> </fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Class</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">200 - 237</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">128 - 159</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"> </fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Control characters</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">240 - 277</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">160 - 191</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="end">- ¿</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Punctuation characters</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">300 - 326</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">192 - 214</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">À - Ö</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Uppercase letters</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">327</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">215</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">×</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Punctuation character</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">330 - 336</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">216 - 222</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">Ø - Þ</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Uppercase letters</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">337 - 366</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">223 - 246</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">ß - ö</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Lowercase letters</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">367</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">247</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">÷</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Punctuation character</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">370 - 377</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">248 - 255</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="center">ø - ÿ</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Lowercase letters</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        2.1:
         
        Character Classes</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In Erlang/OTP R16B the syntax of Erlang tokens was extended to
       handle Unicode. The support was limited to
       string literals and comments.
       More about the usage of Unicode in Erlang source files
       can be found in <fo:inline font-style="italic">STDLIB's User's
       Guide</fo:inline>.</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From Erlang/OTP 20, atoms and function names are also allowed
       to contain Unicode characters outside the ISO-Latin-1 range.
       Module names, application names, and node names are still
       restricted to the ISO-Latin-1 range.</fo:block>
  <fo:block id="idp2405216" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.2.2 
      Source File Encoding</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang source file <fo:inline font-family="monospace">encoding</fo:inline> is selected by a
      comment in one of the first two lines of the source file. The
      first string that matches the regular expression
      <fo:inline font-family="monospace">coding\s*[:=]\s*([-a-zA-Z0-9])+</fo:inline> selects the encoding. If
      the matching string is an invalid encoding, it is ignored. The
      valid encodings are <fo:inline font-family="monospace">Latin-1</fo:inline> and <fo:inline font-family="monospace">UTF-8</fo:inline>, where the
      case of the characters can be chosen freely.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example selects UTF-8 as default encoding:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% coding: utf-8</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two more examples, both selecting Latin-1 as default encoding:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% For this file we have chosen encoding = Latin-1</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% -*- coding: latin-1 -*-</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default encoding for Erlang source files is changed from
      Latin-1 to UTF-8 since Erlang/OTP 17.0.</fo:block>
  <fo:block id="idp2418704" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">5.3  Data Types</fo:marker>5.3  Data Types</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang provides a number of data types, which are listed in
      this section.</fo:block><fo:block id="idp2414688" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.1 
      Terms</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A piece of data of any data type is called a <fo:inline font-weight="bold">term</fo:inline>.</fo:block>
  <fo:block id="idp3483456" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.2 
      Number</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two types of numeric literals, <fo:inline font-weight="bold">integers</fo:inline> and
      <fo:inline font-weight="bold">floats</fo:inline>. Besides the conventional notation, there are two
      Erlang-specific notations:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">$</fo:inline><fo:inline font-weight="bold"><fo:inline font-family="monospace">char</fo:inline></fo:inline>      <fo:block/>

       ASCII value or unicode code-point of the character
       <fo:inline font-weight="bold"><fo:inline font-family="monospace">char</fo:inline></fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:inline font-family="monospace">base</fo:inline></fo:inline><fo:inline font-family="monospace">#</fo:inline><fo:inline font-weight="bold"><fo:inline font-family="monospace">value</fo:inline></fo:inline>      <fo:block/>

       Integer with the base <fo:inline font-weight="bold"><fo:inline font-family="monospace">base</fo:inline></fo:inline>, that must be an
       integer in the range 2..36.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">42.</fo:inline>
42
2&gt; <fo:inline font-weight="bold">$A.</fo:inline>
65
3&gt; <fo:inline font-weight="bold">$\n.</fo:inline>
10
4&gt; <fo:inline font-weight="bold">2#101.</fo:inline>
5
5&gt; <fo:inline font-weight="bold">16#1f.</fo:inline>
31
6&gt; <fo:inline font-weight="bold">2.3.</fo:inline>
2.3
7&gt; <fo:inline font-weight="bold">2.3e3.</fo:inline>
2.3e3
8&gt; <fo:inline font-weight="bold">2.3e-3.</fo:inline>
0.0023</fo:block>
  <fo:block id="idp1499904" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.3 
      Atom</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An atom is a literal, a constant with name. An atom is to be
      enclosed in single quotes (') if it does not begin with a
      lower-case letter or if it contains other characters than
      alphanumeric characters, underscore (_), or @.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
hello
phone_number
'Monday'
'phone number'</fo:block>
  <fo:block id="idp2398992" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.4 
      Bit Strings and Binaries</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A bit string is used to store an area of untyped memory.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Bit strings are expressed using the
      <fo:inline font-style="italic">bit syntax</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Bit strings that consist of a number of bits that are evenly
      divisible by eight, are called <fo:inline font-weight="bold">binaries</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">&lt;&lt;10,20&gt;&gt;.</fo:inline>
&lt;&lt;10,20&gt;&gt;
2&gt; <fo:inline font-weight="bold">&lt;&lt;"ABC"&gt;&gt;.</fo:inline>
&lt;&lt;"ABC"&gt;&gt;
1&gt; <fo:inline font-weight="bold">&lt;&lt;1:1,0:1&gt;&gt;.</fo:inline>
&lt;&lt;2:2&gt;&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more examples,
      see <fo:inline font-style="italic">
      Programming Examples</fo:inline>.</fo:block>
  <fo:block id="idp3928480" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.5 
      Reference</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A reference is a term that is unique in an Erlang runtime
      system, created by calling <fo:inline font-family="monospace">make_ref/0</fo:inline>.</fo:block>
  <fo:block id="idp3483008" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.6 
      Fun</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A fun is a functional object. Funs make it possible to create
      an anonymous function and pass the function itself -- not its
      name -- as argument to other functions.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">Fun1 = fun (X) -&gt; X+1 end.</fo:inline>
#Fun&lt;erl_eval.6.39074546&gt;
2&gt; <fo:inline font-weight="bold">Fun1(2).</fo:inline>
3</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read more about funs in <fo:inline font-style="italic">
      Fun Expressions</fo:inline>. For more examples, see
      <fo:inline font-style="italic">
      Programming Examples</fo:inline>.</fo:block>
  <fo:block id="idp3665936" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.7 
      Port Identifier</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A port identifier identifies an Erlang port.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">open_port/2</fo:inline>, which is used to create ports, returns
      a value of this data type.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read more about ports in <fo:inline font-style="italic">Ports and Port Drivers</fo:inline>.</fo:block>
  <fo:block id="idp3668976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.8 
      Pid</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process identifier, pid, identifies a process.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following BIFs, which are used to create processes, return
      values of this data type:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">spawn/1,2,3,4</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">spawn_link/1,2,3,4</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">spawn_opt/4</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">spawn(m, f, []).</fo:inline>
&lt;0.51.0&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following example, the BIF <fo:inline font-family="monospace">self()</fo:inline> returns
      the pid of the calling process:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(m).
-export([loop/0]).

loop() -&gt;
    receive
        who_are_you -&gt;
            io:format("I am ~p~n", [self()]),
            loop()
    end.

1&gt; <fo:inline font-weight="bold">P = spawn(m, loop, []).</fo:inline>
&lt;0.58.0&gt;
2&gt; <fo:inline font-weight="bold">P ! who_are_you.</fo:inline>
I am &lt;0.58.0&gt;
who_are_you</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read more about processes in
      <fo:inline font-style="italic">Processes</fo:inline>.</fo:block>
  <fo:block id="idp4722800" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.9 
      Tuple</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A tuple is a compound data type with a fixed number of terms:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{Term1,...,TermN}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each term <fo:inline font-family="monospace">Term</fo:inline> in the tuple is called an
      <fo:inline font-weight="bold">element</fo:inline>. The number of elements is said to be
      the <fo:inline font-weight="bold">size</fo:inline> of the tuple.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There exists a number of BIFs to manipulate tuples.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">P = {adam,24,{july,29}}.</fo:inline>
{adam,24,{july,29}}
2&gt; <fo:inline font-weight="bold">element(1,P).</fo:inline>
adam
3&gt; <fo:inline font-weight="bold">element(3,P).</fo:inline>
{july,29}
4&gt; <fo:inline font-weight="bold">P2 = setelement(2,P,25).</fo:inline>
{adam,25,{july,29}}
5&gt; <fo:inline font-weight="bold">tuple_size(P).</fo:inline>
3
6&gt; <fo:inline font-weight="bold">tuple_size({}).</fo:inline>
0</fo:block>
  <fo:block id="idp4730288" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.10 
      Map</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A map is a compound data type with a variable number of
      key-value associations:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#{Key1=&gt;Value1,...,KeyN=&gt;ValueN}</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each key-value association in the map is called an
		<fo:inline font-weight="bold">association pair</fo:inline>. The key and value parts of the pair are
		called <fo:inline font-weight="bold">elements</fo:inline>. The number of association pairs is said to be
      the <fo:inline font-weight="bold">size</fo:inline> of the map.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There exists a number of BIFs to manipulate maps.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">M1 = #{name=&gt;adam,age=&gt;24,date=&gt;{july,29}}.</fo:inline>
#{age =&gt; 24,date =&gt; {july,29},name =&gt; adam}
2&gt; <fo:inline font-weight="bold">maps:get(name,M1).</fo:inline>
adam
3&gt; <fo:inline font-weight="bold">maps:get(date,M1).</fo:inline>
{july,29}
4&gt; <fo:inline font-weight="bold">M2 = maps:update(age,25,M1).</fo:inline>
#{age =&gt; 25,date =&gt; {july,29},name =&gt; adam}
5&gt; <fo:inline font-weight="bold">map_size(M).</fo:inline>
3
6&gt; <fo:inline font-weight="bold">map_size(#{}).</fo:inline>
0</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A collection of maps processing functions can be found in
      <fo:inline font-style="italic"><fo:inline font-family="monospace">maps</fo:inline></fo:inline> manual page
      in STDLIB.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read more about maps in <fo:inline font-style="italic">
      Map Expressions</fo:inline>.</fo:block>
  <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maps are considered to be experimental during Erlang/OTP R17.</fo:block>
  </fo:block>
  <fo:block id="idp4740688" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.11 
      List</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list is a compound data type with a variable number of terms.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[Term1,...,TermN]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each term <fo:inline font-family="monospace">Term</fo:inline> in the list is called an
      <fo:inline font-weight="bold">element</fo:inline>. The number of elements is said to be
      the <fo:inline font-weight="bold">length</fo:inline> of the list.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Formally, a list is either the empty list <fo:inline font-family="monospace">[]</fo:inline> or
      consists of a <fo:inline font-weight="bold">head</fo:inline> (first element) and a <fo:inline font-weight="bold">tail</fo:inline>
      (remainder of the list).
      The <fo:inline font-weight="bold">tail</fo:inline> is also a list. The latter can
      be expressed as <fo:inline font-family="monospace">[H|T]</fo:inline>. The notation
      <fo:inline font-family="monospace">[Term1,...,TermN]</fo:inline> above is equivalent with
      the list <fo:inline font-family="monospace">[Term1|[...|[TermN|[]]]]</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[]</fo:inline> is a list, thus      <fo:block/>
<fo:inline font-family="monospace">[c|[]]</fo:inline> is a list, thus      <fo:block/>
<fo:inline font-family="monospace">[b|[c|[]]]</fo:inline> is a list, thus      <fo:block/>
<fo:inline font-family="monospace">[a|[b|[c|[]]]]</fo:inline> is a list, or in short <fo:inline font-family="monospace">[a,b,c]</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list where the tail is a list is sometimes called a <fo:inline font-weight="bold">proper list</fo:inline>. It is allowed to have a list where the tail is not a
      list, for example, <fo:inline font-family="monospace">[a|b]</fo:inline>. However, this type of list is of
      little practical use.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">L1 = [a,2,{c,4}].</fo:inline>
[a,2,{c,4}]
2&gt; <fo:inline font-weight="bold">[H|T] = L1.</fo:inline>
[a,2,{c,4}]
3&gt; <fo:inline font-weight="bold">H.</fo:inline>
a
4&gt; <fo:inline font-weight="bold">T.</fo:inline>
[2,{c,4}]
5&gt; <fo:inline font-weight="bold">L2 = [d|T].</fo:inline>
[d,2,{c,4}]
6&gt; <fo:inline font-weight="bold">length(L1).</fo:inline>
3
7&gt; <fo:inline font-weight="bold">length([]).</fo:inline>
0</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A collection of list processing functions can be found in
      the <fo:inline font-style="italic">lists</fo:inline> manual
      page in STDLIB.</fo:block>
  <fo:block id="idp4771472" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.12 
      String</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Strings are enclosed in double quotes ("), but is not a
      data type in Erlang. Instead, a string <fo:inline font-family="monospace">"hello"</fo:inline> is
      shorthand for the list <fo:inline font-family="monospace">[$h,$e,$l,$l,$o]</fo:inline>, that is,
      <fo:inline font-family="monospace">[104,101,108,108,111]</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two adjacent string literals are concatenated into one. This is
      done in the compilation, thus, does not incur any runtime overhead.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
"string" "42"</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">is equivalent to</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
"string42"</fo:block>
  <fo:block id="idp4776592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.13 
      Record</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A record is a data structure for storing a fixed number of
      elements. It has named fields and is similar to a struct in C.
      However, a record is not a true data type. Instead, record
      expressions are translated to tuple expressions during
      compilation. Therefore, record expressions are not understood by
      the shell unless special actions are taken. For details, see the
      <fo:inline font-style="italic">shell(3)</fo:inline> manual
      page in STDLIB).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(person).
-export([new/2]).

-record(person, {name, age}).

new(Name, Age) -&gt;
    #person{name=Name, age=Age}.

1&gt; <fo:inline font-weight="bold">person:new(ernie, 44).</fo:inline>
{person,ernie,44}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read more about records in
      <fo:inline font-style="italic">Records</fo:inline>. More examples can be
      found in <fo:inline font-style="italic">
      Programming Examples</fo:inline>.</fo:block>
  <fo:block id="idp4782016" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.14 
      Boolean</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is no Boolean data type in Erlang. Instead the atoms
      <fo:inline font-family="monospace">true</fo:inline> and <fo:inline font-family="monospace">false</fo:inline> are used to denote Boolean values.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">2 =&lt; 3</fo:inline>.
true
2&gt; <fo:inline font-weight="bold">true or false</fo:inline>.
true</fo:block>
  <fo:block id="idp4786112" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.15 
      Escape Sequences</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Within strings and quoted atoms, the following escape sequences
      are recognized:</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Sequence</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Description</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\b</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Backspace</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\d</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Delete</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\e</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Escape</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\f</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Form feed</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\n</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Newline</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\r</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Carriage return</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\s</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Space</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\t</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Tab</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\v</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Vertical tab</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\XYZ, \YZ, \Z</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Character with octal
        representation XYZ, YZ or Z</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\xXY</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Character with hexadecimal
        representation XY</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\x{X...}</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Character with hexadecimal
        representation; X... is one or more hexadecimal characters</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\^a...\^z        <fo:block/>
\^A...\^Z</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Control A to control Z</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\'</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Single quote</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\"</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Double quote</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">\\</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Backslash</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        3.1:
         
        Recognized Escape Sequences</fo:block>
  <fo:block id="idp1462432" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.3.16 
      Type Conversions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are a number of BIFs for type conversions.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">atom_to_list(hello).</fo:inline>
"hello"
2&gt; <fo:inline font-weight="bold">list_to_atom("hello").</fo:inline>
hello
3&gt; <fo:inline font-weight="bold">binary_to_list(&lt;&lt;"hello"&gt;&gt;).</fo:inline>
"hello"
4&gt; <fo:inline font-weight="bold">binary_to_list(&lt;&lt;104,101,108,108,111&gt;&gt;).</fo:inline>
"hello"
5&gt; <fo:inline font-weight="bold">list_to_binary("hello").</fo:inline>
&lt;&lt;104,101,108,108,111&gt;&gt;
6&gt; <fo:inline font-weight="bold">float_to_list(7.0).</fo:inline>
"7.00000000000000000000e+00"
7&gt; <fo:inline font-weight="bold">list_to_float("7.000e+00").</fo:inline>
7.0
8&gt; <fo:inline font-weight="bold">integer_to_list(77).</fo:inline>
"77"
9&gt; <fo:inline font-weight="bold">list_to_integer("77").</fo:inline>
77
10&gt; <fo:inline font-weight="bold">tuple_to_list({a,b,c}).</fo:inline>
[a,b,c]
11&gt; <fo:inline font-weight="bold">list_to_tuple([a,b,c]).</fo:inline>
{a,b,c}
12&gt; <fo:inline font-weight="bold">term_to_binary({a,b,c}).</fo:inline>
&lt;&lt;131,104,3,100,0,1,97,100,0,1,98,100,0,1,99&gt;&gt;
13&gt; <fo:inline font-weight="bold">binary_to_term(&lt;&lt;131,104,3,100,0,1,97,100,0,1,98,100,0,1,99&gt;&gt;).</fo:inline>
{a,b,c}
14&gt; <fo:inline font-weight="bold">binary_to_integer(&lt;&lt;"77"&gt;&gt;).</fo:inline>
77
15&gt; <fo:inline font-weight="bold">integer_to_binary(77).</fo:inline>
&lt;&lt;"77"&gt;&gt;
16&gt; <fo:inline font-weight="bold">float_to_binary(7.0).</fo:inline>
&lt;&lt;"7.00000000000000000000e+00"&gt;&gt;
17&gt; <fo:inline font-weight="bold">binary_to_float(&lt;&lt;"7.000e+00"&gt;&gt;).</fo:inline>
7.0</fo:block>
  <fo:block id="idp2553696" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">5.4  Pattern Matching</fo:marker>5.4  Pattern Matching</fo:block><fo:block id="idp3419888" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.4.1 
      Pattern Matching</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Variables are bound to values through the <fo:inline font-weight="bold">pattern matching</fo:inline> mechanism. Pattern matching occurs when
      evaluating a function call, <fo:inline font-family="monospace">case</fo:inline>- <fo:inline font-family="monospace">receive</fo:inline>-
      <fo:inline font-family="monospace">try</fo:inline>- expressions and match operator (=) expressions.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a pattern matching, a left-hand side
      <fo:inline font-style="italic">pattern</fo:inline> is matched
      against a right-hand side
      <fo:inline font-style="italic">term</fo:inline>. If
      the matching succeeds, any unbound variables in the pattern
      become bound. If the matching fails, a run-time error occurs.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">X.</fo:inline>
** 1: variable 'X' is unbound **
2&gt; <fo:inline font-weight="bold">X = 2.</fo:inline>
2
3&gt; <fo:inline font-weight="bold">X + 1.</fo:inline>
3
4&gt; <fo:inline font-weight="bold">{X, Y} = {1, 2}.</fo:inline>
** exception error: no match of right hand side value {1,2}
5&gt; <fo:inline font-weight="bold">{X, Y} = {2, 3}.</fo:inline>
{2,3}
6&gt; <fo:inline font-weight="bold">Y.</fo:inline>
3</fo:block>
  <fo:block id="idp4827840" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">5.5  Modules</fo:marker>5.5  Modules</fo:block><fo:block id="idp4830016" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.5.1 
      Module Syntax</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang code is divided into <fo:inline font-weight="bold">modules</fo:inline>. A module consists
      of a sequence of attributes and function declarations, each
      terminated by period (.).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(m).          % module attribute
-export([fact/1]).   % module attribute

fact(N) when N&gt;0 -&gt;  % beginning of function declaration
    N * fact(N-1);   %  |
fact(0) -&gt;           %  |
    1.               % end of function declaration</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a description of function declarations, see
    <fo:inline font-style="italic">Function Declaration Syntax</fo:inline>.</fo:block>
  <fo:block id="idp4833728" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.5.2 
      Module Attributes</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">module attribute</fo:inline> defines a certain property of a
      module.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A module attribute consists of a tag and a value:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-Tag(Value).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Tag</fo:inline> must be an atom, while <fo:inline font-family="monospace">Value</fo:inline> must be a literal
      term. As a convenience in user-defined attributes, if the literal term
      <fo:inline font-family="monospace">Value</fo:inline> has the syntax <fo:inline font-family="monospace">Name/Arity</fo:inline>
      (where <fo:inline font-family="monospace">Name</fo:inline> is an atom and <fo:inline font-family="monospace">Arity</fo:inline> a positive integer),
	  the term <fo:inline font-family="monospace">Name/Arity</fo:inline> is translated to <fo:inline font-family="monospace">{Name,Arity}</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any module attribute can be specified. The attributes are stored
      in the compiled code and can be retrieved by calling
      <fo:inline font-family="monospace">Module:module_info(attributes)</fo:inline>, or by using the module
      <fo:inline font-style="italic">beam_lib(3)</fo:inline>
       in STDLIB.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Several module attributes have predefined meanings.
      Some of them have arity two, but user-defined module
      attributes must have arity one.</fo:block>

    <fo:block id="idp4841312" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Pre-Defined Module Attributes</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Pre-defined module attributes is to be placed before any
        function declaration.</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-module(Module).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Module declaration, defining the name of the module.
            The name <fo:inline font-family="monospace">Module</fo:inline>, an atom, is to be same as
            the file name minus the extension <fo:inline font-family="monospace">.erl</fo:inline>. Otherwise
            <fo:inline font-style="italic">code loading</fo:inline> does
            not work as intended.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This attribute is to be specified first and is the only
            mandatory attribute.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-export(Functions).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Exported functions. Specifies which of the functions,
            defined within the module, that are visible from outside
            the module.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Functions</fo:inline> is a list
            <fo:inline font-family="monospace">[Name1/Arity1, ..., NameN/ArityN]</fo:inline>, where each
            <fo:inline font-family="monospace">NameI</fo:inline> is an atom and <fo:inline font-family="monospace">ArityI</fo:inline> an integer.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-import(Module,Functions).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Imported functions. Can be called
            the same way as local functions, that is, without any module
            prefix.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Module</fo:inline>, an atom, specifies which module to import
            functions from. <fo:inline font-family="monospace">Functions</fo:inline> is a list similar as for
            <fo:inline font-family="monospace">export</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-compile(Options).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compiler options. <fo:inline font-family="monospace">Options</fo:inline> is a single option
            or a list of options.
            This attribute is added to the option list when
            compiling the module. See the <fo:inline font-style="italic">
            compile(3)</fo:inline> manual page in Compiler.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-vsn(Vsn).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Module version. <fo:inline font-family="monospace">Vsn</fo:inline> is any literal term and can be
            retrieved using <fo:inline font-family="monospace">beam_lib:version/1</fo:inline>, see the
            <fo:inline font-style="italic">beam_lib(3)</fo:inline>
            manual page in STDLIB.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If this attribute is not specified, the version defaults
            to the MD5 checksum of the module.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-on_load(Function).</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This attribute names a function that is to be run
            automatically when a
            module is loaded. For more information, see
	    <fo:inline font-style="italic">
            Running a Function When a Module is Loaded</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp4859776" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Behaviour Module Attribute</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to specify that the module is the callback
        module for a <fo:inline font-weight="bold">behaviour</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-behaviour(Behaviour).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The atom <fo:inline font-family="monospace">Behaviour</fo:inline> gives the name of the behaviour,
        which can be a user-defined behaviour or one of the following OTP
        standard behaviours:</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">gen_server</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">gen_statem</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">gen_event</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">supervisor</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The spelling <fo:inline font-family="monospace">behavior</fo:inline> is also accepted.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The callback functions of the module can be specified either
        directly by the exported function <fo:inline font-family="monospace">behaviour_info/1</fo:inline>:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
behaviour_info(callbacks) -&gt; Callbacks.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or by a <fo:inline font-family="monospace">-callback</fo:inline> attribute for each callback
        function:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-callback Name(Arguments) -&gt; Result.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, <fo:inline font-family="monospace">Arguments</fo:inline> is a list of zero or more arguments.
       The <fo:inline font-family="monospace">-callback</fo:inline> attribute is to be preferred since the
       extra type information can be used by tools to produce
       documentation or find discrepancies.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read more about behaviours and callback modules in
        <fo:inline font-style="italic">
        OTP Design Principles</fo:inline>.</fo:block>
    

    <fo:block id="idp4870800" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Record Definitions</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same syntax as for module attributes is used
        for record definitions:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record(Record,Fields).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Record definitions are allowed anywhere in a module,
        also among the function declarations.
	Read more in <fo:inline font-style="italic">Records</fo:inline>.</fo:block>
    

    <fo:block id="idp4873472" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Preprocessor</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same syntax as for module attributes is used by
        the preprocessor, which supports file inclusion, macros,
	and conditional compilation:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-include("SomeFile.hrl").
-define(Macro,Replacement).</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read more in <fo:inline font-style="italic">Preprocessor</fo:inline>.</fo:block>
    

    <fo:block id="idp4876176" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Setting File and Line</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same syntax as for module attributes is used for
        changing the pre-defined macros <fo:inline font-family="monospace">?FILE</fo:inline> and <fo:inline font-family="monospace">?LINE</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-file(File, Line).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This attribute is used by tools, such as Yecc, to inform the
        compiler that the source program is generated by another tool.
        It also indicates the correspondence of source files to lines of
        the original user-written file, from which the source program
        is produced.</fo:block>
    

    <fo:block id="idp4879440" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Types and function specifications</fo:block>
        
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A similar syntax as for module attributes is used for 
	specifying types and function specifications:
	</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-type my_type() :: atom() | integer().
-spec my_function(integer()) -&gt; integer().</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read more in <fo:inline font-style="italic">Types and Function specifications</fo:inline>.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  The description is based on
	    <fo:inline font-weight="bold"><fo:basic-link external-destination="href">EEP8 -
	    Types and function specifications</fo:basic-link></fo:inline>,
	    which is not to be further updated.
	</fo:block>
    
  <fo:block id="idp4884016" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.5.3 
      Comments</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Comments can be placed anywhere in a module except within strings
      and quoted atoms. A comment begins with the character "%",
      continues up to, but does not include the next end-of-line, and
      has no effect. Notice that the terminating end-of-line has
      the effect of white space.</fo:block>
  <fo:block id="idp4885648" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.5.4 
      module_info/0 and module_info/1 functions</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler automatically inserts the two special, exported
      functions into each module:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Module:module_info/0</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Module:module_info/1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions can be called to retrieve information
        about the module.</fo:block>

    <fo:block id="idp4889328" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">module_info/0</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">module_info/0</fo:inline> function in each module, returns
      a list of <fo:inline font-family="monospace">{Key,Value}</fo:inline> tuples with information about
      the module. Currently, the list contain tuples with the following
      <fo:inline font-family="monospace">Key</fo:inline>s: <fo:inline font-family="monospace">module</fo:inline>, <fo:inline font-family="monospace">attributes</fo:inline>, <fo:inline font-family="monospace">compile</fo:inline>,
      <fo:inline font-family="monospace">exports</fo:inline>, <fo:inline font-family="monospace">md5</fo:inline> and <fo:inline font-family="monospace">native</fo:inline>.
      The order and number of tuples
      may change without prior notice.</fo:block>
    

    <fo:block id="idp4894896" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">module_info/1</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The call <fo:inline font-family="monospace">module_info(Key)</fo:inline>, where <fo:inline font-family="monospace">Key</fo:inline> is an atom,
       returns a single piece of information about the module.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following values are allowed for <fo:inline font-family="monospace">Key</fo:inline>:</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">module</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an atom representing the module name.</fo:block>
	  </fo:block></fo:block-container>

        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">attributes</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of <fo:inline font-family="monospace">{AttributeName,ValueList}</fo:inline> tuples,
	  where <fo:inline font-family="monospace">AttributeName</fo:inline> is the name of an attribute,
	  and <fo:inline font-family="monospace">ValueList</fo:inline> is a list of values. Notice that a given
	  attribute can occur more than once in the list with different
	  values if the attribute occurs more than once in the module.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The list of attributes becomes empty if
	  the module is stripped with the
	  <fo:inline font-style="italic">beam_lib(3)</fo:inline>
	  module (in STDLIB).</fo:block>
	  </fo:block></fo:block-container>

        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">compile</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of tuples with information about
	  how the module was compiled. This list is empty if
	  the module has been stripped with the
	  <fo:inline font-style="italic">beam_lib(3)</fo:inline>
	  module (in STDLIB).</fo:block>
	  </fo:block></fo:block-container>

        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">md5</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a binary representing the MD5 checksum of the module.
          If the module has native code loaded, this will be the MD5 of the
          native code, not the BEAM bytecode.</fo:block>
	  </fo:block></fo:block-container>

        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">exports</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of <fo:inline font-family="monospace">{Name,Arity}</fo:inline> tuples with
	  all exported functions in the module.</fo:block>
	  </fo:block></fo:block-container>

        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">functions</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of <fo:inline font-family="monospace">{Name,Arity}</fo:inline> tuples with
	  all functions in the module.</fo:block>
	  </fo:block></fo:block-container>

        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">native</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Return <fo:inline font-family="monospace">true</fo:inline> if the module has native compiled code.
          Return <fo:inline font-family="monospace">false</fo:inline> otherwise. In a system compiled without HiPE
          support, the result is always <fo:inline font-family="monospace">false</fo:inline></fo:block>
	  </fo:block></fo:block-container>
      </fo:block>
    
  <fo:block id="idp4919008" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">5.6  Functions</fo:marker>5.6  Functions</fo:block><fo:block id="idp4922064" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.6.1 
      Function Declaration Syntax</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">function declaration</fo:inline> is a sequence of function
      clauses separated by semicolons, and terminated by period (.).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">function clause</fo:inline> consists of a clause head and a
      clause body, separated by <fo:inline font-family="monospace">-&gt;</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A clause <fo:inline font-weight="bold">head</fo:inline> consists of the function name, an
      argument list, and an optional guard sequence
      beginning with the keyword <fo:inline font-family="monospace">when</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Name(Pattern11,...,Pattern1N) [when GuardSeq1] -&gt;
    Body1;
...;
Name(PatternK1,...,PatternKN) [when GuardSeqK] -&gt;
    BodyK.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function name is an atom. Each argument is a pattern.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of arguments <fo:inline font-family="monospace">N</fo:inline> is the <fo:inline font-weight="bold">arity</fo:inline> of
      the function. A function is uniquely defined by the module name,
      function name, and arity. That is, two functions with the same
      name and in the same module, but with different arities are two
      different functions.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A function named <fo:inline font-family="monospace">f</fo:inline> in the module <fo:inline font-family="monospace">m</fo:inline> and with arity
      <fo:inline font-family="monospace">N</fo:inline> is often denoted as <fo:inline font-family="monospace">m:f/N</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A clause <fo:inline font-weight="bold">body</fo:inline> consists of a sequence of expressions
      separated by comma (,):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Expr1,
...,
ExprN</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Valid Erlang expressions and guard sequences are described in
      <fo:inline font-style="italic">Expressions</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
fact(N) when N&gt;0 -&gt;  % first clause head
    N * fact(N-1);   % first clause body

fact(0) -&gt;           % second clause head
    1.               % second clause body</fo:block>
  <fo:block id="idp4936016" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.6.2 
      Function Evaluation</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a function <fo:inline font-family="monospace">m:f/N</fo:inline> is called, first the code for
      the function is located. If the function cannot be found, an
      <fo:inline font-family="monospace">undef</fo:inline> runtime error occurs. Notice that the function
      must be exported to be visible outside the module it is defined
      in.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the function is found, the function clauses are scanned
      sequentially until a clause is found that fulfills both of
      the following two conditions:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The patterns in the clause head can be successfully
       matched against the given arguments.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The guard sequence, if any, is true.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If such a clause cannot be found, a <fo:inline font-family="monospace">function_clause</fo:inline>
      runtime error occurs.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If such a clause is found, the corresponding clause body is
      evaluated. That is, the expressions in the body are evaluated
      sequentially and the value of the last expression is returned.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Consider the function <fo:inline font-family="monospace">fact</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(m).
-export([fact/1]).

fact(N) when N&gt;0 -&gt;
    N * fact(N-1);
fact(0) -&gt;
    1.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assume that you want to calculate the factorial for 1:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">m:fact(1).</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluation starts at the first clause. The pattern <fo:inline font-family="monospace">N</fo:inline> is
      matched against argument 1. The matching succeeds and
      the guard (<fo:inline font-family="monospace">N&gt;0</fo:inline>) is true, thus <fo:inline font-family="monospace">N</fo:inline> is bound to 1, and
      the corresponding body is evaluated:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
<fo:inline font-weight="bold">N * fact(N-1)</fo:inline> =&gt; (N is bound to 1)
<fo:inline font-weight="bold">1 * fact(0)</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now, <fo:inline font-family="monospace">fact(0)</fo:inline> is called, and the function clauses are
      scanned sequentially again. First, the pattern <fo:inline font-family="monospace">N</fo:inline> is
      matched against 0. The matching succeeds, but the guard
      (<fo:inline font-family="monospace">N&gt;0</fo:inline>) is false. Second, the pattern 0 is matched against
      0. The matching succeeds and the body is evaluated:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
<fo:inline font-weight="bold">1 * fact(0)</fo:inline> =&gt;
<fo:inline font-weight="bold">1 * 1</fo:inline> =&gt;
<fo:inline font-weight="bold">1</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluation has succeed and <fo:inline font-family="monospace">m:fact(1)</fo:inline> returns 1.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">m:fact/1</fo:inline> is called with a negative number as
      argument, no clause head matches. A <fo:inline font-family="monospace">function_clause</fo:inline>
      runtime error occurs.</fo:block>
  <fo:block id="idp4954080" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.6.3 
      Tail recursion</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the last expression of a function body is a function call,
      a <fo:inline font-weight="bold">tail recursive</fo:inline> call is done.
      This is to ensure that no system
      resources, for example, call stack, are consumed. This means
      that an infinite loop can be done if it uses tail-recursive
      calls.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
loop(N) -&gt;
    io:format("~w~n", [N]),
    loop(N+1).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The earlier factorial example can act as a counter-example.
      It is not tail-recursive, since a multiplication is done
      on the result of the recursive call to <fo:inline font-family="monospace">fact(N-1)</fo:inline>.</fo:block>
  <fo:block id="idp4958208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.6.4 
      Built-In Functions (BIFs)</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">BIFs are implemented in C code in
      the runtime system. BIFs do things that are difficult or impossible
      to implement in Erlang. Most of the BIFs belong
      to the module <fo:inline font-family="monospace">erlang</fo:inline> but there are also BIFs
      belonging to a few other modules, for example <fo:inline font-family="monospace">lists</fo:inline> and
      <fo:inline font-family="monospace">ets</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The most commonly used BIFs belonging to <fo:inline font-family="monospace">erlang(3)</fo:inline> are
      <fo:inline font-weight="bold">auto-imported</fo:inline>. They do not need to be prefixed with
      the module name. Which BIFs that are auto-imported is specified in the
      <fo:inline font-style="italic">erlang(3)</fo:inline> module in ERTS.
      For example, standard-type conversion BIFs like
      <fo:inline font-family="monospace">atom_to_list</fo:inline> and BIFs allowed in guards can be called
      without specifying the module name.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">tuple_size({a,b,c}).</fo:inline>
3
2&gt; <fo:inline font-weight="bold">atom_to_list('Erlang').</fo:inline>
"Erlang"</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that it is normally the set of auto-imported BIFs
      that are referred to when talking about 'BIFs'.</fo:block>
  <fo:block id="idp4970304" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">5.7  Types and Function Specifications</fo:marker>5.7  Types and Function Specifications</fo:block><fo:block id="idp4973008" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.7.1 
      The Erlang Type Language</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Erlang is a dynamically typed language. Still, it comes with a
      notation for declaring sets of Erlang terms to form a particular
      type. This effectively forms specific subtypes of the set of all
      Erlang terms.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Subsequently, these types can be used to specify types of record fields
      and also the argument and return types of functions.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Type information can be used for the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>To document function interfaces</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>To provide more information for bug detection tools,
      such as Dialyzer</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>To be exploited by documentation tools, such as EDoc, for
      generating program documentation of various forms</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is expected that the type language described in this section
      supersedes and replaces the purely comment-based <fo:inline font-family="monospace">@type</fo:inline> and
      <fo:inline font-family="monospace">@spec</fo:inline> declarations used by EDoc.</fo:block>
  <fo:block id="idp4979904" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.7.2 
      Types and their Syntax</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Types describe sets of Erlang terms.
      Types consist of, and are built from, a set of predefined types,
      for example, <fo:inline font-family="monospace">integer()</fo:inline>, <fo:inline font-family="monospace">atom()</fo:inline>, and <fo:inline font-family="monospace">pid()</fo:inline>.
      Predefined types represent a typically infinite set of Erlang terms that
      belong to this type.  For example, the type <fo:inline font-family="monospace">atom()</fo:inline> denotes the
      set of all Erlang atoms.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      For integers and atoms, it is allowed for singleton types; for example,
      the integers
      <fo:inline font-family="monospace">-1</fo:inline> and <fo:inline font-family="monospace">42</fo:inline>, or the atoms <fo:inline font-family="monospace">'foo'</fo:inline> and <fo:inline font-family="monospace">'bar'</fo:inline>.

      All other types are built using unions of either predefined
      types or singleton types. In a type union between a type and one
      of its subtypes, the subtype is absorbed by the supertype. Thus,
      the union is then treated as if the subtype was not a
      constituent of the union. For example, the type union:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">  atom() | 'bar' | integer() | 42</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      describes the same set of terms as the type union:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">  atom() | integer()</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Because of subtype relations that exist between types, types
      form a lattice where the top-most element, <fo:inline font-family="monospace">any()</fo:inline>, denotes
      the set of all Erlang terms and the bottom-most element, <fo:inline font-family="monospace">none()</fo:inline>,
      denotes the empty set of terms.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The set of predefined types and the syntax for types follows:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  Type :: any()                 %% The top type, the set of all Erlang terms
        | none()                %% The bottom type, contains no terms
        | pid()
        | port()
        | reference()
        | []                    %% nil
        | Atom
        | Bitstring
        | float()
        | Fun
        | Integer
        | List
        | Map
        | Tuple
        | Union
        | UserDefined           %% described in Type Declarations of User-Defined Types

  Atom :: atom()
        | Erlang_Atom           %% 'foo', 'bar', ...

  Bitstring :: &lt;&lt;&gt;&gt;
             | &lt;&lt;_:M&gt;&gt;          %% M is a positive integer
             | &lt;&lt;_:_*N&gt;&gt;        %% N is a positive integer
             | &lt;&lt;_:M, _:_*N&gt;&gt;

  Fun :: fun()                  %% any function
       | fun((...) -&gt; Type)     %% any arity, returning Type
       | fun(() -&gt; Type)
       | fun((TList) -&gt; Type)

  Integer :: integer()
           | Erlang_Integer                    %% ..., -1, 0, 1, ... 42 ...
           | Erlang_Integer..Erlang_Integer    %% specifies an integer range

  List :: list(Type)                           %% Proper list ([]-terminated)
        | maybe_improper_list(Type1, Type2)    %% Type1=contents, Type2=termination
        | nonempty_improper_list(Type1, Type2) %% Type1 and Type2 as above
        | nonempty_list(Type)                  %% Proper non-empty list

  Map :: map()                                 %% denotes a map of any size
       | #{}                                   %% denotes the empty map
       | #{PairList}

  Tuple :: tuple()                             %% denotes a tuple of any size
         | {}
         | {TList}

  PairList :: Pair
            | Pair, PairList

  Pair :: Type := Type                         %% denotes a mandatory pair
        | Type =&gt; Type                         %% denotes an optional pair

  TList :: Type
         | Type, TList

  Union :: Type1 | Type2
</fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
    The general form of bit strings is <fo:inline font-family="monospace">&lt;&lt;_:M, _:_*N&gt;&gt;</fo:inline>,
    where <fo:inline font-family="monospace">M</fo:inline> and <fo:inline font-family="monospace">N</fo:inline> are positive integers. It denotes a
    bit string that is <fo:inline font-family="monospace">M + (k*N)</fo:inline> bits long (that is, a bit string that
    starts with <fo:inline font-family="monospace">M</fo:inline> bits and continues with <fo:inline font-family="monospace">k</fo:inline> segments of
    <fo:inline font-family="monospace">N</fo:inline> bits each, where <fo:inline font-family="monospace">k</fo:inline> is also a positive integer).
    The notations <fo:inline font-family="monospace">&lt;&lt;_:_*N&gt;&gt;</fo:inline>, <fo:inline font-family="monospace">&lt;&lt;_:M&gt;&gt;</fo:inline>,
    and <fo:inline font-family="monospace">&lt;&lt;&gt;&gt;</fo:inline> are convenient shorthands for the cases
    that <fo:inline font-family="monospace">M</fo:inline> or <fo:inline font-family="monospace">N</fo:inline>, or both, are zero.
  </fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
    Because lists are commonly used, they have shorthand type notations.
    The types <fo:inline font-family="monospace">list(T)</fo:inline> and <fo:inline font-family="monospace">nonempty_list(T)</fo:inline> have the shorthands
    <fo:inline font-family="monospace">[T]</fo:inline> and <fo:inline font-family="monospace">[T,...]</fo:inline>, respectively.
    The only difference between the two shorthands is that <fo:inline font-family="monospace">[T]</fo:inline> can be an
    empty list but <fo:inline font-family="monospace">[T,...]</fo:inline> cannot.
  </fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
    Notice that the shorthand for <fo:inline font-family="monospace">list()</fo:inline>, that is, the list of
    elements of unknown type, is <fo:inline font-family="monospace">[_]</fo:inline> (or <fo:inline font-family="monospace">[any()]</fo:inline>), not <fo:inline font-family="monospace">[]</fo:inline>.
    The notation <fo:inline font-family="monospace">[]</fo:inline> specifies the singleton type for the empty list.
  </fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
    The general form of maps is <fo:inline font-family="monospace">#{PairList}</fo:inline>. The key types in
    <fo:inline font-family="monospace">PairList</fo:inline> are allowed to overlap, and if they do, the
    leftmost pair takes precedence. A map pair has a key in
    <fo:inline font-family="monospace">PairList</fo:inline> if it belongs to this type. A <fo:inline font-family="monospace">PairList</fo:inline> may contain
    both 'mandatory' and 'optional' pairs where 'mandatory' denotes that
    a key type, and its associated value type, must be present.
    In the case of an 'optional' pair it is not required for the key type to
    be present.
  </fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
    Notice that the syntactic representation of <fo:inline font-family="monospace">map()</fo:inline> is
    <fo:inline font-family="monospace">#{any() =&gt; any()}</fo:inline> (or <fo:inline font-family="monospace">#{_ =&gt; _}</fo:inline>), not <fo:inline font-family="monospace">#{}</fo:inline>.
    The notation <fo:inline font-family="monospace">#{}</fo:inline> specifies the singleton type for the empty map.
  </fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
    For convenience, the following types are also built-in.
    They can be thought as predefined aliases for the type unions also shown in
    the table.
  </fo:block>
  <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Built-in type</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Defined as</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">term()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">any()</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">binary()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">&lt;&lt;_:_*8&gt;&gt;</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">bitstring()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">&lt;&lt;_:_*1&gt;&gt;</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">boolean()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">'false' | 'true'</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">byte()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">0..255</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">char()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">0..16#10ffff</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">nil()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">[]</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">number()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">integer() | float()</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">list()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">[any()]</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">maybe_improper_list()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">maybe_improper_list(any(), any())</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">nonempty_list()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">nonempty_list(any())</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">string()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">[char()]</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">nonempty_string()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">[char(),...]</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">iodata()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">iolist() | binary()</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">iolist()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">maybe_improper_list(byte() | binary() | iolist(), binary() | [])</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">function()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">fun()</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">module()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">atom()</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">mfa()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">{module(),atom(),arity()}</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">arity()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">0..255</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">identifier()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">pid() | port() | reference()</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">node()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">atom()</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">timeout()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">'infinity' | non_neg_integer()</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">no_return()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">none()</fo:inline></fo:block></fo:table-cell>
    </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        7.1:
         
        Built-in types, predefined aliases</fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  In addition, the following three built-in types exist and can be
  thought as defined below, though strictly their "type definition" is
  not valid syntax according to the type language defined above.
  </fo:block>
  <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Built-in type</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">
        Can be thought defined by the syntax</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">non_neg_integer()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">0..</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">pos_integer()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">1..</fo:inline></fo:block></fo:table-cell>
    </fo:table-row><fo:table-row>
      <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">neg_integer()</fo:inline></fo:block></fo:table-cell><fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">..-1</fo:inline></fo:block></fo:table-cell>
    </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        7.2:
         
        Additional built-in types</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
    Users are not allowed to define types with the same names as the
    predefined or built-in ones. This is checked by the compiler and
    its violation results in a compilation error.
  </fo:block>
  <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The following built-in list types also exist,
      but they are expected to be rarely used. Hence, they have long names:
    </fo:block>
  </fo:block>
  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  nonempty_maybe_improper_list() :: nonempty_maybe_improper_list(any(), any())
  nonempty_improper_list(Type1, Type2)
  nonempty_maybe_improper_list(Type1, Type2)</fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
    where the last two types
    define the set of Erlang terms one would expect.
  </fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
    Also for convenience, record notation is allowed to be used.
    Records are shorthands for the corresponding tuples:
  </fo:block>
  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  Record :: #Erlang_Atom{}
          | #Erlang_Atom{Fields}</fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
    Records are extended to possibly contain type information.
    This is described in <fo:inline font-style="italic">
    Type Information in Record Declarations</fo:inline>.
  </fo:block>
  <fo:block id="idp5089264" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.7.3 
      Type Declarations of User-Defined Types</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      As seen, the basic syntax of a type is an atom followed by closed
      parentheses. New types are declared using <fo:inline font-family="monospace">-type</fo:inline> and <fo:inline font-family="monospace">-opaque</fo:inline>
      attributes as in the following:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  -type my_struct_type() :: Type.
  -opaque my_opaq_type() :: Type.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The type name is the atom <fo:inline font-family="monospace">my_struct_type</fo:inline>,
      followed by parentheses. <fo:inline font-family="monospace">Type</fo:inline> is a type as defined in the
      previous section.
      A current restriction is that <fo:inline font-family="monospace">Type</fo:inline> can contain
      only predefined types,
      or user-defined types which are either of the following:
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Module-local type, that is, with a
      definition that is present in the code of the module</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Remote type, that is, type defined in, and exported by,
      other modules; more about this soon.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For module-local types, the restriction that their definition
      exists in the module is enforced by the compiler and results in a
      compilation error. (A similar restriction currently exists for records.)    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Type declarations can also be parameterized by including type variables
      between the parentheses. The syntax of type variables is the same as
      Erlang variables, that is, starts with an upper-case letter.
      Naturally, these variables can - and is to - appear on the RHS of the
      definition. A concrete example follows:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  -type orddict(Key, Val) :: [{Key, Val}].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      A module can export some types to declare that other modules
      are allowed to refer to them as <fo:inline font-weight="bold">remote types</fo:inline>.
      This declaration has the following form:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  -export_type([T1/A1, ..., Tk/Ak]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here the Ti's are atoms (the name of the type) and the Ai's are their
      arguments</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  -export_type([my_struct_type/0, orddict/2]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assuming that these types are exported from module <fo:inline font-family="monospace">'mod'</fo:inline>,
      you can refer to them from other modules using remote type expressions
      like the following:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  mod:my_struct_type()
  mod:orddict(atom(), term())</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is not allowed to refer to types that are not declared as exported.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Types declared as <fo:inline font-family="monospace">opaque</fo:inline> represent sets of terms whose
      structure is not supposed to be visible from outside of
      their defining module. That is, only the module defining them
      is allowed to depend on their term structure. Consequently, such
      types do not make much sense as module local - module local
      types are not accessible by other modules anyway - and is
      always to be exported.
    </fo:block>
  <fo:block id="idp5104784" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.7.4 
      Type Information in Record Declarations</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The types of record fields can be specified in the declaration of the
      record. The syntax for this is as follows:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  -record(rec, {field1 :: Type1, field2, field3 :: Type3}).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      For fields without type annotations, their type defaults to any().
      That is, the previous example is a shorthand for the following:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  -record(rec, {field1 :: Type1, field2 :: any(), field3 :: Type3}).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      In the presence of initial values for fields,
      the type must be declared after the initialization, as follows:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  -record(rec, {field1 = [] :: Type1, field2, field3 = 42 :: Type3}).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The initial values for fields are to be compatible
      with (that is, a member of) the corresponding types.
      This is checked by the compiler and results in a compilation error
      if a violation is detected.
    </fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before Erlang/OTP 19, for fields without initial values,
      the singleton type <fo:inline font-family="monospace">'undefined'</fo:inline> was added to all declared types.
      In other words, the following two record declarations had identical
      effects:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  -record(rec, {f1 = 42 :: integer(),
                f2      :: float(),
                f3      :: 'a' | 'b'}).

  -record(rec, {f1 = 42 :: integer(),
                f2      :: 'undefined' | float(),
                f3      :: 'undefined' | 'a' | 'b'}).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      This is no longer the case. If you require <fo:inline font-family="monospace">'undefined'</fo:inline> in your record field
      type, you must explicitly add it to the typespec, as in the 2nd example.
    </fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Any record, containing type information or not, once defined,
      can be used as a type using the following syntax:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">  #rec{}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      In addition, the record fields can be further specified when using
      a record type by adding type information about the field
      as follows:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">  #rec{some_field :: Type}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Any unspecified fields are assumed to have the type in the original
      record declaration.
    </fo:block>
  <fo:block id="idp5115376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.7.5 
      Specifications for Functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      A specification (or contract) for a function is given using the
      <fo:inline font-family="monospace">-spec</fo:inline> attribute. The general format is as follows:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  -spec Module:Function(ArgType1, ..., ArgTypeN) -&gt; ReturnType.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The arity of the function must match the number of arguments,
      else a compilation error occurs.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      This form can also be used in header files (.hrl) to declare type
      information for exported functions.
      Then these header files can be included in files that (implicitly or
      explicitly) import these functions.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Within a given module, the following shorthand suffices in most cases:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  -spec Function(ArgType1, ..., ArgTypeN) -&gt; ReturnType.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Also, for documentation purposes, argument names can be given:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  -spec Function(ArgName1 :: Type1, ..., ArgNameN :: TypeN) -&gt; RT.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      A function specification can be overloaded.
      That is, it can have several types, separated by a semicolon (<fo:inline font-family="monospace">;</fo:inline>):
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  -spec foo(T1, T2) -&gt; T3
         ; (T4, T5) -&gt; T6.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      A current restriction, which currently results in a warning
      (not an error) by the compiler, is that the domains of
      the argument types cannot overlap.
      For example, the following specification results in a warning:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  -spec foo(pos_integer()) -&gt; pos_integer()
         ; (integer()) -&gt; integer().</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Type variables can be used in specifications to specify relations for
      the input and output arguments of a function.
      For example, the following specification defines the type of a
      polymorphic identity function:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  -spec id(X) -&gt; X.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Notice that the above specification does not restrict the input
      and output type in any way.
      These types can be constrained by guard-like subtype constraints
      and provide bounded quantification:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">  -spec id(X) -&gt; X when X :: tuple().</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Currently, the <fo:inline font-family="monospace">::</fo:inline> constraint
      (read as «is a subtype of») is
      the only guard constraint that can be used in the <fo:inline font-family="monospace">'when'</fo:inline>
      part of a <fo:inline font-family="monospace">'-spec'</fo:inline> attribute.
    </fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The above function specification uses multiple occurrences of
      the same type variable. That provides more type information than the
      following function specification, where the type variables are missing:
      </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">  -spec id(tuple()) -&gt; tuple().</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	The latter specification says that the function takes some tuple
	and returns some tuple. The specification with the <fo:inline font-family="monospace">X</fo:inline> type
	variable specifies that the function takes a tuple and returns
	<fo:inline font-weight="bold">the same</fo:inline> tuple.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	However, it is up to the tools that process the specifications
        to choose whether to take this extra information into account
        or not.
      </fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The scope of a <fo:inline font-family="monospace">::</fo:inline> constraint is the
      <fo:inline font-family="monospace">(...) -&gt; RetType</fo:inline>
      specification after which it appears. To avoid confusion,
      it is suggested that different variables are used in different
      constituents of an overloaded contract, as shown in the
      following example:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  -spec foo({X, integer()}) -&gt; X when X :: atom()
         ; ([Y]) -&gt; Y when Y :: number().</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Some functions in Erlang are not meant to return;
      either because they define servers or because they are used to
      throw exceptions, as in the following function:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">  my_error(Err) -&gt; erlang:throw({error, Err}).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      For such functions, it is recommended to use the special
      <fo:inline font-family="monospace">no_return()</fo:inline> type for their "return", through a contract
      of the following form:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">  -spec my_error(term()) -&gt; no_return().</fo:block>
  <fo:block id="idp5140048" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">5.8  Expressions</fo:marker>5.8  Expressions</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this section, all valid Erlang expressions are listed.
    When writing Erlang programs, it is also allowed to use macro-
    and record expressions. However, these expressions are expanded
    during compilation and are in that sense not true Erlang
    expressions. Macro- and record expressions are covered in
    separate sections:
   </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">Preprocessor</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">Records</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block id="idp5145984" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.1 
      Expression Evaluation</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All subexpressions are evaluated before an expression itself is
      evaluated, unless explicitly stated otherwise. For example,
      consider the expression:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Expr1 + Expr2</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Expr1</fo:inline> and <fo:inline font-family="monospace">Expr2</fo:inline>, which are also expressions, are
      evaluated first - in any order - before the addition is
      performed.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Many of the operators can only be applied to arguments of a
      certain type. For example, arithmetic operators can only be
      applied to numbers. An argument of the wrong type causes
      a <fo:inline font-family="monospace">badarg</fo:inline> runtime error.</fo:block>
  <fo:block id="idp5151104" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.2 
      Terms</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The simplest form of expression is a term, that is an integer,
      float, atom, string, list, map, or tuple.
      The return value is the term itself.</fo:block>
  <fo:block id="idp5152592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.3 
      Variables</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A variable is an expression. If a variable is bound to a value,
      the return value is this value. Unbound variables are only
      allowed in patterns.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Variables start with an uppercase letter or underscore (_).
      Variables can contain alphanumeric characters, underscore and <fo:inline font-family="monospace">@</fo:inline>.
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
X
Name1
PhoneNumber
Phone_number
_
_Height</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Variables are bound to values using
      <fo:inline font-style="italic">pattern matching</fo:inline>. Erlang
      uses <fo:inline font-weight="bold">single assignment</fo:inline>, that is, a variable can only be bound
      once.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">anonymous variable</fo:inline> is denoted by underscore (_) and
      can be used when a variable is required but its value can be
      ignored.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[H|_] = [1,2,3]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Variables starting with underscore (_), for example,
      <fo:inline font-family="monospace">_Height</fo:inline>, are normal variables, not anonymous. They are
      however ignored by the compiler in the sense that they do not
      generate any warnings for unused variables.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following code:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
member(_, []) -&gt;
    [].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">can be rewritten to be more readable:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
member(Elem, []) -&gt;
    [].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This causes a warning for an unused variable,
      <fo:inline font-family="monospace">Elem</fo:inline>, if the code is compiled with the flag
      <fo:inline font-family="monospace">warn_unused_vars</fo:inline> set. Instead, the code can be rewritten
      to:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
member(_Elem, []) -&gt;
    [].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that since variables starting with an underscore are
      not anonymous, this matches:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{_,_} = {1,2}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">But this fails:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{_N,_N} = {1,2}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The scope for a variable is its function clause.
      Variables bound in a branch of an <fo:inline font-family="monospace">if</fo:inline>, <fo:inline font-family="monospace">case</fo:inline>, 
      or <fo:inline font-family="monospace">receive</fo:inline> expression must be bound in all branches 
      to have a value outside the expression. Otherwise they
      are regarded as 'unsafe' outside the expression.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the <fo:inline font-family="monospace">try</fo:inline> expression variable scoping is limited so that
      variables bound in the expression are always 'unsafe' outside 
      the expression.</fo:block>
  <fo:block id="idp5170720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.4 
      Patterns</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A pattern has the same structure as a term but can contain
      unbound variables.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Name1
[H|T]
{error,Reason}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Patterns are allowed in clause heads, <fo:inline font-family="monospace">case</fo:inline> and
      <fo:inline font-family="monospace">receive</fo:inline> expressions, and match expressions.</fo:block>

    <fo:block id="idp5174384" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Match Operator = in Patterns</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Pattern1</fo:inline> and <fo:inline font-family="monospace">Pattern2</fo:inline> are valid patterns,
        the following is also a valid pattern:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Pattern1 = Pattern2</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When matched against a term, both <fo:inline font-family="monospace">Pattern1</fo:inline> and
        <fo:inline font-family="monospace">Pattern2</fo:inline> are  matched against the term. The idea
        behind this feature is to avoid reconstruction of terms.</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
f({connect,From,To,Number,Options}, To) -&gt;
    Signal = {connect,From,To,Number,Options},
    ...;
f(Signal, To) -&gt;
    ignore.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">can instead be written as</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
f({connect,_,To,_,_} = Signal, To) -&gt;
    ...;
f(Signal, To) -&gt;
    ignore.</fo:block>
    

    <fo:block id="idp5180704" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">String Prefix in Patterns</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When matching strings, the following is a valid pattern:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
f("prefix" ++ Str) -&gt; ...</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is syntactic sugar for the equivalent, but harder to
        read:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
f([$p,$r,$e,$f,$i,$x | Str]) -&gt; ...</fo:block>
    

    <fo:block id="idp5183536" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Expressions in Patterns</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An arithmetic expression can be used within a pattern if
        it meets both of the following two conditions:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>It uses only numeric or bitwise operators.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Its value can be evaluated to a constant when complied.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
case {Value, Result} of
    {?THRESHOLD+1, ok} -&gt; ...</fo:block>
    
  <fo:block id="idp5187872" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.5 
      Match</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following matches <fo:inline font-family="monospace">Expr1</fo:inline>, a pattern, against
      <fo:inline font-family="monospace">Expr2</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Expr1 = Expr2</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the matching succeeds, any unbound variable in the pattern
      becomes bound and the value of <fo:inline font-family="monospace">Expr2</fo:inline> is returned.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the matching fails, a <fo:inline font-family="monospace">badmatch</fo:inline> run-time error occurs.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">{A, B} = {answer, 42}.</fo:inline>
{answer,42}
2&gt; <fo:inline font-weight="bold">A.</fo:inline>
answer
3&gt; <fo:inline font-weight="bold">{C, D} = [1, 2].</fo:inline>
** exception error: no match of right-hand side value [1,2]</fo:block>
  <fo:block id="idp5195440" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.6 
      Function Calls</fo:block>
    
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ExprF(Expr1,...,ExprN)
ExprM:ExprF(Expr1,...,ExprN)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the first form of function calls,
      <fo:inline font-family="monospace">ExprM:ExprF(Expr1,...,ExprN)</fo:inline>, each of <fo:inline font-family="monospace">ExprM</fo:inline> and
      <fo:inline font-family="monospace">ExprF</fo:inline> must be an atom or an expression that evaluates to
      an atom. The function is said to be called by using the
      <fo:inline font-weight="bold">fully qualified function name</fo:inline>. This is often referred
      to as a <fo:inline font-weight="bold">remote</fo:inline> or <fo:inline font-weight="bold">external function call</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
lists:keysearch(Name, 1, List)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the second form of function calls,
      <fo:inline font-family="monospace">ExprF(Expr1,...,ExprN)</fo:inline>, <fo:inline font-family="monospace">ExprF</fo:inline> must be an atom or
      evaluate to a fun.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">ExprF</fo:inline> is an atom, the function is said to be called by
      using the <fo:inline font-weight="bold">implicitly qualified function name</fo:inline>.  If the
      function <fo:inline font-family="monospace">ExprF</fo:inline> is locally defined, it is called.
      Alternatively, if <fo:inline font-family="monospace">ExprF</fo:inline> is explicitly imported from the
      <fo:inline font-family="monospace">M</fo:inline> module, <fo:inline font-family="monospace">M:ExprF(Expr1,...,ExprN)</fo:inline> is called. If
      <fo:inline font-family="monospace">ExprF</fo:inline> is neither declared locally nor explicitly
      imported, <fo:inline font-family="monospace">ExprF</fo:inline> must be the name of an automatically
      imported BIF. </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
handle(Msg, State)
spawn(m, init, [])</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples</fo:inline> where <fo:inline font-family="monospace">ExprF</fo:inline> is a fun:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">Fun1 = fun(X) -&gt; X+1 end,</fo:inline>
<fo:inline font-weight="bold">Fun1(3).</fo:inline>
4
2&gt; <fo:inline font-weight="bold">fun lists:append/2([1,2], [3,4]).</fo:inline>
[1,2,3,4]
3&gt; </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that when calling a local function, there is a difference
    between using the implicitly or fully qualified function name.
    The latter always refers to the latest version of the module.
    See <fo:inline font-style="italic">Compilation and Code Loading
    </fo:inline> and <fo:inline font-style="italic">
    Function Evaluation</fo:inline>.</fo:block>

    <fo:block id="idp5213424" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Local Function Names Clashing With  Auto-Imported BIFs</fo:block>
      
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a local function has the same name as an auto-imported BIF,
    the semantics is that implicitly qualified function calls are
    directed to the locally defined function, not to the BIF. To avoid
    confusion, there is a compiler directive available,
    <fo:inline font-family="monospace">-compile({no_auto_import,[F/A]})</fo:inline>, that makes a BIF not
    being auto-imported. In certain situations, such a compile-directive
    is mandatory.</fo:block>

    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before OTP R14A (ERTS version 5.8), an implicitly
    qualified function call to a function having the same name as an
    auto-imported BIF always resulted in the BIF being called. In
    newer versions of the compiler, the local function is called instead.
    This is to avoid that future additions to the
    set of auto-imported BIFs do not silently change the behavior
    of old code.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, to avoid that old (pre R14) code changed its
    behavior when compiled with OTP version R14A or later, the
    following restriction applies: If you override the name of a BIF
    that was auto-imported in OTP versions prior to R14A (ERTS version
    5.8) and have an implicitly qualified call to that function in
    your code, you either need to explicitly remove the auto-import
    using a compiler directive, or replace the call with a fully
    qualified function call. Otherwise you get a compilation
    error. See the following example:</fo:block> </fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-export([length/1,f/1]).

-compile({no_auto_import,[length/1]}). % erlang:length/1 no longer autoimported

length([]) -&gt;
    0;
length([H|T]) -&gt;
    1 + length(T). %% Calls the local function length/1

f(X) when erlang:length(X) &gt; 3 -&gt; %% Calls erlang:length/1,
                                  %% which is allowed in guards
    long.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same logic applies to explicitly imported functions from
    other modules, as to locally defined functions.
    It is not allowed to both import a
    function from another module and have the function declared in the
    module at the same time:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-export([f/1]).

-compile({no_auto_import,[length/1]}). % erlang:length/1 no longer autoimported

-import(mod,[length/1]).

f(X) when erlang:length(X) &gt; 33 -&gt; %% Calls erlang:length/1,
                                   %% which is allowed in guards

    erlang:length(X);              %% Explicit call to erlang:length in body

f(X) -&gt;
    length(X).                     %% mod:length/1 is called</fo:block>


    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For auto-imported BIFs added in Erlang/OTP R14A and thereafter,
    overriding the name with a local function or explicit import is always
    allowed. However, if the <fo:inline font-family="monospace">-compile({no_auto_import,[F/A])</fo:inline>
    directive is not used, the compiler issues a warning whenever
    the function is called in the module using the implicitly qualified
    function name.</fo:block>
    
  <fo:block id="idp5221904" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.7 
      If</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
if
    GuardSeq1 -&gt;
        Body1;
    ...;
    GuardSeqN -&gt;
        BodyN
end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The branches of an <fo:inline font-family="monospace">if</fo:inline>-expression are scanned sequentially
      until a guard sequence <fo:inline font-family="monospace">GuardSeq</fo:inline> that evaluates to true is
      found. Then the corresponding <fo:inline font-family="monospace">Body</fo:inline> (sequence of expressions
      separated by ',') is evaluated.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value of <fo:inline font-family="monospace">Body</fo:inline> is the return value of
      the <fo:inline font-family="monospace">if</fo:inline> expression.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no guard sequence is evaluated as true,
      an <fo:inline font-family="monospace">if_clause</fo:inline> run-time error
      occurs. If necessary, the guard expression <fo:inline font-family="monospace">true</fo:inline> can be
      used in the last branch, as that guard sequence is always true.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
is_greater_than(X, Y) -&gt;
    if
        X&gt;Y -&gt;
            true;
        true -&gt; % works as an 'else' branch
            false
    end</fo:block>
  <fo:block id="idp5229792" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.8 
      Case</fo:block>
    
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
case Expr of
    Pattern1 [when GuardSeq1] -&gt;
        Body1;
    ...;
    PatternN [when GuardSeqN] -&gt;
        BodyN
end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The expression <fo:inline font-family="monospace">Expr</fo:inline> is evaluated and the patterns
      <fo:inline font-family="monospace">Pattern</fo:inline> are sequentially matched against the result. If a
      match succeeds and the optional guard sequence <fo:inline font-family="monospace">GuardSeq</fo:inline> is
      true, the corresponding <fo:inline font-family="monospace">Body</fo:inline> is evaluated.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value of <fo:inline font-family="monospace">Body</fo:inline> is the return value of
      the <fo:inline font-family="monospace">case</fo:inline> expression.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If there is no matching pattern with a true guard sequence,
      a <fo:inline font-family="monospace">case_clause</fo:inline> run-time error occurs.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
is_valid_signal(Signal) -&gt;
    case Signal of
        {signal, _What, _From, _To} -&gt;
            true;
        {signal, _What, _To} -&gt;
            true;
        _Else -&gt;
            false
    end.</fo:block>
  <fo:block id="idp5237680" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.9 
      Send</fo:block>
    
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Expr1 ! Expr2</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends the value of <fo:inline font-family="monospace">Expr2</fo:inline> as a message to the process
      specified by <fo:inline font-family="monospace">Expr1</fo:inline>. The value of <fo:inline font-family="monospace">Expr2</fo:inline> is also
      the return value of the expression.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Expr1</fo:inline> must evaluate to a pid, a registered name (atom), or
      a tuple <fo:inline font-family="monospace">{Name,Node}</fo:inline>. <fo:inline font-family="monospace">Name</fo:inline> is an atom and
      <fo:inline font-family="monospace">Node</fo:inline> is a node name, also an atom.</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">Expr1</fo:inline> evaluates to a name, but this name is not
       registered, a <fo:inline font-family="monospace">badarg</fo:inline> run-time error occurs.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Sending a message to a pid never fails, even if the pid
       identifies a non-existing process.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Distributed message sending, that is, if <fo:inline font-family="monospace">Expr1</fo:inline>
       evaluates to a tuple <fo:inline font-family="monospace">{Name,Node}</fo:inline> (or a pid located at
       another node), also never fails.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp5247664" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.10 
      Receive</fo:block>
    
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
receive
    Pattern1 [when GuardSeq1] -&gt;
        Body1;
    ...;
    PatternN [when GuardSeqN] -&gt;
        BodyN
end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receives messages sent to the process using the send operator
      (!). The patterns <fo:inline font-family="monospace">Pattern</fo:inline> are sequentially matched
      against the first message in time order in the mailbox, then
      the second, and so on. If a match succeeds and the optional
      guard sequence <fo:inline font-family="monospace">GuardSeq</fo:inline> is true, the corresponding
      <fo:inline font-family="monospace">Body</fo:inline> is evaluated. The matching message is consumed, that
      is, removed from the mailbox, while any other messages in
      the mailbox remain unchanged.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value of <fo:inline font-family="monospace">Body</fo:inline> is the return value of
      the <fo:inline font-family="monospace">receive</fo:inline> expression.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">receive</fo:inline> never fails. The execution is suspended, possibly
      indefinitely, until a message arrives that matches one of
      the patterns and with a true guard sequence. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
wait_for_onhook() -&gt;
    receive
        onhook -&gt;
            disconnect(),
            idle();
        {connect, B} -&gt;
            B ! {busy, self()},
            wait_for_onhook()
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">receive</fo:inline> expression can be augmented with a
      timeout:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
receive
    Pattern1 [when GuardSeq1] -&gt;
        Body1;
    ...;
    PatternN [when GuardSeqN] -&gt;
        BodyN
after
    ExprT -&gt;
        BodyT
end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ExprT</fo:inline> is to evaluate to an integer. The highest allowed
      value is 16#FFFFFFFF, that is, the value must fit in 32 bits.
      <fo:inline font-family="monospace">receive..after</fo:inline> works exactly as <fo:inline font-family="monospace">receive</fo:inline>, except
      that if no matching message has arrived within <fo:inline font-family="monospace">ExprT</fo:inline>
      milliseconds, then <fo:inline font-family="monospace">BodyT</fo:inline> is evaluated instead. The
      return value of <fo:inline font-family="monospace">BodyT</fo:inline> then becomes the return value
      of the <fo:inline font-family="monospace">receive..after</fo:inline> expression.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
wait_for_onhook() -&gt;
    receive
        onhook -&gt;
            disconnect(),
            idle();
        {connect, B} -&gt;
            B ! {busy, self()},
            wait_for_onhook()
    after
        60000 -&gt;
            disconnect(),
            error()
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is legal to use a <fo:inline font-family="monospace">receive..after</fo:inline> expression with no
      branches:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
receive
after
    ExprT -&gt;
        BodyT
end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This construction does not consume any messages, only suspends
      execution in the process for <fo:inline font-family="monospace">ExprT</fo:inline> milliseconds. This can be
      used to implement simple timers.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
timer() -&gt;
    spawn(m, timer, [self()]).

timer(Pid) -&gt;
    receive
    after
        5000 -&gt;
            Pid ! timeout
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two special cases for the timeout value <fo:inline font-family="monospace">ExprT</fo:inline>:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">infinity</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The process is to wait indefinitely for a matching message;
       this is the same as not using a timeout. This can be
       useful for timeout values that are calculated at runtime.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">0</fo:block>
      <fo:block-container><fo:block start-indent="2em">If there is no matching message in the mailbox, the timeout
       occurs immediately.</fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp5268256" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.11 
      Term Comparisons</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Expr1 <fo:inline font-weight="bold">op</fo:inline> Expr2</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">op</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Description</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">==</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Equal to</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">/=</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Not equal to</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">=&lt;</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Less than or equal to</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">&lt;</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Less than</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">&gt;=</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Greater than or equal to</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">&gt;</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Greater than</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">=:=</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Exactly equal to</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">=/=</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Exactly not equal to</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        8.1:
         
        Term Comparison Operators.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The arguments can be of different data types. The following
      order is defined:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
number &lt; atom &lt; reference &lt; fun &lt; port &lt; pid &lt; tuple &lt; map &lt; nil &lt; list &lt; bit string</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lists are compared element by element. Tuples are ordered by
      size, two tuples with the same size are compared element by
      element.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maps are ordered by size, two maps with the same size are compared by keys in
        ascending term order and then by values in key order.
        In maps key order integers types are considered less than floats types.
    </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When comparing an integer to a float, the term with the lesser
      precision is converted into the type of the other term, unless the
      operator is one of <fo:inline font-family="monospace">=:=</fo:inline> or <fo:inline font-family="monospace">=/=</fo:inline>. A float is more precise than
      an integer until all significant figures of the float are to the left of
      the decimal point. This happens when the float is larger/smaller than
      +/-9007199254740992.0. The conversion strategy is changed
      depending on the size of the float because otherwise comparison of large
      floats and integers would lose their transitivity.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Term comparison operators return the Boolean value of the
      expression, <fo:inline font-family="monospace">true</fo:inline> or <fo:inline font-family="monospace">false</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">1==1.0.</fo:inline>
true
2&gt; <fo:inline font-weight="bold">1=:=1.0.</fo:inline>
false
3&gt; <fo:inline font-weight="bold">1 &gt; a.</fo:inline>
false
4&gt; <fo:inline font-weight="bold">#{c =&gt; 3} &gt; #{a =&gt; 1, b =&gt; 2}.</fo:inline>
false
4&gt; <fo:inline font-weight="bold">#{a =&gt; 1, b =&gt; 2} == #{a =&gt; 1.0, b =&gt; 2.0}.</fo:inline>
true</fo:block>
  <fo:block id="idp5302224" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.12 
      Arithmetic Expressions</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
<fo:inline font-weight="bold">op</fo:inline> Expr
Expr1 <fo:inline font-weight="bold">op</fo:inline> Expr2</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Operator</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Description</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Argument Type</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">+</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Unary +</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Number</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">-</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Unary -</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Number</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">+</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"> </fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">number</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">-</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"> </fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Number</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">*</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"> </fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Number</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">/</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Floating point division</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Number</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">bnot</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Unary bitwise NOT</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Integer</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">div</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Integer division</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Integer</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">rem</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Integer remainder of X/Y</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Integer</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">band</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Bitwise AND</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Integer</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">bor</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Bitwise OR</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Integer</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">bxor</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Arithmetic bitwise XOR</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Integer</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">bsl</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Arithmetic bitshift left</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Integer</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">bsr</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Bitshift right</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Integer</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        8.2:
         
        Arithmetic Operators.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">+1.</fo:inline>
1
2&gt; <fo:inline font-weight="bold">-1.</fo:inline>
-1
3&gt; <fo:inline font-weight="bold">1+1.</fo:inline>
2
4&gt; <fo:inline font-weight="bold">4/2.</fo:inline>
2.0
5&gt; <fo:inline font-weight="bold">5 div 2.</fo:inline>
2
6&gt; <fo:inline font-weight="bold">5 rem 2.</fo:inline>
1
7&gt; <fo:inline font-weight="bold">2#10 band 2#01.</fo:inline>
0
8&gt; <fo:inline font-weight="bold">2#10 bor 2#01.</fo:inline>
3
9&gt; <fo:inline font-weight="bold">a + 10.</fo:inline>
** exception error: an error occurred when evaluating an arithmetic expression
     in operator  +/2
        called as a + 10
10&gt; <fo:inline font-weight="bold">1 bsl (1 bsl 64).</fo:inline>
** exception error: a system limit has been reached
     in operator  bsl/2
        called as 1 bsl 18446744073709551616</fo:block>
  <fo:block id="idp5363136" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.13 
      Boolean Expressions</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
<fo:inline font-weight="bold">op</fo:inline> Expr
Expr1 <fo:inline font-weight="bold">op</fo:inline> Expr2</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Operator</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Description</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">not</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Unary logical NOT</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">and</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Logical AND</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">or</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Logical OR</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">xor</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Logical XOR</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        8.3:
         
        Logical Operators.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">not true.</fo:inline>
false
2&gt; <fo:inline font-weight="bold">true and false.</fo:inline>
false
3&gt; <fo:inline font-weight="bold">true xor false.</fo:inline>
true
4&gt; <fo:inline font-weight="bold">true or garbage.</fo:inline>
** exception error: bad argument
     in operator  or/2
        called as true or garbage</fo:block>
  <fo:block id="idp5381856" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.14 
      Short-Circuit Expressions</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Expr1 orelse Expr2
Expr1 andalso Expr2</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Expr2</fo:inline> is evaluated only if
      necessary. That is, <fo:inline font-family="monospace">Expr2</fo:inline> is evaluated only if:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Expr1</fo:inline> evaluates to <fo:inline font-family="monospace">false</fo:inline> in an
      <fo:inline font-family="monospace">orelse</fo:inline> expression.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Expr1</fo:inline> evaluates to <fo:inline font-family="monospace">true</fo:inline> in an
      <fo:inline font-family="monospace">andalso</fo:inline> expression.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns either the value of <fo:inline font-family="monospace">Expr1</fo:inline> (that is,
      <fo:inline font-family="monospace">true</fo:inline> or <fo:inline font-family="monospace">false</fo:inline>) or the value of <fo:inline font-family="monospace">Expr2</fo:inline>
      (if <fo:inline font-family="monospace">Expr2</fo:inline> is evaluated).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 1:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
case A &gt;= -1.0 andalso math:sqrt(A+1) &gt; B of</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This works even if <fo:inline font-family="monospace">A</fo:inline> is less than <fo:inline font-family="monospace">-1.0</fo:inline>,
      since in that case, <fo:inline font-family="monospace">math:sqrt/1</fo:inline> is never evaluated.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 2:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
OnlyOne = is_atom(L) orelse
         (is_list(L) andalso length(L) == 1),</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From Erlang/OTP R13A, <fo:inline font-family="monospace">Expr2</fo:inline> is no longer required to evaluate to a
    Boolean value. As a consequence, <fo:inline font-family="monospace">andalso</fo:inline> and <fo:inline font-family="monospace">orelse</fo:inline>
    are now tail-recursive.  For instance, the following function is
    tail-recursive in Erlang/OTP R13A and later:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
all(Pred, [Hd|Tail]) -&gt;
    Pred(Hd) andalso all(Pred, Tail);
all(_, []) -&gt;
    true.</fo:block>
  <fo:block id="idp5399296" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.15 
      List Operations</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Expr1 ++ Expr2
Expr1 -- Expr2</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The list concatenation operator <fo:inline font-family="monospace">++</fo:inline> appends its second
      argument to its first and returns the resulting list.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The list subtraction operator <fo:inline font-family="monospace">--</fo:inline> produces a list that
      is a copy of the first argument. The procedure is a follows:
      for each element in the second argument, the first
      occurrence of this element (if any) is removed.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">[1,2,3]++[4,5].</fo:inline>
[1,2,3,4,5]
2&gt; <fo:inline font-weight="bold">[1,2,3,2,1,2]--[2,1,2].</fo:inline>
[3,1,2]</fo:block>

     <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The complexity of <fo:inline font-family="monospace">A -- B</fo:inline> is
     proportional to <fo:inline font-family="monospace">length(A)*length(B)</fo:inline>. That is, it
     becomes very slow if both <fo:inline font-family="monospace">A</fo:inline> and <fo:inline font-family="monospace">B</fo:inline> are
     long lists.</fo:block></fo:block>
   <fo:block id="idp5407616" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.16 
      Map Expressions</fo:block>
    
	
	  <fo:block id="idp5408352" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Creating Maps</fo:block>
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Constructing a new map is done by letting an expression <fo:inline font-family="monospace">K</fo:inline> be associated with
		  another expression <fo:inline font-family="monospace">V</fo:inline>:
	  </fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">#{ K =&gt; V }</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  New maps can include multiple associations at construction by listing every
		  association:
	  </fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">#{ K1 =&gt; V1, .., Kn =&gt; Vn }</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  An empty map is constructed by not associating any terms with each other:
	  </fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">#{}</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  All keys and values in the map are terms. Any expression is first evaluated and
		  then the resulting terms are used as <fo:inline font-weight="bold">key</fo:inline> and <fo:inline font-weight="bold">value</fo:inline> respectively.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Keys and values are separated by the <fo:inline font-family="monospace">=&gt;</fo:inline> arrow and associations are
		  separated by a comma <fo:inline font-family="monospace">,</fo:inline>.
	  </fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  <fo:inline font-weight="bold">Examples:</fo:inline>
	  </fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
M0 = #{},                 % empty map
M1 = #{a =&gt; &lt;&lt;"hello"&gt;&gt;}, % single association with literals
M2 = #{1 =&gt; 2, b =&gt; b},   % multiple associations with literals
M3 = #{k =&gt; {A,B}},       % single association with variables
M4 = #{{"w", 1} =&gt; f()}.  % compound key associated with an evaluated expression</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Here, <fo:inline font-family="monospace">A</fo:inline> and <fo:inline font-family="monospace">B</fo:inline> are any expressions and <fo:inline font-family="monospace">M0</fo:inline> through <fo:inline font-family="monospace">M4</fo:inline>
		  are the resulting map terms.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  If two matching keys are declared, the latter key takes precedence.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  <fo:inline font-weight="bold">Example:</fo:inline>
	  </fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">#{1 =&gt; a, 1 =&gt; b}.</fo:inline>
#{1 =&gt; b }
2&gt; <fo:inline font-weight="bold">#{1.0 =&gt; a, 1 =&gt; b}.</fo:inline>
#{1 =&gt; b, 1.0 =&gt; a}
</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  The order in which the expressions constructing the keys (and their
		  associated values) are evaluated is not defined. The syntactic order of
		  the key-value pairs in the construction is of no relevance, except in
		  the recently mentioned case of two matching keys.
	  </fo:block>
  

  <fo:block id="idp5424400" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Updating Maps</fo:block>
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Updating a map has a similar syntax as constructing it.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  An expression defining the map to be updated, is put in front of the expression
		  defining the keys to be updated and their respective values:
	  </fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">M#{ K =&gt; V }</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Here <fo:inline font-family="monospace">M</fo:inline> is a term of type map and <fo:inline font-family="monospace">K</fo:inline> and <fo:inline font-family="monospace">V</fo:inline> are any expression.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  If key <fo:inline font-family="monospace">K</fo:inline> does not match any existing key in the map, a new association
		  is created from key <fo:inline font-family="monospace">K</fo:inline> to value <fo:inline font-family="monospace">V</fo:inline>.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">     If key <fo:inline font-family="monospace">K</fo:inline> matches an existing key in map <fo:inline font-family="monospace">M</fo:inline>,
                  its associated value
	          is replaced by the new value <fo:inline font-family="monospace">V</fo:inline>. In both cases, the evaluated map expression
		  returns a new map.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  If <fo:inline font-family="monospace">M</fo:inline> is not of type map, an exception of type <fo:inline font-family="monospace">badmap</fo:inline> is thrown.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  To only update an existing value, the following syntax is used:
	  </fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">M#{ K := V } </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Here <fo:inline font-family="monospace">M</fo:inline> is a term of type map, <fo:inline font-family="monospace">V</fo:inline> is an expression and <fo:inline font-family="monospace">K</fo:inline>
		  is an expression that evaluates to an existing key in <fo:inline font-family="monospace">M</fo:inline>.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  If key <fo:inline font-family="monospace">K</fo:inline> does not match any existing keys in map <fo:inline font-family="monospace">M</fo:inline>, an exception
		  of type <fo:inline font-family="monospace">badarg</fo:inline> is triggered at runtime. If a matching key <fo:inline font-family="monospace">K</fo:inline>
		  is present in map <fo:inline font-family="monospace">M</fo:inline>, its associated value is replaced by the new
		  value <fo:inline font-family="monospace">V</fo:inline>, and the evaluated map expression returns a new map.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  If <fo:inline font-family="monospace">M</fo:inline> is not of type map, an exception of type <fo:inline font-family="monospace">badmap</fo:inline> is thrown.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  <fo:inline font-weight="bold">Examples:</fo:inline>
	  </fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
M0 = #{},
M1 = M0#{a =&gt; 0},
M2 = M1#{a =&gt; 1, b =&gt; 2},
M3 = M2#{"function" =&gt; fun() -&gt; f() end},
M4 = M3#{a := 2, b := 3}.  % 'a' and 'b' was added in `M1` and `M2`.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Here <fo:inline font-family="monospace">M0</fo:inline> is any map. It follows that <fo:inline font-family="monospace">M1 .. M4</fo:inline> are maps as well.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  More <fo:inline font-weight="bold">Examples:</fo:inline>
	  </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">M = #{1 =&gt; a}.</fo:inline>
#{1 =&gt; a }
2&gt; <fo:inline font-weight="bold">M#{1.0 =&gt; b}.</fo:inline>
#{1 =&gt; a, 1.0 =&gt; b}.
3&gt; <fo:inline font-weight="bold">M#{1 := b}.</fo:inline>
#{1 =&gt; b}
4&gt; <fo:inline font-weight="bold">M#{1.0 := b}.</fo:inline>
** exception error: bad argument
</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  As in construction, the order in which the key and value expressions
		  are evaluated is not defined. The
		  syntactic order of the key-value pairs in the update is of no
		  relevance, except in the case where two keys match.
		  In that case, the latter value is used.
	  </fo:block>
  

  <fo:block id="idp5449328" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Maps in Patterns</fo:block>
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Matching of key-value associations from maps is done as follows:
	  </fo:block>

	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">#{ K := V } = M</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Here <fo:inline font-family="monospace">M</fo:inline> is any map. The key <fo:inline font-family="monospace">K</fo:inline> must be an expression with bound
		  variables or literals. <fo:inline font-family="monospace">V</fo:inline> can be any pattern with either bound or
		  unbound variables.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  If the variable <fo:inline font-family="monospace">V</fo:inline> is unbound, it becomes bound to the value associated
		  with the key <fo:inline font-family="monospace">K</fo:inline>, which must exist in the map <fo:inline font-family="monospace">M</fo:inline>. If the variable
		  <fo:inline font-family="monospace">V</fo:inline> is bound, it must match the value associated with <fo:inline font-family="monospace">K</fo:inline> in <fo:inline font-family="monospace">M</fo:inline>.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">M = #{"tuple" =&gt; {1,2}}.</fo:inline>
#{"tuple" =&gt; {1,2}}
2&gt; <fo:inline font-weight="bold">#{"tuple" := {1,B}} = M.</fo:inline>
#{"tuple" =&gt; {1,2}}
3&gt; <fo:inline font-weight="bold">B.</fo:inline>
2.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  This binds variable <fo:inline font-family="monospace">B</fo:inline> to integer <fo:inline font-family="monospace">2</fo:inline>.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Similarly, multiple values from the map can be matched:
	  </fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">#{ K1 := V1, .., Kn := Vn } = M</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Here keys <fo:inline font-family="monospace">K1 .. Kn</fo:inline> are any expressions with literals or bound variables. If all
		  keys exist in map <fo:inline font-family="monospace">M</fo:inline>, all variables in <fo:inline font-family="monospace">V1 .. Vn</fo:inline> is  matched to the
		  associated values of their respective keys.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  If the matching conditions are not met, the match fails, either with:
	  </fo:block>
	  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">badmatch</fo:inline> exception.</fo:block>
		        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is if it is used in the context of the match operator
			  as in the example.</fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Or resulting in the next clause being tested in function heads and
			  case expressions.</fo:block>
		  </fo:block></fo:list-item-body></fo:list-item>
	  </fo:list-block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Matching in maps only allows for <fo:inline font-family="monospace">:=</fo:inline> as delimiters of associations.
	  </fo:block>
	   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  The order in which keys are declared in matching has no relevance.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Duplicate keys are allowed in matching and match each pattern associated
		  to the keys:
	  </fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">#{ K := V1, K := V2 } = M</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Matching an expression against an empty map literal, matches its type but
		  no variables are bound:
	  </fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">#{} = Expr</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  This expression matches if the expression <fo:inline font-family="monospace">Expr</fo:inline> is of type map, otherwise
		  it fails with an exception <fo:inline font-family="monospace">badmatch</fo:inline>.
	  </fo:block>
	  <fo:block id="idp5472480" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Matching Syntax</fo:block>
		  
		  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
			  Matching of literals as keys are allowed in function heads:
		  </fo:block>
		  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% only start if not_started
handle_call(start, From, #{ state := not_started } = S) -&gt;
...
    {reply, ok, S#{ state := start }};

%% only change if started
handle_call(change, From, #{ state := start } = S) -&gt;
...
    {reply, ok, S#{ state := changed }};</fo:block>
	  
  
  <fo:block id="idp5474992" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Maps in Guards</fo:block>
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Maps are allowed in guards as long as all subexpressions are valid guard expressions.
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		  Two guard BIFs handle maps:
	  </fo:block>
	  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
			  <fo:inline font-style="italic">is_map/1</fo:inline>
			   in the <fo:inline font-family="monospace">erlang</fo:inline> module
		  </fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
			  <fo:inline font-style="italic">map_size/1</fo:inline>
			   in the <fo:inline font-family="monospace">erlang</fo:inline> module
		  </fo:block></fo:list-item-body></fo:list-item>
	  </fo:list-block>
	
  <fo:block id="idp5481552" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.17 
      Bit Syntax Expressions</fo:block>
    
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">&lt;&lt;&gt;&gt;
&lt;&lt;E1,...,En&gt;&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each element <fo:inline font-family="monospace">Ei</fo:inline> specifies a <fo:inline font-weight="bold">segment</fo:inline> of
      the bit string. Each element <fo:inline font-family="monospace">Ei</fo:inline> is a value, followed by an
      optional <fo:inline font-weight="bold">size expression</fo:inline> and an optional <fo:inline font-weight="bold">type specifier list</fo:inline>.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Ei = Value |
     Value:Size |
     Value/TypeSpecifierList |
     Value:Size/TypeSpecifierList</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used in a bit string construction, <fo:inline font-family="monospace">Value</fo:inline> is an expression
    that is to evaluate to an integer, float, or bit string.  If the
    expression is not a single literal or variable, it
    is to be enclosed in parentheses.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used in a bit string matching, <fo:inline font-family="monospace">Value</fo:inline> must be a variable,
    or an integer, float, or string.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that, for example, using a string literal as in
    <fo:inline font-family="monospace">&lt;&lt;"abc"&gt;&gt;</fo:inline> is syntactic sugar for
    <fo:inline font-family="monospace">&lt;&lt;$a,$b,$c&gt;&gt;</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used in a bit string construction, <fo:inline font-family="monospace">Size</fo:inline> is an expression
    that is to evaluate to an integer.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used in a bit string matching, <fo:inline font-family="monospace">Size</fo:inline> must be an integer, or a
    variable bound to an integer.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of <fo:inline font-family="monospace">Size</fo:inline> specifies the size of the segment in
    units (see below). The default value depends on the type (see
    below):</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>For <fo:inline font-family="monospace">integer</fo:inline> it is 8.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>For <fo:inline font-family="monospace">float</fo:inline> it is 64.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>For <fo:inline font-family="monospace">binary</fo:inline> and <fo:inline font-family="monospace">bitstring</fo:inline> it is
      the whole binary or bit string.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In matching, this default value is only
    valid for the last element. All other bit string or binary
    elements in the matching must have a size specification.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the <fo:inline font-family="monospace">utf8</fo:inline>, <fo:inline font-family="monospace">utf16</fo:inline>, and <fo:inline font-family="monospace">utf32</fo:inline> types,
    <fo:inline font-family="monospace">Size</fo:inline> must not be given. The size of the segment is implicitly
    determined by the type and value itself.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">TypeSpecifierList</fo:inline> is a list of type specifiers, in any
    order, separated by hyphens (-). Default values are used for any
    omitted type specifiers.</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Type</fo:inline>= <fo:inline font-family="monospace">integer</fo:inline> | <fo:inline font-family="monospace">float</fo:inline> | <fo:inline font-family="monospace">binary</fo:inline> |
             <fo:inline font-family="monospace">bytes</fo:inline> | <fo:inline font-family="monospace">bitstring</fo:inline> | <fo:inline font-family="monospace">bits</fo:inline> |
	     <fo:inline font-family="monospace">utf8</fo:inline> | <fo:inline font-family="monospace">utf16</fo:inline> | <fo:inline font-family="monospace">utf32</fo:inline> </fo:block>
      <fo:block-container><fo:block start-indent="2em">The default is <fo:inline font-family="monospace">integer</fo:inline>. <fo:inline font-family="monospace">bytes</fo:inline> is a shorthand for 
      <fo:inline font-family="monospace">binary</fo:inline> and <fo:inline font-family="monospace">bits</fo:inline> is a shorthand for <fo:inline font-family="monospace">bitstring</fo:inline>.
      See below for more information about the <fo:inline font-family="monospace">utf</fo:inline> types.
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Signedness</fo:inline>= <fo:inline font-family="monospace">signed</fo:inline> | <fo:inline font-family="monospace">unsigned</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Only matters for matching and when the type is <fo:inline font-family="monospace">integer</fo:inline>. 
      The default is <fo:inline font-family="monospace">unsigned</fo:inline>.</fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Endianness</fo:inline>= <fo:inline font-family="monospace">big</fo:inline> | <fo:inline font-family="monospace">little</fo:inline> | <fo:inline font-family="monospace">native</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Native-endian means that the endianness is resolved at load
       time to be either big-endian or little-endian, depending on
       what is native for the CPU that the Erlang machine is run on.
       Endianness only matters when the Type is either <fo:inline font-family="monospace">integer</fo:inline>,
       <fo:inline font-family="monospace">utf16</fo:inline>, <fo:inline font-family="monospace">utf32</fo:inline>, or <fo:inline font-family="monospace">float</fo:inline>. The default is <fo:inline font-family="monospace">big</fo:inline>.
       </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Unit</fo:inline>= <fo:inline font-family="monospace">unit:IntegerLiteral</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The allowed range is 1..256. Defaults to 1 for <fo:inline font-family="monospace">integer</fo:inline>,
       <fo:inline font-family="monospace">float</fo:inline>, and <fo:inline font-family="monospace">bitstring</fo:inline>, and to 8 for <fo:inline font-family="monospace">binary</fo:inline>.
       No unit specifier must be given for the types 
       <fo:inline font-family="monospace">utf8</fo:inline>, <fo:inline font-family="monospace">utf16</fo:inline>, and <fo:inline font-family="monospace">utf32</fo:inline>.
       </fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of <fo:inline font-family="monospace">Size</fo:inline> multiplied with the unit gives
      the number of bits. A segment of type <fo:inline font-family="monospace">binary</fo:inline> must have 
      a size that is evenly divisible by 8.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When constructing binaries, if the size <fo:inline font-family="monospace">N</fo:inline> of an integer
    segment is too small to contain the given integer, the most significant
    bits of the integer are silently discarded and only the <fo:inline font-family="monospace">N</fo:inline> least
    significant bits are put into the binary.</fo:block></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The types <fo:inline font-family="monospace">utf8</fo:inline>, <fo:inline font-family="monospace">utf16</fo:inline>, and <fo:inline font-family="monospace">utf32</fo:inline> specifies
    encoding/decoding of the <fo:inline font-weight="bold">Unicode Transformation Format</fo:inline>s UTF-8, UTF-16,
    and UTF-32, respectively.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When constructing a segment of a <fo:inline font-family="monospace">utf</fo:inline> type, <fo:inline font-family="monospace">Value</fo:inline>
    must be an integer in the range 0..16#D7FF or
    16#E000....16#10FFFF. Construction
    fails with a <fo:inline font-family="monospace">badarg</fo:inline> exception if <fo:inline font-family="monospace">Value</fo:inline> is
    outside the allowed ranges. The size of the resulting binary
    segment depends on the type or <fo:inline font-family="monospace">Value</fo:inline>, or both:</fo:block>
     <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>For <fo:inline font-family="monospace">utf8</fo:inline>, <fo:inline font-family="monospace">Value</fo:inline> is encoded in 1-4 bytes.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>For <fo:inline font-family="monospace">utf16</fo:inline>, <fo:inline font-family="monospace">Value</fo:inline> is encoded in 2 or 4 bytes.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>For <fo:inline font-family="monospace">utf32</fo:inline>, <fo:inline font-family="monospace">Value</fo:inline> is always be encoded in 4 bytes.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When constructing, a literal string can be given followed
    by one of the UTF types, for example: <fo:inline font-family="monospace">&lt;&lt;"abc"/utf8&gt;&gt;</fo:inline>
    which is syntactic sugar for
    <fo:inline font-family="monospace">&lt;&lt;$a/utf8,$b/utf8,$c/utf8&gt;&gt;</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A successful match of a segment of a <fo:inline font-family="monospace">utf</fo:inline> type, results
    in an integer in the range 0..16#D7FF or  16#E000..16#10FFFF.
    The match fails if the returned value falls outside those ranges.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A segment of type <fo:inline font-family="monospace">utf8</fo:inline> matches 1-4 bytes in the binary,
    if the binary at the match position contains a valid UTF-8 sequence.
    (See RFC-3629 or the Unicode standard.)</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A segment of type <fo:inline font-family="monospace">utf16</fo:inline> can match 2 or 4 bytes in the binary.
    The match fails if the binary at the match position does not contain
    a legal UTF-16 encoding of a Unicode code point. (See RFC-2781 or
    the Unicode standard.)</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A segment of type <fo:inline font-family="monospace">utf32</fo:inline> can match 4 bytes in the binary in the
    same way as an <fo:inline font-family="monospace">integer</fo:inline> segment matches 32 bits.
    The match fails if the resulting integer is outside the legal ranges
    mentioned above.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">Bin1 = &lt;&lt;1,17,42&gt;&gt;.</fo:inline>
&lt;&lt;1,17,42&gt;&gt;
2&gt; <fo:inline font-weight="bold">Bin2 = &lt;&lt;"abc"&gt;&gt;.</fo:inline>
&lt;&lt;97,98,99&gt;&gt;
3&gt; <fo:inline font-weight="bold">Bin3 = &lt;&lt;1,17,42:16&gt;&gt;.</fo:inline>
&lt;&lt;1,17,0,42&gt;&gt;
4&gt; <fo:inline font-weight="bold">&lt;&lt;A,B,C:16&gt;&gt; = &lt;&lt;1,17,42:16&gt;&gt;.</fo:inline>
&lt;&lt;1,17,0,42&gt;&gt;
5&gt; <fo:inline font-weight="bold">C.</fo:inline>
42
6&gt; <fo:inline font-weight="bold">&lt;&lt;D:16,E,F&gt;&gt; = &lt;&lt;1,17,42:16&gt;&gt;.</fo:inline>
&lt;&lt;1,17,0,42&gt;&gt;
7&gt; <fo:inline font-weight="bold">D.</fo:inline>
273
8&gt; <fo:inline font-weight="bold">F.</fo:inline>
42
9&gt; <fo:inline font-weight="bold">&lt;&lt;G,H/binary&gt;&gt; = &lt;&lt;1,17,42:16&gt;&gt;.</fo:inline>
&lt;&lt;1,17,0,42&gt;&gt;
10&gt; <fo:inline font-weight="bold">H.</fo:inline>
&lt;&lt;17,0,42&gt;&gt;
11&gt; <fo:inline font-weight="bold">&lt;&lt;G,H/bitstring&gt;&gt; = &lt;&lt;1,17,42:12&gt;&gt;.</fo:inline>
&lt;&lt;1,17,1,10:4&gt;&gt;
12&gt; <fo:inline font-weight="bold">H.</fo:inline>
&lt;&lt;17,1,10:4&gt;&gt;
13&gt; <fo:inline font-weight="bold">&lt;&lt;1024/utf8&gt;&gt;.</fo:inline>
&lt;&lt;208,128&gt;&gt;
</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that bit string patterns cannot be nested.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice also that "<fo:inline font-family="monospace">B=&lt;&lt;1&gt;&gt;</fo:inline>" is interpreted as
      "<fo:inline font-family="monospace">B =&lt;&lt;1&gt;&gt;</fo:inline>" which is a syntax error. The correct way is
      to write a space after '=': "<fo:inline font-family="monospace">B= &lt;&lt;1&gt;&gt;</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">More examples are provided in
    <fo:inline font-style="italic">
    Programming Examples</fo:inline>.</fo:block>
  <fo:block id="idp5551488" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.18 
      Fun Expressions</fo:block>
    
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
fun
    [Name](Pattern11,...,Pattern1N) [when GuardSeq1] -&gt;
              Body1;
    ...;
    [Name](PatternK1,...,PatternKN) [when GuardSeqK] -&gt;
              BodyK
end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A fun expression begins with the keyword <fo:inline font-family="monospace">fun</fo:inline> and ends
      with the keyword <fo:inline font-family="monospace">end</fo:inline>. Between them is to be a function
      declaration, similar to a
      <fo:inline font-style="italic">regular function declaration</fo:inline>,
      except that the function name is optional and is to be a variable, if
      any.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Variables in a fun head shadow the function name and both shadow
      variables in the function clause surrounding the fun expression.
      Variables bound in a fun body are local to the fun body.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value of the expression is the resulting fun.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">Fun1 = fun (X) -&gt; X+1 end.</fo:inline>
#Fun&lt;erl_eval.6.39074546&gt;
2&gt; <fo:inline font-weight="bold">Fun1(2).</fo:inline>
3
3&gt; <fo:inline font-weight="bold">Fun2 = fun (X) when X&gt;=5 -&gt; gt; (X) -&gt; lt end.</fo:inline>
#Fun&lt;erl_eval.6.39074546&gt;
4&gt; <fo:inline font-weight="bold">Fun2(7).</fo:inline>
gt
5&gt; <fo:inline font-weight="bold">Fun3 = fun Fact(1) -&gt; 1; Fact(X) when X &gt; 1 -&gt; X * Fact(X - 1) end.</fo:inline>
#Fun&lt;erl_eval.6.39074546&gt;
6&gt; <fo:inline font-weight="bold">Fun3(4).</fo:inline>
24</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following fun expressions are also allowed:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
fun Name/Arity
fun Module:Name/Arity</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In <fo:inline font-family="monospace">Name/Arity</fo:inline>, <fo:inline font-family="monospace">Name</fo:inline> is an atom and <fo:inline font-family="monospace">Arity</fo:inline> is an integer.
      <fo:inline font-family="monospace">Name/Arity</fo:inline> must specify an existing local function. The expression is
      syntactic sugar for:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
fun (Arg1,...,ArgN) -&gt; Name(Arg1,...,ArgN) end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In <fo:inline font-family="monospace">Module:Name/Arity</fo:inline>, <fo:inline font-family="monospace">Module</fo:inline>, and <fo:inline font-family="monospace">Name</fo:inline> are atoms
      and <fo:inline font-family="monospace">Arity</fo:inline> is an integer. Starting from Erlang/OTP R15,
      <fo:inline font-family="monospace">Module</fo:inline>, <fo:inline font-family="monospace">Name</fo:inline>, and <fo:inline font-family="monospace">Arity</fo:inline> can also be variables.
      A fun defined in this way refers to the function <fo:inline font-family="monospace">Name</fo:inline>
      with arity <fo:inline font-family="monospace">Arity</fo:inline> in the <fo:inline font-weight="bold">latest</fo:inline> version of module
      <fo:inline font-family="monospace">Module</fo:inline>. A fun defined in this way is not dependent on
      the code for the module in which it is defined.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">More examples are provided in
      <fo:inline font-style="italic">
      Programming Examples</fo:inline>.</fo:block>
  <fo:block id="idp5571328" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.19 
      Catch and Throw</fo:block>
    
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
catch Expr</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value of <fo:inline font-family="monospace">Expr</fo:inline> unless an exception
      occurs during the evaluation. In that case, the exception is
      caught.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For exceptions of class <fo:inline font-family="monospace">error</fo:inline>, that is,
      run-time errors,
      <fo:inline font-family="monospace">{'EXIT',{Reason,Stack}}</fo:inline> is returned.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For exceptions of class <fo:inline font-family="monospace">exit</fo:inline>, that is,
      the code called <fo:inline font-family="monospace">exit(Term)</fo:inline>,
      <fo:inline font-family="monospace">{'EXIT',Term}</fo:inline> is returned.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For exceptions of class <fo:inline font-family="monospace">throw</fo:inline>, that is
      the code called <fo:inline font-family="monospace">throw(Term)</fo:inline>,
      <fo:inline font-family="monospace">Term</fo:inline> is returned.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Reason</fo:inline> depends on the type of error that occurred, and
      <fo:inline font-family="monospace">Stack</fo:inline> is the stack of recent function calls, see
      <fo:inline font-style="italic">Exit Reasons</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">catch 1+2.</fo:inline>
3
2&gt; <fo:inline font-weight="bold">catch 1+a.</fo:inline>
{'EXIT',{badarith,[...]}}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-family="monospace">catch</fo:inline> has low precedence and catch
      subexpressions often needs to be enclosed in a block
      expression or in parentheses:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; <fo:inline font-weight="bold">A = catch 1+2.</fo:inline>
** 1: syntax error before: 'catch' **
4&gt; <fo:inline font-weight="bold">A = (catch 1+2).</fo:inline>
3</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The BIF <fo:inline font-family="monospace">throw(Any)</fo:inline> can be used for non-local return from
      a function. It must be evaluated within a <fo:inline font-family="monospace">catch</fo:inline>, which
      returns the value <fo:inline font-family="monospace">Any</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
5&gt; <fo:inline font-weight="bold">catch throw(hello).</fo:inline>
hello</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">throw/1</fo:inline> is not evaluated within a catch, a
      <fo:inline font-family="monospace">nocatch</fo:inline> run-time error occurs.</fo:block>
  <fo:block id="idp5590528" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.20 
      Try</fo:block>
    
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
try Exprs
catch
    [Class1:]ExceptionPattern1 [when ExceptionGuardSeq1] -&gt;
        ExceptionBody1;
    [ClassN:]ExceptionPatternN [when ExceptionGuardSeqN] -&gt;
        ExceptionBodyN
end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is an enhancement of
      <fo:inline font-style="italic">catch</fo:inline>.
      It gives the possibility to:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Distinguish between different exception classes.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Choose to handle only the desired ones.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Passing the others on to an enclosing
      <fo:inline font-family="monospace">try</fo:inline> or <fo:inline font-family="monospace">catch</fo:inline>, or to default error handling.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that although the keyword <fo:inline font-family="monospace">catch</fo:inline> is used in
      the <fo:inline font-family="monospace">try</fo:inline> expression, there is not a <fo:inline font-family="monospace">catch</fo:inline> expression
      within the <fo:inline font-family="monospace">try</fo:inline> expression.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It returns the value of <fo:inline font-family="monospace">Exprs</fo:inline> (a sequence of expressions
      <fo:inline font-family="monospace">Expr1, ..., ExprN</fo:inline>) unless an exception occurs during
      the evaluation. In that case the exception is caught and
      the patterns <fo:inline font-family="monospace">ExceptionPattern</fo:inline> with the right exception
      class <fo:inline font-family="monospace">Class</fo:inline> are sequentially matched against the caught
      exception. An omitted <fo:inline font-family="monospace">Class</fo:inline> is shorthand for <fo:inline font-family="monospace">throw</fo:inline>.
      If a match succeeds and the optional guard sequence
      <fo:inline font-family="monospace">ExceptionGuardSeq</fo:inline> is true, the corresponding
      <fo:inline font-family="monospace">ExceptionBody</fo:inline> is evaluated to become the return value.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an exception occurs during evaluation of <fo:inline font-family="monospace">Exprs</fo:inline> but
      there is no matching <fo:inline font-family="monospace">ExceptionPattern</fo:inline> of the right
      <fo:inline font-family="monospace">Class</fo:inline> with a true guard sequence, the exception is passed
      on as if <fo:inline font-family="monospace">Exprs</fo:inline> had not been enclosed in a <fo:inline font-family="monospace">try</fo:inline>
      expression.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an exception occurs during evaluation of <fo:inline font-family="monospace">ExceptionBody</fo:inline>,
      it is not caught.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">try</fo:inline> expression can have an <fo:inline font-family="monospace">of</fo:inline>
      section:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
try Exprs of
    Pattern1 [when GuardSeq1] -&gt;
        Body1;
    ...;
    PatternN [when GuardSeqN] -&gt;
        BodyN
catch
    [Class1:]ExceptionPattern1 [when ExceptionGuardSeq1] -&gt;
        ExceptionBody1;
    ...;
    [ClassN:]ExceptionPatternN [when ExceptionGuardSeqN] -&gt;
        ExceptionBodyN
end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the evaluation of <fo:inline font-family="monospace">Exprs</fo:inline> succeeds without an exception,
      the patterns <fo:inline font-family="monospace">Pattern</fo:inline> are sequentially matched against
      the result in the same way as for a
      <fo:inline font-style="italic">case</fo:inline> expression, except that if
      the matching fails, a <fo:inline font-family="monospace">try_clause</fo:inline> run-time error occurs.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An exception occurring during the evaluation of <fo:inline font-family="monospace">Body</fo:inline> is
      not caught.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">try</fo:inline> expression can also be augmented with an
      <fo:inline font-family="monospace">after</fo:inline> section, intended to be used for cleanup with side
      effects:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
try Exprs of
    Pattern1 [when GuardSeq1] -&gt;
        Body1;
    ...;
    PatternN [when GuardSeqN] -&gt;
        BodyN
catch
    [Class1:]ExceptionPattern1 [when ExceptionGuardSeq1] -&gt;
        ExceptionBody1;
    ...;
    [ClassN:]ExceptionPatternN [when ExceptionGuardSeqN] -&gt;
        ExceptionBodyN
after
    AfterBody
end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">AfterBody</fo:inline> is evaluated after either <fo:inline font-family="monospace">Body</fo:inline> or
      <fo:inline font-family="monospace">ExceptionBody</fo:inline>, no matter which one. The evaluated value of
      <fo:inline font-family="monospace">AfterBody</fo:inline> is lost; the return value of the <fo:inline font-family="monospace">try</fo:inline>
      expression is the same with an <fo:inline font-family="monospace">after</fo:inline> section as without.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Even if an exception occurs during evaluation of <fo:inline font-family="monospace">Body</fo:inline> or
      <fo:inline font-family="monospace">ExceptionBody</fo:inline>, <fo:inline font-family="monospace">AfterBody</fo:inline> is evaluated. In this case
      the exception is passed on after <fo:inline font-family="monospace">AfterBody</fo:inline> has been
      evaluated, so the exception from the <fo:inline font-family="monospace">try</fo:inline> expression is
      the same with an <fo:inline font-family="monospace">after</fo:inline> section as without.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an exception occurs during evaluation of <fo:inline font-family="monospace">AfterBody</fo:inline>
      itself, it is not caught. So if <fo:inline font-family="monospace">AfterBody</fo:inline> is evaluated after
      an exception in <fo:inline font-family="monospace">Exprs</fo:inline>, <fo:inline font-family="monospace">Body</fo:inline>, or <fo:inline font-family="monospace">ExceptionBody</fo:inline>,
      that exception is lost and masked by the exception in
      <fo:inline font-family="monospace">AfterBody</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">of</fo:inline>, <fo:inline font-family="monospace">catch</fo:inline>, and <fo:inline font-family="monospace">after</fo:inline> sections are all
      optional, as long as there is at least a <fo:inline font-family="monospace">catch</fo:inline> or an
      <fo:inline font-family="monospace">after</fo:inline> section. So the following are valid <fo:inline font-family="monospace">try</fo:inline>
      expressions:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
try Exprs of 
    Pattern when GuardSeq -&gt; 
        Body 
after 
    AfterBody 
end

try Exprs
catch 
    ExpressionPattern -&gt; 
        ExpressionBody
after
    AfterBody
end

try Exprs after AfterBody end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Next is an example of using <fo:inline font-family="monospace">after</fo:inline>. This closes the file,
      even in the event of exceptions in <fo:inline font-family="monospace">file:read/2</fo:inline> or in
      <fo:inline font-family="monospace">binary_to_term/1</fo:inline>. The exceptions are the same as
      without the <fo:inline font-family="monospace">try</fo:inline>...<fo:inline font-family="monospace">after</fo:inline>...<fo:inline font-family="monospace">end</fo:inline> expression:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
termize_file(Name) -&gt;
    {ok,F} = file:open(Name, [read,binary]),
    try
        {ok,Bin} = file:read(F, 1024*1024),
        binary_to_term(Bin)
    after
        file:close(F)
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Next is an example of using <fo:inline font-family="monospace">try</fo:inline> to emulate <fo:inline font-family="monospace">catch Expr</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
try Expr
catch
    throw:Term -&gt; Term;
    exit:Reason -&gt; {'EXIT',Reason}
    error:Reason -&gt; {'EXIT',{Reason,erlang:get_stacktrace()}}
end</fo:block>
  <fo:block id="idp5635376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.21 
      Parenthesized Expressions</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(Expr)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parenthesized expressions are useful to override
      <fo:inline font-style="italic">operator precedences</fo:inline>,
      for example, in arithmetic expressions:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">1 + 2 * 3.</fo:inline>
7
2&gt; <fo:inline font-weight="bold">(1 + 2) * 3.</fo:inline>
9</fo:block>
  <fo:block id="idp5639312" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.22 
      Block Expressions</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
begin
   Expr1,
   ...,
   ExprN
end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Block expressions provide a way to group a sequence of
      expressions, similar to a clause body. The return value is
      the value of the last expression <fo:inline font-family="monospace">ExprN</fo:inline>.</fo:block>
  <fo:block id="idp5642272" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.23 
      List Comprehensions</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">List comprehensions is a feature of many modern functional
      programming languages. Subject to certain rules, they provide a
      succinct notation for generating elements in a list.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">List comprehensions are analogous to set comprehensions in
      Zermelo-Frankel set theory and are called ZF expressions in
      Miranda. They are analogous to the <fo:inline font-family="monospace">setof</fo:inline> and
      <fo:inline font-family="monospace">findall</fo:inline> predicates in Prolog.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">List comprehensions are written with the following syntax:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[Expr || Qualifier1,...,QualifierN]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, <fo:inline font-family="monospace">Expr</fo:inline> is an arbitrary expression, and each
      <fo:inline font-family="monospace">Qualifier</fo:inline> is either a generator or a filter.</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-weight="bold">generator</fo:inline> is written as:      <fo:block/>

         <fo:inline font-family="monospace">Pattern &lt;- ListExpr</fo:inline>.      <fo:block/>
<fo:inline font-family="monospace">ListExpr</fo:inline> must be an expression, which evaluates to a
       list of terms.</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-weight="bold">bit string generator</fo:inline> is written as:      <fo:block/>

         <fo:inline font-family="monospace">BitstringPattern &lt;= BitStringExpr</fo:inline>.      <fo:block/>
<fo:inline font-family="monospace">BitStringExpr</fo:inline> must be an expression, which evaluates to a
       bitstring.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-weight="bold">filter</fo:inline> is an expression, which evaluates to
      <fo:inline font-family="monospace">true</fo:inline> or <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The variables in the generator patterns, shadow variables in the function
    clause, surrounding the list comprehensions.</fo:block> <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list comprehension
    returns a list, where the elements are the result of evaluating <fo:inline font-family="monospace">Expr</fo:inline>
    for each combination of generator list elements and bit string generator
    elements, for which all filters are true.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">[X*2 || X &lt;- [1,2,3]].</fo:inline>
[2,4,6]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When there are no generators or bit string generators, a list comprehension
    returns either a list with one element (the result of evaluating <fo:inline font-family="monospace">Expr</fo:inline>)
    if all filters are true or an empty list otherwise.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">[2 || is_integer(2)].</fo:inline>
[2]
2&gt; <fo:inline font-weight="bold">[x || is_integer(x)].</fo:inline>
[]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">More examples are provided in
    <fo:inline font-style="italic">
    Programming Examples.</fo:inline></fo:block>

  <fo:block id="idp5662208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.24 
      Bit String Comprehensions</fo:block>
     
   
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Bit string comprehensions are
    analogous to List Comprehensions. They are used to generate bit strings
    efficiently and succinctly.</fo:block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Bit string comprehensions are written with
    the following syntax:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;&lt; BitStringExpr || Qualifier1,...,QualifierN &gt;&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">BitStringExpr</fo:inline> is an expression that evalutes to a bit
    string. If <fo:inline font-family="monospace">BitStringExpr</fo:inline> is a function call, it must be
    enclosed in parentheses.  Each <fo:inline font-family="monospace">Qualifier</fo:inline> is either a
    generator, a bit string generator or a filter.</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
 <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-weight="bold">generator</fo:inline> is written as:      <fo:block/>
        <fo:inline font-family="monospace">Pattern &lt;- ListExpr</fo:inline>.      <fo:block/>
       <fo:inline font-family="monospace">ListExpr</fo:inline> must be an expression that evaluates to a
       list of terms.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-weight="bold">bit string generator</fo:inline> is written as:      <fo:block/>

         <fo:inline font-family="monospace">BitstringPattern &lt;= BitStringExpr</fo:inline>.      <fo:block/>
<fo:inline font-family="monospace">BitStringExpr</fo:inline> must be an expression that evaluates to a
       bitstring.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-weight="bold">filter</fo:inline> is an expression that evaluates to
      <fo:inline font-family="monospace">true</fo:inline> or <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The variables in the generator patterns, shadow variables in
      the function clause, surrounding the bit string comprehensions.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A bit string comprehension returns a bit string, which is 
      created by concatenating the results of evaluating <fo:inline font-family="monospace">BitString</fo:inline> 
      for each combination of bit string generator elements, for which all
      filters are true.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">&lt;&lt; &lt;&lt; (X*2) &gt;&gt; ||
&lt;&lt;X&gt;&gt; &lt;= &lt;&lt; 1,2,3 &gt;&gt; &gt;&gt;.</fo:inline>
&lt;&lt;2,4,6&gt;&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">More examples are provided in
    <fo:inline font-style="italic">
    Programming Examples.</fo:inline></fo:block>
  <fo:block id="idp5678592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.25 
      Guard Sequences</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">guard sequence</fo:inline> is a sequence of guards, separated
      by semicolon (;). The guard sequence is true if at least one of
      the guards is true. (The remaining guards, if any, are not
      evaluated.)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Guard1;...;GuardK</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">guard</fo:inline> is a sequence of guard expressions, separated
      by comma (,). The guard is true if all guard expressions
      evaluate to <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GuardExpr1,...,GuardExprN</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The set of valid <fo:inline font-weight="bold">guard expressions</fo:inline> (sometimes called
      guard tests) is a subset of the set of valid Erlang expressions.
      The reason for restricting the set of valid expressions is that
      evaluation of a guard expression must be guaranteed to be free
      of side effects. Valid guard expressions are the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The atom <fo:inline font-family="monospace">true</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Other constants (terms and bound variables), all regarded
       as false</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Calls to the BIFs specified in table <fo:inline font-family="monospace">Type Test BIFs</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Term comparisons</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Arithmetic expressions</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Boolean expressions</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Short-circuit expressions (<fo:inline font-family="monospace">andalso</fo:inline>/<fo:inline font-family="monospace">orelse</fo:inline>)</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_atom/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_binary/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_bitstring/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_boolean/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_float/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_function/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_function/2</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_integer/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_list/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_map/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_number/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_pid/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_port/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_record/2</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_record/3</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_reference/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_tuple/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        8.4:
         
        Type Test BIFs</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that most type test BIFs have older equivalents, without
      the <fo:inline font-family="monospace">is_</fo:inline> prefix. These old BIFs are retained for backwards
      compatibility only and are not to be used in new code. They are
      also only allowed at top level. For example, they are not allowed
      in Boolean expressions in guards.</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">abs(Number)</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">bit_size(Bitstring)</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">byte_size(Bitstring)</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">element(N, Tuple)</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">float(Term)</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">hd(List)</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">length(List)</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">map_size(Map)</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">node()</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">node(Pid|Ref|Port)</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">round(Number)</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">self()</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">size(Tuple|Bitstring)</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">tl(List)</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">trunc(Number)</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">tuple_size(Tuple)</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        8.5:
         
        Other BIFs Allowed in Guard Expressions</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an arithmetic expression, a Boolean expression, a
    short-circuit expression, or a call to a guard BIF fails (because
    of invalid arguments), the entire guard fails. If the guard was
    part of a guard sequence, the next guard in the sequence (that is,
    the guard following the next semicolon) is evaluated.</fo:block>

  <fo:block id="idp5746368" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.8.26 
      Operator Precedence</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Operator precedence in falling priority:</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">:</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"> </fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">#</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"> </fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Unary + - bnot not</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"> </fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">/ * div rem band and</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Left associative</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">+ - bor bxor bsl bsr or xor</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Left associative</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">++ --</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Right associative</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">== /= =&lt; &lt; &gt;= &gt; =:= =/=</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"> </fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">andalso</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"> </fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">orelse</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"> </fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">= !</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Right associative</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">catch</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"> </fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        8.6:
         
        Operator Precedence</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When evaluating an expression, the operator with the highest
      priority is evaluated first. Operators with the same priority
      are evaluated according to their associativity.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The left associative arithmetic operators are evaluated left to
      right:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
<fo:inline font-weight="bold">6 + 5 * 4 - 3 / 2</fo:inline> evaluates to
<fo:inline font-weight="bold">6 + 20 - 1.5</fo:inline> evaluates to
<fo:inline font-weight="bold">26 - 1.5</fo:inline> evaluates to
<fo:inline font-weight="bold">24.5</fo:inline></fo:block>
  <fo:block id="idp5783376" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">5.9  Preprocessor</fo:marker>5.9  Preprocessor</fo:block><fo:block id="idp5785872" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.9.1 
      File Inclusion</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A file can be included as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-include(File).
-include_lib(File).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">File</fo:inline>, a string, is to point out a file. The contents of
        this file are included as is, at the position of the directive.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Include files are typically used for record and macro
        definitions that are shared by several modules. It is
        recommended to use the file name extension <fo:inline font-family="monospace">.hrl</fo:inline> for
        include files.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">File</fo:inline> can start with a path component <fo:inline font-family="monospace">$VAR</fo:inline>, for
        some string <fo:inline font-family="monospace">VAR</fo:inline>. If that is the case, the value of
        the environment variable <fo:inline font-family="monospace">VAR</fo:inline> as returned by
        <fo:inline font-family="monospace">os:getenv(VAR)</fo:inline> is substituted for <fo:inline font-family="monospace">$VAR</fo:inline>. If
        <fo:inline font-family="monospace">os:getenv(VAR)</fo:inline> returns <fo:inline font-family="monospace">false</fo:inline>, <fo:inline font-family="monospace">$VAR</fo:inline> is left
        as is.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the filename <fo:inline font-family="monospace">File</fo:inline> is absolute (possibly after
        variable substitution), the include file with that name is
        included. Otherwise, the specified file is searched for
	in the following directories, and in this order:</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The current working directory</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The directory where the module is being compiled</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The directories given by the <fo:inline font-family="monospace">include</fo:inline> option</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see the
          <fo:inline font-style="italic">erlc(1)</fo:inline> manual page
           in ERTS and
           <fo:inline font-style="italic">compile(3)</fo:inline>
           manual page in Compiler.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-include("my_records.hrl").
-include("incdir/my_records.hrl").
-include("/home/user/proj/my_records.hrl").
-include("$PROJ_ROOT/my_records.hrl").</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">include_lib</fo:inline> is similar to <fo:inline font-family="monospace">include</fo:inline>, but is not to
        point out an absolute file. Instead, the first path component
        (possibly after variable substitution) is assumed to be
        the name of an application.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-include_lib("kernel/include/file.hrl").</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code server uses <fo:inline font-family="monospace">code:lib_dir(kernel)</fo:inline> to find
        the directory of the current (latest) version of Kernel, and
        then the subdirectory <fo:inline font-family="monospace">include</fo:inline> is searched for the file
        <fo:inline font-family="monospace">file.hrl</fo:inline>.</fo:block>
    <fo:block id="idp5805104" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.9.2 
      Defining and Using Macros</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A macro is defined as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-define(Const, Replacement).
-define(Func(Var1,...,VarN), Replacement).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A macro definition can be placed anywhere among the attributes
      and function declarations of a module, but the definition must
      come before any usage of the macro.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a macro is used in several modules, it is recommended that
      the macro definition is placed in an include file.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A macro is used as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
?Const
?Func(Arg1,...,ArgN)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Macros are expanded during compilation. A simple macro
      <fo:inline font-family="monospace">?Const</fo:inline> is replaced with <fo:inline font-family="monospace">Replacement</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-define(TIMEOUT, 200).
...
call(Request) -&gt;
    server:call(refserver, Request, ?TIMEOUT).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is expanded to:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
call(Request) -&gt;
    server:call(refserver, Request, 200).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A macro <fo:inline font-family="monospace">?Func(Arg1,...,ArgN)</fo:inline> is replaced with
      <fo:inline font-family="monospace">Replacement</fo:inline>, where all occurrences of a variable <fo:inline font-family="monospace">Var</fo:inline>
      from the macro definition are replaced with the corresponding
      argument <fo:inline font-family="monospace">Arg</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-define(MACRO1(X, Y), {a, X, b, Y}).
...
bar(X) -&gt;
    ?MACRO1(a, b),
    ?MACRO1(X, 123)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is expanded to:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
bar(X) -&gt;
    {a,a,b,b},
    {a,X,b,123}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is good programming practice, but not mandatory, to ensure
      that a macro definition is a valid Erlang syntactic form.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To view the result of macro expansion, a module can be compiled
      with the <fo:inline font-family="monospace">'P'</fo:inline> option. <fo:inline font-family="monospace">compile:file(File, ['P'])</fo:inline>.
      This produces a listing of the parsed code after preprocessing
      and parse transforms, in the file <fo:inline font-family="monospace">File.P</fo:inline>.</fo:block>
  <fo:block id="idp5821040" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.9.3 
      Predefined Macros</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following macros are predefined:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">?MODULE</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The name of the current module.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">?MODULE_STRING</fo:inline>.</fo:block>
      <fo:block-container><fo:block start-indent="2em">The name of the current module, as a string.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">?FILE</fo:inline>.</fo:block>
      <fo:block-container><fo:block start-indent="2em">The file name of the current module.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">?LINE</fo:inline>.</fo:block>
      <fo:block-container><fo:block start-indent="2em">The current line number.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">?MACHINE</fo:inline>.</fo:block>
      <fo:block-container><fo:block start-indent="2em">The machine name, <fo:inline font-family="monospace">'BEAM'</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">?FUNCTION_NAME</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The name of the current function.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">?FUNCTION_ARITY</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The arity (number of arguments) for the current function.</fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp5831248" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.9.4 
      Macros Overloading</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to overload macros, except for predefined
      macros. An overloaded macro has more than one definition,
      each with a different number of arguments.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The feature was added in Erlang 5.7.5/OTP R13B04.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A macro <fo:inline font-family="monospace">?Func(Arg1,...,ArgN)</fo:inline> with a (possibly empty)
      list of arguments results in an error message if there is at
      least one definition of <fo:inline font-family="monospace">Func</fo:inline> with arguments, but none
      with N arguments.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assuming these definitions:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-define(F0(), c).
-define(F1(A), A).
-define(C, m:f).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">the following does not work:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
f0() -&gt;
    ?F0. % No, an empty list of arguments expected.

f1(A) -&gt;
    ?F1(A, A). % No, exactly one argument expected.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On the other hand,</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
f() -&gt;
    ?C().</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">is expanded to</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
f() -&gt;
    m:f().</fo:block>
  <fo:block id="idp5839568" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.9.5 
      Flow Control in Macros</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following macro directives are supplied:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-undef(Macro).</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Causes the macro to behave as if it had never been defined.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-ifdef(Macro).</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Evaluate the following lines only if <fo:inline font-family="monospace">Macro</fo:inline> is
       defined.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-ifndef(Macro).</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Evaluate the following lines only if <fo:inline font-family="monospace">Macro</fo:inline> is not
       defined.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-else.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Only allowed after an <fo:inline font-family="monospace">ifdef</fo:inline> or <fo:inline font-family="monospace">ifndef</fo:inline>
       directive. If that condition is false, the lines following
      <fo:inline font-family="monospace">else</fo:inline> are evaluated instead.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-endif.</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Specifies the end of an <fo:inline font-family="monospace">ifdef</fo:inline> or <fo:inline font-family="monospace">ifndef</fo:inline>
       directive.</fo:block></fo:block-container>
    </fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The macro directives cannot be used inside functions.</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(m).
...

-ifdef(debug).
-define(LOG(X), io:format("{~p,~p}: ~p~n", [?MODULE,?LINE,X])).
-else.
-define(LOG(X), true).
-endif.

...</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When trace output is desired, <fo:inline font-family="monospace">debug</fo:inline> is to be defined
      when the module <fo:inline font-family="monospace">m</fo:inline> is compiled:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erlc -Ddebug m.erl</fo:inline>

or

1&gt; <fo:inline font-weight="bold">c(m, {d, debug}).</fo:inline>
{ok,m}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">?LOG(Arg)</fo:inline> is then expanded to a call to <fo:inline font-family="monospace">io:format/2</fo:inline>
      and provide the user with some simple trace output.</fo:block>
  <fo:block id="idp5856144" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.9.6 
      -error() and -warning() directives</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The directive <fo:inline font-family="monospace">-error(Term)</fo:inline> causes a compilation error.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(t).
-export([version/0]).

-ifdef(VERSION).
version() -&gt; ?VERSION.
-else.
-error("Macro VERSION must be defined.").
version() -&gt; "".
-endif.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The error message will look like this:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erlc t.erl</fo:inline>
t.erl:7: -error("Macro VERSION must be defined.").</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The directive <fo:inline font-family="monospace">-warning(Term)</fo:inline> causes a compilation warning.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(t).
-export([version/0]).

-ifndef(VERSION).
-warning("Macro VERSION not defined -- using default version.").
-define(VERSION, "0").
-endif.
version() -&gt; ?VERSION.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The warning message will look like this:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erlc t.erl</fo:inline>
t.erl:5: Warning: -warning("Macro VERSION not defined -- using default version.").</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">-error()</fo:inline> and <fo:inline font-family="monospace">-warning()</fo:inline> directives were added
  in OTP 19.</fo:block>

  <fo:block id="idp5865952" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.9.7 
      Stringifying Macro Arguments</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The construction <fo:inline font-family="monospace">??Arg</fo:inline>, where <fo:inline font-family="monospace">Arg</fo:inline> is a macro
      argument, is expanded to a string containing the tokens of
      the argument. This is similar to the <fo:inline font-family="monospace">#arg</fo:inline> stringifying
      construction in C.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-define(TESTCALL(Call), io:format("Call ~s: ~w~n", [??Call, Call])).

?TESTCALL(myfunction(1,2)),
?TESTCALL(you:function(2,1)).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">results in</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
io:format("Call ~s: ~w~n",["myfunction ( 1 , 2 )",myfunction(1,2)]),
io:format("Call ~s: ~w~n",["you : function ( 2 , 1 )",you:function(2,1)]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">That is, a trace output, with both the function called and
      the resulting value.</fo:block>
  <fo:block id="idp5875920" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">5.10  Records</fo:marker>5.10  Records</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A record is a data structure for storing a fixed number of
    elements. It has named fields and is similar to a struct in C.
    Record expressions are translated to tuple expressions during
    compilation. Therefore, record expressions are not understood by
    the shell unless special actions are taken. For details, see the
    <fo:inline font-style="italic">shell(3)</fo:inline>
    manual page in STDLIB.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">More examples are provided in
    <fo:inline font-style="italic">
    Programming Examples</fo:inline>.</fo:block><fo:block id="idp5881136" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.10.1 
      Defining Records</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A record definition consists of the name of the record,
      followed by the field names of the record. Record and field names
      must be atoms. Each field can be given an optional default value.
      If no default value is supplied, <fo:inline font-family="monospace">undefined</fo:inline> is used.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record(Name, {Field1 [= Value1],
               ...
               FieldN [= ValueN]}).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A record definition can be placed anywhere among the attributes
      and function declarations of a module, but the definition must
      come before any usage of the record.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a record is used in several modules, it is recommended that
      the record definition is placed in an include file.</fo:block>
  <fo:block id="idp5884848" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.10.2 
      Creating Records</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following expression creates a new <fo:inline font-family="monospace">Name</fo:inline> record where
      the value of each field <fo:inline font-family="monospace">FieldI</fo:inline> is the value of evaluating
      the corresponding expression <fo:inline font-family="monospace">ExprI</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#Name{Field1=Expr1,...,FieldK=ExprK}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The fields can be in any order, not necessarily the same order as
      in the record definition, and fields can be omitted. Omitted
      fields get their respective default value instead.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If several fields are to be assigned the same value,
      the following construction can be used:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#Name{Field1=Expr1,...,FieldK=ExprK, _=ExprL}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Omitted fields then get the value of evaluating <fo:inline font-family="monospace">ExprL</fo:inline>
    instead of their default values. This feature is primarily
    intended to be used to create patterns for ETS and Mnesia match
    functions.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record(person, {name, phone, address}).

...

lookup(Name, Tab) -&gt;
    ets:match_object(Tab, #person{name=Name, _='_'}).</fo:block>
  <fo:block id="idp5891920" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.10.3 
      Accessing Record Fields</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Expr#Name.Field</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value of the specified field. <fo:inline font-family="monospace">Expr</fo:inline> is to
      evaluate to a <fo:inline font-family="monospace">Name</fo:inline> record.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following expression returns the position of the specified
      field in the tuple representation of the record:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#Name.Field</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record(person, {name, phone, address}).

...

lookup(Name, List) -&gt;
    lists:keysearch(Name, #person.name, List).</fo:block>
  <fo:block id="idp5896768" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.10.4 
      Updating Records</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Expr#Name{Field1=Expr1,...,FieldK=ExprK}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Expr</fo:inline> is to evaluate to a <fo:inline font-family="monospace">Name</fo:inline> record. A
      copy of this record is returned, with the value of each specified field
      <fo:inline font-family="monospace">FieldI</fo:inline> changed to the value of evaluating the corresponding
      expression <fo:inline font-family="monospace">ExprI</fo:inline>. All other fields retain their old
      values.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
  <fo:block id="idp5900672" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.10.5 
      Records in Guards</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since record expressions are expanded to tuple expressions,
      creating records and accessing record fields are allowed in
      guards. However all subexpressions, for example, for field
      initiations, must be valid guard expressions as well.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
handle(Msg, State) when Msg==#msg{to=void, no=3} -&gt;
    ...

handle(Msg, State) when State#state.running==true -&gt;
    ...</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is also a type test BIF <fo:inline font-family="monospace">is_record(Term, RecordTag)</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
is_person(P) when is_record(P, person) -&gt;
    true;
is_person(_P) -&gt;
    false.</fo:block>
  <fo:block id="idp5905680" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.10.6 
      Records in Patterns</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A pattern that matches a certain record is created in the same
      way as a record is created:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#Name{Field1=Expr1,...,FieldK=ExprK}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case, one or more of <fo:inline font-family="monospace">Expr1</fo:inline>...<fo:inline font-family="monospace">ExprK</fo:inline> can be
      unbound variables.</fo:block>
  <fo:block id="idp5908944" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.10.7 
      Nested Records</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Beginning with Erlang/OTP R14, parentheses when accessing or updating nested
      records can be omitted. Assume the following record
      definitions:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record(nrec0, {name = "nested0"}).
-record(nrec1, {name = "nested1", nrec0=#nrec0{}}).
-record(nrec2, {name = "nested2", nrec1=#nrec1{}}).

N2 = #nrec2{},
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before R14, parentheses were needed as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
"nested0" = ((N2#nrec2.nrec1)#nrec1.nrec0)#nrec0.name,
N0n = ((N2#nrec2.nrec1)#nrec1.nrec0)#nrec0{name = "nested0a"},
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since R14, the following can also be written:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
"nested0" = N2#nrec2.nrec1#nrec1.nrec0#nrec0.name,
N0n = N2#nrec2.nrec1#nrec1.nrec0#nrec0{name = "nested0a"},</fo:block>
  <fo:block id="idp5913088" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.10.8 
      Internal Representation of Records</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Record expressions are translated to tuple expressions during
      compilation. A record defined as:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record(Name, {Field1,...,FieldN}).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">is internally represented by the tuple:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{Name,Value1,...,ValueN}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here each <fo:inline font-family="monospace">ValueI</fo:inline> is the default value for <fo:inline font-family="monospace">FieldI</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To each module using records, a pseudo function is added
      during compilation to obtain information about records:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
record_info(fields, Record) -&gt; [Field]
record_info(size, Record) -&gt; Size</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Size</fo:inline> is the size of the tuple representation, that is,
      one more than the number of fields.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In addition, <fo:inline font-family="monospace">#Record.Name</fo:inline> returns the index in the tuple
      representation of <fo:inline font-family="monospace">Name</fo:inline> of the record <fo:inline font-family="monospace">Record</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Name</fo:inline> must be an atom.</fo:block>
  <fo:block id="idp5925648" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">5.11  Errors and Error Handling</fo:marker>5.11  Errors and Error Handling</fo:block><fo:block id="idp5928160" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.11.1 
      Terminology</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Errors can roughly be divided into four different types:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Compile-time errors</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Logical errors</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Run-time errors</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Generated errors</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A compile-time error, for example a syntax error, does not
      cause much trouble as it is caught by the compiler.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A logical error is when a program does not behave as intended,
      but does not crash. An example is that nothing happens when
      a button in a graphical user interface is clicked.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A run-time error is when a crash occurs. An example is
      when an operator is applied to arguments of the wrong type.
      The Erlang programming language has built-in features for
      handling of run-time errors.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A run-time error can also be emulated by calling
      <fo:inline font-family="monospace">erlang:error(Reason)</fo:inline> or <fo:inline font-family="monospace">erlang:error(Reason, Args)</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A run-time error is another name for an exception
      of class <fo:inline font-family="monospace">error</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A generated error is when the code itself calls
      <fo:inline font-family="monospace">exit/1</fo:inline> or <fo:inline font-family="monospace">throw/1</fo:inline>. Notice that emulated run-time
      errors are not denoted as generated errors here.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generated errors are exceptions of classes <fo:inline font-family="monospace">exit</fo:inline> and
      <fo:inline font-family="monospace">throw</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a run-time error or generated error occurs in Erlang, 
      execution for the process that evaluated
      the erroneous expression is stopped.
      This is referred to as a <fo:inline font-weight="bold">failure</fo:inline>, that execution or
      evaluation <fo:inline font-weight="bold">fails</fo:inline>, or that the process <fo:inline font-weight="bold">fails</fo:inline>,
      <fo:inline font-weight="bold">terminates</fo:inline>, or <fo:inline font-weight="bold">exits</fo:inline>. Notice that a process can
      terminate/exit for other reasons than a failure.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process that terminates emits an <fo:inline font-weight="bold">exit signal</fo:inline> with
      an <fo:inline font-weight="bold">exit reason</fo:inline> that says something about which error
      has occurred. Normally, some information about the error is
      printed to the terminal.</fo:block>
  <fo:block id="idp5943456" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.11.2 
      Exceptions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Exceptions are run-time errors or generated errors and 
      are of three different classes, with different origins. The
      <fo:inline font-style="italic">try</fo:inline> expression 
      can distinguish between the different classes, whereas the
      <fo:inline font-style="italic">catch</fo:inline>
      expression cannot. They are described in
      <fo:inline font-style="italic">Expressions
      </fo:inline>.</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Class</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Origin</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">error</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Run-time error,
        for example, <fo:inline font-family="monospace">1+a</fo:inline>, or the process called
        <fo:inline font-family="monospace">erlang:error/1,2</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">exit</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">The process called <fo:inline font-family="monospace">exit/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">throw</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">The process called <fo:inline font-family="monospace">throw/1</fo:inline></fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.1:
         
        Exception Classes.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An exception consists of its class, an exit reason
      (see <fo:inline font-style="italic">Exit Reason</fo:inline>),
      and a stack trace (which aids in finding the code location of
      the exception).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The stack trace can be retrieved using
      <fo:inline font-family="monospace">erlang:get_stacktrace/0</fo:inline>
      from within a <fo:inline font-family="monospace">try</fo:inline> expression, and is returned for 
      exceptions of class <fo:inline font-family="monospace">error</fo:inline> from a <fo:inline font-family="monospace">catch</fo:inline> expression.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An exception of class <fo:inline font-family="monospace">error</fo:inline> is also known as a run-time 
      error.</fo:block>
  <fo:block id="idp5964592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.11.3 
      Handling of Run-time Errors in Erlang</fo:block>
    

    <fo:block id="idp5965344" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Error Handling Within Processes</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to prevent run-time errors and other
        exceptions from causing
        the process to terminate by using <fo:inline font-family="monospace">catch</fo:inline> or
        <fo:inline font-family="monospace">try</fo:inline>, see <fo:inline font-style="italic">
        Expressions</fo:inline> about
        <fo:inline font-style="italic">catch</fo:inline>
        and <fo:inline font-style="italic">try</fo:inline>.</fo:block>
    

    <fo:block id="idp5969872" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Error Handling Between Processes</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Processes can monitor other processes and detect process
        terminations, see
        <fo:inline font-style="italic">Processes</fo:inline>.</fo:block>
    
  <fo:block id="idp5972752" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.11.4 
      Exit Reasons</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a run-time error occurs,
      that is an exception of class <fo:inline font-family="monospace">error</fo:inline>.
      The exit reason is a tuple <fo:inline font-family="monospace">{Reason,Stack}</fo:inline>, where
      <fo:inline font-family="monospace">Reason</fo:inline> is a term indicating the type of error:</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Reason</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Type of Error</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">badarg</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Bad argument. The argument is of wrong data type, or is otherwise badly formed.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">badarith</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Bad argument in an arithmetic expression.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">{badmatch,V}</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Evaluation of a match expression failed. The value <fo:inline font-family="monospace">V</fo:inline> did not match.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">function_clause</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">No matching function clause is found when evaluating a function call.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">{case_clause,V}</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">No matching branch is found when evaluating a <fo:inline font-family="monospace">case</fo:inline> expression. The value <fo:inline font-family="monospace">V</fo:inline> did not match.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">if_clause</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">No true branch is found when evaluating an <fo:inline font-family="monospace">if</fo:inline> expression.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">{try_clause,V}</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">No matching branch is found when evaluating the of-section of a <fo:inline font-family="monospace">try</fo:inline> expression. The value <fo:inline font-family="monospace">V</fo:inline> did not match.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">undef</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">The function cannot be found when evaluating a function call.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">{badfun,F}</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Something is wrong with a fun <fo:inline font-family="monospace">F</fo:inline>.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">{badarity,F}</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">A fun is applied to the wrong number of arguments. <fo:inline font-family="monospace">F</fo:inline> describes the fun and the arguments.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">timeout_value</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">The timeout value in a <fo:inline font-family="monospace">receive..after</fo:inline> expression is evaluated to something else than an integer or <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">noproc</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Trying to link to a non-existing process.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">{nocatch,V}</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Trying to evaluate a <fo:inline font-family="monospace">throw </fo:inline>outside a <fo:inline font-family="monospace">catch</fo:inline>. <fo:inline font-family="monospace">V</fo:inline> is the thrown term.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">system_limit</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">A system limit has been reached.
        See <fo:inline font-style="italic">
        Efficiency Guide</fo:inline> for information about system limits.
        </fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.2:
         
        Exit Reasons</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Stack</fo:inline> is the stack of function calls being evaluated
      when the error occurred, given as a list of tuples
      <fo:inline font-family="monospace">{Module,Name,Arity}</fo:inline> with the most recent function call
      first. The most recent function call tuple can in some
      cases be <fo:inline font-family="monospace">{Module,Name,[Arg]}</fo:inline>.</fo:block>
  <fo:block id="idp6028096" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">5.12  Processes</fo:marker>5.12  Processes</fo:block><fo:block id="idp6030592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.12.1 
      Processes</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang is designed for massive concurrency. Erlang processes are
      lightweight (grow and shrink dynamically) with small memory
      footprint, fast to create and terminate, and the scheduling
      overhead is low.</fo:block>
  <fo:block id="idp6032144" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.12.2 
      Process Creation</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process is created by calling <fo:inline font-family="monospace">spawn</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
spawn(Module, Name, Args) -&gt; pid()
  Module = Name = atom()
  Args = [Arg1,...,ArgN]
    ArgI = term()</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">spawn</fo:inline> creates a new process and returns the pid.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The new process starts executing in
      <fo:inline font-family="monospace">Module:Name(Arg1,...,ArgN)</fo:inline> where the arguments are
      the elements of the (possible empty) <fo:inline font-family="monospace">Args</fo:inline> argument list.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There exist a number of other <fo:inline font-family="monospace">spawn</fo:inline> BIFs, for example,
      <fo:inline font-family="monospace">spawn/4</fo:inline> for spawning a process at another node.</fo:block>
  <fo:block id="idp6038096" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.12.3 
      Registered Processes</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Besides addressing a process by using its pid, there are also
      BIFs for registering a process under a name. The name must be an
      atom and is automatically unregistered if the process terminates:</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">BIF</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Description</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">register(Name, Pid)</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Associates the name <fo:inline font-family="monospace">Name</fo:inline>, an atom, with the process <fo:inline font-family="monospace">Pid</fo:inline>.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">registered()</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Returns a list of names that
        have been registered using <fo:inline font-family="monospace">register/2</fo:inline>.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">whereis(Name)</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Returns the pid registered
        under <fo:inline font-family="monospace">Name</fo:inline>, or <fo:inline font-family="monospace">undefined </fo:inline>if the name is not
        registered.</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        12.1:
         
        Name Registration BIFs</fo:block>
  <fo:block id="idp6054080" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.12.4 
      Process Termination</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a process terminates, it always terminates with an
      <fo:inline font-weight="bold">exit reason</fo:inline>. The reason can be any term.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process is said to terminate <fo:inline font-weight="bold">normally</fo:inline>, if the exit
      reason is the atom <fo:inline font-family="monospace">normal</fo:inline>. A process with no more code to
      execute terminates normally.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process terminates with an exit reason <fo:inline font-family="monospace">{Reason,Stack}</fo:inline>
      when a run-time error occurs. See
      <fo:inline font-style="italic">Exit Reasons</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process can terminate itself by calling one of the
       following BIFs:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">exit(Reason)</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">erlang:error(Reason)</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">erlang:error(Reason, Args)</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process then terminates with reason <fo:inline font-family="monospace">Reason</fo:inline> for
      <fo:inline font-family="monospace">exit/1</fo:inline> or <fo:inline font-family="monospace">{Reason,Stack}</fo:inline> for the others.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process can also be terminated if it receives an exit signal
      with another exit reason than <fo:inline font-family="monospace">normal</fo:inline>, see
      <fo:inline font-style="italic">Error Handling</fo:inline>.</fo:block>
  <fo:block id="idp6065536" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.12.5 
      Message Sending</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Processes communicate by sending and receiving messages.
      Messages are sent by using
      the <fo:inline font-style="italic">send operator !</fo:inline>
      and received by calling
      <fo:inline font-style="italic">receive</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Message sending is asynchronous and safe, the message is
      guaranteed to eventually reach the recipient, provided that
      the recipient exists.</fo:block>
  <fo:block id="idp6068992" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.12.6 
      Links</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two processes can be <fo:inline font-weight="bold">linked</fo:inline> to each other. A link
      between two processes <fo:inline font-family="monospace">Pid1</fo:inline> and <fo:inline font-family="monospace">Pid2</fo:inline> is created
      by <fo:inline font-family="monospace">Pid1</fo:inline> calling the BIF <fo:inline font-family="monospace">link(Pid2)</fo:inline> (or conversely).
      There also exist a number of <fo:inline font-family="monospace">spawn_link</fo:inline> BIFs, which spawn
      and link to a process in one operation.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Links are bidirectional and there can only be one link between
      two processes. Repeated calls to <fo:inline font-family="monospace">link(Pid)</fo:inline> have no effect.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A link can be removed by calling the BIF <fo:inline font-family="monospace">unlink(Pid)</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Links are used to monitor the behaviour of other processes, see
      <fo:inline font-style="italic">Error Handling</fo:inline>.</fo:block>
  <fo:block id="idp6076816" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.12.7 
      Error Handling</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang has a built-in feature for error handling between
      processes. Terminating processes emit exit signals to all
      linked processes, which can terminate as well or handle the exit
      in some way. This feature can be used to build hierarchical
      program structures where some processes are supervising other
      processes, for example, restarting them if they terminate
      abnormally.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">
      OTP Design Principles</fo:inline> for more information about
      OTP supervision trees, which use this feature.</fo:block>

    <fo:block id="idp6079664" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Emitting Exit Signals</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a process terminates, it terminates with an
        <fo:inline font-weight="bold">exit reason</fo:inline> as explained in <fo:inline font-style="italic">
        Process Termination</fo:inline>. This exit reason is emitted in
        an <fo:inline font-weight="bold">exit signal</fo:inline> to all linked processes.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process can also call the function <fo:inline font-family="monospace">exit(Pid,Reason)</fo:inline>.
        This results in an exit signal with exit reason
        <fo:inline font-family="monospace">Reason</fo:inline> being emitted to <fo:inline font-family="monospace">Pid</fo:inline>, but does not affect
        the calling process.</fo:block>
    

    <fo:block id="idp6084624" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Receiving Exit Signals</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default behaviour when a process receives an exit signal
        with an exit reason other than <fo:inline font-family="monospace">normal</fo:inline>, is to terminate
        and in turn emit exit signals with the same exit reason to its
        linked processes. An exit signal with reason <fo:inline font-family="monospace">normal</fo:inline> is
        ignored.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process can be set to trap exit signals by calling:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
process_flag(trap_exit, true)</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a process is trapping exits, it does not terminate when
        an exit signal is received. Instead, the signal is transformed
        into a message <fo:inline font-family="monospace">{'EXIT',FromPid,Reason}</fo:inline>, which is put into
        the mailbox of the process, just like a regular message.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An exception to the above is if the exit reason is <fo:inline font-family="monospace">kill</fo:inline>,
        that is if <fo:inline font-family="monospace">exit(Pid,kill)</fo:inline> has been called. This
        unconditionally terminates the process, regardless of if it is
        trapping exit signals.</fo:block>
    
  <fo:block id="idp6090768" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.12.8 
      Monitors</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An alternative to links are <fo:inline font-weight="bold">monitors</fo:inline>. A process
      <fo:inline font-family="monospace">Pid1</fo:inline> can create a monitor for <fo:inline font-family="monospace">Pid2</fo:inline> by calling
      the BIF <fo:inline font-family="monospace">erlang:monitor(process, Pid2)</fo:inline>. The function returns
      a reference <fo:inline font-family="monospace">Ref</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Pid2</fo:inline> terminates with exit reason <fo:inline font-family="monospace">Reason</fo:inline>, a
      'DOWN' message is sent to <fo:inline font-family="monospace">Pid1</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{'DOWN', Ref, process, Pid2, Reason}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Pid2</fo:inline> does not exist, the 'DOWN' message is sent
      immediately with <fo:inline font-family="monospace">Reason</fo:inline> set to <fo:inline font-family="monospace">noproc</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Monitors are unidirectional. Repeated calls to
      <fo:inline font-family="monospace">erlang:monitor(process, Pid)</fo:inline> creates several
      independent monitors, and each one sends a 'DOWN' message when
      <fo:inline font-family="monospace">Pid</fo:inline> terminates.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A monitor can be removed by calling
      <fo:inline font-family="monospace">erlang:demonitor(Ref)</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Monitors can be created for processes with registered
      names, also at other nodes.</fo:block>
  <fo:block id="idp6101760" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.12.9 
      Process Dictionary</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each process has its own process dictionary, accessed by calling
      the following BIFs:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
put(Key, Value)
get(Key)
get()
get_keys(Value)
erase(Key)
erase()</fo:block>
  <fo:block id="idp6107600" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">5.13  Distributed Erlang</fo:marker>5.13  Distributed Erlang</fo:block><fo:block id="idp6110096" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.13.1 
      Distributed Erlang System</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">distributed Erlang system</fo:inline> consists of a number of
      Erlang runtime systems communicating with each other. Each such
      runtime system is called a <fo:inline font-weight="bold">node</fo:inline>. Message passing between
      processes at different nodes, as well as links and monitors, are
      transparent when pids are used. Registered names, however, are
      local to each node. This means that the node must be specified as well
      when sending messages, and so on, using registered names.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The distribution mechanism is implemented using TCP/IP sockets.
      How to implement an alternative carrier is described in the
      <fo:inline font-style="italic">ERTS User's Guide</fo:inline>.</fo:block>
    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
        Starting a distributed node without also specifying
        <fo:inline font-style="italic"><fo:inline font-family="monospace">-proto_dist inet_tls</fo:inline></fo:inline>
        will expose the node to attacks that may give the attacker
        complete access to the node and in extension the cluster.
        When using un-secure distributed nodes, make sure that the
        network is configured to keep potential attackers out.
        See the <fo:inline font-style="italic">
        Using SSL for Erlang Distribution</fo:inline> User's Guide
        for details on how to setup a secure distributed node.
      </fo:block>
    </fo:block>
  <fo:block id="idp6116944" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.13.2 
      Nodes</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">node</fo:inline> is an executing Erlang runtime system that has
      been given a name, using the command-line flag <fo:inline font-family="monospace">-name</fo:inline>
      (long names) or <fo:inline font-family="monospace">-sname</fo:inline> (short names).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The format of the node name is an atom <fo:inline font-family="monospace">name@host</fo:inline>.
      <fo:inline font-family="monospace">name</fo:inline> is the name given by the user. <fo:inline font-family="monospace">host</fo:inline> is
      the full host name if long names are used, or the first part of
      the host name if short names are used. <fo:inline font-family="monospace">node()</fo:inline> returns
      the name of the node.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -name dilbert</fo:inline>
(dilbert@uab.ericsson.se)1&gt; <fo:inline font-weight="bold">node().</fo:inline>
'dilbert@uab.ericsson.se'

% <fo:inline font-weight="bold">erl -sname dilbert</fo:inline>
(dilbert@uab)1&gt; <fo:inline font-weight="bold">node().</fo:inline>
dilbert@uab</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A node with a long node name cannot communicate with a node
        with a short node name.</fo:block>
    </fo:block>
  <fo:block id="idp6125920" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.13.3 
      Node Connections</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The nodes in a distributed Erlang system are loosely connected.
      The first time the name of another node is used, for example, if
      <fo:inline font-family="monospace">spawn(Node,M,F,A)</fo:inline> or <fo:inline font-family="monospace">net_adm:ping(Node)</fo:inline> is called,
      a connection attempt to that node is made.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Connections are by default transitive. If a node A connects to
      node B, and node B has a connection to node C, then node A
      also tries to connect to node C. This feature can be turned off by
      using the command-line flag <fo:inline font-family="monospace">-connect_all false</fo:inline>, see the
      <fo:inline font-style="italic">erl(1)</fo:inline> manual page in ERTS.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a node goes down, all connections to that node are removed.
      Calling <fo:inline font-family="monospace">erlang:disconnect_node(Node)</fo:inline> forces disconnection
      of a node.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The list of (visible) nodes currently connected to is returned by
      <fo:inline font-family="monospace">nodes()</fo:inline>.</fo:block>
  <fo:block id="idp6132128" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.13.4 
      epmd</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang Port Mapper Daemon <fo:inline font-weight="bold">epmd</fo:inline> is automatically
      started at every host where an Erlang node is started. It is
      responsible for mapping the symbolic node names to machine
      addresses. See the
      <fo:inline font-style="italic">epmd(1)</fo:inline> manual page in ERTS.</fo:block>
  <fo:block id="idp6134816" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.13.5 
      Hidden Nodes</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a distributed Erlang system, it is sometimes useful to
      connect to a node without also connecting to all other nodes.
      An example is some kind of O&amp;M functionality used to
      inspect the status of a system, without disturbing it. For this
      purpose, a <fo:inline font-weight="bold">hidden node</fo:inline> can be used.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A hidden node is a node started with the command-line flag
      <fo:inline font-family="monospace">-hidden</fo:inline>. Connections between hidden nodes and other nodes
      are not transitive, they must be set up explicitly. Also, hidden
      nodes does not show up in the list of nodes returned by
      <fo:inline font-family="monospace">nodes()</fo:inline>. Instead, <fo:inline font-family="monospace">nodes(hidden)</fo:inline> or
      <fo:inline font-family="monospace">nodes(connected)</fo:inline> must be used. This means, for example,
      that the hidden node is not added to the set of nodes that
      <fo:inline font-family="monospace">global</fo:inline> is keeping track of.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This feature was added in Erlang 5.0/OTP R7.</fo:block>
  <fo:block id="idp6140352" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.13.6 
      C Nodes</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">C node</fo:inline> is a C program written to act as a hidden node
      in a distributed Erlang system. The library <fo:inline font-weight="bold">Erl_Interface</fo:inline>
      contains functions for this purpose. For more information about
      C nodes, see the <fo:inline font-style="italic">
      Erl_Interface</fo:inline> application and
      <fo:inline font-style="italic">
      Interoperability Tutorial.</fo:inline>.</fo:block>
  <fo:block id="idp6144256" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.13.7 
      Security</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Authentication determines which nodes are allowed to communicate
      with each other. In a network of different Erlang nodes, it is
      built into the system at the lowest possible level. Each node has
      its own <fo:inline font-weight="bold">magic cookie</fo:inline>, which is an Erlang atom.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a node tries to connect to another node, the magic cookies
      are compared. If they do not match, the connected node rejects
      the connection.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At start-up, a node has a random atom assigned as its magic
      cookie and the cookie of other nodes is assumed to be
      <fo:inline font-family="monospace">nocookie</fo:inline>. The first action of the Erlang network
      authentication server (<fo:inline font-family="monospace">auth</fo:inline>) is then to read a file named
      <fo:inline font-family="monospace">$HOME/.erlang.cookie</fo:inline>. If the file does not exist, it is
      created. The UNIX permissions mode of the file is set to octal
      400 (read-only by user) and its contents are a random string. An
      atom <fo:inline font-family="monospace">Cookie</fo:inline> is created from the contents of the file and
      the cookie of the local node is set to this using
      <fo:inline font-family="monospace">erlang:set_cookie(node(), Cookie)</fo:inline>. This also makes
      the local node assume that all other nodes have the same cookie
      <fo:inline font-family="monospace">Cookie</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, groups of users with identical cookie files get Erlang
      nodes that can communicate freely and without interference from
      the magic cookie system. Users who want to run nodes on separate
      file systems must make certain that their cookie files are
      identical on the different file systems.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a node <fo:inline font-family="monospace">Node1</fo:inline> with magic cookie <fo:inline font-family="monospace">Cookie</fo:inline> to be
      able to connect to, or accept a connection from, another node
      <fo:inline font-family="monospace">Node2</fo:inline> with a different cookie <fo:inline font-family="monospace">DiffCookie</fo:inline>,
      the function <fo:inline font-family="monospace">erlang:set_cookie(Node2, DiffCookie)</fo:inline> must
      first be called at <fo:inline font-family="monospace">Node1</fo:inline>. Distributed systems with
      multiple user IDs can be handled in this way.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default when a connection is established between two nodes,
      is to immediately connect all other visible nodes as well. This
      way, there is always a fully connected network. If there are
      nodes with different cookies, this method can be inappropriate
      and the command-line flag <fo:inline font-family="monospace">-connect_all false</fo:inline> must be set,
      see the <fo:inline font-style="italic">erl(1)</fo:inline>
      manual page in ERTS.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The magic cookie of the local node is retrieved by calling
      <fo:inline font-family="monospace">erlang:get_cookie()</fo:inline>.</fo:block>
  <fo:block id="idp6157488" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.13.8 
      Distribution BIFs</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some useful BIFs for distributed programming
      (for more information, see the <fo:inline font-style="italic">
      erlang(3)</fo:inline> manual page in ERTS:</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">BIF</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Description</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">erlang:disconnect_node(Node)</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Forces the disconnection of a node.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">erlang:get_cookie()</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Returns the magic cookie of the current node.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">is_alive()</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Returns <fo:inline font-family="monospace">true</fo:inline> if the runtime system is a node and can connect to other nodes, <fo:inline font-family="monospace">false</fo:inline> otherwise.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">monitor_node(Node, true|false)</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Monitors the status of
        <fo:inline font-family="monospace">Node</fo:inline>. A message<fo:inline font-family="monospace">{nodedown, Node}</fo:inline> is received
        if the connection to it is lost.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">node()</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Returns the name of the current node. Allowed in guards.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">node(Arg)</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Returns the node where <fo:inline font-family="monospace">Arg</fo:inline>, a pid, reference, or port, is located.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">nodes()</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Returns a list of all visible nodes this node is connected to.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">nodes(Arg)</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Depending on <fo:inline font-family="monospace">Arg</fo:inline>,
        this function can return a list not only of visible nodes,
        but also hidden nodes and previously known nodes, and so on.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">erlang:set_cookie(Node, Cookie)</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Sets the magic cookie used
        when connecting to <fo:inline font-family="monospace">Node</fo:inline>. If <fo:inline font-family="monospace">Node</fo:inline> is the
        current node, <fo:inline font-family="monospace">Cookie</fo:inline> is used when connecting to
        all new nodes.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">spawn[_link|_opt](Node, Fun)</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Creates a process at a remote node.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">spawn[_link|opt](Node, Module, FunctionName, Args)</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Creates a process at a remote node.</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        13.1:
         
        Distribution BIFs</fo:block>
  <fo:block id="idp6196272" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.13.9 
      Distribution Command-Line Flags</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples of command-line flags used for distributed programming
      (for more information, see the <fo:inline font-style="italic">erl(1)
      </fo:inline> manual page in ERTS:</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Command-Line Flag</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Description</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">-connect_all false</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Only explicit connection
        set-ups are used.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">-hidden</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Makes a node into a hidden node.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">-name Name</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Makes a runtime system into a node, using long node names.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">-setcookie Cookie</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Same as calling <fo:inline font-family="monospace">erlang:set_cookie(node(), Cookie)</fo:inline>.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">-sname Name</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Makes a runtime system into a node, using short node names.</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        13.2:
         
        Distribution Command-Line Flags</fo:block>
  <fo:block id="idp6215712" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.13.10 
      Distribution Modules</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples of modules useful for distributed programming:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the Kernel application:</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Module</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Description</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">global</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">A global name registration facility.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">global_group</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Grouping nodes to global name registration groups.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">net_adm</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Various Erlang net administration routines.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">net_kernel</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Erlang networking kernel.</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        13.3:
         
        Kernel Modules Useful For Distribution.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the STDLIB application:</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Module</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Description</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">slave</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Start and control of slave nodes.</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        13.4:
         
        STDLIB Modules Useful For Distribution.</fo:block>
  <fo:block id="idp6242592" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">5.14  Compilation and Code Loading</fo:marker>5.14  Compilation and Code Loading</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">How code is compiled and loaded is not a language issue, but
    is system-dependent. This section describes compilation and
    code loading in Erlang/OTP with references to relevant parts of
    the documentation.</fo:block><fo:block id="idp6245744" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.14.1 
      Compilation</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang programs must be <fo:inline font-weight="bold">compiled</fo:inline> to object code.
      The compiler can generate a new file that contains the object
      code. The current abstract machine, which runs the object code, is
      called BEAM, therefore the object files get the suffix
      <fo:inline font-family="monospace">.beam</fo:inline>. The compiler can also generate a binary which can
      be loaded directly.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler is located in the module <fo:inline font-family="monospace">compile</fo:inline> (see the
      <fo:inline font-style="italic">compile(3)</fo:inline> manual page in
      Compiler).</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
compile:file(Module)
compile:file(Module, Options)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang shell understands the command <fo:inline font-family="monospace">c(Module)</fo:inline> which
      both compiles and loads <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is also a module <fo:inline font-family="monospace">make</fo:inline>, which provides a set of
      functions similar to the UNIX type Make functions, see the
      <fo:inline font-style="italic">make(3)</fo:inline>
      manual page in Tools.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler can also be accessed from the OS prompt, see the
      <fo:inline font-style="italic">erl(1)</fo:inline> manual page in ERTS.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% erl -compile <fo:inline font-weight="bold">Module1</fo:inline>...<fo:inline font-weight="bold">ModuleN</fo:inline>
% erl -make</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">erlc</fo:inline> program provides an even better way to compile
      modules from the shell, see the
      <fo:inline font-style="italic">erlc(1)</fo:inline> manual page in ERTS.
      It understands a
      number of flags that can be used to define macros, add search
      paths for include files, and more.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% erlc <fo:inline font-weight="bold">&lt;flags&gt;</fo:inline> <fo:inline font-weight="bold">File1.erl</fo:inline>...<fo:inline font-weight="bold">FileN.erl</fo:inline></fo:block>
  <fo:block id="idp6260096" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.14.2 
      Code Loading</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The object code must be <fo:inline font-weight="bold">loaded</fo:inline> into the Erlang runtime
      system. This is handled by the <fo:inline font-weight="bold">code server</fo:inline>, see the
      <fo:inline font-style="italic">code(3)</fo:inline>
      manual page in Kernel.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code server loads code according to a code loading strategy,
      which is either <fo:inline font-weight="bold">interactive</fo:inline> (default) or
      <fo:inline font-weight="bold">embedded</fo:inline>. In interactive mode, code is searched for in
      a <fo:inline font-weight="bold">code path</fo:inline> and loaded when first referenced. In
      embedded mode, code is loaded at start-up according to a
      <fo:inline font-weight="bold">boot script</fo:inline>. This is described in
      <fo:inline font-style="italic">
      System Principles </fo:inline>.</fo:block>
  <fo:block id="idp6266352" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.14.3 
      Code Replacement</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang supports change of code in a running system. Code
      replacement is done on module level.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code of a module can exist in two variants in a system:
      <fo:inline font-weight="bold">current</fo:inline> and <fo:inline font-weight="bold">old</fo:inline>. When a module is loaded into
      the system for the first time, the code becomes 'current'. If then
      a new instance of the module is loaded, the code of the previous
      instance becomes 'old' and the new instance becomes 'current'.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Both old and current code is valid, and can be evaluated
      concurrently. Fully qualified function calls always refer to
      current code. Old code can still be evaluated because of processes
      lingering in the old code.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a third instance of the module is loaded, the code server
      removes (purges) the old code and any processes lingering in it is
      terminated. Then the third instance becomes 'current' and
      the previously current code becomes 'old'.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To change from old code to current code, a process must make a
      fully qualified function call.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(m).
-export([loop/0]).

loop() -&gt;
    receive
        code_switch -&gt;
            m:loop();
        Msg -&gt;
            ...
            loop()
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To make the process change code, send the message
      <fo:inline font-family="monospace">code_switch</fo:inline> to it. The process then makes a fully
      qualified call to <fo:inline font-family="monospace">m:loop()</fo:inline> and changes to current code.
      Notice that <fo:inline font-family="monospace">m:loop/0</fo:inline> must be exported.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For code replacement of funs to work, use the syntax
      <fo:inline font-family="monospace">fun Module:FunctionName/Arity</fo:inline>.</fo:block>
  <fo:block id="idp6275856" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.14.4 
      Running a Function When a Module is Loaded</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">-on_load()</fo:inline> directive names a function that is to
    be run automatically when a module is loaded.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Its syntax is as follows:</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-on_load(Name/0).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is not necessary to export the function. It is called in a
    freshly spawned process (which terminates as soon as the function
    returns).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function must return <fo:inline font-family="monospace">ok</fo:inline> if the module is to
    become the new current code for the module and become
    callable.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returning any other value or generating an exception
    causes the new code to be unloaded. If the return value is not an
    atom, a warning error report is sent to the error logger.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If there already is current code for the module, that code will
    remain current and can be called until the <fo:inline font-family="monospace">on_load</fo:inline> function
    has returned. If the <fo:inline font-family="monospace">on_load</fo:inline> function fails, the current
    code (if any) will remain current. If there is no current code for
    a module, any process that makes an external call to the module
    before the <fo:inline font-family="monospace">on_load</fo:inline> function has finished will be suspended
    until the <fo:inline font-family="monospace">on_load</fo:inline> function have finished.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before OTP 19, if the <fo:inline font-family="monospace">on_load</fo:inline> function failed, any
      previously current code would become old, essentially leaving
      the system without any working and reachable instance of the
      module.  That problem has been eliminated in OTP 19.</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In embedded mode, first all modules are loaded.
      Then all <fo:inline font-family="monospace">on_load</fo:inline> functions are called. The system is
      terminated unless all of the <fo:inline font-family="monospace">on_load</fo:inline> functions return
      <fo:inline font-family="monospace">ok</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(m).
-on_load(load_my_nifs/0).

load_my_nifs() -&gt;
    NifPath = ...,    %Set up the path to the NIF library.
    Info = ...,       %Initialize the Info term
    erlang:load_nif(NifPath, Info).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the call to <fo:inline font-family="monospace">erlang:load_nif/2</fo:inline> fails, the module
      is unloaded and a  warning report is sent to
      the error loader.</fo:block>

  <fo:block id="idp6292992" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">5.15  Ports and Port Drivers</fo:marker>5.15  Ports and Port Drivers</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples of how to use ports and port drivers are provided in
    <fo:inline font-style="italic">
    Interoperability Tutorial</fo:inline>.
    For information about the BIFs mentioned, see the
    <fo:inline font-style="italic">erlang(3)</fo:inline> manual
    page in ERTS.</fo:block><fo:block id="idp6297536" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.15.1 
      Ports</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Ports</fo:inline> provide the basic mechanism for communication
      with the external world, from Erlang's point of view. They
      provide a byte-oriented interface to an external program. When a
      port has been created, Erlang can communicate with it by sending
      and receiving lists of bytes, including binaries.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang process creating a port is said to be
      the <fo:inline font-weight="bold">port owner</fo:inline>, or the <fo:inline font-weight="bold">connected process</fo:inline> of
      the port. All communication to and from the port must go through
      the port owner. If the port owner terminates, so does the port
      (and the external program, if it is written correctly).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The external program resides in another OS process. By default,
      it reads from standard input (file descriptor 0) and writes
      to standard output (file descriptor 1). The external program
      is to terminate when the port is closed.</fo:block>
  <fo:block id="idp6301712" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.15.2 
      Port Drivers</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to write a driver in C according to certain
      principles and dynamically link it to the Erlang runtime system.
      The linked-in driver looks like a port from the Erlang
      programmer's point of view and is called a <fo:inline font-weight="bold">port driver</fo:inline>.</fo:block>
    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An erroneous port driver causes the entire Erlang runtime
        system to leak memory, hang or crash.</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about port drivers, see the
      <fo:inline font-style="italic">erl_driver(4)</fo:inline>
      manual page in ERTS,
      <fo:inline font-style="italic">driver_entry(1)</fo:inline>
      manual page in ERTS, and
      <fo:inline font-style="italic">erl_ddll(3)</fo:inline>
      manual page in Kernel.</fo:block>
  <fo:block id="idp6307392" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">5.15.3 
      Port BIFs</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To create a port:</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">open_port(PortName, PortSettings</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Returns a port identifier
        <fo:inline font-family="monospace">Port</fo:inline> as the result of opening a new Erlang port.
        Messages can be sent to, and received from, a port identifier,
        just like a pid. Port identifiers can also be linked to
        using <fo:inline font-family="monospace">link/1</fo:inline>, or registered under a name using
        <fo:inline font-family="monospace">register/2</fo:inline>.</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        15.1:
         
        Port Creation BIF</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">PortName</fo:inline> is usually a tuple <fo:inline font-family="monospace">{spawn,Command}</fo:inline>, where
      the string <fo:inline font-family="monospace">Command</fo:inline> is the name of the external program.
      The external program runs outside the Erlang workspace, unless a
      port driver with the name <fo:inline font-family="monospace">Command</fo:inline> is found. If <fo:inline font-family="monospace">Command</fo:inline>
      is found, that driver is started.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">PortSettings</fo:inline> is a list of settings (options) for the port.
      The list typically contains at least a tuple <fo:inline font-family="monospace">{packet,N}</fo:inline>,
      which specifies that data sent between the port and the external
      program are preceded by an N-byte length indicator. Valid values
      for N are 1, 2, or 4. If binaries are to be used instead of lists
      of bytes, the option <fo:inline font-family="monospace">binary</fo:inline> must be included.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The port owner <fo:inline font-family="monospace">Pid</fo:inline> can communicate with the port
      <fo:inline font-family="monospace">Port</fo:inline> by sending and receiving messages. (In fact, any
      process can send the messages to the port, but the port owner must
      be identified in the message).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As of Erlang/OTP R16, messages sent to ports are delivered truly
      asynchronously. The underlying implementation previously
      delivered messages to ports synchronously. Message passing has
      however always been documented as an asynchronous operation. Hence,
      this is not to be an issue for an Erlang program communicating
      with ports, unless false assumptions about ports have been made.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following tables of examples, <fo:inline font-family="monospace">Data</fo:inline> must be an I/O list.
      An I/O list is a binary or a (possibly deep) list of binaries
      or integers in the range 0..255:</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Message</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Description</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">{Pid,{command,Data}}</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Sends <fo:inline font-family="monospace">Data</fo:inline> to the port.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">{Pid,close}</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Closes the port. Unless the
        port is already closed, the port replies with
        <fo:inline font-family="monospace">{Port,closed}</fo:inline> when all buffers have been flushed
        and the port really closes.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">{Pid,{connect,NewPid}}</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Sets the port owner of
        <fo:inline font-family="monospace">Port</fo:inline>to <fo:inline font-family="monospace">NewPid</fo:inline>. Unless the port is already closed,
        the port replies with<fo:inline font-family="monospace">{Port,connected}</fo:inline> to the old
        port owner. Note that the old port owner is still linked
        to the port, but the new port owner is not.</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        15.2:
         
        Messages Sent To a Port</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Message</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Description</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">{Port,{data,Data}}</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">Data</fo:inline> is received from the external program.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">{Port,closed}</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Reply to <fo:inline font-family="monospace">Port ! {Pid,close}</fo:inline>.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">{Port,connected}</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Reply to <fo:inline font-family="monospace">Port ! {Pid,{connect,NewPid}}</fo:inline>.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">{'EXIT',Port,Reason}</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">If the port has terminated for some reason.</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        15.3:
         
        Messages Received From a Port</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Instead of sending and receiving messages, there are also a
      number of BIFs that can be used:</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Port BIF</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Description</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">port_command(Port,Data)</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Sends <fo:inline font-family="monospace">Data</fo:inline> to the port.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">port_close(Port)</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Closes the port.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">port_connect(Port,NewPid)</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Sets the port owner of
        <fo:inline font-family="monospace">Port</fo:inline>to <fo:inline font-family="monospace">NewPid</fo:inline>. The old port owner <fo:inline font-family="monospace">Pid</fo:inline>
        stays linked to the port and must call <fo:inline font-family="monospace">unlink(Port)</fo:inline>
        if this is not desired.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">erlang:port_info(Port,Item)</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Returns information as specified by <fo:inline font-family="monospace">Item</fo:inline>.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">erlang:ports()</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Returns a list of all ports on the current node.</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        15.4:
         
        Port BIFs</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some additional BIFs that apply to port drivers:
      <fo:inline font-family="monospace">port_control/3</fo:inline> and <fo:inline font-family="monospace">erlang:port_call/3</fo:inline>.</fo:block>
  <fo:block id="idp4034016" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">6   
      Programming Examples</fo:block>
 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section contains examples on using records, funs, list
      comprehensions, and the bit syntax.</fo:block>
  <fo:block id="idp3447072" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">6.1  Records</fo:marker>6.1  Records</fo:block><fo:block id="idp3444544" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.1.1 
      Records and Tuples</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The main advantage of using records rather than tuples is that
      fields in a record are accessed by name, whereas fields in a
      tuple are accessed by position. To illustrate these differences,
      suppose that you want to represent a person with the tuple
      <fo:inline font-family="monospace">{Name, Address, Phone}</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To write functions that manipulate this data, remember the following:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">Name</fo:inline> field is the first element of the tuple.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">Address</fo:inline> field is the second element.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">Phone</fo:inline> field is the third element.</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, to extract data from a variable <fo:inline font-family="monospace">P</fo:inline>
      that contains such a tuple, you can write the following code
      and then use pattern matching to extract the relevant fields:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Name = element(1, P),
Address = element(2, P),
...</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Such code is difficult to read and understand, and errors
      occur if the numbering of the elements in the tuple is wrong.
      If the data representation of the fields is changed, by re-ordering,
      adding, or removing fields, all references to
      the person tuple must be checked and possibly modified.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Records allow references to the fields by name, instead of by
      position. In the following example, a record instead of a tuple
      is used to store the data:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record(person, {name, phone, address}).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This enables references to the fields of the record by name.
    For example, if <fo:inline font-family="monospace">P</fo:inline> is a variable whose value is a
      <fo:inline font-family="monospace">person</fo:inline> record, the following code access
      the name and address fields of the records:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Name = P#person.name,
Address = P#person.address,
...</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Internally, records are represented using tagged tuples:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{person, Name, Phone, Address}</fo:block>
  <fo:block id="idp3468768" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.1.2 
      Defining a Record</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This following definition of a <fo:inline font-family="monospace">person</fo:inline> is used in several
      examples in this section. Three fields are included, <fo:inline font-family="monospace">name</fo:inline>,
      <fo:inline font-family="monospace">phone</fo:inline>, and <fo:inline font-family="monospace">address</fo:inline>. The default values for
      <fo:inline font-family="monospace">name</fo:inline> and <fo:inline font-family="monospace">phone</fo:inline> is "" and [], respectively.
      The default value for <fo:inline font-family="monospace">address</fo:inline> is the atom
      <fo:inline font-family="monospace">undefined</fo:inline>, since no default value is supplied for this
      field:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record(person, {name = "", phone = [], address}).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The record must be defined in the shell to enable
      use of the record syntax in the examples:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">rd(person, {name = "", phone = [], address}).</fo:inline>
person</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is because record definitions are only available
      at compile time, not at runtime. For details on records
      in the shell, see the
      <fo:inline font-style="italic">shell(3)</fo:inline>
      manual page in STDLIB.</fo:block>
  <fo:block id="idp3460368" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.1.3 
      Creating a Record</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A new <fo:inline font-family="monospace">person</fo:inline> record is created as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">#person{phone=[0,8,2,3,4,3,1,2], name="Robert"}.</fo:inline>
#person{name = "Robert",phone = [0,8,2,3,4,3,1,2],address = undefined}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As the <fo:inline font-family="monospace">address</fo:inline> field was omitted, its default value
      is used.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From Erlang 5.1/OTP R8B, a value to all
      fields in a record can be set with the special field <fo:inline font-family="monospace">_</fo:inline>.
      <fo:inline font-family="monospace">_</fo:inline> means "all fields not explicitly specified".</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">#person{name = "Jakob", _ = '_'}.</fo:inline>
#person{name = "Jakob",phone = '_',address = '_'}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is primarily intended to be used in <fo:inline font-family="monospace">ets:match/2</fo:inline> and
      <fo:inline font-family="monospace">mnesia:match_object/3</fo:inline>, to set record fields to the atom
      <fo:inline font-family="monospace">'_'</fo:inline>. (This is a wildcard in <fo:inline font-family="monospace">ets:match/2</fo:inline>.)</fo:block>
  <fo:block id="idp2383136" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.1.4 
      Accessing a Record Field</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows how to access a record field:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">P = #person{name = "Joe", phone = [0,8,2,3,4,3,1,2]}.</fo:inline>
#person{name = "Joe",phone = [0,8,2,3,4,3,1,2],address = undefined}
&gt; <fo:inline font-weight="bold">P#person.name.</fo:inline>
"Joe"</fo:block>
  <fo:block id="idp2379744" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.1.5 
      Updating a Record</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows how to update a record:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">P1 = #person{name="Joe", phone=[1,2,3], address="A street"}.</fo:inline>
#person{name = "Joe",phone = [1,2,3],address = "A street"}
&gt; <fo:inline font-weight="bold">P2 = P1#person{name="Robert"}.</fo:inline>
#person{name = "Robert",phone = [1,2,3],address = "A street"}</fo:block>
  <fo:block id="idp2377216" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.1.6 
      Type Testing</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows that the guard succeeds if
      <fo:inline font-family="monospace">P</fo:inline> is record of type <fo:inline font-family="monospace">person</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
foo(P) when is_record(P, person) -&gt; a_person;
foo(_) -&gt; not_a_person.</fo:block>
  <fo:block id="idp2374256" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.1.7 
      Pattern Matching</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Matching can be used in combination with records, as shown in
      the following example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">P3 = #person{name="Joe", phone=[0,0,7], address="A street"}.</fo:inline>
#person{name = "Joe",phone = [0,0,7],address = "A street"}
&gt; <fo:inline font-weight="bold">#person{name = Name} = P3, Name.</fo:inline>
"Joe"</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following function takes a list of <fo:inline font-family="monospace">person</fo:inline> records
      and searches for the phone number of a person with a particular
      name:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
find_phone([#person{name=Name, phone=Phone} | _], Name) -&gt;
    {found,  Phone};
find_phone([_| T], Name) -&gt;
    find_phone(T, Name);
find_phone([], Name) -&gt;
    not_found.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The fields referred to in the pattern can be given in any order.</fo:block>
  <fo:block id="idp949120" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.1.8 
      Nested Records</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of a field in a record can be an instance of a
      record. Retrieval of nested data can be done stepwise, or in a
      single step, as shown in the following example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record(name, {first = "Robert", last = "Ericsson"}).
-record(person, {name = #name{}, phone}).

demo() -&gt;
  P = #person{name= #name{first="Robert",last="Virding"}, phone=123},
  First = (P#person.name)#name.first.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, <fo:inline font-family="monospace">demo()</fo:inline> evaluates to <fo:inline font-family="monospace">"Robert"</fo:inline>.</fo:block>
  <fo:block id="idp946080" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.1.9 
      A Longer Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Comments are embedded in the following example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% File: person.hrl

%%-----------------------------------------------------------
%% Data Type: person
%% where:
%%    name:  A string (default is undefined).
%%    age:   An integer (default is undefined).
%%    phone: A list of integers (default is []).
%%    dict:  A dictionary containing various information 
%%           about the person. 
%%           A {Key, Value} list (default is the empty list).
%%------------------------------------------------------------
-record(person, {name, age, phone = [], dict = []}).</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(person).
-include("person.hrl").
-compile(export_all). % For test purposes only.

%% This creates an instance of a person.
%%   Note: The phone number is not supplied so the
%%         default value [] will be used.

make_hacker_without_phone(Name, Age) -&gt;
   #person{name = Name, age = Age, 
           dict = [{computer_knowledge, excellent}, 
                   {drinks, coke}]}.

%% This demonstrates matching in arguments

print(#person{name = Name, age = Age,
              phone = Phone, dict = Dict}) -&gt;
  io:format("Name: ~s, Age: ~w, Phone: ~w ~n" 
            "Dictionary: ~w.~n", [Name, Age, Phone, Dict]).

%% Demonstrates type testing, selector, updating.

birthday(P) when record(P, person) -&gt; 
   P#person{age = P#person.age + 1}.

register_two_hackers() -&gt;
   Hacker1 = make_hacker_without_phone("Joe", 29),
   OldHacker = birthday(Hacker1),
   % The central_register_server should have 
   % an interface function for this.
   central_register_server ! {register_person, Hacker1},
   central_register_server ! {register_person, 
             OldHacker#person{name = "Robert", 
                              phone = [0,8,3,2,4,5,3,1]}}.</fo:block>
  <fo:block id="idp3459680" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">6.2  Funs</fo:marker>6.2  Funs</fo:block><fo:block id="idp2397040" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.2.1 
      map</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following function, <fo:inline font-family="monospace">double</fo:inline>, doubles every element in a list:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
double([H|T]) -&gt; [2*H|double(T)];
double([])    -&gt; [].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Hence, the argument entered as input is doubled as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">double([1,2,3,4]).</fo:inline>
[2,4,6,8]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following function, <fo:inline font-family="monospace">add_one</fo:inline>, adds one to every
      element in a list:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
add_one([H|T]) -&gt; [H+1|add_one(T)];
add_one([])    -&gt; [].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions <fo:inline font-family="monospace">double</fo:inline> and <fo:inline font-family="monospace">add_one</fo:inline> have a
      similar structure. This can be used by writing a function
      <fo:inline font-family="monospace">map</fo:inline> that expresses this similarity:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

map(F, [H|T]) -&gt; [F(H)|map(F, T)];
map(F, [])    -&gt; [].</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions <fo:inline font-family="monospace">double</fo:inline> and <fo:inline font-family="monospace">add_one</fo:inline> can now be expressed
    in terms of <fo:inline font-family="monospace">map</fo:inline> as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
double(L)  -&gt; map(fun(X) -&gt; 2*X end, L).
add_one(L) -&gt; map(fun(X) -&gt; 1 + X end, L).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">map(F, List)</fo:inline> is a function that takes a function
      <fo:inline font-family="monospace">F</fo:inline> and a list <fo:inline font-family="monospace">L</fo:inline> as arguments and returns a new
      list, obtained by applying <fo:inline font-family="monospace">F</fo:inline> to each of
      the elements in <fo:inline font-family="monospace">L</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process of abstracting out the common features of a number
      of different programs is called <fo:inline font-weight="bold">procedural abstraction</fo:inline>.
      Procedural abstraction can be used to write several
      different functions that have a similar structure, but differ
      in some minor detail. This is done as follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 1.</fo:inline> Write one function that represents the common features of
       these functions.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 2.</fo:inline> Parameterize the difference in terms of functions that
       are passed as arguments to the common function.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2341120" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.2.2 
      foreach</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section illustrates procedural abstraction. Initially,
    the following two examples are written as conventional
      functions.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function prints all elements of a list onto a stream:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
print_list(Stream, [H|T]) -&gt;
    io:format(Stream, "~p~n", [H]),
    print_list(Stream, T);
print_list(Stream, []) -&gt;
    true.</fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function broadcasts a message to a list of processes:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
broadcast(Msg, [Pid|Pids]) -&gt;
    Pid ! Msg,
    broadcast(Msg, Pids);
broadcast(_, []) -&gt;
    true.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These two functions have a similar structure. They both
      iterate over a list and do something to each element in the list.
      The "something" is passed on as an extra argument to
      the function that does this.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">foreach</fo:inline> expresses this similarity:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

foreach(F, [H|T]) -&gt;
    F(H),
    foreach(F, T);
foreach(F, []) -&gt;
    ok.</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using the function <fo:inline font-family="monospace">foreach</fo:inline>, the function <fo:inline font-family="monospace">print_list</fo:inline> becomes:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
foreach(fun(H) -&gt; io:format(S, "~p~n",[H]) end, L)</fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using the function <fo:inline font-family="monospace">foreach</fo:inline>, the function <fo:inline font-family="monospace">broadcast</fo:inline> becomes:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
foreach(fun(Pid) -&gt; Pid ! M end, L)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">foreach</fo:inline> is evaluated for its side-effect and not its
      value. <fo:inline font-family="monospace">foreach(Fun ,L)</fo:inline> calls <fo:inline font-family="monospace">Fun(X)</fo:inline> for each
      element <fo:inline font-family="monospace">X</fo:inline> in <fo:inline font-family="monospace">L</fo:inline> and the processing occurs in
      the order that the elements were defined in <fo:inline font-family="monospace">L</fo:inline>.
      <fo:inline font-family="monospace">map</fo:inline> does not define the order in which its elements are
      processed.</fo:block>
  <fo:block id="idp1513216" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.2.3 
      Syntax of Funs</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Funs are written with the following syntax (see <fo:inline font-style="italic">Fun Expressions
      </fo:inline> for full description):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
F = fun (Arg1, Arg2, ... ArgN) -&gt;
        ...
    end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This creates an anonymous function of <fo:inline font-family="monospace">N</fo:inline> arguments and
      binds it to the variable <fo:inline font-family="monospace">F</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another function, <fo:inline font-family="monospace">FunctionName</fo:inline>, written in the same module,
    can be passed as an argument, using the following syntax:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
F = fun FunctionName/Arity</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With this form of function reference, the function that is
      referred to does not need to be exported from the module.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also possible to refer to a function defined in a different module,
      with the following syntax:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
F = fun Module:FunctionName/Arity</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case, the function must be exported from the module in
      question.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following program illustrates the different ways of creating
      funs:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-module(fun_test).
-export([t1/0, t2/0]).
-import(lists, [map/2]).

t1() -&gt; map(fun(X) -&gt; 2 * X end, [1,2,3,4,5]).

t2() -&gt; map(fun double/1, [1,2,3,4,5]).

double(X) -&gt; X * 2.</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The fun <fo:inline font-family="monospace">F</fo:inline> can be evaluated with the following syntax:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
F(Arg1, Arg2, ..., Argn)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To check whether a term is a fun, use the test
      <fo:inline font-family="monospace">is_function/1</fo:inline> in a guard.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
f(F, Args) when is_function(F) -&gt;
   apply(F, Args);
f(N, _) when is_integer(N) -&gt;
   N.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Funs are a distinct type. The BIFs <fo:inline font-family="monospace">erlang:fun_info/1,2</fo:inline> can
      be used to retrieve information about a fun, and the BIF
      <fo:inline font-family="monospace">erlang:fun_to_list/1</fo:inline> returns a textual representation of a fun.
      The <fo:inline font-family="monospace">check_process_code/2</fo:inline> BIF returns <fo:inline font-family="monospace">true</fo:inline> if the process
      contains funs that depend on the old version of a module.</fo:block>
  <fo:block id="idp2395264" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.2.4 
      Variable Bindings Within a Fun</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The scope rules for variables that occur in funs are as
      follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>All variables that occur in the head of a fun are assumed
       to be "fresh" variables.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Variables that are defined before the fun, and that
       occur in function calls or guard tests within the fun, have
       the values they had outside the fun.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Variables cannot be exported from a fun.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following examples illustrate these rules:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
print_list(File, List) -&gt;
    {ok, Stream} = file:open(File, write),
    foreach(fun(X) -&gt; io:format(Stream,"~p~n",[X]) end, List),
    file:close(Stream).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, the variable <fo:inline font-family="monospace">X</fo:inline>, defined in
      the head of the fun, is a new variable. The variable
      <fo:inline font-family="monospace">Stream</fo:inline>, which is used within the fun, gets its value
      from the <fo:inline font-family="monospace">file:open</fo:inline> line.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As any variable that occurs in the head of a fun is
      considered a new variable, it is equally valid to write
      as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
print_list(File, List) -&gt;
    {ok, Stream} = file:open(File, write),
    foreach(fun(File) -&gt; 
                io:format(Stream,"~p~n",[File]) 
            end, List),
    file:close(Stream).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, <fo:inline font-family="monospace">File</fo:inline> is used as the new variable
      instead of <fo:inline font-family="monospace">X</fo:inline>. This is not so wise because code in the fun
      body cannot refer to the variable <fo:inline font-family="monospace">File</fo:inline>, which is
      defined outside of the fun. Compiling this example gives
      the following diagnostic:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
./FileName.erl:Line: Warning: variable 'File' 
      shadowed in 'fun'</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This indicates that the variable <fo:inline font-family="monospace">File</fo:inline>, which is defined
      inside the fun, collides with the variable <fo:inline font-family="monospace">File</fo:inline>, which is
      defined outside the fun.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The rules for importing variables into a fun has the consequence
      that certain pattern matching operations must be moved into
      guard expressions and cannot be written in the head of the fun.
      For example, you might write the following code if you intend
      the first clause of <fo:inline font-family="monospace">F</fo:inline> to be evaluated when the value of
      its argument is <fo:inline font-family="monospace">Y</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
f(...) -&gt;
    Y = ...
    map(fun(X) when X == Y -&gt;
             ;
           (_) -&gt;
             ...
        end, ...)
    ...</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">instead of writing the following code:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
f(...) -&gt;
    Y = ...
    map(fun(Y) -&gt;
             ;
           (_) -&gt;
             ...
        end, ...)
    ...</fo:block>
  <fo:block id="idp939904" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.2.5 
      Funs and Module Lists</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following examples show a dialogue with the Erlang shell.
      All the higher order functions discussed are exported from
      the module <fo:inline font-family="monospace">lists</fo:inline>.</fo:block>

    <fo:block id="idp876512" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">map</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">map</fo:inline> takes a function of one argument and a list of terms:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

map(F, [H|T]) -&gt; [F(H)|map(F, T)];
map(F, [])    -&gt; [].</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It returns the list obtained by applying the function
        to every argument in the list.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a new fun is defined in the shell, the value of the fun
        is printed as <fo:inline font-family="monospace">Fun#&lt;erl_eval&gt;</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">Double = fun(X) -&gt; 2 * X end.</fo:inline>
#Fun&lt;erl_eval.6.72228031&gt;
&gt; <fo:inline font-weight="bold">lists:map(Double, [1,2,3,4,5]).</fo:inline>
[2,4,6,8,10]</fo:block>

    

    <fo:block id="idp2283792" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">any</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">any</fo:inline> takes a predicate <fo:inline font-family="monospace">P</fo:inline> of one argument and a
        list of terms:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

any(Pred, [H|T]) -&gt;
    case Pred(H) of
        true  -&gt;  true;
        false -&gt;  any(Pred, T)
    end;
any(Pred, []) -&gt;
    false.</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A predicate is a function that returns <fo:inline font-family="monospace">true</fo:inline> or <fo:inline font-family="monospace">false</fo:inline>.
      <fo:inline font-family="monospace">any</fo:inline> is <fo:inline font-family="monospace">true</fo:inline> if there is a term <fo:inline font-family="monospace">X</fo:inline> in the list such that
      <fo:inline font-family="monospace">P(X)</fo:inline> is <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A predicate <fo:inline font-family="monospace">Big(X)</fo:inline> is defined, which is <fo:inline font-family="monospace">true</fo:inline> if
        its argument is greater that 10:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">Big =  fun(X) -&gt; if X &gt; 10 -&gt; true; true -&gt; false end end.</fo:inline>
#Fun&lt;erl_eval.6.72228031&gt;
&gt; <fo:inline font-weight="bold">lists:any(Big, [1,2,3,4]).</fo:inline>
false
&gt; <fo:inline font-weight="bold">lists:any(Big, [1,2,3,12,5]).</fo:inline>
true</fo:block>
    

    <fo:block id="idp3887216" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">all</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">all</fo:inline> has the same arguments as <fo:inline font-family="monospace">any</fo:inline>:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

all(Pred, [H|T]) -&gt;
    case Pred(H) of
        true  -&gt;  all(Pred, T);
        false -&gt;  false
    end;
all(Pred, []) -&gt;
    true.</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is <fo:inline font-family="monospace">true</fo:inline>
        if the predicate applied to all elements in the list is <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">lists:all(Big, [1,2,3,4,12,6]).</fo:inline>   
false
&gt; <fo:inline font-weight="bold">lists:all(Big, [12,13,14,15]).</fo:inline>       
true</fo:block>
    

    <fo:block id="idp2259792" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">foreach</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">foreach</fo:inline> takes a function of one argument and a list of
        terms:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

foreach(F, [H|T]) -&gt;
    F(H),
    foreach(F, T);
foreach(F, []) -&gt;
    ok.</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is applied to each argument in the list.
        <fo:inline font-family="monospace">foreach</fo:inline> returns <fo:inline font-family="monospace">ok</fo:inline>. It is only used for its
        side-effect:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">lists:foreach(fun(X) -&gt; io:format("~w~n",[X]) end, [1,2,3,4]).</fo:inline> 
1
2
3
4
ok</fo:block>
    

    <fo:block id="idm35488" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">foldl</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">foldl</fo:inline> takes a function of two arguments, an
        accumulator and a list:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

foldl(F, Accu, [Hd|Tail]) -&gt;
    foldl(F, F(Hd, Accu), Tail);
foldl(F, Accu, []) -&gt; Accu.</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is called with two
        arguments. The first argument is the successive elements in
        the list. The second argument is the accumulator. The function
        must return a new accumulator, which is used the next time
        the function is called.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you have a list of lists <fo:inline font-family="monospace">L = ["I","like","Erlang"]</fo:inline>,
        then you can sum the lengths of all the strings in <fo:inline font-family="monospace">L</fo:inline> as
        follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">L = ["I","like","Erlang"].</fo:inline>
["I","like","Erlang"]
10&gt; <fo:inline font-weight="bold">lists:foldl(fun(X, Sum) -&gt; length(X) + Sum end, 0, L).</fo:inline>                    
11</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">foldl</fo:inline> works like a <fo:inline font-family="monospace">while</fo:inline> loop in an imperative
        language:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
L =  ["I","like","Erlang"],
Sum = 0,
while( L != []){
    Sum += length(head(L)),
    L = tail(L)
end</fo:block>
    

    <fo:block id="idm24512" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">mapfoldl</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mapfoldl</fo:inline> simultaneously maps and folds over a list:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

mapfoldl(F, Accu0, [Hd|Tail]) -&gt;
    {R,Accu1} = F(Hd, Accu0),
    {Rs,Accu2} = mapfoldl(F, Accu1, Tail),
    {[R|Rs], Accu2};
mapfoldl(F, Accu, []) -&gt; {[], Accu}.</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows how to change all letters in
        <fo:inline font-family="monospace">L</fo:inline> to upper case and then count them.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First the change to upper case:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">Upcase =  fun(X) when $a =&lt; X,  X =&lt; $z -&gt; X + $A - $a;</fo:inline>
<fo:inline font-weight="bold">(X) -&gt; X</fo:inline> 
<fo:inline font-weight="bold">end.</fo:inline>
#Fun&lt;erl_eval.6.72228031&gt;
&gt; <fo:inline font-weight="bold">Upcase_word =</fo:inline> 
<fo:inline font-weight="bold">fun(X) -&gt;</fo:inline> 
<fo:inline font-weight="bold">lists:map(Upcase, X)</fo:inline> 
<fo:inline font-weight="bold">end.</fo:inline>
#Fun&lt;erl_eval.6.72228031&gt;
&gt; <fo:inline font-weight="bold">Upcase_word("Erlang").</fo:inline>
"ERLANG"
&gt; <fo:inline font-weight="bold">lists:map(Upcase_word, L).</fo:inline>
["I","LIKE","ERLANG"]</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now, the fold and the map can be done at the same time:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">lists:mapfoldl(fun(Word, Sum) -&gt;</fo:inline>
<fo:inline font-weight="bold">{Upcase_word(Word), Sum + length(Word)}</fo:inline>
<fo:inline font-weight="bold">end, 0, L).</fo:inline>
{["I","LIKE","ERLANG"],11}</fo:block>
    

    <fo:block id="idp1009648" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">filter</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">filter</fo:inline> takes a predicate of one argument and a list
        and returns all elements in the list that satisfy
        the predicate:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

filter(F, [H|T]) -&gt;
    case F(H) of
        true  -&gt; [H|filter(F, T)];
        false -&gt; filter(F, T)
    end;
filter(F, []) -&gt; [].</fo:block>      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">lists:filter(Big, [500,12,2,45,6,7]).</fo:inline>
[500,12,45]</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Combining maps and filters enables writing of very succinct
        code. For example, to define a set difference
        function <fo:inline font-family="monospace">diff(L1, L2)</fo:inline> to be
        the difference between the lists <fo:inline font-family="monospace">L1</fo:inline> and <fo:inline font-family="monospace">L2</fo:inline>,
        the code can be written as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
diff(L1, L2) -&gt; 
    filter(fun(X) -&gt; not member(X, L2) end, L1).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This gives the list of all elements in L1 that are not contained
        in L2.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> The AND intersection of the list <fo:inline font-family="monospace">L1</fo:inline> and <fo:inline font-family="monospace">L2</fo:inline> is
        also easily defined:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
intersection(L1,L2) -&gt; filter(fun(X) -&gt; member(X,L1) end, L2).</fo:block>
    

    <fo:block id="idp3897024" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">takewhile</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">takewhile(P, L)</fo:inline> takes elements <fo:inline font-family="monospace">X</fo:inline> from a list
        <fo:inline font-family="monospace">L</fo:inline> as long as the predicate <fo:inline font-family="monospace">P(X)</fo:inline> is true:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

takewhile(Pred, [H|T]) -&gt;
    case Pred(H) of
        true  -&gt; [H|takewhile(Pred, T)];
        false -&gt; []
    end;
takewhile(Pred, []) -&gt;
    [].</fo:block>      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">lists:takewhile(Big, [200,500,45,5,3,45,6]).</fo:inline>  
[200,500,45]</fo:block>
    

    <fo:block id="idp203856" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">dropwhile</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">dropwhile</fo:inline> is the complement of <fo:inline font-family="monospace">takewhile</fo:inline>:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

dropwhile(Pred, [H|T]) -&gt;
    case Pred(H) of
        true  -&gt; dropwhile(Pred, T);
        false -&gt; [H|T]
    end;
dropwhile(Pred, []) -&gt;
    [].</fo:block>      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">lists:dropwhile(Big, [200,500,45,5,3,45,6]).</fo:inline>
[5,3,45,6]</fo:block>
    

    <fo:block id="idp2487936" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">splitwith</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">splitwith(P, L)</fo:inline> splits the list <fo:inline font-family="monospace">L</fo:inline> into the two
        sublists <fo:inline font-family="monospace">{L1, L2}</fo:inline>, where <fo:inline font-family="monospace">L = takewhile(P, L)</fo:inline>
        and <fo:inline font-family="monospace">L2 = dropwhile(P, L)</fo:inline>:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

splitwith(Pred, L) -&gt;
    splitwith(Pred, L, []).

splitwith(Pred, [H|T], L) -&gt;
    case Pred(H) of 
        true  -&gt; splitwith(Pred, T, [H|L]);
        false -&gt; {reverse(L), [H|T]}
    end;
splitwith(Pred, [], L) -&gt;
    {reverse(L), []}.</fo:block>      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">lists:splitwith(Big, [200,500,45,5,3,45,6]).</fo:inline>
{[200,500,45],[5,3,45,6]}</fo:block>
    
  <fo:block id="idp2304640" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.2.6 
      Funs Returning Funs</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">So far, only functions that take
      funs as arguments have been described. More powerful
      functions, that themselves return funs, can also be written. The following
      examples illustrate these type of functions.</fo:block>

    <fo:block id="idp2306032" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Simple Higher Order Functions</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Adder(X)</fo:inline> is a function that given <fo:inline font-family="monospace">X</fo:inline>, returns
        a new function <fo:inline font-family="monospace">G</fo:inline> such that <fo:inline font-family="monospace">G(K)</fo:inline> returns
        <fo:inline font-family="monospace">K + X</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">Adder = fun(X) -&gt; fun(Y) -&gt; X + Y end end.</fo:inline>
#Fun&lt;erl_eval.6.72228031&gt;
&gt; <fo:inline font-weight="bold">Add6 = Adder(6).</fo:inline>
#Fun&lt;erl_eval.6.72228031&gt;
&gt; <fo:inline font-weight="bold">Add6(10).</fo:inline>
16</fo:block>
    

    <fo:block id="idp3911664" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Infinite Lists</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The idea is to write something like:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(lazy).
-export([ints_from/1]).
ints_from(N) -&gt;
    fun() -&gt;
            [N|ints_from(N+1)]
    end.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then proceed as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">XX = lazy:ints_from(1).</fo:inline>
#Fun&lt;lazy.0.29874839&gt;
&gt; <fo:inline font-weight="bold">XX().</fo:inline>
[1|#Fun&lt;lazy.0.29874839&gt;]
&gt; <fo:inline font-weight="bold">hd(XX()).</fo:inline>
1
&gt; <fo:inline font-weight="bold">Y = tl(XX()).</fo:inline>
#Fun&lt;lazy.0.29874839&gt;
&gt; <fo:inline font-weight="bold">hd(Y()).</fo:inline>
2</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And so on. This is an example of "lazy embedding".</fo:block>
    

    <fo:block id="idp3917520" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Parsing</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following examples show parsers of the following type:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Parser(Toks) -&gt; {ok, Tree, Toks1} | fail</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Toks</fo:inline> is the list of tokens to be parsed. A successful
        parse returns <fo:inline font-family="monospace">{ok, Tree, Toks1}</fo:inline>.</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Tree</fo:inline> is a parse tree.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Toks1</fo:inline> is a tail of <fo:inline font-family="monospace">Tree</fo:inline> that
        contains symbols encountered after the structure that was
        correctly parsed.</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An unsuccessful parse returns <fo:inline font-family="monospace">fail</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example illustrates a simple, functional
        parser that parses the grammar:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(a | b) &amp; (c | d)</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following code defines a function <fo:inline font-family="monospace">pconst(X)</fo:inline> in
        the module <fo:inline font-family="monospace">funparse</fo:inline>, which returns a fun that parses a
        list of tokens:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

pconst(X) -&gt;
    fun (T) -&gt;
       case T of
           [X|T1] -&gt; {ok, {const, X}, T1};
           _      -&gt; fail
       end
    end.</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be used as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">P1 = funparse:pconst(a).</fo:inline>
#Fun&lt;funparse.0.22674075&gt;
&gt; <fo:inline font-weight="bold">P1([a,b,c]).</fo:inline>
{ok,{const,a},[b,c]}
&gt; <fo:inline font-weight="bold">P1([x,y,z]).</fo:inline>     
fail</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Next, the two higher order functions <fo:inline font-family="monospace">pand</fo:inline>
        and <fo:inline font-family="monospace">por</fo:inline> are defined. They combine primitive parsers to produce more
        complex parsers.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First <fo:inline font-family="monospace">pand</fo:inline>:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

pand(P1, P2) -&gt;
    fun (T) -&gt;
        case P1(T) of
            {ok, R1, T1} -&gt;
                case P2(T1) of
                    {ok, R2, T2} -&gt;
                        {ok, {'and', R1, R2}};
                    fail -&gt;
                        fail
                end;
            fail -&gt;
                fail
        end
    end.</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Given a parser <fo:inline font-family="monospace">P1</fo:inline> for grammar <fo:inline font-family="monospace">G1</fo:inline>, and a parser
        <fo:inline font-family="monospace">P2</fo:inline> for grammar <fo:inline font-family="monospace">G2</fo:inline>, <fo:inline font-family="monospace">pand(P1, P2)</fo:inline> returns a
        parser for the grammar, which consists of sequences of tokens
        that satisfy <fo:inline font-family="monospace">G1</fo:inline>, followed by sequences of tokens that
        satisfy <fo:inline font-family="monospace">G2</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">por(P1, P2)</fo:inline> returns a parser for the language
        described by the grammar <fo:inline font-family="monospace">G1</fo:inline> or <fo:inline font-family="monospace">G2</fo:inline>:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

por(P1, P2) -&gt;
    fun (T) -&gt;
        case P1(T) of
            {ok, R, T1} -&gt; 
                {ok, {'or',1,R}, T1};
            fail -&gt; 
                case P2(T) of
                    {ok, R1, T1} -&gt;
                        {ok, {'or',2,R1}, T1};
                    fail -&gt;
                        fail
                end
        end
    end.</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The original problem was to parse the grammar
        <fo:inline font-family="monospace">(a | b) &amp; (c | d)</fo:inline>. The following code addresses this
        problem:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

grammar() -&gt;
    pand(
         por(pconst(a), pconst(b)),
         por(pconst(c), pconst(d))).</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following code adds a parser interface to the grammar:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

parse(List) -&gt;
    (grammar())(List).</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The parser can be tested as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">funparse:parse([a,c]).</fo:inline>
{ok,{'and',{'or',1,{const,a}},{'or',1,{const,c}}}}
&gt; <fo:inline font-weight="bold">funparse:parse([a,d]).</fo:inline> 
{ok,{'and',{'or',1,{const,a}},{'or',2,{const,d}}}}
&gt; <fo:inline font-weight="bold">funparse:parse([b,c]).</fo:inline>   
{ok,{'and',{'or',2,{const,b}},{'or',1,{const,c}}}}
&gt; <fo:inline font-weight="bold">funparse:parse([b,d]).</fo:inline> 
{ok,{'and',{'or',2,{const,b}},{'or',2,{const,d}}}}
&gt; <fo:inline font-weight="bold">funparse:parse([a,b]).</fo:inline>   
fail</fo:block>
    
  <fo:block id="idp4021440" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">6.3  List Comprehensions</fo:marker>6.3  List Comprehensions</fo:block><fo:block id="idp4023936" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.3.1 
      Simple Examples</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section starts with a simple example, showing a generator and a filter:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">[X || X &lt;- [1,2,a,3,4,b,5,6], X &gt; 3].</fo:inline>
[a,4,b,5,6]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is read as follows: The list of X such that X is taken from the list
        <fo:inline font-family="monospace">[1,2,a,...]</fo:inline> and X is greater than 3.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The notation <fo:inline font-family="monospace">X &lt;- [1,2,a,...]</fo:inline> is a generator and
      the expression <fo:inline font-family="monospace">X &gt; 3</fo:inline> is a filter.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An additional filter, <fo:inline font-family="monospace">integer(X)</fo:inline>, can be added to restrict
      the result to integers:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">[X || X &lt;- [1,2,a,3,4,b,5,6], integer(X), X &gt; 3].</fo:inline>
[4,5,6]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generators can be combined. For example, the Cartesian product
      of two lists can be written as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">[{X, Y} || X &lt;- [1,2,3], Y &lt;- [a,b]].</fo:inline>
[{1,a},{1,b},{2,a},{2,b},{3,a},{3,b}]</fo:block>
  <fo:block id="idp3954208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.3.2 
      Quick Sort</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The well-known quick sort routine can be written as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
sort([Pivot|T]) -&gt;
    sort([ X || X &lt;- T, X &lt; Pivot]) ++
    [Pivot] ++
    sort([ X || X &lt;- T, X &gt;= Pivot]);
sort([]) -&gt; [].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The expression <fo:inline font-family="monospace">[X || X &lt;- T, X &lt; Pivot]</fo:inline> is the list of
      all elements in <fo:inline font-family="monospace">T</fo:inline> that are less than <fo:inline font-family="monospace">Pivot</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[X || X &lt;- T, X &gt;= Pivot]</fo:inline> is the list of all elements in
      <fo:inline font-family="monospace">T</fo:inline> that are greater than or equal to <fo:inline font-family="monospace">Pivot</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list sorted as follows:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The first element in the list is isolated
       and the list is split into two sublists.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The first sublist contains
      all elements that are smaller than the first element in
      the list.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The second sublist contains all elements that are greater
      than, or equal to, the first element in the list.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Then the sublists are sorted and the results are combined.</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
  <fo:block id="idp3963232" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.3.3 
      Permutations</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example generates all permutations of
      the elements in a list:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
perms([]) -&gt; [[]];
perms(L)  -&gt; [[H|T] || H &lt;- L, T &lt;- perms(L--[H])].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This takes <fo:inline font-family="monospace">H</fo:inline> from <fo:inline font-family="monospace">L</fo:inline> in all possible ways.
      The result is the set of all lists <fo:inline font-family="monospace">[H|T]</fo:inline>, where <fo:inline font-family="monospace">T</fo:inline>
      is the set of all possible permutations of <fo:inline font-family="monospace">L</fo:inline>, with
      <fo:inline font-family="monospace">H</fo:inline> removed:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">perms([b,u,g]).</fo:inline>
[[b,u,g],[b,g,u],[u,b,g],[u,g,b],[g,b,u],[g,u,b]]</fo:block>
  <fo:block id="idp3969456" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.3.4 
      Pythagorean Triplets</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Pythagorean triplets are sets of integers <fo:inline font-family="monospace">{A,B,C}</fo:inline> such
      that <fo:inline font-family="monospace">A**2 + B**2 = C**2</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">pyth(N)</fo:inline> generates a list of all integers
      <fo:inline font-family="monospace">{A,B,C}</fo:inline> such that <fo:inline font-family="monospace">A**2 + B**2 = C**2</fo:inline> and where
      the sum of the sides is equal to, or less than, <fo:inline font-family="monospace">N</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
pyth(N) -&gt;
    [ {A,B,C} ||
        A &lt;- lists:seq(1,N),
        B &lt;- lists:seq(1,N),
        C &lt;- lists:seq(1,N),
        A+B+C =&lt; N,
        A*A+B*B == C*C 
    ].</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">pyth(3).</fo:inline>
[].
&gt; <fo:inline font-weight="bold">pyth(11).</fo:inline>
[].
&gt; <fo:inline font-weight="bold">pyth(12).</fo:inline>
[{3,4,5},{4,3,5}]
&gt; <fo:inline font-weight="bold">pyth(50).</fo:inline>
[{3,4,5},
 {4,3,5},
 {5,12,13},
 {6,8,10},
 {8,6,10},
 {8,15,17},
 {9,12,15},
 {12,5,13},
 {12,9,15},
 {12,16,20},
 {15,8,17},
 {16,12,20}]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following code reduces the search space and is more
      efficient:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
pyth1(N) -&gt;
   [{A,B,C} ||
       A &lt;- lists:seq(1,N-2),
       B &lt;- lists:seq(A+1,N-1),
       C &lt;- lists:seq(B+1,N),
       A+B+C =&lt; N,
       A*A+B*B == C*C ].</fo:block>
  <fo:block id="idp3978560" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.3.5 
      Simplifications With List Comprehensions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As an example, list comprehensions can be used to simplify some
      of the functions in <fo:inline font-family="monospace">lists.erl</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
append(L)   -&gt;  [X || L1 &lt;- L, X &lt;- L1].
map(Fun, L) -&gt; [Fun(X) || X &lt;- L].
filter(Pred, L) -&gt; [X || X &lt;- L, Pred(X)].</fo:block>
  <fo:block id="idp3981280" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.3.6 
      Variable Bindings in List Comprehensions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The scope rules for variables that occur in list
      comprehensions are as follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>All variables that occur in a generator pattern are
       assumed to be "fresh" variables.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Any variables that are defined before the list
       comprehension, and that are used in filters, have the values
       they had before the list comprehension.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Variables cannot be exported from a list comprehension.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As an example of these rules, suppose you want to write
      the function <fo:inline font-family="monospace">select</fo:inline>, which selects certain elements from
      a list of tuples. Suppose you write
      <fo:inline font-family="monospace">select(X, L) -&gt;  [Y || {X, Y} &lt;- L].</fo:inline> with the intention
      of extracting all tuples from <fo:inline font-family="monospace">L</fo:inline>, where the first item is
      <fo:inline font-family="monospace">X</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compiling this gives the following diagnostic:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
./FileName.erl:Line: Warning: variable 'X' shadowed in generate</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This diagnostic warns that the variable <fo:inline font-family="monospace">X</fo:inline> in
      the pattern is not the same as the variable <fo:inline font-family="monospace">X</fo:inline>
      that occurs in the function head.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluating <fo:inline font-family="monospace">select</fo:inline> gives the following result:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">select(b,[{a,1},{b,2},{c,3},{b,7}]).</fo:inline>
[1,2,3,7]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is not the wanted result. To achieve the desired
      effect, <fo:inline font-family="monospace">select</fo:inline> must be written as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
select(X, L) -&gt;  [Y || {X1, Y} &lt;- L, X == X1].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The generator now contains unbound variables and the test has
      been moved into the filter.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This now works as expected:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">select(b,[{a,1},{b,2},{c,3},{b,7}]).</fo:inline>
[2,7]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A consequence of the rules for importing variables into a
      list comprehensions is that certain pattern matching operations
      must be moved into the filters and cannot be written directly
      in the generators.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To illustrate this, do <fo:inline font-weight="bold">not</fo:inline> write as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
f(...) -&gt;
    Y = ...
    [ Expression || PatternInvolving Y  &lt;- Expr, ...]
    ...</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Instead, write as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
f(...) -&gt;
    Y = ...
    [ Expression || PatternInvolving Y1  &lt;- Expr, Y == Y1, ...]
    ...</fo:block>
  <fo:block id="idp3348864" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">6.4  Bit Syntax</fo:marker>6.4  Bit Syntax</fo:block><fo:block id="idp3351360" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.4.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The complete specification for the bit syntax appears in the
    <fo:inline font-style="italic">Reference Manual</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In Erlang, a Bin is used for constructing binaries and matching
      binary patterns. A Bin is written with the following syntax:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      &lt;&lt;E1, E2, ... En&gt;&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A Bin is a low-level sequence of bits or bytes.
    The purpose of a Bin is to enable construction of binaries:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Bin = &lt;&lt;E1, E2, ... En&gt;&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All elements must be bound. Or match a binary:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;&lt;E1, E2, ... En&gt;&gt; = Bin </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, <fo:inline font-family="monospace">Bin</fo:inline> is bound and the elements are bound or
      unbound, as in any match.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A Bin does not need to consist of a whole number of bytes.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">bitstring</fo:inline> is a sequence of zero or more bits, where
    the number of bits does not need to be divisible by 8. If the number
    of bits is divisible by 8, the bitstring is also a binary.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each element specifies a certain <fo:inline font-weight="bold">segment</fo:inline> of the bitstring.
      A segment is a set of contiguous bits of the binary (not
      necessarily on a byte boundary). The first element specifies
      the initial segment, the second element specifies the following
      segment, and so on.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following examples illustrate how binaries are constructed,
      or matched, and how elements and tails are specified.</fo:block>

    <fo:block id="idp3361328" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Examples</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 1:</fo:inline> A binary can be constructed from a set of
        constants or a string literal:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Bin11 = &lt;&lt;1, 17, 42&gt;&gt;,
Bin12 = &lt;&lt;"abc"&gt;&gt;</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This gives two binaries of size 3, with the following evaluations:</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">binary_to_list(Bin11)</fo:inline> evaluates to <fo:inline font-family="monospace">[1, 17, 42]</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">binary_to_list(Bin12)</fo:inline> evaluates to <fo:inline font-family="monospace">[97, 98, 99]</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 2:</fo:inline>Similarly, a binary can be constructed
        from a set of bound variables:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
A = 1, B = 17, C = 42,
Bin2 = &lt;&lt;A, B, C:16&gt;&gt;</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This gives a binary of size 4.
      Here, a <fo:inline font-weight="bold">size expression</fo:inline> is used for the variable <fo:inline font-family="monospace">C</fo:inline> to
        specify a 16-bits segment of <fo:inline font-family="monospace">Bin2</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">binary_to_list(Bin2)</fo:inline> evaluates to <fo:inline font-family="monospace">[1, 17, 00, 42]</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 3:</fo:inline> A Bin can also be used for matching.
        <fo:inline font-family="monospace">D</fo:inline>, <fo:inline font-family="monospace">E</fo:inline>, and <fo:inline font-family="monospace">F</fo:inline> are unbound variables, and
        <fo:inline font-family="monospace">Bin2</fo:inline> is bound, as in Example 2:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;&lt;D:16, E, F/binary&gt;&gt; = Bin2</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This gives <fo:inline font-family="monospace">D = 273</fo:inline>, <fo:inline font-family="monospace">E = 00</fo:inline>, and F binds to a binary
        of size 1: <fo:inline font-family="monospace">binary_to_list(F) = [42]</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 4:</fo:inline> The following is a more elaborate example
        of matching. Here, <fo:inline font-family="monospace">Dgram</fo:inline> is bound to the consecutive
        bytes of an IP datagram of IP protocol version 4. The ambition is
      to extract the header and the data of the datagram:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-define(IP_VERSION, 4).
-define(IP_MIN_HDR_LEN, 5).

DgramSize = byte_size(Dgram),
case Dgram of 
    &lt;&lt;?IP_VERSION:4, HLen:4, SrvcType:8, TotLen:16, 
      ID:16, Flgs:3, FragOff:13,
      TTL:8, Proto:8, HdrChkSum:16,
      SrcIP:32,
      DestIP:32, RestDgram/binary&gt;&gt; when HLen&gt;=5, 4*HLen=&lt;DgramSize -&gt;
        OptsLen = 4*(HLen - ?IP_MIN_HDR_LEN),
        &lt;&lt;Opts:OptsLen/binary,Data/binary&gt;&gt; = RestDgram,
    ...
end.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, the segment corresponding to the <fo:inline font-family="monospace">Opts</fo:inline> variable
        has a <fo:inline font-weight="bold">type modifier</fo:inline>, specifying that <fo:inline font-family="monospace">Opts</fo:inline> is to
        bind to a binary. All other variables have the default type
        equal to unsigned integer.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An IP datagram header is of variable length. This length is
        measured in the number of 32-bit words and is given in
        the segment corresponding to <fo:inline font-family="monospace">HLen</fo:inline>. The minimum value of
        <fo:inline font-family="monospace">HLen</fo:inline> is 5. It is the segment corresponding to <fo:inline font-family="monospace">Opts</fo:inline>
        that is variable, so if <fo:inline font-family="monospace">HLen</fo:inline> is equal to 5, <fo:inline font-family="monospace">Opts</fo:inline>
        becomes an empty binary.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The tail variables <fo:inline font-family="monospace">RestDgram</fo:inline> and <fo:inline font-family="monospace">Data</fo:inline> bind to
        binaries, as all tail variables do. Both can bind to empty
        binaries.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The match of <fo:inline font-family="monospace">Dgram</fo:inline> fails if one of the following occurs:</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The first 4-bits segment of <fo:inline font-family="monospace">Dgram</fo:inline> is not equal to 4.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">HLen</fo:inline> is less than 5.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The size of <fo:inline font-family="monospace">Dgram</fo:inline> is less than <fo:inline font-family="monospace">4*HLen</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
    
  <fo:block id="idp3279952" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.4.2 
      Lexical Note</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that "<fo:inline font-family="monospace">B=&lt;&lt;1&gt;&gt;</fo:inline>" will be interpreted as
      "<fo:inline font-family="monospace">B =&lt; &lt;1&gt;&gt;</fo:inline>", which is a syntax error.
      The correct way to write the expression is:
      <fo:inline font-family="monospace">B = &lt;&lt;1&gt;&gt;</fo:inline>.</fo:block>
  <fo:block id="idp3282624" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.4.3 
      Segments</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each segment has the following general syntax:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Value:Size/TypeSpecifierList</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Size</fo:inline> or the <fo:inline font-family="monospace">TypeSpecifier</fo:inline>, or both, can be
      omitted. Thus, the following variants are allowed:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Value</fo:inline></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Value:Size</fo:inline></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Value/TypeSpecifierList</fo:inline></fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default values are used when specifications are missing.
      The default values are described in
      <fo:inline font-style="italic">Defaults</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Value</fo:inline> part is any expression, when used in binary construction.
      Used in binary matching, the <fo:inline font-family="monospace">Value</fo:inline> part must
      be a literal or a variable. For more information about
      the <fo:inline font-family="monospace">Value</fo:inline> part, see
      <fo:inline font-style="italic">Constructing Binaries and Bitstrings</fo:inline>
      and
      <fo:inline font-style="italic">Matching Binaries</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Size</fo:inline> part of the segment multiplied by the unit in
      <fo:inline font-family="monospace">TypeSpecifierList</fo:inline> (described later) gives the number
      of bits for the segment. In construction, <fo:inline font-family="monospace">Size</fo:inline> is any
      expression that evaluates to an integer. In matching,
      <fo:inline font-family="monospace">Size</fo:inline> must be a constant expression or a variable.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">TypeSpecifierList</fo:inline> is a list of type specifiers
      separated by hyphens.</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">Type</fo:block>
      <fo:block-container><fo:block start-indent="2em">The most commonly used types are <fo:inline font-family="monospace">integer</fo:inline>, <fo:inline font-family="monospace">float</fo:inline>, and <fo:inline font-family="monospace">binary</fo:inline>.
      See <fo:inline font-style="italic">Bit Syntax Expressions in the Reference Manual</fo:inline> for a complete description.
</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Signedness</fo:block>
      <fo:block-container><fo:block start-indent="2em">The signedness specification can be either <fo:inline font-family="monospace">signed</fo:inline>
       or <fo:inline font-family="monospace">unsigned</fo:inline>. Notice that signedness only matters for
       matching.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Endianness</fo:block>
      <fo:block-container><fo:block start-indent="2em">The endianness specification can be either <fo:inline font-family="monospace">big</fo:inline>,
      <fo:inline font-family="monospace">little</fo:inline>, or <fo:inline font-family="monospace">native</fo:inline>. Native-endian means that
       the endian is resolved at load time, to be either
       big-endian or little-endian, depending on what is "native"
       for the CPU that the Erlang machine is run on.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Unit</fo:block>
      <fo:block-container><fo:block start-indent="2em">The unit size is given as <fo:inline font-family="monospace">unit:IntegerLiteral</fo:inline>.
       The allowed range is 1-256. It is multiplied by
       the <fo:inline font-family="monospace">Size</fo:inline> specifier to give the effective size of
       the segment. The unit size specifies the alignment
       for binary segments without size.</fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
X:4/little-signed-integer-unit:8</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This element has a total size of 4*8 = 32 bits, and it contains
      a signed integer in little-endian order.</fo:block>
  <fo:block id="idp3307792" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.4.4 
      Defaults</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default type for
     a segment is integer. The default
      type does not depend on the value, even if the value is a
      literal. For example, the default type in <fo:inline font-family="monospace">&lt;&lt;3.14&gt;&gt;</fo:inline> is
      integer, not float.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default <fo:inline font-family="monospace">Size</fo:inline> depends on the type. For integer it is
      8. For float it is 64. For binary it is all of the binary. In
      matching, this default value is only valid for the last
      element. All other binary elements in matching must have a size
      specification.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default unit depends on the the type. For <fo:inline font-family="monospace">integer</fo:inline>,
      <fo:inline font-family="monospace">float</fo:inline>, and <fo:inline font-family="monospace">bitstring</fo:inline> it is 1. For binary it is 8.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default signedness is <fo:inline font-family="monospace">unsigned</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default endianness is <fo:inline font-family="monospace">big</fo:inline>.</fo:block>
  <fo:block id="idp3314960" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.4.5 
      Constructing Binaries and Bitstrings</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the rules for constructing binaries using
      the bit syntax. Unlike when constructing lists or tuples,
      the construction of a binary can fail with a <fo:inline font-family="monospace">badarg</fo:inline>
      exception.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There can be zero or more segments in a binary to be
      constructed. The expression <fo:inline font-family="monospace">&lt;&lt;&gt;&gt;</fo:inline> constructs a zero
      length binary.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each segment in a binary can consist of zero or more bits.
      There are no alignment rules for individual segments of type
      <fo:inline font-family="monospace">integer</fo:inline> and <fo:inline font-family="monospace">float</fo:inline>. For binaries and bitstrings
      without size, the unit specifies the alignment. Since the default
      alignment for the <fo:inline font-family="monospace">binary</fo:inline> type is 8, the size of a binary
      segment must be a multiple of 8 bits, that is, only whole bytes.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;&lt;Bin/binary,Bitstring/bitstring&gt;&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The variable <fo:inline font-family="monospace">Bin</fo:inline> must contain a whole number of bytes,
    because the <fo:inline font-family="monospace">binary</fo:inline> type defaults to <fo:inline font-family="monospace">unit:8</fo:inline>.
    A <fo:inline font-family="monospace">badarg</fo:inline> exception is generated if <fo:inline font-family="monospace">Bin</fo:inline>
    consist of, for example, 17 bits.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Bitstring</fo:inline> variable can consist of
    any number of bits, for example, 0, 1, 8, 11, 17, 42, and so on.
    This is because the default <fo:inline font-family="monospace">unit</fo:inline> for bitstrings is 1.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For clarity, it is recommended not to change the unit
    size for binaries. Instead, use <fo:inline font-family="monospace">binary</fo:inline> when you need byte alignment
    and <fo:inline font-family="monospace">bitstring</fo:inline> when you need bit alignment.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example successfully constructs a bitstring of 7 bits,
      provided that all of X and Y are integers:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;&lt;X:1,Y:6&gt;&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As mentioned earlier, segments have the following general syntax:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Value:Size/TypeSpecifierList</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When constructing binaries, <fo:inline font-family="monospace">Value</fo:inline> and <fo:inline font-family="monospace">Size</fo:inline> can be
      any Erlang expression. However, for syntactical reasons, both
      <fo:inline font-family="monospace">Value</fo:inline> and <fo:inline font-family="monospace">Size</fo:inline> must be enclosed in parenthesis if
      the expression consists of anything more than a single literal
      or a variable. The following gives a compiler syntax error:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;&lt;X+1:8&gt;&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This expression must be rewritten into the following,
    to be accepted by the compiler:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;&lt;(X+1):8&gt;&gt;</fo:block>

    <fo:block id="idp3742176" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Including Literal Strings</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A literal string can be written instead of an element:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;&lt;"hello"&gt;&gt;</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is syntactic sugar for the following:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;&lt;$h,$e,$l,$l,$o&gt;&gt;</fo:block>
    
  <fo:block id="idp3745600" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.4.6 
      Matching Binaries</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the rules for matching binaries, using
      the bit syntax.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There can be zero or more segments in a binary pattern.
      A binary pattern can occur wherever patterns are allowed,
      including inside other patterns. Binary patterns cannot be nested.
      The pattern <fo:inline font-family="monospace">&lt;&lt;&gt;&gt;</fo:inline> matches a zero length binary.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each segment in a binary can consist of zero or more bits.
       A segment of type <fo:inline font-family="monospace">binary</fo:inline> must have a size evenly divisible by 8
    (or divisible by the unit size, if the unit size has been changed).
    A segment of type <fo:inline font-family="monospace">bitstring</fo:inline> has no restrictions on the size.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As mentioned earlier, segments have the following general syntax:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Value:Size/TypeSpecifierList</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When matching <fo:inline font-family="monospace">Value</fo:inline>, value must be either a variable or
      an integer, or a floating point literal. Expressions are not
      allowed.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Size</fo:inline> must be an integer literal, or a previously bound
      variable. The following is not allowed:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
foo(N, &lt;&lt;X:N,T/binary&gt;&gt;) -&gt;
   {X,T}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The two occurrences of <fo:inline font-family="monospace">N</fo:inline> are not related. The compiler
      will complain that the <fo:inline font-family="monospace">N</fo:inline> in the size field is unbound.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The correct way to write this example is as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
foo(N, Bin) -&gt;
   &lt;&lt;X:N,T/binary&gt;&gt; = Bin,
   {X,T}.</fo:block>

    <fo:block id="idp3756320" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Getting the Rest of the Binary or Bitstring</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To match out the rest of a binary, specify a binary field
        without size:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
foo(&lt;&lt;A:8,Rest/binary&gt;&gt;) -&gt;</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The size of the tail must be evenly divisible by 8.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To match out the rest of a bitstring, specify a field
        without size:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
foo(&lt;&lt;A:8,Rest/bitstring&gt;&gt;) -&gt;</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are no restrictions on the number of bits in the tail.</fo:block>
    
  <fo:block id="idp3760880" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">6.4.7 
      Appending to a Binary</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Appending to a binary in an efficient way can be done as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
triples_to_bin(T) -&gt;
    triples_to_bin(T, &lt;&lt;&gt;&gt;).

triples_to_bin([{X,Y,Z} | T], Acc) -&gt;
    triples_to_bin(T, &lt;&lt;Acc/binary,X:32,Y:32,Z:32&gt;&gt;);
triples_to_bin([], Acc) -&gt; 
    Acc.</fo:block>
  <fo:block id="idp3496256" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">7   
      Efficiency Guide </fo:block><fo:block id="idp3624416" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">7.1  Introduction</fo:marker>7.1  Introduction</fo:block><fo:block id="idp3704512" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.1.1 
      Purpose</fo:block>
    

    <fo:block font-style="italic"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"Premature optimization is the root of all evil"
    (D.E. Knuth)</fo:block></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Efficient code can be well-structured and clean, based
    on a sound overall architecture and sound algorithms.
    Efficient code can be highly implementation-code that bypasses
    documented interfaces and takes advantage of obscure quirks in
    the current implementation.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Ideally, your code only contains the first type of efficient
    code. If that turns out to be too slow, profile the application
    to find out where the performance bottlenecks are and optimize only the
    bottlenecks. Let other code stay as clean as possible.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This Efficiency Guide cannot really teach you how to write efficient
    code. It can give you a few pointers about what to avoid and what to use,
    and some understanding of how certain language features are implemented.
    This guide does not include general tips about optimization that
    works in any language, such as moving common calculations out of loops.</fo:block>
  <fo:block id="idp4052688" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.1.2 
      Prerequisites</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that you are familiar with the Erlang programming
    language and the OTP concepts.</fo:block>
  <fo:block id="idp2249936" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">7.2  The Seven Myths of Erlang Performance</fo:marker>7.2  The Seven Myths of Erlang Performance</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some truths seem to live on well beyond their best-before date,
  perhaps because "information" spreads faster from person-to-person
  than a single release note that says, for example, that body-recursive
  calls have become faster.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section tries to kill the old truths (or semi-truths) that have
  become myths.</fo:block><fo:block id="idp3435536" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.2.1 
      Myth: Tail-Recursive Functions are Much Faster
    Than Recursive Functions</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">According to the myth,
    using a tail-recursive function that builds a list in reverse
    followed by a call to <fo:inline font-family="monospace">lists:reverse/1</fo:inline> is faster than
    a body-recursive function that builds the list in correct order;
    the reason being that body-recursive functions use more memory than
    tail-recursive functions.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">That was true to some extent before R12B. It was even more true
    before R7B. Today, not so much. A body-recursive function
    generally uses the same amount of memory as a tail-recursive
    function. It is generally not possible to predict whether the
    tail-recursive or the body-recursive version will be
    faster. Therefore, use the version that makes your code cleaner
    (hint: it is usually the body-recursive version).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a more thorough discussion about tail and body recursion,
    see <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Erlang's Tail Recursion is Not a Silver Bullet</fo:basic-link></fo:inline>.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A tail-recursive function that does not need to reverse the
    list at the end is faster than a body-recursive function,
    as are tail-recursive functions that do not construct any terms at all
    (for example, a function that sums all integers in a list).</fo:block></fo:block>
  <fo:block id="idp3940928" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.2.2 
      Myth: Operator "++" is Always Bad</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">++</fo:inline> operator has, somewhat undeservedly, got a bad reputation.
    It probably has something to do with code like the following,
    which is the most inefficient way there is to reverse a list:</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
naive_reverse([H|T]) -&gt;
    naive_reverse(T)++[H];
naive_reverse([]) -&gt;
    [].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As the <fo:inline font-family="monospace">++</fo:inline> operator copies its left operand, the result
    is copied repeatedly, leading to quadratic complexity.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">But using <fo:inline font-family="monospace">++</fo:inline> as follows is not bad:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">OK</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
naive_but_ok_reverse([H|T], Acc) -&gt;
    naive_but_ok_reverse(T, [H]++Acc);
naive_but_ok_reverse([], Acc) -&gt;
    Acc.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each list element is copied only once.
    The growing result <fo:inline font-family="monospace">Acc</fo:inline> is the right operand
    for the <fo:inline font-family="monospace">++</fo:inline> operator, and it is <fo:inline font-weight="bold">not</fo:inline> copied.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Experienced Erlang programmers would write as follows:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
vanilla_reverse([H|T], Acc) -&gt;
    vanilla_reverse(T, [H|Acc]);
vanilla_reverse([], Acc) -&gt;
    Acc.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is slightly more efficient because here you do not build a
    list element only to copy it directly. (Or it would be more efficient
    if the compiler did not automatically rewrite <fo:inline font-family="monospace">[H]++Acc</fo:inline>
    to <fo:inline font-family="monospace">[H|Acc]</fo:inline>.)</fo:block>
  <fo:block id="idp3508800" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.2.3 
      Myth: Strings are Slow</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">String handling can be slow if done improperly.
    In Erlang, you need to think a little more about how the strings
    are used and choose an appropriate representation. If you
    use regular expressions, use the
    <fo:inline font-style="italic">re</fo:inline> module in STDLIB
    instead of the obsolete <fo:inline font-family="monospace">regexp</fo:inline> module.</fo:block>
  <fo:block id="idp4049504" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.2.4 
      Myth: Repairing a Dets File is Very Slow</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The repair time is still proportional to the number of records
    in the file, but Dets repairs used to be much slower in the past.
    Dets has been massively rewritten and improved.</fo:block>
  <fo:block id="idp4274352" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.2.5 
      Myth: BEAM is a Stack-Based Byte-Code Virtual Machine
    (and Therefore Slow)</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">BEAM is a register-based virtual machine. It has 1024 virtual registers
    that are used for holding temporary values and for passing arguments when
    calling functions. Variables that need to survive a function call are saved
    to the stack.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">BEAM is a threaded-code interpreter. Each instruction is word pointing
    directly to executable C-code, making instruction dispatching very fast.</fo:block>
  <fo:block id="idp3626784" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.2.6 
      Myth: Use "_" to Speed Up Your Program When a Variable
    is Not Used</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">That was once true, but from R6B the BEAM compiler can see
    that a variable is not used.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Similarly, trivial transformations on the source-code level
    such as converting a <fo:inline font-family="monospace">case</fo:inline> statement to clauses at the
    top-level of the function seldom makes any difference to the
    generated code.</fo:block>
  <fo:block id="idp1465296" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.2.7 
      Myth: A NIF Always Speeds Up Your Program</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Rewriting Erlang code to a NIF to make it faster should be
    seen as a last resort. It is only guaranteed to be dangerous,
    but not guaranteed to speed up the program.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Doing too much work in each NIF call will
    <fo:inline font-style="italic">degrade responsiveness
    of the VM</fo:inline>. Doing too little work may mean that
    the gain of the faster processing in the NIF is eaten up by
    the overhead of calling the NIF and checking the arguments.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Be sure to read about
    <fo:inline font-style="italic">Long-running NIFs</fo:inline>
    before writing a NIF.</fo:block>
  <fo:block id="idp2326512" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">7.3  Common Caveats</fo:marker>7.3  Common Caveats</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section lists a few modules and BIFs to watch out for, not only
  from a performance point of view.</fo:block><fo:block id="idp4046592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.3.1 
      Timer Module</fo:block>
     

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creating timers using <fo:inline font-style="italic">erlang:send_after/3</fo:inline>
     and
     <fo:inline font-style="italic">erlang:start_timer/3</fo:inline>
,
     is much more efficient than using the timers provided by the
     <fo:inline font-style="italic">timer</fo:inline> module in STDLIB.
     The <fo:inline font-family="monospace">timer</fo:inline> module uses a separate process to manage the timers.
     That process can easily become overloaded if many processes
     create and cancel timers frequently (especially when using the
     SMP emulator).</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions in the <fo:inline font-family="monospace">timer</fo:inline> module that do not manage timers
     (such as <fo:inline font-family="monospace">timer:tc/3</fo:inline> or <fo:inline font-family="monospace">timer:sleep/1</fo:inline>), do not call the
     timer-server process and are therefore harmless.</fo:block>
  <fo:block id="idp3420576" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.3.2 
      list_to_atom/1</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Atoms are not garbage-collected. Once an atom is created, it is never
    removed. The emulator terminates if the limit for the number
    of atoms (1,048,576 by default) is reached.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Therefore, converting arbitrary input strings to atoms can be
    dangerous in a system that runs continuously.
    If only certain well-defined atoms are allowed as input,
    <fo:inline font-style="italic">list_to_existing_atom/1</fo:inline>
    can be used to
    to guard against a denial-of-service attack. (All atoms that are allowed
    must have been created earlier, for example, by simply using all of them
    in a module and loading that module.)</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using <fo:inline font-family="monospace">list_to_atom/1</fo:inline> to construct an atom that is passed to
    <fo:inline font-family="monospace">apply/3</fo:inline> as follows, is quite expensive and not recommended
    in time-critical code:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
apply(list_to_atom("some_prefix"++Var), foo, Args)</fo:block>
  <fo:block id="idp3628464" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.3.3 
      length/1</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time for calculating the length of a list is proportional to the
    length of the list, as opposed to <fo:inline font-family="monospace">tuple_size/1</fo:inline>, <fo:inline font-family="monospace">byte_size/1</fo:inline>,
    and <fo:inline font-family="monospace">bit_size/1</fo:inline>, which all execute in constant time.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally, there is no need to worry about the speed of <fo:inline font-family="monospace">length/1</fo:inline>,
    because it is efficiently implemented in C. In time-critical code,
    you might want to avoid it if the input list could potentially be very
    long.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some uses of <fo:inline font-family="monospace">length/1</fo:inline> can be replaced by matching.
    For example, the following code:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
foo(L) when length(L) &gt;= 3 -&gt;
    ...</fo:block>    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">can be rewritten to:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
foo([_,_,_|_]=L) -&gt;
   ...</fo:block>    

   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One slight difference is that <fo:inline font-family="monospace">length(L)</fo:inline> fails if <fo:inline font-family="monospace">L</fo:inline>
   is an improper list, while the pattern in the second code fragment
   accepts an improper list.</fo:block>
  <fo:block id="idp3645056" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.3.4 
      setelement/3</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">setelement/3</fo:inline>
    copies the tuple it modifies. Therefore, updating a tuple in a loop
    using <fo:inline font-family="monospace">setelement/3</fo:inline> creates a new copy of the tuple every time.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is one exception to the rule that the tuple is copied.
    If the compiler clearly can see that destructively updating the tuple would
    give the same result as if the tuple was copied, the call to
    <fo:inline font-family="monospace">setelement/3</fo:inline> is replaced with a special destructive <fo:inline font-family="monospace">setelement</fo:inline>
    instruction. In the following code sequence, the first <fo:inline font-family="monospace">setelement/3</fo:inline>
    call copies the tuple and modifies the ninth element:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
multiple_setelement(T0) -&gt;
    T1 = setelement(9, T0, bar),
    T2 = setelement(7, T1, foobar),
    setelement(5, T2, new_value).</fo:block>    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The two following <fo:inline font-family="monospace">setelement/3</fo:inline> calls modify
    the tuple in place.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the optimization to be applied, <fo:inline font-weight="bold">all</fo:inline> the followings conditions
    must be true:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The indices must be integer literals, not variables or expressions.</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The indices must be given in descending order.</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>There must be no calls to another function in between the calls to
    <fo:inline font-family="monospace">setelement/3</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The tuple returned from one <fo:inline font-family="monospace">setelement/3</fo:inline> call must only be used
    in the subsequent call to <fo:inline font-family="monospace">setelement/3</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the code cannot be structured as in the <fo:inline font-family="monospace">multiple_setelement/1</fo:inline>
    example, the best way to modify multiple elements in a large tuple is to
    convert the tuple to a list, modify the list, and convert it back to
    a tuple.</fo:block>
  <fo:block id="idp4272880" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.3.5 
      size/1</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">size/1</fo:inline> returns the size for both tuples and binaries.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using the BIFs <fo:inline font-family="monospace">tuple_size/1</fo:inline> and <fo:inline font-family="monospace">byte_size/1</fo:inline>
    gives the compiler and the runtime system more opportunities for
    optimization. Another advantage is that the BIFs give Dialyzer more
    type information.</fo:block>
  <fo:block id="idp3848432" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.3.6 
      split_binary/2</fo:block>
    
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is usually more efficient to split a binary using matching
      instead of calling the <fo:inline font-family="monospace">split_binary/2</fo:inline> function.
      Furthermore, mixing bit syntax matching and <fo:inline font-family="monospace">split_binary/2</fo:inline>
      can prevent some optimizations of bit syntax matching.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        &lt;&lt;Bin1:Num/binary,Bin2/binary&gt;&gt; = Bin,</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        {Bin1,Bin2} = split_binary(Bin, Num)</fo:block>
   <fo:block id="idp3407520" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.3.7 
      Operator "--"</fo:block>
    
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The "<fo:inline font-family="monospace">--</fo:inline>" operator has a complexity
     proportional to the product of the length of its operands.
     This means that the operator is very slow if both of its operands
     are long lists:</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        HugeList1 -- HugeList2</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Instead use the <fo:inline font-style="italic">ordsets</fo:inline>
     module in STDLIB:</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        HugeSet1 = ordsets:from_list(HugeList1),
        HugeSet2 = ordsets:from_list(HugeList2),
        ordsets:subtract(HugeSet1, HugeSet2)</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Obviously, that code does not work if the original order
     of the list is important. If the order of the list must be
     preserved, do as follows:</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        Set = gb_sets:from_list(HugeList2),
        [E || E &lt;- HugeList1, not gb_sets:is_element(E, Set)]</fo:block>

     <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This code behaves differently from "<fo:inline font-family="monospace">--</fo:inline>"
     if the lists contain duplicate elements (one occurrence
     of an element in HugeList2 removes <fo:inline font-weight="bold">all</fo:inline>
     occurrences in HugeList1.)</fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, this code compares lists elements using the
     "<fo:inline font-family="monospace">==</fo:inline>" operator, while "<fo:inline font-family="monospace">--</fo:inline>" uses the "<fo:inline font-family="monospace">=:=</fo:inline>" operator.
     If that difference is important, <fo:inline font-family="monospace">sets</fo:inline> can be used instead of
     <fo:inline font-family="monospace">gb_sets</fo:inline>, but <fo:inline font-family="monospace">sets:from_list/1</fo:inline> is much
     slower than <fo:inline font-family="monospace">gb_sets:from_list/1</fo:inline> for long lists.</fo:block></fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using the "<fo:inline font-family="monospace">--</fo:inline>" operator to delete an element
     from a list is not a performance problem:</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">OK</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        HugeList1 -- [Element]</fo:block>

   <fo:block id="idp4269648" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">7.4  Constructing and Matching Binaries</fo:marker>7.4  Constructing and Matching Binaries</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Binaries can be efficiently built in the following way:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
my_list_to_binary(List) -&gt;
    my_list_to_binary(List, &lt;&lt;&gt;&gt;).

my_list_to_binary([H|T], Acc) -&gt;
    my_list_to_binary(T, &lt;&lt;Acc/binary,H&gt;&gt;);
my_list_to_binary([], Acc) -&gt;
    Acc.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Binaries can be efficiently matched like this:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
my_binary_to_list(&lt;&lt;H,T/binary&gt;&gt;) -&gt;
    [H|my_binary_to_list(T)];
my_binary_to_list(&lt;&lt;&gt;&gt;) -&gt; [].</fo:block><fo:block id="idp3581424" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.4.1 
      How Binaries are Implemented</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Internally, binaries and bitstrings are implemented in the same way.
    In this section, they are called <fo:inline font-weight="bold">binaries</fo:inline> because that is what
    they are called in the emulator source code.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Four types of binary objects are available internally:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two are containers for binary data and are called:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Refc binaries</fo:inline> (short for
	<fo:inline font-weight="bold">reference-counted binaries</fo:inline>)</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Heap binaries</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two are merely references to a part of a binary and
      are called:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">sub binaries</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">match contexts</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block id="idp3615936" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Refc Binaries</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Refc binaries consist of two parts:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>An object stored on the process heap, called a
	<fo:inline font-weight="bold">ProcBin</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The binary object itself, stored outside all process
	heaps</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The binary object can be referenced by any number of ProcBins from any
    number of processes. The object contains a reference counter to keep track
    of the number of references, so that it can be removed when the last
    reference disappears.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All ProcBin objects in a process are part of a linked list, so that
    the garbage collector can keep track of them and decrement the reference
    counters in the binary when a ProcBin disappears.</fo:block>
    

    <fo:block id="idp3621072" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Heap Binaries</fo:block>
      
      
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Heap binaries are small binaries, up to 64 bytes, and are stored
    directly on the process heap. They are copied when the process is
    garbage-collected and when they are sent as a message. They do not
    require any special handling by the garbage collector.</fo:block>
    

    <fo:block id="idp3622672" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Sub Binaries</fo:block>
      
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reference objects <fo:inline font-weight="bold">sub binaries</fo:inline> and
    <fo:inline font-weight="bold">match contexts</fo:inline> can reference part of
    a refc binary or heap binary.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">sub binary</fo:inline>
    is created by <fo:inline font-family="monospace">split_binary/2</fo:inline> and when
    a binary is matched out in a binary pattern. A sub binary is a reference
    into a part of another binary (refc or heap binary, but never into another
    sub binary). Therefore, matching out a binary is relatively cheap because
    the actual binary data is never copied.</fo:block>
    

    <fo:block id="idp3590944" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Match Context</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">match context</fo:inline> is similar to a sub binary, but is
      optimized for binary matching. For example, it contains a direct
      pointer to the binary data. For each field that is matched out of
      a binary, the position in the match context is incremented.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler tries to avoid generating code that
    creates a sub binary, only to shortly afterwards create a new match
    context and discard the sub binary. Instead of creating a sub binary,
    the match context is kept.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler can only do this optimization if it knows
    that the match context will not be shared. If it would be shared, the
    functional properties (also called referential transparency) of Erlang
    would break.</fo:block>
    
  <fo:block id="idp3594992" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.4.2 
      Constructing Binaries</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Appending to a binary or bitstring
    is specially optimized by the <fo:inline font-weight="bold">runtime system</fo:inline>:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;&lt;Binary/binary, ...&gt;&gt;
&lt;&lt;Binary/bitstring, ...&gt;&gt;</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As the runtime system handles the optimization (instead of
    the compiler), there are very few circumstances in which the optimization
    does not work.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To explain how it works, let us examine the following code line
    by line:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Bin0 = &lt;&lt;0&gt;&gt;,                    %% 1
Bin1 = &lt;&lt;Bin0/binary,1,2,3&gt;&gt;,    %% 2
Bin2 = &lt;&lt;Bin1/binary,4,5,6&gt;&gt;,    %% 3
Bin3 = &lt;&lt;Bin2/binary,7,8,9&gt;&gt;,    %% 4
Bin4 = &lt;&lt;Bin1/binary,17&gt;&gt;,       %% 5 !!!
{Bin4,Bin3}                      %% 6</fo:block>

  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Line 1 (marked with the <fo:inline font-family="monospace">%% 1</fo:inline> comment), assigns
    a <fo:inline font-style="italic">heap binary</fo:inline> to
    the <fo:inline font-family="monospace">Bin0</fo:inline> variable.</fo:block></fo:list-item-body></fo:list-item>

    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Line 2 is an append operation. As <fo:inline font-family="monospace">Bin0</fo:inline>
    has not been involved in an append operation,
    a new <fo:inline font-style="italic">refc binary</fo:inline>
    is created and the contents of <fo:inline font-family="monospace">Bin0</fo:inline> is copied
    into it. The <fo:inline font-weight="bold">ProcBin</fo:inline> part of the refc binary has
    its size set to the size of the data stored in the binary, while
    the binary object has extra space allocated.
    The size of the binary object is either twice the
    size of <fo:inline font-family="monospace">Bin1</fo:inline> or 256, whichever is larger. In this case
    it is 256.</fo:block></fo:list-item-body></fo:list-item>

    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Line 3 is more interesting.
    <fo:inline font-family="monospace">Bin1</fo:inline> <fo:inline font-weight="bold">has</fo:inline> been used in an append operation,
    and it has 252 bytes of unused storage at the end, so the 3 new
    bytes are stored there.</fo:block></fo:list-item-body></fo:list-item>

    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Line 4. The same applies here. There are 249 bytes left,
    so there is no problem storing another 3 bytes.</fo:block></fo:list-item-body></fo:list-item>

    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Line 5. Here, something <fo:inline font-weight="bold">interesting</fo:inline> happens. Notice
    that the result is not appended to the previous result in <fo:inline font-family="monospace">Bin3</fo:inline>,
    but to <fo:inline font-family="monospace">Bin1</fo:inline>. It is expected that <fo:inline font-family="monospace">Bin4</fo:inline> will be assigned
    the value <fo:inline font-family="monospace">&lt;&lt;0,1,2,3,17&gt;&gt;</fo:inline>. It is also expected that
    <fo:inline font-family="monospace">Bin3</fo:inline> will retain its value
    (<fo:inline font-family="monospace">&lt;&lt;0,1,2,3,4,5,6,7,8,9&gt;&gt;</fo:inline>).
    Clearly, the runtime system cannot write byte <fo:inline font-family="monospace">17</fo:inline> into the binary,
    because that would change the value of <fo:inline font-family="monospace">Bin3</fo:inline> to
    <fo:inline font-family="monospace">&lt;&lt;0,1,2,3,4,17,6,7,8,9&gt;&gt;</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime system sees that <fo:inline font-family="monospace">Bin1</fo:inline> is the result
    from a previous append operation (not from the latest append operation),
    so it <fo:inline font-weight="bold">copies</fo:inline> the contents of <fo:inline font-family="monospace">Bin1</fo:inline> to a new binary,
    reserve extra storage, and so on. (Here is not explained how the
    runtime system can know that it is not allowed to write into <fo:inline font-family="monospace">Bin1</fo:inline>;
    it is left as an exercise to the curious reader to figure out how it is
    done by reading the emulator sources, primarily <fo:inline font-family="monospace">erl_bits.c</fo:inline>.)</fo:block>

    <fo:block id="idp4208432" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Circumstances That Force Copying</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The optimization of the binary append operation requires that
      there is a <fo:inline font-weight="bold">single</fo:inline> ProcBin and a <fo:inline font-weight="bold">single reference</fo:inline> to the
      ProcBin for the binary. The reason is that the binary object can be
      moved (reallocated) during an append operation, and when that happens,
      the pointer in the ProcBin must be updated. If there would be more than
      one ProcBin pointing to the binary object, it would not be possible to
      find and update all of them.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Therefore, certain operations on a binary mark it so that
      any future append operation will be forced to copy the binary.
      In most cases, the binary object will be shrunk at the same time 
      to reclaim the extra space allocated for growing.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When appending to a binary as follows, only the binary returned
      from the latest append operation will support further cheap append
      operations:</fo:block>
      
  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Bin = &lt;&lt;Bin0,...&gt;&gt;</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the code fragment in the beginning of this section,
      appending to <fo:inline font-family="monospace">Bin</fo:inline> will be cheap, while appending to <fo:inline font-family="monospace">Bin0</fo:inline>
      will force the creation of a new binary and copying of the contents
      of <fo:inline font-family="monospace">Bin0</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a binary is sent as a message to a process or port, the binary
      will be shrunk and any further append operation will copy the binary
      data into a new binary. For example, in the following code fragment
      <fo:inline font-family="monospace">Bin1</fo:inline> will be copied in the third line:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Bin1 = &lt;&lt;Bin0,...&gt;&gt;,
PortOrPid ! Bin1,
Bin = &lt;&lt;Bin1,...&gt;&gt;  %% Bin1 will be COPIED
</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same happens if you insert a binary into an Ets
      table, send it to a port using <fo:inline font-family="monospace">erlang:port_command/2</fo:inline>, or
      pass it to
      <fo:inline font-style="italic">enif_inspect_binary</fo:inline>
      in a NIF.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Matching a binary will also cause it to shrink and the next append
      operation will copy the binary data:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Bin1 = &lt;&lt;Bin0,...&gt;&gt;,
&lt;&lt;X,Y,Z,T/binary&gt;&gt; = Bin1,
Bin = &lt;&lt;Bin1,...&gt;&gt;  %% Bin1 will be COPIED
</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reason is that a
      <fo:inline font-style="italic">match context</fo:inline>
      contains a direct pointer to the binary data.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a process simply keeps binaries (either in "loop data" or in the
      process
      dictionary), the garbage collector can eventually shrink the binaries.
      If only one such binary is kept, it will not be shrunk. If the process
      later appends to a binary that has been shrunk, the binary object will
      be reallocated to make place for the data to be appended.</fo:block>
    
  <fo:block id="idp4221808" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.4.3 
      Matching Binaries</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us revisit the example in the beginning of the previous section:</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
my_binary_to_list(&lt;&lt;H,T/binary&gt;&gt;) -&gt;
    [H|my_binary_to_list(T)];
my_binary_to_list(&lt;&lt;&gt;&gt;) -&gt; [].</fo:block>  

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first time <fo:inline font-family="monospace">my_binary_to_list/1</fo:inline> is called,
  a <fo:inline font-style="italic">match context</fo:inline>
  is created. The match context points to the first
  byte of the binary. 1 byte is matched out and the match context
  is updated to point to the second byte in the binary.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At this point it would make sense to create a
  <fo:inline font-style="italic">sub binary</fo:inline>,
  but in this particular example the compiler sees that
  there will soon be a call to a function (in this case,
  to <fo:inline font-family="monospace">my_binary_to_list/1</fo:inline> itself) that immediately will
  create a new match context and discard the sub binary.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Therefore <fo:inline font-family="monospace">my_binary_to_list/1</fo:inline> calls itself
  with the match context instead of with a sub binary. The instruction
  that initializes the matching operation basically does nothing
  when it sees that it was passed a match context instead of a binary.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the end of the binary is reached and the second clause matches,
  the match context will simply be discarded (removed in the next
  garbage collection, as there is no longer any reference to it).</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To summarize, <fo:inline font-family="monospace">my_binary_to_list/1</fo:inline> only needs to create
  <fo:inline font-weight="bold">one</fo:inline> match context and no sub binaries.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the match context in <fo:inline font-family="monospace">my_binary_to_list/1</fo:inline>
  was discarded when the entire binary had been traversed. What happens if
  the iteration stops before it has reached the end of the binary? Will
  the optimization still work?</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
after_zero(&lt;&lt;0,T/binary&gt;&gt;) -&gt;
    T;
after_zero(&lt;&lt;_,T/binary&gt;&gt;) -&gt;
    after_zero(T);
after_zero(&lt;&lt;&gt;&gt;) -&gt;
    &lt;&lt;&gt;&gt;.
  </fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Yes, it will. The compiler will remove the building of the sub binary in
  the second clause:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
after_zero(&lt;&lt;_,T/binary&gt;&gt;) -&gt;
    after_zero(T);
...</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">But it will generate code that builds a sub binary in the first clause:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
after_zero(&lt;&lt;0,T/binary&gt;&gt;) -&gt;
    T;
...</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Therefore, <fo:inline font-family="monospace">after_zero/1</fo:inline> builds one match context and one sub binary
  (assuming it is passed a binary that contains a zero byte).</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Code like the following will also be optimized:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
all_but_zeroes_to_list(Buffer, Acc, 0) -&gt;
    {lists:reverse(Acc),Buffer};
all_but_zeroes_to_list(&lt;&lt;0,T/binary&gt;&gt;, Acc, Remaining) -&gt;
    all_but_zeroes_to_list(T, Acc, Remaining-1);
all_but_zeroes_to_list(&lt;&lt;Byte,T/binary&gt;&gt;, Acc, Remaining) -&gt;
    all_but_zeroes_to_list(T, [Byte|Acc], Remaining-1).</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler removes building of sub binaries in the second and third
  clauses, and it adds an instruction to the first clause that converts
  <fo:inline font-family="monospace">Buffer</fo:inline> from a match context to a sub binary (or do nothing if
  <fo:inline font-family="monospace">Buffer</fo:inline> is a binary already).</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before you begin to think that the compiler can optimize any binary
  patterns, the following function cannot be optimized by the compiler
  (currently, at least):</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
non_opt_eq([H|T1], &lt;&lt;H,T2/binary&gt;&gt;) -&gt;
    non_opt_eq(T1, T2);
non_opt_eq([_|_], &lt;&lt;_,_/binary&gt;&gt;) -&gt;
    false;
non_opt_eq([], &lt;&lt;&gt;&gt;) -&gt;
    true.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It was mentioned earlier that the compiler can only delay creation of
  sub binaries if it knows that the binary will not be shared. In this case,
  the compiler cannot know.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Soon it is shown how to rewrite <fo:inline font-family="monospace">non_opt_eq/2</fo:inline> so that the delayed
  sub binary optimization can be applied, and more importantly, it is shown
  how you can find out whether your code can be optimized.</fo:block>

  <fo:block id="idp4243136" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Option bin_opt_info</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use the <fo:inline font-family="monospace">bin_opt_info</fo:inline> option to have the compiler print a lot of 
    information about binary optimizations. It can be given either to the
    compiler or <fo:inline font-family="monospace">erlc</fo:inline>:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erlc +bin_opt_info Mod.erl</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or passed through an environment variable:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
export ERL_COMPILER_OPTIONS=bin_opt_info</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the <fo:inline font-family="monospace">bin_opt_info</fo:inline> is not meant to be a permanent
    option added to your <fo:inline font-family="monospace">Makefile</fo:inline>s, because all messages that it
    generates cannot be eliminated. Therefore, passing the option through
    the environment is in most cases the most practical approach.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The warnings look as follows:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
./efficiency_guide.erl:60: Warning: NOT OPTIMIZED: sub binary is used or returned
./efficiency_guide.erl:62: Warning: OPTIMIZED: creation of sub binary delayed</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To make it clearer exactly what code the warnings refer to, the
    warnings in the following examples are inserted as comments
    after the clause they refer to, for example:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
after_zero(&lt;&lt;0,T/binary&gt;&gt;) -&gt;
         %% NOT OPTIMIZED: sub binary is used or returned
    T;
after_zero(&lt;&lt;_,T/binary&gt;&gt;) -&gt;
         %% OPTIMIZED: creation of sub binary delayed
    after_zero(T);
after_zero(&lt;&lt;&gt;&gt;) -&gt;
    &lt;&lt;&gt;&gt;.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The warning for the first clause says that the creation of a sub
    binary cannot be delayed, because it will be returned.
    The warning for the second clause says that a sub binary will not be
    created (yet).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us revisit the earlier example of the code that could not
    be optimized and find out why:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
non_opt_eq([H|T1], &lt;&lt;H,T2/binary&gt;&gt;) -&gt;
        %% INFO: matching anything else but a plain variable to
	%%    the left of binary pattern will prevent delayed 
	%%    sub binary optimization;
	%%    SUGGEST changing argument order
        %% NOT OPTIMIZED: called function non_opt_eq/2 does not
	%%    begin with a suitable binary matching instruction
    non_opt_eq(T1, T2);
non_opt_eq([_|_], &lt;&lt;_,_/binary&gt;&gt;) -&gt;
    false;
non_opt_eq([], &lt;&lt;&gt;&gt;) -&gt;
    true.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler emitted two warnings. The <fo:inline font-family="monospace">INFO</fo:inline> warning refers
    to the function <fo:inline font-family="monospace">non_opt_eq/2</fo:inline> as a callee, indicating that any
    function that call <fo:inline font-family="monospace">non_opt_eq/2</fo:inline> cannot make delayed sub binary
    optimization. There is also a suggestion to change argument order.
    The second warning (that happens to refer to the same line) refers to
    the construction of the sub binary itself.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Soon another example will show the difference between the
    <fo:inline font-family="monospace">INFO</fo:inline> and <fo:inline font-family="monospace">NOT OPTIMIZED</fo:inline> warnings somewhat clearer, but
    let us first follow the suggestion to change argument order:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
opt_eq(&lt;&lt;H,T1/binary&gt;&gt;, [H|T2]) -&gt;
        %% OPTIMIZED: creation of sub binary delayed
    opt_eq(T1, T2);
opt_eq(&lt;&lt;_,_/binary&gt;&gt;, [_|_]) -&gt;
    false;
opt_eq(&lt;&lt;&gt;&gt;, []) -&gt;
    true.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler gives a warning for the following code fragment:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
match_body([0|_], &lt;&lt;H,_/binary&gt;&gt;) -&gt;
        %% INFO: matching anything else but a plain variable to
	%%    the left of binary pattern will prevent delayed 
	%%    sub binary optimization;
	%%    SUGGEST changing argument order
    done;
...</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The warning means that <fo:inline font-weight="bold">if</fo:inline> there is a call to <fo:inline font-family="monospace">match_body/2</fo:inline>
    (from another clause in <fo:inline font-family="monospace">match_body/2</fo:inline> or another function), the
    delayed sub binary optimization will not be possible. More warnings will
    occur for any place where a sub binary is matched out at the end of and
    passed as the second argument to <fo:inline font-family="monospace">match_body/2</fo:inline>, for example:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
match_head(List, &lt;&lt;_:10,Data/binary&gt;&gt;) -&gt;
        %% NOT OPTIMIZED: called function match_body/2 does not
	%%     begin with a suitable binary matching instruction
    match_body(List, Data).</fo:block>

  

  <fo:block id="idp4291392" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Unused Variables</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler figures out if a variable is unused. The same
    code is generated for each of the following functions:</fo:block>

  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
count1(&lt;&lt;_,T/binary&gt;&gt;, Count) -&gt; count1(T, Count+1);
count1(&lt;&lt;&gt;&gt;, Count) -&gt; Count.

count2(&lt;&lt;H,T/binary&gt;&gt;, Count) -&gt; count2(T, Count+1);
count2(&lt;&lt;&gt;&gt;, Count) -&gt; Count.

count3(&lt;&lt;_H,T/binary&gt;&gt;, Count) -&gt; count3(T, Count+1);
count3(&lt;&lt;&gt;&gt;, Count) -&gt; Count.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In each iteration, the first 8 bits in the binary will be skipped,
  not matched out.</fo:block>
  
  <fo:block id="idp4294368" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.4.4 
      Historical Note</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Binary handling was significantly improved in R12B. Because
    code that was efficient in R11B might not be efficient in R12B,
    and vice versa, earlier revisions of this Efficiency Guide contained
    some information about binary handling in R11B.</fo:block>
  <fo:block id="idp4299872" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">7.5  List Handling</fo:marker>7.5  List Handling</fo:block><fo:block id="idp4302688" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.5.1 
      Creating a List</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lists can only be built starting from the end and attaching list
    elements at the beginning. If you use the "<fo:inline font-family="monospace">++</fo:inline>" operator as
    follows, a new list is created that is a copy of the elements in
    <fo:inline font-family="monospace">List1</fo:inline>, followed by <fo:inline font-family="monospace">List2</fo:inline>:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
List1 ++ List2</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Looking at how <fo:inline font-family="monospace">lists:append/1</fo:inline> or <fo:inline font-family="monospace">++</fo:inline> would be
    implemented in plain Erlang, clearly the first list is copied:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
append([H|T], Tail) -&gt;
    [H|append(T, Tail)];
append([], Tail) -&gt;
    Tail.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When recursing and building a list, it is important to ensure
    that you attach the new elements to the beginning of the list. In
    this way, you will build <fo:inline font-weight="bold">one</fo:inline> list, not hundreds or thousands
    of copies of the growing result list.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us first see how it is not to be done:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
bad_fib(N) -&gt;
    bad_fib(N, 0, 1, []).

bad_fib(0, _Current, _Next, Fibs) -&gt;
    Fibs;
bad_fib(N, Current, Next, Fibs) -&gt; 
    bad_fib(N - 1, Next, Current + Next, Fibs ++ [Current]).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here more than one list is built. In each iteration step a new list
    is created that is one element longer than the new previous list.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To avoid copying the result in each iteration, build the list in
    reverse order and reverse the list when you are done:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
tail_recursive_fib(N) -&gt;
    tail_recursive_fib(N, 0, 1, []).

tail_recursive_fib(0, _Current, _Next, Fibs) -&gt;
    lists:reverse(Fibs);
tail_recursive_fib(N, Current, Next, Fibs) -&gt; 
    tail_recursive_fib(N - 1, Next, Current + Next, [Current|Fibs]).</fo:block>

  <fo:block id="idp4313728" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.5.2 
      List Comprehensions</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lists comprehensions still have a reputation for being slow.
    They used to be implemented using funs, which used to be slow.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list comprehension:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[Expr(E) || E &lt;- List]</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">is basically translated to a local function:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
'lc^0'([E|Tail], Expr) -&gt;
    [Expr(E)|'lc^0'(Tail, Expr)];
'lc^0'([], _Expr) -&gt; [].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the result of the list comprehension will <fo:inline font-weight="bold">obviously</fo:inline>
    not be used, a list will not be constructed. For example, in this code:</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[io:put_chars(E) || E &lt;- List],
ok.</fo:block>
 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or in this code:</fo:block>
   
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
case Var of
    ... -&gt;
        [io:put_chars(E) || E &lt;- List];
    ... -&gt;
end,
some_function(...),
...</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">the value is not assigned to a variable, not passed to another function,
    and not returned. This means that there is no need to construct a list and
    the compiler will simplify the code for the list comprehension to:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
'lc^0'([E|Tail], Expr) -&gt;
    Expr(E),
    'lc^0'(Tail, Expr);
'lc^0'([], _Expr) -&gt; [].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler also understands that assigning to '_' means that
    the value will not used. Therefore, the code in the following example
    will also be optimized:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
_ = [io:put_chars(E) || E &lt;- List],
ok.</fo:block>

  <fo:block id="idp4323216" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.5.3 
      Deep and Flat Lists</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">lists:flatten/1</fo:inline>
    builds an entirely new list. It is therefore expensive, and even
    <fo:inline font-weight="bold">more</fo:inline> expensive than the <fo:inline font-family="monospace">++</fo:inline> operator (which copies its
    left argument, but not its right argument).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following situations, you can easily avoid calling
    <fo:inline font-family="monospace">lists:flatten/1</fo:inline>:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>When sending data to a port. Ports understand deep lists
       so there is no reason to flatten the list before sending it to
       the port.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>When calling BIFs that accept deep lists, such as
      <fo:inline font-style="italic">list_to_binary/1</fo:inline> or
      <fo:inline font-style="italic">iolist_to_binary/1</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>When you know that your list is only one level deep, you can use
      <fo:inline font-style="italic">lists:append/1</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block id="idp4331216" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Port Example</fo:block>
      

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      ...
      port_command(Port, DeepList)
      ...</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      ...
      port_command(Port, lists:flatten(DeepList))
      ...</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A common way to send a zero-terminated string to a port is the following:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      ...
      TerminatedStr = String ++ [0], % String="foo" =&gt; [$f, $o, $o, 0]
      port_command(Port, TerminatedStr)
      ...</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Instead:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      ...
      TerminatedStr = [String, 0], % String="foo" =&gt; [[$f, $o, $o], 0]
      port_command(Port, TerminatedStr) 
      ...</fo:block>
    

    <fo:block id="idp4337376" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Append Example</fo:block>
      

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      &gt; lists:append([[1], [2], [3]]).
      [1,2,3]
      &gt;</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      &gt; lists:flatten([[1], [2], [3]]).
      [1,2,3]
      &gt;</fo:block>
    
  <fo:block id="idp4340576" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.5.4 
      Recursive List Functions</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In section about myths, the following myth was exposed:
    <fo:inline font-style="italic">Tail-Recursive Functions
    are Much Faster Than Recursive Functions</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is usually not much difference between
    a body-recursive list function and tail-recursive function that reverses
    the list at the end. Therefore, concentrate on writing beautiful code
    and forget about the performance of your list functions. In the
    time-critical parts of your code (and only there), <fo:inline font-weight="bold">measure</fo:inline>
    before rewriting your code.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section is about list functions that <fo:inline font-weight="bold">construct</fo:inline>
    lists. A tail-recursive function that does not construct a list runs
    in constant space, while the corresponding body-recursive function
    uses stack space proportional to the length of the list.</fo:block></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, a function that sums a list of integers, is
    <fo:inline font-weight="bold">not</fo:inline> to be written as follows:</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
recursive_sum([H|T]) -&gt; H+recursive_sum(T);
recursive_sum([])    -&gt; 0.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Instead:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
sum(L) -&gt; sum(L, 0).

sum([H|T], Sum) -&gt; sum(T, Sum + H);
sum([], Sum)    -&gt; Sum.</fo:block>
  <fo:block id="idp4353152" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">7.6  Functions</fo:marker>7.6  Functions</fo:block><fo:block id="idp4355968" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.6.1 
      Pattern Matching</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Pattern matching in function head as well as in <fo:inline font-family="monospace">case</fo:inline> and
    <fo:inline font-family="monospace">receive</fo:inline> clauses are optimized by the compiler. With a few
    exceptions, there is nothing to gain by rearranging clauses.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One exception is pattern matching of binaries. The compiler
    does not rearrange clauses that match binaries. Placing the
    clause that matches against the empty binary <fo:inline font-weight="bold">last</fo:inline> is usually
    slightly faster than placing it <fo:inline font-weight="bold">first</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is a rather unnatural example to show another
    exception:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
atom_map1(one) -&gt; 1;
atom_map1(two) -&gt; 2;
atom_map1(three) -&gt; 3;
atom_map1(Int) when is_integer(Int) -&gt; Int;
atom_map1(four) -&gt; 4;
atom_map1(five) -&gt; 5;
atom_map1(six) -&gt; 6.</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The problem is the clause with the variable <fo:inline font-family="monospace">Int</fo:inline>.
     As a variable can match anything, including the atoms
     <fo:inline font-family="monospace">four</fo:inline>, <fo:inline font-family="monospace">five</fo:inline>, and <fo:inline font-family="monospace">six</fo:inline>, which the following clauses
     also match, the compiler must generate suboptimal code that
     executes as follows:</fo:block>

     <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>First, the input value is compared to <fo:inline font-family="monospace">one</fo:inline>, <fo:inline font-family="monospace">two</fo:inline>, and
     <fo:inline font-family="monospace">three</fo:inline> (using a single instruction that does a binary search;
     thus, quite efficient even if there are many values) to select which
     one of the first three clauses to execute (if any).</fo:block></fo:list-item-body></fo:list-item>

     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If none of the first three clauses match, the fourth clause
     match as a variable always matches.</fo:block></fo:list-item-body></fo:list-item>

     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If the guard test <fo:inline font-family="monospace">is_integer(Int)</fo:inline> succeeds, the fourth
     clause is executed.</fo:block></fo:list-item-body></fo:list-item>

     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If the guard test fails, the input value is compared to
     <fo:inline font-family="monospace">four</fo:inline>, <fo:inline font-family="monospace">five</fo:inline>, and <fo:inline font-family="monospace">six</fo:inline>, and the appropriate clause
     is selected. (There is a <fo:inline font-family="monospace">function_clause</fo:inline> exception if none of
     the values matched.)</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Rewriting to either:</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
atom_map2(one) -&gt; 1;
atom_map2(two) -&gt; 2;
atom_map2(three) -&gt; 3;
atom_map2(four) -&gt; 4;
atom_map2(five) -&gt; 5;
atom_map2(six) -&gt; 6;
atom_map2(Int) when is_integer(Int) -&gt; Int.</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or:</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
atom_map3(Int) when is_integer(Int) -&gt; Int;
atom_map3(one) -&gt; 1;
atom_map3(two) -&gt; 2;
atom_map3(three) -&gt; 3;
atom_map3(four) -&gt; 4;
atom_map3(five) -&gt; 5;
atom_map3(six) -&gt; 6.</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">gives slightly more efficient matching code.</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another example:</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
map_pairs1(_Map, [], Ys) -&gt;
    Ys;
map_pairs1(_Map, Xs, [] ) -&gt;
    Xs;
map_pairs1(Map, [X|Xs], [Y|Ys]) -&gt;
    [Map(X, Y)|map_pairs1(Map, Xs, Ys)].</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first argument is <fo:inline font-weight="bold">not</fo:inline> a problem. It is variable, but it
     is a variable in all clauses. The problem is the variable in the second
     argument, <fo:inline font-family="monospace">Xs</fo:inline>, in the middle clause. Because the variable can
     match anything, the compiler is not allowed to rearrange the clauses,
     but must generate code that matches them in the order written.</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the function is rewritten as follows, the compiler is free to
     rearrange the clauses:</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
map_pairs2(_Map, [], Ys) -&gt;
    Ys;
map_pairs2(_Map, [_|_]=Xs, [] ) -&gt;
    Xs;
map_pairs2(Map, [X|Xs], [Y|Ys]) -&gt;
    [Map(X, Y)|map_pairs2(Map, Xs, Ys)].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler will generate code similar to this:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT (already done by the compiler)</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
explicit_map_pairs(Map, Xs0, Ys0) -&gt;
    case Xs0 of
	[X|Xs] -&gt;
	    case Ys0 of
		[Y|Ys] -&gt;
		    [Map(X, Y)|explicit_map_pairs(Map, Xs, Ys)];
		[] -&gt;
		    Xs0
	    end;
	[] -&gt;
	    Ys0
    end.</fo:block>
      
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is slightly faster for probably the most common case
    that the input lists are not empty or very short.
    (Another advantage is that Dialyzer can deduce a better type
    for the <fo:inline font-family="monospace">Xs</fo:inline> variable.)</fo:block>
  <fo:block id="idp4383504" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.6.2 
      Function Calls</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is an intentionally rough guide to the relative costs of
    different calls. It is based on benchmark figures run on
    Solaris/Sparc:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Calls to local or external functions (<fo:inline font-family="monospace">foo()</fo:inline>, <fo:inline font-family="monospace">m:foo()</fo:inline>)
    are the fastest calls.</fo:block></fo:list-item-body></fo:list-item>

    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Calling or applying a fun (<fo:inline font-family="monospace">Fun()</fo:inline>, <fo:inline font-family="monospace">apply(Fun, [])</fo:inline>)
    is about <fo:inline font-weight="bold">three times</fo:inline> as expensive as calling a local
    function.</fo:block></fo:list-item-body></fo:list-item>

    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Applying an exported function (<fo:inline font-family="monospace">Mod:Name()</fo:inline>,
    <fo:inline font-family="monospace">apply(Mod, Name, [])</fo:inline>) is about twice as expensive as calling
    a fun or about <fo:inline font-weight="bold">six times</fo:inline> as expensive as calling a local
    function.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block id="idp4390640" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Notes and Implementation Details</fo:block>
       

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling and applying a fun does not involve any hash-table lookup.
       A fun contains an (indirect) pointer to the function that implements
       the fun.</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">apply/3</fo:inline> must look up the code for the function to execute
       in a hash table. It is therefore always slower than a
       direct call or a fun call.</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It no longer matters (from a performance point of view)
       whether you write:</fo:block>

       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Module:Function(Arg1, Arg2)</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or:</fo:block>

       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
apply(Module, Function, [Arg1,Arg2])</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler internally rewrites the latter code into the
       former.</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following code is slightly slower because the shape of the
       list of arguments is unknown at compile time.</fo:block>

       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
apply(Module, Function, Arguments)</fo:block>

    
  <fo:block id="idp4397200" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.6.3 
      Memory Usage in Recursion</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When writing recursive functions, it is preferable to make them
      tail-recursive so that they can execute in constant memory space:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
list_length(List) -&gt;
    list_length(List, 0).

list_length([], AccLen) -&gt; 
    AccLen; % Base case

list_length([_|Tail], AccLen) -&gt;
    list_length(Tail, AccLen + 1). % Tail-recursive</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
list_length([]) -&gt;
    0. % Base case
list_length([_ | Tail]) -&gt;
    list_length(Tail) + 1. % Not tail-recursive</fo:block>
  <fo:block id="idp4405456" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">7.7  Tables and Databases</fo:marker>7.7  Tables and Databases</fo:block><fo:block id="idp4408272" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.7.1 
      Ets, Dets, and Mnesia</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Every example using Ets has a corresponding example in
      Mnesia. In general, all Ets examples also apply to Dets tables.</fo:block>

    <fo:block id="idp4409568" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Select/Match Operations</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Select/match operations on Ets and Mnesia tables can become
        very expensive operations. They usually need to scan the complete
        table. Try to structure the data to minimize the need for select/match
        operations. However, if you require a select/match operation,
	it is still more efficient than using <fo:inline font-family="monospace">tab2list</fo:inline>.
	Examples of this and of how to avoid select/match are provided in
        the following sections. The functions
        <fo:inline font-family="monospace">ets:select/2</fo:inline> and <fo:inline font-family="monospace">mnesia:select/3</fo:inline> are to be preferred
	over <fo:inline font-family="monospace">ets:match/2</fo:inline>, <fo:inline font-family="monospace">ets:match_object/2</fo:inline>, and
      <fo:inline font-family="monospace">mnesia:match_object/3</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In some circumstances, the select/match operations do not need
        to scan the complete table.
	For example, if part of the key is bound when searching an
	<fo:inline font-family="monospace">ordered_set</fo:inline> table, or if it is a Mnesia
	table and there is a secondary index on the field that is
	selected/matched. If the key is fully bound, there is
	no point in doing a select/match, unless you have a bag table
	and are only interested in a subset of the elements with
        the specific key.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When creating a record to be used in a select/match operation, you
        want most of the fields to have the value "_". The easiest and
	fastest way to do that is as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#person{age = 42, _ = '_'}. </fo:block>
    

    <fo:block id="idp4416416" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Deleting an Element</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">delete</fo:inline> operation is considered
        successful if the element was not present in the table. Hence
        all attempts to check that the element is present in the
        Ets/Mnesia table before deletion are unnecessary. Here follows
        an example for Ets tables:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
ets:delete(Tab, Key),
...</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
case ets:lookup(Tab, Key) of
    [] -&gt;
        ok;
    [_|_] -&gt;
        ets:delete(Tab, Key)
end,
...</fo:block>
    

    <fo:block id="idp4420624" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Fetching Data</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do not fetch data that you already have.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Consider that you have a module that handles the abstract data
      type <fo:inline font-family="monospace">Person</fo:inline>. You export the interface function
      <fo:inline font-family="monospace">print_person/1</fo:inline>, which uses the internal functions
      <fo:inline font-family="monospace">print_name/1</fo:inline>, <fo:inline font-family="monospace">print_age/1</fo:inline>, and
      <fo:inline font-family="monospace">print_occupation/1</fo:inline>.</fo:block>
      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the function <fo:inline font-family="monospace">print_name/1</fo:inline>, and so on, had been interface
          functions, the situation would have been different, as you
          do not want the user of the interface to know about the
          internal data representation. </fo:block>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%%% Interface function
print_person(PersonId) -&gt;
    %% Look up the person in the named table person,
    case ets:lookup(person, PersonId) of
        [Person] -&gt;
            print_name(Person),
            print_age(Person),
            print_occupation(Person);
        [] -&gt;
            io:format("No person with ID = ~p~n", [PersonID])
    end.

%%% Internal functions
print_name(Person) -&gt; 
    io:format("No person ~p~n", [Person#person.name]).
                      
print_age(Person) -&gt; 
    io:format("No person ~p~n", [Person#person.age]).

print_occupation(Person) -&gt; 
    io:format("No person ~p~n", [Person#person.occupation]).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%%% Interface function
print_person(PersonId) -&gt;
    %% Look up the person in the named table person,
    case ets:lookup(person, PersonId) of
        [Person] -&gt;
            print_name(PersonID),
            print_age(PersonID),
            print_occupation(PersonID);
        [] -&gt;
            io:format("No person with ID = ~p~n", [PersonID])
    end.

%%% Internal functionss
print_name(PersonID) -&gt; 
    [Person] = ets:lookup(person, PersonId),
    io:format("No person ~p~n", [Person#person.name]).

print_age(PersonID) -&gt; 
    [Person] = ets:lookup(person, PersonId),
    io:format("No person ~p~n", [Person#person.age]).

print_occupation(PersonID) -&gt; 
    [Person] = ets:lookup(person, PersonId),
    io:format("No person ~p~n", [Person#person.occupation]).</fo:block>
    

    <fo:block id="idp4430224" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Non-Persistent Database Storage</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For non-persistent database storage, prefer Ets tables over
        Mnesia <fo:inline font-family="monospace">local_content</fo:inline> tables. Even the Mnesia <fo:inline font-family="monospace">dirty_write</fo:inline>
        operations carry a fixed overhead compared to Ets writes.
        Mnesia must check if the table is replicated or has indices,
        this involves at least one Ets lookup for each
        <fo:inline font-family="monospace">dirty_write</fo:inline>. Thus, Ets writes is always faster than
        Mnesia writes.</fo:block>
    

    <fo:block id="idp4433136" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">tab2list</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assuming an Ets table that uses <fo:inline font-family="monospace">idno</fo:inline> as key
        and contains the following:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[#person{idno = 1, name = "Adam",  age = 31, occupation = "mailman"},
 #person{idno = 2, name = "Bryan", age = 31, occupation = "cashier"},
 #person{idno = 3, name = "Bryan", age = 35, occupation = "banker"},
 #person{idno = 4, name = "Carl",  age = 25, occupation = "mailman"}]</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you <fo:inline font-weight="bold">must</fo:inline> return all data stored in the Ets table, you
        can use <fo:inline font-family="monospace">ets:tab2list/1</fo:inline>.  However, usually you are only
        interested in a subset of the information in which case
        <fo:inline font-family="monospace">ets:tab2list/1</fo:inline> is expensive. If you only want to extract
        one field from each record, for example, the age of every person,
        then:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
ets:select(Tab,[{ #person{idno='_', 
                          name='_', 
                          age='$1', 
                          occupation = '_'},
                [],
                ['$1']}]),
...</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
TabList = ets:tab2list(Tab),
lists:map(fun(X) -&gt; X#person.age end, TabList),
...</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you are only interested in the age of all persons named
        "Bryan", then:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
ets:select(Tab,[{ #person{idno='_', 
                          name="Bryan", 
                          age='$1', 
                          occupation = '_'},
                [],
                ['$1']}]),
...</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
TabList = ets:tab2list(Tab),
lists:foldl(fun(X, Acc) -&gt; case X#person.name of
                                "Bryan" -&gt;
                                    [X#person.age|Acc];
                                 _ -&gt;
                                     Acc
                           end
             end, [], TabList),
...</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">REALLY DO NOT</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
TabList = ets:tab2list(Tab),
BryanList = lists:filter(fun(X) -&gt; X#person.name == "Bryan" end,
                         TabList),
lists:map(fun(X) -&gt; X#person.age end, BryanList),
...</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you need all information stored in the Ets table about
        persons named "Bryan", then:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
ets:select(Tab, [{#person{idno='_', 
                          name="Bryan", 
                          age='_', 
                          occupation = '_'}, [], ['$_']}]),
...</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
TabList = ets:tab2list(Tab),
lists:filter(fun(X) -&gt; X#person.name == "Bryan" end, TabList),
...</fo:block>
    

    <fo:block id="idp4446912" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Ordered_set Tables</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the data in the table is to be accessed so that the order
        of the keys in the table is significant, the table type
        <fo:inline font-family="monospace">ordered_set</fo:inline> can be used instead of the more usual
        <fo:inline font-family="monospace">set</fo:inline> table type. An <fo:inline font-family="monospace">ordered_set</fo:inline> is always
        traversed in Erlang term order regarding the key field
        so that the return values from functions such as <fo:inline font-family="monospace">select</fo:inline>,
        <fo:inline font-family="monospace">match_object</fo:inline>, and <fo:inline font-family="monospace">foldl</fo:inline> are ordered by the key
        values. Traversing an <fo:inline font-family="monospace">ordered_set</fo:inline> with the <fo:inline font-family="monospace">first</fo:inline> and
        <fo:inline font-family="monospace">next</fo:inline> operations also returns the keys ordered.</fo:block>
      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">ordered_set</fo:inline> only guarantees that
          objects are processed in <fo:inline font-weight="bold">key</fo:inline> order.
	  Results from functions such as
          <fo:inline font-family="monospace">ets:select/2</fo:inline> appear in <fo:inline font-weight="bold">key</fo:inline> order even if
          the key is not included in the result.</fo:block>
      </fo:block>
    
  <fo:block id="idp4455584" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.7.2 
      Ets-Specific</fo:block>
    

    <fo:block id="idp4456320" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Using Keys of Ets Table</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Ets table is a single-key table (either a hash table or a
        tree ordered by the key) and is to be used as one. In other
        words, use the key to look up things whenever possible. A
        lookup by a known key in a <fo:inline font-family="monospace">set</fo:inline> Ets table is constant and for
        an <fo:inline font-family="monospace">ordered_set</fo:inline> Ets table it is O(logN). A key lookup is always
        preferable to a call where the whole table has to be
        scanned. In the previous examples, the field <fo:inline font-family="monospace">idno</fo:inline> is the
        key of the table and all lookups where only the name is known
        result in a complete scan of the (possibly large) table
        for a matching result.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A simple solution would be to use the <fo:inline font-family="monospace">name</fo:inline> field as
        the key instead of the <fo:inline font-family="monospace">idno</fo:inline> field, but that would cause
        problems if the names were not unique. A more general solution would
        be to create a second table with <fo:inline font-family="monospace">name</fo:inline> as key and
        <fo:inline font-family="monospace">idno</fo:inline> as data, that is, to index (invert) the table regarding
        the <fo:inline font-family="monospace">name</fo:inline> field. Clearly, the second table would have to be
        kept consistent with the master table. Mnesia can do this
        for you, but a home brew index table can be very efficient
        compared to the overhead involved in using Mnesia.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An index table for the table in the previous examples would
        have to be a bag (as keys would appear more than once) and can
        have the following contents:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[#index_entry{name="Adam", idno=1},
 #index_entry{name="Bryan", idno=2},
 #index_entry{name="Bryan", idno=3},
 #index_entry{name="Carl", idno=4}]</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Given this index table, a lookup of the <fo:inline font-family="monospace">age</fo:inline> fields for
        all persons named "Bryan" can be done as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
MatchingIDs = ets:lookup(IndexTable,"Bryan"),
lists:map(fun(#index_entry{idno = ID}) -&gt;
                 [#person{age = Age}] = ets:lookup(PersonTable, ID),
                 Age
          end,
          MatchingIDs),
...</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this code never uses <fo:inline font-family="monospace">ets:match/2</fo:inline> but
        instead uses the <fo:inline font-family="monospace">ets:lookup/2</fo:inline> call. The
        <fo:inline font-family="monospace">lists:map/2</fo:inline> call is only used to traverse the <fo:inline font-family="monospace">idno</fo:inline>s
        matching the name "Bryan" in the table; thus the number of lookups
        in the master table is minimized.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Keeping an index table introduces some overhead when
        inserting records in the table. The number of operations gained
        from the table must therefore be compared against the number of
        operations inserting objects in the table. However, notice that the
	gain is significant when the key can be used to lookup elements.</fo:block>
    
  <fo:block id="idp4468800" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.7.3 
      Mnesia-Specific</fo:block>
    

    <fo:block id="idp4469536" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Secondary Index</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you frequently do a lookup on a field that is not the
        key of the table, you lose performance using
        "mnesia:select/match_object" as this function traverses the
        whole table. You can create a secondary index instead and
        use "mnesia:index_read" to get faster access, however this
        requires more memory.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record(person, {idno, name, age, occupation}).
        ...
{atomic, ok} = 
mnesia:create_table(person, [{index,[#person.age]},
                              {attributes,
                                    record_info(fields, person)}]),
{atomic, ok} = mnesia:add_table_index(person, age), 
...

PersonsAge42 =
     mnesia:dirty_index_read(person, 42, #person.age),
...</fo:block>
    

    <fo:block id="idp4472576" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Transactions </fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using transactions is a way to guarantee that the distributed
        Mnesia database remains consistent, even when many different
        processes update it in parallel. However, if you have
        real-time requirements it is recommended to use <fo:inline font-family="monospace">dirty</fo:inline>
        operations instead of transactions. When using <fo:inline font-family="monospace">dirty</fo:inline>
        operations, you lose the consistency guarantee; this is usually
        solved by only letting one process update the table. Other
        processes must send update requests to that process.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
% Using transaction

Fun = fun() -&gt;
          [mnesia:read({Table, Key}),
           mnesia:read({Table2, Key2})]
      end, 

{atomic, [Result1, Result2]}  = mnesia:transaction(Fun),
...

% Same thing using dirty operations
...

Result1 = mnesia:dirty_read({Table, Key}),
Result2 = mnesia:dirty_read({Table2, Key2}),
...</fo:block>
    
  <fo:block id="idp4480704" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">7.8  Processes</fo:marker>7.8  Processes</fo:block><fo:block id="idp4483520" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.8.1 
      Creating an Erlang Process</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang process is lightweight compared to threads and
    processes in operating systems.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A newly spawned Erlang process uses 309 words of memory
    in the non-SMP emulator without HiPE support. (SMP support
    and HiPE support both add to this size.) The size can
    be found as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Erlang (BEAM) emulator version 5.6 [async-threads:0] [kernel-poll:false]

Eshell V5.6  (abort with ^G)
1&gt; <fo:inline font-weight="bold">Fun = fun() -&gt; receive after infinity -&gt; ok end end.</fo:inline>
#Fun&lt;...&gt;
2&gt; <fo:inline font-weight="bold">{_,Bytes} = process_info(spawn(Fun), memory).</fo:inline>
{memory,1232}
3&gt; <fo:inline font-weight="bold">Bytes div erlang:system_info(wordsize).</fo:inline>
309</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The size includes 233 words for the heap area (which includes the
    stack). The garbage collector increases the heap as needed.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The main (outer) loop for a process <fo:inline font-weight="bold">must</fo:inline> be tail-recursive.
    Otherwise, the stack grows until the process terminates.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO NOT</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
loop() -&gt; 
  receive
     {sys, Msg} -&gt;
         handle_sys_msg(Msg),
         loop();
     {From, Msg} -&gt;
          Reply = handle_msg(Msg),
          From ! Reply,
          loop()
  end,
  io:format("Message is processed~n", []).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The call to <fo:inline font-family="monospace">io:format/2</fo:inline> will never be executed, but a
    return address will still be pushed to the stack each time
    <fo:inline font-family="monospace">loop/0</fo:inline> is called recursively. The correct tail-recursive
    version of the function looks as follows:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
   loop() -&gt; 
      receive
         {sys, Msg} -&gt;
            handle_sys_msg(Msg),
            loop();
         {From, Msg} -&gt;
            Reply = handle_msg(Msg),
            From ! Reply,
            loop()
    end.</fo:block>

    <fo:block id="idp4493376" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Initial Heap Size</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default initial heap size of 233 words is quite conservative
      to support Erlang systems with hundreds of thousands or
      even millions of processes. The garbage collector grows and
      shrinks the heap as needed.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a system that use comparatively few processes, performance
      <fo:inline font-weight="bold">might</fo:inline> be improved by increasing the minimum heap size
      using either the <fo:inline font-family="monospace">+h</fo:inline> option for
      <fo:inline font-style="italic">erl</fo:inline> or on a process-per-process
      basis using the <fo:inline font-family="monospace">min_heap_size</fo:inline> option for
      <fo:inline font-style="italic">spawn_opt/4</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The gain is twofold:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Although the garbage collector grows the heap, it grows it
	step-by-step, which is more costly than directly establishing a
	larger heap when the process is spawned.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The garbage collector can also shrink the heap if it is
	much larger than the amount of data stored on it;
	setting the minimum heap size prevents that.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>

      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The emulator probably uses more memory, and because garbage
      collections occur less frequently, huge binaries can be
      kept much longer.</fo:block></fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In systems with many processes, computation tasks that run
      for a short time can be spawned off into a new process with
      a higher minimum heap size. When the process is done, it sends
      the result of the computation to another process and terminates.
      If the minimum heap size is calculated properly, the process might
      not have to do any garbage collections at all.
      <fo:inline font-weight="bold">This optimization is not to be attempted
      without proper measurements.</fo:inline></fo:block>
    
  <fo:block id="idp4502512" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.8.2 
      Process Messages</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All data in messages between Erlang processes is copied,
      except for
      <fo:inline font-style="italic">refc binaries</fo:inline>
      on the same Erlang node.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a message is sent to a process on another Erlang node,
      it is first encoded to the Erlang External Format before
      being sent through a TCP/IP socket. The receiving Erlang node decodes
      the message and distributes it to the correct process.</fo:block>

    <fo:block id="idp4505104" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Constant Pool</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Constant Erlang terms (also called <fo:inline font-weight="bold">literals</fo:inline>) are
      kept in constant pools; each loaded module has its own pool.
      The following function does not build the tuple every time
      it is called (only to have it discarded the next time the garbage
      collector was run), but the tuple is located in the module's
      constant pool:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">DO</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
days_in_month(M) -&gt;
    element(M, {31,28,31,30,31,30,31,31,30,31,30,31}).</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">But if a constant is sent to another process (or stored in
      an Ets table), it is <fo:inline font-weight="bold">copied</fo:inline>.
      The reason is that the runtime system must be able
      to keep track of all references to constants to unload code
      containing constants properly. (When the code is unloaded,
      the constants are copied to the heap of the processes that refer
      to them.) The copying of constants might be eliminated in a future
      Erlang/OTP release.</fo:block>
    

    <fo:block id="idp4509856" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Loss of Sharing</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shared subterms are <fo:inline font-weight="bold">not</fo:inline> preserved in the following
      cases:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>When a term is sent to another process</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>When a term is passed as the initial process arguments in
	the <fo:inline font-family="monospace">spawn</fo:inline> call</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>When a term is stored in an Ets table</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">That is an optimization. Most applications do not send messages
      with shared subterms.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows how a shared subterm can be created:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
kilo_byte() -&gt;
    kilo_byte(10, [42]).

kilo_byte(0, Acc) -&gt;
    Acc;
kilo_byte(N, Acc) -&gt;
    kilo_byte(N-1, [Acc|Acc]).</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">kilo_byte/1</fo:inline> creates a deep list.
       If <fo:inline font-family="monospace">list_to_binary/1</fo:inline> is called, the deep list can be
       converted to a binary of 1024 bytes:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">byte_size(list_to_binary(efficiency_guide:kilo_byte())).</fo:inline>
1024</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using the <fo:inline font-family="monospace">erts_debug:size/1</fo:inline> BIF, it can be seen that the
       deep list only requires 22 words of heap space:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">erts_debug:size(efficiency_guide:kilo_byte()).</fo:inline>
22</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using the <fo:inline font-family="monospace">erts_debug:flat_size/1</fo:inline> BIF, the size of the
       deep list can be calculated if sharing is ignored. It becomes
       the size of the list when it has been sent to another process
       or stored in an Ets table:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; <fo:inline font-weight="bold">erts_debug:flat_size(efficiency_guide:kilo_byte()).</fo:inline>
4094</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It can be verified that sharing will be lost if the data is
      inserted into an Ets table:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
4&gt; <fo:inline font-weight="bold">T = ets:new(tab, []).</fo:inline>
#Ref&lt;0.1662103692.2407923716.214181&gt;
5&gt; <fo:inline font-weight="bold">ets:insert(T, {key,efficiency_guide:kilo_byte()}).</fo:inline>
true
6&gt; <fo:inline font-weight="bold">erts_debug:size(element(2, hd(ets:lookup(T, key)))).</fo:inline>
4094
7&gt; <fo:inline font-weight="bold">erts_debug:flat_size(element(2, hd(ets:lookup(T, key)))).</fo:inline>
4094</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the data has passed through an Ets table,
      <fo:inline font-family="monospace">erts_debug:size/1</fo:inline> and <fo:inline font-family="monospace">erts_debug:flat_size/1</fo:inline>
      return the same value. Sharing has been lost.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a future Erlang/OTP release, it might be implemented a
      way to (optionally) preserve sharing.</fo:block>
    
  <fo:block id="idp4527232" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.8.3 
      SMP Emulator</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SMP emulator (introduced in R11B) takes advantage of a
    multi-core or multi-CPU computer by running several Erlang scheduler
    threads (typically, the same as the number of cores). Each scheduler
    thread schedules Erlang processes in the same way as the Erlang scheduler
    in the non-SMP emulator.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To gain performance by using the SMP emulator, your application
    <fo:inline font-weight="bold">must have more than one runnable Erlang process</fo:inline> most of the time.
    Otherwise, the Erlang emulator can still only run one Erlang process
    at the time, but you must still pay the overhead for locking. Although
    Erlang/OTP tries to reduce the locking overhead as much as possible,
    it will never become exactly zero.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Benchmarks that appear to be concurrent are often sequential.
    The estone benchmark, for example, is entirely sequential. So is
    the most common implementation of the "ring benchmark"; usually one process
    is active, while the others wait in a <fo:inline font-family="monospace">receive</fo:inline> statement.</fo:block>
  <fo:block id="idp4535152" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">7.9  Drivers</fo:marker>7.9  Drivers</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section provides a brief overview on how to write efficient
  drivers.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that you have a good understanding of drivers.</fo:block><fo:block id="idp4538976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.9.1 
      Drivers and Concurrency</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime system always takes a lock before running
    any code in a driver.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, that lock is at the driver level, that is,
    if several ports have been opened to the same driver, only code for
    one port at the same time can be running.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A driver can be configured to have one lock for each port instead.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a driver is used in a functional way (that is, holds no state,
    but only does some heavy calculation and returns a result), several
    ports with registered names can be opened beforehand, and the port to
    be used can be chosen based on the scheduler ID as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-define(PORT_NAMES(),
	{some_driver_01, some_driver_02, some_driver_03, some_driver_04,
	 some_driver_05, some_driver_06, some_driver_07, some_driver_08,
	 some_driver_09, some_driver_10, some_driver_11, some_driver_12,
	 some_driver_13, some_driver_14, some_driver_15, some_driver_16}).

client_port() -&gt;
    element(erlang:system_info(scheduler_id) rem tuple_size(?PORT_NAMES()) + 1,
	    ?PORT_NAMES()).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As long as there are no more than 16 schedulers, there will never
    be any lock contention on the port lock for the driver.</fo:block>	    

  <fo:block id="idp4543856" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.9.2 
      Avoiding Copying Binaries When Calling a Driver</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are basically two ways to avoid copying a binary that is
    sent to a driver:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">Data</fo:inline> argument for
      <fo:inline font-style="italic">port_control/3</fo:inline>
      is a binary, the driver will be passed a pointer to the contents of
      the binary and the binary will not be copied. If the <fo:inline font-family="monospace">Data</fo:inline>
      argument is an iolist (list of binaries and lists), all binaries in
      the iolist will be copied.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Therefore, if you want to send both a pre-existing binary and some
      extra data to a driver without copying the binary, you must call
      <fo:inline font-family="monospace">port_control/3</fo:inline> twice; once with the binary and once with the
      extra data. However, that will only work if there is only one
      process communicating with the port (because otherwise another process
      can call the driver in-between the calls).</fo:block></fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Implement an <fo:inline font-family="monospace">outputv</fo:inline> callback (instead of an
      <fo:inline font-family="monospace">output</fo:inline> callback) in the driver. If a driver has an
      <fo:inline font-family="monospace">outputv</fo:inline> callback, refc binaries passed in an iolist
      in the <fo:inline font-family="monospace">Data</fo:inline> argument for
      <fo:inline font-style="italic">port_command/2</fo:inline>
      will be passed as references to the driver.</fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp4552912" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.9.3 
      Returning Small Binaries from a Driver</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime system can represent binaries up to 64 bytes as
    heap binaries. They are always copied when sent in messages,
    but they require less memory if they are not sent to another
    process and garbage collection is cheaper.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you know that the binaries you return are always small, you
    are advised to use driver API calls that do not require a pre-allocated
    binary, for example,
    <fo:inline font-style="italic">driver_output()</fo:inline>
    or
    <fo:inline font-style="italic">erl_drv_output_term()</fo:inline>,
    using the <fo:inline font-family="monospace">ERL_DRV_BUF2BINARY</fo:inline> format,
    to allow the runtime to construct a heap binary.</fo:block>

  <fo:block id="idp4557072" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.9.4 
      Returning Large Binaries without Copying from a Driver</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To avoid copying data when a large binary is sent or returned from
    the driver to an Erlang process, the driver must first allocate the
    binary and then send it to an Erlang process in some way.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use
    <fo:inline font-style="italic">driver_alloc_binary()</fo:inline>
    to allocate a binary.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are several ways to send a binary created with
    <fo:inline font-family="monospace">driver_alloc_binary()</fo:inline>:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>From the <fo:inline font-family="monospace">control</fo:inline> callback, a binary can be returned if
    <fo:inline font-style="italic">set_port_control_flags()</fo:inline>
    has been called with the flag value <fo:inline font-family="monospace">PORT_CONTROL_FLAG_BINARY</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>

    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A single binary can be sent with
    <fo:inline font-style="italic">driver_output_binary()</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>

    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Using
    <fo:inline font-style="italic">erl_drv_output_term()</fo:inline>
    or
    <fo:inline font-style="italic">erl_drv_send_term()</fo:inline>,
    a binary can be included in an Erlang term.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

  <fo:block id="idp4570752" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">7.10  Advanced</fo:marker>7.10  Advanced</fo:block><fo:block id="idp4573568" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.10.1 
      Memory</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A good start when programming efficiently is to know
      how much memory different data types and operations require. It is
      implementation-dependent how much memory the Erlang data types and
      other items consume, but the following table shows some figures for
      the <fo:inline font-family="monospace">erts-8.0</fo:inline> system in OTP 19.0.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The unit of measurement is memory words. There exists both a
      32-bit and a 64-bit implementation. A word is therefore 4 bytes or
      8 bytes, respectively.</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Data Type</fo:inline></fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Memory Size</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Small integer</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1 word.<fo:block/>
	On 32-bit architectures: -134217729 &lt; i &lt; 134217728
	(28 bits).<fo:block/>
	On 64-bit architectures: -576460752303423489 &lt; i &lt;
	576460752303423488 (60 bits).</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Large integer</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">3..N words.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Atom</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1 word.<fo:block/>
	An atom refers into an atom table, which also consumes memory.
	The atom text is stored once for each unique atom in this table.
	The atom table is <fo:inline font-weight="bold">not</fo:inline> garbage-collected.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Float</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">On 32-bit architectures: 4 words.<fo:block/>
	On 64-bit architectures: 3 words.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Binary</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">3..6 words + data (can be shared).</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">List</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1 word + 1 word per element + the size of each element.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">String (is the same as a list of integers)</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1 word + 2 words per character.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Tuple</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">2 words + the size of each element.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Small Map</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">5 words + the size of all keys and values.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Large Map (&gt; 32 keys)</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">
            <fo:inline font-family="monospace">N</fo:inline> x <fo:inline font-family="monospace">F</fo:inline> words + the size of all keys and values.<fo:block/>
            <fo:inline font-family="monospace">N</fo:inline> is the number of keys in the Map.<fo:block/>
            <fo:inline font-family="monospace">F</fo:inline> is a sparsity factor that can vary between 1.6 and 1.8
            due to the probabilistic nature of the internal HAMT data structure.
        </fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Pid</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1 word for a process identifier from the current local node
	+ 5 words for a process identifier from another node.<fo:block/>
	A process identifier refers into a process table and a node table,
	which also consumes memory.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Port</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">1 word for a port identifier from the current local node
	+ 5 words for a port identifier from another node.<fo:block/>
	A port identifier refers into a port table and a node table,
	which also consumes memory.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Reference</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">On 32-bit architectures: 5 words for a reference from the
	current local node + 7 words for a reference from another
	node.<fo:block/>
	On 64-bit architectures: 4 words for a reference from the current
	local node + 6 words for a reference from another node.<fo:block/>
	A reference refers into a node table, which also consumes
	memory.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Fun</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">9..13 words + the size of environment.<fo:block/>
	A fun refers into a fun table, which also consumes memory.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Ets table</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Initially 768 words + the size of each element (6 words +
	the size of Erlang data). The table grows when necessary.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Erlang process</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">338 words when spawned, including a heap of 233 words.</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        10.1:
         
        Memory Size of Different Data Types</fo:block>
  <fo:block id="idp4625824" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.10.2 
      System Limits</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang language specification puts no limits on the number of
    processes, length of atoms, and so on. However, for performance and
    memory saving reasons, there will always be limits in a practical
    implementation of the Erlang language and execution environment.</fo:block>

    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Processes</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">The maximum number of simultaneously alive Erlang processes
	is by default 32,768. This limit can be configured at startup.
	For more information, see the
	<fo:inline font-style="italic"><fo:inline font-family="monospace">+P</fo:inline></fo:inline>
	command-line flag in the
	<fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>
	manual page in ERTS.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Known nodes</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">A remote node Y must be known to node X if there exists
	any pids, ports, references, or funs (Erlang data types) from Y
	on X, or if X and Y are connected. The maximum number of remote
	nodes simultaneously/ever known to a node is limited by the
	<fo:inline font-style="italic">maximum number of atoms</fo:inline>
	available for node names. All data concerning remote nodes,
	except for the node name atom, are garbage-collected.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Connected nodes</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">The maximum number of simultaneously connected nodes is
	limited by either the maximum number of simultaneously known
	remote nodes,
	<fo:inline font-style="italic">the maximum number of (Erlang) ports</fo:inline>
	available, or
	<fo:inline font-style="italic">the maximum number of sockets</fo:inline>
	available.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Characters in an atom</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">255.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Atoms</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">By default, the maximum number of atoms is 1,048,576. This
	limit can be raised or lowered using the <fo:inline font-family="monospace">+t</fo:inline> option.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Ets tables</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Default is 1400. It can be changed with the environment
	variable <fo:inline font-family="monospace">ERL_MAX_ETS_TABLES</fo:inline>.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Elements in a tuple</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">The maximum number of elements in a tuple is 67,108,863
	(26-bit unsigned integer). Clearly, other factors such as the
	available memory can make it difficult to create a tuple of
	that size.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Size of binary</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">In the 32-bit implementation of Erlang, 536,870,911
	bytes is the largest binary that can be constructed or matched
	using the bit syntax. In the 64-bit implementation, the maximum
	size is 2,305,843,009,213,693,951 bytes. If the limit is
	exceeded, bit syntax construction fails with a
	<fo:inline font-family="monospace">system_limit</fo:inline> exception, while any attempt to match a
	binary that is too large fails. This limit is enforced starting
	in R11B-4.<fo:block/>
	In earlier Erlang/OTP releases, operations on too large
	binaries in general either fail or give incorrect results. In
	future releases, other operations that create binaries (such as
	<fo:inline font-family="monospace">list_to_binary/1</fo:inline>) will probably also enforce the same
	limit.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Total amount of data allocated by an Erlang node</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">The Erlang runtime system can use the complete 32-bit
	(or 64-bit) address space, but the operating system often
	limits a single process to use less than that.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Length of a node name</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">An Erlang node name has the form host@shortname or
	host@longname. The node name is  used as an atom within
	the system, so the maximum size of 255 holds also for the
	node name.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Open ports</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">The maximum number of simultaneously open Erlang ports is
	often by default 16,384. This limit can be configured at startup.
	For more information, see the
	<fo:inline font-style="italic"><fo:inline font-family="monospace">+Q</fo:inline></fo:inline>
	command-line flag in the
	<fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline> manual page
	in ERTS.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Open files and
	sockets</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">The maximum number of simultaneously open files and
	sockets depends on
	<fo:inline font-style="italic">the maximum number of Erlang ports</fo:inline>
	available, as well as on operating system-specific settings
	and limits.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Number of arguments to a function or fun</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">255</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Unique References on a Runtime System Instance</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Each scheduler thread has its own set of references, and all
        other threads have a shared set of references. Each set of references
        consist of <fo:inline font-family="monospace">2⁶⁴ - 1</fo:inline> unique references. That is the total
        amount of unique references that can be produced on a runtime
        system instance is <fo:inline font-family="monospace">(NoSchedulers + 1) * (2⁶⁴ - 1)</fo:inline>. If a
        scheduler thread create a new reference each nano second,
        references will at earliest be reused after more than 584 years.
	That is, for the foreseeable future they are unique enough.</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Unique Integers on a Runtime System Instance</fo:block></fo:table-cell>
        <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">There are two types of unique integers both created using the
        <fo:inline font-style="italic">erlang:unique_integer()</fo:inline>
        BIF. Unique integers created:
         <fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always">with the <fo:inline font-family="monospace">monotonic</fo:inline> modifier</fo:block>
	  <fo:block-container><fo:block start-indent="2em">consist of a set of <fo:inline font-family="monospace">2⁶⁴ - 1</fo:inline> unique integers.</fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always">without the <fo:inline font-family="monospace">monotonic</fo:inline> modifier</fo:block>
	  <fo:block-container><fo:block start-indent="2em">consist of a set of <fo:inline font-family="monospace">2⁶⁴ - 1</fo:inline> unique integers per scheduler
	  thread and a set of <fo:inline font-family="monospace">2⁶⁴ - 1</fo:inline> unique integers shared by
	  other threads. That is the total amount of unique integers without
	  the <fo:inline font-family="monospace">monotonic</fo:inline> modifier is <fo:inline font-family="monospace">(NoSchedulers + 1) * (2⁶⁴ - 1)</fo:inline></fo:block></fo:block-container>
        </fo:block>
      If a unique integer is created each nano second, unique integers
      will at earliest be reused after more than 584 years. That is, for
	the foreseeable future they are unique enough.</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        10.2:
         
        System Limits</fo:block>
  <fo:block id="idp4689312" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">7.11  Profiling</fo:marker>7.11  Profiling</fo:block><fo:block id="idp4692128" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.11.1 
      Do Not Guess About Performance - Profile</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Even experienced software developers often guess wrong about where
    the performance bottlenecks are in their programs. Therefore, profile
    your program to see where the performance
    bottlenecks are and concentrate on optimizing them.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang/OTP contains several tools to help finding bottlenecks:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fprof</fo:inline> provides the most detailed information about
      where the program time is spent, but it significantly slows down the
      program it profiles.</fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">eprof</fo:inline> provides time information of each function
      used in the program. No call graph is produced, but <fo:inline font-family="monospace">eprof</fo:inline> has
      considerable less impact on the program it profiles.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the program is too large to be profiled by <fo:inline font-family="monospace">fprof</fo:inline> or
      <fo:inline font-family="monospace">eprof</fo:inline>, the <fo:inline font-family="monospace">cover</fo:inline> and <fo:inline font-family="monospace">cprof</fo:inline> tools can be used
      to locate code parts that are to be more thoroughly profiled using
      <fo:inline font-family="monospace">fprof</fo:inline> or <fo:inline font-family="monospace">eprof</fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">cover</fo:inline> provides execution counts per line per
      process, with less overhead than <fo:inline font-family="monospace">fprof</fo:inline>. Execution counts
      can, with some caution, be used to locate potential performance
      bottlenecks.</fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">cprof</fo:inline> is the most lightweight tool, but it only
      provides execution counts on a function basis (for all processes,
      not per process).</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The tools are further described in
    <fo:inline font-style="italic">Tools</fo:inline>.</fo:block>
  <fo:block id="idp4703888" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.11.2 
      Large Systems</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a large system, it can be interesting to run profiling
      on a simulated and limited scenario to start with. But bottlenecks
      have a tendency to appear or cause problems only when
      many things are going on at the same time, and when
      many nodes are involved. Therefore, it is also desirable to run
      profiling in a system test plant on a real target system.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a large system, you do not want to run the profiling
      tools on the whole system. Instead you want to concentrate on
      central processes and modules, which contribute for a big part
      of the execution.</fo:block>
  <fo:block id="idp4706256" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.11.3 
      What to Look For</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When analyzing the result file from the profiling activity,
      look for functions that are called many
      times and have a long "own" execution time (time excluding calls
      to other functions). Functions that are called a lot of
      times can also be interesting, as even small things can add
      up to quite a bit if repeated often. Also
      ask yourself what you can do to reduce this time. The following
      are appropriate types of questions to ask yourself:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Is it possible to reduce the number of times the function
      is called?</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Can any test be run less often if the order of tests is
      changed?</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Can any redundant tests be removed?</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Does any calculated expression give the same result
       each time?</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Are there other ways to do this that are equivalent and
       more efficient?</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Can another internal data representation be used to make
       things more efficient?</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These questions are not always trivial to answer. Some
    benchmarks might be needed to back up your theory and to avoid
      making things slower if your theory is wrong. For details, see
    <fo:inline font-style="italic">Benchmarking</fo:inline>.</fo:block>
  <fo:block id="idp6373808" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.11.4 
      Tools</fo:block>
    
    
    <fo:block id="idp6375104" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">fprof</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">fprof</fo:inline> measures the execution time for each function,
      both own time, that is, how much time a function has used for its
      own execution, and accumulated time, that is, including called
      functions. The values are displayed per process. You also get
      to know how many times each function has been called.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">fprof</fo:inline> is based on trace to file to minimize runtime
      performance impact. Using <fo:inline font-family="monospace">fprof</fo:inline> is just a matter of
      calling a few library functions, see the
      <fo:inline font-style="italic">fprof</fo:inline> manual page in
      Tools .<fo:inline font-family="monospace">fprof</fo:inline> was introduced in R8.</fo:block>
    

    <fo:block id="idp6379536" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">eprof</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">eprof</fo:inline> is based on the Erlang <fo:inline font-family="monospace">trace_info</fo:inline> BIFs.
      <fo:inline font-family="monospace">eprof</fo:inline> shows how much time has been used by each process,
      and in which function calls this time has been spent. Time is
      shown as percentage of total time and absolute time. For more
      information, see the <fo:inline font-style="italic">eprof</fo:inline>
      manual page in Tools.</fo:block>
    

    <fo:block id="idp6383008" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">cover</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The primary use of <fo:inline font-family="monospace">cover</fo:inline> is coverage analysis to verify
      test cases, making sure that all relevant code is covered.
      <fo:inline font-family="monospace">cover</fo:inline> counts how many times each executable line of code
      is executed when a program is run, on a per module basis.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clearly, this information can be used to determine what
      code is run very frequently and can therefore be subject for
      optimization. Using <fo:inline font-family="monospace">cover</fo:inline> is just a matter of calling a
      few library functions, see the
      <fo:inline font-style="italic">cover</fo:inline> manual page in
      Tools.</fo:block>
    

    <fo:block id="idp6387248" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">cprof</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">cprof</fo:inline> is something in between <fo:inline font-family="monospace">fprof</fo:inline> and
      <fo:inline font-family="monospace">cover</fo:inline> regarding features. It counts how many times each
      function is called when the program is run, on a per module
      basis. <fo:inline font-family="monospace">cprof</fo:inline> has a low performance degradation effect
      (compared with <fo:inline font-family="monospace">fprof</fo:inline>) and does not need to recompile
      any modules to profile (compared with <fo:inline font-family="monospace">cover</fo:inline>).
      For more information, see the
      <fo:inline font-style="italic">cprof</fo:inline> manual page in
      Tools.</fo:block>
    

    <fo:block id="idp6392128" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Tool Summary</fo:block>
      
      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Tool</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Results</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Size of Result</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Effects on Program Execution Time</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Records Number of Calls</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Records Execution Time</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Records Called by</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Records Garbage Collection</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">fprof</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Per process to screen/file</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Large</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Significant slowdown</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Yes</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Total and own</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Yes</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Yes</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">eprof</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Per process/function to screen/file</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Medium</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Small slowdown</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Yes</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Only total</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">No</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">No</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">cover</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Per module to screen/file</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Small</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Moderate slowdown</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Yes, per line</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">No</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">No</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">No</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-family="monospace">cprof</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Per module to caller</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Small</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Small slowdown</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Yes</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">No</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">No</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">No</fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        11.1:
         
        Tool Summary</fo:block>
    
  <fo:block id="idp6438448" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.11.5 
      Benchmarking</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The main purpose of benchmarking is to find out which
    implementation of a given algorithm or function is the fastest.
    Benchmarking is far from an exact science. Today's operating systems
    generally run background tasks that are difficult to turn off.
    Caches and multiple CPU cores does not facilitate benchmarking.
    It would be best to run UNIX computers in single-user mode when
    benchmarking, but that is inconvenient to say the least for casual
    testing.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Benchmarks can measure wall-clock time or CPU time.</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">timer:tc/3</fo:inline> measures
    wall-clock time. The advantage with wall-clock time is that I/O,
    swapping, and other activities in the operating system kernel are
    included in the measurements. The disadvantage is that the
    measurements vary a lot. Usually it is best to run the
    benchmark several times and note the shortest time, which is to
    be the minimum time that is possible to achieve under the best of
    circumstances.</fo:block></fo:list-item-body></fo:list-item>

    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">statistics/1</fo:inline>
    with argument <fo:inline font-family="monospace">runtime</fo:inline> measures CPU time spent in the Erlang
    virtual machine. The advantage with CPU time is that the results are more
    consistent from run to run. The disadvantage is that the time
    spent in the operating system kernel (such as swapping and I/O)
    is not included. Therefore, measuring CPU time is misleading if
    any I/O (file or socket) is involved.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is probably a good idea to do both wall-clock measurements and
    CPU time measurements.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some final advice:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The granularity of both measurement types can be high.
    Therefore, ensure that each individual measurement
    lasts for at least several seconds.</fo:block></fo:list-item-body></fo:list-item>

    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>To make the test fair, each new test run is to run in its own,
    newly created Erlang process. Otherwise, if all tests run in the
    same process, the later tests start out with larger heap sizes
    and therefore probably do fewer garbage collections.
    Also consider restarting the Erlang emulator between each test.</fo:block></fo:list-item-body></fo:list-item>

    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Do not assume that the fastest implementation of a given algorithm
    on computer architecture X is also the fastest on computer architecture
    Y.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp6452400" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">7.12  Retired Myths</fo:marker>7.12  Retired Myths</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We belive that the truth finally has caught with the following,
  retired myths.</fo:block><fo:block id="idp6456288" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.12.1 
      Myth: Funs are Slow</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Funs used to be very slow, slower than <fo:inline font-family="monospace">apply/3</fo:inline>.
    Originally, funs were implemented using nothing more than
    compiler trickery, ordinary tuples, <fo:inline font-family="monospace">apply/3</fo:inline>, and a great
    deal of ingenuity.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">But that is history. Funs was given its own data type
    in R6B and was further optimized in R7B.
    Now the cost for a fun call falls roughly between the cost for a call
    to a local function and <fo:inline font-family="monospace">apply/3</fo:inline>.</fo:block>
  <fo:block id="idp6459744" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">7.12.2 
      Myth: List Comprehensions are Slow</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">List comprehensions used to be implemented using funs, and in the
    old days funs were indeed slow.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Nowadays, the compiler rewrites list comprehensions into an ordinary
    recursive function. Using a tail-recursive function with
    a reverse at the end would be still faster. Or would it?
    That leads us to the myth that tail-recursive functions are faster
    than body-recursive functions.</fo:block>
  <fo:block id="idp215152" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">8   
      Interoperability Tutorial</fo:block><fo:block id="idp3394432" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">8.1  Introduction</fo:marker>8.1  Introduction</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section informs on interoperability, that is, information
    exchange, between Erlang and other programming languages. The
    included examples mainly treat interoperability between Erlang and
    C.</fo:block><fo:block id="idp4202608" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.1.1 
      Purpose</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The purpose of this tutorial is to describe different
      interoperability mechanisms that can be used when integrating a
      program written in Erlang with a program written in another
      programming language, from the Erlang programmer's
      perspective.</fo:block>
  <fo:block id="idp4201312" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.1.2 
      Prerequisites</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that you are a skilled Erlang programmer,
      familiar with concepts such as Erlang data types, processes,
      messages, and error handling.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To illustrate the interoperability principles, C programs
      running in a UNIX environment have been used. It is assumed that
      you have enough knowledge to apply these principles to the
      relevant programming languages and platforms.</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For readability, the example code is kept as simple as
        possible. For example, it does not include error handling,
        which might be vital in a real-life system.</fo:block>
    </fo:block>
  <fo:block id="idp4120976" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">8.2  Overview</fo:marker>8.2  Overview</fo:block><fo:block id="idp4118704" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.2.1 
      Built-In Mechanisms</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two interoperability mechanisms are built into the Erlang
      runtime system, <fo:inline font-weight="bold">distributed Erlang</fo:inline> and <fo:inline font-weight="bold">ports</fo:inline>.
      A variation of ports is <fo:inline font-weight="bold">linked-in drivers</fo:inline>.</fo:block>
    

    <fo:block id="idp2482048" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Distributed Erlang</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang runtime system is made a distributed Erlang node by
        giving it a name. A distributed Erlang node can connect to,
        and monitor, other nodes. It can also spawn processes at other
        nodes. Message passing and error handling between processes at
        different nodes are transparent. A number of useful STDLIB
        modules are available in a distributed Erlang system. For
        example, <fo:inline font-family="monospace">global</fo:inline>, which provides global name
        registration. The distribution mechanism is implemented using
        TCP/IP sockets.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">When to use:</fo:inline> Distributed Erlang is primarily used
        for Erlang-Erlang communication. It can also be used for
        communication between Erlang and C, if the C program is
        implemented as a C node, see
        <fo:inline font-style="italic">C and Java Libraries</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Where to read more:</fo:inline> Distributed Erlang and some distributed
      programming techniques are described in the Erlang book.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see <fo:inline font-style="italic">
        Distributed Programming.</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Relevant manual pages are the following:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">erlang</fo:inline> manual page in ERTS
       (describes the BIFs)</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">global</fo:inline> manual page in Kernel</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">net_adm</fo:inline> manual page in Kernel</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">pg2</fo:inline> manual page in Kernel</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">rpc</fo:inline> manual page in Kernel</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">pool</fo:inline> manual page in STDLIB</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">slave</fo:inline> manual page in STDLIB</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp4276112" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Ports and Linked-In Drivers</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Ports provide the basic mechanism for communication with the
        external world, from Erlang's point of view. The ports provide
        a byte-oriented interface to an external program. When a port
        is created, Erlang can communicate with it by sending and
        receiving lists of bytes (not Erlang terms). This means that
        the programmer might have to invent a suitable encoding and
        decoding scheme.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The implementation of the port mechanism depends on the
        platform. For UNIX, pipes are used and the external program is
        assumed to read from standard input and write to standard
        output. The external program can be written in any programming
        language as long as it can handle the interprocess
        communication mechanism with which the port is
        implemented.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The external program resides in another OS process than the
        Erlang runtime system. In some cases this is not acceptable.
        Consider, for example, drivers with very hard time
        requirements. It is therefore possible to write a program in C
        according to certain principles, and dynamically link it to
        the Erlang runtime system. This is called a <fo:inline font-weight="bold">linked-in
        driver</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">When to use:</fo:inline> Ports can be used for all kinds of
        interoperability situations where the Erlang program and the
        other program runs on the same machine. Programming is fairly
        straight-forward.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Linked-in drivers involves writing certain call-back
        functions in C. This requires very good skills as the code is
        linked to the Erlang runtime system.</fo:block>
      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A faulty linked-in driver causes the entire Erlang runtime
	  system to leak memory, hang, or crash.</fo:block>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Where to read more:</fo:inline> Ports are described in section
        "Miscellaneous Items" of the Erlang book. Linked-in drivers
        are described in Appendix E.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The BIF <fo:inline font-family="monospace">open_port/2</fo:inline> is documented in the
        <fo:inline font-style="italic">erlang</fo:inline> manual page in
	ERTS.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For linked-in drivers, the programmer needs to read the
        <fo:inline font-style="italic">erl_ddll</fo:inline> manual
        page in Kernel.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline> Port example in <fo:inline font-style="italic">
        Ports</fo:inline>.</fo:block>
    
  <fo:block id="idp1166464" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.2.2 
      C and Java Libraries</fo:block>
    

    <fo:block id="idp1037392" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Erl_Interface</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The program at the other side of a port is often a C program.
        To help the C programmer, the Erl_Interface library
        has been developed, including the following five parts:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-family="monospace">erl_marshal</fo:inline>, <fo:inline font-family="monospace">erl_eterm</fo:inline>, <fo:inline font-family="monospace">erl_format</fo:inline>, and
	<fo:inline font-family="monospace">erl_malloc</fo:inline>: Handling of the Erlang external term format</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-family="monospace">erl_connect</fo:inline>:
	Communication with distributed Erlang, see <fo:inline font-style="italic">C nodes</fo:inline> below</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-family="monospace">erl_error</fo:inline>:
	Error print routines</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-family="monospace">erl_global</fo:inline>:
	Access globally registered names</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-family="monospace">Registry</fo:inline>:
	Store and backup of key-value pairs</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang external term format is a representation of an
        Erlang term as a sequence of bytes, that is, a binary.
        Conversion between the two representations is done using the
        following BIFs:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Binary = term_to_binary(Term)
Term = binary_to_term(Binary)</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A port can be set to use binaries instead of lists of bytes.
        It is then not necessary to invent any encoding/decoding
        scheme. Erl_Interface functions are used for unpacking the
        binary and convert it into a struct similar to an Erlang term.
        Such a struct can be manipulated in different ways, be
        converted to the Erlang external format, and sent to
        Erlang.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">When to use:</fo:inline> In C code, in conjunction with Erlang binaries.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Where to read more:</fo:inline> See the Erlang Interface User's
        Guide, Command Reference, and Library Reference. In Erlang/OTP
        R5B, and earlier versions, the information is part of the
        Kernel application.</fo:block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline> Erl_Interface example in
       <fo:inline font-style="italic">Erl_Interface</fo:inline>.</fo:block>
    

    <fo:block id="idp3953424" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">C Nodes</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A C program that uses the Erl_Interface functions for setting
        up a connection to, and communicating with, a distributed
        Erlang node is called a <fo:inline font-weight="bold">C node</fo:inline>, or a <fo:inline font-weight="bold">hidden
        node</fo:inline>. The main advantage with a C node is that the
        communication from the Erlang programmer's perspective is
        extremely easy, as the C program behaves as a distributed
        Erlang node.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">When to use:</fo:inline> C nodes can typically be used on device
        processors (as opposed to control processors) where C is a
        better choice than Erlang due to memory limitations or
        application characteristics, or both.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Where to read more:</fo:inline> See the <fo:inline font-family="monospace">erl_connect</fo:inline> part
        of the Erl_Interface documentation. The programmer also needs
        to be familiar with TCP/IP sockets, see Sockets in <fo:inline font-style="italic">Standard
        Protocols</fo:inline> and Distributed Erlang in <fo:inline font-style="italic">Built-In Mechanisms</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> C node example in <fo:inline font-style="italic">
        C Nodes</fo:inline>.</fo:block>
    

    <fo:block id="idp3764224" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Jinterface</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In Erlang/OTP R6B, a library similar to Erl_Interface for
        Java was added called <fo:inline font-weight="bold">jinterface</fo:inline>. It provides a tool
        for Java programs to communicate with Erlang nodes.</fo:block>
    
  <fo:block id="idp2256064" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.2.3 
      Standard Protocols</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sometimes communication between an Erlang program and another
      program using a standard protocol is desirable. Erlang/OTP
      currently supports TCP/IP and UDP <fo:inline font-weight="bold">sockets</fo:inline>: as
      follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>SNMP</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>HTTP</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>IIOP (CORBA)</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using one of the latter three requires good knowledge about the
      protocol and is not covered by this tutorial. See the SNMP,
      Inets, and Orber applications, respectively.</fo:block>
    

    <fo:block id="idp4086000" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Sockets</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Simply put, connection-oriented socket communication (TCP/IP)
        consists of an initiator socket ("server") started at a
        certain host with a certain port number. A connector socket
        ("client"), which is aware of the initiator host name and port
        number, can connect to it and data can be sent between
        them.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Connection-less socket communication (UDP) consists of an
        initiator socket at a certain host with a certain port number
        and a connector socket sending data to it.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a detailed description of the socket concept, refer to a
        suitable book about network programming. A suggestion is
        <fo:inline font-weight="bold">UNIX Network Programming, Volume 1: Networking APIs -
        Sockets and XTI</fo:inline> by W. Richard Stevens, ISBN:
        013490012X.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In Erlang/OTP, access to TCP/IP and UDP sockets is provided
        by the modules <fo:inline font-family="monospace">gen_tcp</fo:inline> and <fo:inline font-family="monospace">gen_udp</fo:inline> in
        Kernel. Both are easy to use and do not require
        detailed knowledge about the socket concept.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">When to use:</fo:inline> For programs running on the same or on
        another machine than the Erlang program.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Where to read more:</fo:inline> See the <fo:inline font-style="italic">gen_tcp</fo:inline> and the <fo:inline font-style="italic">gen_udp</fo:inline> manual pages in
        Kernel.</fo:block>
    
  <fo:block id="idp4088032" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.2.4 
      IC</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">IC (Erlang IDL Compiler) is an interface generator that, given
      an IDL interface specification, automatically generates stub
      code in Erlang, C, or Java. See the IC User's Guide and IC
      Reference Manual.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see the <fo:inline font-style="italic">ic</fo:inline>
      manual page in IC.</fo:block>
  <fo:block id="idp1530528" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.2.5 
      Old Applications</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two old applications are of interest regarding
      interoperability. Both have been replaced by IC and are
      mentioned here for reference only:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">IG - Removed from Erlang/OTP R6B.</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">IG (Interface Generator) automatically generated code for
         port or socket communication between an Erlang program and a
         C program, given a C header file with certain keywords.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Jive -  Removed from Erlang/OTP R7B.</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Jive provided a simple interface between an Erlang program
         and a Java program.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
  <fo:block id="idp4199792" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">8.3  Problem Example</fo:marker>8.3  Problem Example</fo:block><fo:block id="idp3945920" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.3.1 
      Description</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A common interoperability situation is when you want to incorporate
      a piece of code, solving a complex problem, in your Erlang
      program. Suppose for example, that you have the following C
      functions that you would like to call from Erlang:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

/* complex.c */

int foo(int x) {
  return x+1;
}

int bar(int y) {
  return y*2;
}
</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions are deliberately kept as simple as possible, for
      readability reasons.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From an Erlang perspective, it is preferable to be able to call
      <fo:inline font-family="monospace">foo</fo:inline> and <fo:inline font-family="monospace">bar</fo:inline> without having to bother about that
      they are C functions:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% Erlang code
...
Res = complex:foo(X),
...</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, the communication with C is hidden in the implementation
      of <fo:inline font-family="monospace">complex.erl</fo:inline>.
      In the following sections, it is shown how this module can be
      implemented using the different interoperability mechanisms.</fo:block>
  <fo:block id="idp3524192" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">8.4  Ports</fo:marker>8.4  Ports</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section outlines an example of how to solve the example
    problem in the <fo:inline font-style="italic">previous section</fo:inline>
    by using a port.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The scenario is illustrated in the following figure:</fo:block><fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../tutorial/port.gif"/>
    <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        4.1:
         
        Port Communication</fo:block>
  </fo:block><fo:block id="idp4042848" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.4.1 
      Erlang Program</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All communication between Erlang and C must be established by
      creating the port. The Erlang process that creates a port is
      said to be <fo:inline font-weight="bold">the connected process</fo:inline> of the port. All
      communication to and from the port must go through the connected
      process. If the connected process terminates, the port also
      terminates (and the external program, if it is written
      properly).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The port is created using the BIF <fo:inline font-family="monospace">open_port/2</fo:inline> with
      <fo:inline font-family="monospace">{spawn,ExtPrg}</fo:inline> as the first argument. The string
      <fo:inline font-family="monospace">ExtPrg</fo:inline> is the name of the external program, including any
      command line arguments. The second argument is a list of
      options, in this case only <fo:inline font-family="monospace">{packet,2}</fo:inline>. This option says
      that a 2 byte length indicator is to be used to simplify the
      communication between C and Erlang. The Erlang port
      automatically adds the length indicator, but this must be done
      explicitly in the external C program.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process is also set to trap exits, which enables detection
      of failure of the external program:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(complex1).
-export([start/1, init/1]).

start(ExtPrg) -&gt;
  spawn(?MODULE, init, [ExtPrg]).

init(ExtPrg) -&gt;
  register(complex, self()),
  process_flag(trap_exit, true),
  Port = open_port({spawn, ExtPrg}, [{packet, 2}]),
  loop(Port).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now <fo:inline font-family="monospace">complex1:foo/1</fo:inline> and <fo:inline font-family="monospace">complex1:bar/1</fo:inline> can be
      implemented. Both send a message to the <fo:inline font-family="monospace">complex</fo:inline> process
      and receive the following replies:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
foo(X) -&gt;
  call_port({foo, X}).
bar(Y) -&gt;
  call_port({bar, Y}).

call_port(Msg) -&gt;
  complex ! {call, self(), Msg},
  receive
    {complex, Result} -&gt;
      Result
  end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">complex</fo:inline> process does the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Encodes the message into a sequence of bytes.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Sends it to the port.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Waits for a reply.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Decodes the reply.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Sends it back to the caller:</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
loop(Port) -&gt;
  receive
    {call, Caller, Msg} -&gt;
      Port ! {self(), {command, encode(Msg)}},
      receive
        {Port, {data, Data}} -&gt;
          Caller ! {complex, decode(Data)}
      end,
      loop(Port)
  end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assuming that both the arguments and the results from the C
      functions are less than 256, a simple encoding/decoding scheme
      is employed. In this scheme, <fo:inline font-family="monospace">foo</fo:inline> is represented by byte
      1, <fo:inline font-family="monospace">bar</fo:inline> is represented by 2, and the argument/result is
      represented by a single byte as well:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
encode({foo, X}) -&gt; [1, X];
encode({bar, Y}) -&gt; [2, Y].

decode([Int]) -&gt; Int.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The resulting Erlang program, including functionality for
      stopping the port and detecting port failures, is as follows:
      </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-module(complex1).
-export([start/1, stop/0, init/1]).
-export([foo/1, bar/1]).

start(ExtPrg) -&gt;
    spawn(?MODULE, init, [ExtPrg]).
stop() -&gt;
    complex ! stop.

foo(X) -&gt;
    call_port({foo, X}).
bar(Y) -&gt;
    call_port({bar, Y}).

call_port(Msg) -&gt;
    complex ! {call, self(), Msg},
    receive
	{complex, Result} -&gt;
	    Result
    end.

init(ExtPrg) -&gt;
    register(complex, self()),
    process_flag(trap_exit, true),
    Port = open_port({spawn, ExtPrg}, [{packet, 2}]),
    loop(Port).

loop(Port) -&gt;
    receive
	{call, Caller, Msg} -&gt;
	    Port ! {self(), {command, encode(Msg)}},
	    receive
		{Port, {data, Data}} -&gt;
		    Caller ! {complex, decode(Data)}
	    end,
	    loop(Port);
	stop -&gt;
	    Port ! {self(), close},
	    receive
		{Port, closed} -&gt;
		    exit(normal)
	    end;
	{'EXIT', Port, Reason} -&gt;
	    exit(port_terminated)
    end.

encode({foo, X}) -&gt; [1, X];
encode({bar, Y}) -&gt; [2, Y].

decode([Int]) -&gt; Int.
</fo:block>  <fo:block id="idp4181376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.4.2 
      C Program</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On the C side, it is necessary to write functions for receiving
      and sending data with 2 byte length indicators from/to Erlang.
      By default, the C program is to read from standard input (file
      descriptor 0) and write to standard output (file descriptor 1).
      Examples of such functions, <fo:inline font-family="monospace">read_cmd/1</fo:inline> and
      <fo:inline font-family="monospace">write_cmd/2</fo:inline>, follows:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

/* erl_comm.c */

typedef unsigned char byte;

read_cmd(byte *buf)
{
  int len;

  if (read_exact(buf, 2) != 2)
    return(-1);
  len = (buf[0] &lt;&lt; 8) | buf[1];
  return read_exact(buf, len);
}

write_cmd(byte *buf, int len)
{
  byte li;

  li = (len &gt;&gt; 8) &amp; 0xff;
  write_exact(&amp;li, 1);
  
  li = len &amp; 0xff;
  write_exact(&amp;li, 1);

  return write_exact(buf, len);
}

read_exact(byte *buf, int len)
{
  int i, got=0;

  do {
    if ((i = read(0, buf+got, len-got)) &lt;= 0)
      return(i);
    got += i;
  } while (got&lt;len);

  return(len);
}

write_exact(byte *buf, int len)
{
  int i, wrote = 0;

  do {
    if ((i = write(1, buf+wrote, len-wrote)) &lt;= 0)
      return (i);
    wrote += i;
  } while (wrote&lt;len);

  return (len);
}
</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-family="monospace">stdin</fo:inline> and <fo:inline font-family="monospace">stdout</fo:inline> are for buffered
      input/output and must <fo:inline font-weight="bold">not</fo:inline> be used for the communication
      with Erlang.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the <fo:inline font-family="monospace">main</fo:inline> function, the C program is to listen for a
      message from Erlang and, according to the selected
      encoding/decoding scheme, use the first byte to determine which
      function to call and the second byte as argument to the
      function. The result of calling the function is then to be sent
      back to Erlang:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

/* port.c */

typedef unsigned char byte;

int main() {
  int fn, arg, res;
  byte buf[100];

  while (read_cmd(buf) &gt; 0) {
    fn = buf[0];
    arg = buf[1];
    
    if (fn == 1) {
      res = foo(arg);
    } else if (fn == 2) {
      res = bar(arg);
    }

    buf[0] = res;
    write_cmd(buf, 1);
  }
}
      
</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the C program is in a <fo:inline font-family="monospace">while</fo:inline>-loop, checking
      for the return value of <fo:inline font-family="monospace">read_cmd/1</fo:inline>. This is because the C
      program must detect when the port closes and terminates.</fo:block>
  <fo:block id="idp3819184" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.4.3 
      Running the Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1.</fo:inline> Compile the C code:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
unix&gt; <fo:inline font-weight="bold">gcc -o extprg complex.c erl_comm.c port.c</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2.</fo:inline> Start Erlang and compile the Erlang code:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
unix&gt; <fo:inline font-weight="bold">erl</fo:inline>
Erlang (BEAM) emulator version 4.9.1.2

Eshell V4.9.1.2 (abort with ^G)
1&gt; <fo:inline font-weight="bold">c(complex1).</fo:inline>
{ok,complex1}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 3.</fo:inline> Run the example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">complex1:start("extprg").</fo:inline>
&lt;0.34.0&gt;
3&gt; <fo:inline font-weight="bold">complex1:foo(3).</fo:inline>
4
4&gt; <fo:inline font-weight="bold">complex1:bar(5).</fo:inline>
10
5&gt; <fo:inline font-weight="bold">complex1:stop().</fo:inline>
stop</fo:block>
  <fo:block id="idp3830448" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">8.5  Erl_Interface</fo:marker>8.5  Erl_Interface</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section outlines an example of how to solve the example
    problem in <fo:inline font-style="italic">Problem Example</fo:inline> by
    using a port and Erl_Interface. It is necessary to read the port
    example in <fo:inline font-style="italic">Ports</fo:inline> before reading
    this section.</fo:block><fo:block id="idp3545168" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.5.1 
      Erlang Program</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows an Erlang program communicating
      with a C program over a plain port with home made encoding:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-module(complex1).
-export([start/1, stop/0, init/1]).
-export([foo/1, bar/1]).

start(ExtPrg) -&gt;
    spawn(?MODULE, init, [ExtPrg]).
stop() -&gt;
    complex ! stop.

foo(X) -&gt;
    call_port({foo, X}).
bar(Y) -&gt;
    call_port({bar, Y}).

call_port(Msg) -&gt;
    complex ! {call, self(), Msg},
    receive
	{complex, Result} -&gt;
	    Result
    end.

init(ExtPrg) -&gt;
    register(complex, self()),
    process_flag(trap_exit, true),
    Port = open_port({spawn, ExtPrg}, [{packet, 2}]),
    loop(Port).

loop(Port) -&gt;
    receive
	{call, Caller, Msg} -&gt;
	    Port ! {self(), {command, encode(Msg)}},
	    receive
		{Port, {data, Data}} -&gt;
		    Caller ! {complex, decode(Data)}
	    end,
	    loop(Port);
	stop -&gt;
	    Port ! {self(), close},
	    receive
		{Port, closed} -&gt;
		    exit(normal)
	    end;
	{'EXIT', Port, Reason} -&gt;
	    exit(port_terminated)
    end.

encode({foo, X}) -&gt; [1, X];
encode({bar, Y}) -&gt; [2, Y].

decode([Int]) -&gt; Int.
</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two differences when using Erl_Interface on the C
      side compared to the example in <fo:inline font-style="italic">
      Ports</fo:inline>, using only the plain port:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>As Erl_Interface operates on the Erlang external term format,
       the port must be set to use binaries.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Instead of inventing an encoding/decoding scheme, the
       <fo:inline font-family="monospace">term_to_binary/1</fo:inline> and <fo:inline font-family="monospace">binary_to_term/1</fo:inline> BIFs are to
       be used.</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">That is:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
open_port({spawn, ExtPrg}, [{packet, 2}])</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">is replaced with:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
open_port({spawn, ExtPrg}, [{packet, 2}, binary])</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Port ! {self(), {command, encode(Msg)}},
receive
  {Port, {data, Data}} -&gt;
    Caller ! {complex, decode(Data)}
end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">is replaced with:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Port ! {self(), {command, term_to_binary(Msg)}},
receive
  {Port, {data, Data}} -&gt;
    Caller ! {complex, binary_to_term(Data)}
end</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The resulting Erlang program is as follows:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-module(complex2).
-export([start/1, stop/0, init/1]).
-export([foo/1, bar/1]).

start(ExtPrg) -&gt;
    spawn(?MODULE, init, [ExtPrg]).
stop() -&gt;
    complex ! stop.

foo(X) -&gt;
    call_port({foo, X}).
bar(Y) -&gt;
    call_port({bar, Y}).

call_port(Msg) -&gt;
    complex ! {call, self(), Msg},
    receive
	{complex, Result} -&gt;
	    Result
    end.

init(ExtPrg) -&gt;
    register(complex, self()),
    process_flag(trap_exit, true),
    Port = open_port({spawn, ExtPrg}, [{packet, 2}, binary]),
    loop(Port).

loop(Port) -&gt;
    receive
	{call, Caller, Msg} -&gt;
	    Port ! {self(), {command, term_to_binary(Msg)}},
	    receive
		{Port, {data, Data}} -&gt;
		    Caller ! {complex, binary_to_term(Data)}
	    end,
	    loop(Port);
	stop -&gt;
	    Port ! {self(), close},
	    receive
		{Port, closed} -&gt;
		    exit(normal)
	    end;
	{'EXIT', Port, Reason} -&gt;
	    exit(port_terminated)
    end.
</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that calling <fo:inline font-family="monospace">complex2:foo/1</fo:inline> and
      <fo:inline font-family="monospace">complex2:bar/1</fo:inline> results in the tuple <fo:inline font-family="monospace">{foo,X}</fo:inline> or
      <fo:inline font-family="monospace">{bar,Y}</fo:inline> being sent to the <fo:inline font-family="monospace">complex</fo:inline> process, which
      codes them as binaries and sends them to the port. This means
      that the C program must be able to handle these two tuples.</fo:block>
  <fo:block id="idp3560720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.5.2 
      C Program</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows a C program communicating with an
      Erlang program over a plain port with home made encoding:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

/* port.c */

typedef unsigned char byte;

int main() {
  int fn, arg, res;
  byte buf[100];

  while (read_cmd(buf) &gt; 0) {
    fn = buf[0];
    arg = buf[1];
    
    if (fn == 1) {
      res = foo(arg);
    } else if (fn == 2) {
      res = bar(arg);
    }

    buf[0] = res;
    write_cmd(buf, 1);
  }
}
      
</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compared to the C program in <fo:inline font-style="italic">
      Ports</fo:inline>, using only the plain port, the
      <fo:inline font-family="monospace">while</fo:inline>-loop must be rewritten. Messages coming from the
      port is on the Erlang external term format. They must be
      converted into an <fo:inline font-family="monospace">ETERM</fo:inline> struct, which is a C struct
      similar to an Erlang term. The result of calling <fo:inline font-family="monospace">foo()</fo:inline> or
      <fo:inline font-family="monospace">bar()</fo:inline> must be converted to the Erlang external term
      format before being sent back to the port. But before calling
      any other Erl_Interface function, the memory handling must be
      initiated:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl_init(NULL, 0);</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions, <fo:inline font-family="monospace">read_cmd()</fo:inline> and
      <fo:inline font-family="monospace">write_cmd()</fo:inline>, from the <fo:inline font-family="monospace">erl_comm.c</fo:inline> example in
      <fo:inline font-style="italic">Ports</fo:inline> can still be
      used for reading from and writing to the port:
    </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

/* erl_comm.c */

typedef unsigned char byte;

read_cmd(byte *buf)
{
  int len;

  if (read_exact(buf, 2) != 2)
    return(-1);
  len = (buf[0] &lt;&lt; 8) | buf[1];
  return read_exact(buf, len);
}

write_cmd(byte *buf, int len)
{
  byte li;

  li = (len &gt;&gt; 8) &amp; 0xff;
  write_exact(&amp;li, 1);
  
  li = len &amp; 0xff;
  write_exact(&amp;li, 1);

  return write_exact(buf, len);
}

read_exact(byte *buf, int len)
{
  int i, got=0;

  do {
    if ((i = read(0, buf+got, len-got)) &lt;= 0)
      return(i);
    got += i;
  } while (got&lt;len);

  return(len);
}

write_exact(byte *buf, int len)
{
  int i, wrote = 0;

  do {
    if ((i = write(1, buf+wrote, len-wrote)) &lt;= 0)
      return (i);
    wrote += i;
  } while (wrote&lt;len);

  return (len);
}
</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">erl_decode()</fo:inline> from <fo:inline font-family="monospace">erl_marshal</fo:inline>
      converts the binary into an <fo:inline font-family="monospace">ETERM</fo:inline> struct:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
int main() {
  ETERM *tuplep;

  while (read_cmd(buf) &gt; 0) {
    tuplep = erl_decode(buf);</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, <fo:inline font-family="monospace">tuplep</fo:inline> points to an <fo:inline font-family="monospace">ETERM</fo:inline> struct
      representing a tuple with two elements; the function name (atom)
      and the argument (integer). Using the function
      <fo:inline font-family="monospace">erl_element()</fo:inline> from <fo:inline font-family="monospace">erl_eterm</fo:inline>, these elements can
      be extracted, but they must also be declared as pointers to an
      <fo:inline font-family="monospace">ETERM</fo:inline> struct:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    fnp = erl_element(1, tuplep);
    argp = erl_element(2, tuplep);</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The macros <fo:inline font-family="monospace">ERL_ATOM_PTR</fo:inline> and <fo:inline font-family="monospace">ERL_INT_VALUE</fo:inline> from
      <fo:inline font-family="monospace">erl_eterm</fo:inline> can be used to obtain the actual values of the
      atom and the integer. The atom value is represented as a string.
      By comparing this value with the strings "foo" and "bar", it can
      be decided which function to call:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    if (strncmp(ERL_ATOM_PTR(fnp), "foo", 3) == 0) {
      res = foo(ERL_INT_VALUE(argp));
    } else if (strncmp(ERL_ATOM_PTR(fnp), "bar", 3) == 0) {
      res = bar(ERL_INT_VALUE(argp));
    }</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now an <fo:inline font-family="monospace">ETERM</fo:inline> struct that represents the integer result
      can be constructed using the function <fo:inline font-family="monospace">erl_mk_int()</fo:inline> from
      <fo:inline font-family="monospace">erl_eterm</fo:inline>. The function
      <fo:inline font-family="monospace">erl_format()</fo:inline> from the module <fo:inline font-family="monospace">erl_format</fo:inline> can also
      be used:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    intp = erl_mk_int(res);</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The resulting <fo:inline font-family="monospace">ETERM</fo:inline> struct is converted into the Erlang
      external term format using the function <fo:inline font-family="monospace">erl_encode()</fo:inline> from
      <fo:inline font-family="monospace">erl_marshal</fo:inline> and sent to Erlang using
      <fo:inline font-family="monospace">write_cmd()</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    erl_encode(intp, buf);
    write_cmd(buf, erl_eterm_len(intp));</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Finally, the memory allocated by the <fo:inline font-family="monospace">ETERM</fo:inline> creating
      functions must be freed:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    erl_free_compound(tuplep);
    erl_free_term(fnp);
    erl_free_term(argp);
    erl_free_term(intp);</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The resulting C program is as follows:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

/* ei.c */

#include "erl_interface.h"
#include "ei.h"

typedef unsigned char byte;

int main() {
  ETERM *tuplep, *intp;
  ETERM *fnp, *argp;
  int res;
  byte buf[100];
  long allocated, freed;

  erl_init(NULL, 0);

  while (read_cmd(buf) &gt; 0) {
    tuplep = erl_decode(buf);
    fnp = erl_element(1, tuplep);
    argp = erl_element(2, tuplep);
    
    if (strncmp(ERL_ATOM_PTR(fnp), "foo", 3) == 0) {
      res = foo(ERL_INT_VALUE(argp));
    } else if (strncmp(ERL_ATOM_PTR(fnp), "bar", 3) == 0) {
      res = bar(ERL_INT_VALUE(argp));
    }

    intp = erl_mk_int(res);
    erl_encode(intp, buf);
    write_cmd(buf, erl_term_len(intp));

    erl_free_compound(tuplep);
    erl_free_term(fnp);
    erl_free_term(argp);
    erl_free_term(intp);
  }
}
      
</fo:block>  <fo:block id="idp3787952" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.5.3 
      Running the Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1.</fo:inline> Compile the C code. This provides the paths to
      the include files <fo:inline font-family="monospace">erl_interface.h</fo:inline> and <fo:inline font-family="monospace">ei.h</fo:inline>, and
      also to the libraries <fo:inline font-family="monospace">erl_interface</fo:inline> and <fo:inline font-family="monospace">ei</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
unix&gt; <fo:inline font-weight="bold">gcc -o extprg -I/usr/local/otp/lib/erl_interface-3.9.2/include \\ </fo:inline>
<fo:inline font-weight="bold">      -L/usr/local/otp/lib/erl_interface-3.9.2/lib \\ </fo:inline>
<fo:inline font-weight="bold">      complex.c erl_comm.c ei.c -lerl_interface -lei -lpthread</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In Erlang/OTP R5B and later versions of OTP, the <fo:inline font-family="monospace">include</fo:inline>
      and <fo:inline font-family="monospace">lib</fo:inline> directories are situated under
      <fo:inline font-family="monospace">OTPROOT/lib/erl_interface-VSN</fo:inline>, where <fo:inline font-family="monospace">OTPROOT</fo:inline> is
      the root directory of the OTP installation
      (<fo:inline font-family="monospace">/usr/local/otp</fo:inline> in the recent example) and <fo:inline font-family="monospace">VSN</fo:inline> is
      the version of the Erl_interface application (3.2.1 in the
      recent example).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In R4B and earlier versions of OTP, <fo:inline font-family="monospace">include</fo:inline> and <fo:inline font-family="monospace">lib</fo:inline>
      are situated under <fo:inline font-family="monospace">OTPROOT/usr</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2.</fo:inline> Start Erlang and compile the Erlang code:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
unix&gt; <fo:inline font-weight="bold">erl</fo:inline>
Erlang (BEAM) emulator version 4.9.1.2

Eshell V4.9.1.2 (abort with ^G)
1&gt; <fo:inline font-weight="bold">c(complex2).</fo:inline>
{ok,complex2}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 3.</fo:inline> Run the example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">complex2:start("./extprg").</fo:inline>
&lt;0.34.0&gt;
3&gt; <fo:inline font-weight="bold">complex2:foo(3).</fo:inline>
4
4&gt; <fo:inline font-weight="bold">complex2:bar(5).</fo:inline>
10
5&gt; <fo:inline font-weight="bold">complex2:bar(352).</fo:inline>
704
6&gt; <fo:inline font-weight="bold">complex2:stop().</fo:inline>
stop</fo:block>
  <fo:block id="idp3807488" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">8.6  Port Drivers</fo:marker>8.6  Port Drivers</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section outlines an example of how to solve the example problem
    in <fo:inline font-style="italic">Problem Example</fo:inline>
    by using a linked-in port driver.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A port driver is a linked-in driver that is accessible as a port
    from an Erlang program. It is a shared library (SO in UNIX, DLL in
    Windows), with special entry points. The Erlang runtime system
    calls these entry points when the driver is started and when data
    is sent to the port. The port driver can also send data to
    Erlang.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As a port driver is dynamically linked into the emulator process,
    this is the fastest way of calling C-code from Erlang. Calling
    functions in the port driver requires no context switches. But it
    is also the least safe way, because a crash in the port driver
    brings the emulator down too.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The scenario is illustrated in the following figure:</fo:block><fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../tutorial/port_driver.gif"/>
    <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        6.1:
         
        Port Driver Communication</fo:block>
  </fo:block><fo:block id="idp2710464" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.6.1 
      Erlang Program</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Like a port program, the port communicates with an Erlang
      process. All communication goes through one Erlang process that
      is the <fo:inline font-weight="bold">connected process</fo:inline> of the port
      driver. Terminating this process closes the port driver.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before the port is created, the driver must be loaded. This is
      done with the function <fo:inline font-family="monospace">erl_dll:load_driver/1</fo:inline>, with the
      name of the shared library as argument.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The port is then created using the BIF <fo:inline font-family="monospace">open_port/2</fo:inline>, with
      the tuple <fo:inline font-family="monospace">{spawn, DriverName}</fo:inline> as the first argument. The
      string <fo:inline font-family="monospace">SharedLib</fo:inline> is the name of the port driver. The second
      argument is a list of options, none in this case:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(complex5).
-export([start/1, init/1]).

start(SharedLib) -&gt;
    case erl_ddll:load_driver(".", SharedLib) of
        ok -&gt; ok;
        {error, already_loaded} -&gt; ok;
        _ -&gt; exit({error, could_not_load_driver})
    end,
    spawn(?MODULE, init, [SharedLib]).

init(SharedLib) -&gt;
  register(complex, self()),
  Port = open_port({spawn, SharedLib}, []),
  loop(Port).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now <fo:inline font-family="monospace">complex5:foo/1</fo:inline> and <fo:inline font-family="monospace">complex5:bar/1</fo:inline>
      can be implemented. Both send a message to the
      <fo:inline font-family="monospace">complex</fo:inline> process and receive the following reply:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
foo(X) -&gt;
    call_port({foo, X}).
bar(Y) -&gt;
    call_port({bar, Y}).

call_port(Msg) -&gt;
    complex ! {call, self(), Msg},
    receive
        {complex, Result} -&gt;
            Result
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">complex</fo:inline> process performs the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Encodes the message into a sequence of bytes.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Sends it to the port.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Waits for a reply.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Decodes the reply.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Sends it back to the caller:</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
loop(Port) -&gt;
    receive
        {call, Caller, Msg} -&gt;
            Port ! {self(), {command, encode(Msg)}},
            receive
                {Port, {data, Data}} -&gt;
                    Caller ! {complex, decode(Data)}
            end,
            loop(Port)
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assuming that both the arguments and the results from the C
      functions are less than 256, a simple encoding/decoding scheme
      is employed. In this scheme, <fo:inline font-family="monospace">foo</fo:inline> is represented by byte
      1, <fo:inline font-family="monospace">bar</fo:inline> is represented by 2, and the argument/result is
      represented by a single byte as well:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
encode({foo, X}) -&gt; [1, X];
encode({bar, Y}) -&gt; [2, Y].

decode([Int]) -&gt; Int.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The resulting Erlang program, including functions for stopping
      the port and detecting port failures, is as follows:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-module(complex5).
-export([start/1, stop/0, init/1]).
-export([foo/1, bar/1]).

start(SharedLib) -&gt;
    case erl_ddll:load_driver(".", SharedLib) of
	ok -&gt; ok;
	{error, already_loaded} -&gt; ok;
	_ -&gt; exit({error, could_not_load_driver})
    end,
    spawn(?MODULE, init, [SharedLib]).

init(SharedLib) -&gt;
    register(complex, self()),
    Port = open_port({spawn, SharedLib}, []),
    loop(Port).

stop() -&gt;
    complex ! stop.

foo(X) -&gt;
    call_port({foo, X}).
bar(Y) -&gt;
    call_port({bar, Y}).

call_port(Msg) -&gt;
    complex ! {call, self(), Msg},
    receive
	{complex, Result} -&gt;
	    Result
    end.

loop(Port) -&gt;
    receive
	{call, Caller, Msg} -&gt;
	    Port ! {self(), {command, encode(Msg)}},
	    receive
		{Port, {data, Data}} -&gt;
		    Caller ! {complex, decode(Data)}
	    end,
	    loop(Port);
	stop -&gt;
	    Port ! {self(), close},
	    receive
		{Port, closed} -&gt;
		    exit(normal)
	    end;
	{'EXIT', Port, Reason} -&gt;
	    io:format("~p ~n", [Reason]),
	    exit(port_terminated)
    end.

encode({foo, X}) -&gt; [1, X];
encode({bar, Y}) -&gt; [2, Y].

decode([Int]) -&gt; Int.
</fo:block>  <fo:block id="idp2727424" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.6.2 
      C Driver</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The C driver is a module that is compiled and linked into a
      shared library. It uses a driver structure and includes the
      header file <fo:inline font-family="monospace">erl_driver.h</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver structure is filled with the driver name and function
      pointers. It is returned from the special entry point, declared
      with the macro <fo:inline font-family="monospace">DRIVER_INIT(&lt;driver_name&gt;)</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions for receiving and sending data are combined into
      a function, pointed out by the driver structure. The data sent
      into the port is given as arguments, and the replied data is sent
      with the C-function <fo:inline font-family="monospace">driver_output</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As the driver is a shared module, not a program, no main
      function is present. All function pointers are not used
      in this example, and the corresponding fields in the
      <fo:inline font-family="monospace">driver_entry</fo:inline> structure are set to NULL.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All functions in the driver takes a handle (returned from
      <fo:inline font-family="monospace">start</fo:inline>) that is just passed along by the Erlang
      process. This must in some way refer to the port driver
      instance.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">example_drv_start</fo:inline>, is the only function that is called with
      a handle to the port instance, so this must be saved. It is
      customary to use an allocated driver-defined structure for this
      one, and to pass a pointer back as a reference.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is not a good idea to use a global variable as the port
      driver can be spawned by multiple Erlang processes. This
      driver-structure is to be instantiated multiple times:
      </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

/* port_driver.c */

#include &lt;stdio.h&gt;
#include "erl_driver.h"

typedef struct {
    ErlDrvPort port;
} example_data;

static ErlDrvData example_drv_start(ErlDrvPort port, char *buff)
{
    example_data* d = (example_data*)driver_alloc(sizeof(example_data));
    d-&gt;port = port;
    return (ErlDrvData)d;
}

static void example_drv_stop(ErlDrvData handle)
{
    driver_free((char*)handle);
}

static void example_drv_output(ErlDrvData handle, char *buff, 
			       ErlDrvSizeT bufflen)
{
    example_data* d = (example_data*)handle;
    char fn = buff[0], arg = buff[1], res;
    if (fn == 1) {
      res = foo(arg);
    } else if (fn == 2) {
      res = bar(arg);
    }
    driver_output(d-&gt;port, &amp;res, 1);
}

ErlDrvEntry example_driver_entry = {
    NULL,			/* F_PTR init, called when driver is loaded */
    example_drv_start,		/* L_PTR start, called when port is opened */
    example_drv_stop,		/* F_PTR stop, called when port is closed */
    example_drv_output,		/* F_PTR output, called when erlang has sent */
    NULL,			/* F_PTR ready_input, called when input descriptor ready */
    NULL,			/* F_PTR ready_output, called when output descriptor ready */
    "example_drv",		/* char *driver_name, the argument to open_port */
    NULL,			/* F_PTR finish, called when unloaded */
    NULL,                       /* void *handle, Reserved by VM */
    NULL,			/* F_PTR control, port_command callback */
    NULL,			/* F_PTR timeout, reserved */
    NULL,			/* F_PTR outputv, reserved */
    NULL,                       /* F_PTR ready_async, only for async drivers */
    NULL,                       /* F_PTR flush, called when port is about 
				   to be closed, but there is data in driver 
				   queue */
    NULL,                       /* F_PTR call, much like control, sync call
				   to driver */
    NULL,                       /* F_PTR event, called when an event selected 
				   by driver_event() occurs. */
    ERL_DRV_EXTENDED_MARKER,    /* int extended marker, Should always be 
				   set to indicate driver versioning */
    ERL_DRV_EXTENDED_MAJOR_VERSION, /* int major_version, should always be 
				       set to this value */
    ERL_DRV_EXTENDED_MINOR_VERSION, /* int minor_version, should always be 
				       set to this value */
    0,                          /* int driver_flags, see documentation */
    NULL,                       /* void *handle2, reserved for VM use */
    NULL,                       /* F_PTR process_exit, called when a 
				   monitored process dies */
    NULL                        /* F_PTR stop_select, called to close an 
				   event object */
};

DRIVER_INIT(example_drv) /* must match name in driver_entry */
{
    return &amp;example_driver_entry;
}

</fo:block>  <fo:block id="idp2738720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.6.3 
      Running the Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1.</fo:inline> Compile the C code:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
unix&gt; <fo:inline font-weight="bold">gcc -o example_drv.so -fpic -shared complex.c port_driver.c</fo:inline>
windows&gt; <fo:inline font-weight="bold">cl -LD -MD -Fe example_drv.dll complex.c port_driver.c</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2.</fo:inline> Start Erlang and compile the Erlang code:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erl</fo:inline>
Erlang (BEAM) emulator version 5.1

Eshell V5.1 (abort with ^G)
1&gt; <fo:inline font-weight="bold">c(complex5).</fo:inline>
{ok,complex5}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 3.</fo:inline> Run the example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">complex5:start("example_drv").</fo:inline>
&lt;0.34.0&gt;
3&gt; <fo:inline font-weight="bold">complex5:foo(3).</fo:inline>
4
4&gt; <fo:inline font-weight="bold">complex5:bar(5).</fo:inline>
10
5&gt; <fo:inline font-weight="bold">complex5:stop().</fo:inline>
stop</fo:block>
  <fo:block id="idp2750528" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">8.7  C Nodes</fo:marker>8.7  C Nodes</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section outlines an example of how to solve the example
    problem in <fo:inline font-style="italic">Problem Example</fo:inline>
    by using a C node. Notice that a C node is not typically
    used for solving simple problems like this, a port is
    sufficient.</fo:block><fo:block id="idp2754272" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.7.1 
      Erlang Program</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From Erlang's point of view, the C node is treated like a
      normal Erlang node. Thus, calling the functions <fo:inline font-family="monospace">foo</fo:inline> and
      <fo:inline font-family="monospace">bar</fo:inline> only involves sending a message to the C node asking
      for the function to be called, and receiving the result. Sending
      a message requires a recipient, that is, a process that can be
      defined using either a pid or a tuple, consisting of a
      registered name and a node name. In this case, a tuple is the
      only alternative as no pid is known:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{RegName, Node} ! Msg</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node name <fo:inline font-family="monospace">Node</fo:inline> is to be the name of the C node. If
      short node names are used, the plain name of the node is
      <fo:inline font-family="monospace">cN</fo:inline>, where <fo:inline font-family="monospace">N</fo:inline> is an integer. If long node names are
      used, there is no such restriction. An example of a C node name
      using short node names is thus <fo:inline font-family="monospace">c1@idril</fo:inline>, an example using
      long node names is <fo:inline font-family="monospace">cnode@idril.ericsson.se</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The registered name, <fo:inline font-family="monospace">RegName</fo:inline>, can be any atom. The name
      can be ignored by the C code, or, for example, be used to
      distinguish between different types of messages. An example of
      Erlang code using short node names follows:
      </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-module(complex3).
-export([foo/1, bar/1]).

foo(X) -&gt;
    call_cnode({foo, X}).
bar(Y) -&gt;
    call_cnode({bar, Y}).

call_cnode(Msg) -&gt;
    {any, c1@idril} ! {call, self(), Msg},
    receive
	{cnode, Result} -&gt;
	    Result
    end.
</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      When using long node names, the code is slightly different as
      shown in the following example:
    </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-module(complex4).
-export([foo/1, bar/1]).

foo(X) -&gt;
    call_cnode({foo, X}).
bar(Y) -&gt;
    call_cnode({bar, Y}).

call_cnode(Msg) -&gt;
    {any, 'cnode@idril.du.uab.ericsson.se'} ! {call, self(), Msg},
    receive
	{cnode, Result} -&gt;
	    Result
    end.
</fo:block>
  <fo:block id="idp2763904" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.7.2 
      C Program</fo:block>
    

    <fo:block id="idp2764640" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Setting Up Communication</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before calling any other function in Erl_Interface, the
        memory handling must be initiated:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl_init(NULL, 0);</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now the C node can be initiated. If short node names are
        used, this is done by calling <fo:inline font-family="monospace">erl_connect_init()</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl_connect_init(1, "secretcookie", 0);</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The first argument is the integer used to construct the node name.
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the example, the plain node name is <fo:inline font-family="monospace">c1</fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The second argument is a string defining the magic cookie.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The third argument is an integer that is used to identify
       a particular instance of a C node.</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If long node node names are used, initiation is done by
        calling <fo:inline font-family="monospace">erl_connect_xinit()</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl_connect_xinit("idril", "cnode", "cnode@idril.ericsson.se",
                  &amp;addr, "secretcookie", 0);</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The first argument is the host name.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The second argument is the plain node name.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The third argument is the full node name.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The fourth argument is a pointer to an <fo:inline font-family="monospace">in_addr</fo:inline>
       struct with the IP address of the host.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The fifth argument is the magic cookie.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The sixth argument is the instance number.</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The C node can act as a server or a client when setting up
         the Erlang-C communication. If it acts as a client, it
         connects to an Erlang node by calling <fo:inline font-family="monospace">erl_connect()</fo:inline>,
         which returns an open file descriptor at success:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
fd = erl_connect("e1@idril");</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the C node acts as a server, it must first create a socket
        (call <fo:inline font-family="monospace">bind()</fo:inline> and <fo:inline font-family="monospace">listen()</fo:inline>) listening to a
        certain port number <fo:inline font-family="monospace">port</fo:inline>. It then publishes its name
        and port number with <fo:inline font-family="monospace">epmd</fo:inline>, the Erlang port mapper
        daemon. For details, see the <fo:inline font-style="italic">epmd</fo:inline> manual page in ERTS:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl_publish(port);</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now the C node server can accept connections from Erlang nodes:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
fd = erl_accept(listen, &amp;conn);</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second argument to <fo:inline font-family="monospace">erl_accept</fo:inline> is a struct
        <fo:inline font-family="monospace">ErlConnect</fo:inline> which contains useful information when a
        connection has been established, for example, the name of the
        Erlang node.</fo:block>
    

    <fo:block id="idp2784320" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Sending and Receiving Messages</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The C node can receive a message from Erlang by calling
        <fo:inline font-family="monospace">erl_receive msg()</fo:inline>. This function reads data from the
        open file descriptor <fo:inline font-family="monospace">fd</fo:inline> into a buffer and puts the
        result in an <fo:inline font-family="monospace">ErlMessage</fo:inline> struct <fo:inline font-family="monospace">emsg</fo:inline>.
        <fo:inline font-family="monospace">ErlMessage</fo:inline> has a field <fo:inline font-family="monospace">type</fo:inline> defining what kind
        of data is received. In this case, the type of interest is
        <fo:inline font-family="monospace">ERL_REG_SEND</fo:inline> which indicates that Erlang sent a message
        to a registered process at the C node. The actual message, an
        <fo:inline font-family="monospace">ETERM</fo:inline>, is in the <fo:inline font-family="monospace">msg</fo:inline> field.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also necessary to take care of the types
        <fo:inline font-family="monospace">ERL_ERROR</fo:inline> (an error occurred) and <fo:inline font-family="monospace">ERL_TICK</fo:inline>
        (alive check from other node, is to be ignored). Other
        possible types indicate process events such as link, unlink,
        and exit:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  while (loop) {

    got = erl_receive_msg(fd, buf, BUFSIZE, &amp;emsg);
    if (got == ERL_TICK) {
      /* ignore */
    } else if (got == ERL_ERROR) {
      loop = 0; /* exit while loop */
    } else {
      if (emsg.type == ERL_REG_SEND) {</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As the message is an <fo:inline font-family="monospace">ETERM</fo:inline> struct, Erl_Interface
        functions can be used to manipulate it. In this case, the
        message becomes a 3-tuple, because that is how the Erlang code
        is written. The second element will be the pid of the caller
        and the third element will be the tuple <fo:inline font-family="monospace">{Function,Arg}</fo:inline>
        determining which function to call, and with which argument.
        The result of calling the function is made into an
        <fo:inline font-family="monospace">ETERM</fo:inline> struct as well and sent back to Erlang using
        <fo:inline font-family="monospace">erl_send()</fo:inline>, which takes the open file descriptor, a
        pid, and a term as arguments:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        fromp = erl_element(2, emsg.msg);
        tuplep = erl_element(3, emsg.msg);
        fnp = erl_element(1, tuplep);
        argp = erl_element(2, tuplep);

        if (strncmp(ERL_ATOM_PTR(fnp), "foo", 3) == 0) {
          res = foo(ERL_INT_VALUE(argp));
        } else if (strncmp(ERL_ATOM_PTR(fnp), "bar", 3) == 0) {
          res = bar(ERL_INT_VALUE(argp));
        }

        resp = erl_format("{cnode, ~i}", res);
        erl_send(fd, fromp, resp);</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Finally, the memory allocated by the <fo:inline font-family="monospace">ETERM</fo:inline> creating
        functions (including <fo:inline font-family="monospace">erl_receive_msg()</fo:inline> must be
        freed:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        erl_free_term(emsg.from); erl_free_term(emsg.msg);
        erl_free_term(fromp); erl_free_term(tuplep);
        erl_free_term(fnp); erl_free_term(argp);
        erl_free_term(resp);</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following examples show the resulting C programs.
        First a C node server using short node names:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

/* cnode_s.c */

#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;

#include "erl_interface.h"
#include "ei.h"

#define BUFSIZE 1000

int main(int argc, char **argv) {
  int port;                                /* Listen port number */
  int listen;                              /* Listen socket */
  int fd;                                  /* fd to Erlang node */
  ErlConnect conn;                         /* Connection data */

  int loop = 1;                            /* Loop flag */
  int got;                                 /* Result of receive */
  unsigned char buf[BUFSIZE];              /* Buffer for incoming message */
  ErlMessage emsg;                         /* Incoming message */

  ETERM *fromp, *tuplep, *fnp, *argp, *resp;
  int res;

  port = atoi(argv[1]);

  erl_init(NULL, 0);

  if (erl_connect_init(1, "secretcookie", 0) == -1)
    erl_err_quit("erl_connect_init");

  /* Make a listen socket */
  if ((listen = my_listen(port)) &lt;= 0)
    erl_err_quit("my_listen");

  if (erl_publish(port) == -1)
    erl_err_quit("erl_publish");

  if ((fd = erl_accept(listen, &amp;conn)) == ERL_ERROR)
    erl_err_quit("erl_accept");
  fprintf(stderr, "Connected to %s\n\r", conn.nodename);

  while (loop) {

    got = erl_receive_msg(fd, buf, BUFSIZE, &amp;emsg);
    if (got == ERL_TICK) {
      /* ignore */
    } else if (got == ERL_ERROR) {
      loop = 0;
    } else {

      if (emsg.type == ERL_REG_SEND) {
	fromp = erl_element(2, emsg.msg);
	tuplep = erl_element(3, emsg.msg);
	fnp = erl_element(1, tuplep);
	argp = erl_element(2, tuplep);

	if (strncmp(ERL_ATOM_PTR(fnp), "foo", 3) == 0) {
	  res = foo(ERL_INT_VALUE(argp));
	} else if (strncmp(ERL_ATOM_PTR(fnp), "bar", 3) == 0) {
	  res = bar(ERL_INT_VALUE(argp));
	}

	resp = erl_format("{cnode, ~i}", res);
	erl_send(fd, fromp, resp);

	erl_free_term(emsg.from); erl_free_term(emsg.msg);
	erl_free_term(fromp); erl_free_term(tuplep);
	erl_free_term(fnp); erl_free_term(argp);
	erl_free_term(resp);
      }
    }
  } /* while */
}

  
int my_listen(int port) {
  int listen_fd;
  struct sockaddr_in addr;
  int on = 1;

  if ((listen_fd = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0)
    return (-1);

  setsockopt(listen_fd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on));

  memset((void*) &amp;addr, 0, (size_t) sizeof(addr));
  addr.sin_family = AF_INET;
  addr.sin_port = htons(port);
  addr.sin_addr.s_addr = htonl(INADDR_ANY);

  if (bind(listen_fd, (struct sockaddr*) &amp;addr, sizeof(addr)) &lt; 0)
    return (-1);

  listen(listen_fd, 5);
  return listen_fd;
}
</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A C node server using long node names:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

/* cnode_s2.c */

#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;

#include "erl_interface.h"
#include "ei.h"

#define BUFSIZE 1000

int main(int argc, char **argv) {
  struct in_addr addr;                     /* 32-bit IP number of host */
  int port;                                /* Listen port number */
  int listen;                              /* Listen socket */
  int fd;                                  /* fd to Erlang node */
  ErlConnect conn;                         /* Connection data */

  int loop = 1;                            /* Loop flag */
  int got;                                 /* Result of receive */
  unsigned char buf[BUFSIZE];              /* Buffer for incoming message */
  ErlMessage emsg;                         /* Incoming message */

  ETERM *fromp, *tuplep, *fnp, *argp, *resp;
  int res;
  
  port = atoi(argv[1]);

  erl_init(NULL, 0);

  addr.s_addr = inet_addr("134.138.177.89");
  if (erl_connect_xinit("idril", "cnode", "cnode@idril.du.uab.ericsson.se",
			&amp;addr, "secretcookie", 0) == -1)
    erl_err_quit("erl_connect_xinit");

  /* Make a listen socket */
  if ((listen = my_listen(port)) &lt;= 0)
    erl_err_quit("my_listen");

  if (erl_publish(port) == -1)
    erl_err_quit("erl_publish");

  if ((fd = erl_accept(listen, &amp;conn)) == ERL_ERROR)
    erl_err_quit("erl_accept");
  fprintf(stderr, "Connected to %s\n\r", conn.nodename);

  while (loop) {

    got = erl_receive_msg(fd, buf, BUFSIZE, &amp;emsg);
    if (got == ERL_TICK) {
      /* ignore */
    } else if (got == ERL_ERROR) {
      loop = 0;
    } else {

      if (emsg.type == ERL_REG_SEND) {
	fromp = erl_element(2, emsg.msg);
	tuplep = erl_element(3, emsg.msg);
	fnp = erl_element(1, tuplep);
	argp = erl_element(2, tuplep);

	if (strncmp(ERL_ATOM_PTR(fnp), "foo", 3) == 0) {
	  res = foo(ERL_INT_VALUE(argp));
	} else if (strncmp(ERL_ATOM_PTR(fnp), "bar", 3) == 0) {
	  res = bar(ERL_INT_VALUE(argp));
	}

	resp = erl_format("{cnode, ~i}", res);
	erl_send(fd, fromp, resp);

	erl_free_term(emsg.from); erl_free_term(emsg.msg);
	erl_free_term(fromp); erl_free_term(tuplep);
	erl_free_term(fnp); erl_free_term(argp);
	erl_free_term(resp);
      }
    }
  }
}

  
int my_listen(int port) {
  int listen_fd;
  struct sockaddr_in addr;
  int on = 1;

  if ((listen_fd = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0)
    return (-1);

  setsockopt(listen_fd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on));

  memset((void*) &amp;addr, 0, (size_t) sizeof(addr));
  addr.sin_family = AF_INET;
  addr.sin_port = htons(port);
  addr.sin_addr.s_addr = htonl(INADDR_ANY);

  if (bind(listen_fd, (struct sockaddr*) &amp;addr, sizeof(addr)) &lt; 0)
    return (-1);

  listen(listen_fd, 5);
  return listen_fd;
}
</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Finally, the code for the C node client:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

/* cnode_c.c */

#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;

#include "erl_interface.h"
#include "ei.h"

#define BUFSIZE 1000

int main(int argc, char **argv) {
  int fd;                                  /* fd to Erlang node */

  int loop = 1;                            /* Loop flag */
  int got;                                 /* Result of receive */
  unsigned char buf[BUFSIZE];              /* Buffer for incoming message */
  ErlMessage emsg;                         /* Incoming message */

  ETERM *fromp, *tuplep, *fnp, *argp, *resp;
  int res;
  
  erl_init(NULL, 0);

  if (erl_connect_init(1, "secretcookie", 0) == -1)
    erl_err_quit("erl_connect_init");

  if ((fd = erl_connect("e1@idril")) &lt; 0)
    erl_err_quit("erl_connect");
  fprintf(stderr, "Connected to ei@idril\n\r");

  while (loop) {

    got = erl_receive_msg(fd, buf, BUFSIZE, &amp;emsg);
    if (got == ERL_TICK) {
      /* ignore */
    } else if (got == ERL_ERROR) {
      loop = 0;
    } else {

      if (emsg.type == ERL_REG_SEND) {
	fromp = erl_element(2, emsg.msg);
	tuplep = erl_element(3, emsg.msg);
	fnp = erl_element(1, tuplep);
	argp = erl_element(2, tuplep);

	if (strncmp(ERL_ATOM_PTR(fnp), "foo", 3) == 0) {
	  res = foo(ERL_INT_VALUE(argp));
	} else if (strncmp(ERL_ATOM_PTR(fnp), "bar", 3) == 0) {
	  res = bar(ERL_INT_VALUE(argp));
	}

	resp = erl_format("{cnode, ~i}", res);
	erl_send(fd, fromp, resp);

	erl_free_term(emsg.from); erl_free_term(emsg.msg);
	erl_free_term(fromp); erl_free_term(tuplep);
	erl_free_term(fnp); erl_free_term(argp);
	erl_free_term(resp);
      }
    }
  }
}
</fo:block>    
  <fo:block id="idp2806624" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.7.3 
      Running the Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1.</fo:inline> Compile the C code. This provides the paths to
      the Erl_Interface include files and libraries, and to the
      <fo:inline font-family="monospace">socket</fo:inline> and <fo:inline font-family="monospace">nsl</fo:inline> libraries:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt;  <fo:inline font-weight="bold">gcc -o cserver \\ </fo:inline>
<fo:inline font-weight="bold">-I/usr/local/otp/lib/erl_interface-3.2.1/include \\ </fo:inline>
<fo:inline font-weight="bold">-L/usr/local/otp/lib/erl_interface-3.2.1/lib \\ </fo:inline>
<fo:inline font-weight="bold">complex.c cnode_s.c \\ </fo:inline>
<fo:inline font-weight="bold">-lerl_interface -lei -lsocket -lnsl</fo:inline>

unix&gt; <fo:inline font-weight="bold">gcc -o cserver2 \\ </fo:inline>
<fo:inline font-weight="bold">-I/usr/local/otp/lib/erl_interface-3.2.1/include \\ </fo:inline>
<fo:inline font-weight="bold">-L/usr/local/otp/lib/erl_interface-3.2.1/lib \\ </fo:inline>
<fo:inline font-weight="bold">complex.c cnode_s2.c \\ </fo:inline>
<fo:inline font-weight="bold">-lerl_interface -lei -lsocket -lnsl</fo:inline>

unix&gt; <fo:inline font-weight="bold">gcc -o cclient \\ </fo:inline>
<fo:inline font-weight="bold">-I/usr/local/otp/lib/erl_interface-3.2.1/include \\ </fo:inline>
<fo:inline font-weight="bold">-L/usr/local/otp/lib/erl_interface-3.2.1/lib \\ </fo:inline>
<fo:inline font-weight="bold">complex.c cnode_c.c \\ </fo:inline>
<fo:inline font-weight="bold">-lerl_interface -lei -lsocket -lnsl</fo:inline></fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In Erlang/OTP R5B and later versions of OTP, the
      <fo:inline font-family="monospace">include</fo:inline> and <fo:inline font-family="monospace">lib</fo:inline> directories are situated under
      <fo:inline font-family="monospace">OTPROOT/lib/erl_interface-VSN</fo:inline>, where <fo:inline font-family="monospace">OTPROOT</fo:inline> is
      the root directory of the OTP installation
      (<fo:inline font-family="monospace">/usr/local/otp</fo:inline> in the recent example) and <fo:inline font-family="monospace">VSN</fo:inline> is
      the version of the Erl_Interface application (3.2.1 in the
      recent example).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In R4B and earlier versions of OTP, <fo:inline font-family="monospace">include</fo:inline> and
      <fo:inline font-family="monospace">lib</fo:inline> are situated under <fo:inline font-family="monospace">OTPROOT/usr</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2.</fo:inline> Compile the Erlang code:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
unix&gt; <fo:inline font-weight="bold">erl -compile complex3 complex4</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 3.</fo:inline> Run the C node server example with short node names.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do as follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Start the C program <fo:inline font-family="monospace">cserver</fo:inline> and Erlang in
       different windows.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">cserver</fo:inline> takes a port number as argument and must
       be started before trying to call the Erlang functions.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The Erlang node is to be given the short name <fo:inline font-family="monospace">e1</fo:inline>
       and must be set to use the same magic cookie as the C node,
       <fo:inline font-family="monospace">secretcookie</fo:inline>:</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
unix&gt; <fo:inline font-weight="bold">cserver 3456</fo:inline>

unix&gt; <fo:inline font-weight="bold">erl -sname e1 -setcookie secretcookie</fo:inline>
Erlang (BEAM) emulator version 4.9.1.2
 
Eshell V4.9.1.2  (abort with ^G)
(e1@idril)1&gt; <fo:inline font-weight="bold">complex3:foo(3).</fo:inline>
4
(e1@idril)2&gt; <fo:inline font-weight="bold">complex3:bar(5).</fo:inline>
10</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 4.</fo:inline> Run the C node client example. Terminate
      <fo:inline font-family="monospace">cserver</fo:inline>, but not Erlang, and start <fo:inline font-family="monospace">cclient</fo:inline>. The
      Erlang node must be started before the C node client:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
unix&gt; <fo:inline font-weight="bold">cclient</fo:inline>

(e1@idril)3&gt; <fo:inline font-weight="bold">complex3:foo(3).</fo:inline>
4
(e1@idril)4&gt; <fo:inline font-weight="bold">complex3:bar(5).</fo:inline>
10</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 5.</fo:inline> Run the C node server example with long node names:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
unix&gt; <fo:inline font-weight="bold">cserver2 3456</fo:inline>

unix&gt; <fo:inline font-weight="bold">erl -name e1 -setcookie secretcookie</fo:inline>
Erlang (BEAM) emulator version 4.9.1.2
 
Eshell V4.9.1.2  (abort with ^G)
(e1@idril.du.uab.ericsson.se)1&gt; <fo:inline font-weight="bold">complex4:foo(3).</fo:inline>
4
(e1@idril.du.uab.ericsson.se)2&gt; <fo:inline font-weight="bold">complex4:bar(5).</fo:inline>
10</fo:block>
  <fo:block id="idp6497984" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">8.8  NIFs</fo:marker>8.8  NIFs</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section outlines an example of how to solve the example
    problem in <fo:inline font-style="italic">Problem Example</fo:inline>
    by using Native Implemented Functions (NIFs).</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">NIFs were introduced in Erlang/OTP R13B03 as an experimental
    feature. It is a simpler and more efficient way of calling C-code
    than using port drivers. NIFs are most suitable for synchronous
    functions, such as <fo:inline font-family="monospace">foo</fo:inline> and <fo:inline font-family="monospace">bar</fo:inline> in the example, that
    do some relatively short calculations without side effects and
    return the result.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A NIF is a function that is implemented in C instead of Erlang.
    NIFs appear as any other functions to the callers. They belong to
    a module and are called like any other Erlang functions. The NIFs
    of a module are compiled and linked into a dynamic loadable,
    shared library (SO in UNIX, DLL in Windows). The NIF library must
    be loaded in runtime by the Erlang code of the module.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As a NIF library is dynamically linked into the emulator process,
    this is the fastest way of calling C-code from Erlang (alongside
    port drivers). Calling NIFs requires no context switches. But it
    is also the least safe, because a crash in a NIF brings the
    emulator down too.</fo:block><fo:block id="idp6504944" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.8.1 
      Erlang Program</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Even if all functions of a module are NIFs, an Erlang
      module is still needed for two reasons:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The NIF library must be explicitly loaded by
      Erlang code in the same module.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>All NIFs of a module must have an Erlang implementation
      as well.</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally these are minimal stub implementations that throw an
     exception. But they can also be used as fallback implementations
     for functions that do not have native implemenations on some
     architectures.</fo:block>
   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">NIF libraries are loaded by calling <fo:inline font-family="monospace">erlang:load_nif/2</fo:inline>,
     with the name of the shared library as argument. The second
     argument can be any term that will be passed on to the library
     and used for initialization:</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-module(complex6).
-export([foo/1, bar/1]).
-on_load(init/0).

init() -&gt;
    ok = erlang:load_nif("./complex6_nif", 0).

foo(_X) -&gt;
    exit(nif_library_not_loaded).
bar(_Y) -&gt;
    exit(nif_library_not_loaded).
</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, the directive <fo:inline font-family="monospace">on_load</fo:inline> is used to get function
      <fo:inline font-family="monospace">init</fo:inline> to be automatically called when the module is
      loaded. If <fo:inline font-family="monospace">init</fo:inline> returns anything other than <fo:inline font-family="monospace">ok</fo:inline>,
      such when the loading of the NIF library fails in this example,
      the module is unloaded and calls to functions within it,
      fail.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Loading the NIF library overrides the stub implementations
      and cause calls to <fo:inline font-family="monospace">foo</fo:inline> and <fo:inline font-family="monospace">bar</fo:inline> to be dispatched to
      the NIF implementations instead.</fo:block>
  <fo:block id="idp6514640" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.8.2 
      NIF Library Code</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The NIFs of the module are compiled and linked into a
      shared library. Each NIF is implemented as a normal C function. The macro
      <fo:inline font-family="monospace">ERL_NIF_INIT</fo:inline> together with an array of structures defines the names,
      arity, and function pointers of all the NIFs in the module. The header
      file <fo:inline font-family="monospace">erl_nif.h</fo:inline> must be included. As the library is a shared
      module, not a program, no main function is to be present.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function arguments passed to a NIF appears in an array <fo:inline font-family="monospace">argv</fo:inline>,
      with <fo:inline font-family="monospace">argc</fo:inline> as the length of the array, and thus the arity of the
      function. The Nth argument of the function can be accessed as
      <fo:inline font-family="monospace">argv[N-1]</fo:inline>. NIFs also take an environment argument that
      serves as an opaque handle that is needed to be passed on to
      most API functions. The environment contains information about
      the calling Erlang process:</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

#include &lt;erl_nif.h&gt;

extern int foo(int x);
extern int bar(int y);

static ERL_NIF_TERM foo_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])
{
    int x, ret;
    if (!enif_get_int(env, argv[0], &amp;x)) {
	return enif_make_badarg(env);
    }
    ret = foo(x);
    return enif_make_int(env, ret);
}

static ERL_NIF_TERM bar_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])
{
    int y, ret;
    if (!enif_get_int(env, argv[0], &amp;y)) {
	return enif_make_badarg(env);
    }
    ret = bar(y);
    return enif_make_int(env, ret);
}

static ErlNifFunc nif_funcs[] = {
    {"foo", 1, foo_nif},
    {"bar", 1, bar_nif}
};

ERL_NIF_INIT(complex6, nif_funcs, NULL, NULL, NULL, NULL)

</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here,<fo:inline font-family="monospace">ERL_NIF_INIT</fo:inline> has the following arguments:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first argument must be the name of the
      Erlang module as a C-identifier. It will be stringified by the
      macro.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The second argument is the array of <fo:inline font-family="monospace">ErlNifFunc</fo:inline>
      structures containing name, arity, and function pointer of
      each NIF.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The remaining arguments are pointers to callback functions
      that can be used to initialize the library. They are not used
      in this simple example, hence they are all set to <fo:inline font-family="monospace">NULL</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Function arguments and return values are represented as values
      of type <fo:inline font-family="monospace">ERL_NIF_TERM</fo:inline>. Here, functions like <fo:inline font-family="monospace">enif_get_int</fo:inline>
      and <fo:inline font-family="monospace">enif_make_int</fo:inline> are used to convert between Erlang term
      and C-type.
      If the function argument <fo:inline font-family="monospace">argv[0]</fo:inline> is not an integer,
      <fo:inline font-family="monospace">enif_get_int</fo:inline> returns false, in which case it returns
      by throwing a <fo:inline font-family="monospace">badarg</fo:inline>-exception with <fo:inline font-family="monospace">enif_make_badarg</fo:inline>.</fo:block>
  <fo:block id="idp6529072" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">8.8.3 
      Running the Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1.</fo:inline> Compile the C code:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
unix&gt; <fo:inline font-weight="bold">gcc -o complex6_nif.so -fpic -shared complex.c complex6_nif.c</fo:inline>
windows&gt; <fo:inline font-weight="bold">cl -LD -MD -Fe complex6_nif.dll complex.c complex6_nif.c</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2:</fo:inline> Start Erlang and compile the Erlang code:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erl</fo:inline>
Erlang R13B04 (erts-5.7.5) [64-bit] [smp:4:4] [rq:4] [async-threads:0] [kernel-poll:false]

Eshell V5.7.5  (abort with ^G)
1&gt; <fo:inline font-weight="bold">c(complex6).</fo:inline>
{ok,complex6}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 3:</fo:inline> Run the example:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; <fo:inline font-weight="bold">complex6:foo(3).</fo:inline>
4
4&gt; <fo:inline font-weight="bold">complex6:bar(5).</fo:inline>
10
5&gt; <fo:inline font-weight="bold">complex6:foo("not an integer").</fo:inline>
** exception error: bad argument
     in function  complex6:foo/1
        called as comlpex6:foo("not an integer")
</fo:block>
<fo:block id="idp7703344" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">9   
      OTP Design Principles</fo:block><fo:block id="idp7698352" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">9.1  Overview</fo:marker>9.1  Overview</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">OTP design principles</fo:inline> define how to
    structure Erlang code in terms of processes, modules,
    and directories.</fo:block><fo:block id="idp7693920" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.1.1 
      Supervision Trees</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A basic concept in Erlang/OTP is the <fo:inline font-weight="bold">supervision tree</fo:inline>.
      This is a process structuring model based on the idea of
      <fo:inline font-weight="bold">workers</fo:inline> and <fo:inline font-weight="bold">supervisors</fo:inline>:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Workers are processes that perform computations, that is,
       they do the actual work.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Supervisors are processes that monitor the behaviour of
       workers. A supervisor can restart a worker if something goes
       wrong.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The supervision tree is a hierarchical arrangement of
       code into supervisors and workers, which makes it possible to
       design and program fault-tolerant software.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following figure, square boxes represents supervisors and
      circles represent workers:</fo:block>
    
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../design_principles/sup6.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        1.1:
         
        Supervision Tree</fo:block>
    </fo:block>
  <fo:block id="idp7686416" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.1.2 
      Behaviours</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a supervision tree, many of the processes have similar
      structures, they follow similar patterns. For example,
      the supervisors are similar in structure. The only difference
      between them is which child processes they supervise. Many
      of the workers are servers in a server-client relation,
      finite-state machines, or event handlers such as error loggers.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Behaviours</fo:inline> are formalizations of these common patterns.
      The idea is to divide the code for a process in a generic part
      (a behaviour module) and a specific part (a
      <fo:inline font-weight="bold">callback module</fo:inline>).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The behaviour module is part of Erlang/OTP. To implement a
      process such as a supervisor, the user only has to implement
      the callback module which is to export a pre-defined set of
      functions, the <fo:inline font-weight="bold">callback functions</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example illustrate how code can be divided into a
      generic and a specific part. Consider the following code (written in
      plain Erlang) for a simple server, which keeps track of a number
      of "channels". Other processes can allocate and free the channels
      by calling the functions <fo:inline font-family="monospace">alloc/0</fo:inline> and <fo:inline font-family="monospace">free/1</fo:inline>,
      respectively.</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(ch1).
-export([start/0]).
-export([alloc/0, free/1]).
-export([init/0]).

start() -&gt;
    spawn(ch1, init, []).

alloc() -&gt;
    ch1 ! {self(), alloc},
    receive
        {ch1, Res} -&gt;
            Res
    end.

free(Ch) -&gt;
    ch1 ! {free, Ch},
    ok.

init() -&gt;
    register(ch1, self()),
    Chs = channels(),
    loop(Chs).

loop(Chs) -&gt;
    receive
        {From, alloc} -&gt;
            {Ch, Chs2} = alloc(Chs),
            From ! {ch1, Ch},
            loop(Chs2);
        {free, Ch} -&gt;
            Chs2 = free(Ch, Chs),
            loop(Chs2)
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code for the server can be rewritten into a generic part
      <fo:inline font-family="monospace">server.erl</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(server).
-export([start/1]).
-export([call/2, cast/2]).
-export([init/1]).

start(Mod) -&gt;
    spawn(server, init, [Mod]).

call(Name, Req) -&gt;
    Name ! {call, self(), Req},
    receive
        {Name, Res} -&gt;
            Res
    end.

cast(Name, Req) -&gt;
    Name ! {cast, Req},
    ok.

init(Mod) -&gt;
    register(Mod, self()),
    State = Mod:init(),
    loop(Mod, State).

loop(Mod, State) -&gt;
    receive
        {call, From, Req} -&gt;
            {Res, State2} = Mod:handle_call(Req, State),
            From ! {Mod, Res},
            loop(Mod, State2);
        {cast, Req} -&gt;
            State2 = Mod:handle_cast(Req, State),
            loop(Mod, State2)
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And a callback module <fo:inline font-family="monospace">ch2.erl</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(ch2).
-export([start/0]).
-export([alloc/0, free/1]).
-export([init/0, handle_call/2, handle_cast/2]).

start() -&gt;
    server:start(ch2).

alloc() -&gt;
    server:call(ch2, alloc).

free(Ch) -&gt;
    server:cast(ch2, {free, Ch}).

init() -&gt;
    channels().

handle_call(alloc, Chs) -&gt;
    alloc(Chs). % =&gt; {Ch,Chs2}

handle_cast({free, Ch}, Chs) -&gt;
    free(Ch, Chs). % =&gt; Chs2</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The code in <fo:inline font-family="monospace">server</fo:inline> can be reused to build many
       different servers.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The server name, in this example the atom
      <fo:inline font-family="monospace">ch2</fo:inline>, is hidden from the users of the client functions. This
       means that the name can be changed without affecting them.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The protocol (messages sent to and received from the server)
       is also hidden. This is good programming practice and allows
       one to change the protocol without changing the code using
       the interface functions.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The functionality of <fo:inline font-family="monospace">server</fo:inline> can be extended without
       having to change <fo:inline font-family="monospace">ch2</fo:inline> or any other callback module.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In <fo:inline font-family="monospace">ch1.erl</fo:inline> and <fo:inline font-family="monospace">ch2.erl</fo:inline> above, the implementation
      of <fo:inline font-family="monospace">channels/0</fo:inline>, <fo:inline font-family="monospace">alloc/1</fo:inline>, and <fo:inline font-family="monospace">free/2</fo:inline> has been
      intentionally left out, as it is not relevant to the example.
      For completeness, one way to write these functions are given
      below. This is an example only, a realistic
      implementation must be able to handle situations like running out
      of channels to allocate, and so on.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
channels() -&gt;
   {_Allocated = [], _Free = lists:seq(1,100)}.

alloc({Allocated, [H|T] = _Free}) -&gt;
   {H, {[H|Allocated], T}}.

free(Ch, {Alloc, Free} = Channels) -&gt;
   case lists:member(Ch, Alloc) of
      true -&gt;
         {lists:delete(Ch, Alloc), [Ch|Free]};
      false -&gt;
         Channels
   end.        </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Code written without using behaviours can be more
      efficient, but the increased efficiency is at the expense of
      generality. The ability to manage all applications in the system
      in a consistent manner is important.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using behaviours also makes it easier to read and understand
      code written by other programmers. Improvised programming structures,
      while possibly more efficient, are always more difficult to
      understand.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">server</fo:inline> module corresponds, greatly simplified,
      to the Erlang/OTP behaviour <fo:inline font-family="monospace">gen_server</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The standard Erlang/OTP behaviours are:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">gen_server</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For implementing the server of a client-server relation</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">gen_fsm</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For implementing finite-state machines (Old)</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">gen_statem</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For implementing state machines (New)</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">gen_event</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For implementing event handling functionality</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">supervisor</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For implementing a supervisor in a supervision tree</fo:block></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The compiler understands the module attribute
      <fo:inline font-family="monospace">-behaviour(Behaviour)</fo:inline> and issues warnings about
      missing callback functions, for example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(chs3).
-behaviour(gen_server).
...

3&gt; c(chs3).
./chs3.erl:10: Warning: undefined call-back function handle_call/3
{ok,chs3}</fo:block>
  <fo:block id="idp7639200" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.1.3 
      Applications</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang/OTP comes with a number of components, each implementing
      some specific functionality. Components are with Erlang/OTP
      terminology called <fo:inline font-weight="bold">applications</fo:inline>. Examples of Erlang/OTP
      applications are Mnesia, which has everything needed for
      programming database services, and Debugger, which is used
      to debug Erlang programs. The minimal system based on Erlang/OTP
      consists of the following two applications:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Kernel - Functionality necessary to run Erlang</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>STDLIB - Erlang standard libraries</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application concept applies both to program structure
      (processes) and directory structure (modules).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The simplest applications do not have any processes,
      but consist of a collection of functional modules. Such an
      application is called a <fo:inline font-weight="bold">library application</fo:inline>. An example
      of a library application is STDLIB.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application with processes is easiest implemented as a
      supervision tree using the standard behaviours.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">How to program applications is described in
      <fo:inline font-style="italic">Applications</fo:inline>.</fo:block>
  <fo:block id="idp7632880" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.1.4 
      Releases</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">release</fo:inline> is a complete system made out from a subset of
      Erlang/OTP applications and a set of user-specific applications.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">How to program releases is described in
      <fo:inline font-style="italic">Releases</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">How to install a release in a target environment is described
      in the section about target systems in Section 2 System Principles.</fo:block>
  <fo:block id="idp7629456" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.1.5 
      Release Handling</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Release handling</fo:inline> is upgrading and downgrading between
      different versions of a release, in a (possibly) running system.
      How to do this is described in
      <fo:inline font-style="italic">Release Handling</fo:inline>.</fo:block>
  <fo:block id="idp7623072" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">9.2  gen_server Behaviour</fo:marker>9.2  gen_server Behaviour</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section is to be read with the
    <fo:inline font-style="italic">gen_server(3)</fo:inline>
    manual page in <fo:inline font-family="monospace">stdblib</fo:inline>, where all interface functions and
    callback functions are described in detail.</fo:block><fo:block id="idp7619408" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.2.1 
      Client-Server Principles</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The client-server model is characterized by a central server
      and an arbitrary number of clients. The client-server model is
      used for resource management operations, where several
      different clients want to share a common resource. The server is
      responsible for managing this resource.</fo:block>
    
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../design_principles/clientserver.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.1:
         
        Client-Server Model</fo:block>
    </fo:block>
  <fo:block id="idp7616368" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.2.2 
      Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An example of a simple server written in plain Erlang is
      provided in
      <fo:inline font-style="italic">Overview</fo:inline>.
      The server can be reimplemented using <fo:inline font-family="monospace">gen_server</fo:inline>,
      resulting in this callback module:</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(ch3).
-behaviour(gen_server).

-export([start_link/0]).
-export([alloc/0, free/1]).
-export([init/1, handle_call/3, handle_cast/2]).

start_link() -&gt;
    gen_server:start_link({local, ch3}, ch3, [], []).

alloc() -&gt;
    gen_server:call(ch3, alloc).

free(Ch) -&gt;
    gen_server:cast(ch3, {free, Ch}).

init(_Args) -&gt;
    {ok, channels()}.

handle_call(alloc, _From, Chs) -&gt;
    {Ch, Chs2} = alloc(Chs),
    {reply, Ch, Chs2}.

handle_cast({free, Ch}, Chs) -&gt;
    Chs2 = free(Ch, Chs),
    {noreply, Chs2}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code is explained in the next sections.</fo:block>
  <fo:block id="idp7611696" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.2.3 
      Starting a Gen_Server</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the example in the previous section, <fo:inline font-family="monospace">gen_server</fo:inline> is
    started by calling <fo:inline font-family="monospace">ch3:start_link()</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
start_link() -&gt;
    gen_server:start_link({local, ch3}, ch3, [], []) =&gt; {ok, Pid}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">start_link</fo:inline> calls function <fo:inline font-family="monospace">gen_server:start_link/4</fo:inline>.
    This function spawns and links to a new process, a
    <fo:inline font-family="monospace">gen_server</fo:inline>.</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first argument, <fo:inline font-family="monospace">{local, ch3}</fo:inline>, specifies the name.
          The gen_server is then locally registered as <fo:inline font-family="monospace">ch3</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the name is omitted, the <fo:inline font-family="monospace">gen_server</fo:inline> is not registered.
          Instead its pid must be used. The name can also be given
          as <fo:inline font-family="monospace">{global, Name}</fo:inline>, in which case the <fo:inline font-family="monospace">gen_server</fo:inline> is
          registered using <fo:inline font-family="monospace">global:register_name/2</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second argument, <fo:inline font-family="monospace">ch3</fo:inline>, is the name of the callback
          module, that is, the module where the callback functions are
          located.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interface functions (<fo:inline font-family="monospace">start_link</fo:inline>, <fo:inline font-family="monospace">alloc</fo:inline>,
	  and <fo:inline font-family="monospace">free</fo:inline>) are then located in the same module
          as the callback functions (<fo:inline font-family="monospace">init</fo:inline>, <fo:inline font-family="monospace">handle_call</fo:inline>, and
          <fo:inline font-family="monospace">handle_cast</fo:inline>). This is normally good programming
          practice, to have the code corresponding to one process
          contained in one module.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The third argument, <fo:inline font-family="monospace">[]</fo:inline>, is a term that is passed as is
	  to the callback function <fo:inline font-family="monospace">init</fo:inline>. Here, <fo:inline font-family="monospace">init</fo:inline> does not
          need any indata and ignores the argument.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The fourth argument, <fo:inline font-family="monospace">[]</fo:inline>, is a list of options. See the
          <fo:inline font-family="monospace">gen_server(3)</fo:inline> manual page for available options.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If name registration succeeds, the new <fo:inline font-family="monospace">gen_server</fo:inline> process
      calls the callback function <fo:inline font-family="monospace">ch3:init([])</fo:inline>. <fo:inline font-family="monospace">init</fo:inline> is
      expected to return <fo:inline font-family="monospace">{ok, State}</fo:inline>, where <fo:inline font-family="monospace">State</fo:inline> is the
      internal state of the <fo:inline font-family="monospace">gen_server</fo:inline>. In this case, the state
      is the available channels.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
init(_Args) -&gt;
    {ok, channels()}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">gen_server:start_link</fo:inline> is synchronous. It does not return
      until the <fo:inline font-family="monospace">gen_server</fo:inline> has been initialized and is ready
      to receive requests.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">gen_server:start_link</fo:inline> must be used if the <fo:inline font-family="monospace">gen_server</fo:inline>
      is part of a supervision tree, that is, started by a supervisor.
      There is another function, <fo:inline font-family="monospace">gen_server:start</fo:inline>, to start a
      standalone <fo:inline font-family="monospace">gen_server</fo:inline>, that is, a <fo:inline font-family="monospace">gen_server</fo:inline> that
      is not part of a supervision tree.</fo:block>
  <fo:block id="idp7571536" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.2.4 
      Synchronous Requests - Call</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The synchronous request <fo:inline font-family="monospace">alloc()</fo:inline> is implemented using
      <fo:inline font-family="monospace">gen_server:call/2</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
alloc() -&gt;
    gen_server:call(ch3, alloc).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ch3</fo:inline> is the name of the <fo:inline font-family="monospace">gen_server</fo:inline> and must agree
      with the name used to start it. <fo:inline font-family="monospace">alloc</fo:inline> is the actual
      request.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The request is made into a message and sent to the
      <fo:inline font-family="monospace">gen_server</fo:inline>. When the request is received, the
      <fo:inline font-family="monospace">gen_server</fo:inline> calls
      <fo:inline font-family="monospace">handle_call(Request, From, State)</fo:inline>, which is expected to
      return a tuple <fo:inline font-family="monospace">{reply,Reply,State1}</fo:inline>. <fo:inline font-family="monospace">Reply</fo:inline> is
      the reply that is to be sent back to the client, and
      <fo:inline font-family="monospace">State1</fo:inline> is a new value for the state of the
      <fo:inline font-family="monospace">gen_server</fo:inline>.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
handle_call(alloc, _From, Chs) -&gt;
    {Ch, Chs2} = alloc(Chs),
    {reply, Ch, Chs2}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case, the reply is the allocated channel <fo:inline font-family="monospace">Ch</fo:inline> and
      the new state is the set of remaining available channels
      <fo:inline font-family="monospace">Chs2</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, the call <fo:inline font-family="monospace">ch3:alloc()</fo:inline> returns the allocated channel
      <fo:inline font-family="monospace">Ch</fo:inline> and the <fo:inline font-family="monospace">gen_server</fo:inline> then waits for new requests,
      now with an updated list of available channels.</fo:block>
  <fo:block id="idp7738944" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.2.5 
      Asynchronous Requests - Cast</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The asynchronous request <fo:inline font-family="monospace">free(Ch)</fo:inline> is implemented using
      <fo:inline font-family="monospace">gen_server:cast/2</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
free(Ch) -&gt;
    gen_server:cast(ch3, {free, Ch}).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ch3</fo:inline> is the name of the <fo:inline font-family="monospace">gen_server</fo:inline>.
      <fo:inline font-family="monospace">{free, Ch}</fo:inline> is the actual request.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The request is made into a message and sent to the
      <fo:inline font-family="monospace">gen_server</fo:inline>.
      <fo:inline font-family="monospace">cast</fo:inline>, and thus <fo:inline font-family="monospace">free</fo:inline>, then returns <fo:inline font-family="monospace">ok</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the request is received, the <fo:inline font-family="monospace">gen_server</fo:inline> calls
      <fo:inline font-family="monospace">handle_cast(Request, State)</fo:inline>, which is expected to
      return a tuple <fo:inline font-family="monospace">{noreply,State1}</fo:inline>. <fo:inline font-family="monospace">State1</fo:inline> is a new
      value for the state of the <fo:inline font-family="monospace">gen_server</fo:inline>.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
handle_cast({free, Ch}, Chs) -&gt;
    Chs2 = free(Ch, Chs),
    {noreply, Chs2}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case, the new state is the updated list of available
      channels <fo:inline font-family="monospace">Chs2</fo:inline>. The <fo:inline font-family="monospace">gen_server</fo:inline> is now ready for new
      requests.</fo:block>
  <fo:block id="idp3489696" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.2.6 
      Stopping</fo:block>
    

    <fo:block id="idp3487824" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">In a Supervision Tree</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">gen_server</fo:inline> is part of a supervision tree, no stop
        function is needed. The <fo:inline font-family="monospace">gen_server</fo:inline> is automatically
        terminated by its supervisor. Exactly how this is done is
        defined by a
        <fo:inline font-style="italic">shutdown strategy</fo:inline>
        set in the supervisor.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If it is necessary to clean up before termination, the shutdown
        strategy must be a time-out value and the <fo:inline font-family="monospace">gen_server</fo:inline> must
	be set to trap exit signals in function <fo:inline font-family="monospace">init</fo:inline>. When ordered
        to shutdown, the <fo:inline font-family="monospace">gen_server</fo:inline> then calls the callback
	function <fo:inline font-family="monospace">terminate(shutdown, State)</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
init(Args) -&gt;
    ...,
    process_flag(trap_exit, true),
    ...,
    {ok, State}.

...

terminate(shutdown, State) -&gt;
    ..code for cleaning up here..
    ok.</fo:block>
    

    <fo:block id="idp3643920" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Standalone Gen_Servers</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">gen_server</fo:inline> is not part of a supervision tree, a
        stop function can be useful, for example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
export([stop/0]).
...

stop() -&gt;
    gen_server:cast(ch3, stop).
...

handle_cast(stop, State) -&gt;
    {stop, normal, State};
handle_cast({free, Ch}, State) -&gt;
    ....

...

terminate(normal, State) -&gt;
    ok.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The callback function handling the <fo:inline font-family="monospace">stop</fo:inline> request returns
        a tuple <fo:inline font-family="monospace">{stop,normal,State1}</fo:inline>, where <fo:inline font-family="monospace">normal</fo:inline>
        specifies that it is a normal termination and <fo:inline font-family="monospace">State1</fo:inline> is
        a new value for the state of the <fo:inline font-family="monospace">gen_server</fo:inline>. This causes
        the <fo:inline font-family="monospace">gen_server</fo:inline> to call <fo:inline font-family="monospace">terminate(normal, State1)</fo:inline>
	and then it terminates gracefully.</fo:block>
    
  <fo:block id="idp3638048" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.2.7 
      Handling Other Messages</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">gen_server</fo:inline> is to be able to receive other messages
      than requests, the callback function <fo:inline font-family="monospace">handle_info(Info, State)</fo:inline>
      must be implemented to handle them. Examples of other messages
      are exit messages, if the <fo:inline font-family="monospace">gen_server</fo:inline> is linked to other
      processes (than the supervisor) and trapping exit signals.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
handle_info({'EXIT', Pid, Reason}, State) -&gt;
    ..code to handle exits here..
    {noreply, State1}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">code_change</fo:inline> method must also be implemented.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
code_change(OldVsn, State, Extra) -&gt;
    ..code to convert state (and more) during code change
    {ok, NewState}.</fo:block>
  <fo:block id="idp2317728" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">9.3  gen_statem Behavior</fo:marker>9.3  gen_statem Behavior</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
    This section is to be read with the
    <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_statem(3)</fo:inline></fo:inline>
    manual page in STDLIB, where all interface functions and callback
    functions are described in detail.
  </fo:block><fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      This is a new behavior in Erlang/OTP 19.0.
      It has been thoroughly reviewed, is stable enough
      to be used by at least two heavy OTP applications, and is here to stay.
      Depending on user feedback, we do not expect
      but can find it necessary to make minor
      not backward compatible changes into Erlang/OTP 20.0.
    </fo:block>
  </fo:block><fo:block id="idp3856912" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.1 
      Event-Driven State Machines</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Established Automata Theory does not deal much with
      how a state transition is triggered,
      but assumes that the output is a function
      of the input (and the state) and that they are
      some kind of values.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      For an Event-Driven State Machine, the input is an event
      that triggers a state transition and the output
      is actions executed during the state transition.
      It can analogously to the mathematical model of a
      Finite-State Machine be described as
      a set of relations of the following form:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
State(S) x Event(E) -&gt; Actions(A), State(S')</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These relations are interpreted as follows:
      if we are in state <fo:inline font-family="monospace">S</fo:inline> and event <fo:inline font-family="monospace">E</fo:inline> occurs, we
      are to perform actions <fo:inline font-family="monospace">A</fo:inline> and make a transition to
      state <fo:inline font-family="monospace">S'</fo:inline>. Notice that <fo:inline font-family="monospace">S'</fo:inline> can be equal to <fo:inline font-family="monospace">S</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      As <fo:inline font-family="monospace">A</fo:inline> and <fo:inline font-family="monospace">S'</fo:inline> depend only on
      <fo:inline font-family="monospace">S</fo:inline> and <fo:inline font-family="monospace">E</fo:inline>, the kind of state machine described
      here is a Mealy Machine
      (see, for example, the corresponding Wikipedia article).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Like most <fo:inline font-family="monospace">gen_</fo:inline> behaviors, <fo:inline font-family="monospace">gen_statem</fo:inline> keeps
      a server <fo:inline font-family="monospace">Data</fo:inline> besides the state. Because of this, and as
      there is no restriction on the number of states
      (assuming that there is enough virtual machine memory)
      or on the number of distinct input events,
      a state machine implemented with this behavior
      is in fact Turing complete.
      But it feels mostly like an Event-Driven Mealy Machine.
    </fo:block>
  <fo:block id="idp7154768" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.2 
      Callback Modes</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The <fo:inline font-family="monospace">gen_statem</fo:inline> behavior supports two callback modes:
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          In mode
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">state_functions</fo:inline></fo:inline>,
          the state transition rules are written as some Erlang
          functions, which conform to the following convention:
        </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
StateName(EventType, EventContent, Data) -&gt;
    ... code for actions here ...
    {next_state, NewStateName, NewData}.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  This form is used in most examples here for example in section
	  <fo:inline font-style="italic">Example</fo:inline>.
	</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          In mode
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">handle_event_function</fo:inline></fo:inline>,
          only one Erlang function provides all state transition rules:
        </fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
handle_event(EventType, EventContent, State, Data) -&gt;
    ... code for actions here ...
    {next_state, NewState, NewData}
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  See section
	  <fo:inline font-style="italic">One Event Handler</fo:inline>
	  for an example.
	</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Both these modes allow other return tuples; see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:StateName/3</fo:inline></fo:inline>
      in the <fo:inline font-family="monospace">gen_statem</fo:inline> manual page.
      These other return tuples can, for example, stop the machine,
      execute state transition actions on the machine engine itself,
      and send replies.
    </fo:block>

    <fo:block id="idp7653968" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Choosing the Callback Mode</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	The two
	<fo:inline font-style="italic">callback modes</fo:inline>
	give different possibilities
	and restrictions, but one goal remains:
	you want to handle all possible combinations of
	events and states.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	This can be done, for example, by focusing on one state at the time
	and for every state ensure that all events are handled.
	Alternatively, you can focus on one event at the time
	and ensure that it is handled in every state.
	You can also use a mix of these strategies.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	With <fo:inline font-family="monospace">state_functions</fo:inline>, you are restricted to use
	atom-only states, and the <fo:inline font-family="monospace">gen_statem</fo:inline> engine
	branches depending on state name for you.
	This encourages the callback module to gather
	the implementation of all event actions particular
	to one state in the same place in the code,
	hence to focus on one state at the time.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	This mode fits well when you have a regular state diagram,
	like the ones in this chapter, which describes all events and actions
	belonging to a state visually around that state,
	and each state has its unique name.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	With <fo:inline font-family="monospace">handle_event_function</fo:inline>, you are free to mix strategies,
	as all events and states are handled in the same callback function.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	This mode works equally well when you want to focus on
	one event at the time or on
	one state at the time, but function
	<fo:inline font-style="italic"><fo:inline font-family="monospace">Module:handle_event/4</fo:inline></fo:inline>
	quickly grows too large to handle without branching to
	helper functions.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	The mode enables the use of non-atom states, for example,
	complex states or even hierarchical states.
	If, for example, a state diagram is largely alike
	for the client side and the server side of a protocol,
	you can have a state <fo:inline font-family="monospace">{StateName,server}</fo:inline> or
	<fo:inline font-family="monospace">{StateName,client}</fo:inline>,
	and make <fo:inline font-family="monospace">StateName</fo:inline> determine where in the code
	to handle most events in the state.
	The second element of the tuple is then used to select
	whether to handle special client-side or server-side events.
      </fo:block>
    
  <fo:block id="idp7235024" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.3 
      State Enter Calls</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The <fo:inline font-family="monospace">gen_statem</fo:inline> behavior can regardless of callback mode
      automatically
      <fo:inline font-style="italic">
	call the state callback
      </fo:inline>
      with special arguments whenever the state changes
      so you can write state entry actions
      near the rest of the state transition rules.
      It typically looks like this:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
StateName(enter, _OldState, Data) -&gt;
    ... code for state entry actions here ...
    {keep_state, NewData};
StateName(EventType, EventContent, Data) -&gt;
    ... code for actions here ...
    {next_state, NewStateName, NewData}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Depending on how your state machine is specified,
      this can be a very useful feature,
      but it forces you to handle the state enter calls in all states.
      See also the
      <fo:inline font-style="italic">
	State Entry Actions
      </fo:inline>
      chapter.
    </fo:block>
  <fo:block id="idp4175472" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.4 
      Actions</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      In the first section
      <fo:inline font-style="italic">
	Event-Driven State Machines
      </fo:inline>
      actions were mentioned as a part of
      the general state machine model. These general actions
      are implemented with the code that callback module
      <fo:inline font-family="monospace">gen_statem</fo:inline> executes in an event-handling
      callback function before returning
      to the <fo:inline font-family="monospace">gen_statem</fo:inline> engine.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      There are more specific state-transition actions
      that a callback function can order the <fo:inline font-family="monospace">gen_statem</fo:inline>
      engine to do after the callback function return.
      These are ordered by returning a list of
      <fo:inline font-style="italic">actions</fo:inline>
      in the
      <fo:inline font-style="italic">return tuple</fo:inline>
      from the
      <fo:inline font-style="italic">callback function</fo:inline>.
      These state transition actions affect the <fo:inline font-family="monospace">gen_statem</fo:inline>
      engine itself and can do the following:
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">
	  Postpone
	</fo:inline>
	the current event, see section
	<fo:inline font-style="italic">Postponing Events</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">
	  Hibernate
	</fo:inline>
	the <fo:inline font-family="monospace">gen_statem</fo:inline>, treated in
	<fo:inline font-style="italic">Hibernation</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	Start a
	<fo:inline font-style="italic">
	  state time-out</fo:inline>,
	  read more in section
	<fo:inline font-style="italic">State Time-Outs</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	Start a
	<fo:inline font-style="italic">
	  generic time-out</fo:inline>,
	  read more in section
	<fo:inline font-style="italic">Generic Time-Outs</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	Start an
	<fo:inline font-style="italic">event time-out</fo:inline>,
	see more in section
	<fo:inline font-style="italic">Event Time-Outs</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:inline font-style="italic">
	  Reply
	</fo:inline>
	to a caller, mentioned at the end of section
	<fo:inline font-style="italic">All State Events</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	Generate the
	<fo:inline font-style="italic">
	  next event
	</fo:inline>
	to handle, see section 
	<fo:inline font-style="italic">Self-Generated Events</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      For details, see the
      <fo:inline font-style="italic">
	<fo:inline font-family="monospace">gen_statem(3)</fo:inline>
      </fo:inline>
      manual page.
      You can, for example, reply to many callers,
      generate multiple next events,
      and set time-outs to relative or absolute times.
    </fo:block>
  <fo:block id="idp6539152" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.5 
      Event Types</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Events are categorized in different
      <fo:inline font-style="italic">event types</fo:inline>.
      Events of all types are handled in the same callback function,
      for a given state, and the function gets
      <fo:inline font-family="monospace">EventType</fo:inline> and <fo:inline font-family="monospace">EventContent</fo:inline> as arguments.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The following is a complete list of event types and where
      they come from:
    </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cast</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	Generated by
	<fo:inline font-style="italic"><fo:inline font-family="monospace">gen_statem:cast</fo:inline></fo:inline>.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{call,From}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	Generated by
	<fo:inline font-style="italic"><fo:inline font-family="monospace">gen_statem:call</fo:inline></fo:inline>,
	where <fo:inline font-family="monospace">From</fo:inline> is the reply address to use
	when replying either through the state transition action
	<fo:inline font-family="monospace">{reply,From,Msg}</fo:inline> or by calling
	<fo:inline font-style="italic"><fo:inline font-family="monospace">gen_statem:reply</fo:inline></fo:inline>.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">info</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	Generated by any regular process message sent to
	the <fo:inline font-family="monospace">gen_statem</fo:inline> process.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">state_timeout</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	Generated by state transition action
	<fo:inline font-style="italic">
	  <fo:inline font-family="monospace">{state_timeout,Time,EventContent}</fo:inline>
	</fo:inline>
	state timer timing out.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{timeout,Name}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	Generated by state transition action
	<fo:inline font-style="italic">
	  <fo:inline font-family="monospace">{{timeout,Name},Time,EventContent}</fo:inline>
	</fo:inline>
	generic timer timing out.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">timeout</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	Generated by state transition action
	<fo:inline font-style="italic">
	  <fo:inline font-family="monospace">{timeout,Time,EventContent}</fo:inline>
	</fo:inline>
	(or its short form <fo:inline font-family="monospace">Time</fo:inline>)
	event timer timing out.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">internal</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	Generated by state transition
	<fo:inline font-style="italic">action</fo:inline>
	<fo:inline font-family="monospace">{next_event,internal,EventContent}</fo:inline>.
	All event types above can also be generated using
	<fo:inline font-family="monospace">{next_event,EventType,EventContent}</fo:inline>.
      </fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp7646704" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.6 
      Example</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      This example starts off as equivalent to the example in section
      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_fsm</fo:inline> Behavior</fo:inline>.
      In later sections, additions and tweaks are made
      using features in <fo:inline font-family="monospace">gen_statem</fo:inline> that <fo:inline font-family="monospace">gen_fsm</fo:inline> does not have.
      The end of this chapter provides the example again
      with all the added features.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      A door with a code lock can be seen as a state machine.
      Initially, the door is locked. When someone presses a button,
      an event is generated.
      Depending on what buttons have been pressed before,
      the sequence so far can be correct, incomplete, or wrong.
      If correct, the door is unlocked for 10 seconds (10,000 milliseconds).
      If incomplete, we wait for another button to be pressed. If
      wrong, we start all over, waiting for a new button sequence.
    </fo:block>
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../design_principles/code_lock.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.1:
         
        Code Lock State Diagram</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      This code lock state machine can be implemented using
      <fo:inline font-family="monospace">gen_statem</fo:inline> with the following callback module:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(code_lock).
-behaviour(gen_statem).
-define(NAME, code_lock).

-export([start_link/1]).
-export([button/1]).
-export([init/1,callback_mode/0,terminate/3,code_change/4]).
-export([locked/3,open/3]).

start_link(Code) -&gt;
    gen_statem:start_link({local,?NAME}, ?MODULE, Code, []).

button(Digit) -&gt;
    gen_statem:cast(?NAME, {button,Digit}).

init(Code) -&gt;
    do_lock(),
    Data = #{code =&gt; Code, remaining =&gt; Code},
    {ok, locked, Data}.

callback_mode() -&gt;
    state_functions.

locked(
  cast, {button,Digit},
  #{code := Code, remaining := Remaining} = Data) -&gt;
    case Remaining of
        [Digit] -&gt;
	    do_unlock(),
            {next_state, open, Data#{remaining := Code},
             [{state_timeout,10000,lock}]};
        [Digit|Rest] -&gt; % Incomplete
            {next_state, locked, Data#{remaining := Rest}};
        _Wrong -&gt;
            {next_state, locked, Data#{remaining := Code}}
    end.

open(state_timeout, lock,  Data) -&gt;
    do_lock(),
    {next_state, locked, Data};
open(cast, {button,_}, Data) -&gt;
    {next_state, open, Data}.

do_lock() -&gt;
    io:format("Lock~n", []).
do_unlock() -&gt;
    io:format("Unlock~n", []).

terminate(_Reason, State, _Data) -&gt;
    State =/= locked andalso do_lock(),
    ok.
code_change(_Vsn, State, Data, _Extra) -&gt;
    {ok, State, Data}.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code is explained in the next sections.</fo:block>
  <fo:block id="idp3714928" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.7 
      Starting gen_statem</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      In the example in the previous section, <fo:inline font-family="monospace">gen_statem</fo:inline> is
      started by calling <fo:inline font-family="monospace">code_lock:start_link(Code)</fo:inline>:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
start_link(Code) -&gt;
    gen_statem:start_link({local,?NAME}, ?MODULE, Code, []).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      <fo:inline font-family="monospace">start_link</fo:inline> calls function
      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_statem:start_link/4</fo:inline></fo:inline>,
      which spawns and links to a new process, a <fo:inline font-family="monospace">gen_statem</fo:inline>.
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          The first argument, <fo:inline font-family="monospace">{local,?NAME}</fo:inline>, specifies
          the name. In this case, the <fo:inline font-family="monospace">gen_statem</fo:inline> is locally
          registered as <fo:inline font-family="monospace">code_lock</fo:inline> through the macro <fo:inline font-family="monospace">?NAME</fo:inline>.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          If the name is omitted, the <fo:inline font-family="monospace">gen_statem</fo:inline> is not registered.
          Instead its pid must be used. The name can also be specified
          as <fo:inline font-family="monospace">{global,Name}</fo:inline>, then the <fo:inline font-family="monospace">gen_statem</fo:inline> is
          registered using
          <fo:inline font-style="italic"><fo:inline font-family="monospace">global:register_name/2</fo:inline></fo:inline>
          in Kernel.
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          The second argument, <fo:inline font-family="monospace">?MODULE</fo:inline>, is the name of
          the callback module, that is, the module where the callback
          functions are located, which is this module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          The interface functions (<fo:inline font-family="monospace">start_link/1</fo:inline> and <fo:inline font-family="monospace">button/1</fo:inline>)
          are located in the same module as the callback functions
          (<fo:inline font-family="monospace">init/1</fo:inline>, <fo:inline font-family="monospace">locked/3</fo:inline>, and <fo:inline font-family="monospace">open/3</fo:inline>).
          It is normally good programming practice to have the client-side
          code and the server-side code contained in one module.
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          The third argument, <fo:inline font-family="monospace">Code</fo:inline>, is a list of digits, which
          is the correct unlock code that is passed
          to callback function <fo:inline font-family="monospace">init/1</fo:inline>.
	</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          The fourth argument, <fo:inline font-family="monospace">[]</fo:inline>, is a list of options.
          For the available options, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_statem:start_link/3</fo:inline></fo:inline>.
	</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If name registration succeeds, the new <fo:inline font-family="monospace">gen_statem</fo:inline> process
      calls callback function <fo:inline font-family="monospace">code_lock:init(Code)</fo:inline>.
      This function is expected to return <fo:inline font-family="monospace">{ok, State, Data}</fo:inline>,
      where <fo:inline font-family="monospace">State</fo:inline> is the initial state of the <fo:inline font-family="monospace">gen_statem</fo:inline>,
      in this case <fo:inline font-family="monospace">locked</fo:inline>; assuming that the door is locked to begin
      with. <fo:inline font-family="monospace">Data</fo:inline> is the internal server data of the <fo:inline font-family="monospace">gen_statem</fo:inline>.
      Here the server data is a <fo:inline font-style="italic">map</fo:inline>
      with key <fo:inline font-family="monospace">code</fo:inline> that stores
      the correct button sequence, and key <fo:inline font-family="monospace">remaining</fo:inline>
      that stores the remaining correct button sequence
      (the same as the <fo:inline font-family="monospace">code</fo:inline> to begin with).
    </fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
init(Code) -&gt;
    do_lock(),
    Data = #{code =&gt; Code, remaining =&gt; Code},
    {ok,locked,Data}.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Function
      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_statem:start_link</fo:inline></fo:inline>
      is synchronous. It does not return until the <fo:inline font-family="monospace">gen_statem</fo:inline>
      is initialized and is ready to receive events.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Function
      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_statem:start_link</fo:inline></fo:inline>
      must be used if the <fo:inline font-family="monospace">gen_statem</fo:inline>
      is part of a supervision tree, that is, started by a supervisor.
      Another function,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_statem:start</fo:inline></fo:inline>
      can be used to start a standalone <fo:inline font-family="monospace">gen_statem</fo:inline>, that is,
      a <fo:inline font-family="monospace">gen_statem</fo:inline> that is not part of a supervision tree.
    </fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
callback_mode() -&gt;
    state_functions.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Function
      <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:callback_mode/0</fo:inline></fo:inline>
      selects the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">CallbackMode</fo:inline></fo:inline>
      for the callback module, in this case
      <fo:inline font-style="italic"><fo:inline font-family="monospace">state_functions</fo:inline></fo:inline>.
      That is, each state has got its own handler function.
    </fo:block>

  <fo:block id="idp7726880" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.8 
      Handling Events</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function notifying the code lock about a button event is
      implemented using
      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_statem:cast/2</fo:inline></fo:inline>:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
button(Digit) -&gt;
    gen_statem:cast(?NAME, {button,Digit}).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The first argument is the name of the <fo:inline font-family="monospace">gen_statem</fo:inline> and must
      agree with the name used to start it. So, we use the
      same macro <fo:inline font-family="monospace">?NAME</fo:inline> as when starting.
      <fo:inline font-family="monospace">{button,Digit}</fo:inline> is the event content.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The event is made into a message and sent to the <fo:inline font-family="monospace">gen_statem</fo:inline>.
      When the event is received, the <fo:inline font-family="monospace">gen_statem</fo:inline> calls
      <fo:inline font-family="monospace">StateName(cast, Event, Data)</fo:inline>, which is expected to
      return a tuple <fo:inline font-family="monospace">{next_state, NewStateName, NewData}</fo:inline>,
      or <fo:inline font-family="monospace">{next_state, NewStateName, NewData, Actions}</fo:inline>.
      <fo:inline font-family="monospace">StateName</fo:inline> is the name of the current state and
      <fo:inline font-family="monospace">NewStateName</fo:inline> is the name of the next state to go to.
      <fo:inline font-family="monospace">NewData</fo:inline> is a new value for the server data of
      the <fo:inline font-family="monospace">gen_statem</fo:inline>, and <fo:inline font-family="monospace">Actions</fo:inline> is a list of
      actions on the <fo:inline font-family="monospace">gen_statem</fo:inline> engine.
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
locked(
  cast, {button,Digit},
  #{code := Code, remaining := Remaining} = Data) -&gt;
    case Remaining of
        [Digit] -&gt; % Complete
	    do_unlock(),
            {next_state, open, Data#{remaining := Code},
             [{state_timeout,10000,lock}]};
        [Digit|Rest] -&gt; % Incomplete
            {next_state, locked, Data#{remaining := Rest}};
        [_|_] -&gt; % Wrong
            {next_state, locked, Data#{remaining := Code}}
    end.

open(state_timeout, lock, Data) -&gt;
    do_lock(),
    {next_state, locked, Data};
open(cast, {button,_}, Data) -&gt;
    {next_state, open, Data}.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If the door is locked and a button is pressed, the pressed
      button is compared with the next correct button.
      Depending on the result, the door is either unlocked
      and the <fo:inline font-family="monospace">gen_statem</fo:inline> goes to state <fo:inline font-family="monospace">open</fo:inline>,
      or the door remains in state <fo:inline font-family="monospace">locked</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If the pressed button is incorrect, the server data
      restarts from the start of the code sequence.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If the whole code is correct, the server changes states
      to <fo:inline font-family="monospace">open</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      In state <fo:inline font-family="monospace">open</fo:inline>, a button event is ignored
      by staying in the same state.  This can also be done
      by returning <fo:inline font-family="monospace">{keep_state, Data}</fo:inline> or in this case
      since <fo:inline font-family="monospace">Data</fo:inline> unchanged even by returning
      <fo:inline font-family="monospace">keep_state_and_data</fo:inline>.
    </fo:block>
  <fo:block id="idp8106944" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.9 
      State Time-Outs</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      When a correct code has been given, the door is unlocked and
      the following tuple is returned from <fo:inline font-family="monospace">locked/2</fo:inline>:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{next_state, open, Data#{remaining := Code},
 [{state_timeout,10000,lock}]};
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      10,000 is a time-out value in milliseconds.
      After this time (10 seconds), a time-out occurs.
      Then, <fo:inline font-family="monospace">StateName(state_timeout, lock, Data)</fo:inline> is called.
      The time-out occurs when the door has been in state <fo:inline font-family="monospace">open</fo:inline>
      for 10 seconds. After that the door is locked again:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
open(state_timeout, lock,  Data) -&gt;
    do_lock(),
    {next_state, locked, Data};
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The timer for a state time-out is automatically cancelled
      when the state machine changes states.  You can restart
      a state time-out by setting it to a new time, which cancels
      the running timer and starts a new.  This implies that
      you can cancel a state time-out by restarting it with
      time <fo:inline font-family="monospace">infinity</fo:inline>.
    </fo:block>
  <fo:block id="idp8112656" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.10 
      All State Events</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Sometimes events can arrive in any state of the <fo:inline font-family="monospace">gen_statem</fo:inline>.
      It is convenient to handle these in a common state handler function
      that all state functions call for events not specific to the state.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Consider a <fo:inline font-family="monospace">code_length/0</fo:inline> function that returns
      the length of the correct code
      (that should not be sensitive to reveal).
      We dispatch all events that are not state-specific
      to the common function <fo:inline font-family="monospace">handle_event/3</fo:inline>:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
-export([button/1,code_length/0]).
...

code_length() -&gt;
    gen_statem:call(?NAME, code_length).

...
locked(...) -&gt; ... ;
locked(EventType, EventContent, Data) -&gt;
    handle_event(EventType, EventContent, Data).

...
open(...) -&gt; ... ;
open(EventType, EventContent, Data) -&gt;
    handle_event(EventType, EventContent, Data).

handle_event({call,From}, code_length, #{code := Code} = Data) -&gt;
    {keep_state, Data, [{reply,From,length(Code)}]}.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      This example uses
      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_statem:call/2</fo:inline></fo:inline>,
      which waits for a reply from the server.
      The reply is sent with a <fo:inline font-family="monospace">{reply,From,Reply}</fo:inline> tuple
      in an action list in the <fo:inline font-family="monospace">{keep_state, ...}</fo:inline> tuple
      that retains the current state.  This return form is convenient
      when you want to stay in the current state but do not know or
      care about what it is.
    </fo:block>
  <fo:block id="idp8119328" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.11 
      One Event Handler</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If mode <fo:inline font-family="monospace">handle_event_function</fo:inline> is used,
      all events are handled in
      <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:handle_event/4</fo:inline></fo:inline>
      and we can (but do not have to) use an event-centered approach
      where we first branch depending on event
      and then depending on state:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
-export([handle_event/4]).

...
callback_mode() -&gt;
    handle_event_function.

handle_event(cast, {button,Digit}, State, #{code := Code} = Data) -&gt;
    case State of
	locked -&gt;
	    case maps:get(remaining, Data) of
		[Digit] -&gt; % Complete
		    do_unlock(),
		    {next_state, open, Data#{remaining := Code},
                     [{state_timeout,10000,lock}]};
		[Digit|Rest] -&gt; % Incomplete
		    {keep_state, Data#{remaining := Rest}};
		[_|_] -&gt; % Wrong
		    {keep_state, Data#{remaining := Code}}
	    end;
	open -&gt;
            keep_state_and_data
    end;
handle_event(state_timeout, lock, open, Data) -&gt;
    do_lock(),
    {next_state, locked, Data}.

...
    </fo:block>
  <fo:block id="idp8123520" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.12 
      Stopping</fo:block>
    
    

    <fo:block id="idp8124544" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">In a Supervision Tree</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	If the <fo:inline font-family="monospace">gen_statem</fo:inline> is part of a supervision tree,
	no stop function is needed.
	The <fo:inline font-family="monospace">gen_statem</fo:inline> is automatically terminated by its supervisor.
	Exactly how this is done is defined by a
	<fo:inline font-style="italic">shutdown strategy</fo:inline>
	set in the supervisor.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	If it is necessary to clean up before termination, the shutdown
	strategy must be a time-out value and the <fo:inline font-family="monospace">gen_statem</fo:inline> must
	in function <fo:inline font-family="monospace">init/1</fo:inline> set itself to trap exit signals
	by calling
	<fo:inline font-style="italic"><fo:inline font-family="monospace">process_flag(trap_exit, true)</fo:inline></fo:inline>:
      </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
init(Args) -&gt;
    process_flag(trap_exit, true),
    do_lock(),
    ...
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	When ordered to shut down, the <fo:inline font-family="monospace">gen_statem</fo:inline> then calls
	callback function <fo:inline font-family="monospace">terminate(shutdown, State, Data)</fo:inline>.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	In this example, function <fo:inline font-family="monospace">terminate/3</fo:inline>
	locks the door if it is open, so we do not accidentally leave the door
	open when the supervision tree terminates:
      </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
terminate(_Reason, State, _Data) -&gt;
    State =/= locked andalso do_lock(),
    ok.
      </fo:block>
    

    <fo:block id="idp8132368" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Standalone gen_statem</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	If the <fo:inline font-family="monospace">gen_statem</fo:inline> is not part of a supervision tree,
	it can be stopped using
	<fo:inline font-style="italic"><fo:inline font-family="monospace">gen_statem:stop</fo:inline></fo:inline>,
	preferably through an API function:
      </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
-export([start_link/1,stop/0]).

...
stop() -&gt;
    gen_statem:stop(?NAME).
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	This makes the <fo:inline font-family="monospace">gen_statem</fo:inline> call callback function
	<fo:inline font-family="monospace">terminate/3</fo:inline> just like for a supervised server
	and waits for the process to terminate.
      </fo:block>
    
  <fo:block id="idp8136976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.13 
      Event Time-Outs</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      A time-out feature inherited from <fo:inline font-family="monospace">gen_statem</fo:inline>'s predecessor
      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_fsm</fo:inline></fo:inline>,
      is an event time-out, that is,
      if an event arrives the timer is cancelled.
      You get either an event or a time-out, but not both.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      It is ordered by the state transition action
      <fo:inline font-family="monospace">{timeout,Time,EventContent}</fo:inline>, or just <fo:inline font-family="monospace">Time</fo:inline>,
      or even just <fo:inline font-family="monospace">Time</fo:inline> instead of an action list
      (the latter is a form inherited from <fo:inline font-family="monospace">gen_fsm</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      This type of time-out is useful to for example act on inactivity.
      Let us restart the code sequence
      if no button is pressed for say 30 seconds:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...

locked(
  timeout, _, 
  #{code := Code, remaining := Remaining} = Data) -&gt;
    {next_state, locked, Data#{remaining := Code}};
locked(
  cast, {button,Digit},
  #{code := Code, remaining := Remaining} = Data) -&gt;
...
        [Digit|Rest] -&gt; % Incomplete
            {next_state, locked, Data#{remaining := Rest}, 30000};
...
     </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Whenever we receive a button event we start an event time-out
      of 30 seconds, and if we get an event type <fo:inline font-family="monospace">timeout</fo:inline>
      we reset the remaining code sequence.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      An event time-out is cancelled by any other event so you either
      get some other event or the time-out event.  It is therefore
      not possible nor needed to cancel or restart an event time-out.
      Whatever event you act on has already cancelled
      the event time-out...
    </fo:block>
  <fo:block id="idp8144896" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.14 
      Generic Time-Outs</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The previous example of state time-outs only work if
      the state machine stays in the same state during the
      time-out time.  And event time-outs only work if no
      disturbing unrelated events occur.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      You may want to start a timer in one state and respond
      to the time-out in another, maybe cancel the time-out
      without changing states, or perhaps run multiple
      time-outs in parallel. All this can be accomplished with
      <fo:inline font-style="italic">generic time-outs</fo:inline>.
      They may look a little bit like
      <fo:inline font-style="italic">event time-outs</fo:inline>
      but contain a name to allow for any number of them simultaneously
      and they are not automatically cancelled.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Here is how to accomplish the state time-out
      in the previous example by instead using a generic time-out
      named <fo:inline font-family="monospace">open_tm</fo:inline>:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
locked(
  cast, {button,Digit},
  #{code := Code, remaining := Remaining} = Data) -&gt;
    case Remaining of
        [Digit] -&gt;
	    do_unlock(),
            {next_state, open, Data#{remaining := Code},
	     [{{timeout,open_tm},10000,lock}]};
...

open({timeout,open_tm}, lock, Data) -&gt;
    do_lock(),
    {next_state,locked,Data};
open(cast, {button,_}, Data) -&gt;
    {keep_state,Data};
...
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Just as
      <fo:inline font-style="italic">state time-outs</fo:inline>
      you can restart or cancel a specific generic time-out
      by setting it to a new time or <fo:inline font-family="monospace">infinity</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Another way to handle a late time-out can be to not cancel it,
      but to ignore it if it arrives in a state
      where it is known to be late.
    </fo:block>
  <fo:block id="idp8152640" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.15 
      Erlang Timers</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The most versatile way to handle time-outs is to use
      Erlang Timers; see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:start_timer3,4</fo:inline></fo:inline>.
      Most time-out tasks can be performed with the
      time-out features in <fo:inline font-family="monospace">gen_statem</fo:inline>,
      but an example of one that can not is if you should need
      the return value from
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:cancel_timer(Tref)</fo:inline></fo:inline>, that is; the remaining time of the timer.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Here is how to accomplish the state time-out
      in the previous example by instead using an Erlang Timer:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
locked(
  cast, {button,Digit},
  #{code := Code, remaining := Remaining} = Data) -&gt;
    case Remaining of
        [Digit] -&gt;
	    do_unlock(),
	    Tref = erlang:start_timer(10000, self(), lock),
            {next_state, open, Data#{remaining := Code, timer =&gt; Tref}};
...

open(info, {timeout,Tref,lock}, #{timer := Tref} = Data) -&gt;
    do_lock(),
    {next_state,locked,maps:remove(timer, Data)};
open(cast, {button,_}, Data) -&gt;
    {keep_state,Data};
...
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Removing the <fo:inline font-family="monospace">timer</fo:inline> key from the map when we
      change to state <fo:inline font-family="monospace">locked</fo:inline> is not strictly
      necessary since we can only get into state <fo:inline font-family="monospace">open</fo:inline>
      with an updated <fo:inline font-family="monospace">timer</fo:inline> map value.  But it can be nice
      to not have outdated values in the state <fo:inline font-family="monospace">Data</fo:inline>!
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If you need to cancel a timer because of some other event, you can use
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:cancel_timer(Tref)</fo:inline></fo:inline>.
      Note that a time-out message cannot arrive after this,
      unless you have postponed it before (see the next section),
      so ensure that you do not accidentally postpone such messages.
      Also note that a time-out message may have arrived
      just before you cancelling it, so you may have to read out
      such a message from the process mailbox depending on
      the return value from 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:cancel_timer(Tref)</fo:inline></fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Another way to handle a late time-out can be to not cancel it,
      but to ignore it if it arrives in a state
      where it is known to be late.
    </fo:block>
  <fo:block id="idp8164880" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.16 
      Postponing Events</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If you want to ignore a particular event in the current state
      and handle it in a future state, you can postpone the event.
      A postponed event is retried after the state has
      changed, that is, <fo:inline font-family="monospace">OldState =/= NewState</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Postponing is ordered by the state transition
      <fo:inline font-style="italic">action</fo:inline>
      <fo:inline font-family="monospace">postpone</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      In this example, instead of ignoring button events
      while in the <fo:inline font-family="monospace">open</fo:inline> state, we can postpone them
      and they are queued and later handled in the <fo:inline font-family="monospace">locked</fo:inline> state:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
open(cast, {button,_}, Data) -&gt;
    {keep_state,Data,[postpone]};
...
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Since a postponed event is only retried after a state change,
      you have to think about where to keep a state data item.
      You can keep it in the server <fo:inline font-family="monospace">Data</fo:inline>
      or in the <fo:inline font-family="monospace">State</fo:inline> itself,
      for example by having two more or less identical states
      to keep a boolean value, or by using a complex state with
      <fo:inline font-style="italic">callback mode</fo:inline>
      <fo:inline font-style="italic"><fo:inline font-family="monospace">handle_event_function</fo:inline></fo:inline>.
      If a change in the value changes the set of events that is handled,
      then the value should be kept in the State.
      Otherwise no postponed events will be retried
      since only the server Data changes.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      This is not important if you do not postpone events.
      But if you later decide to start postponing some events,
      then the design flaw of not having separate states
      when they should be, might become a hard to find bug.
    </fo:block>

    <fo:block id="idp8175296" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Fuzzy State Diagrams</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	It is not uncommon that a state diagram does not specify
	how to handle events that are not illustrated
	in a particular state in the diagram.
	Hopefully this is described in an associated text
	or from the context.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	Possible actions: ignore as in drop the event
	(maybe log it) or deal with the event in some other state
	as in postpone it.
      </fo:block>
    

    <fo:block id="idp8177968" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Selective Receive</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
        Erlang's selective receive statement is often used to
        describe simple state machine examples in straightforward
        Erlang code. The following is a possible implementation of
        the first example:
      </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(code_lock).
-define(NAME, code_lock_1).
-export([start_link/1,button/1]).

start_link(Code) -&gt;
    spawn(
      fun () -&gt;
	      true = register(?NAME, self()),
	      do_lock(),
	      locked(Code, Code)
      end).

button(Digit) -&gt;
    ?NAME ! {button,Digit}.

locked(Code, [Digit|Remaining]) -&gt;
    receive
	{button,Digit} when Remaining =:= [] -&gt;
	    do_unlock(),
	    open(Code);
	{button,Digit} -&gt;
	    locked(Code, Remaining);
	{button,_} -&gt;
	    locked(Code, Code)
    end.

open(Code) -&gt;
    receive
    after 10000 -&gt;
	    do_lock(),
	    locked(Code, Code)
    end.

do_lock() -&gt;
    io:format("Locked~n", []).
do_unlock() -&gt;
    io:format("Open~n", []).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The selective receive in this case causes implicitly <fo:inline font-family="monospace">open</fo:inline>
      to postpone any events to the <fo:inline font-family="monospace">locked</fo:inline> state.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      A selective receive cannot be used from a <fo:inline font-family="monospace">gen_statem</fo:inline>
      behavior as for any <fo:inline font-family="monospace">gen_*</fo:inline> behavior,
      as the receive statement is within the <fo:inline font-family="monospace">gen_*</fo:inline> engine itself.
      It must be there because all
      <fo:inline font-style="italic"><fo:inline font-family="monospace">sys</fo:inline></fo:inline>
      compatible behaviors must respond to system messages and therefore
      do that in their engine receive loop,
      passing non-system messages to the callback module.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The state transition
      <fo:inline font-style="italic">action</fo:inline>
      <fo:inline font-family="monospace">postpone</fo:inline> is designed to model
      selective receives. A selective receive implicitly postpones
      any not received events, but the <fo:inline font-family="monospace">postpone</fo:inline>
      state transition action explicitly postpones one received event.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Both mechanisms have the same theoretical
      time and memory complexity, while the selective receive
      language construct has smaller constant factors.
    </fo:block>
    
  <fo:block id="idp8189232" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.17 
      State Entry Actions</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Say you have a state machine specification
      that uses state entry actions.
      Allthough you can code this using self-generated events
      (described in the next section), especially if just
      one or a few states has got state entry actions,
      this is a perfect use case for the built in
      <fo:inline font-style="italic">state enter calls</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      You return a list containing <fo:inline font-family="monospace">state_enter</fo:inline> from your
      <fo:inline font-style="italic"><fo:inline font-family="monospace">callback_mode/0</fo:inline></fo:inline>
      function and the <fo:inline font-family="monospace">gen_statem</fo:inline> engine will call your
      state callback once with the arguments
      <fo:inline font-family="monospace">(enter, OldState, ...)</fo:inline> whenever the state changes.
      Then you just need to handle these event-like calls in all states.
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
init(Code) -&gt;
    process_flag(trap_exit, true),
    Data = #{code =&gt; Code},
    {ok, locked, Data}.

callback_mode() -&gt;
    [state_functions,state_enter].

locked(enter, _OldState, Data) -&gt;
    do_lock(),
    {keep_state,Data#{remaining =&gt; Code}};
locked(
  cast, {button,Digit},
  #{code := Code, remaining := Remaining} = Data) -&gt;
    case Remaining of
        [Digit] -&gt;
	    {next_state, open, Data};
...

open(enter, _OldState, _Data) -&gt;
    do_unlock(),
    {keep_state_and_data, [{state_timeout,10000,lock}]};
open(state_timeout, lock, Data) -&gt;
    {next_state, locked, Data};
...
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      You can repeat the state entry code by returning one of
      <fo:inline font-family="monospace">{repeat_state, ...}</fo:inline>, <fo:inline font-family="monospace">{repeat_state_and_data,_}</fo:inline>
      or <fo:inline font-family="monospace">repeat_state_and_data</fo:inline> that otherwise behaves
      exactly like their <fo:inline font-family="monospace">keep_state</fo:inline> siblings.
      See the type
      <fo:inline font-style="italic">
	<fo:inline font-family="monospace">state_callback_result()</fo:inline>
      </fo:inline>
      in the reference manual.
    </fo:block>
  <fo:block id="idp8200256" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.18 
      Self-Generated Events</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      It can sometimes be beneficial to be able to generate events
      to your own state machine.
      This can be done with the state transition
      <fo:inline font-style="italic">action</fo:inline>
      <fo:inline font-family="monospace">{next_event,EventType,EventContent}</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      You can generate events of any existing
      <fo:inline font-style="italic">type</fo:inline>,
      but the <fo:inline font-family="monospace">internal</fo:inline> type can only be generated through action
      <fo:inline font-family="monospace">next_event</fo:inline>. Hence, it cannot come from an external source,
      so you can be certain that an <fo:inline font-family="monospace">internal</fo:inline> event is an event
      from your state machine to itself.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      One example for this is to pre-process incoming data, for example
      decrypting chunks or collecting characters up to a line break.
      Purists may argue that this should be modelled with a separate
      state machine that sends pre-processed events
      to the main state machine.
      But to decrease overhead the small pre-processing state machine
      can be implemented in the common state event handling
      of the main state machine using a few state data variables
      that then sends the pre-processed events as internal events
      to the main state machine.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The following example uses an input model where you give the lock
      characters with <fo:inline font-family="monospace">put_chars(Chars)</fo:inline> and then call
      <fo:inline font-family="monospace">enter()</fo:inline> to finish the input.
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
-export(put_chars/1, enter/0).
...
put_chars(Chars) when is_binary(Chars) -&gt;
    gen_statem:call(?NAME, {chars,Chars}).

enter() -&gt;
    gen_statem:call(?NAME, enter).

...

locked(enter, _OldState, Data) -&gt;
    do_lock(),
    {keep_state,Data#{remaining =&gt; Code, buf =&gt; []}};
...

handle_event({call,From}, {chars,Chars}, #{buf := Buf} = Data) -&gt;
    {keep_state, Data#{buf := [Chars|Buf],
     [{reply,From,ok}]};
handle_event({call,From}, enter, #{buf := Buf} = Data) -&gt;
    Chars = unicode:characters_to_binary(lists:reverse(Buf)),
    try binary_to_integer(Chars) of
        Digit -&gt;
            {keep_state, Data#{buf := []},
             [{reply,From,ok},
              {next_event,internal,{button,Chars}}]}
    catch
        error:badarg -&gt;
            {keep_state, Data#{buf := []},
             [{reply,From,{error,not_an_integer}}]}
    end;
...
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If you start this program with <fo:inline font-family="monospace">code_lock:start([17])</fo:inline>
      you can unlock with <fo:inline font-family="monospace">code_lock:put_chars(&lt;&lt;"001"&gt;&gt;),
      code_lock:put_chars(&lt;&lt;"7"&gt;&gt;), code_lock:enter()</fo:inline>.
    </fo:block>
  <fo:block id="idp8212048" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.19 
      Example Revisited</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      This section includes the example after most of the mentioned
      modifications and some more using state enter calls,
      which deserves a new state diagram:
    </fo:block>
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../design_principles/code_lock_2.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.2:
         
        Code Lock State Diagram Revisited</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Notice that this state diagram does not specify how to handle
      a button event in the state <fo:inline font-family="monospace">open</fo:inline>. So, you need to
      read somewhere else that unspecified events
      must be ignored as in not consumed but handled in some other state.
      Also, the state diagram does not show that the <fo:inline font-family="monospace">code_length/0</fo:inline>
      call must be handled in every state.
    </fo:block>

    <fo:block id="idp8216800" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Callback Mode: state_functions</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	Using state functions:
      </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(code_lock).
-behaviour(gen_statem).
-define(NAME, code_lock_2).

-export([start_link/1,stop/0]).
-export([button/1,code_length/0]).
-export([init/1,callback_mode/0,terminate/3,code_change/4]).
-export([locked/3,open/3]).

start_link(Code) -&gt;
    gen_statem:start_link({local,?NAME}, ?MODULE, Code, []).
stop() -&gt;
    gen_statem:stop(?NAME).

button(Digit) -&gt;
    gen_statem:cast(?NAME, {button,Digit}).
code_length() -&gt;
    gen_statem:call(?NAME, code_length).

init(Code) -&gt;
    process_flag(trap_exit, true),
    Data = #{code =&gt; Code},
    {ok, locked, Data}.

callback_mode() -&gt;
    [state_functions,state_enter].

locked(enter, _OldState, #{code := Code} = Data) -&gt;
    do_lock(),
    {keep_state, Data#{remaining =&gt; Code}};
locked(
  timeout, _, 
  #{code := Code, remaining := Remaining} = Data) -&gt;
    {keep_state, Data#{remaining := Code}};
locked(
  cast, {button,Digit},
  #{code := Code, remaining := Remaining} = Data) -&gt;
    case Remaining of
        [Digit] -&gt; % Complete
            {next_state, open, Data};
        [Digit|Rest] -&gt; % Incomplete
            {keep_state, Data#{remaining := Rest}, 30000};
        [_|_] -&gt; % Wrong
            {keep_state, Data#{remaining := Code}}
    end;
locked(EventType, EventContent, Data) -&gt;
    handle_event(EventType, EventContent, Data).

open(enter, _OldState, _Data) -&gt;
    do_unlock(),
    {keep_state_and_data, [{state_timeout,10000,lock}]};
open(state_timeout, lock, Data) -&gt;
    {next_state, locked, Data};
open(cast, {button,_}, _) -&gt;
    {keep_state_and_data, [postpone]};
open(EventType, EventContent, Data) -&gt;
    handle_event(EventType, EventContent, Data).

handle_event({call,From}, code_length, #{code := Code}) -&gt;
    {keep_state_and_data, [{reply,From,length(Code)}]}.

do_lock() -&gt;
    io:format("Locked~n", []).
do_unlock() -&gt;
    io:format("Open~n", []).

terminate(_Reason, State, _Data) -&gt;
    State =/= locked andalso do_lock(),
    ok.
code_change(_Vsn, State, Data, _Extra) -&gt;
    {ok,State,Data}.
      </fo:block>
    

    <fo:block id="idp8221456" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Callback Mode: handle_event_function</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
        This section describes what to change in the example
        to use one <fo:inline font-family="monospace">handle_event/4</fo:inline> function.
        The previously used approach to first branch depending on event
	does not work that well here because of the state enter calls,
        so this example first branches depending on state:
      </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
-export([handle_event/4]).

...
callback_mode() -&gt;
    [handle_event_function,state_enter].

%% State: locked
handle_event(
  enter, _OldState, locked,
  #{code := Code} = Data) -&gt;
    do_lock(),
    {keep_state, Data#{remaining =&gt; Code}};
handle_event(
  timeout, _, locked,
  #{code := Code, remaining := Remaining} = Data) -&gt;
    {keep_state, Data#{remaining := Code}};
handle_event(
  cast, {button,Digit}, locked,
  #{code := Code, remaining := Remaining} = Data) -&gt;
    case Remaining of
        [Digit] -&gt; % Complete
            {next_state, open, Data};
        [Digit|Rest] -&gt; % Incomplete
            {keep_state, Data#{remaining := Rest}, 30000};
        [_|_] -&gt; % Wrong
            {keep_state, Data#{remaining := Code}}
    end;
%%
%% State: open
handle_event(enter, _OldState, open, _Data) -&gt;
    do_unlock(),
    {keep_state_and_data, [{state_timeout,10000,lock}]};
handle_event(state_timeout, lock, open, Data) -&gt;
    {next_state, locked, Data};
handle_event(cast, {button,_}, open, _) -&gt;
    {keep_state_and_data,[postpone]};
%%
%% Any state
handle_event({call,From}, code_length, _State, #{code := Code}) -&gt;
    {keep_state_and_data, [{reply,From,length(Code)}]}.

...
      </fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Notice that postponing buttons from the <fo:inline font-family="monospace">locked</fo:inline> state
      to the <fo:inline font-family="monospace">open</fo:inline> state feels like a strange thing to do
      for a code lock, but it at least illustrates event postponing.
    </fo:block>
  <fo:block id="idp8227984" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.20 
      Filter the State</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The example servers so far in this chapter
      print the full internal state in the error log, for example,
      when killed by an exit signal or because of an internal error.
      This state contains both the code lock code
      and which digits that remain to unlock.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      This state data can be regarded as sensitive,
      and maybe not what you want in the error log
      because of some unpredictable event.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Another reason to filter the state can be
      that the state is too large to print, as it fills
      the error log with uninteresting details.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      To avoid this, you can format the internal state
      that gets in the error log and gets returned from
      <fo:inline font-style="italic"><fo:inline font-family="monospace">sys:get_status/1,2</fo:inline></fo:inline>
      by implementing function
      <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:format_status/2</fo:inline></fo:inline>,
      for example like this:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
-export([init/1,terminate/3,code_change/4,format_status/2]).
...

format_status(Opt, [_PDict,State,Data]) -&gt;
    StateData =
	{State,
	 maps:filter(
	   fun (code, _) -&gt; false;
	       (remaining, _) -&gt; false;
	       (_, _) -&gt; true
	   end,
	   Data)},
    case Opt of
	terminate -&gt;
	    StateData;
	normal -&gt;
	    [{data,[{"State",StateData}]}]
    end.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      It is not mandatory to implement a
      <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:format_status/2</fo:inline></fo:inline>
      function. If you do not, a default implementation is used that
      does the same as this example function without filtering
      the <fo:inline font-family="monospace">Data</fo:inline> term, that is, <fo:inline font-family="monospace">StateData = {State,Data}</fo:inline>,
      in this example containing sensitive information.
    </fo:block>
  <fo:block id="idp8237520" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.21 
      Complex State</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The callback mode
      <fo:inline font-style="italic"><fo:inline font-family="monospace">handle_event_function</fo:inline></fo:inline>
      enables using a non-atom state as described in section
      <fo:inline font-style="italic">Callback Modes</fo:inline>,
      for example, a complex state term like a tuple.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      One reason to use this is when you have a state item
      that when changed should cancel the
      <fo:inline font-style="italic">state time-out</fo:inline>,
      or one that affects the event handling
      in combination with postponing events.
      We will complicate the previous example
      by introducing a configurable lock button
      (this is the state item in question),
      which in the <fo:inline font-family="monospace">open</fo:inline> state immediately locks the door,
      and an API function <fo:inline font-family="monospace">set_lock_button/1</fo:inline> to set the lock button.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Suppose now that we call <fo:inline font-family="monospace">set_lock_button</fo:inline>
      while the door is open,
      and have already postponed a button event
      that until now was not the lock button.
      The sensible thing can be to say that
      the button was pressed too early so it is
      not to be recognized as the lock button.
      However, then it can be surprising that a button event
      that now is the lock button event arrives (as retried postponed)
      immediately after the state transits to <fo:inline font-family="monospace">locked</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      So we make the <fo:inline font-family="monospace">button/1</fo:inline> function synchronous
      by using
      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_statem:call</fo:inline></fo:inline>
      and still postpone its events in the <fo:inline font-family="monospace">open</fo:inline> state.
      Then a call to <fo:inline font-family="monospace">button/1</fo:inline> during the <fo:inline font-family="monospace">open</fo:inline>
      state does not return until the state transits to <fo:inline font-family="monospace">locked</fo:inline>,
      as it is there the event is handled and the reply is sent.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If a process now calls <fo:inline font-family="monospace">set_lock_button/1</fo:inline>
      to change the lock button while another process
      hangs in <fo:inline font-family="monospace">button/1</fo:inline> with the new lock button,
      it can be expected that the hanging lock button call
      immediately takes effect and locks the lock.
      Therefore, we make the current lock button a part of the state,
      so that when we change the lock button, the state changes
      and all postponed events are retried.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      We define the state as <fo:inline font-family="monospace">{StateName,LockButton}</fo:inline>,
      where <fo:inline font-family="monospace">StateName</fo:inline> is as before
      and <fo:inline font-family="monospace">LockButton</fo:inline> is the current lock button:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(code_lock).
-behaviour(gen_statem).
-define(NAME, code_lock_3).

-export([start_link/2,stop/0]).
-export([button/1,code_length/0,set_lock_button/1]).
-export([init/1,callback_mode/0,terminate/3,code_change/4,format_status/2]).
-export([handle_event/4]).

start_link(Code, LockButton) -&gt;
    gen_statem:start_link(
        {local,?NAME}, ?MODULE, {Code,LockButton}, []).
stop() -&gt;
    gen_statem:stop(?NAME).

button(Digit) -&gt;
    gen_statem:call(?NAME, {button,Digit}).
code_length() -&gt;
    gen_statem:call(?NAME, code_length).
set_lock_button(LockButton) -&gt;
    gen_statem:call(?NAME, {set_lock_button,LockButton}).

init({Code,LockButton}) -&gt;
    process_flag(trap_exit, true),
    Data = #{code =&gt; Code, remaining =&gt; undefined},
    {ok, {locked,LockButton}, Data}.

callback_mode() -&gt;
    [handle_event_function,state_enter].

handle_event(
  {call,From}, {set_lock_button,NewLockButton},
  {StateName,OldLockButton}, Data) -&gt;
    {next_state, {StateName,NewLockButton}, Data,
     [{reply,From,OldLockButton}]};
handle_event(
  {call,From}, code_length,
  {_StateName,_LockButton}, #{code := Code}) -&gt;
    {keep_state_and_data,
     [{reply,From,length(Code)}]};
%%
%% State: locked
handle_event(
  EventType, EventContent,
  {locked,LockButton}, #{code := Code, remaining := Remaining} = Data) -&gt;
    case {EventType, EventContent} of
	{enter, _OldState} -&gt;
	    do_lock(),
	    {keep_state, Data#{remaining := Code}};
        {timeout, _} -&gt;
            {keep_state, Data#{remaining := Code}};
	{{call,From}, {button,Digit}} -&gt;
	    case Remaining of
		[Digit] -&gt; % Complete
		    {next_state, {open,LockButton}, Data,
		     [{reply,From,ok}]};
		[Digit|Rest] -&gt; % Incomplete
		    {keep_state, Data#{remaining := Rest, 30000},
		     [{reply,From,ok}]};
		[_|_] -&gt; % Wrong
		    {keep_state, Data#{remaining := Code},
		     [{reply,From,ok}]}
	    end
    end;
%%
%% State: open
handle_event(
  EventType, EventContent,
  {open,LockButton}, Data) -&gt;
    case {EventType, EventContent} of
	{enter, _OldState} -&gt;
	    do_unlock(),
	    {keep_state_and_data, [{state_timeout,10000,lock}]};
	{state_timeout, lock} -&gt;
	    {next_state, {locked,LockButton}, Data};
	{{call,From}, {button,Digit}} -&gt;
	    if
		Digit =:= LockButton -&gt;
		    {next_state, {locked,LockButton}, Data,
		     [{reply,From,locked}]};
		true -&gt;
		    {keep_state_and_data,
		     [postpone]}
	    end
    end.

do_lock() -&gt;
    io:format("Locked~n", []).
do_unlock() -&gt;
    io:format("Open~n", []).

terminate(_Reason, State, _Data) -&gt;
    State =/= locked andalso do_lock(),
    ok.
code_change(_Vsn, State, Data, _Extra) -&gt;
    {ok,State,Data}.
format_status(Opt, [_PDict,State,Data]) -&gt;
    StateData =
	{State,
	 maps:filter(
	   fun (code, _) -&gt; false;
	       (remaining, _) -&gt; false;
	       (_, _) -&gt; true
	   end,
	   Data)},
    case Opt of
	terminate -&gt;
	    StateData;
	normal -&gt;
	    [{data,[{"State",StateData}]}]
    end.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      It can be an ill-fitting model for a physical code lock
      that the <fo:inline font-family="monospace">button/1</fo:inline> call can hang until the lock
      is locked. But for an API in general it is not that strange.
    </fo:block>
  <fo:block id="idp8257696" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.3.22 
      Hibernation</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If you have many servers in one node
      and they have some state(s) in their lifetime in which
      the servers can be expected to idle for a while,
      and the amount of heap memory all these servers need
      is a problem, then the memory footprint of a server
      can be mimimized by hibernating it through
      <fo:inline font-style="italic"><fo:inline font-family="monospace">proc_lib:hibernate/3</fo:inline></fo:inline>.
    </fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
        It is rather costly to hibernate a process; see
        <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:hibernate/3</fo:inline></fo:inline>.
        It is not something you want to do after every event.
      </fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      We can in this example hibernate in the <fo:inline font-family="monospace">{open,_}</fo:inline> state,
      because what normally occurs in that state is that
      the state time-out after a while
      triggers a transition to <fo:inline font-family="monospace">{locked,_}</fo:inline>:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
%% State: open
handle_event(
  EventType, EventContent,
  {open,LockButton}, Data) -&gt;
    case {EventType, EventContent} of
        {enter, _OldState} -&gt;
            do_unlock(),
            {keep_state_and_data,
             [{state_timeout,10000,lock},hibernate]};
...
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The atom
      <fo:inline font-style="italic"><fo:inline font-family="monospace">hibernate</fo:inline></fo:inline>
      in the action list on the last line
      when entering the <fo:inline font-family="monospace">{open,_}</fo:inline> state is the only change.
      If any event arrives in the <fo:inline font-family="monospace">{open,_},</fo:inline> state, we
      do not bother to rehibernate, so the server stays
      awake after any event.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      To change that we would need to insert
      action <fo:inline font-family="monospace">hibernate</fo:inline> in more places.
      For example, for the state-independent <fo:inline font-family="monospace">set_lock_button</fo:inline>
      and <fo:inline font-family="monospace">code_length</fo:inline> operations that then would have to
      be aware of using <fo:inline font-family="monospace">hibernate</fo:inline> while in the
      <fo:inline font-family="monospace">{open,_}</fo:inline> state, which would clutter the code.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Another not uncommon scenario is to use the event time-out
      to triger hibernation after a certain time of inactivity.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      This server probably does not use
      heap memory worth hibernating for.
      To gain anything from hibernation, your server would
      have to produce some garbage during callback execution,
      for which this example server can serve as a bad example.
    </fo:block>
  <fo:block id="idp8274976" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">9.4  gen_event Behaviour</fo:marker>9.4  gen_event Behaviour</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section is to be read with the <fo:inline font-family="monospace">gen_event(3)</fo:inline> manual
  page in STDLIB, where all interface functions and callback
  functions are described in detail.</fo:block><fo:block id="idp8279040" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.4.1 
      Event Handling Principles</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In OTP, an <fo:inline font-weight="bold">event manager</fo:inline> is a named object to which
      events can be sent. An <fo:inline font-weight="bold">event</fo:inline> can be, for example,
      an error, an alarm, or some information that is to be logged.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the event manager, zero, one, or many <fo:inline font-weight="bold">event handlers</fo:inline>
      are installed. When the event manager is notified
      about an event, the event is processed by all the installed
      event handlers. For example, an event manager for handling errors
      can by default have a handler installed, which writes error
      messages to the terminal. If the error messages during a certain
      period is to be saved to a file as well, the user adds another
      event handler that does this. When logging to the file is no
      longer necessary, this event handler is deleted.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An event manager is implemented as a process and each event
      handler is implemented as a callback module.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The event manager essentially maintains a list of
      <fo:inline font-family="monospace">{Module, State}</fo:inline> pairs, where each <fo:inline font-family="monospace">Module</fo:inline> is an
      event handler, and <fo:inline font-family="monospace">State</fo:inline> is the internal state of that
      event handler.</fo:block>
  <fo:block id="idp8285296" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.4.2 
      Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The callback module for the event handler writing error messages
      to the terminal can look as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(terminal_logger).
-behaviour(gen_event).

-export([init/1, handle_event/2, terminate/2]).

init(_Args) -&gt;
    {ok, []}.

handle_event(ErrorMsg, State) -&gt;
    io:format("***Error*** ~p~n", [ErrorMsg]),
    {ok, State}.

terminate(_Args, _State) -&gt;
    ok.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The callback module for the event handler writing error messages
      to a file can look as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(file_logger).
-behaviour(gen_event).

-export([init/1, handle_event/2, terminate/2]).

init(File) -&gt;
    {ok, Fd} = file:open(File, read),
    {ok, Fd}.

handle_event(ErrorMsg, Fd) -&gt;
    io:format(Fd, "***Error*** ~p~n", [ErrorMsg]),
    {ok, Fd}.

terminate(_Args, Fd) -&gt;
    file:close(Fd).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code is explained in the next sections.</fo:block>
  <fo:block id="idp8290272" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.4.3 
      Starting an Event Manager</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To start an event manager for handling errors, as described in
      the previous example, call the following function:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
gen_event:start_link({local, error_man})</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function spawns and links to a new process, an event
      manager.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The argument, <fo:inline font-family="monospace">{local, error_man}</fo:inline> specifies the name. The
    event manager is then locally registered as <fo:inline font-family="monospace">error_man</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the name is omitted, the event manager is not registered.
      Instead its pid must be used. The name can also be given
      as <fo:inline font-family="monospace">{global, Name}</fo:inline>, in which case the event manager is
      registered using <fo:inline font-family="monospace">global:register_name/2</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">gen_event:start_link</fo:inline> must be used if the event manager is
      part of a supervision tree, that is, started by a supervisor.
      There is another function, <fo:inline font-family="monospace">gen_event:start</fo:inline>, to start a
      standalone event manager, that is, an event manager that is not
      part of a supervision tree.</fo:block>
  <fo:block id="idp8297312" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.4.4 
      Adding an Event Handler</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows how to start an event manager and
    add an event handler to it by using the shell:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">gen_event:start({local, error_man}).</fo:inline>
{ok,&lt;0.31.0&gt;}
2&gt; <fo:inline font-weight="bold">gen_event:add_handler(error_man, terminal_logger, []).</fo:inline>
ok</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function sends a message to the event manager registered as
      <fo:inline font-family="monospace">error_man</fo:inline>, telling it to add the event handler
      <fo:inline font-family="monospace">terminal_logger</fo:inline>. The event manager calls the callback
      function <fo:inline font-family="monospace">terminal_logger:init([])</fo:inline>, where the argument
      <fo:inline font-family="monospace">[]</fo:inline> is the third argument to <fo:inline font-family="monospace">add_handler</fo:inline>. <fo:inline font-family="monospace">init</fo:inline>
      is expected to return <fo:inline font-family="monospace">{ok, State}</fo:inline>, where <fo:inline font-family="monospace">State</fo:inline> is
      the internal state of the event handler.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
init(_Args) -&gt;
    {ok, []}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, <fo:inline font-family="monospace">init</fo:inline> does not need any input data and ignores its
      argument. For <fo:inline font-family="monospace">terminal_logger</fo:inline>, the internal state is
      not used. For <fo:inline font-family="monospace">file_logger</fo:inline>, the internal state is used
      to save the open file descriptor.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
init(File) -&gt;
    {ok, Fd} = file:open(File, read),
    {ok, Fd}.</fo:block>
  <fo:block id="idp8307808" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.4.5 
      Notifying about Events</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; <fo:inline font-weight="bold">gen_event:notify(error_man, no_reply).</fo:inline>
***Error*** no_reply
ok</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">error_man</fo:inline> is the name of the event manager and
      <fo:inline font-family="monospace">no_reply</fo:inline> is the event.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The event is made into a message and sent to the event manager.
      When the event is received, the event manager calls
      <fo:inline font-family="monospace">handle_event(Event, State)</fo:inline> for each installed event
      handler, in the same order as they were added. The function is
      expected to return a tuple <fo:inline font-family="monospace">{ok,State1}</fo:inline>, where
      <fo:inline font-family="monospace">State1</fo:inline> is a new value for the state of the event handler.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In <fo:inline font-family="monospace">terminal_logger</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
handle_event(ErrorMsg, State) -&gt;
    io:format("***Error*** ~p~n", [ErrorMsg]),
    {ok, State}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In <fo:inline font-family="monospace">file_logger</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
handle_event(ErrorMsg, Fd) -&gt;
    io:format(Fd, "***Error*** ~p~n", [ErrorMsg]),
    {ok, Fd}.</fo:block>
  <fo:block id="idp8316304" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.4.6 
      Deleting an Event Handler</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
4&gt; <fo:inline font-weight="bold">gen_event:delete_handler(error_man, terminal_logger, []).</fo:inline>
ok</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function sends a message to the event manager registered as
      <fo:inline font-family="monospace">error_man</fo:inline>, telling it to delete the event handler
      <fo:inline font-family="monospace">terminal_logger</fo:inline>. The event manager calls the callback
      function <fo:inline font-family="monospace">terminal_logger:terminate([], State)</fo:inline>, where
      the argument <fo:inline font-family="monospace">[]</fo:inline> is the third argument to <fo:inline font-family="monospace">delete_handler</fo:inline>.
      <fo:inline font-family="monospace">terminate</fo:inline> is to be the opposite of <fo:inline font-family="monospace">init</fo:inline> and do any
      necessary cleaning up. Its return value is ignored.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">terminal_logger</fo:inline>, no cleaning up is necessary:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
terminate(_Args, _State) -&gt;
    ok.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">file_logger</fo:inline>, the file descriptor opened in <fo:inline font-family="monospace">init</fo:inline>
    must be closed:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
terminate(_Args, Fd) -&gt;
    file:close(Fd).</fo:block>
  <fo:block id="idp8325728" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.4.7 
      Stopping</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When an event manager is stopped, it gives each of
      the installed event handlers the chance to clean up by calling
      <fo:inline font-family="monospace">terminate/2</fo:inline>, the same way as when deleting a handler.</fo:block>

    <fo:block id="idp8327504" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">In a Supervision Tree</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the event manager is part of a supervision tree, no stop
        function is needed. The event manager is automatically
        terminated by its supervisor. Exactly how this is done is
        defined by a
        <fo:inline font-style="italic">shutdown strategy</fo:inline>
        set in the supervisor.</fo:block>
    

    <fo:block id="idp8329792" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Standalone Event Managers</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An event manager can also be stopped by calling:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">gen_event:stop(error_man).</fo:inline>
ok</fo:block>
    
  <fo:block id="idp8332256" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.4.8 
      Handling Other Messages</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">gen_event</fo:inline> is to be able to receive other messages
      than events, the callback function
      <fo:inline font-family="monospace">handle_info(Info, StateName, StateData)</fo:inline>
      must be implemented to handle them. Examples of other
      messages are exit messages, if the <fo:inline font-family="monospace">gen_event</fo:inline> is linked to
      other processes (than the supervisor) and trapping exit signals.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
handle_info({'EXIT', Pid, Reason}, State) -&gt;
    ..code to handle exits here..
    {ok, NewState}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">code_change</fo:inline> method must also be implemented.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
code_change(OldVsn, State, Extra) -&gt;
    ..code to convert state (and more) during code change
    {ok, NewState}</fo:block>
  <fo:block id="idp8341632" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">9.5  Supervisor Behaviour</fo:marker>9.5  Supervisor Behaviour</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section should be read with the
    <fo:inline font-style="italic">supervisor(3)</fo:inline> manual page
    in STDLIB, where all details about the supervisor
    behaviour is given.</fo:block><fo:block id="idp8345408" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.5.1 
      Supervision Principles</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A supervisor is responsible for starting, stopping, and
      monitoring its child processes. The basic idea of a supervisor is
      that it is to keep its child processes alive by restarting them
      when necessary.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Which child processes to start and monitor is specified by a
      list of <fo:inline font-style="italic">child specifications</fo:inline>.
      The child processes are started in the order specified by this
      list, and terminated in the reversed order.</fo:block>
  <fo:block id="idp8348304" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.5.2 
      Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The callback module for a supervisor starting the server from
    <fo:inline font-style="italic">gen_server Behaviour</fo:inline>
    can look as follows:</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(ch_sup).
-behaviour(supervisor).

-export([start_link/0]).
-export([init/1]).

start_link() -&gt;
    supervisor:start_link(ch_sup, []).

init(_Args) -&gt;
    SupFlags = #{strategy =&gt; one_for_one, intensity =&gt; 1, period =&gt; 5},
    ChildSpecs = [#{id =&gt; ch3,
                    start =&gt; {ch3, start_link, []},
                    restart =&gt; permanent,
                    shutdown =&gt; brutal_kill,
                    type =&gt; worker,
                    modules =&gt; [cg3]}],
    {ok, {SupFlags, ChildSpecs}}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">SupFlags</fo:inline> variable in the return value
      from <fo:inline font-family="monospace">init/1</fo:inline> represents
      the <fo:inline font-style="italic">supervisor flags</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ChildSpecs</fo:inline> variable in the return value
      from <fo:inline font-family="monospace">init/1</fo:inline> is a list of <fo:inline font-style="italic">child
      specifications</fo:inline>.</fo:block>
    <fo:block id="idp8356976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.5.3 
      Supervisor Flags</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the type definition for the supervisor flags:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
sup_flags() = #{strategy =&gt; strategy(),         % optional
                intensity =&gt; non_neg_integer(), % optional
                period =&gt; pos_integer()}        % optional
    strategy() = one_for_all
               | one_for_one
               | rest_for_one
               | simple_one_for_one</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">strategy</fo:inline> specifies
	  the <fo:inline font-style="italic">restart
	  strategy</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">intensity</fo:inline> and <fo:inline font-family="monospace">period</fo:inline> specify
	  the <fo:inline font-style="italic">maximum restart
	  intensity</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp8364912" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.5.4 
      Restart Strategy</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> The restart strategy is specified by
      the <fo:inline font-family="monospace">strategy</fo:inline> key in the supervisor flags map returned by
      the callback function <fo:inline font-family="monospace">init</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
SupFlags = #{strategy =&gt; Strategy, ...}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">strategy</fo:inline> key is optional in this map. If it is not
      given, it defaults to <fo:inline font-family="monospace">one_for_one</fo:inline>.</fo:block>

    <fo:block id="idp8369232" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">one_for_one</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a child process terminates, only that process is restarted.</fo:block>
      
      <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../design_principles/sup4.gif"/>
        <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        5.1:
         
        One_For_One Supervision</fo:block>
      </fo:block>
    

    <fo:block id="idp8372368" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">one_for_all</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a child process terminates, all other child processes are
        terminated, and then all child processes, including
        the terminated one, are restarted.</fo:block>
      
      <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../design_principles/sup5.gif"/>
        <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        5.2:
         
        One_For_All Supervision</fo:block>
      </fo:block>
    

    <fo:block id="idp8375600" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">rest_for_one</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a child process terminates, the rest of the child
        processes (that is, the child processes after the terminated
        process in start order) are terminated. Then the terminated
        child process and the rest of the child processes are restarted.</fo:block>
    

     <fo:block id="idp8377184" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">simple_one_for_one</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">simple-one-for-one
	  supervisors</fo:inline>.</fo:block>
    
  <fo:block id="idp8379984" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.5.5 
      Maximum Restart Intensity</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The supervisors have a built-in mechanism to limit the number of
      restarts which can occur in a given time interval. This is
      specified by the two keys <fo:inline font-family="monospace">intensity</fo:inline> and
      <fo:inline font-family="monospace">period</fo:inline> in the supervisor flags map returned by the
      callback function <fo:inline font-family="monospace">init</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
SupFlags = #{intensity =&gt; MaxR, period =&gt; MaxT, ...}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If more than <fo:inline font-family="monospace">MaxR</fo:inline> number of restarts occur in the last
      <fo:inline font-family="monospace">MaxT</fo:inline> seconds, the supervisor terminates all the child
      processes and then itself.
      The termination reason for the supervisor itself in that case will be
      <fo:inline font-family="monospace">shutdown</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the supervisor terminates, then the next higher-level
      supervisor takes some action. It either restarts the terminated
      supervisor or terminates itself.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The intention of the restart mechanism is to prevent a situation
      where a process repeatedly dies for the same reason, only to be
      restarted again.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The keys <fo:inline font-family="monospace">intensity</fo:inline> and <fo:inline font-family="monospace">period</fo:inline> are optional in the
      supervisor flags map. If they are not given, they default
      to <fo:inline font-family="monospace">1</fo:inline> and <fo:inline font-family="monospace">5</fo:inline>, respectively.</fo:block>
    <fo:block id="idp8388944" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Tuning the intensity and period</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default values are 1 restart per 5 seconds. This was chosen to
        be safe for most systems, even with deep supervision hierarchies,
        but you will probably want to tune the settings for your particular
        use case.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First, the intensity decides how big bursts of restarts you want
        to tolerate. For example, you might want to accept a burst of at
        most 5 or 10 attempts, even within the same second, if it results
        in a successful restart.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Second, you need to consider the sustained failure rate, if
        crashes keep happening but not often enough to make the supervisor
        give up. If you set intensity to 10 and set the period as low as 1,
        the supervisor will allow child processes to keep restarting up to
        10 times per second, forever, filling your logs with crash reports
        until someone intervenes manually.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You should therefore set the period to be long enough that you can
        accept that the supervisor keeps going at that rate. For example,
        if you have picked an intensity value of 5, then setting the period
        to 30 seconds will give you at most one restart per 6 seconds for
        any longer period of time, which means that your logs won't fill up
        too quickly, and you will have a chance to observe the failures and
        apply a fix.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These choices depend a lot on your problem domain. If you don't
        have real time monitoring and ability to fix problems quickly, for
        example in an embedded system, you might want to accept at most
        one restart per minute before the supervisor should give up and
        escalate to the next level to try to clear the error automatically.
        On the other hand, if it is more important that you keep trying
        even at a high failure rate, you might want a sustained rate of as
        much as 1-2 restarts per second.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Avoiding common mistakes:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do not forget to consider the burst rate. If you set intensity
            to 1 and period to 6, it gives the same sustained error rate as
            5/30 or 10/60, but will not allow even 2 restart attempts in
            quick succession. This is probably not what you wanted.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do not set the period to a very high value if you want to
            tolerate bursts. If you set intensity to 5 and period to 3600
            (one hour), the supervisor will allow a short burst of 5
            restarts, but then gives up if it sees another single restart
            almost an hour later. You probably want to regard those crashes
            as separate incidents, so setting the period to 5 or 10 minutes
            will be more reasonable.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If your application has multiple levels of supervision, then
            do not simply set the restart intensities to the same values on
            all levels. Keep in mind that the total number of restarts
            (before the top level supervisor gives up and terminates the
            application) will be the product of the intensity values of all
            the supervisors above the failing child process.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, if the top level allows 10 restarts, and the next
            level also allows 10, a crashing child below that level will be
            restarted 100 times, which is probably excessive. Allowing at
            most 3 restarts for the top level supervisor might be a better
            choice in this case.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    
  <fo:block id="idp8400352" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.5.6 
      Child Specification</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type definition for a child specification is as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
child_spec() = #{id =&gt; child_id(),       % mandatory
                 start =&gt; mfargs(),      % mandatory
                 restart =&gt; restart(),   % optional
                 shutdown =&gt; shutdown(), % optional
                 type =&gt; worker(),       % optional
                 modules =&gt; modules()}   % optional
    child_id() = term()
    mfargs() = {M :: module(), F :: atom(), A :: [term()]}
    modules() = [module()] | dynamic
    restart() = permanent | transient | temporary
    shutdown() = brutal_kill | timeout()
    worker() = worker | supervisor</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">id</fo:inline> is used to identify the child
          specification internally by the supervisor.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">id</fo:inline> key is mandatory.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that this identifier occasionally has been called
	  "name". As far as possible, the terms "identifier" or "id"
	  are now used but in order to keep backwards compatibility,
	  some occurences of "name" can still be found, for example
	  in error messages.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">start</fo:inline> defines the function call used to start
          the child process. It is a module-function-arguments tuple
          used as <fo:inline font-family="monospace">apply(M, F, A)</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is to be (or result in) a call to any of the following:</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">supervisor:start_link</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">gen_server:start_link</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">gen_statem:start_link</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">gen_event:start_link</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A function compliant with these functions. For details,
	  see the <fo:inline font-family="monospace">supervisor(3)</fo:inline> manual page.</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">start</fo:inline> key is mandatory.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">restart</fo:inline> defines when a terminated child process is to
          be restarted.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-family="monospace">permanent</fo:inline> child process is always restarted.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-family="monospace">temporary</fo:inline> child process is never restarted
          (not even when the supervisor restart strategy
          is <fo:inline font-family="monospace">rest_for_one</fo:inline> or <fo:inline font-family="monospace">one_for_all</fo:inline> and a sibling
          death causes the temporary process to be terminated).</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-family="monospace">transient</fo:inline> child process is restarted only if it
	  terminates abnormally, that is, with an exit reason other than
          <fo:inline font-family="monospace">normal</fo:inline>, <fo:inline font-family="monospace">shutdown</fo:inline>, or <fo:inline font-family="monospace">{shutdown,Term}</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">restart</fo:inline> key is optional. If it is not given, the
	  default value <fo:inline font-family="monospace">permanent</fo:inline> will be used.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">shutdown</fo:inline> defines how a child process is to be
          terminated.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">brutal_kill</fo:inline> means that the child process is
           unconditionally terminated using <fo:inline font-family="monospace">exit(Child, kill)</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>An integer time-out value means that the supervisor tells
           the child process to terminate by calling
          <fo:inline font-family="monospace">exit(Child, shutdown)</fo:inline> and then waits for an exit
           signal back. If no exit signal is received within
           the specified time, the child process is unconditionally
           terminated using <fo:inline font-family="monospace">exit(Child, kill)</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If the child process is another supervisor, it is to be
           set to <fo:inline font-family="monospace">infinity</fo:inline> to give the subtree enough time to
           shut down. It is also allowed to set it to <fo:inline font-family="monospace">infinity</fo:inline>,
          if the child process is a worker. See the warning below:</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Be careful when setting the shutdown time to
          <fo:inline font-family="monospace">infinity</fo:inline> when the child process is a worker. Because, in this
          situation, the termination of the supervision tree depends on the
          child process; it must be implemented in a safe way and its cleanup
          procedure must always return.</fo:block>
        </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">shutdown</fo:inline> key is optional. If it is not given,
	  and the child is of type <fo:inline font-family="monospace">worker</fo:inline>, the default value
	  <fo:inline font-family="monospace">5000</fo:inline> will be used; if the child is of type
	  <fo:inline font-family="monospace">supervisor</fo:inline>, the default value <fo:inline font-family="monospace">infinity</fo:inline> will be
	  used.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">type</fo:inline> specifies if the child process is a supervisor or
          a worker.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">type</fo:inline> key is optional. If it is not given, the
	  default value <fo:inline font-family="monospace">worker</fo:inline> will be used.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">modules</fo:inline> are to be a list with one element
          <fo:inline font-family="monospace">[Module]</fo:inline>, where <fo:inline font-family="monospace">Module</fo:inline> is the name of
          the callback module, if the child process is a supervisor,
          gen_server, gen_statem.
	  If the child process is a gen_event,
          the value shall be <fo:inline font-family="monospace">dynamic</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This information is used by the release handler during
          upgrades and downgrades, see
          <fo:inline font-style="italic">Release Handling</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">modules</fo:inline> key is optional. If it is not given, it
	  defaults to <fo:inline font-family="monospace">[M]</fo:inline>, where <fo:inline font-family="monospace">M</fo:inline> comes from the
	  child's start <fo:inline font-family="monospace">{M,F,A}</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> The child specification to start the server
    <fo:inline font-family="monospace">ch3</fo:inline> in the previous example look as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#{id =&gt; ch3,
  start =&gt; {ch3, start_link, []},
  restart =&gt; permanent,
  shutdown =&gt; brutal_kill,
  type =&gt; worker,
  modules =&gt; [ch3]}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or simplified, relying on the default values:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#{id =&gt; ch3,
  start =&gt; {ch3, start_link, []}
  shutdown =&gt; brutal_kill}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example: A child specification to start the event manager from
      the chapter about
      <fo:inline font-style="italic">gen_event</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#{id =&gt; error_man,
  start =&gt; {gen_event, start_link, [{local, error_man}]},
  modules =&gt; dynamic}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Both server and event manager are registered processes which
      can be expected to be always accessible. Thus they are
      specified to be <fo:inline font-family="monospace">permanent</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ch3</fo:inline> does not need to do any cleaning up before
      termination. Thus, no shutdown time is needed, but
      <fo:inline font-family="monospace">brutal_kill</fo:inline> is sufficient. <fo:inline font-family="monospace">error_man</fo:inline> can
      need some time for the event handlers to clean up, thus
      the shutdown time is set to 5000 ms (which is the default
      value).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example: A child specification to start another supervisor:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#{id =&gt; sup,
  start =&gt; {sup, start_link, []},
  restart =&gt; transient,
  type =&gt; supervisor} % will cause default shutdown=&gt;infinity</fo:block>
  <fo:block id="idp8452608" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.5.7 
      Starting a Supervisor</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the previous example, the supervisor is started by calling
      <fo:inline font-family="monospace">ch_sup:start_link()</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
start_link() -&gt;
    supervisor:start_link(ch_sup, []).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ch_sup:start_link</fo:inline> calls function
    <fo:inline font-family="monospace">supervisor:start_link/2</fo:inline>, which spawns and links to a new
    process, a supervisor.</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The first argument, <fo:inline font-family="monospace">ch_sup</fo:inline>, is the name of
       the callback module, that is, the module where the <fo:inline font-family="monospace">init</fo:inline>
       callback function is located.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The second argument, <fo:inline font-family="monospace">[]</fo:inline>, is a term that is passed
       as is to
       the callback function <fo:inline font-family="monospace">init</fo:inline>. Here, <fo:inline font-family="monospace">init</fo:inline> does not
       need any indata and ignores the argument.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case, the supervisor is not registered. Instead its pid
      must be used. A name can be specified by calling
      <fo:inline font-family="monospace">supervisor:start_link({local, Name}, Module, Args)</fo:inline> or
      <fo:inline font-family="monospace">supervisor:start_link({global, Name}, Module, Args)</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The new supervisor process calls the callback function
      <fo:inline font-family="monospace">ch_sup:init([])</fo:inline>. <fo:inline font-family="monospace">init</fo:inline> shall return
      <fo:inline font-family="monospace">{ok, {SupFlags, ChildSpecs}}</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
init(_Args) -&gt;
    SupFlags = #{},
    ChildSpecs = [#{id =&gt; ch3,
                    start =&gt; {ch3, start_link, []},
                    shutdown =&gt; brutal_kill}],
    {ok, {SupFlags, ChildSpecs}}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The supervisor then starts all its child processes according to
      the child specifications in the start specification. In this case
      there is one child process, <fo:inline font-family="monospace">ch3</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">supervisor:start_link</fo:inline> is synchronous. It does
      not return until all child processes have been started.</fo:block>
  <fo:block id="idp8466608" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.5.8 
      Adding a Child Process</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In addition to the static supervision tree, dynamic child
    processes can be added to an existing supervisor with the following
    call:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
supervisor:start_child(Sup, ChildSpec)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Sup</fo:inline> is the pid, or name, of the supervisor.
    <fo:inline font-family="monospace">ChildSpec</fo:inline> is a
    <fo:inline font-style="italic">child specification</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Child processes added using <fo:inline font-family="monospace">start_child/2</fo:inline> behave in
      the same way as the other child processes, with the an important
      exception: if a supervisor dies and is recreated, then
      all child processes that were dynamically added to the supervisor
      are lost.</fo:block>
  <fo:block id="idp8471872" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.5.9 
      Stopping a Child Process</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any child process, static or dynamic, can be stopped in
      accordance with the shutdown specification:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
supervisor:terminate_child(Sup, Id)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The child specification for a stopped child process is deleted
      with the following call:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
supervisor:delete_child(Sup, Id)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Sup</fo:inline> is the pid, or name, of the supervisor.
      <fo:inline font-family="monospace">Id</fo:inline> is the value associated with the <fo:inline font-family="monospace">id</fo:inline> key in
      the <fo:inline font-style="italic">child specification</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As with dynamically added child processes, the effects of
      deleting a static child process is lost if the supervisor itself
      restarts.</fo:block>
  <fo:block id="idp8478864" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.5.10 
      Simplified one_for_one Supervisors</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A supervisor with restart strategy <fo:inline font-family="monospace">simple_one_for_one</fo:inline> is
      a simplified <fo:inline font-family="monospace">one_for_one</fo:inline> supervisor, where all child
      processes are dynamically added instances of the same process.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is an example of a callback module for a
    <fo:inline font-family="monospace">simple_one_for_one</fo:inline> supervisor:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(simple_sup).
-behaviour(supervisor).

-export([start_link/0]).
-export([init/1]).

start_link() -&gt;
    supervisor:start_link(simple_sup, []).

init(_Args) -&gt;
    SupFlags = #{strategy =&gt; simple_one_for_one,
                 intensity =&gt; 0,
                 period =&gt; 1},
    ChildSpecs = [#{id =&gt; call,
                    start =&gt; {call, start_link, []},
                    shutdown =&gt; brutal_kill}],
    {ok, {SupFlags, ChildSpecs}}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When started, the supervisor does not start any child processes.
      Instead, all child processes are added dynamically by calling:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
supervisor:start_child(Sup, List)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Sup</fo:inline> is the pid, or name, of the supervisor.
      <fo:inline font-family="monospace">List</fo:inline> is an arbitrary list of terms, which are added to
      the list of arguments specified in the child specification. If
      the start function is specified as <fo:inline font-family="monospace">{M, F, A}</fo:inline>,
      the child process is started by calling
      <fo:inline font-family="monospace">apply(M, F, A++List)</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, adding a child to <fo:inline font-family="monospace">simple_sup</fo:inline> above:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
supervisor:start_child(Pid, [id1])</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result is that the child process is started by calling
      <fo:inline font-family="monospace">apply(call, start_link, []++[id1])</fo:inline>, or actually:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
call:start_link(id1)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A child under a <fo:inline font-family="monospace">simple_one_for_one</fo:inline> supervisor can be
    terminated with the following:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
supervisor:terminate_child(Sup, Pid)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Sup</fo:inline> is the pid, or name, of the supervisor and
    <fo:inline font-family="monospace">Pid</fo:inline> is the pid of the child.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Because a <fo:inline font-family="monospace">simple_one_for_one</fo:inline> supervisor can have many
      children, it shuts them all down asynchronously. This means that
      the children will do their cleanup in parallel and therefore the
      order in which they are stopped is not defined.</fo:block>
  <fo:block id="idp8494224" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.5.11 
      Stopping</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since the supervisor is part of a supervision tree, it is
      automatically terminated by its supervisor. When asked to
      shut down, it terminates all child processes in reversed start
      order according to the respective shutdown specifications, and
      then terminates itself.</fo:block>
  <fo:block id="idp8499760" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">9.6  sys and proc_lib</fo:marker>9.6  sys and proc_lib</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">sys</fo:inline> module has functions for simple debugging of
      processes implemented using behaviours. It also has functions that,
      together with functions in the <fo:inline font-family="monospace">proc_lib</fo:inline> module, can be used
      to implement a <fo:inline font-weight="bold">special process</fo:inline> that complies to the OTP
      design principles without using a standard behaviour. These
      functions can also be used to implement user-defined (non-standard)
      behaviours.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Both <fo:inline font-family="monospace">sys</fo:inline> and <fo:inline font-family="monospace">proc_lib</fo:inline> belong to the STDLIB
      application.</fo:block><fo:block id="idp8506320" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.6.1 
      Simple Debugging</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">sys</fo:inline> module has functions for simple debugging of
    processes implemented using behaviours. The <fo:inline font-family="monospace">code_lock</fo:inline>
    example from
    <fo:inline font-style="italic">gen_statem Behaviour</fo:inline>
    is used to illustrate this:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Erlang/OTP 20 [DEVELOPMENT] [erts-9.0] [source-5ace45e] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:10] [hipe] [kernel-poll:false]

Eshell V9.0  (abort with ^G)
1&gt;  code_lock:start_link([1,2,3,4]).
Lock
{ok,&lt;0.63.0&gt;}
2&gt; sys:statistics(code_lock, true).
ok
3&gt;  sys:trace(code_lock, true).
ok
4&gt;  code_lock:button(1).
*DBG* code_lock receive cast {button,1} in state locked
ok
*DBG* code_lock consume cast {button,1} in state locked
5&gt;  code_lock:button(2).
*DBG* code_lock receive cast {button,2} in state locked
ok
*DBG* code_lock consume cast {button,2} in state locked
6&gt;  code_lock:button(3).
*DBG* code_lock receive cast {button,3} in state locked
ok
*DBG* code_lock consume cast {button,3} in state locked
7&gt;  code_lock:button(4).
*DBG* code_lock receive cast {button,4} in state locked
ok
Unlock
*DBG* code_lock consume cast {button,4} in state locked
*DBG* code_lock receive state_timeout lock in state open
Lock
*DBG* code_lock consume state_timeout lock in state open
8&gt; sys:statistics(code_lock, get).
{ok,[{start_time,{{2017,4,21},{16,8,7}}},
     {current_time,{{2017,4,21},{16,9,42}}},
     {reductions,2973},
     {messages_in,5},
     {messages_out,0}]}
9&gt; sys:statistics(code_lock, false).
ok
10&gt; sys:trace(code_lock, false).
ok
11&gt; sys:get_status(code_lock).
{status,&lt;0.63.0&gt;,
        {module,gen_statem},
        [[{'$initial_call',{code_lock,init,1}},
          {'$ancestors',[&lt;0.61.0&gt;]}],
         running,&lt;0.61.0&gt;,[],
         [{header,"Status for state machine code_lock"},
          {data,[{"Status",running},
                 {"Parent",&lt;0.61.0&gt;},
                 {"Logged Events",[]},
                 {"Postponed",[]}]},
          {data,[{"State",
                  {locked,#{code =&gt; [1,2,3,4],remaining =&gt; [1,2,3,4]}}}]}]]}
    </fo:block>
  <fo:block id="idp8511568" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.6.2 
      Special Processes</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes how to write a process that complies to
    the OTP design principles, without using a standard behaviour.
    Such a process is to:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Be started in a way that makes the process fit into a
      supervision tree</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Support the <fo:inline font-family="monospace">sys</fo:inline>
      <fo:inline font-style="italic">debug facilities</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Take care of
      <fo:inline font-style="italic">system messages</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">System messages are messages with a special meaning, used in
      the supervision tree. Typical system messages are requests for
      trace output, and requests to suspend or resume process execution
      (used during release handling). Processes implemented using
      standard behaviours automatically understand these messages.</fo:block>

    <fo:block id="idp8517520" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Example</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The simple server from
      <fo:inline font-style="italic">Overview</fo:inline>,
      implemented using <fo:inline font-family="monospace">sys</fo:inline> and <fo:inline font-family="monospace">proc_lib</fo:inline> so it fits into a
      supervision tree:</fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(ch4).
-export([start_link/0]).
-export([alloc/0, free/1]).
-export([init/1]).
-export([system_continue/3, system_terminate/4,
         write_debug/3,
         system_get_state/1, system_replace_state/2]).

start_link() -&gt;
    proc_lib:start_link(ch4, init, [self()]).

alloc() -&gt;
    ch4 ! {self(), alloc},
    receive
        {ch4, Res} -&gt;
            Res
    end.

free(Ch) -&gt;
    ch4 ! {free, Ch},
    ok.

init(Parent) -&gt;
    register(ch4, self()),
    Chs = channels(),
    Deb = sys:debug_options([]),
    proc_lib:init_ack(Parent, {ok, self()}),
    loop(Chs, Parent, Deb).

loop(Chs, Parent, Deb) -&gt;
    receive
        {From, alloc} -&gt;
            Deb2 = sys:handle_debug(Deb, fun ch4:write_debug/3,
                                    ch4, {in, alloc, From}),
            {Ch, Chs2} = alloc(Chs),
            From ! {ch4, Ch},
            Deb3 = sys:handle_debug(Deb2, fun ch4:write_debug/3,
                                    ch4, {out, {ch4, Ch}, From}),
            loop(Chs2, Parent, Deb3);
        {free, Ch} -&gt;
            Deb2 = sys:handle_debug(Deb, fun ch4:write_debug/3,
                                    ch4, {in, {free, Ch}}),
            Chs2 = free(Ch, Chs),
            loop(Chs2, Parent, Deb2);

        {system, From, Request} -&gt;
            sys:handle_system_msg(Request, From, Parent,
                                  ch4, Deb, Chs)
    end.

system_continue(Parent, Deb, Chs) -&gt;
    loop(Chs, Parent, Deb).

system_terminate(Reason, _Parent, _Deb, _Chs) -&gt;
    exit(Reason).

system_get_state(Chs) -&gt;
    {ok, Chs}.

system_replace_state(StateFun, Chs) -&gt;
    NChs = StateFun(Chs),
    {ok, NChs, NChs}.

write_debug(Dev, Event, Name) -&gt;
    io:format(Dev, "~p event = ~p~n", [Name, Event]).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example on how the simple debugging functions in the <fo:inline font-family="monospace">sys</fo:inline>
      module can also be used for <fo:inline font-family="monospace">ch4</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl</fo:inline>
Erlang (BEAM) emulator version 5.2.3.6 [hipe] [threads:0]

Eshell V5.2.3.6  (abort with ^G)
1&gt; <fo:inline font-weight="bold">ch4:start_link().</fo:inline>
{ok,&lt;0.30.0&gt;}
2&gt; <fo:inline font-weight="bold">sys:statistics(ch4, true).</fo:inline>
ok
3&gt; <fo:inline font-weight="bold">sys:trace(ch4, true).</fo:inline>
ok
4&gt; <fo:inline font-weight="bold">ch4:alloc().</fo:inline>
ch4 event = {in,alloc,&lt;0.25.0&gt;}
ch4 event = {out,{ch4,ch1},&lt;0.25.0&gt;}
ch1
5&gt; <fo:inline font-weight="bold">ch4:free(ch1).</fo:inline>
ch4 event = {in,{free,ch1}}
ok
6&gt; <fo:inline font-weight="bold">sys:statistics(ch4, get).</fo:inline>
{ok,[{start_time,{{2003,6,13},{9,47,5}}},
     {current_time,{{2003,6,13},{9,47,56}}},
     {reductions,109},
     {messages_in,2},
     {messages_out,1}]}
7&gt; <fo:inline font-weight="bold">sys:statistics(ch4, false).</fo:inline>
ok
8&gt; <fo:inline font-weight="bold">sys:trace(ch4, false).</fo:inline>
ok
9&gt; <fo:inline font-weight="bold">sys:get_status(ch4).</fo:inline>
{status,&lt;0.30.0&gt;,
        {module,ch4},
        [[{'$ancestors',[&lt;0.25.0&gt;]},{'$initial_call',{ch4,init,[&lt;0.25.0&gt;]}}],
         running,&lt;0.25.0&gt;,[],
         [ch1,ch2,ch3]]}</fo:block>
    

    <fo:block id="idp8530096" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Starting the Process</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A function in the <fo:inline font-family="monospace">proc_lib</fo:inline> module is to be used to
        start the process. Several functions are available, for
        example, <fo:inline font-family="monospace">spawn_link/3,4</fo:inline> for asynchronous start and
        <fo:inline font-family="monospace">start_link/3,4,5</fo:inline> for synchronous start.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process started using one of these functions stores
        information (for example, about the ancestors and initial call)
	that is needed for a process in a supervision tree.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the process terminates with another reason than
        <fo:inline font-family="monospace">normal</fo:inline> or <fo:inline font-family="monospace">shutdown</fo:inline>, a crash report is generated.
	For more information about the crash report, see the SASL
        User's Guide.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the example, synchronous start is used. The process
        starts by calling <fo:inline font-family="monospace">ch4:start_link()</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
start_link() -&gt;
    proc_lib:start_link(ch4, init, [self()]).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ch4:start_link</fo:inline> calls the function
        <fo:inline font-family="monospace">proc_lib:start_link</fo:inline>. This function takes a module name,
        a function name, and an argument list as arguments, spawns,
        and links to a new process. The new process starts by executing
        the given function, here <fo:inline font-family="monospace">ch4:init(Pid)</fo:inline>, where
        <fo:inline font-family="monospace">Pid</fo:inline> is the pid (<fo:inline font-family="monospace">self()</fo:inline>) of the first process,
	which is the parent process.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All initialization, including name registration, is done in
      <fo:inline font-family="monospace">init</fo:inline>. The new process must also acknowledge that it has
      been started to the parent:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
init(Parent) -&gt;
    ...
    proc_lib:init_ack(Parent, {ok, self()}),
    loop(...).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">proc_lib:start_link</fo:inline> is synchronous and does not return
        until <fo:inline font-family="monospace">proc_lib:init_ack</fo:inline> has been called.</fo:block>
    

    <fo:block id="idp8543056" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Debugging</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To support the debug facilites in <fo:inline font-family="monospace">sys</fo:inline>, a
        <fo:inline font-weight="bold">debug structure</fo:inline> is needed. The <fo:inline font-family="monospace">Deb</fo:inline> term is
        initialized using <fo:inline font-family="monospace">sys:debug_options/1</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
init(Parent) -&gt;
    ...
    Deb = sys:debug_options([]),
    ...
    loop(Chs, Parent, Deb).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">sys:debug_options/1</fo:inline> takes a list of options as argument.
        Here the list is empty, which means no debugging is enabled
        initially. For information about the possible options, see the
        <fo:inline font-family="monospace">sys(3)</fo:inline> manual page in STDLIB.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then, for each <fo:inline font-weight="bold">system event</fo:inline> to be logged
        or traced, the following function is to be called.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
sys:handle_debug(Deb, Func, Info, Event) =&gt; Deb1</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Deb</fo:inline> is the debug structure.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Func</fo:inline> is a fun specifying
            a (user-defined) function used to format
            trace output. For each system event, the format function is
            called as <fo:inline font-family="monospace">Func(Dev, Event, Info)</fo:inline>, where:
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Dev</fo:inline> is the I/O device to which the output is to
	      be printed. See the <fo:inline font-family="monospace">io(3)</fo:inline> manual page in
	      STDLIB.</fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Event</fo:inline> and <fo:inline font-family="monospace">Info</fo:inline> are passed as is from
                <fo:inline font-family="monospace">handle_debug</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          </fo:list-block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Info</fo:inline> is used to pass more information to
            <fo:inline font-family="monospace">Func</fo:inline>. It can be any term and is passed as is.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Event</fo:inline> is the system event. It is up to the user to
            define what a system event is and how it is to be
            represented. Typically at least incoming and outgoing
            messages are considered system events and represented by
            the tuples <fo:inline font-family="monospace">{in,Msg[,From]}</fo:inline> and <fo:inline font-family="monospace">{out,Msg,To}</fo:inline>,
            respectively.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">handle_debug</fo:inline> returns an updated debug structure
        <fo:inline font-family="monospace">Deb1</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the example, <fo:inline font-family="monospace">handle_debug</fo:inline> is called for each incoming
        and outgoing message. The format function <fo:inline font-family="monospace">Func</fo:inline> is
        the function <fo:inline font-family="monospace">ch4:write_debug/3</fo:inline>, which prints the message
        using <fo:inline font-family="monospace">io:format/3</fo:inline>.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
loop(Chs, Parent, Deb) -&gt;
    receive
        {From, alloc} -&gt;
            Deb2 = sys:handle_debug(Deb, fun ch4:write_debug/3,
                                    ch4, {in, alloc, From}),
            {Ch, Chs2} = alloc(Chs),
            From ! {ch4, Ch},
            Deb3 = sys:handle_debug(Deb2, fun ch4:write_debug/3,
                                    ch4, {out, {ch4, Ch}, From}),
            loop(Chs2, Parent, Deb3);
        {free, Ch} -&gt;
            Deb2 = sys:handle_debug(Deb, fun ch4:write_debug/3,
                                    ch4, {in, {free, Ch}}),
            Chs2 = free(Ch, Chs),
            loop(Chs2, Parent, Deb2);
        ...
    end.

write_debug(Dev, Event, Name) -&gt;
    io:format(Dev, "~p event = ~p~n", [Name, Event]).</fo:block>
    

    <fo:block id="idp8565728" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Handling System Messages</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">System messages</fo:inline> are received as:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{system, From, Request}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The content and meaning of these messages do not need to be
        interpreted by the process. Instead the following function
        is to be called:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
sys:handle_system_msg(Request, From, Parent, Module, Deb, State)</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function does not return. It handles the system
      message and then either calls the following if process execution is
      to continue:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Module:system_continue(Parent, Deb, State)</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Or calls the following if the process is to terminate:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Module:system_terminate(Reason, Parent, Deb, State)</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process in a supervision tree is expected to terminate with
      the same reason as its parent.</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Request</fo:inline> and <fo:inline font-family="monospace">From</fo:inline> are to be passed as is from
	the system message to the call to <fo:inline font-family="monospace">handle_system_msg</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Parent</fo:inline> is the pid of the parent.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Module</fo:inline> is the name of the module.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Deb</fo:inline> is the debug structure.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">State</fo:inline> is a term describing the internal state and
         is passed to <fo:inline font-family="monospace">system_continue</fo:inline>/<fo:inline font-family="monospace">system_terminate</fo:inline>/
         <fo:inline font-family="monospace">system_get_state</fo:inline>/<fo:inline font-family="monospace">system_replace_state</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the process is to return its state, <fo:inline font-family="monospace">handle_system_msg</fo:inline>
      calls:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Module:system_get_state(State)</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the process is to replace its state using the fun <fo:inline font-family="monospace">StateFun</fo:inline>,
      <fo:inline font-family="monospace">handle_system_msg</fo:inline> calls:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Module:system_replace_state(StateFun, State)</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
loop(Chs, Parent, Deb) -&gt;
    receive
        ...

        {system, From, Request} -&gt;
            sys:handle_system_msg(Request, From, Parent,
                                  ch4, Deb, Chs)
    end.

system_continue(Parent, Deb, Chs) -&gt;
    loop(Chs, Parent, Deb).

system_terminate(Reason, Parent, Deb, Chs) -&gt;
    exit(Reason).

system_get_state(Chs) -&gt;
    {ok, Chs, Chs}.

system_replace_state(StateFun, Chs) -&gt;
    NChs = StateFun(Chs),
    {ok, NChs, NChs}.
</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the special process is set to trap exits and if the parent
      process terminates, the expected behavior is to terminate with
      the same reason:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
init(...) -&gt;
    ...,
    process_flag(trap_exit, true),
    ...,
    loop(...).

loop(...) -&gt;
    receive
        ...

        {'EXIT', Parent, Reason} -&gt;
            ..maybe some cleaning up here..
            exit(Reason);
        ...
    end.</fo:block>
    
  <fo:block id="idp8586864" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.6.3 
      User-Defined Behaviours</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To implement a user-defined behaviour,
      write code similar to
      code for a special process, but call functions in a callback
      module for handling specific tasks.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the compiler is to warn for missing callback functions, as it
    does for the OTP behaviours, add <fo:inline font-family="monospace">-callback</fo:inline> attributes in the
    behaviour module to describe the expected callbacks:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-callback Name1(Arg1_1, Arg1_2, ..., Arg1_N1) -&gt; Res1.
-callback Name2(Arg2_1, Arg2_2, ..., Arg2_N2) -&gt; Res2.
...
-callback NameM(ArgM_1, ArgM_2, ..., ArgM_NM) -&gt; ResM.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NameX</fo:inline> are the names of the expected callbacks.
      <fo:inline font-family="monospace">ArgX_Y</fo:inline> and <fo:inline font-family="monospace">ResX</fo:inline> are types as they are described in
      <fo:inline font-style="italic">Types and
      Function Specifications</fo:inline>. The whole syntax of the <fo:inline font-family="monospace">-spec</fo:inline>
      attribute is supported by the <fo:inline font-family="monospace">-callback</fo:inline> attribute.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Callback functions that are optional for the user of the
      behaviour to implement are specified by use of the
      <fo:inline font-family="monospace">-optional_callbacks</fo:inline> attribute:</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-optional_callbacks([OptName1/OptArity1, ..., OptNameK/OptArityK]).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where each <fo:inline font-family="monospace">OptName/OptArity</fo:inline> specifies the name and arity
      of a callback function. Note that the <fo:inline font-family="monospace">-optional_callbacks</fo:inline>
      attribute is to be used together with the <fo:inline font-family="monospace">-callback</fo:inline>
      attribute; it cannot be combined with the
      <fo:inline font-family="monospace">behaviour_info()</fo:inline> function described below.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tools that need to know about optional callback functions can
      call <fo:inline font-family="monospace">Behaviour:behaviour_info(optional_callbacks)</fo:inline> to get
      a list of all optional callback functions.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We recommend using the <fo:inline font-family="monospace">-callback</fo:inline> attribute rather
      than the <fo:inline font-family="monospace">behaviour_info()</fo:inline> function. The reason is that
      the extra type information can be used by tools to produce
      documentation or find discrepancies.</fo:block></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As an alternative to the <fo:inline font-family="monospace">-callback</fo:inline> and
      <fo:inline font-family="monospace">-optional_callbacks</fo:inline> attributes you may directly implement
      and export <fo:inline font-family="monospace">behaviour_info()</fo:inline>:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
behaviour_info(callbacks) -&gt;
    [{Name1, Arity1},...,{NameN, ArityN}].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where each <fo:inline font-family="monospace">{Name, Arity}</fo:inline> specifies the name and arity of
      a callback function. This function is otherwise automatically
      generated by the compiler using the <fo:inline font-family="monospace">-callback</fo:inline>
      attributes.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the compiler encounters the module attribute
      <fo:inline font-family="monospace">-behaviour(Behaviour).</fo:inline> in a module <fo:inline font-family="monospace">Mod</fo:inline>, it
      calls <fo:inline font-family="monospace">Behaviour:behaviour_info(callbacks)</fo:inline> and compares the
      result with the set of functions actually exported from
      <fo:inline font-family="monospace">Mod</fo:inline>, and issues a warning if any callback function is
      missing.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% User-defined behaviour module
-module(simple_server).
-export([start_link/2, init/3, ...]).

-callback init(State :: term()) -&gt; 'ok'.
-callback handle_req(Req :: term(), State :: term()) -&gt; {'ok', Reply :: term()}.
-callback terminate() -&gt; 'ok'.
-callback format_state(State :: term()) -&gt; term().

-optional_callbacks([format_state/1]).

%% Alternatively you may define:
%%
%% -export([behaviour_info/1]).
%% behaviour_info(callbacks) -&gt;
%%     [{init,1},
%%      {handle_req,2},
%%      {terminate,0}].

start_link(Name, Module) -&gt;
    proc_lib:start_link(?MODULE, init, [self(), Name, Module]).

init(Parent, Name, Module) -&gt;
    register(Name, self()),
    ...,
    Dbg = sys:debug_options([]),
    proc_lib:init_ack(Parent, {ok, self()}),
    loop(Parent, Module, Deb, ...).

...</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a callback module:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(db).
-behaviour(simple_server).

-export([init/1, handle_req/2, terminate/0]).

...</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The contracts specified with <fo:inline font-family="monospace">-callback</fo:inline> attributes in
    behaviour modules can be further refined by adding <fo:inline font-family="monospace">-spec</fo:inline>
    attributes in callback modules. This can be useful as
    <fo:inline font-family="monospace">-callback</fo:inline> contracts are usually generic. The same callback
    module with contracts for the callbacks:</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(db).
-behaviour(simple_server).

-export([init/1, handle_req/2, terminate/0]).

-record(state, {field1 :: [atom()], field2 :: integer()}).

-type state()   :: #state{}.
-type request() :: {'store', term(), term()};
                   {'lookup', term()}.

...

-spec handle_req(request(), state()) -&gt; {'ok', term()}.

...</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each <fo:inline font-family="monospace">-spec</fo:inline> contract is to be a subtype of the respective
    <fo:inline font-family="monospace">-callback</fo:inline> contract.</fo:block>
    
  <fo:block id="idp8618912" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">9.7  Applications</fo:marker>9.7  Applications</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section is to be read with the <fo:inline font-family="monospace">app(4)</fo:inline> and
  <fo:inline font-family="monospace">application(3)</fo:inline> manual pages in Kernel.</fo:block><fo:block id="idp8623344" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.7.1 
      Application Concept</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When you have written code implementing some specific functionality
      you might want to make the code into an <fo:inline font-weight="bold">application</fo:inline>,
      that is, a component that can be started and stopped as a unit,
      and which can also be reused in other systems.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To do this, create an
      <fo:inline font-style="italic">application callback module</fo:inline>,
      and describe how the application is to be started and stopped.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then, an <fo:inline font-weight="bold">application specification</fo:inline> is needed, which is
      put in an
      <fo:inline font-style="italic">application resource file</fo:inline>.
      Among other things, this file specifies which modules the application
      consists of and the name of the callback module.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you use <fo:inline font-family="monospace">systools</fo:inline>, the Erlang/OTP tools for packaging code
      (see <fo:inline font-style="italic">Releases</fo:inline>),
      the code for each application is placed in a
      separate directory following a pre-defined
    <fo:inline font-style="italic">directory structure</fo:inline>.</fo:block>
  <fo:block id="idp8631408" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.7.2 
      Application Callback Module</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">How to start and stop the code for the application, that is,
      the supervision tree, is described by two callback functions:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
start(StartType, StartArgs) -&gt; {ok, Pid} | {ok, Pid, State}
stop(State)
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">start</fo:inline> is called when starting the application and is to
      create the supervision tree by starting the top supervisor. It is
      expected to return the pid of the top supervisor and an optional
      term, <fo:inline font-family="monospace">State</fo:inline>, which defaults to <fo:inline font-family="monospace">[]</fo:inline>. This term is passed
      as is to <fo:inline font-family="monospace">stop</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">StartType</fo:inline> is usually the atom <fo:inline font-family="monospace">normal</fo:inline>. It has other
      values only in the case of a takeover or failover, see
      <fo:inline font-style="italic">Distributed Applications</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">StartArgs</fo:inline> is defined by the key <fo:inline font-family="monospace">mod</fo:inline> in the
      <fo:inline font-style="italic">application
      resource file</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">stop/1</fo:inline> is called <fo:inline font-weight="bold">after</fo:inline> the application has been
      stopped and is to do any necessary cleaning up. The actual stopping of
      the application, that is, the shutdown of the supervision tree, is
      handled automatically as described in
      <fo:inline font-style="italic">Starting and Stopping Applications</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example of an application callback module for packaging
      the supervision tree from
      <fo:inline font-style="italic">Supervisor Behaviour</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(ch_app).
-behaviour(application).

-export([start/2, stop/1]).

start(_Type, _Args) -&gt;
    ch_sup:start_link().

stop(_State) -&gt;
    ok.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A library application that cannot be started or stopped, does not
      need any application callback module.</fo:block>
  <fo:block id="idp8646480" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.7.3 
      Application Resource File</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To define an application, an <fo:inline font-weight="bold">application specification</fo:inline> is
      created, which is put in an <fo:inline font-weight="bold">application resource file</fo:inline>, or in
      short an <fo:inline font-family="monospace">.app</fo:inline> file:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{application, Application, [Opt1,...,OptN]}.</fo:block>
<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Application</fo:inline>, an atom, is the name of the application.
      The file must be named <fo:inline font-family="monospace">Application.app</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Each <fo:inline font-family="monospace">Opt</fo:inline> is a tuple <fo:inline font-family="monospace">{Key,Value}</fo:inline>, which define a
      certain property of the application. All keys are optional.
      Default values are used for any omitted keys.</fo:block></fo:list-item-body></fo:list-item>
</fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The contents of a minimal <fo:inline font-family="monospace">.app</fo:inline> file for a library
      application <fo:inline font-family="monospace">libapp</fo:inline> looks as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{application, libapp, []}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The contents of a minimal <fo:inline font-family="monospace">.app</fo:inline> file <fo:inline font-family="monospace">ch_app.app</fo:inline> for
      a supervision tree application like <fo:inline font-family="monospace">ch_app</fo:inline> looks as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{application, ch_app,
 [{mod, {ch_app,[]}}]}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The key <fo:inline font-family="monospace">mod</fo:inline> defines the callback module and start argument of
      the application, in this case <fo:inline font-family="monospace">ch_app</fo:inline> and <fo:inline font-family="monospace">[]</fo:inline>, respectively.
      This means that the following is called when the application is to be
      started:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ch_app:start(normal, [])</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is called when the application is stopped.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ch_app:stop([])</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When using <fo:inline font-family="monospace">systools</fo:inline>, the Erlang/OTP tools for packaging
      code (see Section
      <fo:inline font-style="italic">Releases</fo:inline>), the keys
      <fo:inline font-family="monospace">description</fo:inline>, <fo:inline font-family="monospace">vsn</fo:inline>, <fo:inline font-family="monospace">modules</fo:inline>, <fo:inline font-family="monospace">registered</fo:inline>,
      and <fo:inline font-family="monospace">applications</fo:inline> are also to be specified:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{application, ch_app,
 [{description, "Channel allocator"},
  {vsn, "1"},
  {modules, [ch_app, ch_sup, ch3]},
  {registered, [ch3]},
  {applications, [kernel, stdlib, sasl]},
  {mod, {ch_app,[]}}
 ]}.</fo:block>
 <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
   <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">description</fo:inline> - A short description, a string. Defaults to
   "".</fo:block></fo:list-item-body></fo:list-item>
   <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">vsn</fo:inline> - Version number, a string. Defaults to "".</fo:block></fo:list-item-body></fo:list-item>
   <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">modules</fo:inline> - All modules <fo:inline font-weight="bold">introduced</fo:inline> by this
   application. <fo:inline font-family="monospace">systools</fo:inline> uses this list when generating boot scripts
   and tar files. A module must be defined in only one application.
   Defaults to <fo:inline font-family="monospace">[]</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
   <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">registered</fo:inline> - All names of registered processes in the
   application. <fo:inline font-family="monospace">systools</fo:inline> uses this list to detect name clashes
   between applications. Defaults to <fo:inline font-family="monospace">[]</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
   <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">applications</fo:inline> - All applications that must be
   started before this application is started. <fo:inline font-family="monospace">systools</fo:inline> uses this
   list to generate correct boot scripts. Defaults to <fo:inline font-family="monospace">[]</fo:inline>. Notice
   that all applications have dependencies to at least Kernel
   and STDLIB.</fo:block></fo:list-item-body></fo:list-item>
 </fo:list-block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about the syntax and contents of the application
    resource file, see the <fo:inline font-style="italic">app</fo:inline>
    manual page in Kernel.</fo:block></fo:block>
  <fo:block id="idp8676832" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.7.4 
      Directory Structure</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When packaging code using <fo:inline font-family="monospace">systools</fo:inline>, the code for each
          application is placed in a separate directory,
          <fo:inline font-family="monospace">lib/Application-Vsn</fo:inline>, where <fo:inline font-family="monospace">Vsn</fo:inline> is the version number.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This can be useful to know, even if <fo:inline font-family="monospace">systools</fo:inline> is not used,
          since Erlang/OTP is packaged according to the OTP principles
          and thus comes with a specific directory structure. The code server
          (see the  <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline> manual
          page in Kernel) automatically uses code from
          the directory with the highest version number, if more than one
          version of an application is present.</fo:block>
      <fo:block id="idp8681536" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Directory Structure guidelines for a Development Environment</fo:block>
          
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any directory structure for development will suffice as long as the released directory structure
              adhere to the <fo:inline font-style="italic">description below</fo:inline>,
              but it is encouraged that the same directory structure
              also be used in a development environment. The version number should be omitted from the
              application directory name since this is an artifact of the release step.
          </fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Some sub-directories are <fo:inline font-weight="bold">required</fo:inline>. Some sub-directories are <fo:inline font-weight="bold">optional</fo:inline>, meaning that it should
              only be used if the application itself requires it. Finally, some sub-directories are <fo:inline font-weight="bold">recommended</fo:inline>,
              meaning it is encouraged that it is used and used as described here. For example, both documentation
              and tests are encouraged to exist in an application for it to be deemed a proper OTP application.</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    ─ ${application}
      ├── doc
      │   ├── internal
      │   ├── examples
      │   └── src
      ├── include
      ├── priv
      ├── src
      │   └── ${application}.app.src
      └── test
</fo:block>
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">src</fo:inline> - Required. Contains the Erlang source code, the source of the <fo:inline font-family="monospace">.app</fo:inline> file
                  and internal include files used by the application itself. Additional sub-directories within
                  <fo:inline font-family="monospace">src</fo:inline> can be used as namespaces to organize source files. These directories should never
                be deeper than one level.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">priv</fo:inline> - Optional. Used for application specific files. </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">include</fo:inline> - Optional. Used for public include files that must be reachable from
                  other applications.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">doc</fo:inline> - Recommended. Any source documentation should be placed in sub-directories here.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">doc/internal</fo:inline> - Recommended. Any documentation that describes implementation details about
                  this application, not intended for publication, should be placed here.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">doc/examples</fo:inline> - Recommended. Source code for examples on how to use this application should
                  be placed here. It is encouraged that examples are sourced to the public documentation from
                  this directory.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">doc/src</fo:inline> - Recommended. All source files for documentation, such as Markdown, AsciiDoc or
                  XML-files, should be placed here.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">test</fo:inline> - Recommended. All files regarding tests, such as test suites and test specifications,
                  should be placed here. </fo:block></fo:list-item-body></fo:list-item>
          </fo:list-block>

          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other directories in the development environment may be needed. If source code from languages other
              than Erlang is used, for instance C-code for NIFs, that code should be placed in a separate directory.
              By convention it is recommended to prefix such directories with the language name, for example
              <fo:inline font-family="monospace">c_src</fo:inline> for C, <fo:inline font-family="monospace">java_src</fo:inline> for Java or <fo:inline font-family="monospace">go_src</fo:inline> for Go. Directories with <fo:inline font-family="monospace">_src</fo:inline>
              suffix indicates that it is a part of the application and the compilation step. The final build artifacts
              should target the <fo:inline font-family="monospace">priv/lib</fo:inline> or <fo:inline font-family="monospace">priv/bin</fo:inline> directories.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">priv</fo:inline> directory holds assets that the application needs during runtime. Executables should
              reside in <fo:inline font-family="monospace">priv/bin</fo:inline> and dynamically-linked libraries should reside in <fo:inline font-family="monospace">priv/lib</fo:inline>. Other assets
              are free to reside within the <fo:inline font-family="monospace">priv</fo:inline> directory but it is recommended it does so in a structured manner.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Source files from other languages that generate Erlang code, such as ASN.1 or Mibs, should be placed
              in directories, at the top level or in <fo:inline font-family="monospace">src</fo:inline>, with the same name as the source language, for example
              <fo:inline font-family="monospace">asn1</fo:inline> and <fo:inline font-family="monospace">mibs</fo:inline>. Build artifacts should be placed in their respective language directory,
              such as <fo:inline font-family="monospace">src</fo:inline> for Erlang code or <fo:inline font-family="monospace">java_src</fo:inline> for Java code.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">.app</fo:inline> file for release may reside in the <fo:inline font-family="monospace">ebin</fo:inline>-directory in a development environment
              but it is encouraged that this is an artifact of the build step. By convention a <fo:inline font-family="monospace">.app.src</fo:inline> file
              is used, which resides in the <fo:inline font-family="monospace">src</fo:inline> directory. This file is nearly identical as the
              <fo:inline font-family="monospace">.app</fo:inline> file but certain fields may be replaced during the build step, such as the application version.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Directory names should not be capitalized.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is encouraged to omit empty directories.</fo:block>

      

      <fo:block id="idp8709216" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Directory Structure for a Released System</fo:block>
          
          
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A released application must follow a certain structure.
              </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    ─ ${application}-${version}
      ├── bin
      ├── doc
      │   ├── html
      │   ├── man[1-9]
      │   ├── pdf
      │   ├── internal
      │   └── examples
      ├── ebin
      │   └── ${application}.app
      ├── include
      ├── priv
      │   ├── lib
      │   └── bin
      └── src
</fo:block>
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">src</fo:inline> - Optional. Contains the Erlang source code and internal include files
                  used by the application itself. This directory is no longer required in a released application.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ebin</fo:inline> - Required. Contains the Erlang object code, the <fo:inline font-family="monospace">beam</fo:inline> files.
                  The <fo:inline font-family="monospace">.app</fo:inline> file must also be placed here.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">priv</fo:inline> - Optional. Used for application specific files. <fo:inline font-family="monospace">code:priv_dir/1</fo:inline>
                  is to be used to access this directory.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">priv/lib</fo:inline> - Recommended. Any shared-object files that are used by the application,
                  such as NIFs or linked-in-drivers, should be placed here.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">priv/bin</fo:inline> - Recommended. Any executable that is used by the application,
                  such as port-programs, should be placed here.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">include</fo:inline> - Optional. Used for public include files that must be reachable from
                  other applications.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bin</fo:inline> - Optional. Any executable that is a product of the application,
                  such as escripts or shell-scripts, should be placed here.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">doc</fo:inline> - Optional. Any released documentation should be placed in
                  sub-directories here.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">doc/man1</fo:inline> - Recommended. Man pages for Application executables.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">doc/man3</fo:inline> - Recommended. Man pages for module APIs.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">doc/man6</fo:inline> - Recommended. Man pages for Application overview.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">doc/html</fo:inline> - Optional. HTML pages for the entire Application.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">doc/pdf</fo:inline> - Optional. PDF documentation for the entire Application.</fo:block></fo:list-item-body></fo:list-item>
          </fo:list-block>

          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">src</fo:inline> directory could be useful to release for debugging purposes but is not required.
              The <fo:inline font-family="monospace">include</fo:inline> directory should only be released if the applications has public include files.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The only documentation that is recommended to be released in this way are the man pages. HTML and PDF
              will normally be distributed in some other manner.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is encouraged to omit empty directories.</fo:block>
      
  <fo:block id="idp8727712" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.7.5 
      Application Controller</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When an Erlang runtime system is started, a number of processes
      are started as part of the Kernel application. One of these
      processes is the <fo:inline font-weight="bold">application controller</fo:inline> process,
      registered as <fo:inline font-family="monospace">application_controller</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All operations on applications are coordinated by the application
      controller. It is interacted through the functions in
      the module <fo:inline font-family="monospace">application</fo:inline>, see the <fo:inline font-family="monospace">application(3)</fo:inline>
      manual page in Kernel. In particular, applications can be
      loaded, unloaded, started, and stopped.</fo:block>
  <fo:block id="idp8731680" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.7.6 
      Loading and Unloading Applications</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before an application can be started, it must be <fo:inline font-weight="bold">loaded</fo:inline>.
      The application controller reads and stores the information from
      the <fo:inline font-family="monospace">.app</fo:inline> file:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">application:load(ch_app).</fo:inline>
ok
2&gt; <fo:inline font-weight="bold">application:loaded_applications().</fo:inline>
[{kernel,"ERTS  CXC 138 10","2.8.1.3"},
 {stdlib,"ERTS  CXC 138 10","1.11.4.3"},
 {ch_app,"Channel allocator","1"}]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application that has been stopped, or has never been started,
      can be unloaded. The information about the application is
      erased from the internal database of the application controller.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; <fo:inline font-weight="bold">application:unload(ch_app).</fo:inline>
ok
4&gt; <fo:inline font-weight="bold">application:loaded_applications().</fo:inline>
[{kernel,"ERTS  CXC 138 10","2.8.1.3"},
 {stdlib,"ERTS  CXC 138 10","1.11.4.3"}]</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Loading/unloading an application does not load/unload the code
      used by the application. Code loading is done the usual way.</fo:block>
    </fo:block>
  <fo:block id="idp8739136" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.7.7 
      Starting and Stopping Applications</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application is started by calling:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
5&gt; <fo:inline font-weight="bold">application:start(ch_app).</fo:inline>
ok
6&gt; <fo:inline font-weight="bold">application:which_applications().</fo:inline>
[{kernel,"ERTS  CXC 138 10","2.8.1.3"},
 {stdlib,"ERTS  CXC 138 10","1.11.4.3"},
 {ch_app,"Channel allocator","1"}]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the application is not already loaded, the application
      controller first loads it using <fo:inline font-family="monospace">application:load/1</fo:inline>. It
      checks the value of the <fo:inline font-family="monospace">applications</fo:inline> key, to ensure
      that all applications that are to be started before this
      application are running.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application controller then creates an
    <fo:inline font-weight="bold">application master</fo:inline> for the application. The application master
      is the group leader of all the processes in the application.
      The application master starts the application by calling
      the application callback function <fo:inline font-family="monospace">start/2</fo:inline> in the module,
      and with the start argument, defined by the <fo:inline font-family="monospace">mod</fo:inline> key in
      the <fo:inline font-family="monospace">.app</fo:inline> file.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application is stopped, but not unloaded, by calling:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
7&gt; <fo:inline font-weight="bold">application:stop(ch_app).</fo:inline>
ok</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application master stops the application by telling the top
      supervisor to shut down. The top supervisor tells all its child
      processes to shut down, and so on; the entire tree is terminated in
      reversed start order. The application master then calls
      the application callback function <fo:inline font-family="monospace">stop/1</fo:inline> in the module
      defined by the <fo:inline font-family="monospace">mod</fo:inline> key.</fo:block>
  <fo:block id="idp8749648" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.7.8 
      Configuring an Application</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application can be configured using
    <fo:inline font-weight="bold">configuration parameters</fo:inline>. These are a list of
    <fo:inline font-family="monospace">{Par,Val}</fo:inline> tuples
    specified by a key <fo:inline font-family="monospace">env</fo:inline> in the <fo:inline font-family="monospace">.app</fo:inline> file:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{application, ch_app,
 [{description, "Channel allocator"},
  {vsn, "1"},
  {modules, [ch_app, ch_sup, ch3]},
  {registered, [ch3]},
  {applications, [kernel, stdlib, sasl]},
  {mod, {ch_app,[]}},
  {env, [{file, "/usr/local/log"}]}
 ]}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Par</fo:inline> is to be an atom. <fo:inline font-family="monospace">Val</fo:inline> is any term.
      The application can retrieve the value of a configuration
      parameter by calling <fo:inline font-family="monospace">application:get_env(App, Par)</fo:inline> or a
      number of similar functions, see the <fo:inline font-family="monospace">application(3)</fo:inline>
      manual page in Kernel.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl</fo:inline>
Erlang (BEAM) emulator version 5.2.3.6 [hipe] [threads:0]

Eshell V5.2.3.6  (abort with ^G)
1&gt; <fo:inline font-weight="bold">application:start(ch_app).</fo:inline>
ok
2&gt; <fo:inline font-weight="bold">application:get_env(ch_app, file).</fo:inline>
{ok,"/usr/local/log"}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The values in the <fo:inline font-family="monospace">.app</fo:inline> file can be overridden by values
      in a <fo:inline font-weight="bold">system configuration file</fo:inline>. This is a file that
      contains configuration parameters for relevant applications:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{Application1, [{Par11,Val11},...]},
 ...,
 {ApplicationN, [{ParN1,ValN1},...]}].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The system configuration is to be called <fo:inline font-family="monospace">Name.config</fo:inline> and
      Erlang is to be started with the command-line argument
      <fo:inline font-family="monospace">-config Name</fo:inline>. For details, see the <fo:inline font-family="monospace">config(4)</fo:inline>
      manual page in Kernel.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A file <fo:inline font-family="monospace">test.config</fo:inline> is created with the following contents:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{ch_app, [{file, "testlog"}]}].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of <fo:inline font-family="monospace">file</fo:inline> overrides the value of <fo:inline font-family="monospace">file</fo:inline>
      as defined in the <fo:inline font-family="monospace">.app</fo:inline> file:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -config test</fo:inline>
Erlang (BEAM) emulator version 5.2.3.6 [hipe] [threads:0]

Eshell V5.2.3.6  (abort with ^G)
1&gt; <fo:inline font-weight="bold">application:start(ch_app).</fo:inline>
ok
2&gt; <fo:inline font-weight="bold">application:get_env(ch_app, file).</fo:inline>
{ok,"testlog"}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If
      <fo:inline font-style="italic">release handling</fo:inline>
      is used, exactly one system configuration file is to be used and
      that file is to be called <fo:inline font-family="monospace">sys.config</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The values in the <fo:inline font-family="monospace">.app</fo:inline> file and the values in a
      system configuration file can be overridden directly from
      the command line:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -ApplName Par1 Val1 ... ParN ValN</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -ch_app file '"testlog"'</fo:inline>
Erlang (BEAM) emulator version 5.2.3.6 [hipe] [threads:0]

Eshell V5.2.3.6  (abort with ^G)
1&gt; <fo:inline font-weight="bold">application:start(ch_app).</fo:inline>
ok
2&gt; <fo:inline font-weight="bold">application:get_env(ch_app, file).</fo:inline>
{ok,"testlog"}</fo:block>
  <fo:block id="idp8774624" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.7.9 
      Application Start Types</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">start type</fo:inline> is defined when starting the application:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
application:start(Application, Type)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">application:start(Application)</fo:inline> is the same as calling
      <fo:inline font-family="monospace">application:start(Application, temporary)</fo:inline>. The type can
      also be <fo:inline font-family="monospace">permanent</fo:inline> or <fo:inline font-family="monospace">transient</fo:inline>:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If a permanent application terminates, all other
       applications and the runtime system are also terminated.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If a transient application terminates with reason
      <fo:inline font-family="monospace">normal</fo:inline>, this is reported but no other applications are
       terminated. If a transient application terminates abnormally,
       that is with any other reason than <fo:inline font-family="monospace">normal</fo:inline>, all other
       applications and the runtime system are also terminated.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If a temporary application terminates, this is reported but
       no other applications are terminated.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application can always be stopped explicitly by
      calling <fo:inline font-family="monospace">application:stop/1</fo:inline>. Regardless of the mode, no
      other applications are affected.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The transient mode is of little practical use, since when
      a supervision tree terminates, the reason is set to
      <fo:inline font-family="monospace">shutdown</fo:inline>, not <fo:inline font-family="monospace">normal</fo:inline>.</fo:block>
  <fo:block id="idp8789136" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">9.8  Included Applications</fo:marker>9.8  Included Applications</fo:block><fo:block id="idp8792208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.8.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application can <fo:inline font-weight="bold">include</fo:inline> other applications.
      An <fo:inline font-weight="bold">included application</fo:inline> has its own application directory
      and <fo:inline font-family="monospace">.app</fo:inline> file, but it is started as part of the supervisor
      tree of another application.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application can only be included by one other application.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An included application can include other applications.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application that is not included by any other application is
      called a <fo:inline font-weight="bold">primary application</fo:inline>.</fo:block>
    
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../design_principles/inclappls.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        8.1:
         
        Primary Application and Included Applications</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application controller automatically loads any included
      applications when loading a primary application, but does not start
      them. Instead, the top supervisor of the included application
      must be started by a supervisor in the including application.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This means that when running, an included application is in fact
      part of the primary application, and a process in an included
      application considers itself belonging to the primary
      application.</fo:block>
  <fo:block id="idp8800064" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.8.2 
      Specifying Included Applications</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Which applications to include is defined by
      the <fo:inline font-family="monospace">included_applications</fo:inline> key in the <fo:inline font-family="monospace">.app</fo:inline> file:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{application, prim_app,
 [{description, "Tree application"},
  {vsn, "1"},
  {modules, [prim_app_cb, prim_app_sup, prim_app_server]},
  {registered, [prim_app_server]},
  {included_applications, [incl_app]},
  {applications, [kernel, stdlib, sasl]},
  {mod, {prim_app_cb,[]}},
  {env, [{file, "/usr/local/log"}]}
 ]}.</fo:block>
  <fo:block id="idp8803104" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.8.3 
      Synchronizing Processes during Startup</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The supervisor tree of an included application is started as
      part of the supervisor tree of the including application.
      If there is a need for synchronization between processes in
      the including and included applications, this can be achieved
      by using <fo:inline font-weight="bold">start phases</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start phases are defined by the <fo:inline font-family="monospace">start_phases</fo:inline> key in
      the <fo:inline font-family="monospace">.app</fo:inline> file as a list of tuples <fo:inline font-family="monospace">{Phase,PhaseArgs}</fo:inline>,
      where <fo:inline font-family="monospace">Phase</fo:inline> is an atom and <fo:inline font-family="monospace">PhaseArgs</fo:inline> is a term.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of the <fo:inline font-family="monospace">mod</fo:inline> key of the including application
      must be set to <fo:inline font-family="monospace">{application_starter,[Module,StartArgs]}</fo:inline>,
      where <fo:inline font-family="monospace">Module</fo:inline> as usual is the application callback module.
      <fo:inline font-family="monospace">StartArgs</fo:inline> is a term provided as argument to the callback
      function <fo:inline font-family="monospace">Module:start/2</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{application, prim_app,
 [{description, "Tree application"},
  {vsn, "1"},
  {modules, [prim_app_cb, prim_app_sup, prim_app_server]},
  {registered, [prim_app_server]},
  {included_applications, [incl_app]},
  {start_phases, [{init,[]}, {go,[]}]},
  {applications, [kernel, stdlib, sasl]},
  {mod, {application_starter,[prim_app_cb,[]]}},
  {env, [{file, "/usr/local/log"}]}
 ]}.

{application, incl_app,
 [{description, "Included application"},
  {vsn, "1"},
  {modules, [incl_app_cb, incl_app_sup, incl_app_server]},
  {registered, []},
  {start_phases, [{go,[]}]},
  {applications, [kernel, stdlib, sasl]},
  {mod, {incl_app_cb,[]}}
 ]}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When starting a primary application with included applications,
    the primary application is started the normal way, that is:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The application controller creates an application master for
      the application</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The application master calls
      <fo:inline font-family="monospace">Module:start(normal, StartArgs)</fo:inline> to start the top
      supervisor.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then, for the primary application and each included application
      in top-down, left-to-right order, the application master calls
      <fo:inline font-family="monospace">Module:start_phase(Phase, Type, PhaseArgs)</fo:inline> for each phase
      defined for the primary application, in that order. If a phase
      is not defined for an included application,
      the function is not called for this phase and application.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following requirements apply to the <fo:inline font-family="monospace">.app</fo:inline> file for
      an included application:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">{mod, {Module,StartArgs}}</fo:inline> option must be included.
      This option is used to find the callback module <fo:inline font-family="monospace">Module</fo:inline> of the
      application. <fo:inline font-family="monospace">StartArgs</fo:inline> is ignored, as <fo:inline font-family="monospace">Module:start/2</fo:inline>
      is called only for the primary application.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If the included application itself contains included
      applications, instead the
      <fo:inline font-family="monospace">{mod, {application_starter, [Module,StartArgs]}}</fo:inline> option
      must be included.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">{start_phases, [{Phase,PhaseArgs}]}</fo:inline> option must
      be included, and the set of specified phases must be a subset
      of the set of phases specified for the primary application.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When starting <fo:inline font-family="monospace">prim_app</fo:inline> as defined above, the application
    controller calls the following callback functions before
    <fo:inline font-family="monospace">application:start(prim_app)</fo:inline> returns a value:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
application:start(prim_app)
 =&gt; prim_app_cb:start(normal, [])
 =&gt; prim_app_cb:start_phase(init, normal, [])
 =&gt; prim_app_cb:start_phase(go, normal, [])
 =&gt; incl_app_cb:start_phase(go, normal, [])
ok</fo:block>
  <fo:block id="idp8828416" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">9.9  Distributed Applications</fo:marker>9.9  Distributed Applications</fo:block><fo:block id="idp8831504" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.9.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a distributed system with several Erlang nodes, it can be
      necessary to control applications in a distributed manner. If
      the node, where a certain application is running, goes down,
      the application is to be restarted at another node.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Such an application is called a <fo:inline font-weight="bold">distributed application</fo:inline>.
      Notice that it is the control of the application that is distributed.
      All applications can be distributed in the sense that they,
      for example, use services on other nodes.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since a distributed application can move between nodes, some
      addressing mechanism is required to ensure that it can be
      addressed by other applications, regardless on which node it
      currently executes. This issue is not addressed here, but the
      <fo:inline font-family="monospace">global</fo:inline> or <fo:inline font-family="monospace">pg2</fo:inline> modules in Kernel
      can be used for this purpose.</fo:block>
  <fo:block id="idp8835808" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.9.2 
      Specifying Distributed Applications</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Distributed applications are controlled by both the application
    controller and a distributed application controller process,
    <fo:inline font-family="monospace">dist_ac</fo:inline>. Both these processes are part of the Kernel
    application. Distributed applications are thus specified by
    configuring the Kernel application, using the following
    configuration parameter (see also <fo:inline font-family="monospace">kernel(6)</fo:inline>):</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">distributed = [{Application, [Timeout,] NodeDesc}]</fo:inline></fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Specifies where the application <fo:inline font-family="monospace">Application = atom()</fo:inline>
      can execute.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>&gt;<fo:inline font-family="monospace">NodeDesc = [Node | {Node,...,Node}]</fo:inline> is a list of
      node names in priority order. The order between nodes in a tuple
      is undefined.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Timeout = integer()</fo:inline> specifies how many milliseconds
      to wait before restarting the application at another node. It
      defaults to 0.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For distribution of application control to work properly,
      the nodes where a distributed application can run must contact
      each other and negotiate where to start the application. This is
      done using the following configuration parameters in
      Kernel:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">sync_nodes_mandatory = [Node]</fo:inline> - Specifies which
	other nodes must be started (within the time-out specified by
	<fo:inline font-family="monospace">sync_nodes_timeout</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">sync_nodes_optional = [Node]</fo:inline> - Specifies which
	other nodes can be started (within the time-out specified by
	<fo:inline font-family="monospace">sync_nodes_timeout</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">sync_nodes_timeout = integer() | infinity</fo:inline> -
	Specifies how many milliseconds to wait for the other nodes to
	start.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When started, the node waits for all nodes specified by
      <fo:inline font-family="monospace">sync_nodes_mandatory</fo:inline> and <fo:inline font-family="monospace">sync_nodes_optional</fo:inline> to
      come up. When all nodes are up, or when all mandatory nodes
      are up and the time specified by <fo:inline font-family="monospace">sync_nodes_timeout</fo:inline>
      has elapsed, all applications start. If not all
      mandatory nodes are up, the node terminates.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application <fo:inline font-family="monospace">myapp</fo:inline> is to run at the node
      <fo:inline font-family="monospace">cp1@cave</fo:inline>. If this node goes down, <fo:inline font-family="monospace">myapp</fo:inline> is to
      be restarted at <fo:inline font-family="monospace">cp2@cave</fo:inline> or <fo:inline font-family="monospace">cp3@cave</fo:inline>. A system
      configuration file <fo:inline font-family="monospace">cp1.config</fo:inline> for <fo:inline font-family="monospace">cp1@cave</fo:inline> can
      look as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{kernel,
  [{distributed, [{myapp, 5000, [cp1@cave, {cp2@cave, cp3@cave}]}]},
   {sync_nodes_mandatory, [cp2@cave, cp3@cave]},
   {sync_nodes_timeout, 5000}
  ]
 }
].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The system configuration files for <fo:inline font-family="monospace">cp2@cave</fo:inline> and
      <fo:inline font-family="monospace">cp3@cave</fo:inline> are identical, except for the list of mandatory
      nodes, which is to be <fo:inline font-family="monospace">[cp1@cave, cp3@cave]</fo:inline> for
      <fo:inline font-family="monospace">cp2@cave</fo:inline> and <fo:inline font-family="monospace">[cp1@cave, cp2@cave]</fo:inline> for
      <fo:inline font-family="monospace">cp3@cave</fo:inline>.</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All involved nodes must have the same value for
        <fo:inline font-family="monospace">distributed</fo:inline> and <fo:inline font-family="monospace">sync_nodes_timeout</fo:inline>.
        Otherwise the system behaviour is undefined.</fo:block>
    </fo:block>
  <fo:block id="idp8859488" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.9.3 
      Starting and Stopping Distributed Applications</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When all involved (mandatory) nodes have been started,
      the distributed application can be started by calling
      <fo:inline font-family="monospace">application:start(Application)</fo:inline> at <fo:inline font-weight="bold">all of these
      nodes.</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A boot script (see
      <fo:inline font-style="italic">Releases</fo:inline>)
      can be used that automatically starts the application.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application is started at the first operational node that
      is listed in the list of nodes in the <fo:inline font-family="monospace">distributed</fo:inline>
      configuration parameter. The application is started as usual.
      That is, an application master is created and calls the
      application callback function:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Module:start(normal, StartArgs)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Continuing the example from the previous section, the three nodes
    are started, specifying the system configuration file:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">erl -sname cp1 -config cp1</fo:inline>
&gt; <fo:inline font-weight="bold">erl -sname cp2 -config cp2</fo:inline>
&gt; <fo:inline font-weight="bold">erl -sname cp3 -config cp3</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When all nodes are operational, <fo:inline font-family="monospace">myapp</fo:inline> can be started.
      This is achieved by calling <fo:inline font-family="monospace">application:start(myapp)</fo:inline> at
      all three nodes. It is then started at <fo:inline font-family="monospace">cp1</fo:inline>, as shown in
      the following figure:</fo:block>
    
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../design_principles/dist1.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        9.1:
         
        Application myapp - Situation 1</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Similarly, the application must be stopped by calling
      <fo:inline font-family="monospace">application:stop(Application)</fo:inline> at all involved nodes.</fo:block>
  <fo:block id="idp8872176" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.9.4 
      Failover</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the node where the application is running goes down,
      the application is restarted (after the specified time-out) at
      the first operational node that is listed in the list of nodes
      in the <fo:inline font-family="monospace">distributed</fo:inline> configuration parameter. This is called a
      <fo:inline font-weight="bold">failover</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application is started the normal way at the new node,
      that is, by the application master calling:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Module:start(normal, StartArgs)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An exception is if the application has the <fo:inline font-family="monospace">start_phases</fo:inline>
      key defined
      (see <fo:inline font-style="italic">Included Applications</fo:inline>).
      The application is then instead started by calling:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Module:start({failover, Node}, StartArgs)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here <fo:inline font-family="monospace">Node</fo:inline> is the terminated node.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> If <fo:inline font-family="monospace">cp1</fo:inline> goes down, the system checks which one of
      the other nodes, <fo:inline font-family="monospace">cp2</fo:inline> or <fo:inline font-family="monospace">cp3</fo:inline>, has the least number of
      running applications, but waits for 5 seconds for <fo:inline font-family="monospace">cp1</fo:inline> to
      restart. If <fo:inline font-family="monospace">cp1</fo:inline> does not restart and <fo:inline font-family="monospace">cp2</fo:inline> runs fewer
      applications than <fo:inline font-family="monospace">cp3</fo:inline>, <fo:inline font-family="monospace">myapp</fo:inline> is restarted on
      <fo:inline font-family="monospace">cp2</fo:inline>.</fo:block>
    
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../design_principles/dist2.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        9.2:
         
        Application myapp - Situation 2</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Suppose now that <fo:inline font-family="monospace">cp2</fo:inline> goes also down and does not
      restart within 5 seconds. <fo:inline font-family="monospace">myapp</fo:inline> is now restarted on
      <fo:inline font-family="monospace">cp3</fo:inline>.</fo:block>
    
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../design_principles/dist3.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        9.3:
         
        Application myapp - Situation 3</fo:block>
    </fo:block>
  <fo:block id="idp8889856" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.9.5 
      Takeover</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a node is started, which has higher priority according
      to <fo:inline font-family="monospace">distributed</fo:inline> than the node where a distributed
      application is running, the application is restarted at the
      new node and stopped at the old node. This is
      called a <fo:inline font-weight="bold">takeover</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application is started by the application master calling:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Module:start({takeover, Node}, StartArgs)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here <fo:inline font-family="monospace">Node</fo:inline> is the old node.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example: </fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">myapp</fo:inline> is running at <fo:inline font-family="monospace">cp3</fo:inline>, and if
      <fo:inline font-family="monospace">cp2</fo:inline> now restarts, it does not restart <fo:inline font-family="monospace">myapp</fo:inline>,
      as the order between the <fo:inline font-family="monospace">cp2</fo:inline> and <fo:inline font-family="monospace">cp3</fo:inline> nodes is
      undefined.</fo:block>
    
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../design_principles/dist4.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        9.4:
         
        Application myapp - Situation 4</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, if <fo:inline font-family="monospace">cp1</fo:inline> also restarts, the function
      <fo:inline font-family="monospace">application:takeover/2</fo:inline> moves <fo:inline font-family="monospace">myapp</fo:inline> to <fo:inline font-family="monospace">cp1</fo:inline>,
      as <fo:inline font-family="monospace">cp1</fo:inline> has a higher priority than <fo:inline font-family="monospace">cp3</fo:inline> for this
      application. In this case,
      <fo:inline font-family="monospace">Module:start({takeover, cp3@cave}, StartArgs)</fo:inline> is
      executed at <fo:inline font-family="monospace">cp1</fo:inline> to start the application.</fo:block>
    
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../design_principles/dist5.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        9.5:
         
        Application myapp - Situation 5</fo:block>
    </fo:block>
  <fo:block id="idp8909792" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">9.10  Releases</fo:marker>9.10  Releases</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section is to be read with the <fo:inline font-family="monospace">rel(4)</fo:inline>, <fo:inline font-family="monospace">systools(3)</fo:inline>,
  and <fo:inline font-family="monospace">script(4)</fo:inline> manual pages in SASL.</fo:block><fo:block id="idp8914656" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.10.1 
      Release Concept</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When you have written one or more applications, you might want
      to create a complete system with these applications and a
      subset of the Erlang/OTP applications. This is called a
      <fo:inline font-weight="bold">release</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To do this, create a
    <fo:inline font-style="italic">release resource file</fo:inline> that
      defines which applications are included in the release.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The release resource file is used to generate
      <fo:inline font-style="italic">boot scripts</fo:inline> and
      <fo:inline font-style="italic">release packages</fo:inline>. A system
      that is transferred to and installed at another site is called a
      <fo:inline font-weight="bold">target system</fo:inline>. How to use a release package to create a
      target system is described in System Principles.</fo:block>
  <fo:block id="idp8920944" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.10.2 
      Release Resource File</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To define a release, create a <fo:inline font-weight="bold">release resource file</fo:inline>,
      or in short a <fo:inline font-family="monospace">.rel</fo:inline> file. In the file, specify the name and
      version of the release, which ERTS version it is based on,
      and which applications it consists of:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{release, {Name,Vsn}, {erts, EVsn},
 [{Application1, AppVsn1},
   ...
  {ApplicationN, AppVsnN}]}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Name</fo:inline>, <fo:inline font-family="monospace">Vsn</fo:inline>, <fo:inline font-family="monospace">EVsn</fo:inline>, and <fo:inline font-family="monospace">AppVsn</fo:inline> are
    strings.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file must be named <fo:inline font-family="monospace">Rel.rel</fo:inline>, where <fo:inline font-family="monospace">Rel</fo:inline> is a
      unique name.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each <fo:inline font-family="monospace">Application</fo:inline> (atom) and <fo:inline font-family="monospace">AppVsn</fo:inline> is
      the name and version of an application included in the release.
      The minimal release based on Erlang/OTP consists of
      the Kernel and STDLIB applications, so these
      applications must be included in the list.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the release is to be upgraded, it must also include
      the SASL application.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example: </fo:inline> A release of <fo:inline font-family="monospace">ch_app</fo:inline> from
      <fo:inline font-style="italic">Applications</fo:inline>
      has the following <fo:inline font-family="monospace">.app</fo:inline> file:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{application, ch_app,
 [{description, "Channel allocator"},
  {vsn, "1"},
  {modules, [ch_app, ch_sup, ch3]},
  {registered, [ch3]},
  {applications, [kernel, stdlib, sasl]},
  {mod, {ch_app,[]}}
 ]}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">.rel</fo:inline> file must also contain <fo:inline font-family="monospace">kernel</fo:inline>,
      <fo:inline font-family="monospace">stdlib</fo:inline>, and <fo:inline font-family="monospace">sasl</fo:inline>, as these applications are required
      by <fo:inline font-family="monospace">ch_app</fo:inline>. The file is called <fo:inline font-family="monospace">ch_rel-1.rel</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{release,
 {"ch_rel", "A"},
 {erts, "5.3"},
 [{kernel, "2.9"},
  {stdlib, "1.12"},
  {sasl, "1.10"},
  {ch_app, "1"}]
}.</fo:block>
  <fo:block id="idp8938048" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.10.3 
      Generating Boot Scripts</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">systools</fo:inline> in the SASL application includes tools to
      build and check releases. The functions read the <fo:inline font-family="monospace">rel</fo:inline> and
      <fo:inline font-family="monospace">.app</fo:inline> files and performs syntax and dependency checks.
      The <fo:inline font-family="monospace">systools:make_script/1,2</fo:inline> function is used to generate
      a boot script (see System Principles):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">systools:make_script("ch_rel-1", [local]).</fo:inline>
ok</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This creates a boot script, both the readable version,
    <fo:inline font-family="monospace">ch_rel-1.script</fo:inline>, and the binary version, <fo:inline font-family="monospace">ch_rel-1.boot</fo:inline>,
    used by the runtime system.</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">"ch_rel-1"</fo:inline> is the name of the <fo:inline font-family="monospace">.rel</fo:inline> file,
      minus the extension.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">local</fo:inline> is an option that means that the directories
      where the applications are found are used in the boot script,
      instead of <fo:inline font-family="monospace">$ROOT/lib</fo:inline> (<fo:inline font-family="monospace">$ROOT</fo:inline> is the root directory
      of the installed release).</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> This is a useful way to test a generated boot script locally.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When starting Erlang/OTP using the boot script, all applications
    from the <fo:inline font-family="monospace">.rel</fo:inline> file are automatically loaded and started:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -boot ch_rel-1</fo:inline>
Erlang (BEAM) emulator version 5.3

Eshell V5.3  (abort with ^G)
1&gt; 
=PROGRESS REPORT==== 13-Jun-2003::12:01:15 ===
          supervisor: {local,sasl_safe_sup}
             started: [{pid,&lt;0.33.0&gt;},
                       {name,alarm_handler},
                       {mfa,{alarm_handler,start_link,[]}},
                       {restart_type,permanent},
                       {shutdown,2000},
                       {child_type,worker}]

...

=PROGRESS REPORT==== 13-Jun-2003::12:01:15 ===
         application: sasl
          started_at: nonode@nohost

...
=PROGRESS REPORT==== 13-Jun-2003::12:01:15 ===
         application: ch_app
          started_at: nonode@nohost</fo:block>
  <fo:block id="idp8950880" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.10.4 
      Creating a Release Package</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">systools:make_tar/1,2</fo:inline> function takes a <fo:inline font-family="monospace">.rel</fo:inline> file
    as input and creates a zipped tar file with the code for the specified
    applications, a <fo:inline font-weight="bold">release package</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">systools:make_script("ch_rel-1").</fo:inline>
ok
2&gt; <fo:inline font-weight="bold">systools:make_tar("ch_rel-1").</fo:inline>
ok</fo:block>
   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The release package by default contains:</fo:block>
   <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">.app</fo:inline> files</fo:block></fo:list-item-body></fo:list-item>
     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">.rel</fo:inline> file</fo:block></fo:list-item-body></fo:list-item>
     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The object code for all applications, structured according
     to the
     <fo:inline font-style="italic">application directory
     structure</fo:inline></fo:block></fo:list-item-body></fo:list-item>
     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The binary boot script renamed to <fo:inline font-family="monospace">start.boot</fo:inline></fo:block></fo:list-item-body></fo:list-item>
   </fo:list-block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">tar tf ch_rel-1.tar</fo:inline>
lib/kernel-2.9/ebin/kernel.app
lib/kernel-2.9/ebin/application.beam
...
lib/stdlib-1.12/ebin/stdlib.app
lib/stdlib-1.12/ebin/beam_lib.beam
...
lib/sasl-1.10/ebin/sasl.app
lib/sasl-1.10/ebin/sasl.beam
...
lib/ch_app-1/ebin/ch_app.app
lib/ch_app-1/ebin/ch_app.beam
lib/ch_app-1/ebin/ch_sup.beam
lib/ch_app-1/ebin/ch3.beam
releases/A/start.boot
releases/A/ch_rel-1.rel
releases/ch_rel-1.rel</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A new boot script was generated, without
      the <fo:inline font-family="monospace">local</fo:inline> option set, before the release package was made.
      In the release package, all application directories are placed
      under <fo:inline font-family="monospace">lib</fo:inline>. You do not know where the release package
      will be installed, so no hard-coded absolute paths are allowed.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The release resource file <fo:inline font-family="monospace">mysystem.rel</fo:inline> is duplicated in
      the tar file. Originally, this file was only stored in
      the <fo:inline font-family="monospace">releases</fo:inline> directory to make it possible for
      the <fo:inline font-family="monospace">release_handler</fo:inline> to extract this file
      separately. After unpacking the tar file, <fo:inline font-family="monospace">release_handler</fo:inline>
      would automatically copy the file
      to <fo:inline font-family="monospace">releases/FIRST</fo:inline>. However, sometimes the tar file is
      unpacked without involving the <fo:inline font-family="monospace">release_handler</fo:inline> (for
      example, when unpacking the first target system) and the file
      is therefore now instead duplicated in the tar file so no manual
      copying is necessary.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a <fo:inline font-family="monospace">relup</fo:inline> file and/or a system configuration file called
      <fo:inline font-family="monospace">sys.config</fo:inline> is found, these files are also included in
      the release package. See
      <fo:inline font-style="italic">Release Handling</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options can be set to make the release package include source
      code and the ERTS binary as well.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information on how to install the first target system, using
      a release package, see System Principles. For information
      on how to install a new release package in an existing system, see
      <fo:inline font-style="italic">Release Handling</fo:inline>.</fo:block>
  <fo:block id="idp8970896" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.10.5 
      Directory Structure</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The directory structure for the code installed by the release handler
      from a release package is as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ROOT/lib/App1-AVsn1/ebin
                    /priv
         /App2-AVsn2/ebin
                    /priv
         ...
         /AppN-AVsnN/ebin
                    /priv
     /erts-EVsn/bin
     /releases/Vsn
     /bin</fo:block>
     <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">lib</fo:inline> - Application directories</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">erts-EVsn/bin</fo:inline> - Erlang runtime system executables</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">releases/Vsn</fo:inline> - <fo:inline font-family="monospace">.rel</fo:inline> file and boot script
       <fo:inline font-family="monospace">start.boot</fo:inline>; if present in the release package, <fo:inline font-family="monospace">relup</fo:inline>
       and/or <fo:inline font-family="monospace">sys.config</fo:inline></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bin</fo:inline> - Top-level Erlang runtime system executables</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Applications are not required to be located under directory
      <fo:inline font-family="monospace">$ROOT/lib</fo:inline>. Several installation directories, which contain
      different parts of a system, can thus exist.
      For example, the previous example can be extended as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$SECOND_ROOT/.../SApp1-SAVsn1/ebin
                             /priv
                /SApp2-SAVsn2/ebin
                             /priv
                ...
                /SAppN-SAVsnN/ebin
                             /priv

$THIRD_ROOT/TApp1-TAVsn1/ebin
                        /priv
           /TApp2-TAVsn2/ebin
                        /priv
           ...
           /TAppN-TAVsnN/ebin
                        /priv</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$SECOND_ROOT</fo:inline> and <fo:inline font-family="monospace">$THIRD_ROOT</fo:inline> are introduced as
      <fo:inline font-family="monospace">variables</fo:inline> in the call to the <fo:inline font-family="monospace">systools:make_script/2</fo:inline>
      function.</fo:block>

    <fo:block id="idp8982560" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Disk-Less and/or Read-Only Clients</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a complete system consists of disk-less and/or
        read-only client nodes, a <fo:inline font-family="monospace">clients</fo:inline> directory is to be
        added to the <fo:inline font-family="monospace">$ROOT</fo:inline> directory. A read-only node is
        a node with a read-only file system.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">clients</fo:inline> directory is to have one subdirectory
        per supported client node. The name of each client directory
        is to be the name of the corresponding client node. As a
        minimum, each client directory is to contain the <fo:inline font-family="monospace">bin</fo:inline> and
        <fo:inline font-family="monospace">releases</fo:inline> subdirectories. These directories are used to
        store information about installed releases and to appoint the
        current release to the client. The <fo:inline font-family="monospace">$ROOT</fo:inline>
        directory thus contains the following:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ROOT/...
    /clients/ClientName1/bin
                        /releases/Vsn
            /ClientName2/bin
                        /releases/Vsn
            ...
            /ClientNameN/bin
                        /releases/Vsn</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This structure is to be used if all clients are running
        the same type of Erlang machine. If there are clients running
        different types of Erlang machines, or on different operating
        systems, the <fo:inline font-family="monospace">clients</fo:inline> directory can be divided into one
        subdirectory per type of Erlang machine. Alternatively, one
	<fo:inline font-family="monospace">$ROOT</fo:inline> can be set up per type of machine. For each
        type, some of the directories specified for the <fo:inline font-family="monospace">$ROOT</fo:inline>
        directory are to be included:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ROOT/...
    /clients/Type1/lib
                  /erts-EVsn
                  /bin
                  /ClientName1/bin
                              /releases/Vsn
                  /ClientName2/bin
                              /releases/Vsn
                  ...
                  /ClientNameN/bin
                              /releases/Vsn
            ...
            /TypeN/lib
                  /erts-EVsn
                  /bin
                  ...</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With this structure, the root directory for clients of
        <fo:inline font-family="monospace">Type1</fo:inline> is <fo:inline font-family="monospace">$ROOT/clients/Type1</fo:inline>.</fo:block>
    
  <fo:block id="idp8997360" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">9.11  Release Handling</fo:marker>9.11  Release Handling</fo:block><fo:block id="idp9000416" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.11.1 
      Release Handling Principles</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An important feature of the Erlang programming language is
      the ability to change module code in runtime,
      <fo:inline font-weight="bold">code replacement</fo:inline>, as described in the Erlang
      Reference Manual.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Based on this feature, the OTP application SASL provides a
      framework for upgrading and downgrading between different
      versions of an entire release in runtime. This is called
      <fo:inline font-weight="bold">release handling</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The framework consists of:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Offline support - <fo:inline font-family="monospace">systools</fo:inline> for generating scripts
      and building release packages</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Online support - <fo:inline font-family="monospace">release_handler</fo:inline> for unpacking and
      installing release packages</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The minimal system based on Erlang/OTP, enabling release handling,
    thus consists of the Kernel, STDLIB, and SASL
    applications.</fo:block>

    <fo:block id="idp9006880" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Release Handling Workflow</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1</fo:inline>) A release is created as described in
        <fo:inline font-style="italic">Releases</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2</fo:inline>) The release is transferred to and installed at
        target environment. For information of how to install the first
	target system, see System Principles.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 3</fo:inline>) Modifications, for example, error corrections,
        are made to the code in the development environment.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 4</fo:inline>) At some point, it is time to make a new version
        of release. The relevant <fo:inline font-family="monospace">.app</fo:inline> files are updated and a new
        <fo:inline font-family="monospace">.rel</fo:inline> file is written.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 5</fo:inline>) For each modified application, an
        <fo:inline font-style="italic">application upgrade file</fo:inline>,
        <fo:inline font-family="monospace">.appup</fo:inline>, is created. In this file, it is described how to
	upgrade and/or downgrade between the old and new version of the
        application.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 6</fo:inline>) Based on the <fo:inline font-family="monospace">.appup</fo:inline> files, a
        <fo:inline font-style="italic">release upgrade file</fo:inline> called
        <fo:inline font-family="monospace">relup</fo:inline>, is created. This file describes how to upgrade and/or
        downgrade between the old and new version of the entire release.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 7</fo:inline>) A new release package is made and transferred to
        the target system.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 8</fo:inline>) The new release package is unpacked using the
        release handler.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 9</fo:inline>) The new version of the release is installed,
        also using the release handler. This is done by evaluating the
        instructions in <fo:inline font-family="monospace">relup</fo:inline>. Modules can be added, deleted, or
        reloaded, applications can be started, stopped, or restarted, and so
        on. In some cases, it is even necessary to restart the entire
        emulator.</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If the installation fails, the system can be rebooted.
	The old release version is then automatically used.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If the installation succeeds, the new version is made
	the default version, which is to now be used if there is a
	system reboot.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp9022176" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Release Handling Aspects</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">Appup Cookbook</fo:inline>,
        contains examples of <fo:inline font-family="monospace">.appup</fo:inline> files
	for typical cases of upgrades/downgrades that are normally easy to
	handle in runtime. However, many aspects can make release handling
	complicated, for example:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Complicated or circular dependencies can make it difficult
           or even impossible to decide in which order things must be
           done without risking runtime errors during an upgrade or
           downgrade. Dependencies can be:</fo:block>
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Between nodes</fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Between processes</fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Between modules</fo:block></fo:list-item-body></fo:list-item>
          </fo:list-block>
	</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">During release handling, non-affected processes continue
           normal execution. This can lead to time-outs or other problems.
           For example, new processes created in the time window between
           suspending processes using a certain module, and loading a new
           version of this module, can execute old code.</fo:block>
	</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is thus recommended that code is changed in as small
      steps as possible, and always kept backwards compatible.</fo:block>
    
  <fo:block id="idp9031104" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.11.2 
      Requirements</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For release handling to work properly, the runtime system must
      have knowledge about which release it is running. It
      must also be able to change (in runtime) which boot script and
      system configuration file to use if the system is
      rebooted, for example, by <fo:inline font-family="monospace">heart</fo:inline> after a failure.
      Thus, Erlang must be started as an embedded system; for
      information on how to do this, see Embedded System.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For system reboots to work properly, it is also required that
      the system is started with heartbeat monitoring, see the
      <fo:inline font-family="monospace">erl(1)</fo:inline> manual page in ERTS and the <fo:inline font-family="monospace">heart(3)</fo:inline>
      manual page in Kernel</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other requirements:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The boot script included in a release package must be
          generated from the same <fo:inline font-family="monospace">.rel</fo:inline> file as the release
          package itself.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Information about applications is fetched from the script
          when an upgrade or downgrade is performed.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The system must be configured using only one system
          configuration file, called <fo:inline font-family="monospace">sys.config</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If found, this file is automatically included when a release
          package is created.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All versions of a release, except the first one, must
          contain a <fo:inline font-family="monospace">relup</fo:inline> file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If found, this file is automatically included when a release
          package is created.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp9041824" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.11.3 
      Distributed Systems</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the system consists of several Erlang nodes, each node can use
      its own version of the release. The release handler is a locally
      registered process and must be called at each node where an
      upgrade or downgrade is required. A release handling
      instruction, <fo:inline font-family="monospace">sync_nodes</fo:inline>, can be used to synchronize the
      release handler processes at a number of nodes, see the
      <fo:inline font-family="monospace">appup(4)</fo:inline> manual page in SASL.</fo:block>
  <fo:block id="idp9044976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.11.4 
      Release Handling Instructions</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OTP supports a set of <fo:inline font-weight="bold">release handling instructions</fo:inline>
      that are used when creating <fo:inline font-family="monospace">.appup</fo:inline> files. The release
      handler understands a subset of these, the <fo:inline font-weight="bold">low-level</fo:inline>
      instructions. To make it easier for the user, there are also a
      number of <fo:inline font-weight="bold">high-level</fo:inline> instructions, which are translated
      to low-level instructions by <fo:inline font-family="monospace">systools:make_relup</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some of the most frequently used instructions are described in
    this section. The complete list of instructions is included in the
    <fo:inline font-family="monospace">appup(4)</fo:inline> manual page in SASL.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First, some definitions:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Residence module</fo:inline> - The module where a process has
      its tail-recursive loop function(s). If these functions are
      implemented in several modules, all those modules are residence
      modules for the process.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Functional module</fo:inline> - A module that is not a
      residence module for any process.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a process implemented using an OTP behaviour, the behaviour
    module is the residence module for that process.
    The callback module is a functional module.</fo:block>

    <fo:block id="idp9053120" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">load_module</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a simple extension has been made to a functional module, it
        is sufficient to load the new version of the module into
        the system, and remove the old version. This is called
        <fo:inline font-weight="bold">simple code replacement</fo:inline> and for this the following
        instruction is used:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{load_module, Module}</fo:block>
    

    <fo:block id="idp9055856" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">update</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a more complex change has been made, for example, a change
        to the format of the internal state of a <fo:inline font-family="monospace">gen_server</fo:inline>, simple
	code replacement is not sufficient. Instead, it is necessary to:</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Suspend the processes using the module (to avoid that
	  they try to handle any requests before the code replacement is
	  completed).</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Ask them to transform the internal state format and
	  switch to the new version of the module.</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Remove the old version.</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Resume the processes.</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is called <fo:inline font-weight="bold">synchronized code replacement</fo:inline> and for
	this the following instructions are used:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{update, Module, {advanced, Extra}}
{update, Module, supervisor}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">update</fo:inline> with argument <fo:inline font-family="monospace">{advanced,Extra}</fo:inline> is used
        when changing the internal state of a behaviour as described
        above. It causes behaviour processes to call the callback
        function <fo:inline font-family="monospace">code_change</fo:inline>, passing the term <fo:inline font-family="monospace">Extra</fo:inline> and
        some other information as arguments. See the manual pages for
        the respective behaviours and
	<fo:inline font-style="italic">Appup Cookbook</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">update</fo:inline> with argument <fo:inline font-family="monospace">supervisor</fo:inline> is used when
        changing the start specification of a supervisor. See
	<fo:inline font-style="italic">Appup Cookbook</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a module is to be updated, the release handler finds
        which processes that are <fo:inline font-weight="bold">using</fo:inline> the module by
        traversing the supervision tree of each running application
        and checking all the child specifications:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{Id, StartFunc, Restart, Shutdown, Type, Modules}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process uses a module if the name is listed in
        <fo:inline font-family="monospace">Modules</fo:inline> in the child specification for the process.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Modules=dynamic</fo:inline>, which is the case for event
        managers, the event manager process informs the release handler
        about the list of currently installed event handlers
	(<fo:inline font-family="monospace">gen_event</fo:inline>), and it is checked if the module name is in
        this list instead.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The release handler suspends, asks for code change, and
        resumes processes by calling the functions
        <fo:inline font-family="monospace">sys:suspend/1,2</fo:inline>, <fo:inline font-family="monospace">sys:change_code/4,5</fo:inline>, and
        <fo:inline font-family="monospace">sys:resume/1,2</fo:inline>, respectively.</fo:block>
    

    <fo:block id="idp9073504" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">add_module and delete_module</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a new module is introduced, the following instruction is
        used:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{add_module, Module}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The instruction loads the module and is necessary
        when running Erlang in embedded mode. It is not strictly
        required when running Erlang in interactive (default) mode,
        since the code server then automatically searches for and
        loads unloaded modules.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The opposite of <fo:inline font-family="monospace">add_module</fo:inline> is <fo:inline font-family="monospace">delete_module</fo:inline>, which
        unloads a module:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{delete_module, Module}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any process, in any application, with <fo:inline font-family="monospace">Module</fo:inline>
        as residence module, is killed when the instruction is
        evaluated. The user must therefore ensure that all such
        processes are terminated before deleting the module, to avoid
        a situation with failing supervisor restarts.</fo:block>
    

    <fo:block id="idp9079616" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Application Instructions</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is the instruction for adding an application:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{add_application, Application}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adding an application means that the modules defined by
        the <fo:inline font-family="monospace">modules</fo:inline> key in the <fo:inline font-family="monospace">.app</fo:inline> file are loaded using
        a number of <fo:inline font-family="monospace">add_module</fo:inline> instructions, and then the application
        is started.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is the instruction for removing an application:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{remove_application, Application}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removing an application means that the application is stopped,
        the modules are unloaded using a number of <fo:inline font-family="monospace">delete_module</fo:inline>
        instructions, and then the application specification is unloaded
        from the application controller.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is the instruction for restarting an application:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{restart_application, Application}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Restarting an application means that the application is stopped
        and then started again similar to using the instructions
        <fo:inline font-family="monospace">remove_application</fo:inline> and <fo:inline font-family="monospace">add_application</fo:inline> in
        sequence.</fo:block>
    

    <fo:block id="idp9088704" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">apply (Low-Level)</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To call an arbitrary function from the release handler,
        the following instruction is used:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{apply, {M, F, A}}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The release handler evalutes <fo:inline font-family="monospace">apply(M, F, A)</fo:inline>.</fo:block>
    

    <fo:block id="idp9092336" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">restart_new_emulator (Low-Level)</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This instruction is used when changing to a new emulator
        version, or when any of the core applications Kernel,
	STDLIB, or SASL is upgraded. If a system reboot
	is needed for another reason, the <fo:inline font-family="monospace">restart_emulator</fo:inline>
	instruction is to be used instead.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This instruction requires that the system is started with
        heartbeat monitoring, see the <fo:inline font-family="monospace">erl(1)</fo:inline> manual page in
	ERTS and the <fo:inline font-family="monospace">heart(3)</fo:inline> manual page in Kernel.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">restart_new_emulator</fo:inline> instruction must always be
        the first instruction in a relup. If the relup is
        generated by <fo:inline font-family="monospace">systools:make_relup/3,4</fo:inline>, this is
        automatically ensured.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the release handler encounters the instruction, it first
        generates a temporary boot file, which starts the new versions
        of the emulator and the core applications, and the old version
        of all other applications. Then it shuts down
        the current emulator by calling <fo:inline font-family="monospace">init:reboot()</fo:inline>, see the
        <fo:inline font-family="monospace">init(3)</fo:inline> manual page in Kernel.
	All processes are terminated gracefully and
        the system is rebooted by the <fo:inline font-family="monospace">heart</fo:inline> program, using the
        temporary boot file. After the reboot, the rest of the relup
        instructions are executed. This is done as a part of the
        temporary boot script.</fo:block>
      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This mechanism causes the new versions of the emulator and
	core applications to run with the old version of other
	applications during startup. Thus, take extra care to
	avoid incompatibility. Incompatible changes in the core
	applications can in some situations be necessary. If possible,
	such changes are preceded by deprecation over two major
	releases before the actual change. To ensure the
	application is not crashed by an incompatible change, always
	remove any call to deprecated functions as soon as
	possible.</fo:block>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An info report is written when the upgrade is completed. To
        programmatically find out if the upgrade is complete,
        call <fo:inline font-family="monospace">release_handler:which_releases(current)</fo:inline> and check
        if it returns the expected (that is, the new) release.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The new release version must be made permanent when the new
        emulator is operational. Otherwise, the old version will be
        used if there is a new system reboot.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On UNIX, the release handler tells the <fo:inline font-family="monospace">heart</fo:inline> program
        which command to use to reboot the system. The environment
        variable <fo:inline font-family="monospace">HEART_COMMAND</fo:inline>, normally used by the <fo:inline font-family="monospace">heart</fo:inline>
        program, is ignored in this case. The command instead defaults
        to <fo:inline font-family="monospace">$ROOT/bin/start</fo:inline>. Another command can be set by using
	the SASL configuration parameter <fo:inline font-family="monospace">start_prg</fo:inline>, see
	the <fo:inline font-family="monospace">sasl(6)</fo:inline> manual page.</fo:block>
    

    <fo:block id="idp9106640" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">restart_emulator (Low-Level)</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This instruction is not related to upgrades of ERTS or any
        of the core applications. It can be used by any application to
        force a restart of the emulator after all upgrade instructions
        are executed.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A relup script can only have one <fo:inline font-family="monospace">restart_emulator</fo:inline>
        instruction and it must always be placed at the end. If
	the relup is generated by <fo:inline font-family="monospace">systools:make_relup/3,4</fo:inline>, this
	is automatically ensured.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the release handler encounters the instruction, it shuts
        down the emulator by calling <fo:inline font-family="monospace">init:reboot()</fo:inline>, see the
        <fo:inline font-family="monospace">init(3)</fo:inline> manual page in Kernel.
	All processes are terminated gracefully and the system
        can then be rebooted by the <fo:inline font-family="monospace">heart</fo:inline> program using the
        new release version. No more upgrade instruction is
        executed after the restart.</fo:block>
    
  <fo:block id="idp9112448" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.11.5 
      Application Upgrade File</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To define how to upgrade/downgrade between the current version
      and previous versions of an application, an
      <fo:inline font-weight="bold">application upgrade file</fo:inline>, or in short an <fo:inline font-family="monospace">.appup</fo:inline>
      file is created.
      The file is to be called <fo:inline font-family="monospace">Application.appup</fo:inline>, where
      <fo:inline font-family="monospace">Application</fo:inline> is the application name:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{Vsn,
 [{UpFromVsn1, InstructionsU1},
  ...,
  {UpFromVsnK, InstructionsUK}],
 [{DownToVsn1, InstructionsD1},
  ...,
  {DownToVsnK, InstructionsDK}]}.</fo:block>
  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Vsn</fo:inline>, a string, is the current version of the application,
    as defined in the <fo:inline font-family="monospace">.app</fo:inline> file.</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Each <fo:inline font-family="monospace">UpFromVsn</fo:inline> is a previous version of the application
    to upgrade from.</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Each <fo:inline font-family="monospace">DownToVsn</fo:inline> is a previous version of the application
    to downgrade to.</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Each <fo:inline font-family="monospace">Instructions</fo:inline> is a list of release handling
    instructions.</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about the syntax and contents of the <fo:inline font-family="monospace">.appup</fo:inline>
      file, see the <fo:inline font-family="monospace">appup(4)</fo:inline> manual page in SASL.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">Appup Cookbook</fo:inline>
      includes examples of <fo:inline font-family="monospace">.appup</fo:inline> files for typical upgrade/downgrade
      cases.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> Consider the release <fo:inline font-family="monospace">ch_rel-1</fo:inline> from
      <fo:inline font-style="italic">Releases</fo:inline>.
      Assume you want to add a function <fo:inline font-family="monospace">available/0</fo:inline> to server
      <fo:inline font-family="monospace">ch3</fo:inline>, which returns the number of available channels (when
      trying out the example, change in a copy of the original
      directory, so that the first versions are still available):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(ch3).
-behaviour(gen_server).

-export([start_link/0]).
-export([alloc/0, free/1]).
-export([available/0]).
-export([init/1, handle_call/3, handle_cast/2]).

start_link() -&gt;
    gen_server:start_link({local, ch3}, ch3, [], []).

alloc() -&gt;
    gen_server:call(ch3, alloc).

free(Ch) -&gt;
    gen_server:cast(ch3, {free, Ch}).

available() -&gt;
    gen_server:call(ch3, available).

init(_Args) -&gt;
    {ok, channels()}.

handle_call(alloc, _From, Chs) -&gt;
    {Ch, Chs2} = alloc(Chs),
    {reply, Ch, Chs2};
handle_call(available, _From, Chs) -&gt;
    N = available(Chs),
    {reply, N, Chs}.

handle_cast({free, Ch}, Chs) -&gt;
    Chs2 = free(Ch, Chs),
    {noreply, Chs2}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A new version of the <fo:inline font-family="monospace">ch_app.app</fo:inline> file must now be created,
      where the version is updated:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{application, ch_app,
 [{description, "Channel allocator"},
  {vsn, "2"},
  {modules, [ch_app, ch_sup, ch3]},
  {registered, [ch3]},
  {applications, [kernel, stdlib, sasl]},
  {mod, {ch_app,[]}}
 ]}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To upgrade <fo:inline font-family="monospace">ch_app</fo:inline> from <fo:inline font-family="monospace">"1"</fo:inline> to <fo:inline font-family="monospace">"2"</fo:inline> (and
      to downgrade from <fo:inline font-family="monospace">"2"</fo:inline> to <fo:inline font-family="monospace">"1"</fo:inline>), you only need to
      load the new (old) version of the <fo:inline font-family="monospace">ch3</fo:inline> callback module.
      Create the application upgrade file <fo:inline font-family="monospace">ch_app.appup</fo:inline> in
      the <fo:inline font-family="monospace">ebin</fo:inline> directory:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"2",
 [{"1", [{load_module, ch3}]}],
 [{"1", [{load_module, ch3}]}]
}.</fo:block>
  <fo:block id="idp9136000" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.11.6 
      Release Upgrade File</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To define how to upgrade/downgrade between the new version and
      previous versions of a release, a <fo:inline font-weight="bold">release upgrade file</fo:inline>,
      or in short <fo:inline font-family="monospace">relup</fo:inline> file, is to be created.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This file does not need to be created manually, it can be
      generated by <fo:inline font-family="monospace">systools:make_relup/3,4</fo:inline>. The relevant versions
      of the <fo:inline font-family="monospace">.rel</fo:inline> file, <fo:inline font-family="monospace">.app</fo:inline> files, and <fo:inline font-family="monospace">.appup</fo:inline> files
      are used as input. It is deducted which applications are to be
      added and deleted, and which applications that must be upgraded
      and/or downgraded. The instructions for this are fetched from
      the <fo:inline font-family="monospace">.appup</fo:inline> files and transformed into a single list of
      low-level instructions in the right order.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">relup</fo:inline> file is relatively simple, it can be created
      manually. It it only to contain low-level instructions.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about the syntax and contents of the release upgrade
      file, see the <fo:inline font-family="monospace">relup(4)</fo:inline> manual page in SASL.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example, continued from the previous section:</fo:inline> You have a
      new version "2" of <fo:inline font-family="monospace">ch_app</fo:inline> and an <fo:inline font-family="monospace">.appup</fo:inline> file. A new
      version of the <fo:inline font-family="monospace">.rel</fo:inline> file is also needed. This time the file
      is called <fo:inline font-family="monospace">ch_rel-2.rel</fo:inline> and the release version string is
      changed from "A" to "B":</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{release,
 {"ch_rel", "B"},
 {erts, "5.3"},
 [{kernel, "2.9"},
  {stdlib, "1.12"},
  {sasl, "1.10"},
  {ch_app, "2"}]
}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now the <fo:inline font-family="monospace">relup</fo:inline> file can be generated:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">systools:make_relup("ch_rel-2", ["ch_rel-1"], ["ch_rel-1"]).</fo:inline>
ok</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This generates a <fo:inline font-family="monospace">relup</fo:inline> file with instructions for
      how to upgrade from version "A" ("ch_rel-1") to version "B"
      ("ch_rel-2") and how to downgrade from version "B" to version "A".</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Both the old and new versions of the <fo:inline font-family="monospace">.app</fo:inline> and
      <fo:inline font-family="monospace">.rel</fo:inline> files must be in the code path, as well as the
      <fo:inline font-family="monospace">.appup</fo:inline> and (new) <fo:inline font-family="monospace">.beam</fo:inline> files. The code path can be
      extended by using the option <fo:inline font-family="monospace">path</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">systools:make_relup("ch_rel-2", ["ch_rel-1"], ["ch_rel-1"],</fo:inline>
<fo:inline font-weight="bold">[{path,["../ch_rel-1",</fo:inline>
<fo:inline font-weight="bold">"../ch_rel-1/lib/ch_app-1/ebin"]}]).</fo:inline>
ok</fo:block>
  <fo:block id="idp9154944" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.11.7 
      Installing a Release</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When you have made a new version of a release, a release package
      can be created with this new version and transferred to the target
      environment.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To install the new version of the release in runtime,
      the <fo:inline font-weight="bold">release handler</fo:inline> is used. This is a process belonging
      to the SASL application, which handles unpacking, installation,
      and removal of release packages. It is communicated through
      the <fo:inline font-family="monospace">release_handler</fo:inline> module. For details, see the
      <fo:inline font-family="monospace">release_handler(3)</fo:inline> manual page in SASL.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assuming there is an operational target system with
      installation root directory <fo:inline font-family="monospace">$ROOT</fo:inline>, the release package with
      the new version of the release is to be copied to
      <fo:inline font-family="monospace">$ROOT/releases</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First, <fo:inline font-weight="bold">unpack</fo:inline> the release package.
      The files are then extracted from the package:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
release_handler:unpack_release(ReleaseName) =&gt; {ok, Vsn}</fo:block>
   <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ReleaseName</fo:inline> is the name of the release package except
     the <fo:inline font-family="monospace">.tar.gz</fo:inline> extension.</fo:block></fo:list-item-body></fo:list-item>
     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Vsn</fo:inline> is the version of the unpacked release, as
     defined in its <fo:inline font-family="monospace">.rel</fo:inline> file.</fo:block></fo:list-item-body></fo:list-item>
   </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A directory <fo:inline font-family="monospace">$ROOT/lib/releases/Vsn</fo:inline> is created, where
      the <fo:inline font-family="monospace">.rel</fo:inline> file, the boot script <fo:inline font-family="monospace">start.boot</fo:inline>,
      the system configuration file <fo:inline font-family="monospace">sys.config</fo:inline>, and <fo:inline font-family="monospace">relup</fo:inline>
      are placed. For applications with new version numbers,
      the application directories are placed under <fo:inline font-family="monospace">$ROOT/lib</fo:inline>.
      Unchanged applications are not affected.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An unpacked release can be <fo:inline font-weight="bold">installed</fo:inline>. The release
      handler then evaluates the instructions in <fo:inline font-family="monospace">relup</fo:inline>, step by
      step:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
release_handler:install_release(Vsn) =&gt; {ok, FromVsn, []}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error occurs during the installation, the system is
      rebooted using the old version of the release. If installation
      succeeds, the system is afterwards using the new version of
      the release, but if anything happens and the system is
      rebooted, it starts using the previous version again.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To be made the default version, the newly installed release
      must be made <fo:inline font-weight="bold">permanent</fo:inline>, which means the previous
      version becomes <fo:inline font-weight="bold">old</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
release_handler:make_permanent(Vsn) =&gt; ok</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The system keeps information about which versions are old and
      permanent in the files <fo:inline font-family="monospace">$ROOT/releases/RELEASES</fo:inline> and
      <fo:inline font-family="monospace">$ROOT/releases/start_erl.data</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To downgrade from <fo:inline font-family="monospace">Vsn</fo:inline> to <fo:inline font-family="monospace">FromVsn</fo:inline>,
      <fo:inline font-family="monospace">install_release</fo:inline> must be called again:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
release_handler:install_release(FromVsn) =&gt; {ok, Vsn, []}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An installed, but not permanent, release can be <fo:inline font-weight="bold">removed</fo:inline>.
      Information about the release is then deleted from
      <fo:inline font-family="monospace">$ROOT/releases/RELEASES</fo:inline> and the release-specific code,
      that is, the new application directories and
      the <fo:inline font-family="monospace">$ROOT/releases/Vsn</fo:inline> directory, are removed.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
release_handler:remove_release(Vsn) =&gt; ok</fo:block>

    <fo:block id="idp9179824" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Example (continued from the previous sections)</fo:block>
      
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1)</fo:inline> Create a target system as described in
      System Principles of the first version <fo:inline font-family="monospace">"A"</fo:inline>
      of <fo:inline font-family="monospace">ch_rel</fo:inline> from
      <fo:inline font-style="italic">Releases</fo:inline>.
      This time <fo:inline font-family="monospace">sys.config</fo:inline> must be included in the release package.
      If no configuration is needed, the file is to contain the empty
      list:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2)</fo:inline> Start the system as a simple target system. In
      reality, it is to be started as an embedded system. However, using
      <fo:inline font-family="monospace">erl</fo:inline> with the correct boot script and config file is enough for
      illustration purposes:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">cd $ROOT</fo:inline>
% <fo:inline font-weight="bold">bin/erl -boot $ROOT/releases/A/start -config $ROOT/releases/A/sys</fo:inline>
...</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ROOT</fo:inline> is the installation directory of the target system.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 3)</fo:inline> In another Erlang shell, generate start scripts and
      create a release package for the new version <fo:inline font-family="monospace">"B"</fo:inline>. Remember to
      include (a possible updated) <fo:inline font-family="monospace">sys.config</fo:inline> and the <fo:inline font-family="monospace">relup</fo:inline> file,
      see <fo:inline font-style="italic">Release Upgrade File</fo:inline>.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">systools:make_script("ch_rel-2").</fo:inline>
ok
2&gt; <fo:inline font-weight="bold">systools:make_tar("ch_rel-2").</fo:inline>
ok</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The new release package now also contains version "2" of <fo:inline font-family="monospace">ch_app</fo:inline>
      and the <fo:inline font-family="monospace">relup</fo:inline> file:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% tar tf ch_rel-2.tar 
lib/kernel-2.9/ebin/kernel.app
lib/kernel-2.9/ebin/application.beam
...
lib/stdlib-1.12/ebin/stdlib.app
lib/stdlib-1.12/ebin/beam_lib.beam
...      
lib/sasl-1.10/ebin/sasl.app
lib/sasl-1.10/ebin/sasl.beam
...
lib/ch_app-2/ebin/ch_app.app
lib/ch_app-2/ebin/ch_app.beam
lib/ch_app-2/ebin/ch_sup.beam
lib/ch_app-2/ebin/ch3.beam
releases/B/start.boot
releases/B/relup
releases/B/sys.config
releases/B/ch_rel-2.rel
releases/ch_rel-2.rel</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 4)</fo:inline> Copy the release package <fo:inline font-family="monospace">ch_rel-2.tar.gz</fo:inline>
      to the <fo:inline font-family="monospace">$ROOT/releases</fo:inline> directory.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 5)</fo:inline> In the running target system, unpack the release
      package:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">release_handler:unpack_release("ch_rel-2").</fo:inline>
{ok,"B"}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The new application version <fo:inline font-family="monospace">ch_app-2</fo:inline> is installed under
      <fo:inline font-family="monospace">$ROOT/lib</fo:inline> next to <fo:inline font-family="monospace">ch_app-1</fo:inline>. The <fo:inline font-family="monospace">kernel</fo:inline>,
      <fo:inline font-family="monospace">stdlib</fo:inline>, and <fo:inline font-family="monospace">sasl</fo:inline> directories are not affected, as
      they have not changed.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Under <fo:inline font-family="monospace">$ROOT/releases</fo:inline>, a new directory <fo:inline font-family="monospace">B</fo:inline> is created,
      containing <fo:inline font-family="monospace">ch_rel-2.rel</fo:inline>, <fo:inline font-family="monospace">start.boot</fo:inline>,
      <fo:inline font-family="monospace">sys.config</fo:inline>, and <fo:inline font-family="monospace">relup</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 6)</fo:inline> Check if the function <fo:inline font-family="monospace">ch3:available/0</fo:inline> is
      available:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">ch3:available().</fo:inline>
** exception error: undefined function ch3:available/0</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 7)</fo:inline> Install the new release. The instructions in
      <fo:inline font-family="monospace">$ROOT/releases/B/relup</fo:inline> are executed one by one, resulting
      in the new version of <fo:inline font-family="monospace">ch3</fo:inline> being loaded. The function
      <fo:inline font-family="monospace">ch3:available/0</fo:inline> is now available:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; <fo:inline font-weight="bold">release_handler:install_release("B").</fo:inline>
{ok,"A",[]}
4&gt; <fo:inline font-weight="bold">ch3:available().</fo:inline>
3
5&gt; <fo:inline font-weight="bold">code:which(ch3).</fo:inline>
".../lib/ch_app-2/ebin/ch3.beam"
6&gt; <fo:inline font-weight="bold">code:which(ch_sup).</fo:inline>
".../lib/ch_app-1/ebin/ch_sup.beam"</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Processes in <fo:inline font-family="monospace">ch_app</fo:inline> for which code have not
      been updated, for example, the supervisor, are still evaluating
      code from <fo:inline font-family="monospace">ch_app-1</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 8)</fo:inline> If the target system is now rebooted, it uses
      version "A" again. The "B" version must be made permanent, to be
      used when the system is rebooted.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
7&gt; <fo:inline font-weight="bold">release_handler:make_permanent("B").</fo:inline>
ok</fo:block>
    
  <fo:block id="idp9215120" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.11.8 
      Updating Application Specifications</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a new version of a release is installed, the application
      specifications are automatically updated for all loaded
      applications.</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The information about the new application specifications is
        fetched from the boot script included in the release package.
        Thus, it is important that the boot script is generated from
        the same <fo:inline font-family="monospace">.rel</fo:inline> file as is used to build the release
        package itself.</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifically, the application configuration parameters are
      automatically updated according to (in increasing priority
      order):</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The data in the boot script, fetched from the new
       application resource file <fo:inline font-family="monospace">App.app</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The new <fo:inline font-family="monospace">sys.config</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Command-line arguments <fo:inline font-family="monospace">-App Par Val</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This means that parameter values set in the other system
      configuration files and values set using
      <fo:inline font-family="monospace">application:set_env/3</fo:inline> are disregarded.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When an installed release is made permanent, the system process
      <fo:inline font-family="monospace">init</fo:inline> is set to point out the new <fo:inline font-family="monospace">sys.config</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After the installation, the application controller compares
      the old and new configuration parameters for all running
      applications and call the callback function:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Module:config_change(Changed, New, Removed)</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Module</fo:inline> is the application callback module as defined
      by the <fo:inline font-family="monospace">mod</fo:inline> key in the <fo:inline font-family="monospace">.app</fo:inline> file.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Changed</fo:inline> and <fo:inline font-family="monospace">New</fo:inline> are lists of <fo:inline font-family="monospace">{Par,Val}</fo:inline> for
      all changed and added configuration parameters, respectively.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Removed</fo:inline> is a list of all parameters <fo:inline font-family="monospace">Par</fo:inline> that have
      been removed.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is optional and can be omitted when implementing an
      application callback module.</fo:block>
  <fo:block id="idp9235296" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">9.12  Appup Cookbook</fo:marker>9.12  Appup Cookbook</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section includes examples of <fo:inline font-family="monospace">.appup</fo:inline> files for
    typical cases of upgrades/downgrades done in runtime.</fo:block><fo:block id="idp9239312" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.1 
      Changing a Functional Module</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a functional module has been changed, for example,
      if a new function has been added or a bug has been corrected,
      simple code replacement is sufficient, for example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"2",
 [{"1", [{load_module, m}]}],
 [{"1", [{load_module, m}]}]
}.</fo:block>
  <fo:block id="idp9241600" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.2 
      Changing a Residence Module</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a system implemented according to the OTP design principles,
      all processes, except system processes and special processes,
      reside in one of the behaviours <fo:inline font-family="monospace">supervisor</fo:inline>,
      <fo:inline font-family="monospace">gen_server</fo:inline>, <fo:inline font-family="monospace">gen_fsm</fo:inline>,
      <fo:inline font-family="monospace">gen_statem</fo:inline> or <fo:inline font-family="monospace">gen_event</fo:inline>. These
      belong to the STDLIB application and upgrading/downgrading
      normally requires an emulator restart.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OTP thus provides no support for changing residence modules except
      in the case of <fo:inline font-style="italic">special processes</fo:inline>.</fo:block>
  <fo:block id="idp9246704" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.3 
      Changing a Callback Module</fo:block>
    
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A callback module is a functional module, and for code
      extensions simple code replacement is sufficient.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> When adding a function to <fo:inline font-family="monospace">ch3</fo:inline>,
      as described in the example in
      <fo:inline font-style="italic">Release Handling</fo:inline>,
    <fo:inline font-family="monospace">ch_app.appup</fo:inline> looks as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"2",
 [{"1", [{load_module, ch3}]}],
 [{"1", [{load_module, ch3}]}]
}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OTP also supports changing the internal state of behaviour
      processes, see <fo:inline font-style="italic">Changing Internal State</fo:inline>.</fo:block>
  <fo:block id="idp9253136" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.4 
      Changing Internal State</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case, simple code replacement is not sufficient.
      The process must explicitly transform its state using the callback
      function <fo:inline font-family="monospace">code_change</fo:inline> before switching to the new version
      of the callback module. Thus, synchronized code replacement is
      used.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> Consider <fo:inline font-family="monospace">gen_server</fo:inline> <fo:inline font-family="monospace">ch3</fo:inline> from
      <fo:inline font-style="italic">gen_server Behaviour</fo:inline>.
      The internal state is a term <fo:inline font-family="monospace">Chs</fo:inline>
      representing the available channels. Assume you want to add a counter
      <fo:inline font-family="monospace">N</fo:inline>, which keeps track of the number of <fo:inline font-family="monospace">alloc</fo:inline> requests
      so far. This means that the format must be changed to
      <fo:inline font-family="monospace">{Chs,N}</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">.appup</fo:inline> file can look as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"2",
 [{"1", [{update, ch3, {advanced, []}}]}],
 [{"1", [{update, ch3, {advanced, []}}]}]
}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The third element of the <fo:inline font-family="monospace">update</fo:inline> instruction is a tuple
      <fo:inline font-family="monospace">{advanced,Extra}</fo:inline>, which says that the affected processes
      are to do a state transformation before loading the new version
      of the module. This is done by the processes calling the callback
      function <fo:inline font-family="monospace">code_change</fo:inline> (see the <fo:inline font-family="monospace">gen_server(3)</fo:inline> manual
      page in STDLIB). The term <fo:inline font-family="monospace">Extra</fo:inline>, in this case
      <fo:inline font-family="monospace">[]</fo:inline>, is passed as is to the function:</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(ch3).
...
-export([code_change/3]).
...
code_change({down, _Vsn}, {Chs, N}, _Extra) -&gt;
    {ok, Chs};
code_change(_Vsn, Chs, _Extra) -&gt;
    {ok, {Chs, 0}}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first argument is <fo:inline font-family="monospace">{down,Vsn}</fo:inline> if there is a downgrade,
      or <fo:inline font-family="monospace">Vsn</fo:inline> if there is a upgrade. The term <fo:inline font-family="monospace">Vsn</fo:inline> is
      fetched from the 'original' version of the module, that is,
      the version you are upgrading from, or downgrading to.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The version is defined by the module attribute <fo:inline font-family="monospace">vsn</fo:inline>, if
      any. There is no such attribute in <fo:inline font-family="monospace">ch3</fo:inline>, so in this case
      the version is the checksum (a huge integer) of the beam file, an
      uninteresting value, which is ignored.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The other callback functions of <fo:inline font-family="monospace">ch3</fo:inline> must also be modified
      and perhaps a new interface function must be added, but this is not
      shown here.</fo:block>
  <fo:block id="idp9270448" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.5 
      Module Dependencies</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assume that a module is extended by adding an interface function,
      as in the example in
      <fo:inline font-style="italic">Release Handling</fo:inline>,
      where a function <fo:inline font-family="monospace">available/0</fo:inline> is added to <fo:inline font-family="monospace">ch3</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a call is added to this function, say in module
      <fo:inline font-family="monospace">m1</fo:inline>, a runtime error could can occur during release upgrade if
      the new version of <fo:inline font-family="monospace">m1</fo:inline> is loaded first and calls
      <fo:inline font-family="monospace">ch3:available/0</fo:inline> before the new version of <fo:inline font-family="monospace">ch3</fo:inline> is
      loaded.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, <fo:inline font-family="monospace">ch3</fo:inline> must be loaded before <fo:inline font-family="monospace">m1</fo:inline>, in
      the upgrade case, and conversely in the downgrade case.
      <fo:inline font-family="monospace">m1</fo:inline> is said to be <fo:inline font-weight="bold">dependent on</fo:inline> <fo:inline font-family="monospace">ch3</fo:inline>. In a release
      handling instruction, this is expressed by the
      <fo:inline font-family="monospace">DepMods</fo:inline> element:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{load_module, Module, DepMods}
{update, Module, {advanced, Extra}, DepMods}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">DepMods</fo:inline> is a list of modules, on which <fo:inline font-family="monospace">Module</fo:inline> is
      dependent.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> The module <fo:inline font-family="monospace">m1</fo:inline> in application <fo:inline font-family="monospace">myapp</fo:inline> is
      dependent on <fo:inline font-family="monospace">ch3</fo:inline> when upgrading from "1" to "2", or
      downgrading from "2" to "1":</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
myapp.appup:

{"2",
 [{"1", [{load_module, m1, [ch3]}]}],
 [{"1", [{load_module, m1, [ch3]}]}]
}.

ch_app.appup:

{"2",
 [{"1", [{load_module, ch3}]}],
 [{"1", [{load_module, ch3}]}]
}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If instead <fo:inline font-family="monospace">m1</fo:inline> and <fo:inline font-family="monospace">ch3</fo:inline> belong to the same application,
      the <fo:inline font-family="monospace">.appup</fo:inline> file can look as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"2",
 [{"1",
   [{load_module, ch3},
    {load_module, m1, [ch3]}]}],
 [{"1",
   [{load_module, ch3},
    {load_module, m1, [ch3]}]}]
}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">m1</fo:inline> is dependent on <fo:inline font-family="monospace">ch3</fo:inline> also
      when downgrading. <fo:inline font-family="monospace">systools</fo:inline> knows the difference between
      up- and downgrading and generates a correct <fo:inline font-family="monospace">relup</fo:inline>,
      where <fo:inline font-family="monospace">ch3</fo:inline> is loaded before <fo:inline font-family="monospace">m1</fo:inline> when upgrading, but
      <fo:inline font-family="monospace">m1</fo:inline> is loaded before <fo:inline font-family="monospace">ch3</fo:inline> when downgrading.</fo:block>
  <fo:block id="idp9291376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.6 
      Changing Code for a Special Process</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case, simple code replacement is not sufficient.
      When a new version of a residence module for a special process
      is loaded, the process must make a fully qualified call to
      its loop function to switch to the new code. Thus, synchronized
      code replacement must be used.</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name(s) of the user-defined residence module(s) must be
        listed in the <fo:inline font-family="monospace">Modules</fo:inline> part of the child specification
        for the special process. Otherwise the release handler cannot
        find the process.</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> Consider the example <fo:inline font-family="monospace">ch4</fo:inline> in
      <fo:inline font-style="italic">sys and proc_lib</fo:inline>.
      When started by a supervisor, the child specification can look
      as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{ch4, {ch4, start_link, []},
 permanent, brutal_kill, worker, [ch4]}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">ch4</fo:inline> is part of the application <fo:inline font-family="monospace">sp_app</fo:inline> and a new
      version of the module is to be loaded when upgrading from
      version "1" to "2" of this application, <fo:inline font-family="monospace">sp_app.appup</fo:inline> can
      look as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"2",
 [{"1", [{update, ch4, {advanced, []}}]}],
 [{"1", [{update, ch4, {advanced, []}}]}]
}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">update</fo:inline> instruction must contain the tuple
      <fo:inline font-family="monospace">{advanced,Extra}</fo:inline>. The instruction makes the special
      process call the callback function <fo:inline font-family="monospace">system_code_change/4</fo:inline>, a
      function the user must implement. The term <fo:inline font-family="monospace">Extra</fo:inline>, in this
      case <fo:inline font-family="monospace">[]</fo:inline>, is passed as is to <fo:inline font-family="monospace">system_code_change/4</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(ch4).
...
-export([system_code_change/4]).
...

system_code_change(Chs, _Module, _OldVsn, _Extra) -&gt;
    {ok, Chs}.</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The first argument is the internal state <fo:inline font-family="monospace">State</fo:inline>,
      passed from function
      <fo:inline font-family="monospace">sys:handle_system_msg(Request, From, Parent, Module, Deb, State)</fo:inline>,
      and called by the special process when a system message is received.
      In <fo:inline font-family="monospace">ch4</fo:inline>, the internal state is the set of available channels
      <fo:inline font-family="monospace">Chs</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The second argument is the name of the module
      (<fo:inline font-family="monospace">ch4</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The third argument is <fo:inline font-family="monospace">Vsn</fo:inline> or <fo:inline font-family="monospace">{down,Vsn}</fo:inline>, as
      described for <fo:inline font-family="monospace">gen_server:code_change/3</fo:inline> in
      <fo:inline font-style="italic">Changing Internal State</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case, all arguments but the first are ignored and
      the function simply returns the internal state again. This is
      enough if the code only has been extended. If instead the
      internal state is changed (similar to the example in
      <fo:inline font-style="italic">Changing Internal State</fo:inline>),
      this is done in this function and <fo:inline font-family="monospace">{ok,Chs2}</fo:inline> returned.</fo:block>
  <fo:block id="idp9313216" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.7 
      Changing a Supervisor</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The supervisor behaviour supports changing the internal state,
      that is, changing the restart strategy and maximum restart frequency
      properties, as well as changing the existing child specifications.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Child processes can be added or deleted, but this is not
      handled automatically. Instructions must be given by in
      the <fo:inline font-family="monospace">.appup</fo:inline> file.</fo:block>

    <fo:block id="idp9315600" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Changing Properties</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since the supervisor is to change its internal state,
        synchronized code replacement is required. However,
        a special <fo:inline font-family="monospace">update</fo:inline> instruction must be used.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First, the new version of the callback module must be loaded,
        both in the case of upgrade and downgrade. Then the new return
        value of <fo:inline font-family="monospace">init/1</fo:inline> can be checked and the internal state be
        changed accordingly.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following <fo:inline font-family="monospace">upgrade</fo:inline> instruction is used for
        supervisors:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{update, Module, supervisor}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> To change the restart strategy of
        <fo:inline font-family="monospace">ch_sup</fo:inline> (from
	<fo:inline font-style="italic">Supervisor Behaviour</fo:inline>)
	from <fo:inline font-family="monospace">one_for_one</fo:inline> to <fo:inline font-family="monospace">one_for_all</fo:inline>, change the callback
	function <fo:inline font-family="monospace">init/1</fo:inline> in <fo:inline font-family="monospace">ch_sup.erl</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(ch_sup).
...

init(_Args) -&gt;
    {ok, {#{strategy =&gt; one_for_all, ...}, ...}}.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file <fo:inline font-family="monospace">ch_app.appup</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"2",
 [{"1", [{update, ch_sup, supervisor}]}],
 [{"1", [{update, ch_sup, supervisor}]}]
}.</fo:block>
    

    <fo:block id="idp9326480" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Changing Child Specifications</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The instruction, and thus the <fo:inline font-family="monospace">.appup</fo:inline> file, when
        changing an existing child specification, is the same as when
        changing properties as described earlier:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"2",
 [{"1", [{update, ch_sup, supervisor}]}],
 [{"1", [{update, ch_sup, supervisor}]}]
}.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The changes do not affect existing child processes. For
        example, changing the start function only specifies how
        the child process is to be restarted, if needed later on.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The id of the child specification cannot be changed.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changing the <fo:inline font-family="monospace">Modules</fo:inline> field of the child
        specification can affect the release handling process itself,
        as this field is used to identify which processes are affected
        when doing a synchronized code replacement.</fo:block>
    
    

    <fo:block id="idp9331968" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Adding and Deleting Child Processes</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As stated earlier, changing child specifications does not affect
        existing child processes. New child specifications are
        automatically added, but not deleted. Child processes are
        not automatically started or terminated, this must be
        done using <fo:inline font-family="monospace">apply</fo:inline> instructions.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> Assume a new child process <fo:inline font-family="monospace">m1</fo:inline> is to be
        added to <fo:inline font-family="monospace">ch_sup</fo:inline> when upgrading <fo:inline font-family="monospace">ch_app</fo:inline> from "1" to "2".
        This means <fo:inline font-family="monospace">m1</fo:inline> is to be deleted when downgrading from
        "2" to "1":</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"2",
 [{"1",
   [{update, ch_sup, supervisor},
    {apply, {supervisor, restart_child, [ch_sup, m1]}}
   ]}],
 [{"1",
   [{apply, {supervisor, terminate_child, [ch_sup, m1]}},
    {apply, {supervisor, delete_child, [ch_sup, m1]}},
    {update, ch_sup, supervisor}
   ]}]
}.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The order of the instructions is important.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The supervisor must be registered as
        <fo:inline font-family="monospace">ch_sup</fo:inline> for the script to work. If the supervisor is not
        registered, it cannot be accessed directly from the script.
        Instead a help function that finds the pid of the supervisor
        and calls <fo:inline font-family="monospace">supervisor:restart_child</fo:inline>, and so on, must be
	written. This function is then to be called from the script
        using the <fo:inline font-family="monospace">apply</fo:inline> instruction.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the module <fo:inline font-family="monospace">m1</fo:inline> is introduced in version "2" of
        <fo:inline font-family="monospace">ch_app</fo:inline>, it must also be loaded when upgrading and
        deleted when downgrading:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"2",
 [{"1",
   [{add_module, m1},
    {update, ch_sup, supervisor},
    {apply, {supervisor, restart_child, [ch_sup, m1]}}
   ]}],
 [{"1",
   [{apply, {supervisor, terminate_child, [ch_sup, m1]}},
    {apply, {supervisor, delete_child, [ch_sup, m1]}},
    {update, ch_sup, supervisor},
    {delete_module, m1}
   ]}]
}.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As stated earlier, the order of the instructions is important.
        When upgrading, <fo:inline font-family="monospace">m1</fo:inline> must be loaded, and the supervisor
        child specification changed, before the new child process can
        be started. When downgrading, the child process must be
        terminated before the child specification is changed and the module
        is deleted.</fo:block>
    
  <fo:block id="idp9344064" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.8 
      Adding or Deleting a Module</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> A new functional module <fo:inline font-family="monospace">m</fo:inline> is added to
      <fo:inline font-family="monospace">ch_app</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"2",
 [{"1", [{add_module, m}]}],
 [{"1", [{delete_module, m}]}]</fo:block>
  <fo:block id="idp9347392" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.9 
      Starting or Terminating a Process</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a system structured according to the OTP design principles,
      any process would be a child process belonging to a supervisor, see
      <fo:inline font-style="italic">Adding and Deleting Child Processes</fo:inline>
      in Changing a Supervisor.</fo:block>
  <fo:block id="idp9349632" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.10 
      Adding or Removing an Application</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When adding or removing an application, no <fo:inline font-family="monospace">.appup</fo:inline> file
      is needed. When generating <fo:inline font-family="monospace">relup</fo:inline>, the <fo:inline font-family="monospace">.rel</fo:inline> files
      are compared and the <fo:inline font-family="monospace">add_application</fo:inline> and
      <fo:inline font-family="monospace">remove_application</fo:inline> instructions are added automatically.</fo:block>
  <fo:block id="idp9353312" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.11 
      Restarting an Application</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Restarting an application is useful when a change is too
      complicated to be made without restarting the processes, for
      example, if the supervisor hierarchy has been restructured.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> When adding a child <fo:inline font-family="monospace">m1</fo:inline> to <fo:inline font-family="monospace">ch_sup</fo:inline>, as in
      <fo:inline font-style="italic">Adding and Deleting Child Processes</fo:inline>
      in Changing a Supervisor, an alternative to updating
      the supervisor is to restart the entire application:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"2",
 [{"1", [{restart_application, ch_app}]}],
 [{"1", [{restart_application, ch_app}]}]
}.</fo:block>
  <fo:block id="idp9358672" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.12 
      Changing an Application Specification</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When installing a release, the application specifications are
      automatically updated before evaluating the <fo:inline font-family="monospace">relup</fo:inline> script.
      Thus, no instructions are needed in the <fo:inline font-family="monospace">.appup</fo:inline> file:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"2",
 [{"1", []}],
 [{"1", []}]
}.</fo:block>
  <fo:block id="idp9361520" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.13 
      Changing Application Configuration</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changing an application configuration by updating the <fo:inline font-family="monospace">env</fo:inline>
      key in the <fo:inline font-family="monospace">.app</fo:inline> file is an instance of changing an
      application specification, see the previous section.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Alternatively, application configuration parameters can be
      added or updated in <fo:inline font-family="monospace">sys.config</fo:inline>.</fo:block>
  <fo:block id="idp9364848" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.14 
      Changing Included Applications</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The release handling instructions for adding, removing, and
      restarting applications apply to primary applications only.
      There are no corresponding instructions for included
      applications. However, since an included application is really a
      supervision tree with a topmost supervisor, started as a child
      process to a supervisor in the including application, a
      <fo:inline font-family="monospace">relup</fo:inline> file can be manually created.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> Assume there is a release containing an application
      <fo:inline font-family="monospace">prim_app</fo:inline>, which have a supervisor <fo:inline font-family="monospace">prim_sup</fo:inline> in its
      supervision tree.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a new version of the release, the application <fo:inline font-family="monospace">ch_app</fo:inline>
      is to be included in <fo:inline font-family="monospace">prim_app</fo:inline>. That is,
      its topmost supervisor <fo:inline font-family="monospace">ch_sup</fo:inline> is to be started as a child
      process to <fo:inline font-family="monospace">prim_sup</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The workflow is as follows:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1)</fo:inline> Edit the code for <fo:inline font-family="monospace">prim_sup</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
init(...) -&gt;
    {ok, {...supervisor flags...,
          [...,
           {ch_sup, {ch_sup,start_link,[]},
            permanent,infinity,supervisor,[ch_sup]},
           ...]}}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2)</fo:inline> Edit the <fo:inline font-family="monospace">.app</fo:inline> file for <fo:inline font-family="monospace">prim_app</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{application, prim_app,
 [...,
  {vsn, "2"},
  ...,
  {included_applications, [ch_app]},
  ...
 ]}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 3)</fo:inline> Create a new <fo:inline font-family="monospace">.rel</fo:inline> file, including
      <fo:inline font-family="monospace">ch_app</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{release,
 ...,
 [...,
  {prim_app, "2"},
  {ch_app, "1"}]}.</fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The included application can be started in two ways.
  This is described in the next two sections.</fo:block>

    <fo:block id="idp9378848" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Application Restart</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 4a)</fo:inline> One way to start the included application is to
        restart the entire <fo:inline font-family="monospace">prim_app</fo:inline> application. Normally, the
	<fo:inline font-family="monospace">restart_application</fo:inline> instruction in the <fo:inline font-family="monospace">.appup</fo:inline> file
        for <fo:inline font-family="monospace">prim_app</fo:inline> would be used.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, if this is done and a <fo:inline font-family="monospace">relup</fo:inline> file is generated,
        not only would it contain instructions for restarting (that is,
        removing and adding) <fo:inline font-family="monospace">prim_app</fo:inline>, it would also contain
        instructions for starting <fo:inline font-family="monospace">ch_app</fo:inline> (and stopping it, in
        the case of downgrade). This is because <fo:inline font-family="monospace">ch_app</fo:inline> is included
	in the new <fo:inline font-family="monospace">.rel</fo:inline> file, but not in the old one.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Instead, a correct <fo:inline font-family="monospace">relup</fo:inline> file can be created manually,
        either from scratch or by editing the generated version.
        The instructions for starting/stopping <fo:inline font-family="monospace">ch_app</fo:inline> are
        replaced by instructions for loading/unloading the application:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"B",
 [{"A",
   [],
   [{load_object_code,{ch_app,"1",[ch_sup,ch3]}},
    {load_object_code,{prim_app,"2",[prim_app,prim_sup]}},
    point_of_no_return,
    {apply,{application,stop,[prim_app]}},
    {remove,{prim_app,brutal_purge,brutal_purge}},
    {remove,{prim_sup,brutal_purge,brutal_purge}},
    {purge,[prim_app,prim_sup]},
    {load,{prim_app,brutal_purge,brutal_purge}},
    {load,{prim_sup,brutal_purge,brutal_purge}},
    {load,{ch_sup,brutal_purge,brutal_purge}},
    {load,{ch3,brutal_purge,brutal_purge}},
    {apply,{application,load,[ch_app]}},
    {apply,{application,start,[prim_app,permanent]}}]}],
 [{"A",
   [],
   [{load_object_code,{prim_app,"1",[prim_app,prim_sup]}},
    point_of_no_return,
    {apply,{application,stop,[prim_app]}},
    {apply,{application,unload,[ch_app]}},
    {remove,{ch_sup,brutal_purge,brutal_purge}},
    {remove,{ch3,brutal_purge,brutal_purge}},
    {purge,[ch_sup,ch3]},
    {remove,{prim_app,brutal_purge,brutal_purge}},
    {remove,{prim_sup,brutal_purge,brutal_purge}},
    {purge,[prim_app,prim_sup]},
    {load,{prim_app,brutal_purge,brutal_purge}},
    {load,{prim_sup,brutal_purge,brutal_purge}},
    {apply,{application,start,[prim_app,permanent]}}]}]
}.</fo:block>
    

    <fo:block id="idp9388752" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Supervisor Change</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 4b)</fo:inline> Another way to start the included
        application (or stop it
        in the case of downgrade) is by combining instructions for
        adding and removing child processes to/from <fo:inline font-family="monospace">prim_sup</fo:inline> with
        instructions for loading/unloading all <fo:inline font-family="monospace">ch_app</fo:inline> code and
        its application specification.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Again, the <fo:inline font-family="monospace">relup</fo:inline> file is created manually. Either from
        scratch or by editing a generated version. Load all code for
        <fo:inline font-family="monospace">ch_app</fo:inline> first, and also load the application
        specification, before <fo:inline font-family="monospace">prim_sup</fo:inline> is updated. When
        downgrading, <fo:inline font-family="monospace">prim_sup</fo:inline> is to updated first, before
        the code for <fo:inline font-family="monospace">ch_app</fo:inline> and its application specification
        are unloaded.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"B",
 [{"A",
   [],
   [{load_object_code,{ch_app,"1",[ch_sup,ch3]}},
    {load_object_code,{prim_app,"2",[prim_sup]}},
    point_of_no_return,
    {load,{ch_sup,brutal_purge,brutal_purge}},
    {load,{ch3,brutal_purge,brutal_purge}},
    {apply,{application,load,[ch_app]}},
    {suspend,[prim_sup]},
    {load,{prim_sup,brutal_purge,brutal_purge}},
    {code_change,up,[{prim_sup,[]}]},
    {resume,[prim_sup]},
    {apply,{supervisor,restart_child,[prim_sup,ch_sup]}}]}],
 [{"A",
   [],
   [{load_object_code,{prim_app,"1",[prim_sup]}},
    point_of_no_return,
    {apply,{supervisor,terminate_child,[prim_sup,ch_sup]}},
    {apply,{supervisor,delete_child,[prim_sup,ch_sup]}},
    {suspend,[prim_sup]},
    {load,{prim_sup,brutal_purge,brutal_purge}},
    {code_change,down,[{prim_sup,[]}]},
    {resume,[prim_sup]},
    {remove,{ch_sup,brutal_purge,brutal_purge}},
    {remove,{ch3,brutal_purge,brutal_purge}},
    {purge,[ch_sup,ch3]},
    {apply,{application,unload,[ch_app]}}]}]
}.</fo:block>
    
  <fo:block id="idp9396304" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.15 
      Changing Non-Erlang Code</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changing code for a program written in another programming
      language than Erlang, for example, a port program, is
      application-dependent and OTP provides no special support for it.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline> When changing code for a port program, assume that
      the Erlang process controlling the port is a <fo:inline font-family="monospace">gen_server</fo:inline>
      <fo:inline font-family="monospace">portc</fo:inline> and that the port is opened in the callback function
      <fo:inline font-family="monospace">init/1</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
init(...) -&gt;
    ...,
    PortPrg = filename:join(code:priv_dir(App), "portc"),
    Port = open_port({spawn,PortPrg}, [...]),
    ...,
    {ok, #state{port=Port, ...}}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the port program is to be updated, the code for the
      <fo:inline font-family="monospace">gen_server</fo:inline> can be extended with a <fo:inline font-family="monospace">code_change</fo:inline> function,
      which closes the old port and opens a new port.
      (If necessary, the <fo:inline font-family="monospace">gen_server</fo:inline> can
      first request data that must be saved from the port
      program and pass this data to the new port):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
code_change(_OldVsn, State, port) -&gt;
    State#state.port ! close,
    receive
        {Port,close} -&gt;
            true
    end,
    PortPrg = filename:join(code:priv_dir(App), "portc"),
    Port = open_port({spawn,PortPrg}, [...]),
    {ok, #state{port=Port, ...}}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Update the application version number in the <fo:inline font-family="monospace">.app</fo:inline> file
      and write an <fo:inline font-family="monospace">.appup</fo:inline> file:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
["2",
 [{"1", [{update, portc, {advanced,port}}]}],
 [{"1", [{update, portc, {advanced,port}}]}]
].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Ensure that the <fo:inline font-family="monospace">priv</fo:inline> directory, where the C program is
      located, is included in the new release package:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">systools:make_tar("my_release", [{dirs,[priv]}]).</fo:inline>
...</fo:block>
  <fo:block id="idp9408032" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.16 
      Emulator Restart and Upgrade</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two upgrade instructions restart the emulator:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">restart_new_emulator</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Intended when ERTS, Kernel, STDLIB, or
      SASL is upgraded. It is automatically added when the
      <fo:inline font-family="monospace">relup</fo:inline> file is generated by <fo:inline font-family="monospace">systools:make_relup/3,4</fo:inline>.
      It is executed before all other upgrade instructions.
      For more information about this instruction, see
      restart_new_emulator (Low-Level) in
      <fo:inline font-style="italic">Release Handling Instructions</fo:inline>.
      </fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">restart_emulator</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used when a restart of the emulator is required after all
      other upgrade instructions are executed.
      For more information about this instruction, see
      restart_emulator (Low-Level) in
      <fo:inline font-style="italic">Release Handling Instructions</fo:inline>.
      </fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an emulator restart is necessary and no upgrade instructions
      are needed, that is, if the restart itself is enough for the
      upgraded applications to start running the new versions, a
      simple <fo:inline font-family="monospace">relup</fo:inline> file can be created manually:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{"B",
 [{"A",
   [],
   [restart_emulator]}],
 [{"A",
   [],
   [restart_emulator]}]
}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case, the release handler framework with automatic
      packing and unpacking of release packages, automatic path
      updates, and so on, can be used without having to specify
      <fo:inline font-family="monospace">.appup</fo:inline> files.</fo:block>
  <fo:block id="idp9418272" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">9.12.17 
      Emulator Upgrade From Pre OTP R15</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From OTP R15, an emulator upgrade is performed by restarting
    the emulator with new versions of the core applications
    (Kernel, STDLIB, and SASL) before loading code
    and running upgrade instruction for other applications. For this
    to work, the release to upgrade from must include OTP R15 or
    later.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the case where the release to upgrade from includes an
    earlier emulator version, <fo:inline font-family="monospace">systools:make_relup</fo:inline> creates a
    backwards compatible relup file. This means that all upgrade
    instructions are executed before the emulator is
    restarted. The new application code is therefore loaded into
    the old emulator. If the new code is compiled with the new
    emulator, there can be cases where the beam format has changed
    and beam files cannot be loaded. To overcome this problem, compile
    the new code with the old emulator.</fo:block>
  <fo:block id="idp3532640" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">10   
      OAM Principles</fo:block><fo:block id="idp3710912" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">10.1  Introduction</fo:marker>10.1  Introduction</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Operation and Maintenance (OAM) support in OTP consists of a
  generic model for management subsystems in OTP, and some components
  to be used in these subsystems. This section describes the model.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The main idea in the model is that it is not tied to any specific
  management protocol. An Application Programming Interface (API) is
  defined, which can be used to write adaptations for specific
  management protocols.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each OAM component in OTP is implemented as one sub-application, which
  can be included in a management application for the system. Notice that
  such a complete management application is not in the scope of this
  generic functionality. However, this section includes examples
  illustrating how such an application can be built.</fo:block><fo:block id="idp3705392" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">10.1.1 
      Terminology</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The protocol-independent architectural model on the network level
    is the well-known client-server model for management operations. This
    model is based on the client-server principle, where the manager
    (client) sends a request from a manager to an agent (server) when it
    accesses management information. The agent sends a reply back to the
    manager. There are two main differences to the normal
    client-server model:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Usually a few managers communicate with many agents.</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The agent can spontaneously send a notification, for example,
      an alarm, to the manager.</fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following picture illustrates the idea:</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../oam/terminology.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        1.1:
         
        Terminology</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The manager is often referred to as the <fo:inline font-weight="bold">Network Management
    System (NMS)</fo:inline>, to emphasize that it usually is realized as a
    program that presents data to an operator.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The agent is an entity that executes within a <fo:inline font-weight="bold">Network
    Element (NE)</fo:inline>. In OTP, the NE can be a distributed system,
    meaning that the distributed system is managed as one entity.
    Of course, the agent can be configured to be able to run on one
    of several nodes, making it a distributed OTP application.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The management information is defined in a <fo:inline font-weight="bold">Management
    Information Base (MIB)</fo:inline>. It is a formal definition of which
    information the agent makes available to the manager. The
    manager accesses the MIB through a management protocol, such
    as SNMP, CMIP, HTTP, or CORBA. Each protocol has its own MIB
    definition language. In SNMP, it is a subset of ASN.1, in CMIP
    it is GDMO, in HTTP it is implicit, and using CORBA, it is IDL.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Usually, the entities defined in the MIB are
    called <fo:inline font-weight="bold">Managed Objects (MOs)</fo:inline>, although they do not
    have to be objects in the object-oriented way. For example,
    a simple scalar variable defined in a MIB is called an MO. The
    MOs are logical objects, not necessarily with a one-to-one
    mapping to the resources.</fo:block>
  <fo:block id="idp3766176" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">10.1.2 
      Model</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section presents the generic protocol-independent model
    for use within an OTP-based NE. This model is used by
    all OAM components and can be used by the applications. The
    advantage of the model is that it clearly separates the
    resources from the management protocol. The resources do not
    need to be aware of which management protocol is used to manage
    the system. The same resources can therefore be managed with
    different protocols.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The entities involved in this model are the agent, which
    terminates the management protocol, and the resources, which
    is to be managed, that is, the actual application entities.
    The resources should in general have no knowledge of the
    management protocol used, and the agent should have no
    knowledge of the managed resources. This implies that a
    translation mechanism is needed, to translate the management
    operations to operations on the resources. This translation
    mechanism is usually called <fo:inline font-weight="bold">instrumentation</fo:inline> and the
    function that implements it is called <fo:inline font-weight="bold">instrumentation
    function</fo:inline>. The instrumentation functions are written for
    each combination of management protocol and resource to be
    managed. For example, if an application is to be managed by
    SNMP and HTTP, two sets of instrumentation functions are
    defined; one that maps SNMP requests to the resources, and
    one that, for example, generates an HTML page for some
    resources.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a manager makes a request to the agent, the following
    illustrates the situation:</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../oam/snmp_model_1.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        1.2:
         
        Request to An Agent by a Manager</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The mapping between an instrumentation function and a
    resource is not necessarily 1-1. It is also possible to write
    one instrumentation function for each resource, and use that
    function from different protocols.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The agent receives a request and maps it to calls to one or
    more instrumentation functions. These functions perform
    operations on the resources to implement the semantics
    associated with the MO.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, a system that is managed with SNMP and HTTP
    can be structured as follows:</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../oam/snmp_model_2.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        1.3:
         
        Structure of a System Managed with SNMP and HTTP</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The resources can send notifications to the manager as well.
    Examples of notifications are events and alarms. The resource
    needs to generate protocol-independent notifications.
    The following picture illustrates how this is achieved:</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="../oam/snmp_model_3.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        1.4:
         
        Notification Handling</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The main idea is that the resource sends the notifications as
    Erlang terms to a dedicated <fo:inline font-family="monospace">gen_event</fo:inline> process. Into this
    process, handlers for the different management protocols are
    installed. When an event is received by this process, it is
    forwarded to each installed handler. The handlers are
    responsible for translating the event into a notification to be
    sent over the management protocol. For example, a handler for
    SNMP translates each event into an SNMP trap.</fo:block>
  <fo:block id="idp1540336" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">10.1.3 
      SNMP-Based OAM</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For all OAM components, SNMP adaptations are provided. Other
    adaptations might be defined in the future.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The OAM components, and some other OTP applications, define
    SNMP MIBs. These MIBs are written in SNMPv2 SMI syntax, as
    defined in RFC 1902. For convenience we also deliver the SNMPv1
    SMI equivalent. All MIBs are designed to be v1/v2 compatible,
    that is, the v2 MIBs do not use any construct not available in
    v1.</fo:block>

    <fo:block id="idp2537008" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">MIB Structure</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The top-level OTP MIB is called <fo:inline font-family="monospace">OTP-REG</fo:inline> and it is
      included in the SASL application. All other OTP MIBs
      import some objects from this MIB.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each MIB is contained in one application. The MIB text
      files are stored under <fo:inline font-family="monospace">mibs/&lt;MIB&gt;.mib</fo:inline> in
      the application directory. The generated <fo:inline font-family="monospace">.hrl</fo:inline> files
      with constant declarations are stored under
      <fo:inline font-family="monospace">include/&lt;MIB&gt;.hrl</fo:inline>, and the compiled MIBs
      are stored under <fo:inline font-family="monospace">priv/mibs/&lt;MIB&gt;.bin</fo:inline>.
      For example, the <fo:inline font-family="monospace">OTP-MIB</fo:inline> is included in the
      SASL application:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
sasl-1.3/mibs/OTP-MIB.mib
include/OTP-MIB.hrl
priv/mibs/OTP-MIB.bin</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application that needs to import this MIB into another
      MIB is to use the <fo:inline font-family="monospace">il</fo:inline> option to the SNMP MIB compiler:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
snmp:c("MY-MIB", [{il, ["sasl/priv/mibs"]}]).</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the application needs to include the generated
      <fo:inline font-family="monospace">.hrl</fo:inline> file, it is to use the <fo:inline font-family="monospace">-include_lib</fo:inline>
      directive to the Erlang compiler:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(my_mib).
-include_lib("sasl/include/OTP-MIB.hrl").</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following MIBs are defined in the OTP system:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OTP-REG)</fo:inline> (in SASL) contains the top-level
	OTP registration objects, used by all other MIBs.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OTP-TC</fo:inline> (in SASL) contains the general
	Textual Conventions, which can be used by any other MIB.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OTP-MIB</fo:inline> (in SASL) contains objects for
	instrumentation of the Erlang nodes, the Erlang machines,
	and the applications in the system.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OTP-OS-MON-MIB</fo:inline> (in <fo:inline font-family="monospace">oc_mon</fo:inline>) contains
	objects for instrumentation of disk, memory, and CPU use
	of the nodes in the system.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OTP-SNMPEA-MIB</fo:inline> (in <fo:inline font-family="monospace">snmp</fo:inline>)
	contains objects for instrumentation and control of the extensible
	SNMP agent itself. The agent also implements the standard SNMPv2-MIB
	(or v1 part of MIB-II, if SNMPv1 is used).</fo:block></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OTP-EVA-MIB</fo:inline> (in <fo:inline font-family="monospace">eva</fo:inline>) contains objects
	for instrumentation and control of the events and alarms in
	the system.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OTP-LOG-MIB</fo:inline> (in <fo:inline font-family="monospace">eva</fo:inline>) contains objects
	for instrumentation and control of the logs and FTP transfer of
	logs.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OTP-EVA-LOG-MIB</fo:inline> (in <fo:inline font-family="monospace">eva</fo:inline>) contains objects
	for instrumentation and control of the events and alarm logs
	in the system.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OTP-SNMPEA-LOG-MIB</fo:inline> (in <fo:inline font-family="monospace">eva</fo:inline>) contains
	objects for instrumentation and control of the SNMP audit
	trail log in the system.</fo:block></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The different applications use different strategies for
      loading the MIBs into the agent. Some MIB implementations are
      code-only, while others need a server. One way, used by the
      code-only MIB implementations, is for the user to call a
      function such as <fo:inline font-family="monospace">otp_mib:init(Agent)</fo:inline> to load the MIB,
      and <fo:inline font-family="monospace">otp_mib:stop(Agent)</fo:inline> to unload the MIB. See the
      manual page for each application for a description of how
      to load each MIB.</fo:block>
    
  </fo:flow>
  </fo:page-sequence>
</fo:root>
