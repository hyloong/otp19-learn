<module name="pg2">
<type>
  <name>name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-name">name()</marker> = any()</typehead></typedecl>
</type>
<type>
  <name>state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state">state()</marker> = #state{}</typehead></typedecl>
</type>
<spec>
  <name>create</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>create(Name :: <seealso marker="#type-name">name()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>delete</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>delete(Name :: <seealso marker="#type-name">name()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>get_closest_pid</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_closest_pid(Name) -&gt; pid() | {error, Reason}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = {no_process, Name} | {no_such_group, Name}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>get_local_members</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_local_members(Name) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[pid()] | {error, {no_such_group, Name}}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>get_members</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_members(Name) -&gt; [pid()] | {error, {no_such_group, Name}}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>handle_call(Call ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{create, Name} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{delete, Name} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{join, Name, Pid :: pid()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{leave, Name, Pid :: pid()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>From :: {pid(), Tag :: any()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{reply, ok, <seealso marker="#type-state">state()</seealso>}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Call</anno>
  <anno>From</anno>
  <anno>Name</anno>
  <anno>Pid</anno>
  <anno>State</anno>
  <anno>Tag</anno>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_cast(Cast ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{exchange, node(), Names :: [[Name, ...]]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{del_member, Name, Pid :: pid()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seealso marker="#type-state">state()</seealso>}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cast</anno>
  <anno>Name</anno>
  <anno>Names</anno>
  <anno>Pid</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_info(Tuple :: tuple(), State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>State</anno>
  <anno>Tuple</anno>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(Arg :: []) -&gt; {ok, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Arg</anno>
</spec>
<spec>
  <name>join</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>join(Name, Pid :: pid()) -&gt; ok | {error, {no_such_group, Name}}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>leave</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>leave(Name, Pid :: pid()) -&gt; ok | {error, {no_such_group, Name}}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>start</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>start() -&gt; {ok, pid()} | {error, any()}</head></clause>
  </contract>
</spec>
<spec>
  <name>start_link</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>start_link() -&gt; {ok, pid()} | {error, any()}</head></clause>
  </contract>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(Reason :: any(), State :: <seealso marker="#type-state">state()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Reason</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>which_groups</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>which_groups() -&gt; [Name :: <seealso marker="#type-name">name()</seealso>]</head></clause>
  </contract>
  <anno>Name</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:44.</timestamp>
</module>